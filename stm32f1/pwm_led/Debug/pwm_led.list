
pwm_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000bc  20000070  08003ec4  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000012c  08003ec4  0002012c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001091d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002097  00000000  00000000  000309b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000bc8  00000000  00000000  00032a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af0  00000000  00000000  00033618  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000051b6  00000000  00000000  00034108  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000369b  00000000  00000000  000392be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c959  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000388c  00000000  00000000  0003c9d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c78 	.word	0x08003c78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003c78 	.word	0x08003c78

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f91d 	bl	800039c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fb36 	bl	80027d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f935 	bl	8000406 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8fd 	bl	80003b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000a4 	.word	0x200000a4

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000a4 	.word	0x200000a4

08000210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800027e:	4908      	ldr	r1, [pc, #32]	; (80002a0 <NVIC_EnableIRQ+0x2c>)
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	095b      	lsrs	r3, r3, #5
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	f002 021f 	and.w	r2, r2, #31
 800028c:	2001      	movs	r0, #1
 800028e:	fa00 f202 	lsl.w	r2, r0, r2
 8000292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da0b      	bge.n	80002d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	490d      	ldr	r1, [pc, #52]	; (80002f0 <NVIC_SetPriority+0x4c>)
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f003 030f 	and.w	r3, r3, #15
 80002c0:	3b04      	subs	r3, #4
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	b2d2      	uxtb	r2, r2
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ce:	e009      	b.n	80002e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	4908      	ldr	r1, [pc, #32]	; (80002f4 <NVIC_SetPriority+0x50>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b089      	sub	sp, #36	; 0x24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	f1c3 0307 	rsb	r3, r3, #7
 8000312:	2b04      	cmp	r3, #4
 8000314:	bf28      	it	cs
 8000316:	2304      	movcs	r3, #4
 8000318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3304      	adds	r3, #4
 800031e:	2b06      	cmp	r3, #6
 8000320:	d902      	bls.n	8000328 <NVIC_EncodePriority+0x30>
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3b03      	subs	r3, #3
 8000326:	e000      	b.n	800032a <NVIC_EncodePriority+0x32>
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	2201      	movs	r2, #1
 800032e:	69bb      	ldr	r3, [r7, #24]
 8000330:	fa02 f303 	lsl.w	r3, r2, r3
 8000334:	1e5a      	subs	r2, r3, #1
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	401a      	ands	r2, r3
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800033e:	2101      	movs	r1, #1
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	1e59      	subs	r1, r3, #1
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800034c:	4313      	orrs	r3, r2
         );
}
 800034e:	4618      	mov	r0, r3
 8000350:	3724      	adds	r7, #36	; 0x24
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3b01      	subs	r3, #1
 8000364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000368:	d301      	bcc.n	800036e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800036a:	2301      	movs	r3, #1
 800036c:	e00f      	b.n	800038e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <SysTick_Config+0x40>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3b01      	subs	r3, #1
 8000374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000376:	210f      	movs	r1, #15
 8000378:	f04f 30ff 	mov.w	r0, #4294967295
 800037c:	f7ff ff92 	bl	80002a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <SysTick_Config+0x40>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000386:	4b04      	ldr	r3, [pc, #16]	; (8000398 <SysTick_Config+0x40>)
 8000388:	2207      	movs	r2, #7
 800038a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	e000e010 	.word	0xe000e010

0800039c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f7ff ff33 	bl	8000210 <NVIC_SetPriorityGrouping>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b086      	sub	sp, #24
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	4603      	mov	r3, r0
 80003ba:	60b9      	str	r1, [r7, #8]
 80003bc:	607a      	str	r2, [r7, #4]
 80003be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c4:	f7ff ff48 	bl	8000258 <NVIC_GetPriorityGrouping>
 80003c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	68b9      	ldr	r1, [r7, #8]
 80003ce:	6978      	ldr	r0, [r7, #20]
 80003d0:	f7ff ff92 	bl	80002f8 <NVIC_EncodePriority>
 80003d4:	4602      	mov	r2, r0
 80003d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003da:	4611      	mov	r1, r2
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff ff61 	bl	80002a4 <NVIC_SetPriority>
}
 80003e2:	bf00      	nop
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	b082      	sub	sp, #8
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	4603      	mov	r3, r0
 80003f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff3b 	bl	8000274 <NVIC_EnableIRQ>
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f7ff ffa2 	bl	8000358 <SysTick_Config>
 8000414:	4603      	mov	r3, r0
}
 8000416:	4618      	mov	r0, r3
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000428:	2300      	movs	r3, #0
 800042a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000432:	2b02      	cmp	r3, #2
 8000434:	d005      	beq.n	8000442 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2204      	movs	r2, #4
 800043a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800043c:	2301      	movs	r3, #1
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e057      	b.n	80004f2 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	6812      	ldr	r2, [r2, #0]
 800044a:	6812      	ldr	r2, [r2, #0]
 800044c:	f022 020e 	bic.w	r2, r2, #14
 8000450:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	6812      	ldr	r2, [r2, #0]
 800045a:	6812      	ldr	r2, [r2, #0]
 800045c:	f022 0201 	bic.w	r2, r2, #1
 8000460:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000462:	4a26      	ldr	r2, [pc, #152]	; (80004fc <HAL_DMA_Abort_IT+0xdc>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4619      	mov	r1, r3
 800046a:	4b25      	ldr	r3, [pc, #148]	; (8000500 <HAL_DMA_Abort_IT+0xe0>)
 800046c:	4299      	cmp	r1, r3
 800046e:	d02e      	beq.n	80004ce <HAL_DMA_Abort_IT+0xae>
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	4b23      	ldr	r3, [pc, #140]	; (8000504 <HAL_DMA_Abort_IT+0xe4>)
 8000478:	4299      	cmp	r1, r3
 800047a:	d026      	beq.n	80004ca <HAL_DMA_Abort_IT+0xaa>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	4b21      	ldr	r3, [pc, #132]	; (8000508 <HAL_DMA_Abort_IT+0xe8>)
 8000484:	4299      	cmp	r1, r3
 8000486:	d01d      	beq.n	80004c4 <HAL_DMA_Abort_IT+0xa4>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4619      	mov	r1, r3
 800048e:	4b1f      	ldr	r3, [pc, #124]	; (800050c <HAL_DMA_Abort_IT+0xec>)
 8000490:	4299      	cmp	r1, r3
 8000492:	d014      	beq.n	80004be <HAL_DMA_Abort_IT+0x9e>
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4619      	mov	r1, r3
 800049a:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <HAL_DMA_Abort_IT+0xf0>)
 800049c:	4299      	cmp	r1, r3
 800049e:	d00b      	beq.n	80004b8 <HAL_DMA_Abort_IT+0x98>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4619      	mov	r1, r3
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <HAL_DMA_Abort_IT+0xf4>)
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d102      	bne.n	80004b2 <HAL_DMA_Abort_IT+0x92>
 80004ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004b0:	e00e      	b.n	80004d0 <HAL_DMA_Abort_IT+0xb0>
 80004b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004b6:	e00b      	b.n	80004d0 <HAL_DMA_Abort_IT+0xb0>
 80004b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004bc:	e008      	b.n	80004d0 <HAL_DMA_Abort_IT+0xb0>
 80004be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c2:	e005      	b.n	80004d0 <HAL_DMA_Abort_IT+0xb0>
 80004c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004c8:	e002      	b.n	80004d0 <HAL_DMA_Abort_IT+0xb0>
 80004ca:	2310      	movs	r3, #16
 80004cc:	e000      	b.n	80004d0 <HAL_DMA_Abort_IT+0xb0>
 80004ce:	2301      	movs	r3, #1
 80004d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2201      	movs	r2, #1
 80004d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d003      	beq.n	80004f2 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	4798      	blx	r3
    } 
  }
  return status;
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40020000 	.word	0x40020000
 8000500:	40020008 	.word	0x40020008
 8000504:	4002001c 	.word	0x4002001c
 8000508:	40020030 	.word	0x40020030
 800050c:	40020044 	.word	0x40020044
 8000510:	40020058 	.word	0x40020058
 8000514:	4002006c 	.word	0x4002006c

08000518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000518:	b480      	push	{r7}
 800051a:	b08b      	sub	sp, #44	; 0x2c
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800052e:	2300      	movs	r3, #0
 8000530:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000532:	2300      	movs	r3, #0
 8000534:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000536:	2300      	movs	r3, #0
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
 800053a:	e127      	b.n	800078c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800053c:	2201      	movs	r2, #1
 800053e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	4013      	ands	r3, r2
 800054e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000550:	69ba      	ldr	r2, [r7, #24]
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	429a      	cmp	r2, r3
 8000556:	f040 8116 	bne.w	8000786 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	2b12      	cmp	r3, #18
 8000560:	d034      	beq.n	80005cc <HAL_GPIO_Init+0xb4>
 8000562:	2b12      	cmp	r3, #18
 8000564:	d80d      	bhi.n	8000582 <HAL_GPIO_Init+0x6a>
 8000566:	2b02      	cmp	r3, #2
 8000568:	d02b      	beq.n	80005c2 <HAL_GPIO_Init+0xaa>
 800056a:	2b02      	cmp	r3, #2
 800056c:	d804      	bhi.n	8000578 <HAL_GPIO_Init+0x60>
 800056e:	2b00      	cmp	r3, #0
 8000570:	d031      	beq.n	80005d6 <HAL_GPIO_Init+0xbe>
 8000572:	2b01      	cmp	r3, #1
 8000574:	d01c      	beq.n	80005b0 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000576:	e048      	b.n	800060a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000578:	2b03      	cmp	r3, #3
 800057a:	d043      	beq.n	8000604 <HAL_GPIO_Init+0xec>
 800057c:	2b11      	cmp	r3, #17
 800057e:	d01b      	beq.n	80005b8 <HAL_GPIO_Init+0xa0>
          break;
 8000580:	e043      	b.n	800060a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000582:	4a87      	ldr	r2, [pc, #540]	; (80007a0 <HAL_GPIO_Init+0x288>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d026      	beq.n	80005d6 <HAL_GPIO_Init+0xbe>
 8000588:	4a85      	ldr	r2, [pc, #532]	; (80007a0 <HAL_GPIO_Init+0x288>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d806      	bhi.n	800059c <HAL_GPIO_Init+0x84>
 800058e:	4a85      	ldr	r2, [pc, #532]	; (80007a4 <HAL_GPIO_Init+0x28c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d020      	beq.n	80005d6 <HAL_GPIO_Init+0xbe>
 8000594:	4a84      	ldr	r2, [pc, #528]	; (80007a8 <HAL_GPIO_Init+0x290>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d01d      	beq.n	80005d6 <HAL_GPIO_Init+0xbe>
          break;
 800059a:	e036      	b.n	800060a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800059c:	4a83      	ldr	r2, [pc, #524]	; (80007ac <HAL_GPIO_Init+0x294>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d019      	beq.n	80005d6 <HAL_GPIO_Init+0xbe>
 80005a2:	4a83      	ldr	r2, [pc, #524]	; (80007b0 <HAL_GPIO_Init+0x298>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d016      	beq.n	80005d6 <HAL_GPIO_Init+0xbe>
 80005a8:	4a82      	ldr	r2, [pc, #520]	; (80007b4 <HAL_GPIO_Init+0x29c>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d013      	beq.n	80005d6 <HAL_GPIO_Init+0xbe>
          break;
 80005ae:	e02c      	b.n	800060a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	623b      	str	r3, [r7, #32]
          break;
 80005b6:	e028      	b.n	800060a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	3304      	adds	r3, #4
 80005be:	623b      	str	r3, [r7, #32]
          break;
 80005c0:	e023      	b.n	800060a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	3308      	adds	r3, #8
 80005c8:	623b      	str	r3, [r7, #32]
          break;
 80005ca:	e01e      	b.n	800060a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	330c      	adds	r3, #12
 80005d2:	623b      	str	r3, [r7, #32]
          break;
 80005d4:	e019      	b.n	800060a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d102      	bne.n	80005e4 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005de:	2304      	movs	r3, #4
 80005e0:	623b      	str	r3, [r7, #32]
          break;
 80005e2:	e012      	b.n	800060a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d105      	bne.n	80005f8 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005ec:	2308      	movs	r3, #8
 80005ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	69fa      	ldr	r2, [r7, #28]
 80005f4:	611a      	str	r2, [r3, #16]
          break;
 80005f6:	e008      	b.n	800060a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005f8:	2308      	movs	r3, #8
 80005fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	69fa      	ldr	r2, [r7, #28]
 8000600:	615a      	str	r2, [r3, #20]
          break;
 8000602:	e002      	b.n	800060a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
          break;
 8000608:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	2bff      	cmp	r3, #255	; 0xff
 800060e:	d801      	bhi.n	8000614 <HAL_GPIO_Init+0xfc>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	e001      	b.n	8000618 <HAL_GPIO_Init+0x100>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3304      	adds	r3, #4
 8000618:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800061a:	69bb      	ldr	r3, [r7, #24]
 800061c:	2bff      	cmp	r3, #255	; 0xff
 800061e:	d802      	bhi.n	8000626 <HAL_GPIO_Init+0x10e>
 8000620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	e002      	b.n	800062c <HAL_GPIO_Init+0x114>
 8000626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000628:	3b08      	subs	r3, #8
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	210f      	movs	r1, #15
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	401a      	ands	r2, r3
 800063e:	6a39      	ldr	r1, [r7, #32]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	431a      	orrs	r2, r3
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	2b00      	cmp	r3, #0
 8000656:	f000 8096 	beq.w	8000786 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800065a:	4a57      	ldr	r2, [pc, #348]	; (80007b8 <HAL_GPIO_Init+0x2a0>)
 800065c:	4b56      	ldr	r3, [pc, #344]	; (80007b8 <HAL_GPIO_Init+0x2a0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b54      	ldr	r3, [pc, #336]	; (80007b8 <HAL_GPIO_Init+0x2a0>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000672:	4a52      	ldr	r2, [pc, #328]	; (80007bc <HAL_GPIO_Init+0x2a4>)
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	089b      	lsrs	r3, r3, #2
 8000678:	3302      	adds	r3, #2
 800067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800067e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	f003 0303 	and.w	r3, r3, #3
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	220f      	movs	r2, #15
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43db      	mvns	r3, r3
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	4013      	ands	r3, r2
 8000694:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a49      	ldr	r2, [pc, #292]	; (80007c0 <HAL_GPIO_Init+0x2a8>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d013      	beq.n	80006c6 <HAL_GPIO_Init+0x1ae>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a48      	ldr	r2, [pc, #288]	; (80007c4 <HAL_GPIO_Init+0x2ac>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d00d      	beq.n	80006c2 <HAL_GPIO_Init+0x1aa>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a47      	ldr	r2, [pc, #284]	; (80007c8 <HAL_GPIO_Init+0x2b0>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d007      	beq.n	80006be <HAL_GPIO_Init+0x1a6>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a46      	ldr	r2, [pc, #280]	; (80007cc <HAL_GPIO_Init+0x2b4>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d101      	bne.n	80006ba <HAL_GPIO_Init+0x1a2>
 80006b6:	2303      	movs	r3, #3
 80006b8:	e006      	b.n	80006c8 <HAL_GPIO_Init+0x1b0>
 80006ba:	2304      	movs	r3, #4
 80006bc:	e004      	b.n	80006c8 <HAL_GPIO_Init+0x1b0>
 80006be:	2302      	movs	r3, #2
 80006c0:	e002      	b.n	80006c8 <HAL_GPIO_Init+0x1b0>
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <HAL_GPIO_Init+0x1b0>
 80006c6:	2300      	movs	r3, #0
 80006c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ca:	f002 0203 	and.w	r2, r2, #3
 80006ce:	0092      	lsls	r2, r2, #2
 80006d0:	4093      	lsls	r3, r2
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80006d8:	4938      	ldr	r1, [pc, #224]	; (80007bc <HAL_GPIO_Init+0x2a4>)
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	089b      	lsrs	r3, r3, #2
 80006de:	3302      	adds	r3, #2
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d006      	beq.n	8000700 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006f2:	4937      	ldr	r1, [pc, #220]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 80006f4:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]
 80006fe:	e006      	b.n	800070e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000700:	4933      	ldr	r1, [pc, #204]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 8000702:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	43db      	mvns	r3, r3
 800070a:	4013      	ands	r3, r2
 800070c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d006      	beq.n	8000728 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800071a:	492d      	ldr	r1, [pc, #180]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 800071c:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	4313      	orrs	r3, r2
 8000724:	604b      	str	r3, [r1, #4]
 8000726:	e006      	b.n	8000736 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000728:	4929      	ldr	r1, [pc, #164]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 800072c:	685a      	ldr	r2, [r3, #4]
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	43db      	mvns	r3, r3
 8000732:	4013      	ands	r3, r2
 8000734:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000742:	4923      	ldr	r1, [pc, #140]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	4313      	orrs	r3, r2
 800074c:	608b      	str	r3, [r1, #8]
 800074e:	e006      	b.n	800075e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000750:	491f      	ldr	r1, [pc, #124]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 8000754:	689a      	ldr	r2, [r3, #8]
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	43db      	mvns	r3, r3
 800075a:	4013      	ands	r3, r2
 800075c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d006      	beq.n	8000778 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800076a:	4919      	ldr	r1, [pc, #100]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 800076e:	68da      	ldr	r2, [r3, #12]
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	4313      	orrs	r3, r2
 8000774:	60cb      	str	r3, [r1, #12]
 8000776:	e006      	b.n	8000786 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000778:	4915      	ldr	r1, [pc, #84]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_GPIO_Init+0x2b8>)
 800077c:	68da      	ldr	r2, [r3, #12]
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	43db      	mvns	r3, r3
 8000782:	4013      	ands	r3, r2
 8000784:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	3301      	adds	r3, #1
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	2b0f      	cmp	r3, #15
 8000790:	f67f aed4 	bls.w	800053c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000794:	bf00      	nop
 8000796:	372c      	adds	r7, #44	; 0x2c
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	10210000 	.word	0x10210000
 80007a4:	10110000 	.word	0x10110000
 80007a8:	10120000 	.word	0x10120000
 80007ac:	10310000 	.word	0x10310000
 80007b0:	10320000 	.word	0x10320000
 80007b4:	10220000 	.word	0x10220000
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010000 	.word	0x40010000
 80007c0:	40010800 	.word	0x40010800
 80007c4:	40010c00 	.word	0x40010c00
 80007c8:	40011000 	.word	0x40011000
 80007cc:	40011400 	.word	0x40011400
 80007d0:	40010400 	.word	0x40010400

080007d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	807b      	strh	r3, [r7, #2]
 80007e0:	4613      	mov	r3, r2
 80007e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007e4:	787b      	ldrb	r3, [r7, #1]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d003      	beq.n	80007f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007ea:	887a      	ldrh	r2, [r7, #2]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80007f0:	e003      	b.n	80007fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007f2:	887b      	ldrh	r3, [r7, #2]
 80007f4:	041a      	lsls	r2, r3, #16
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	611a      	str	r2, [r3, #16]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	88fb      	ldrh	r3, [r7, #6]
 8000814:	4013      	ands	r3, r2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d006      	beq.n	8000828 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f806 	bl	8000834 <HAL_GPIO_EXTI_Callback>
  }
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40010400 	.word	0x40010400

08000834 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	f000 8087 	beq.w	8000970 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000862:	4b92      	ldr	r3, [pc, #584]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f003 030c 	and.w	r3, r3, #12
 800086a:	2b04      	cmp	r3, #4
 800086c:	d00c      	beq.n	8000888 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800086e:	4b8f      	ldr	r3, [pc, #572]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	f003 030c 	and.w	r3, r3, #12
 8000876:	2b08      	cmp	r3, #8
 8000878:	d112      	bne.n	80008a0 <HAL_RCC_OscConfig+0x58>
 800087a:	4b8c      	ldr	r3, [pc, #560]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000886:	d10b      	bne.n	80008a0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000888:	4b88      	ldr	r3, [pc, #544]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000890:	2b00      	cmp	r3, #0
 8000892:	d06c      	beq.n	800096e <HAL_RCC_OscConfig+0x126>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d168      	bne.n	800096e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	e22d      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a8:	d106      	bne.n	80008b8 <HAL_RCC_OscConfig+0x70>
 80008aa:	4a80      	ldr	r2, [pc, #512]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80008ac:	4b7f      	ldr	r3, [pc, #508]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	e02e      	b.n	8000916 <HAL_RCC_OscConfig+0xce>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10c      	bne.n	80008da <HAL_RCC_OscConfig+0x92>
 80008c0:	4a7a      	ldr	r2, [pc, #488]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80008c2:	4b7a      	ldr	r3, [pc, #488]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4a77      	ldr	r2, [pc, #476]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80008ce:	4b77      	ldr	r3, [pc, #476]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	e01d      	b.n	8000916 <HAL_RCC_OscConfig+0xce>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e2:	d10c      	bne.n	80008fe <HAL_RCC_OscConfig+0xb6>
 80008e4:	4a71      	ldr	r2, [pc, #452]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80008e6:	4b71      	ldr	r3, [pc, #452]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4a6e      	ldr	r2, [pc, #440]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80008f2:	4b6e      	ldr	r3, [pc, #440]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	e00b      	b.n	8000916 <HAL_RCC_OscConfig+0xce>
 80008fe:	4a6b      	ldr	r2, [pc, #428]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 8000900:	4b6a      	ldr	r3, [pc, #424]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	4a68      	ldr	r2, [pc, #416]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 800090c:	4b67      	ldr	r3, [pc, #412]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000914:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d013      	beq.n	8000946 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091e:	f7ff fc6d 	bl	80001fc <HAL_GetTick>
 8000922:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000924:	e008      	b.n	8000938 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000926:	f7ff fc69 	bl	80001fc <HAL_GetTick>
 800092a:	4602      	mov	r2, r0
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	2b64      	cmp	r3, #100	; 0x64
 8000932:	d901      	bls.n	8000938 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e1e1      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000938:	4b5c      	ldr	r3, [pc, #368]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f0      	beq.n	8000926 <HAL_RCC_OscConfig+0xde>
 8000944:	e014      	b.n	8000970 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000946:	f7ff fc59 	bl	80001fc <HAL_GetTick>
 800094a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800094c:	e008      	b.n	8000960 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800094e:	f7ff fc55 	bl	80001fc <HAL_GetTick>
 8000952:	4602      	mov	r2, r0
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	2b64      	cmp	r3, #100	; 0x64
 800095a:	d901      	bls.n	8000960 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800095c:	2303      	movs	r3, #3
 800095e:	e1cd      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000960:	4b52      	ldr	r3, [pc, #328]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1f0      	bne.n	800094e <HAL_RCC_OscConfig+0x106>
 800096c:	e000      	b.n	8000970 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800096e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	2b00      	cmp	r3, #0
 800097a:	d063      	beq.n	8000a44 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800097c:	4b4b      	ldr	r3, [pc, #300]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 030c 	and.w	r3, r3, #12
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00b      	beq.n	80009a0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000988:	4b48      	ldr	r3, [pc, #288]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 030c 	and.w	r3, r3, #12
 8000990:	2b08      	cmp	r3, #8
 8000992:	d11c      	bne.n	80009ce <HAL_RCC_OscConfig+0x186>
 8000994:	4b45      	ldr	r3, [pc, #276]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d116      	bne.n	80009ce <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009a0:	4b42      	ldr	r3, [pc, #264]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d005      	beq.n	80009b8 <HAL_RCC_OscConfig+0x170>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	691b      	ldr	r3, [r3, #16]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d001      	beq.n	80009b8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e1a1      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b8:	493c      	ldr	r1, [pc, #240]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80009ba:	4b3c      	ldr	r3, [pc, #240]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009cc:	e03a      	b.n	8000a44 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	691b      	ldr	r3, [r3, #16]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d020      	beq.n	8000a18 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <HAL_RCC_OscConfig+0x268>)
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009dc:	f7ff fc0e 	bl	80001fc <HAL_GetTick>
 80009e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e2:	e008      	b.n	80009f6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e4:	f7ff fc0a 	bl	80001fc <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d901      	bls.n	80009f6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80009f2:	2303      	movs	r3, #3
 80009f4:	e182      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d0f0      	beq.n	80009e4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a02:	492a      	ldr	r1, [pc, #168]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	600b      	str	r3, [r1, #0]
 8000a16:	e015      	b.n	8000a44 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <HAL_RCC_OscConfig+0x268>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a1e:	f7ff fbed 	bl	80001fc <HAL_GetTick>
 8000a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a24:	e008      	b.n	8000a38 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a26:	f7ff fbe9 	bl	80001fc <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d901      	bls.n	8000a38 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000a34:	2303      	movs	r3, #3
 8000a36:	e161      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1f0      	bne.n	8000a26 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d039      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d019      	beq.n	8000a8c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_RCC_OscConfig+0x26c>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a5e:	f7ff fbcd 	bl	80001fc <HAL_GetTick>
 8000a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a64:	e008      	b.n	8000a78 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a66:	f7ff fbc9 	bl	80001fc <HAL_GetTick>
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d901      	bls.n	8000a78 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000a74:	2303      	movs	r3, #3
 8000a76:	e141      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_RCC_OscConfig+0x264>)
 8000a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0f0      	beq.n	8000a66 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fae3 	bl	8001050 <RCC_Delay>
 8000a8a:	e01b      	b.n	8000ac4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_RCC_OscConfig+0x26c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a92:	f7ff fbb3 	bl	80001fc <HAL_GetTick>
 8000a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a98:	e00e      	b.n	8000ab8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a9a:	f7ff fbaf 	bl	80001fc <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d907      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e127      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	42420000 	.word	0x42420000
 8000ab4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab8:	4b92      	ldr	r3, [pc, #584]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1ea      	bne.n	8000a9a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f000 80a6 	beq.w	8000c1e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ad6:	4b8b      	ldr	r3, [pc, #556]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10d      	bne.n	8000afe <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4a88      	ldr	r2, [pc, #544]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000ae4:	4b87      	ldr	r3, [pc, #540]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b85      	ldr	r3, [pc, #532]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000afa:	2301      	movs	r3, #1
 8000afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000afe:	4b82      	ldr	r3, [pc, #520]	; (8000d08 <HAL_RCC_OscConfig+0x4c0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d118      	bne.n	8000b3c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b0a:	4a7f      	ldr	r2, [pc, #508]	; (8000d08 <HAL_RCC_OscConfig+0x4c0>)
 8000b0c:	4b7e      	ldr	r3, [pc, #504]	; (8000d08 <HAL_RCC_OscConfig+0x4c0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b16:	f7ff fb71 	bl	80001fc <HAL_GetTick>
 8000b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b1c:	e008      	b.n	8000b30 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b1e:	f7ff fb6d 	bl	80001fc <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	2b64      	cmp	r3, #100	; 0x64
 8000b2a:	d901      	bls.n	8000b30 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e0e5      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b30:	4b75      	ldr	r3, [pc, #468]	; (8000d08 <HAL_RCC_OscConfig+0x4c0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f0      	beq.n	8000b1e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d106      	bne.n	8000b52 <HAL_RCC_OscConfig+0x30a>
 8000b44:	4a6f      	ldr	r2, [pc, #444]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b46:	4b6f      	ldr	r3, [pc, #444]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b48:	6a1b      	ldr	r3, [r3, #32]
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6213      	str	r3, [r2, #32]
 8000b50:	e02d      	b.n	8000bae <HAL_RCC_OscConfig+0x366>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10c      	bne.n	8000b74 <HAL_RCC_OscConfig+0x32c>
 8000b5a:	4a6a      	ldr	r2, [pc, #424]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b5c:	4b69      	ldr	r3, [pc, #420]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	f023 0301 	bic.w	r3, r3, #1
 8000b64:	6213      	str	r3, [r2, #32]
 8000b66:	4a67      	ldr	r2, [pc, #412]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b68:	4b66      	ldr	r3, [pc, #408]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	f023 0304 	bic.w	r3, r3, #4
 8000b70:	6213      	str	r3, [r2, #32]
 8000b72:	e01c      	b.n	8000bae <HAL_RCC_OscConfig+0x366>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	2b05      	cmp	r3, #5
 8000b7a:	d10c      	bne.n	8000b96 <HAL_RCC_OscConfig+0x34e>
 8000b7c:	4a61      	ldr	r2, [pc, #388]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b7e:	4b61      	ldr	r3, [pc, #388]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b80:	6a1b      	ldr	r3, [r3, #32]
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6213      	str	r3, [r2, #32]
 8000b88:	4a5e      	ldr	r2, [pc, #376]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b8a:	4b5e      	ldr	r3, [pc, #376]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b8c:	6a1b      	ldr	r3, [r3, #32]
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6213      	str	r3, [r2, #32]
 8000b94:	e00b      	b.n	8000bae <HAL_RCC_OscConfig+0x366>
 8000b96:	4a5b      	ldr	r2, [pc, #364]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b98:	4b5a      	ldr	r3, [pc, #360]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6213      	str	r3, [r2, #32]
 8000ba2:	4a58      	ldr	r2, [pc, #352]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000ba4:	4b57      	ldr	r3, [pc, #348]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	f023 0304 	bic.w	r3, r3, #4
 8000bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d015      	beq.n	8000be2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bb6:	f7ff fb21 	bl	80001fc <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bbc:	e00a      	b.n	8000bd4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bbe:	f7ff fb1d 	bl	80001fc <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e093      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bd4:	4b4b      	ldr	r3, [pc, #300]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0ee      	beq.n	8000bbe <HAL_RCC_OscConfig+0x376>
 8000be0:	e014      	b.n	8000c0c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be2:	f7ff fb0b 	bl	80001fc <HAL_GetTick>
 8000be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000be8:	e00a      	b.n	8000c00 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bea:	f7ff fb07 	bl	80001fc <HAL_GetTick>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e07d      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c00:	4b40      	ldr	r3, [pc, #256]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1ee      	bne.n	8000bea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d105      	bne.n	8000c1e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c12:	4a3c      	ldr	r2, [pc, #240]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000c14:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d069      	beq.n	8000cfa <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c26:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d061      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d146      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c3a:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <HAL_RCC_OscConfig+0x4c4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c40:	f7ff fadc 	bl	80001fc <HAL_GetTick>
 8000c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c48:	f7ff fad8 	bl	80001fc <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e050      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1f0      	bne.n	8000c48 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a1b      	ldr	r3, [r3, #32]
 8000c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c6e:	d108      	bne.n	8000c82 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c70:	4924      	ldr	r1, [pc, #144]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000c72:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c82:	4820      	ldr	r0, [pc, #128]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a19      	ldr	r1, [r3, #32]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c94:	430b      	orrs	r3, r1
 8000c96:	4313      	orrs	r3, r2
 8000c98:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_RCC_OscConfig+0x4c4>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca0:	f7ff faac 	bl	80001fc <HAL_GetTick>
 8000ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ca6:	e008      	b.n	8000cba <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ca8:	f7ff faa8 	bl	80001fc <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e020      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f0      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x460>
 8000cc6:	e018      	b.n	8000cfa <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_RCC_OscConfig+0x4c4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cce:	f7ff fa95 	bl	80001fc <HAL_GetTick>
 8000cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cd4:	e008      	b.n	8000ce8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd6:	f7ff fa91 	bl	80001fc <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e009      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_RCC_OscConfig+0x4bc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1f0      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x48e>
 8000cf4:	e001      	b.n	8000cfa <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40007000 	.word	0x40007000
 8000d0c:	42420060 	.word	0x42420060

08000d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d1e:	4b7e      	ldr	r3, [pc, #504]	; (8000f18 <HAL_RCC_ClockConfig+0x208>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0207 	and.w	r2, r3, #7
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d210      	bcs.n	8000d4e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d2c:	497a      	ldr	r1, [pc, #488]	; (8000f18 <HAL_RCC_ClockConfig+0x208>)
 8000d2e:	4b7a      	ldr	r3, [pc, #488]	; (8000f18 <HAL_RCC_ClockConfig+0x208>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 0207 	bic.w	r2, r3, #7
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d3c:	4b76      	ldr	r3, [pc, #472]	; (8000f18 <HAL_RCC_ClockConfig+0x208>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0207 	and.w	r2, r3, #7
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d001      	beq.n	8000d4e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e0e0      	b.n	8000f10 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d020      	beq.n	8000d9c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d005      	beq.n	8000d72 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d66:	4a6d      	ldr	r2, [pc, #436]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000d68:	4b6c      	ldr	r3, [pc, #432]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d70:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d7e:	4a67      	ldr	r2, [pc, #412]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000d80:	4b66      	ldr	r3, [pc, #408]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d88:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d8a:	4964      	ldr	r1, [pc, #400]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000d8c:	4b63      	ldr	r3, [pc, #396]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d06a      	beq.n	8000e7e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d107      	bne.n	8000dc0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db0:	4b5a      	ldr	r3, [pc, #360]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d115      	bne.n	8000de8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e0a7      	b.n	8000f10 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d107      	bne.n	8000dd8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc8:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d109      	bne.n	8000de8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e09b      	b.n	8000f10 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	4b50      	ldr	r3, [pc, #320]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e093      	b.n	8000f10 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000de8:	494c      	ldr	r1, [pc, #304]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000dea:	4b4c      	ldr	r3, [pc, #304]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f023 0203 	bic.w	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dfa:	f7ff f9ff 	bl	80001fc <HAL_GetTick>
 8000dfe:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d112      	bne.n	8000e2e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e08:	e00a      	b.n	8000e20 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e0a:	f7ff f9f7 	bl	80001fc <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e077      	b.n	8000f10 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e20:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 030c 	and.w	r3, r3, #12
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d1ee      	bne.n	8000e0a <HAL_RCC_ClockConfig+0xfa>
 8000e2c:	e027      	b.n	8000e7e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d11d      	bne.n	8000e72 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e36:	e00a      	b.n	8000e4e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f7ff f9e0 	bl	80001fc <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e060      	b.n	8000f10 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d1ee      	bne.n	8000e38 <HAL_RCC_ClockConfig+0x128>
 8000e5a:	e010      	b.n	8000e7e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e5c:	f7ff f9ce 	bl	80001fc <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e04e      	b.n	8000f10 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1ee      	bne.n	8000e5c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <HAL_RCC_ClockConfig+0x208>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0207 	and.w	r2, r3, #7
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d910      	bls.n	8000eae <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e8c:	4922      	ldr	r1, [pc, #136]	; (8000f18 <HAL_RCC_ClockConfig+0x208>)
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_RCC_ClockConfig+0x208>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f023 0207 	bic.w	r2, r3, #7
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <HAL_RCC_ClockConfig+0x208>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0207 	and.w	r2, r3, #7
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d001      	beq.n	8000eae <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e030      	b.n	8000f10 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d008      	beq.n	8000ecc <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000eba:	4918      	ldr	r1, [pc, #96]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d009      	beq.n	8000eec <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ed8:	4910      	ldr	r1, [pc, #64]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000eec:	f000 f81c 	bl	8000f28 <HAL_RCC_GetSysClockFreq>
 8000ef0:	4601      	mov	r1, r0
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_RCC_ClockConfig+0x20c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	f003 030f 	and.w	r3, r3, #15
 8000efc:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_RCC_ClockConfig+0x210>)
 8000efe:	5cd3      	ldrb	r3, [r2, r3]
 8000f00:	fa21 f303 	lsr.w	r3, r1, r3
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_RCC_ClockConfig+0x214>)
 8000f06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff f935 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40022000 	.word	0x40022000
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	08003d9c 	.word	0x08003d9c
 8000f24:	20000008 	.word	0x20000008

08000f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f28:	b490      	push	{r4, r7}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f30:	1d3c      	adds	r4, r7, #4
 8000f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 030c 	and.w	r3, r3, #12
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d002      	beq.n	8000f68 <HAL_RCC_GetSysClockFreq+0x40>
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d003      	beq.n	8000f6e <HAL_RCC_GetSysClockFreq+0x46>
 8000f66:	e02d      	b.n	8000fc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f6a:	623b      	str	r3, [r7, #32]
      break;
 8000f6c:	e02d      	b.n	8000fca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	0c9b      	lsrs	r3, r3, #18
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f7a:	4413      	add	r3, r2
 8000f7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	0c5b      	lsrs	r3, r3, #17
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000fa0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fa6:	fb02 f203 	mul.w	r2, r2, r3
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb2:	e004      	b.n	8000fbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000fb8:	fb02 f303 	mul.w	r3, r2, r3
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	623b      	str	r3, [r7, #32]
      break;
 8000fc2:	e002      	b.n	8000fca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fc6:	623b      	str	r3, [r7, #32]
      break;
 8000fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fca:	6a3b      	ldr	r3, [r7, #32]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc90      	pop	{r4, r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	08003c90 	.word	0x08003c90
 8000fdc:	08003ca0 	.word	0x08003ca0
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	007a1200 	.word	0x007a1200
 8000fe8:	003d0900 	.word	0x003d0900

08000fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <HAL_RCC_GetHCLKFreq+0x10>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	20000008 	.word	0x20000008

08001000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001004:	f7ff fff2 	bl	8000fec <HAL_RCC_GetHCLKFreq>
 8001008:	4601      	mov	r1, r0
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000
 8001024:	08003dac 	.word	0x08003dac

08001028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800102c:	f7ff ffde 	bl	8000fec <HAL_RCC_GetHCLKFreq>
 8001030:	4601      	mov	r1, r0
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	0adb      	lsrs	r3, r3, #11
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	4a03      	ldr	r2, [pc, #12]	; (800104c <HAL_RCC_GetPCLK2Freq+0x24>)
 800103e:	5cd3      	ldrb	r3, [r2, r3]
 8001040:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001044:	4618      	mov	r0, r3
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	08003dac 	.word	0x08003dac

08001050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <RCC_Delay+0x34>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <RCC_Delay+0x38>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	0a5b      	lsrs	r3, r3, #9
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	fb02 f303 	mul.w	r3, r2, r3
 800106a:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800106c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1e5a      	subs	r2, r3, #1
 8001072:	60fa      	str	r2, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f9      	bne.n	800106c <RCC_Delay+0x1c>
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	10624dd3 	.word	0x10624dd3

0800108c <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e01d      	b.n	80010da <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d106      	bne.n	80010b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f001 fbc2 	bl	800283c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2202      	movs	r2, #2
 80010bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3304      	adds	r3, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4610      	mov	r0, r2
 80010cc:	f000 fa24 	bl	8001518 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2201      	movs	r2, #1
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fc14 	bl	8001924 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_TIM_PWM_Start+0x4c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d107      	bne.n	8001116 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001110:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001114:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	f042 0201 	orr.w	r2, r2, #1
 8001124:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40012c00 	.word	0x40012c00

08001134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b02      	cmp	r3, #2
 8001148:	d122      	bne.n	8001190 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b02      	cmp	r3, #2
 8001156:	d11b      	bne.n	8001190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f06f 0202 	mvn.w	r2, #2
 8001160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f9b3 	bl	80014e2 <HAL_TIM_IC_CaptureCallback>
 800117c:	e005      	b.n	800118a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f9a6 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f9b5 	bl	80014f4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b04      	cmp	r3, #4
 800119c:	d122      	bne.n	80011e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d11b      	bne.n	80011e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f06f 0204 	mvn.w	r2, #4
 80011b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2202      	movs	r2, #2
 80011ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f989 	bl	80014e2 <HAL_TIM_IC_CaptureCallback>
 80011d0:	e005      	b.n	80011de <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f97c 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f98b 	bl	80014f4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d122      	bne.n	8001238 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d11b      	bne.n	8001238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f06f 0208 	mvn.w	r2, #8
 8001208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2204      	movs	r2, #4
 800120e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f95f 	bl	80014e2 <HAL_TIM_IC_CaptureCallback>
 8001224:	e005      	b.n	8001232 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f952 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f961 	bl	80014f4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	2b10      	cmp	r3, #16
 8001244:	d122      	bne.n	800128c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	2b10      	cmp	r3, #16
 8001252:	d11b      	bne.n	800128c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f06f 0210 	mvn.w	r2, #16
 800125c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2208      	movs	r2, #8
 8001262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f935 	bl	80014e2 <HAL_TIM_IC_CaptureCallback>
 8001278:	e005      	b.n	8001286 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f928 	bl	80014d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f937 	bl	80014f4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10e      	bne.n	80012b8 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d107      	bne.n	80012b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f06f 0201 	mvn.w	r2, #1
 80012b0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f001 f876 	bl	80023a4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	2b80      	cmp	r3, #128	; 0x80
 80012c4:	d10e      	bne.n	80012e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d0:	2b80      	cmp	r3, #128	; 0x80
 80012d2:	d107      	bne.n	80012e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80012dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fb8f 	bl	8001a02 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ee:	2b40      	cmp	r3, #64	; 0x40
 80012f0:	d10e      	bne.n	8001310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fc:	2b40      	cmp	r3, #64	; 0x40
 80012fe:	d107      	bne.n	8001310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001308:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f8fb 	bl	8001506 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b20      	cmp	r3, #32
 800131c:	d10e      	bne.n	800133c <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b20      	cmp	r3, #32
 800132a:	d107      	bne.n	800133c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f06f 0220 	mvn.w	r2, #32
 8001334:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fb5a 	bl	80019f0 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800135a:	2302      	movs	r3, #2
 800135c:	e0b4      	b.n	80014c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2202      	movs	r2, #2
 800136a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0c      	cmp	r3, #12
 8001372:	f200 809f 	bhi.w	80014b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001376:	a201      	add	r2, pc, #4	; (adr r2, 800137c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137c:	080013b1 	.word	0x080013b1
 8001380:	080014b5 	.word	0x080014b5
 8001384:	080014b5 	.word	0x080014b5
 8001388:	080014b5 	.word	0x080014b5
 800138c:	080013f1 	.word	0x080013f1
 8001390:	080014b5 	.word	0x080014b5
 8001394:	080014b5 	.word	0x080014b5
 8001398:	080014b5 	.word	0x080014b5
 800139c:	08001433 	.word	0x08001433
 80013a0:	080014b5 	.word	0x080014b5
 80013a4:	080014b5 	.word	0x080014b5
 80013a8:	080014b5 	.word	0x080014b5
 80013ac:	08001473 	.word	0x08001473
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f914 	bl	80015e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	6992      	ldr	r2, [r2, #24]
 80013c6:	f042 0208 	orr.w	r2, r2, #8
 80013ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	6992      	ldr	r2, [r2, #24]
 80013d6:	f022 0204 	bic.w	r2, r2, #4
 80013da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	6991      	ldr	r1, [r2, #24]
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	6912      	ldr	r2, [r2, #16]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	619a      	str	r2, [r3, #24]
    }
    break;
 80013ee:	e062      	b.n	80014b6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f960 	bl	80016bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	6992      	ldr	r2, [r2, #24]
 8001406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800140a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	6992      	ldr	r2, [r2, #24]
 8001416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800141a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	6991      	ldr	r1, [r2, #24]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	6912      	ldr	r2, [r2, #16]
 800142a:	0212      	lsls	r2, r2, #8
 800142c:	430a      	orrs	r2, r1
 800142e:	619a      	str	r2, [r3, #24]
    }
    break;
 8001430:	e041      	b.n	80014b6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f9af 	bl	800179c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	69d2      	ldr	r2, [r2, #28]
 8001448:	f042 0208 	orr.w	r2, r2, #8
 800144c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	69d2      	ldr	r2, [r2, #28]
 8001458:	f022 0204 	bic.w	r2, r2, #4
 800145c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	69d1      	ldr	r1, [r2, #28]
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	6912      	ldr	r2, [r2, #16]
 800146c:	430a      	orrs	r2, r1
 800146e:	61da      	str	r2, [r3, #28]
    }
    break;
 8001470:	e021      	b.n	80014b6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f9ff 	bl	800187c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	69d2      	ldr	r2, [r2, #28]
 8001488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800148c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	69d2      	ldr	r2, [r2, #28]
 8001498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800149c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	69d1      	ldr	r1, [r2, #28]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	6912      	ldr	r2, [r2, #16]
 80014ac:	0212      	lsls	r2, r2, #8
 80014ae:	430a      	orrs	r2, r1
 80014b0:	61da      	str	r2, [r3, #28]
    }
    break;
 80014b2:	e000      	b.n	80014b6 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80014b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a2a      	ldr	r2, [pc, #168]	; (80015d8 <TIM_Base_SetConfig+0xc0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d00b      	beq.n	800154c <TIM_Base_SetConfig+0x34>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153a:	d007      	beq.n	800154c <TIM_Base_SetConfig+0x34>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a27      	ldr	r2, [pc, #156]	; (80015dc <TIM_Base_SetConfig+0xc4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d003      	beq.n	800154c <TIM_Base_SetConfig+0x34>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <TIM_Base_SetConfig+0xc8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d108      	bne.n	800155e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <TIM_Base_SetConfig+0xc0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00b      	beq.n	800157e <TIM_Base_SetConfig+0x66>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156c:	d007      	beq.n	800157e <TIM_Base_SetConfig+0x66>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a1a      	ldr	r2, [pc, #104]	; (80015dc <TIM_Base_SetConfig+0xc4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d003      	beq.n	800157e <TIM_Base_SetConfig+0x66>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <TIM_Base_SetConfig+0xc8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d108      	bne.n	8001590 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001596:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <TIM_Base_SetConfig+0xc0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d103      	bne.n	80015c8 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	615a      	str	r2, [r3, #20]
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40012c00 	.word	0x40012c00
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40000800 	.word	0x40000800

080015e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	f023 0201 	bic.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800161e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f023 0303 	bic.w	r3, r3, #3
 8001626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f023 0302 	bic.w	r3, r3, #2
 8001638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4313      	orrs	r3, r2
 8001642:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <TIM_OC1_SetConfig+0xd4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d10c      	bne.n	8001666 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f023 0308 	bic.w	r3, r3, #8
 8001652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4313      	orrs	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <TIM_OC1_SetConfig+0xd4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d111      	bne.n	8001692 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800167c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	621a      	str	r2, [r3, #32]
}
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40012c00 	.word	0x40012c00

080016bc <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	f023 0210 	bic.w	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f023 0320 	bic.w	r3, r3, #32
 8001712:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <TIM_OC2_SetConfig+0xdc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d10d      	bne.n	8001744 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800172e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001742:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a14      	ldr	r2, [pc, #80]	; (8001798 <TIM_OC2_SetConfig+0xdc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d113      	bne.n	8001774 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800175a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	621a      	str	r2, [r3, #32]
}
 800178e:	bf00      	nop
 8001790:	371c      	adds	r7, #28
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40012c00 	.word	0x40012c00

0800179c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f023 0303 	bic.w	r3, r3, #3
 80017de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <TIM_OC3_SetConfig+0xdc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10d      	bne.n	8001822 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800180c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001820:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <TIM_OC3_SetConfig+0xdc>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d113      	bne.n	8001852 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	621a      	str	r2, [r3, #32]
}
 800186c:	bf00      	nop
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40012c00 	.word	0x40012c00

0800187c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018b6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018be:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018d2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	031b      	lsls	r3, r3, #12
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <TIM_OC4_SetConfig+0xa4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d109      	bne.n	80018fc <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	621a      	str	r2, [r3, #32]
}
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40012c00 	.word	0x40012c00

08001924 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001934:	2201      	movs	r2, #1
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a1a      	ldr	r2, [r3, #32]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a1a      	ldr	r2, [r3, #32]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	431a      	orrs	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	621a      	str	r2, [r3, #32]
}
 800195e:	bf00      	nop
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800197c:	2302      	movs	r3, #2
 800197e:	e032      	b.n	80019e6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	6852      	ldr	r2, [r2, #4]
 800199a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800199e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	6851      	ldr	r1, [r2, #4]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	6892      	ldr	r2, [r2, #8]
 80019bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019c0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	6891      	ldr	r1, [r2, #8]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	6852      	ldr	r2, [r2, #4]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e03f      	b.n	8001aa6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 ff56 	bl	80028ec <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2224      	movs	r2, #36	; 0x24
 8001a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	68d2      	ldr	r2, [r2, #12]
 8001a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a56:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fb8b 	bl	8002174 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	6912      	ldr	r2, [r2, #16]
 8001a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	6952      	ldr	r2, [r2, #20]
 8001a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a7c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	68d2      	ldr	r2, [r2, #12]
 8001a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a8c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b088      	sub	sp, #32
 8001ab2:	af02      	add	r7, sp, #8
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	f040 8082 	bne.w	8001bd4 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HAL_UART_Transmit+0x2e>
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e07a      	b.n	8001bd6 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_UART_Transmit+0x40>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e073      	b.n	8001bd6 <HAL_UART_Transmit+0x128>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2221      	movs	r2, #33	; 0x21
 8001b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b04:	f7fe fb7a 	bl	80001fc <HAL_GetTick>
 8001b08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	88fa      	ldrh	r2, [r7, #6]
 8001b0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001b16:	e041      	b.n	8001b9c <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2e:	d121      	bne.n	8001b74 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2200      	movs	r2, #0
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f9b2 	bl	8001ea4 <UART_WaitOnFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e045      	b.n	8001bd6 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	8812      	ldrh	r2, [r2, #0]
 8001b56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b5a:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d103      	bne.n	8001b6c <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3302      	adds	r3, #2
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	e017      	b.n	8001b9c <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	e013      	b.n	8001b9c <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f990 	bl	8001ea4 <UART_WaitOnFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e023      	b.n	8001bd6 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1c59      	adds	r1, r3, #1
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1b8      	bne.n	8001b18 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2200      	movs	r2, #0
 8001bae:	2140      	movs	r1, #64	; 0x40
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f977 	bl	8001ea4 <UART_WaitOnFlagUntilTimeout>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e00a      	b.n	8001bd6 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
  }
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	4613      	mov	r3, r2
 8001bea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d140      	bne.n	8001c7a <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_UART_Receive_IT+0x26>
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e039      	b.n	8001c7c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_UART_Receive_IT+0x38>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e032      	b.n	8001c7c <HAL_UART_Receive_IT+0x9e>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	88fa      	ldrh	r2, [r7, #6]
 8001c2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2222      	movs	r2, #34	; 0x22
 8001c3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	68d2      	ldr	r2, [r2, #12]
 8001c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c54:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	6952      	ldr	r2, [r2, #20]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	68d2      	ldr	r2, [r2, #12]
 8001c70:	f042 0220 	orr.w	r2, r2, #32
 8001c74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
  }
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10d      	bne.n	8001cda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_UART_IRQHandler+0x52>
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f9cd 	bl	8002072 <UART_Receive_IT>
      return;
 8001cd8:	e0cc      	b.n	8001e74 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80ab 	beq.w	8001e38 <HAL_UART_IRQHandler+0x1b0>
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_UART_IRQHandler+0x70>
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80a0 	beq.w	8001e38 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_UART_IRQHandler+0x90>
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_UART_IRQHandler+0xb0>
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d30:	f043 0202 	orr.w	r2, r3, #2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_UART_IRQHandler+0xd0>
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	f043 0204 	orr.w	r2, r3, #4
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_UART_IRQHandler+0xf0>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	f043 0208 	orr.w	r2, r3, #8
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d078      	beq.n	8001e72 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_UART_IRQHandler+0x112>
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f96c 	bl	8002072 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <HAL_UART_IRQHandler+0x13a>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d031      	beq.n	8001e26 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8b8 	bl	8001f38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d023      	beq.n	8001e1e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	6952      	ldr	r2, [r2, #20]
 8001de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001de4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d013      	beq.n	8001e16 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df2:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <HAL_UART_IRQHandler+0x1f4>)
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fb10 	bl	8000420 <HAL_DMA_Abort_IT>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d016      	beq.n	8001e34 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e10:	4610      	mov	r0, r2
 8001e12:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e14:	e00e      	b.n	8001e34 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f83b 	bl	8001e92 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e1c:	e00a      	b.n	8001e34 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f837 	bl	8001e92 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e24:	e006      	b.n	8001e34 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f833 	bl	8001e92 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001e32:	e01e      	b.n	8001e72 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e34:	bf00      	nop
    return;
 8001e36:	e01c      	b.n	8001e72 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_UART_IRQHandler+0x1cc>
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f8a4 	bl	8001f9a <UART_Transmit_IT>
    return;
 8001e52:	e00f      	b.n	8001e74 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00a      	beq.n	8001e74 <HAL_UART_IRQHandler+0x1ec>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f8ea 	bl	8002042 <UART_EndTransmit_IT>
    return;
 8001e6e:	bf00      	nop
 8001e70:	e000      	b.n	8001e74 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001e72:	bf00      	nop
  }
}
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	08001f73 	.word	0x08001f73

08001e80 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001eb4:	e02c      	b.n	8001f10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d028      	beq.n	8001f10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d007      	beq.n	8001ed4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ec4:	f7fe f99a 	bl	80001fc <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	1ad2      	subs	r2, r2, r3
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d91d      	bls.n	8001f10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	68d2      	ldr	r2, [r2, #12]
 8001ede:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ee2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	6952      	ldr	r2, [r2, #20]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e00f      	b.n	8001f30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	401a      	ands	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d0c3      	beq.n	8001eb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	68d2      	ldr	r2, [r2, #12]
 8001f4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	6952      	ldr	r2, [r2, #20]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff ff80 	bl	8001e92 <HAL_UART_ErrorCallback>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b085      	sub	sp, #20
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b21      	cmp	r3, #33	; 0x21
 8001fac:	d143      	bne.n	8002036 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb6:	d119      	bne.n	8001fec <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fca:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	1c9a      	adds	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	621a      	str	r2, [r3, #32]
 8001fde:	e00e      	b.n	8001ffe <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	621a      	str	r2, [r3, #32]
 8001fea:	e008      	b.n	8001ffe <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	1c58      	adds	r0, r3, #1
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	6208      	str	r0, [r1, #32]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29b      	uxth	r3, r3
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4619      	mov	r1, r3
 800200c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	68d2      	ldr	r2, [r2, #12]
 800201c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002020:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	68d2      	ldr	r2, [r2, #12]
 800202c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002030:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002036:	2302      	movs	r3, #2
  }
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	68d2      	ldr	r2, [r2, #12]
 8002054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002058:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ff0c 	bl	8001e80 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b22      	cmp	r3, #34	; 0x22
 8002084:	d171      	bne.n	800216a <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208e:	d123      	bne.n	80020d8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10e      	bne.n	80020bc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	1c9a      	adds	r2, r3, #2
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
 80020ba:	e029      	b.n	8002110 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
 80020d6:	e01b      	b.n	8002110 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10a      	bne.n	80020f6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	1c59      	adds	r1, r3, #1
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6291      	str	r1, [r2, #40]	; 0x28
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	6852      	ldr	r2, [r2, #4]
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	e00c      	b.n	8002110 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	1c59      	adds	r1, r3, #1
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6291      	str	r1, [r2, #40]	; 0x28
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	6852      	ldr	r2, [r2, #4]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29b      	uxth	r3, r3
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4619      	mov	r1, r3
 800211e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002120:	2b00      	cmp	r3, #0
 8002122:	d120      	bne.n	8002166 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	68d2      	ldr	r2, [r2, #12]
 800212e:	f022 0220 	bic.w	r2, r2, #32
 8002132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	68d2      	ldr	r2, [r2, #12]
 800213e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002142:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	6952      	ldr	r2, [r2, #20]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f92b 	bl	80023b8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e002      	b.n	800216c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800216a:	2302      	movs	r3, #2
  }
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	6912      	ldr	r2, [r2, #16]
 800218a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	430a      	orrs	r2, r1
 8002194:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021ba:	f023 030c 	bic.w	r3, r3, #12
 80021be:	68f9      	ldr	r1, [r7, #12]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	6952      	ldr	r2, [r2, #20]
 80021ce:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6992      	ldr	r2, [r2, #24]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6f      	ldr	r2, [pc, #444]	; (800239c <UART_SetConfig+0x228>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d16b      	bne.n	80022bc <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681c      	ldr	r4, [r3, #0]
 80021e8:	f7fe ff1e 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009a      	lsls	r2, r3, #2
 80021f6:	441a      	add	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4a67      	ldr	r2, [pc, #412]	; (80023a0 <UART_SetConfig+0x22c>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	011d      	lsls	r5, r3, #4
 800220c:	f7fe ff0c 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 8002210:	4602      	mov	r2, r0
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	009a      	lsls	r2, r3, #2
 800221a:	441a      	add	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	fbb2 f6f3 	udiv	r6, r2, r3
 8002226:	f7fe feff 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 800222a:	4602      	mov	r2, r0
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	009a      	lsls	r2, r3, #2
 8002234:	441a      	add	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	4a57      	ldr	r2, [pc, #348]	; (80023a0 <UART_SetConfig+0x22c>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2264      	movs	r2, #100	; 0x64
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	1af3      	subs	r3, r6, r3
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	3332      	adds	r3, #50	; 0x32
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <UART_SetConfig+0x22c>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002260:	441d      	add	r5, r3
 8002262:	f7fe fee1 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 8002266:	4602      	mov	r2, r0
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	009a      	lsls	r2, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fbb2 f6f3 	udiv	r6, r2, r3
 800227c:	f7fe fed4 	bl	8001028 <HAL_RCC_GetPCLK2Freq>
 8002280:	4602      	mov	r2, r0
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	009a      	lsls	r2, r3, #2
 800228a:	441a      	add	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4a42      	ldr	r2, [pc, #264]	; (80023a0 <UART_SetConfig+0x22c>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	2264      	movs	r2, #100	; 0x64
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	1af3      	subs	r3, r6, r3
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	3332      	adds	r3, #50	; 0x32
 80022aa:	4a3d      	ldr	r2, [pc, #244]	; (80023a0 <UART_SetConfig+0x22c>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	442b      	add	r3, r5
 80022b8:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80022ba:	e06a      	b.n	8002392 <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681c      	ldr	r4, [r3, #0]
 80022c0:	f7fe fe9e 	bl	8001000 <HAL_RCC_GetPCLK1Freq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	009a      	lsls	r2, r3, #2
 80022ce:	441a      	add	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022da:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <UART_SetConfig+0x22c>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	011d      	lsls	r5, r3, #4
 80022e4:	f7fe fe8c 	bl	8001000 <HAL_RCC_GetPCLK1Freq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	009a      	lsls	r2, r3, #2
 80022f2:	441a      	add	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80022fe:	f7fe fe7f 	bl	8001000 <HAL_RCC_GetPCLK1Freq>
 8002302:	4602      	mov	r2, r0
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009a      	lsls	r2, r3, #2
 800230c:	441a      	add	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <UART_SetConfig+0x22c>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2264      	movs	r2, #100	; 0x64
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	1af3      	subs	r3, r6, r3
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	3332      	adds	r3, #50	; 0x32
 800232c:	4a1c      	ldr	r2, [pc, #112]	; (80023a0 <UART_SetConfig+0x22c>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002338:	441d      	add	r5, r3
 800233a:	f7fe fe61 	bl	8001000 <HAL_RCC_GetPCLK1Freq>
 800233e:	4602      	mov	r2, r0
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	009a      	lsls	r2, r3, #2
 8002348:	441a      	add	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	fbb2 f6f3 	udiv	r6, r2, r3
 8002354:	f7fe fe54 	bl	8001000 <HAL_RCC_GetPCLK1Freq>
 8002358:	4602      	mov	r2, r0
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	009a      	lsls	r2, r3, #2
 8002362:	441a      	add	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0c      	ldr	r2, [pc, #48]	; (80023a0 <UART_SetConfig+0x22c>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	2264      	movs	r2, #100	; 0x64
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	1af3      	subs	r3, r6, r3
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	3332      	adds	r3, #50	; 0x32
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <UART_SetConfig+0x22c>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	442b      	add	r3, r5
 8002390:	60a3      	str	r3, [r4, #8]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239a:	bf00      	nop
 800239c:	40013800 	.word	0x40013800
 80023a0:	51eb851f 	.word	0x51eb851f

080023a4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char rx_buffer[2] = {0};
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
	}
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a23      	ldr	r2, [pc, #140]	; (8002454 <HAL_UART_RxCpltCallback+0x9c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d13f      	bne.n	800244a <HAL_UART_RxCpltCallback+0x92>

		if (rx_buffer[0] == '+' && (TIM3->CCR1 < 1940))
 80023ca:	4b23      	ldr	r3, [pc, #140]	; (8002458 <HAL_UART_RxCpltCallback+0xa0>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b2b      	cmp	r3, #43	; 0x2b
 80023d0:	d10b      	bne.n	80023ea <HAL_UART_RxCpltCallback+0x32>
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <HAL_UART_RxCpltCallback+0xa4>)
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	f240 7293 	movw	r2, #1939	; 0x793
 80023da:	4293      	cmp	r3, r2
 80023dc:	d805      	bhi.n	80023ea <HAL_UART_RxCpltCallback+0x32>
			TIM3->CCR1 +=10;
 80023de:	4a1f      	ldr	r2, [pc, #124]	; (800245c <HAL_UART_RxCpltCallback+0xa4>)
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_UART_RxCpltCallback+0xa4>)
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	330a      	adds	r3, #10
 80023e6:	6353      	str	r3, [r2, #52]	; 0x34
 80023e8:	e02a      	b.n	8002440 <HAL_UART_RxCpltCallback+0x88>
		else
		if(rx_buffer[0] == '-' && (TIM3->CCR1 > 0))
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <HAL_UART_RxCpltCallback+0xa0>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b2d      	cmp	r3, #45	; 0x2d
 80023f0:	d109      	bne.n	8002406 <HAL_UART_RxCpltCallback+0x4e>
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <HAL_UART_RxCpltCallback+0xa4>)
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_UART_RxCpltCallback+0x4e>
			TIM3->CCR1 -=10;
 80023fa:	4a18      	ldr	r2, [pc, #96]	; (800245c <HAL_UART_RxCpltCallback+0xa4>)
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_UART_RxCpltCallback+0xa4>)
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	3b0a      	subs	r3, #10
 8002402:	6353      	str	r3, [r2, #52]	; 0x34
 8002404:	e01c      	b.n	8002440 <HAL_UART_RxCpltCallback+0x88>
		else
		if(rx_buffer[0] == 'h')
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <HAL_UART_RxCpltCallback+0xa0>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b68      	cmp	r3, #104	; 0x68
 800240c:	d104      	bne.n	8002418 <HAL_UART_RxCpltCallback+0x60>
			TIM3->CCR1 =500;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_UART_RxCpltCallback+0xa4>)
 8002410:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002414:	635a      	str	r2, [r3, #52]	; 0x34
 8002416:	e013      	b.n	8002440 <HAL_UART_RxCpltCallback+0x88>
		else
		if(rx_buffer[0] == 'l')
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_UART_RxCpltCallback+0xa0>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b6c      	cmp	r3, #108	; 0x6c
 800241e:	d103      	bne.n	8002428 <HAL_UART_RxCpltCallback+0x70>
			TIM3->CCR1 =0;
 8002420:	4b0e      	ldr	r3, [pc, #56]	; (800245c <HAL_UART_RxCpltCallback+0xa4>)
 8002422:	2200      	movs	r2, #0
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
 8002426:	e00b      	b.n	8002440 <HAL_UART_RxCpltCallback+0x88>
		else
		if(rx_buffer[0] == 'f')
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_UART_RxCpltCallback+0xa0>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b66      	cmp	r3, #102	; 0x66
 800242e:	d104      	bne.n	800243a <HAL_UART_RxCpltCallback+0x82>
			TIM3->CCR1 =1941;
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_UART_RxCpltCallback+0xa4>)
 8002432:	f240 7295 	movw	r2, #1941	; 0x795
 8002436:	635a      	str	r2, [r3, #52]	; 0x34
 8002438:	e002      	b.n	8002440 <HAL_UART_RxCpltCallback+0x88>
		else
			printf("wrong option \r\n");
 800243a:	4809      	ldr	r0, [pc, #36]	; (8002460 <HAL_UART_RxCpltCallback+0xa8>)
 800243c:	f000 fc72 	bl	8002d24 <puts>
		HAL_UART_Receive_IT(huart, (uint8_t *)rx_buffer, 1);
 8002440:	2201      	movs	r2, #1
 8002442:	4905      	ldr	r1, [pc, #20]	; (8002458 <HAL_UART_RxCpltCallback+0xa0>)
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fbca 	bl	8001bde <HAL_UART_Receive_IT>
	}
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40004400 	.word	0x40004400
 8002458:	2000008c 	.word	0x2000008c
 800245c:	40000400 	.word	0x40000400
 8002460:	08003ca4 	.word	0x08003ca4

08002464 <display_seconds>:

void display_seconds(void){
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
	static uint32_t tick_tracker = 0;
	static uint32_t deci_seconds = 0;
	char time_buffer[20] = {0};
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
	if (tick_tracker < HAL_GetTick()){
 8002478:	f7fd fec0 	bl	80001fc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <display_seconds+0x4c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d910      	bls.n	80024a8 <display_seconds+0x44>
		tick_tracker =HAL_GetTick()+100;
 8002486:	f7fd feb9 	bl	80001fc <HAL_GetTick>
 800248a:	4603      	mov	r3, r0
 800248c:	3364      	adds	r3, #100	; 0x64
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <display_seconds+0x4c>)
 8002490:	6013      	str	r3, [r2, #0]
		GPIOA->ODR ^=GPIO_PIN_5;
 8002492:	4a08      	ldr	r2, [pc, #32]	; (80024b4 <display_seconds+0x50>)
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <display_seconds+0x50>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f083 0320 	eor.w	r3, r3, #32
 800249c:	60d3      	str	r3, [r2, #12]
	//	sprintf(time_buffer, "%6lu",deci_seconds);
		deci_seconds++;
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <display_seconds+0x54>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <display_seconds+0x54>)
 80024a6:	6013      	str	r3, [r2, #0]
	//	logmessage(time_buffer);
	}
}
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000090 	.word	0x20000090
 80024b4:	40010800 	.word	0x40010800
 80024b8:	20000094 	.word	0x20000094

080024bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024c0:	f7fd fe44 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c4:	f000 f846 	bl	8002554 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  	setvbuf(stdout, NULL, _IONBF, 0);
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <main+0x68>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6898      	ldr	r0, [r3, #8]
 80024ce:	2300      	movs	r3, #0
 80024d0:	2202      	movs	r2, #2
 80024d2:	2100      	movs	r1, #0
 80024d4:	f000 fc2e 	bl	8002d34 <setvbuf>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024d8:	f000 f90a 	bl	80026f0 <MX_GPIO_Init>
  MX_TIM3_Init();
 80024dc:	f000 f87c 	bl	80025d8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80024e0:	f000 f8dc 	bl	800269c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, 1);
 80024e4:	2201      	movs	r2, #1
 80024e6:	4910      	ldr	r1, [pc, #64]	; (8002528 <main+0x6c>)
 80024e8:	4810      	ldr	r0, [pc, #64]	; (800252c <main+0x70>)
 80024ea:	f7ff fb78 	bl	8001bde <HAL_UART_Receive_IT>

	printf("Program start %s%s\r\n",__DATE__,__TIME__);
 80024ee:	4a10      	ldr	r2, [pc, #64]	; (8002530 <main+0x74>)
 80024f0:	4910      	ldr	r1, [pc, #64]	; (8002534 <main+0x78>)
 80024f2:	4811      	ldr	r0, [pc, #68]	; (8002538 <main+0x7c>)
 80024f4:	f000 fba2 	bl	8002c3c <iprintf>
	printf("\r\n PRESS ONE OF THE FOLLOWING OPTIONS: \r\n\r\n");
 80024f8:	4810      	ldr	r0, [pc, #64]	; (800253c <main+0x80>)
 80024fa:	f000 fc13 	bl	8002d24 <puts>
	printf("\t\t [f].......100 percent \r\n");
 80024fe:	4810      	ldr	r0, [pc, #64]	; (8002540 <main+0x84>)
 8002500:	f000 fc10 	bl	8002d24 <puts>
	printf("\t\t [h]........50 percent \r\n");
 8002504:	480f      	ldr	r0, [pc, #60]	; (8002544 <main+0x88>)
 8002506:	f000 fc0d 	bl	8002d24 <puts>
	printf("\t\t [l].........0 percent  \r\n");
 800250a:	480f      	ldr	r0, [pc, #60]	; (8002548 <main+0x8c>)
 800250c:	f000 fc0a 	bl	8002d24 <puts>
	printf("\t\t [+].........increase  \r\n");
 8002510:	480e      	ldr	r0, [pc, #56]	; (800254c <main+0x90>)
 8002512:	f000 fc07 	bl	8002d24 <puts>
	printf("\t\t [-].........decrease  \r\n");
 8002516:	480e      	ldr	r0, [pc, #56]	; (8002550 <main+0x94>)
 8002518:	f000 fc04 	bl	8002d24 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	display_seconds();
 800251c:	f7ff ffa2 	bl	8002464 <display_seconds>
 8002520:	e7fc      	b.n	800251c <main+0x60>
 8002522:	bf00      	nop
 8002524:	2000000c 	.word	0x2000000c
 8002528:	2000008c 	.word	0x2000008c
 800252c:	200000e8 	.word	0x200000e8
 8002530:	08003cb4 	.word	0x08003cb4
 8002534:	08003cc0 	.word	0x08003cc0
 8002538:	08003ccc 	.word	0x08003ccc
 800253c:	08003ce4 	.word	0x08003ce4
 8002540:	08003d10 	.word	0x08003d10
 8002544:	08003d2c 	.word	0x08003d2c
 8002548:	08003d48 	.word	0x08003d48
 800254c:	08003d64 	.word	0x08003d64
 8002550:	08003d80 	.word	0x08003d80

08002554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b090      	sub	sp, #64	; 0x40
 8002558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255a:	f107 0318 	add.w	r3, r7, #24
 800255e:	2228      	movs	r2, #40	; 0x28
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fb62 	bl	8002c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002576:	2302      	movs	r3, #2
 8002578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800257a:	2301      	movs	r3, #1
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800257e:	2310      	movs	r3, #16
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002582:	2302      	movs	r3, #2
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002586:	2300      	movs	r3, #0
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800258a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002590:	f107 0318 	add.w	r3, r7, #24
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe f957 	bl	8000848 <HAL_RCC_OscConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80025a0:	f000 f914 	bl	80027cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a4:	230f      	movs	r3, #15
 80025a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a8:	2302      	movs	r3, #2
 80025aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	2102      	movs	r1, #2
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fba6 	bl	8000d10 <HAL_RCC_ClockConfig>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80025ca:	f000 f8ff 	bl	80027cc <Error_Handler>
  }
}
 80025ce:	bf00      	nop
 80025d0:	3740      	adds	r7, #64	; 0x40
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025de:	f107 0320 	add.w	r3, r7, #32
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
 80025f4:	611a      	str	r2, [r3, #16]
 80025f6:	615a      	str	r2, [r3, #20]
 80025f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <MX_TIM3_Init+0xbc>)
 80025fc:	4a26      	ldr	r2, [pc, #152]	; (8002698 <MX_TIM3_Init+0xc0>)
 80025fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <MX_TIM3_Init+0xbc>)
 8002602:	2220      	movs	r2, #32
 8002604:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <MX_TIM3_Init+0xbc>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1940;
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <MX_TIM3_Init+0xbc>)
 800260e:	f240 7294 	movw	r2, #1940	; 0x794
 8002612:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <MX_TIM3_Init+0xbc>)
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <MX_TIM3_Init+0xbc>)
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002620:	481c      	ldr	r0, [pc, #112]	; (8002694 <MX_TIM3_Init+0xbc>)
 8002622:	f7fe fd33 	bl	800108c <HAL_TIM_PWM_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800262c:	f000 f8ce 	bl	80027cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002638:	f107 0320 	add.w	r3, r7, #32
 800263c:	4619      	mov	r1, r3
 800263e:	4815      	ldr	r0, [pc, #84]	; (8002694 <MX_TIM3_Init+0xbc>)
 8002640:	f7ff f992 	bl	8001968 <HAL_TIMEx_MasterConfigSynchronization>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800264a:	f000 f8bf 	bl	80027cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800264e:	2360      	movs	r3, #96	; 0x60
 8002650:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002652:	2364      	movs	r3, #100	; 0x64
 8002654:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2200      	movs	r2, #0
 8002662:	4619      	mov	r1, r3
 8002664:	480b      	ldr	r0, [pc, #44]	; (8002694 <MX_TIM3_Init+0xbc>)
 8002666:	f7fe fe6d 	bl	8001344 <HAL_TIM_PWM_ConfigChannel>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002670:	f000 f8ac 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8002674:	2100      	movs	r1, #0
 8002676:	4807      	ldr	r0, [pc, #28]	; (8002694 <MX_TIM3_Init+0xbc>)
 8002678:	f7fe fd34 	bl	80010e4 <HAL_TIM_PWM_Start>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM3_Init+0xae>
  {
  	Error_Handler();
 8002682:	f000 f8a3 	bl	80027cc <Error_Handler>
  }

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002686:	4803      	ldr	r0, [pc, #12]	; (8002694 <MX_TIM3_Init+0xbc>)
 8002688:	f000 f8fe 	bl	8002888 <HAL_TIM_MspPostInit>

}
 800268c:	bf00      	nop
 800268e:	3728      	adds	r7, #40	; 0x28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	200000a8 	.word	0x200000a8
 8002698:	40000400 	.word	0x40000400

0800269c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <MX_USART2_UART_Init+0x50>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_USART2_UART_Init+0x4c>)
 80026d4:	f7ff f99e 	bl	8001a14 <HAL_UART_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026de:	f000 f875 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200000e8 	.word	0x200000e8
 80026ec:	40004400 	.word	0x40004400

080026f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002704:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <MX_GPIO_Init+0xcc>)
 8002706:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <MX_GPIO_Init+0xcc>)
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f043 0310 	orr.w	r3, r3, #16
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <MX_GPIO_Init+0xcc>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <MX_GPIO_Init+0xcc>)
 800271e:	4b27      	ldr	r3, [pc, #156]	; (80027bc <MX_GPIO_Init+0xcc>)
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	f043 0320 	orr.w	r3, r3, #32
 8002726:	6193      	str	r3, [r2, #24]
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <MX_GPIO_Init+0xcc>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002734:	4a21      	ldr	r2, [pc, #132]	; (80027bc <MX_GPIO_Init+0xcc>)
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <MX_GPIO_Init+0xcc>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	f043 0304 	orr.w	r3, r3, #4
 800273e:	6193      	str	r3, [r2, #24]
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <MX_GPIO_Init+0xcc>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <MX_GPIO_Init+0xcc>)
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <MX_GPIO_Init+0xcc>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	6193      	str	r3, [r2, #24]
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <MX_GPIO_Init+0xcc>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002764:	2200      	movs	r2, #0
 8002766:	2120      	movs	r1, #32
 8002768:	4815      	ldr	r0, [pc, #84]	; (80027c0 <MX_GPIO_Init+0xd0>)
 800276a:	f7fe f833 	bl	80007d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800276e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <MX_GPIO_Init+0xd4>)
 8002776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4619      	mov	r1, r3
 8002782:	4811      	ldr	r0, [pc, #68]	; (80027c8 <MX_GPIO_Init+0xd8>)
 8002784:	f7fd fec8 	bl	8000518 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002788:	2320      	movs	r3, #32
 800278a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278c:	2301      	movs	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2302      	movs	r3, #2
 8002796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	4619      	mov	r1, r3
 800279e:	4808      	ldr	r0, [pc, #32]	; (80027c0 <MX_GPIO_Init+0xd0>)
 80027a0:	f7fd feba 	bl	8000518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2100      	movs	r1, #0
 80027a8:	2028      	movs	r0, #40	; 0x28
 80027aa:	f7fd fe02 	bl	80003b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027ae:	2028      	movs	r0, #40	; 0x28
 80027b0:	f7fd fe1b 	bl	80003ea <HAL_NVIC_EnableIRQ>

}
 80027b4:	bf00      	nop
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40010800 	.word	0x40010800
 80027c4:	10210000 	.word	0x10210000
 80027c8:	40011000 	.word	0x40011000

080027cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027de:	4a15      	ldr	r2, [pc, #84]	; (8002834 <HAL_MspInit+0x5c>)
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <HAL_MspInit+0x5c>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6193      	str	r3, [r2, #24]
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_MspInit+0x5c>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <HAL_MspInit+0x5c>)
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_MspInit+0x5c>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002800:	61d3      	str	r3, [r2, #28]
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_MspInit+0x5c>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_MspInit+0x60>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_MspInit+0x60>)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000
 8002838:	40010000 	.word	0x40010000

0800283c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_TIM_PWM_MspInit+0x44>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d113      	bne.n	8002876 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800284e:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <HAL_TIM_PWM_MspInit+0x48>)
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_TIM_PWM_MspInit+0x48>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	61d3      	str	r3, [r2, #28]
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_TIM_PWM_MspInit+0x48>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	201d      	movs	r0, #29
 800286c:	f7fd fda1 	bl	80003b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002870:	201d      	movs	r0, #29
 8002872:	f7fd fdba 	bl	80003ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40000400 	.word	0x40000400
 8002884:	40021000 	.word	0x40021000

08002888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_TIM_MspPostInit+0x58>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d117      	bne.n	80028d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <HAL_TIM_MspPostInit+0x5c>)
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_TIM_MspPostInit+0x5c>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_TIM_MspPostInit+0x5c>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028c0:	2340      	movs	r3, #64	; 0x40
 80028c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2302      	movs	r3, #2
 80028ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4619      	mov	r1, r3
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <HAL_TIM_MspPostInit+0x60>)
 80028d4:	f7fd fe20 	bl	8000518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40010800 	.word	0x40010800

080028ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a19      	ldr	r2, [pc, #100]	; (800296c <HAL_UART_MspInit+0x80>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d12b      	bne.n	8002964 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800290c:	4a18      	ldr	r2, [pc, #96]	; (8002970 <HAL_UART_MspInit+0x84>)
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_UART_MspInit+0x84>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002916:	61d3      	str	r3, [r2, #28]
 8002918:	4b15      	ldr	r3, [pc, #84]	; (8002970 <HAL_UART_MspInit+0x84>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	4a12      	ldr	r2, [pc, #72]	; (8002970 <HAL_UART_MspInit+0x84>)
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_UART_MspInit+0x84>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6193      	str	r3, [r2, #24]
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <HAL_UART_MspInit+0x84>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800293c:	230c      	movs	r3, #12
 800293e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2302      	movs	r3, #2
 8002946:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	f107 0310 	add.w	r3, r7, #16
 800294c:	4619      	mov	r1, r3
 800294e:	4809      	ldr	r0, [pc, #36]	; (8002974 <HAL_UART_MspInit+0x88>)
 8002950:	f7fd fde2 	bl	8000518 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002954:	2200      	movs	r2, #0
 8002956:	2100      	movs	r1, #0
 8002958:	2026      	movs	r0, #38	; 0x26
 800295a:	f7fd fd2a 	bl	80003b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800295e:	2026      	movs	r0, #38	; 0x26
 8002960:	f7fd fd43 	bl	80003ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3720      	adds	r7, #32
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40004400 	.word	0x40004400
 8002970:	40021000 	.word	0x40021000
 8002974:	40010800 	.word	0x40010800

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <HardFault_Handler+0x4>

0800298a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298e:	e7fe      	b.n	800298e <MemManage_Handler+0x4>

08002990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <BusFault_Handler+0x4>

08002996 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299a:	e7fe      	b.n	800299a <UsageFault_Handler+0x4>

0800299c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c4:	f7fd fc08 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	bd80      	pop	{r7, pc}

080029cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <TIM3_IRQHandler+0x10>)
 80029d2:	f7fe fbaf 	bl	8001134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200000a8 	.word	0x200000a8

080029e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <USART2_IRQHandler+0x10>)
 80029e6:	f7ff f94f 	bl	8001c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200000e8 	.word	0x200000e8

080029f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80029f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029fc:	f7fd ff02 	bl	8000804 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e00a      	b.n	8002a2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a16:	68bc      	ldr	r4, [r7, #8]
 8002a18:	1c63      	adds	r3, r4, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	f3af 8000 	nop.w
 8002a20:	4603      	mov	r3, r0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	dbf0      	blt.n	8002a16 <_read+0x12>
	}

return len;
 8002a34:	687b      	ldr	r3, [r7, #4]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd90      	pop	{r4, r7, pc}
	...

08002a40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit( &huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	4804      	ldr	r0, [pc, #16]	; (8002a68 <_write+0x28>)
 8002a58:	f7ff f829 	bl	8001aae <HAL_UART_Transmit>

	return len;
 8002a5c:	687b      	ldr	r3, [r7, #4]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200000e8 	.word	0x200000e8

08002a6c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <_sbrk+0x50>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <_sbrk+0x16>
		heap_end = &end;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <_sbrk+0x50>)
 8002a7e:	4a10      	ldr	r2, [pc, #64]	; (8002ac0 <_sbrk+0x54>)
 8002a80:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <_sbrk+0x50>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <_sbrk+0x50>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	466a      	mov	r2, sp
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d907      	bls.n	8002aa6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002a96:	f000 f89f 	bl	8002bd8 <__errno>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa4:	e006      	b.n	8002ab4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <_sbrk+0x50>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	4a03      	ldr	r2, [pc, #12]	; (8002abc <_sbrk+0x50>)
 8002ab0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000098 	.word	0x20000098
 8002ac0:	2000012c 	.word	0x2000012c

08002ac4 <_close>:

int _close(int file)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	return -1;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aea:	605a      	str	r2, [r3, #4]
	return 0;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <_isatty>:

int _isatty(int file)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	return 1;
 8002b00:	2301      	movs	r3, #1
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
	return 0;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002b28:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <SystemInit+0x5c>)
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <SystemInit+0x5c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002b34:	4912      	ldr	r1, [pc, #72]	; (8002b80 <SystemInit+0x5c>)
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <SystemInit+0x5c>)
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <SystemInit+0x60>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002b40:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <SystemInit+0x5c>)
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <SystemInit+0x5c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b50:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <SystemInit+0x5c>)
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <SystemInit+0x5c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002b5c:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <SystemInit+0x5c>)
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <SystemInit+0x5c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002b66:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SystemInit+0x5c>)
 8002b6a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b6e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <SystemInit+0x64>)
 8002b72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b76:	609a      	str	r2, [r3, #8]
#endif 
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	40021000 	.word	0x40021000
 8002b84:	f8ff0000 	.word	0xf8ff0000
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b8e:	e003      	b.n	8002b98 <LoopCopyDataInit>

08002b90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b96:	3104      	adds	r1, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b98:	480a      	ldr	r0, [pc, #40]	; (8002bc4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ba0:	d3f6      	bcc.n	8002b90 <CopyDataInit>
  ldr r2, =_sbss
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ba4:	e002      	b.n	8002bac <LoopFillZerobss>

08002ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ba8:	f842 3b04 	str.w	r3, [r2], #4

08002bac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002bae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002bb0:	d3f9      	bcc.n	8002ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bb2:	f7ff ffb7 	bl	8002b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb6:	f000 f815 	bl	8002be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bba:	f7ff fc7f 	bl	80024bc <main>
  bx lr
 8002bbe:	4770      	bx	lr
  ldr r3, =_sidata
 8002bc0:	08003e54 	.word	0x08003e54
  ldr r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002bc8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002bcc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002bd0:	2000012c 	.word	0x2000012c

08002bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bd4:	e7fe      	b.n	8002bd4 <ADC1_2_IRQHandler>
	...

08002bd8 <__errno>:
 8002bd8:	4b01      	ldr	r3, [pc, #4]	; (8002be0 <__errno+0x8>)
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	2000000c 	.word	0x2000000c

08002be4 <__libc_init_array>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	2500      	movs	r5, #0
 8002be8:	4e0c      	ldr	r6, [pc, #48]	; (8002c1c <__libc_init_array+0x38>)
 8002bea:	4c0d      	ldr	r4, [pc, #52]	; (8002c20 <__libc_init_array+0x3c>)
 8002bec:	1ba4      	subs	r4, r4, r6
 8002bee:	10a4      	asrs	r4, r4, #2
 8002bf0:	42a5      	cmp	r5, r4
 8002bf2:	d109      	bne.n	8002c08 <__libc_init_array+0x24>
 8002bf4:	f001 f840 	bl	8003c78 <_init>
 8002bf8:	2500      	movs	r5, #0
 8002bfa:	4e0a      	ldr	r6, [pc, #40]	; (8002c24 <__libc_init_array+0x40>)
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	; (8002c28 <__libc_init_array+0x44>)
 8002bfe:	1ba4      	subs	r4, r4, r6
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	42a5      	cmp	r5, r4
 8002c04:	d105      	bne.n	8002c12 <__libc_init_array+0x2e>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c0c:	4798      	blx	r3
 8002c0e:	3501      	adds	r5, #1
 8002c10:	e7ee      	b.n	8002bf0 <__libc_init_array+0xc>
 8002c12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c16:	4798      	blx	r3
 8002c18:	3501      	adds	r5, #1
 8002c1a:	e7f2      	b.n	8002c02 <__libc_init_array+0x1e>
 8002c1c:	08003e4c 	.word	0x08003e4c
 8002c20:	08003e4c 	.word	0x08003e4c
 8002c24:	08003e4c 	.word	0x08003e4c
 8002c28:	08003e50 	.word	0x08003e50

08002c2c <memset>:
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4402      	add	r2, r0
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d100      	bne.n	8002c36 <memset+0xa>
 8002c34:	4770      	bx	lr
 8002c36:	f803 1b01 	strb.w	r1, [r3], #1
 8002c3a:	e7f9      	b.n	8002c30 <memset+0x4>

08002c3c <iprintf>:
 8002c3c:	b40f      	push	{r0, r1, r2, r3}
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <iprintf+0x2c>)
 8002c40:	b513      	push	{r0, r1, r4, lr}
 8002c42:	681c      	ldr	r4, [r3, #0]
 8002c44:	b124      	cbz	r4, 8002c50 <iprintf+0x14>
 8002c46:	69a3      	ldr	r3, [r4, #24]
 8002c48:	b913      	cbnz	r3, 8002c50 <iprintf+0x14>
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f000 fad2 	bl	80031f4 <__sinit>
 8002c50:	ab05      	add	r3, sp, #20
 8002c52:	9a04      	ldr	r2, [sp, #16]
 8002c54:	68a1      	ldr	r1, [r4, #8]
 8002c56:	4620      	mov	r0, r4
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	f000 fc93 	bl	8003584 <_vfiprintf_r>
 8002c5e:	b002      	add	sp, #8
 8002c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c64:	b004      	add	sp, #16
 8002c66:	4770      	bx	lr
 8002c68:	2000000c 	.word	0x2000000c

08002c6c <_puts_r>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	460e      	mov	r6, r1
 8002c70:	4605      	mov	r5, r0
 8002c72:	b118      	cbz	r0, 8002c7c <_puts_r+0x10>
 8002c74:	6983      	ldr	r3, [r0, #24]
 8002c76:	b90b      	cbnz	r3, 8002c7c <_puts_r+0x10>
 8002c78:	f000 fabc 	bl	80031f4 <__sinit>
 8002c7c:	69ab      	ldr	r3, [r5, #24]
 8002c7e:	68ac      	ldr	r4, [r5, #8]
 8002c80:	b913      	cbnz	r3, 8002c88 <_puts_r+0x1c>
 8002c82:	4628      	mov	r0, r5
 8002c84:	f000 fab6 	bl	80031f4 <__sinit>
 8002c88:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <_puts_r+0xac>)
 8002c8a:	429c      	cmp	r4, r3
 8002c8c:	d117      	bne.n	8002cbe <_puts_r+0x52>
 8002c8e:	686c      	ldr	r4, [r5, #4]
 8002c90:	89a3      	ldrh	r3, [r4, #12]
 8002c92:	071b      	lsls	r3, r3, #28
 8002c94:	d51d      	bpl.n	8002cd2 <_puts_r+0x66>
 8002c96:	6923      	ldr	r3, [r4, #16]
 8002c98:	b1db      	cbz	r3, 8002cd2 <_puts_r+0x66>
 8002c9a:	3e01      	subs	r6, #1
 8002c9c:	68a3      	ldr	r3, [r4, #8]
 8002c9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	60a3      	str	r3, [r4, #8]
 8002ca6:	b9e9      	cbnz	r1, 8002ce4 <_puts_r+0x78>
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	da2e      	bge.n	8002d0a <_puts_r+0x9e>
 8002cac:	4622      	mov	r2, r4
 8002cae:	210a      	movs	r1, #10
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	f000 f8ed 	bl	8002e90 <__swbuf_r>
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	d011      	beq.n	8002cde <_puts_r+0x72>
 8002cba:	200a      	movs	r0, #10
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <_puts_r+0xb0>)
 8002cc0:	429c      	cmp	r4, r3
 8002cc2:	d101      	bne.n	8002cc8 <_puts_r+0x5c>
 8002cc4:	68ac      	ldr	r4, [r5, #8]
 8002cc6:	e7e3      	b.n	8002c90 <_puts_r+0x24>
 8002cc8:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <_puts_r+0xb4>)
 8002cca:	429c      	cmp	r4, r3
 8002ccc:	bf08      	it	eq
 8002cce:	68ec      	ldreq	r4, [r5, #12]
 8002cd0:	e7de      	b.n	8002c90 <_puts_r+0x24>
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	f000 f92d 	bl	8002f34 <__swsetup_r>
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d0dd      	beq.n	8002c9a <_puts_r+0x2e>
 8002cde:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	da04      	bge.n	8002cf2 <_puts_r+0x86>
 8002ce8:	69a2      	ldr	r2, [r4, #24]
 8002cea:	4293      	cmp	r3, r2
 8002cec:	db06      	blt.n	8002cfc <_puts_r+0x90>
 8002cee:	290a      	cmp	r1, #10
 8002cf0:	d004      	beq.n	8002cfc <_puts_r+0x90>
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	6022      	str	r2, [r4, #0]
 8002cf8:	7019      	strb	r1, [r3, #0]
 8002cfa:	e7cf      	b.n	8002c9c <_puts_r+0x30>
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f000 f8c6 	bl	8002e90 <__swbuf_r>
 8002d04:	3001      	adds	r0, #1
 8002d06:	d1c9      	bne.n	8002c9c <_puts_r+0x30>
 8002d08:	e7e9      	b.n	8002cde <_puts_r+0x72>
 8002d0a:	200a      	movs	r0, #10
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	6022      	str	r2, [r4, #0]
 8002d12:	7018      	strb	r0, [r3, #0]
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	bf00      	nop
 8002d18:	08003dd8 	.word	0x08003dd8
 8002d1c:	08003df8 	.word	0x08003df8
 8002d20:	08003db8 	.word	0x08003db8

08002d24 <puts>:
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <puts+0xc>)
 8002d26:	4601      	mov	r1, r0
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	f7ff bf9f 	b.w	8002c6c <_puts_r>
 8002d2e:	bf00      	nop
 8002d30:	2000000c 	.word	0x2000000c

08002d34 <setvbuf>:
 8002d34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d38:	461d      	mov	r5, r3
 8002d3a:	4b51      	ldr	r3, [pc, #324]	; (8002e80 <setvbuf+0x14c>)
 8002d3c:	4604      	mov	r4, r0
 8002d3e:	681e      	ldr	r6, [r3, #0]
 8002d40:	460f      	mov	r7, r1
 8002d42:	4690      	mov	r8, r2
 8002d44:	b126      	cbz	r6, 8002d50 <setvbuf+0x1c>
 8002d46:	69b3      	ldr	r3, [r6, #24]
 8002d48:	b913      	cbnz	r3, 8002d50 <setvbuf+0x1c>
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	f000 fa52 	bl	80031f4 <__sinit>
 8002d50:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <setvbuf+0x150>)
 8002d52:	429c      	cmp	r4, r3
 8002d54:	d152      	bne.n	8002dfc <setvbuf+0xc8>
 8002d56:	6874      	ldr	r4, [r6, #4]
 8002d58:	f1b8 0f02 	cmp.w	r8, #2
 8002d5c:	d006      	beq.n	8002d6c <setvbuf+0x38>
 8002d5e:	f1b8 0f01 	cmp.w	r8, #1
 8002d62:	f200 8089 	bhi.w	8002e78 <setvbuf+0x144>
 8002d66:	2d00      	cmp	r5, #0
 8002d68:	f2c0 8086 	blt.w	8002e78 <setvbuf+0x144>
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	4630      	mov	r0, r6
 8002d70:	f000 f9d6 	bl	8003120 <_fflush_r>
 8002d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d76:	b141      	cbz	r1, 8002d8a <setvbuf+0x56>
 8002d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d7c:	4299      	cmp	r1, r3
 8002d7e:	d002      	beq.n	8002d86 <setvbuf+0x52>
 8002d80:	4630      	mov	r0, r6
 8002d82:	f000 fb2d 	bl	80033e0 <_free_r>
 8002d86:	2300      	movs	r3, #0
 8002d88:	6363      	str	r3, [r4, #52]	; 0x34
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61a3      	str	r3, [r4, #24]
 8002d8e:	6063      	str	r3, [r4, #4]
 8002d90:	89a3      	ldrh	r3, [r4, #12]
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	d503      	bpl.n	8002d9e <setvbuf+0x6a>
 8002d96:	6921      	ldr	r1, [r4, #16]
 8002d98:	4630      	mov	r0, r6
 8002d9a:	f000 fb21 	bl	80033e0 <_free_r>
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	f1b8 0f02 	cmp.w	r8, #2
 8002da4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002da8:	f023 0303 	bic.w	r3, r3, #3
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	d05d      	beq.n	8002e6c <setvbuf+0x138>
 8002db0:	ab01      	add	r3, sp, #4
 8002db2:	466a      	mov	r2, sp
 8002db4:	4621      	mov	r1, r4
 8002db6:	4630      	mov	r0, r6
 8002db8:	f000 faa6 	bl	8003308 <__swhatbuf_r>
 8002dbc:	89a3      	ldrh	r3, [r4, #12]
 8002dbe:	4318      	orrs	r0, r3
 8002dc0:	81a0      	strh	r0, [r4, #12]
 8002dc2:	bb2d      	cbnz	r5, 8002e10 <setvbuf+0xdc>
 8002dc4:	9d00      	ldr	r5, [sp, #0]
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 fb02 	bl	80033d0 <malloc>
 8002dcc:	4607      	mov	r7, r0
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	d14e      	bne.n	8002e70 <setvbuf+0x13c>
 8002dd2:	f8dd 9000 	ldr.w	r9, [sp]
 8002dd6:	45a9      	cmp	r9, r5
 8002dd8:	d13c      	bne.n	8002e54 <setvbuf+0x120>
 8002dda:	f04f 30ff 	mov.w	r0, #4294967295
 8002dde:	89a3      	ldrh	r3, [r4, #12]
 8002de0:	f043 0302 	orr.w	r3, r3, #2
 8002de4:	81a3      	strh	r3, [r4, #12]
 8002de6:	2300      	movs	r3, #0
 8002de8:	60a3      	str	r3, [r4, #8]
 8002dea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002dee:	6023      	str	r3, [r4, #0]
 8002df0:	6123      	str	r3, [r4, #16]
 8002df2:	2301      	movs	r3, #1
 8002df4:	6163      	str	r3, [r4, #20]
 8002df6:	b003      	add	sp, #12
 8002df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <setvbuf+0x154>)
 8002dfe:	429c      	cmp	r4, r3
 8002e00:	d101      	bne.n	8002e06 <setvbuf+0xd2>
 8002e02:	68b4      	ldr	r4, [r6, #8]
 8002e04:	e7a8      	b.n	8002d58 <setvbuf+0x24>
 8002e06:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <setvbuf+0x158>)
 8002e08:	429c      	cmp	r4, r3
 8002e0a:	bf08      	it	eq
 8002e0c:	68f4      	ldreq	r4, [r6, #12]
 8002e0e:	e7a3      	b.n	8002d58 <setvbuf+0x24>
 8002e10:	2f00      	cmp	r7, #0
 8002e12:	d0d8      	beq.n	8002dc6 <setvbuf+0x92>
 8002e14:	69b3      	ldr	r3, [r6, #24]
 8002e16:	b913      	cbnz	r3, 8002e1e <setvbuf+0xea>
 8002e18:	4630      	mov	r0, r6
 8002e1a:	f000 f9eb 	bl	80031f4 <__sinit>
 8002e1e:	f1b8 0f01 	cmp.w	r8, #1
 8002e22:	bf08      	it	eq
 8002e24:	89a3      	ldrheq	r3, [r4, #12]
 8002e26:	6027      	str	r7, [r4, #0]
 8002e28:	bf04      	itt	eq
 8002e2a:	f043 0301 	orreq.w	r3, r3, #1
 8002e2e:	81a3      	strheq	r3, [r4, #12]
 8002e30:	89a3      	ldrh	r3, [r4, #12]
 8002e32:	6127      	str	r7, [r4, #16]
 8002e34:	f013 0008 	ands.w	r0, r3, #8
 8002e38:	6165      	str	r5, [r4, #20]
 8002e3a:	d01b      	beq.n	8002e74 <setvbuf+0x140>
 8002e3c:	f013 0001 	ands.w	r0, r3, #1
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	bf1f      	itttt	ne
 8002e46:	426d      	negne	r5, r5
 8002e48:	60a3      	strne	r3, [r4, #8]
 8002e4a:	61a5      	strne	r5, [r4, #24]
 8002e4c:	4618      	movne	r0, r3
 8002e4e:	bf08      	it	eq
 8002e50:	60a5      	streq	r5, [r4, #8]
 8002e52:	e7d0      	b.n	8002df6 <setvbuf+0xc2>
 8002e54:	4648      	mov	r0, r9
 8002e56:	f000 fabb 	bl	80033d0 <malloc>
 8002e5a:	4607      	mov	r7, r0
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d0bc      	beq.n	8002dda <setvbuf+0xa6>
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	464d      	mov	r5, r9
 8002e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e68:	81a3      	strh	r3, [r4, #12]
 8002e6a:	e7d3      	b.n	8002e14 <setvbuf+0xe0>
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e7b6      	b.n	8002dde <setvbuf+0xaa>
 8002e70:	46a9      	mov	r9, r5
 8002e72:	e7f5      	b.n	8002e60 <setvbuf+0x12c>
 8002e74:	60a0      	str	r0, [r4, #8]
 8002e76:	e7be      	b.n	8002df6 <setvbuf+0xc2>
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	e7bb      	b.n	8002df6 <setvbuf+0xc2>
 8002e7e:	bf00      	nop
 8002e80:	2000000c 	.word	0x2000000c
 8002e84:	08003dd8 	.word	0x08003dd8
 8002e88:	08003df8 	.word	0x08003df8
 8002e8c:	08003db8 	.word	0x08003db8

08002e90 <__swbuf_r>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	460e      	mov	r6, r1
 8002e94:	4614      	mov	r4, r2
 8002e96:	4605      	mov	r5, r0
 8002e98:	b118      	cbz	r0, 8002ea2 <__swbuf_r+0x12>
 8002e9a:	6983      	ldr	r3, [r0, #24]
 8002e9c:	b90b      	cbnz	r3, 8002ea2 <__swbuf_r+0x12>
 8002e9e:	f000 f9a9 	bl	80031f4 <__sinit>
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <__swbuf_r+0x98>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	d12a      	bne.n	8002efe <__swbuf_r+0x6e>
 8002ea8:	686c      	ldr	r4, [r5, #4]
 8002eaa:	69a3      	ldr	r3, [r4, #24]
 8002eac:	60a3      	str	r3, [r4, #8]
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	071a      	lsls	r2, r3, #28
 8002eb2:	d52e      	bpl.n	8002f12 <__swbuf_r+0x82>
 8002eb4:	6923      	ldr	r3, [r4, #16]
 8002eb6:	b363      	cbz	r3, 8002f12 <__swbuf_r+0x82>
 8002eb8:	6923      	ldr	r3, [r4, #16]
 8002eba:	6820      	ldr	r0, [r4, #0]
 8002ebc:	b2f6      	uxtb	r6, r6
 8002ebe:	1ac0      	subs	r0, r0, r3
 8002ec0:	6963      	ldr	r3, [r4, #20]
 8002ec2:	4637      	mov	r7, r6
 8002ec4:	4298      	cmp	r0, r3
 8002ec6:	db04      	blt.n	8002ed2 <__swbuf_r+0x42>
 8002ec8:	4621      	mov	r1, r4
 8002eca:	4628      	mov	r0, r5
 8002ecc:	f000 f928 	bl	8003120 <_fflush_r>
 8002ed0:	bb28      	cbnz	r0, 8002f1e <__swbuf_r+0x8e>
 8002ed2:	68a3      	ldr	r3, [r4, #8]
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	60a3      	str	r3, [r4, #8]
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	6022      	str	r2, [r4, #0]
 8002ee0:	701e      	strb	r6, [r3, #0]
 8002ee2:	6963      	ldr	r3, [r4, #20]
 8002ee4:	4298      	cmp	r0, r3
 8002ee6:	d004      	beq.n	8002ef2 <__swbuf_r+0x62>
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	07db      	lsls	r3, r3, #31
 8002eec:	d519      	bpl.n	8002f22 <__swbuf_r+0x92>
 8002eee:	2e0a      	cmp	r6, #10
 8002ef0:	d117      	bne.n	8002f22 <__swbuf_r+0x92>
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	f000 f913 	bl	8003120 <_fflush_r>
 8002efa:	b190      	cbz	r0, 8002f22 <__swbuf_r+0x92>
 8002efc:	e00f      	b.n	8002f1e <__swbuf_r+0x8e>
 8002efe:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <__swbuf_r+0x9c>)
 8002f00:	429c      	cmp	r4, r3
 8002f02:	d101      	bne.n	8002f08 <__swbuf_r+0x78>
 8002f04:	68ac      	ldr	r4, [r5, #8]
 8002f06:	e7d0      	b.n	8002eaa <__swbuf_r+0x1a>
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <__swbuf_r+0xa0>)
 8002f0a:	429c      	cmp	r4, r3
 8002f0c:	bf08      	it	eq
 8002f0e:	68ec      	ldreq	r4, [r5, #12]
 8002f10:	e7cb      	b.n	8002eaa <__swbuf_r+0x1a>
 8002f12:	4621      	mov	r1, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 f80d 	bl	8002f34 <__swsetup_r>
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	d0cc      	beq.n	8002eb8 <__swbuf_r+0x28>
 8002f1e:	f04f 37ff 	mov.w	r7, #4294967295
 8002f22:	4638      	mov	r0, r7
 8002f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f26:	bf00      	nop
 8002f28:	08003dd8 	.word	0x08003dd8
 8002f2c:	08003df8 	.word	0x08003df8
 8002f30:	08003db8 	.word	0x08003db8

08002f34 <__swsetup_r>:
 8002f34:	4b32      	ldr	r3, [pc, #200]	; (8003000 <__swsetup_r+0xcc>)
 8002f36:	b570      	push	{r4, r5, r6, lr}
 8002f38:	681d      	ldr	r5, [r3, #0]
 8002f3a:	4606      	mov	r6, r0
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	b125      	cbz	r5, 8002f4a <__swsetup_r+0x16>
 8002f40:	69ab      	ldr	r3, [r5, #24]
 8002f42:	b913      	cbnz	r3, 8002f4a <__swsetup_r+0x16>
 8002f44:	4628      	mov	r0, r5
 8002f46:	f000 f955 	bl	80031f4 <__sinit>
 8002f4a:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <__swsetup_r+0xd0>)
 8002f4c:	429c      	cmp	r4, r3
 8002f4e:	d10f      	bne.n	8002f70 <__swsetup_r+0x3c>
 8002f50:	686c      	ldr	r4, [r5, #4]
 8002f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	0715      	lsls	r5, r2, #28
 8002f5a:	d42c      	bmi.n	8002fb6 <__swsetup_r+0x82>
 8002f5c:	06d0      	lsls	r0, r2, #27
 8002f5e:	d411      	bmi.n	8002f84 <__swsetup_r+0x50>
 8002f60:	2209      	movs	r2, #9
 8002f62:	6032      	str	r2, [r6, #0]
 8002f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f68:	81a3      	strh	r3, [r4, #12]
 8002f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	4b25      	ldr	r3, [pc, #148]	; (8003008 <__swsetup_r+0xd4>)
 8002f72:	429c      	cmp	r4, r3
 8002f74:	d101      	bne.n	8002f7a <__swsetup_r+0x46>
 8002f76:	68ac      	ldr	r4, [r5, #8]
 8002f78:	e7eb      	b.n	8002f52 <__swsetup_r+0x1e>
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <__swsetup_r+0xd8>)
 8002f7c:	429c      	cmp	r4, r3
 8002f7e:	bf08      	it	eq
 8002f80:	68ec      	ldreq	r4, [r5, #12]
 8002f82:	e7e6      	b.n	8002f52 <__swsetup_r+0x1e>
 8002f84:	0751      	lsls	r1, r2, #29
 8002f86:	d512      	bpl.n	8002fae <__swsetup_r+0x7a>
 8002f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f8a:	b141      	cbz	r1, 8002f9e <__swsetup_r+0x6a>
 8002f8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f90:	4299      	cmp	r1, r3
 8002f92:	d002      	beq.n	8002f9a <__swsetup_r+0x66>
 8002f94:	4630      	mov	r0, r6
 8002f96:	f000 fa23 	bl	80033e0 <_free_r>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	6363      	str	r3, [r4, #52]	; 0x34
 8002f9e:	89a3      	ldrh	r3, [r4, #12]
 8002fa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fa4:	81a3      	strh	r3, [r4, #12]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6063      	str	r3, [r4, #4]
 8002faa:	6923      	ldr	r3, [r4, #16]
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	f043 0308 	orr.w	r3, r3, #8
 8002fb4:	81a3      	strh	r3, [r4, #12]
 8002fb6:	6923      	ldr	r3, [r4, #16]
 8002fb8:	b94b      	cbnz	r3, 8002fce <__swsetup_r+0x9a>
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc4:	d003      	beq.n	8002fce <__swsetup_r+0x9a>
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	4630      	mov	r0, r6
 8002fca:	f000 f9c1 	bl	8003350 <__smakebuf_r>
 8002fce:	89a2      	ldrh	r2, [r4, #12]
 8002fd0:	f012 0301 	ands.w	r3, r2, #1
 8002fd4:	d00c      	beq.n	8002ff0 <__swsetup_r+0xbc>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60a3      	str	r3, [r4, #8]
 8002fda:	6963      	ldr	r3, [r4, #20]
 8002fdc:	425b      	negs	r3, r3
 8002fde:	61a3      	str	r3, [r4, #24]
 8002fe0:	6923      	ldr	r3, [r4, #16]
 8002fe2:	b953      	cbnz	r3, 8002ffa <__swsetup_r+0xc6>
 8002fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fe8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002fec:	d1ba      	bne.n	8002f64 <__swsetup_r+0x30>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	0792      	lsls	r2, r2, #30
 8002ff2:	bf58      	it	pl
 8002ff4:	6963      	ldrpl	r3, [r4, #20]
 8002ff6:	60a3      	str	r3, [r4, #8]
 8002ff8:	e7f2      	b.n	8002fe0 <__swsetup_r+0xac>
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	e7f7      	b.n	8002fee <__swsetup_r+0xba>
 8002ffe:	bf00      	nop
 8003000:	2000000c 	.word	0x2000000c
 8003004:	08003dd8 	.word	0x08003dd8
 8003008:	08003df8 	.word	0x08003df8
 800300c:	08003db8 	.word	0x08003db8

08003010 <__sflush_r>:
 8003010:	898a      	ldrh	r2, [r1, #12]
 8003012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003016:	4605      	mov	r5, r0
 8003018:	0710      	lsls	r0, r2, #28
 800301a:	460c      	mov	r4, r1
 800301c:	d45a      	bmi.n	80030d4 <__sflush_r+0xc4>
 800301e:	684b      	ldr	r3, [r1, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	dc05      	bgt.n	8003030 <__sflush_r+0x20>
 8003024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	dc02      	bgt.n	8003030 <__sflush_r+0x20>
 800302a:	2000      	movs	r0, #0
 800302c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003032:	2e00      	cmp	r6, #0
 8003034:	d0f9      	beq.n	800302a <__sflush_r+0x1a>
 8003036:	2300      	movs	r3, #0
 8003038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800303c:	682f      	ldr	r7, [r5, #0]
 800303e:	602b      	str	r3, [r5, #0]
 8003040:	d033      	beq.n	80030aa <__sflush_r+0x9a>
 8003042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	075a      	lsls	r2, r3, #29
 8003048:	d505      	bpl.n	8003056 <__sflush_r+0x46>
 800304a:	6863      	ldr	r3, [r4, #4]
 800304c:	1ac0      	subs	r0, r0, r3
 800304e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003050:	b10b      	cbz	r3, 8003056 <__sflush_r+0x46>
 8003052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003054:	1ac0      	subs	r0, r0, r3
 8003056:	2300      	movs	r3, #0
 8003058:	4602      	mov	r2, r0
 800305a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800305c:	6a21      	ldr	r1, [r4, #32]
 800305e:	4628      	mov	r0, r5
 8003060:	47b0      	blx	r6
 8003062:	1c43      	adds	r3, r0, #1
 8003064:	89a3      	ldrh	r3, [r4, #12]
 8003066:	d106      	bne.n	8003076 <__sflush_r+0x66>
 8003068:	6829      	ldr	r1, [r5, #0]
 800306a:	291d      	cmp	r1, #29
 800306c:	d84b      	bhi.n	8003106 <__sflush_r+0xf6>
 800306e:	4a2b      	ldr	r2, [pc, #172]	; (800311c <__sflush_r+0x10c>)
 8003070:	40ca      	lsrs	r2, r1
 8003072:	07d6      	lsls	r6, r2, #31
 8003074:	d547      	bpl.n	8003106 <__sflush_r+0xf6>
 8003076:	2200      	movs	r2, #0
 8003078:	6062      	str	r2, [r4, #4]
 800307a:	6922      	ldr	r2, [r4, #16]
 800307c:	04d9      	lsls	r1, r3, #19
 800307e:	6022      	str	r2, [r4, #0]
 8003080:	d504      	bpl.n	800308c <__sflush_r+0x7c>
 8003082:	1c42      	adds	r2, r0, #1
 8003084:	d101      	bne.n	800308a <__sflush_r+0x7a>
 8003086:	682b      	ldr	r3, [r5, #0]
 8003088:	b903      	cbnz	r3, 800308c <__sflush_r+0x7c>
 800308a:	6560      	str	r0, [r4, #84]	; 0x54
 800308c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800308e:	602f      	str	r7, [r5, #0]
 8003090:	2900      	cmp	r1, #0
 8003092:	d0ca      	beq.n	800302a <__sflush_r+0x1a>
 8003094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003098:	4299      	cmp	r1, r3
 800309a:	d002      	beq.n	80030a2 <__sflush_r+0x92>
 800309c:	4628      	mov	r0, r5
 800309e:	f000 f99f 	bl	80033e0 <_free_r>
 80030a2:	2000      	movs	r0, #0
 80030a4:	6360      	str	r0, [r4, #52]	; 0x34
 80030a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030aa:	6a21      	ldr	r1, [r4, #32]
 80030ac:	2301      	movs	r3, #1
 80030ae:	4628      	mov	r0, r5
 80030b0:	47b0      	blx	r6
 80030b2:	1c41      	adds	r1, r0, #1
 80030b4:	d1c6      	bne.n	8003044 <__sflush_r+0x34>
 80030b6:	682b      	ldr	r3, [r5, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0c3      	beq.n	8003044 <__sflush_r+0x34>
 80030bc:	2b1d      	cmp	r3, #29
 80030be:	d001      	beq.n	80030c4 <__sflush_r+0xb4>
 80030c0:	2b16      	cmp	r3, #22
 80030c2:	d101      	bne.n	80030c8 <__sflush_r+0xb8>
 80030c4:	602f      	str	r7, [r5, #0]
 80030c6:	e7b0      	b.n	800302a <__sflush_r+0x1a>
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ce:	81a3      	strh	r3, [r4, #12]
 80030d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030d4:	690f      	ldr	r7, [r1, #16]
 80030d6:	2f00      	cmp	r7, #0
 80030d8:	d0a7      	beq.n	800302a <__sflush_r+0x1a>
 80030da:	0793      	lsls	r3, r2, #30
 80030dc:	bf18      	it	ne
 80030de:	2300      	movne	r3, #0
 80030e0:	680e      	ldr	r6, [r1, #0]
 80030e2:	bf08      	it	eq
 80030e4:	694b      	ldreq	r3, [r1, #20]
 80030e6:	eba6 0807 	sub.w	r8, r6, r7
 80030ea:	600f      	str	r7, [r1, #0]
 80030ec:	608b      	str	r3, [r1, #8]
 80030ee:	f1b8 0f00 	cmp.w	r8, #0
 80030f2:	dd9a      	ble.n	800302a <__sflush_r+0x1a>
 80030f4:	4643      	mov	r3, r8
 80030f6:	463a      	mov	r2, r7
 80030f8:	6a21      	ldr	r1, [r4, #32]
 80030fa:	4628      	mov	r0, r5
 80030fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030fe:	47b0      	blx	r6
 8003100:	2800      	cmp	r0, #0
 8003102:	dc07      	bgt.n	8003114 <__sflush_r+0x104>
 8003104:	89a3      	ldrh	r3, [r4, #12]
 8003106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800310a:	81a3      	strh	r3, [r4, #12]
 800310c:	f04f 30ff 	mov.w	r0, #4294967295
 8003110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003114:	4407      	add	r7, r0
 8003116:	eba8 0800 	sub.w	r8, r8, r0
 800311a:	e7e8      	b.n	80030ee <__sflush_r+0xde>
 800311c:	20400001 	.word	0x20400001

08003120 <_fflush_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	690b      	ldr	r3, [r1, #16]
 8003124:	4605      	mov	r5, r0
 8003126:	460c      	mov	r4, r1
 8003128:	b1db      	cbz	r3, 8003162 <_fflush_r+0x42>
 800312a:	b118      	cbz	r0, 8003134 <_fflush_r+0x14>
 800312c:	6983      	ldr	r3, [r0, #24]
 800312e:	b90b      	cbnz	r3, 8003134 <_fflush_r+0x14>
 8003130:	f000 f860 	bl	80031f4 <__sinit>
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <_fflush_r+0x48>)
 8003136:	429c      	cmp	r4, r3
 8003138:	d109      	bne.n	800314e <_fflush_r+0x2e>
 800313a:	686c      	ldr	r4, [r5, #4]
 800313c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003140:	b17b      	cbz	r3, 8003162 <_fflush_r+0x42>
 8003142:	4621      	mov	r1, r4
 8003144:	4628      	mov	r0, r5
 8003146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800314a:	f7ff bf61 	b.w	8003010 <__sflush_r>
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <_fflush_r+0x4c>)
 8003150:	429c      	cmp	r4, r3
 8003152:	d101      	bne.n	8003158 <_fflush_r+0x38>
 8003154:	68ac      	ldr	r4, [r5, #8]
 8003156:	e7f1      	b.n	800313c <_fflush_r+0x1c>
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <_fflush_r+0x50>)
 800315a:	429c      	cmp	r4, r3
 800315c:	bf08      	it	eq
 800315e:	68ec      	ldreq	r4, [r5, #12]
 8003160:	e7ec      	b.n	800313c <_fflush_r+0x1c>
 8003162:	2000      	movs	r0, #0
 8003164:	bd38      	pop	{r3, r4, r5, pc}
 8003166:	bf00      	nop
 8003168:	08003dd8 	.word	0x08003dd8
 800316c:	08003df8 	.word	0x08003df8
 8003170:	08003db8 	.word	0x08003db8

08003174 <_cleanup_r>:
 8003174:	4901      	ldr	r1, [pc, #4]	; (800317c <_cleanup_r+0x8>)
 8003176:	f000 b8a9 	b.w	80032cc <_fwalk_reent>
 800317a:	bf00      	nop
 800317c:	08003121 	.word	0x08003121

08003180 <std.isra.0>:
 8003180:	2300      	movs	r3, #0
 8003182:	b510      	push	{r4, lr}
 8003184:	4604      	mov	r4, r0
 8003186:	6003      	str	r3, [r0, #0]
 8003188:	6043      	str	r3, [r0, #4]
 800318a:	6083      	str	r3, [r0, #8]
 800318c:	8181      	strh	r1, [r0, #12]
 800318e:	6643      	str	r3, [r0, #100]	; 0x64
 8003190:	81c2      	strh	r2, [r0, #14]
 8003192:	6103      	str	r3, [r0, #16]
 8003194:	6143      	str	r3, [r0, #20]
 8003196:	6183      	str	r3, [r0, #24]
 8003198:	4619      	mov	r1, r3
 800319a:	2208      	movs	r2, #8
 800319c:	305c      	adds	r0, #92	; 0x5c
 800319e:	f7ff fd45 	bl	8002c2c <memset>
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <std.isra.0+0x38>)
 80031a4:	6224      	str	r4, [r4, #32]
 80031a6:	6263      	str	r3, [r4, #36]	; 0x24
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <std.isra.0+0x3c>)
 80031aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <std.isra.0+0x40>)
 80031ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <std.isra.0+0x44>)
 80031b2:	6323      	str	r3, [r4, #48]	; 0x30
 80031b4:	bd10      	pop	{r4, pc}
 80031b6:	bf00      	nop
 80031b8:	08003b01 	.word	0x08003b01
 80031bc:	08003b23 	.word	0x08003b23
 80031c0:	08003b5b 	.word	0x08003b5b
 80031c4:	08003b7f 	.word	0x08003b7f

080031c8 <__sfmoreglue>:
 80031c8:	b570      	push	{r4, r5, r6, lr}
 80031ca:	2568      	movs	r5, #104	; 0x68
 80031cc:	1e4a      	subs	r2, r1, #1
 80031ce:	4355      	muls	r5, r2
 80031d0:	460e      	mov	r6, r1
 80031d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80031d6:	f000 f94f 	bl	8003478 <_malloc_r>
 80031da:	4604      	mov	r4, r0
 80031dc:	b140      	cbz	r0, 80031f0 <__sfmoreglue+0x28>
 80031de:	2100      	movs	r1, #0
 80031e0:	e880 0042 	stmia.w	r0, {r1, r6}
 80031e4:	300c      	adds	r0, #12
 80031e6:	60a0      	str	r0, [r4, #8]
 80031e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031ec:	f7ff fd1e 	bl	8002c2c <memset>
 80031f0:	4620      	mov	r0, r4
 80031f2:	bd70      	pop	{r4, r5, r6, pc}

080031f4 <__sinit>:
 80031f4:	6983      	ldr	r3, [r0, #24]
 80031f6:	b510      	push	{r4, lr}
 80031f8:	4604      	mov	r4, r0
 80031fa:	bb33      	cbnz	r3, 800324a <__sinit+0x56>
 80031fc:	6483      	str	r3, [r0, #72]	; 0x48
 80031fe:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003200:	6503      	str	r3, [r0, #80]	; 0x50
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <__sinit+0x58>)
 8003204:	4a12      	ldr	r2, [pc, #72]	; (8003250 <__sinit+0x5c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6282      	str	r2, [r0, #40]	; 0x28
 800320a:	4298      	cmp	r0, r3
 800320c:	bf04      	itt	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	6183      	streq	r3, [r0, #24]
 8003212:	f000 f81f 	bl	8003254 <__sfp>
 8003216:	6060      	str	r0, [r4, #4]
 8003218:	4620      	mov	r0, r4
 800321a:	f000 f81b 	bl	8003254 <__sfp>
 800321e:	60a0      	str	r0, [r4, #8]
 8003220:	4620      	mov	r0, r4
 8003222:	f000 f817 	bl	8003254 <__sfp>
 8003226:	2200      	movs	r2, #0
 8003228:	60e0      	str	r0, [r4, #12]
 800322a:	2104      	movs	r1, #4
 800322c:	6860      	ldr	r0, [r4, #4]
 800322e:	f7ff ffa7 	bl	8003180 <std.isra.0>
 8003232:	2201      	movs	r2, #1
 8003234:	2109      	movs	r1, #9
 8003236:	68a0      	ldr	r0, [r4, #8]
 8003238:	f7ff ffa2 	bl	8003180 <std.isra.0>
 800323c:	2202      	movs	r2, #2
 800323e:	2112      	movs	r1, #18
 8003240:	68e0      	ldr	r0, [r4, #12]
 8003242:	f7ff ff9d 	bl	8003180 <std.isra.0>
 8003246:	2301      	movs	r3, #1
 8003248:	61a3      	str	r3, [r4, #24]
 800324a:	bd10      	pop	{r4, pc}
 800324c:	08003db4 	.word	0x08003db4
 8003250:	08003175 	.word	0x08003175

08003254 <__sfp>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <__sfp+0x74>)
 8003258:	4607      	mov	r7, r0
 800325a:	681e      	ldr	r6, [r3, #0]
 800325c:	69b3      	ldr	r3, [r6, #24]
 800325e:	b913      	cbnz	r3, 8003266 <__sfp+0x12>
 8003260:	4630      	mov	r0, r6
 8003262:	f7ff ffc7 	bl	80031f4 <__sinit>
 8003266:	3648      	adds	r6, #72	; 0x48
 8003268:	68b4      	ldr	r4, [r6, #8]
 800326a:	6873      	ldr	r3, [r6, #4]
 800326c:	3b01      	subs	r3, #1
 800326e:	d503      	bpl.n	8003278 <__sfp+0x24>
 8003270:	6833      	ldr	r3, [r6, #0]
 8003272:	b133      	cbz	r3, 8003282 <__sfp+0x2e>
 8003274:	6836      	ldr	r6, [r6, #0]
 8003276:	e7f7      	b.n	8003268 <__sfp+0x14>
 8003278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800327c:	b16d      	cbz	r5, 800329a <__sfp+0x46>
 800327e:	3468      	adds	r4, #104	; 0x68
 8003280:	e7f4      	b.n	800326c <__sfp+0x18>
 8003282:	2104      	movs	r1, #4
 8003284:	4638      	mov	r0, r7
 8003286:	f7ff ff9f 	bl	80031c8 <__sfmoreglue>
 800328a:	6030      	str	r0, [r6, #0]
 800328c:	2800      	cmp	r0, #0
 800328e:	d1f1      	bne.n	8003274 <__sfp+0x20>
 8003290:	230c      	movs	r3, #12
 8003292:	4604      	mov	r4, r0
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4620      	mov	r0, r4
 8003298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800329a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800329e:	81e3      	strh	r3, [r4, #14]
 80032a0:	2301      	movs	r3, #1
 80032a2:	6665      	str	r5, [r4, #100]	; 0x64
 80032a4:	81a3      	strh	r3, [r4, #12]
 80032a6:	6025      	str	r5, [r4, #0]
 80032a8:	60a5      	str	r5, [r4, #8]
 80032aa:	6065      	str	r5, [r4, #4]
 80032ac:	6125      	str	r5, [r4, #16]
 80032ae:	6165      	str	r5, [r4, #20]
 80032b0:	61a5      	str	r5, [r4, #24]
 80032b2:	2208      	movs	r2, #8
 80032b4:	4629      	mov	r1, r5
 80032b6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80032ba:	f7ff fcb7 	bl	8002c2c <memset>
 80032be:	6365      	str	r5, [r4, #52]	; 0x34
 80032c0:	63a5      	str	r5, [r4, #56]	; 0x38
 80032c2:	64a5      	str	r5, [r4, #72]	; 0x48
 80032c4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80032c6:	e7e6      	b.n	8003296 <__sfp+0x42>
 80032c8:	08003db4 	.word	0x08003db4

080032cc <_fwalk_reent>:
 80032cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d0:	4680      	mov	r8, r0
 80032d2:	4689      	mov	r9, r1
 80032d4:	2600      	movs	r6, #0
 80032d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032da:	b914      	cbnz	r4, 80032e2 <_fwalk_reent+0x16>
 80032dc:	4630      	mov	r0, r6
 80032de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032e2:	68a5      	ldr	r5, [r4, #8]
 80032e4:	6867      	ldr	r7, [r4, #4]
 80032e6:	3f01      	subs	r7, #1
 80032e8:	d501      	bpl.n	80032ee <_fwalk_reent+0x22>
 80032ea:	6824      	ldr	r4, [r4, #0]
 80032ec:	e7f5      	b.n	80032da <_fwalk_reent+0xe>
 80032ee:	89ab      	ldrh	r3, [r5, #12]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d907      	bls.n	8003304 <_fwalk_reent+0x38>
 80032f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032f8:	3301      	adds	r3, #1
 80032fa:	d003      	beq.n	8003304 <_fwalk_reent+0x38>
 80032fc:	4629      	mov	r1, r5
 80032fe:	4640      	mov	r0, r8
 8003300:	47c8      	blx	r9
 8003302:	4306      	orrs	r6, r0
 8003304:	3568      	adds	r5, #104	; 0x68
 8003306:	e7ee      	b.n	80032e6 <_fwalk_reent+0x1a>

08003308 <__swhatbuf_r>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	460e      	mov	r6, r1
 800330c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003310:	b090      	sub	sp, #64	; 0x40
 8003312:	2900      	cmp	r1, #0
 8003314:	4614      	mov	r4, r2
 8003316:	461d      	mov	r5, r3
 8003318:	da07      	bge.n	800332a <__swhatbuf_r+0x22>
 800331a:	2300      	movs	r3, #0
 800331c:	602b      	str	r3, [r5, #0]
 800331e:	89b3      	ldrh	r3, [r6, #12]
 8003320:	061a      	lsls	r2, r3, #24
 8003322:	d410      	bmi.n	8003346 <__swhatbuf_r+0x3e>
 8003324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003328:	e00e      	b.n	8003348 <__swhatbuf_r+0x40>
 800332a:	aa01      	add	r2, sp, #4
 800332c:	f000 fc4e 	bl	8003bcc <_fstat_r>
 8003330:	2800      	cmp	r0, #0
 8003332:	dbf2      	blt.n	800331a <__swhatbuf_r+0x12>
 8003334:	9a02      	ldr	r2, [sp, #8]
 8003336:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800333a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800333e:	425a      	negs	r2, r3
 8003340:	415a      	adcs	r2, r3
 8003342:	602a      	str	r2, [r5, #0]
 8003344:	e7ee      	b.n	8003324 <__swhatbuf_r+0x1c>
 8003346:	2340      	movs	r3, #64	; 0x40
 8003348:	2000      	movs	r0, #0
 800334a:	6023      	str	r3, [r4, #0]
 800334c:	b010      	add	sp, #64	; 0x40
 800334e:	bd70      	pop	{r4, r5, r6, pc}

08003350 <__smakebuf_r>:
 8003350:	898b      	ldrh	r3, [r1, #12]
 8003352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003354:	079d      	lsls	r5, r3, #30
 8003356:	4606      	mov	r6, r0
 8003358:	460c      	mov	r4, r1
 800335a:	d507      	bpl.n	800336c <__smakebuf_r+0x1c>
 800335c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	6123      	str	r3, [r4, #16]
 8003364:	2301      	movs	r3, #1
 8003366:	6163      	str	r3, [r4, #20]
 8003368:	b002      	add	sp, #8
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	ab01      	add	r3, sp, #4
 800336e:	466a      	mov	r2, sp
 8003370:	f7ff ffca 	bl	8003308 <__swhatbuf_r>
 8003374:	9900      	ldr	r1, [sp, #0]
 8003376:	4605      	mov	r5, r0
 8003378:	4630      	mov	r0, r6
 800337a:	f000 f87d 	bl	8003478 <_malloc_r>
 800337e:	b948      	cbnz	r0, 8003394 <__smakebuf_r+0x44>
 8003380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003384:	059a      	lsls	r2, r3, #22
 8003386:	d4ef      	bmi.n	8003368 <__smakebuf_r+0x18>
 8003388:	f023 0303 	bic.w	r3, r3, #3
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	81a3      	strh	r3, [r4, #12]
 8003392:	e7e3      	b.n	800335c <__smakebuf_r+0xc>
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <__smakebuf_r+0x7c>)
 8003396:	62b3      	str	r3, [r6, #40]	; 0x28
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	6020      	str	r0, [r4, #0]
 800339c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a0:	81a3      	strh	r3, [r4, #12]
 80033a2:	9b00      	ldr	r3, [sp, #0]
 80033a4:	6120      	str	r0, [r4, #16]
 80033a6:	6163      	str	r3, [r4, #20]
 80033a8:	9b01      	ldr	r3, [sp, #4]
 80033aa:	b15b      	cbz	r3, 80033c4 <__smakebuf_r+0x74>
 80033ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033b0:	4630      	mov	r0, r6
 80033b2:	f000 fc1d 	bl	8003bf0 <_isatty_r>
 80033b6:	b128      	cbz	r0, 80033c4 <__smakebuf_r+0x74>
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	81a3      	strh	r3, [r4, #12]
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	431d      	orrs	r5, r3
 80033c8:	81a5      	strh	r5, [r4, #12]
 80033ca:	e7cd      	b.n	8003368 <__smakebuf_r+0x18>
 80033cc:	08003175 	.word	0x08003175

080033d0 <malloc>:
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <malloc+0xc>)
 80033d2:	4601      	mov	r1, r0
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	f000 b84f 	b.w	8003478 <_malloc_r>
 80033da:	bf00      	nop
 80033dc:	2000000c 	.word	0x2000000c

080033e0 <_free_r>:
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4605      	mov	r5, r0
 80033e4:	2900      	cmp	r1, #0
 80033e6:	d043      	beq.n	8003470 <_free_r+0x90>
 80033e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ec:	1f0c      	subs	r4, r1, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	bfb8      	it	lt
 80033f2:	18e4      	addlt	r4, r4, r3
 80033f4:	f000 fc2c 	bl	8003c50 <__malloc_lock>
 80033f8:	4a1e      	ldr	r2, [pc, #120]	; (8003474 <_free_r+0x94>)
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	4610      	mov	r0, r2
 80033fe:	b933      	cbnz	r3, 800340e <_free_r+0x2e>
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	6014      	str	r4, [r2, #0]
 8003404:	4628      	mov	r0, r5
 8003406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800340a:	f000 bc22 	b.w	8003c52 <__malloc_unlock>
 800340e:	42a3      	cmp	r3, r4
 8003410:	d90b      	bls.n	800342a <_free_r+0x4a>
 8003412:	6821      	ldr	r1, [r4, #0]
 8003414:	1862      	adds	r2, r4, r1
 8003416:	4293      	cmp	r3, r2
 8003418:	bf01      	itttt	eq
 800341a:	681a      	ldreq	r2, [r3, #0]
 800341c:	685b      	ldreq	r3, [r3, #4]
 800341e:	1852      	addeq	r2, r2, r1
 8003420:	6022      	streq	r2, [r4, #0]
 8003422:	6063      	str	r3, [r4, #4]
 8003424:	6004      	str	r4, [r0, #0]
 8003426:	e7ed      	b.n	8003404 <_free_r+0x24>
 8003428:	4613      	mov	r3, r2
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	b10a      	cbz	r2, 8003432 <_free_r+0x52>
 800342e:	42a2      	cmp	r2, r4
 8003430:	d9fa      	bls.n	8003428 <_free_r+0x48>
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	1858      	adds	r0, r3, r1
 8003436:	42a0      	cmp	r0, r4
 8003438:	d10b      	bne.n	8003452 <_free_r+0x72>
 800343a:	6820      	ldr	r0, [r4, #0]
 800343c:	4401      	add	r1, r0
 800343e:	1858      	adds	r0, r3, r1
 8003440:	4282      	cmp	r2, r0
 8003442:	6019      	str	r1, [r3, #0]
 8003444:	d1de      	bne.n	8003404 <_free_r+0x24>
 8003446:	6810      	ldr	r0, [r2, #0]
 8003448:	6852      	ldr	r2, [r2, #4]
 800344a:	4401      	add	r1, r0
 800344c:	6019      	str	r1, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	e7d8      	b.n	8003404 <_free_r+0x24>
 8003452:	d902      	bls.n	800345a <_free_r+0x7a>
 8003454:	230c      	movs	r3, #12
 8003456:	602b      	str	r3, [r5, #0]
 8003458:	e7d4      	b.n	8003404 <_free_r+0x24>
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	1821      	adds	r1, r4, r0
 800345e:	428a      	cmp	r2, r1
 8003460:	bf01      	itttt	eq
 8003462:	6811      	ldreq	r1, [r2, #0]
 8003464:	6852      	ldreq	r2, [r2, #4]
 8003466:	1809      	addeq	r1, r1, r0
 8003468:	6021      	streq	r1, [r4, #0]
 800346a:	6062      	str	r2, [r4, #4]
 800346c:	605c      	str	r4, [r3, #4]
 800346e:	e7c9      	b.n	8003404 <_free_r+0x24>
 8003470:	bd38      	pop	{r3, r4, r5, pc}
 8003472:	bf00      	nop
 8003474:	2000009c 	.word	0x2000009c

08003478 <_malloc_r>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	1ccd      	adds	r5, r1, #3
 800347c:	f025 0503 	bic.w	r5, r5, #3
 8003480:	3508      	adds	r5, #8
 8003482:	2d0c      	cmp	r5, #12
 8003484:	bf38      	it	cc
 8003486:	250c      	movcc	r5, #12
 8003488:	2d00      	cmp	r5, #0
 800348a:	4606      	mov	r6, r0
 800348c:	db01      	blt.n	8003492 <_malloc_r+0x1a>
 800348e:	42a9      	cmp	r1, r5
 8003490:	d903      	bls.n	800349a <_malloc_r+0x22>
 8003492:	230c      	movs	r3, #12
 8003494:	6033      	str	r3, [r6, #0]
 8003496:	2000      	movs	r0, #0
 8003498:	bd70      	pop	{r4, r5, r6, pc}
 800349a:	f000 fbd9 	bl	8003c50 <__malloc_lock>
 800349e:	4a23      	ldr	r2, [pc, #140]	; (800352c <_malloc_r+0xb4>)
 80034a0:	6814      	ldr	r4, [r2, #0]
 80034a2:	4621      	mov	r1, r4
 80034a4:	b991      	cbnz	r1, 80034cc <_malloc_r+0x54>
 80034a6:	4c22      	ldr	r4, [pc, #136]	; (8003530 <_malloc_r+0xb8>)
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	b91b      	cbnz	r3, 80034b4 <_malloc_r+0x3c>
 80034ac:	4630      	mov	r0, r6
 80034ae:	f000 fb17 	bl	8003ae0 <_sbrk_r>
 80034b2:	6020      	str	r0, [r4, #0]
 80034b4:	4629      	mov	r1, r5
 80034b6:	4630      	mov	r0, r6
 80034b8:	f000 fb12 	bl	8003ae0 <_sbrk_r>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d126      	bne.n	800350e <_malloc_r+0x96>
 80034c0:	230c      	movs	r3, #12
 80034c2:	4630      	mov	r0, r6
 80034c4:	6033      	str	r3, [r6, #0]
 80034c6:	f000 fbc4 	bl	8003c52 <__malloc_unlock>
 80034ca:	e7e4      	b.n	8003496 <_malloc_r+0x1e>
 80034cc:	680b      	ldr	r3, [r1, #0]
 80034ce:	1b5b      	subs	r3, r3, r5
 80034d0:	d41a      	bmi.n	8003508 <_malloc_r+0x90>
 80034d2:	2b0b      	cmp	r3, #11
 80034d4:	d90f      	bls.n	80034f6 <_malloc_r+0x7e>
 80034d6:	600b      	str	r3, [r1, #0]
 80034d8:	18cc      	adds	r4, r1, r3
 80034da:	50cd      	str	r5, [r1, r3]
 80034dc:	4630      	mov	r0, r6
 80034de:	f000 fbb8 	bl	8003c52 <__malloc_unlock>
 80034e2:	f104 000b 	add.w	r0, r4, #11
 80034e6:	1d23      	adds	r3, r4, #4
 80034e8:	f020 0007 	bic.w	r0, r0, #7
 80034ec:	1ac3      	subs	r3, r0, r3
 80034ee:	d01b      	beq.n	8003528 <_malloc_r+0xb0>
 80034f0:	425a      	negs	r2, r3
 80034f2:	50e2      	str	r2, [r4, r3]
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
 80034f6:	428c      	cmp	r4, r1
 80034f8:	bf0b      	itete	eq
 80034fa:	6863      	ldreq	r3, [r4, #4]
 80034fc:	684b      	ldrne	r3, [r1, #4]
 80034fe:	6013      	streq	r3, [r2, #0]
 8003500:	6063      	strne	r3, [r4, #4]
 8003502:	bf18      	it	ne
 8003504:	460c      	movne	r4, r1
 8003506:	e7e9      	b.n	80034dc <_malloc_r+0x64>
 8003508:	460c      	mov	r4, r1
 800350a:	6849      	ldr	r1, [r1, #4]
 800350c:	e7ca      	b.n	80034a4 <_malloc_r+0x2c>
 800350e:	1cc4      	adds	r4, r0, #3
 8003510:	f024 0403 	bic.w	r4, r4, #3
 8003514:	42a0      	cmp	r0, r4
 8003516:	d005      	beq.n	8003524 <_malloc_r+0xac>
 8003518:	1a21      	subs	r1, r4, r0
 800351a:	4630      	mov	r0, r6
 800351c:	f000 fae0 	bl	8003ae0 <_sbrk_r>
 8003520:	3001      	adds	r0, #1
 8003522:	d0cd      	beq.n	80034c0 <_malloc_r+0x48>
 8003524:	6025      	str	r5, [r4, #0]
 8003526:	e7d9      	b.n	80034dc <_malloc_r+0x64>
 8003528:	bd70      	pop	{r4, r5, r6, pc}
 800352a:	bf00      	nop
 800352c:	2000009c 	.word	0x2000009c
 8003530:	200000a0 	.word	0x200000a0

08003534 <__sfputc_r>:
 8003534:	6893      	ldr	r3, [r2, #8]
 8003536:	b410      	push	{r4}
 8003538:	3b01      	subs	r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	6093      	str	r3, [r2, #8]
 800353e:	da08      	bge.n	8003552 <__sfputc_r+0x1e>
 8003540:	6994      	ldr	r4, [r2, #24]
 8003542:	42a3      	cmp	r3, r4
 8003544:	db02      	blt.n	800354c <__sfputc_r+0x18>
 8003546:	b2cb      	uxtb	r3, r1
 8003548:	2b0a      	cmp	r3, #10
 800354a:	d102      	bne.n	8003552 <__sfputc_r+0x1e>
 800354c:	bc10      	pop	{r4}
 800354e:	f7ff bc9f 	b.w	8002e90 <__swbuf_r>
 8003552:	6813      	ldr	r3, [r2, #0]
 8003554:	1c58      	adds	r0, r3, #1
 8003556:	6010      	str	r0, [r2, #0]
 8003558:	7019      	strb	r1, [r3, #0]
 800355a:	b2c8      	uxtb	r0, r1
 800355c:	bc10      	pop	{r4}
 800355e:	4770      	bx	lr

08003560 <__sfputs_r>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	4606      	mov	r6, r0
 8003564:	460f      	mov	r7, r1
 8003566:	4614      	mov	r4, r2
 8003568:	18d5      	adds	r5, r2, r3
 800356a:	42ac      	cmp	r4, r5
 800356c:	d101      	bne.n	8003572 <__sfputs_r+0x12>
 800356e:	2000      	movs	r0, #0
 8003570:	e007      	b.n	8003582 <__sfputs_r+0x22>
 8003572:	463a      	mov	r2, r7
 8003574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003578:	4630      	mov	r0, r6
 800357a:	f7ff ffdb 	bl	8003534 <__sfputc_r>
 800357e:	1c43      	adds	r3, r0, #1
 8003580:	d1f3      	bne.n	800356a <__sfputs_r+0xa>
 8003582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003584 <_vfiprintf_r>:
 8003584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003588:	b09d      	sub	sp, #116	; 0x74
 800358a:	460c      	mov	r4, r1
 800358c:	4617      	mov	r7, r2
 800358e:	9303      	str	r3, [sp, #12]
 8003590:	4606      	mov	r6, r0
 8003592:	b118      	cbz	r0, 800359c <_vfiprintf_r+0x18>
 8003594:	6983      	ldr	r3, [r0, #24]
 8003596:	b90b      	cbnz	r3, 800359c <_vfiprintf_r+0x18>
 8003598:	f7ff fe2c 	bl	80031f4 <__sinit>
 800359c:	4b7c      	ldr	r3, [pc, #496]	; (8003790 <_vfiprintf_r+0x20c>)
 800359e:	429c      	cmp	r4, r3
 80035a0:	d157      	bne.n	8003652 <_vfiprintf_r+0xce>
 80035a2:	6874      	ldr	r4, [r6, #4]
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	0718      	lsls	r0, r3, #28
 80035a8:	d55d      	bpl.n	8003666 <_vfiprintf_r+0xe2>
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d05a      	beq.n	8003666 <_vfiprintf_r+0xe2>
 80035b0:	2300      	movs	r3, #0
 80035b2:	9309      	str	r3, [sp, #36]	; 0x24
 80035b4:	2320      	movs	r3, #32
 80035b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035ba:	2330      	movs	r3, #48	; 0x30
 80035bc:	f04f 0b01 	mov.w	fp, #1
 80035c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035c4:	46b8      	mov	r8, r7
 80035c6:	4645      	mov	r5, r8
 80035c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d155      	bne.n	800367c <_vfiprintf_r+0xf8>
 80035d0:	ebb8 0a07 	subs.w	sl, r8, r7
 80035d4:	d00b      	beq.n	80035ee <_vfiprintf_r+0x6a>
 80035d6:	4653      	mov	r3, sl
 80035d8:	463a      	mov	r2, r7
 80035da:	4621      	mov	r1, r4
 80035dc:	4630      	mov	r0, r6
 80035de:	f7ff ffbf 	bl	8003560 <__sfputs_r>
 80035e2:	3001      	adds	r0, #1
 80035e4:	f000 80c4 	beq.w	8003770 <_vfiprintf_r+0x1ec>
 80035e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ea:	4453      	add	r3, sl
 80035ec:	9309      	str	r3, [sp, #36]	; 0x24
 80035ee:	f898 3000 	ldrb.w	r3, [r8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80bc 	beq.w	8003770 <_vfiprintf_r+0x1ec>
 80035f8:	2300      	movs	r3, #0
 80035fa:	f04f 32ff 	mov.w	r2, #4294967295
 80035fe:	9304      	str	r3, [sp, #16]
 8003600:	9307      	str	r3, [sp, #28]
 8003602:	9205      	str	r2, [sp, #20]
 8003604:	9306      	str	r3, [sp, #24]
 8003606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800360a:	931a      	str	r3, [sp, #104]	; 0x68
 800360c:	2205      	movs	r2, #5
 800360e:	7829      	ldrb	r1, [r5, #0]
 8003610:	4860      	ldr	r0, [pc, #384]	; (8003794 <_vfiprintf_r+0x210>)
 8003612:	f000 fb0f 	bl	8003c34 <memchr>
 8003616:	f105 0801 	add.w	r8, r5, #1
 800361a:	9b04      	ldr	r3, [sp, #16]
 800361c:	2800      	cmp	r0, #0
 800361e:	d131      	bne.n	8003684 <_vfiprintf_r+0x100>
 8003620:	06d9      	lsls	r1, r3, #27
 8003622:	bf44      	itt	mi
 8003624:	2220      	movmi	r2, #32
 8003626:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800362a:	071a      	lsls	r2, r3, #28
 800362c:	bf44      	itt	mi
 800362e:	222b      	movmi	r2, #43	; 0x2b
 8003630:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003634:	782a      	ldrb	r2, [r5, #0]
 8003636:	2a2a      	cmp	r2, #42	; 0x2a
 8003638:	d02c      	beq.n	8003694 <_vfiprintf_r+0x110>
 800363a:	2100      	movs	r1, #0
 800363c:	200a      	movs	r0, #10
 800363e:	9a07      	ldr	r2, [sp, #28]
 8003640:	46a8      	mov	r8, r5
 8003642:	f898 3000 	ldrb.w	r3, [r8]
 8003646:	3501      	adds	r5, #1
 8003648:	3b30      	subs	r3, #48	; 0x30
 800364a:	2b09      	cmp	r3, #9
 800364c:	d96d      	bls.n	800372a <_vfiprintf_r+0x1a6>
 800364e:	b371      	cbz	r1, 80036ae <_vfiprintf_r+0x12a>
 8003650:	e026      	b.n	80036a0 <_vfiprintf_r+0x11c>
 8003652:	4b51      	ldr	r3, [pc, #324]	; (8003798 <_vfiprintf_r+0x214>)
 8003654:	429c      	cmp	r4, r3
 8003656:	d101      	bne.n	800365c <_vfiprintf_r+0xd8>
 8003658:	68b4      	ldr	r4, [r6, #8]
 800365a:	e7a3      	b.n	80035a4 <_vfiprintf_r+0x20>
 800365c:	4b4f      	ldr	r3, [pc, #316]	; (800379c <_vfiprintf_r+0x218>)
 800365e:	429c      	cmp	r4, r3
 8003660:	bf08      	it	eq
 8003662:	68f4      	ldreq	r4, [r6, #12]
 8003664:	e79e      	b.n	80035a4 <_vfiprintf_r+0x20>
 8003666:	4621      	mov	r1, r4
 8003668:	4630      	mov	r0, r6
 800366a:	f7ff fc63 	bl	8002f34 <__swsetup_r>
 800366e:	2800      	cmp	r0, #0
 8003670:	d09e      	beq.n	80035b0 <_vfiprintf_r+0x2c>
 8003672:	f04f 30ff 	mov.w	r0, #4294967295
 8003676:	b01d      	add	sp, #116	; 0x74
 8003678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367c:	2b25      	cmp	r3, #37	; 0x25
 800367e:	d0a7      	beq.n	80035d0 <_vfiprintf_r+0x4c>
 8003680:	46a8      	mov	r8, r5
 8003682:	e7a0      	b.n	80035c6 <_vfiprintf_r+0x42>
 8003684:	4a43      	ldr	r2, [pc, #268]	; (8003794 <_vfiprintf_r+0x210>)
 8003686:	4645      	mov	r5, r8
 8003688:	1a80      	subs	r0, r0, r2
 800368a:	fa0b f000 	lsl.w	r0, fp, r0
 800368e:	4318      	orrs	r0, r3
 8003690:	9004      	str	r0, [sp, #16]
 8003692:	e7bb      	b.n	800360c <_vfiprintf_r+0x88>
 8003694:	9a03      	ldr	r2, [sp, #12]
 8003696:	1d11      	adds	r1, r2, #4
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	9103      	str	r1, [sp, #12]
 800369c:	2a00      	cmp	r2, #0
 800369e:	db01      	blt.n	80036a4 <_vfiprintf_r+0x120>
 80036a0:	9207      	str	r2, [sp, #28]
 80036a2:	e004      	b.n	80036ae <_vfiprintf_r+0x12a>
 80036a4:	4252      	negs	r2, r2
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	9207      	str	r2, [sp, #28]
 80036ac:	9304      	str	r3, [sp, #16]
 80036ae:	f898 3000 	ldrb.w	r3, [r8]
 80036b2:	2b2e      	cmp	r3, #46	; 0x2e
 80036b4:	d110      	bne.n	80036d8 <_vfiprintf_r+0x154>
 80036b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80036ba:	f108 0101 	add.w	r1, r8, #1
 80036be:	2b2a      	cmp	r3, #42	; 0x2a
 80036c0:	d137      	bne.n	8003732 <_vfiprintf_r+0x1ae>
 80036c2:	9b03      	ldr	r3, [sp, #12]
 80036c4:	f108 0802 	add.w	r8, r8, #2
 80036c8:	1d1a      	adds	r2, r3, #4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	9203      	str	r2, [sp, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bfb8      	it	lt
 80036d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80036d6:	9305      	str	r3, [sp, #20]
 80036d8:	4d31      	ldr	r5, [pc, #196]	; (80037a0 <_vfiprintf_r+0x21c>)
 80036da:	2203      	movs	r2, #3
 80036dc:	f898 1000 	ldrb.w	r1, [r8]
 80036e0:	4628      	mov	r0, r5
 80036e2:	f000 faa7 	bl	8003c34 <memchr>
 80036e6:	b140      	cbz	r0, 80036fa <_vfiprintf_r+0x176>
 80036e8:	2340      	movs	r3, #64	; 0x40
 80036ea:	1b40      	subs	r0, r0, r5
 80036ec:	fa03 f000 	lsl.w	r0, r3, r0
 80036f0:	9b04      	ldr	r3, [sp, #16]
 80036f2:	f108 0801 	add.w	r8, r8, #1
 80036f6:	4303      	orrs	r3, r0
 80036f8:	9304      	str	r3, [sp, #16]
 80036fa:	f898 1000 	ldrb.w	r1, [r8]
 80036fe:	2206      	movs	r2, #6
 8003700:	4828      	ldr	r0, [pc, #160]	; (80037a4 <_vfiprintf_r+0x220>)
 8003702:	f108 0701 	add.w	r7, r8, #1
 8003706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800370a:	f000 fa93 	bl	8003c34 <memchr>
 800370e:	2800      	cmp	r0, #0
 8003710:	d034      	beq.n	800377c <_vfiprintf_r+0x1f8>
 8003712:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <_vfiprintf_r+0x224>)
 8003714:	bb03      	cbnz	r3, 8003758 <_vfiprintf_r+0x1d4>
 8003716:	9b03      	ldr	r3, [sp, #12]
 8003718:	3307      	adds	r3, #7
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	3308      	adds	r3, #8
 8003720:	9303      	str	r3, [sp, #12]
 8003722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003724:	444b      	add	r3, r9
 8003726:	9309      	str	r3, [sp, #36]	; 0x24
 8003728:	e74c      	b.n	80035c4 <_vfiprintf_r+0x40>
 800372a:	fb00 3202 	mla	r2, r0, r2, r3
 800372e:	2101      	movs	r1, #1
 8003730:	e786      	b.n	8003640 <_vfiprintf_r+0xbc>
 8003732:	2300      	movs	r3, #0
 8003734:	250a      	movs	r5, #10
 8003736:	4618      	mov	r0, r3
 8003738:	9305      	str	r3, [sp, #20]
 800373a:	4688      	mov	r8, r1
 800373c:	f898 2000 	ldrb.w	r2, [r8]
 8003740:	3101      	adds	r1, #1
 8003742:	3a30      	subs	r2, #48	; 0x30
 8003744:	2a09      	cmp	r2, #9
 8003746:	d903      	bls.n	8003750 <_vfiprintf_r+0x1cc>
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0c5      	beq.n	80036d8 <_vfiprintf_r+0x154>
 800374c:	9005      	str	r0, [sp, #20]
 800374e:	e7c3      	b.n	80036d8 <_vfiprintf_r+0x154>
 8003750:	fb05 2000 	mla	r0, r5, r0, r2
 8003754:	2301      	movs	r3, #1
 8003756:	e7f0      	b.n	800373a <_vfiprintf_r+0x1b6>
 8003758:	ab03      	add	r3, sp, #12
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4622      	mov	r2, r4
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <_vfiprintf_r+0x228>)
 8003760:	a904      	add	r1, sp, #16
 8003762:	4630      	mov	r0, r6
 8003764:	f3af 8000 	nop.w
 8003768:	f1b0 3fff 	cmp.w	r0, #4294967295
 800376c:	4681      	mov	r9, r0
 800376e:	d1d8      	bne.n	8003722 <_vfiprintf_r+0x19e>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	065b      	lsls	r3, r3, #25
 8003774:	f53f af7d 	bmi.w	8003672 <_vfiprintf_r+0xee>
 8003778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800377a:	e77c      	b.n	8003676 <_vfiprintf_r+0xf2>
 800377c:	ab03      	add	r3, sp, #12
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	4622      	mov	r2, r4
 8003782:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <_vfiprintf_r+0x228>)
 8003784:	a904      	add	r1, sp, #16
 8003786:	4630      	mov	r0, r6
 8003788:	f000 f88a 	bl	80038a0 <_printf_i>
 800378c:	e7ec      	b.n	8003768 <_vfiprintf_r+0x1e4>
 800378e:	bf00      	nop
 8003790:	08003dd8 	.word	0x08003dd8
 8003794:	08003e18 	.word	0x08003e18
 8003798:	08003df8 	.word	0x08003df8
 800379c:	08003db8 	.word	0x08003db8
 80037a0:	08003e1e 	.word	0x08003e1e
 80037a4:	08003e22 	.word	0x08003e22
 80037a8:	00000000 	.word	0x00000000
 80037ac:	08003561 	.word	0x08003561

080037b0 <_printf_common>:
 80037b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b4:	4691      	mov	r9, r2
 80037b6:	461f      	mov	r7, r3
 80037b8:	688a      	ldr	r2, [r1, #8]
 80037ba:	690b      	ldr	r3, [r1, #16]
 80037bc:	4606      	mov	r6, r0
 80037be:	4293      	cmp	r3, r2
 80037c0:	bfb8      	it	lt
 80037c2:	4613      	movlt	r3, r2
 80037c4:	f8c9 3000 	str.w	r3, [r9]
 80037c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037cc:	460c      	mov	r4, r1
 80037ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037d2:	b112      	cbz	r2, 80037da <_printf_common+0x2a>
 80037d4:	3301      	adds	r3, #1
 80037d6:	f8c9 3000 	str.w	r3, [r9]
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	0699      	lsls	r1, r3, #26
 80037de:	bf42      	ittt	mi
 80037e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037e4:	3302      	addmi	r3, #2
 80037e6:	f8c9 3000 	strmi.w	r3, [r9]
 80037ea:	6825      	ldr	r5, [r4, #0]
 80037ec:	f015 0506 	ands.w	r5, r5, #6
 80037f0:	d107      	bne.n	8003802 <_printf_common+0x52>
 80037f2:	f104 0a19 	add.w	sl, r4, #25
 80037f6:	68e3      	ldr	r3, [r4, #12]
 80037f8:	f8d9 2000 	ldr.w	r2, [r9]
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	429d      	cmp	r5, r3
 8003800:	db2a      	blt.n	8003858 <_printf_common+0xa8>
 8003802:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003806:	6822      	ldr	r2, [r4, #0]
 8003808:	3300      	adds	r3, #0
 800380a:	bf18      	it	ne
 800380c:	2301      	movne	r3, #1
 800380e:	0692      	lsls	r2, r2, #26
 8003810:	d42f      	bmi.n	8003872 <_printf_common+0xc2>
 8003812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003816:	4639      	mov	r1, r7
 8003818:	4630      	mov	r0, r6
 800381a:	47c0      	blx	r8
 800381c:	3001      	adds	r0, #1
 800381e:	d022      	beq.n	8003866 <_printf_common+0xb6>
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	68e5      	ldr	r5, [r4, #12]
 8003824:	f003 0306 	and.w	r3, r3, #6
 8003828:	2b04      	cmp	r3, #4
 800382a:	bf18      	it	ne
 800382c:	2500      	movne	r5, #0
 800382e:	f8d9 2000 	ldr.w	r2, [r9]
 8003832:	f04f 0900 	mov.w	r9, #0
 8003836:	bf08      	it	eq
 8003838:	1aad      	subeq	r5, r5, r2
 800383a:	68a3      	ldr	r3, [r4, #8]
 800383c:	6922      	ldr	r2, [r4, #16]
 800383e:	bf08      	it	eq
 8003840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003844:	4293      	cmp	r3, r2
 8003846:	bfc4      	itt	gt
 8003848:	1a9b      	subgt	r3, r3, r2
 800384a:	18ed      	addgt	r5, r5, r3
 800384c:	341a      	adds	r4, #26
 800384e:	454d      	cmp	r5, r9
 8003850:	d11b      	bne.n	800388a <_printf_common+0xda>
 8003852:	2000      	movs	r0, #0
 8003854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003858:	2301      	movs	r3, #1
 800385a:	4652      	mov	r2, sl
 800385c:	4639      	mov	r1, r7
 800385e:	4630      	mov	r0, r6
 8003860:	47c0      	blx	r8
 8003862:	3001      	adds	r0, #1
 8003864:	d103      	bne.n	800386e <_printf_common+0xbe>
 8003866:	f04f 30ff 	mov.w	r0, #4294967295
 800386a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800386e:	3501      	adds	r5, #1
 8003870:	e7c1      	b.n	80037f6 <_printf_common+0x46>
 8003872:	2030      	movs	r0, #48	; 0x30
 8003874:	18e1      	adds	r1, r4, r3
 8003876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003880:	4422      	add	r2, r4
 8003882:	3302      	adds	r3, #2
 8003884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003888:	e7c3      	b.n	8003812 <_printf_common+0x62>
 800388a:	2301      	movs	r3, #1
 800388c:	4622      	mov	r2, r4
 800388e:	4639      	mov	r1, r7
 8003890:	4630      	mov	r0, r6
 8003892:	47c0      	blx	r8
 8003894:	3001      	adds	r0, #1
 8003896:	d0e6      	beq.n	8003866 <_printf_common+0xb6>
 8003898:	f109 0901 	add.w	r9, r9, #1
 800389c:	e7d7      	b.n	800384e <_printf_common+0x9e>
	...

080038a0 <_printf_i>:
 80038a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038a4:	4617      	mov	r7, r2
 80038a6:	7e0a      	ldrb	r2, [r1, #24]
 80038a8:	b085      	sub	sp, #20
 80038aa:	2a6e      	cmp	r2, #110	; 0x6e
 80038ac:	4698      	mov	r8, r3
 80038ae:	4606      	mov	r6, r0
 80038b0:	460c      	mov	r4, r1
 80038b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038b4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80038b8:	f000 80bc 	beq.w	8003a34 <_printf_i+0x194>
 80038bc:	d81a      	bhi.n	80038f4 <_printf_i+0x54>
 80038be:	2a63      	cmp	r2, #99	; 0x63
 80038c0:	d02e      	beq.n	8003920 <_printf_i+0x80>
 80038c2:	d80a      	bhi.n	80038da <_printf_i+0x3a>
 80038c4:	2a00      	cmp	r2, #0
 80038c6:	f000 80c8 	beq.w	8003a5a <_printf_i+0x1ba>
 80038ca:	2a58      	cmp	r2, #88	; 0x58
 80038cc:	f000 808a 	beq.w	80039e4 <_printf_i+0x144>
 80038d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038d4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80038d8:	e02a      	b.n	8003930 <_printf_i+0x90>
 80038da:	2a64      	cmp	r2, #100	; 0x64
 80038dc:	d001      	beq.n	80038e2 <_printf_i+0x42>
 80038de:	2a69      	cmp	r2, #105	; 0x69
 80038e0:	d1f6      	bne.n	80038d0 <_printf_i+0x30>
 80038e2:	6821      	ldr	r1, [r4, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038ea:	d023      	beq.n	8003934 <_printf_i+0x94>
 80038ec:	1d11      	adds	r1, r2, #4
 80038ee:	6019      	str	r1, [r3, #0]
 80038f0:	6813      	ldr	r3, [r2, #0]
 80038f2:	e027      	b.n	8003944 <_printf_i+0xa4>
 80038f4:	2a73      	cmp	r2, #115	; 0x73
 80038f6:	f000 80b4 	beq.w	8003a62 <_printf_i+0x1c2>
 80038fa:	d808      	bhi.n	800390e <_printf_i+0x6e>
 80038fc:	2a6f      	cmp	r2, #111	; 0x6f
 80038fe:	d02a      	beq.n	8003956 <_printf_i+0xb6>
 8003900:	2a70      	cmp	r2, #112	; 0x70
 8003902:	d1e5      	bne.n	80038d0 <_printf_i+0x30>
 8003904:	680a      	ldr	r2, [r1, #0]
 8003906:	f042 0220 	orr.w	r2, r2, #32
 800390a:	600a      	str	r2, [r1, #0]
 800390c:	e003      	b.n	8003916 <_printf_i+0x76>
 800390e:	2a75      	cmp	r2, #117	; 0x75
 8003910:	d021      	beq.n	8003956 <_printf_i+0xb6>
 8003912:	2a78      	cmp	r2, #120	; 0x78
 8003914:	d1dc      	bne.n	80038d0 <_printf_i+0x30>
 8003916:	2278      	movs	r2, #120	; 0x78
 8003918:	496f      	ldr	r1, [pc, #444]	; (8003ad8 <_printf_i+0x238>)
 800391a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800391e:	e064      	b.n	80039ea <_printf_i+0x14a>
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003926:	1d11      	adds	r1, r2, #4
 8003928:	6019      	str	r1, [r3, #0]
 800392a:	6813      	ldr	r3, [r2, #0]
 800392c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003930:	2301      	movs	r3, #1
 8003932:	e0a3      	b.n	8003a7c <_printf_i+0x1dc>
 8003934:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003938:	f102 0104 	add.w	r1, r2, #4
 800393c:	6019      	str	r1, [r3, #0]
 800393e:	d0d7      	beq.n	80038f0 <_printf_i+0x50>
 8003940:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003944:	2b00      	cmp	r3, #0
 8003946:	da03      	bge.n	8003950 <_printf_i+0xb0>
 8003948:	222d      	movs	r2, #45	; 0x2d
 800394a:	425b      	negs	r3, r3
 800394c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003950:	4962      	ldr	r1, [pc, #392]	; (8003adc <_printf_i+0x23c>)
 8003952:	220a      	movs	r2, #10
 8003954:	e017      	b.n	8003986 <_printf_i+0xe6>
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800395e:	d003      	beq.n	8003968 <_printf_i+0xc8>
 8003960:	1d08      	adds	r0, r1, #4
 8003962:	6018      	str	r0, [r3, #0]
 8003964:	680b      	ldr	r3, [r1, #0]
 8003966:	e006      	b.n	8003976 <_printf_i+0xd6>
 8003968:	f010 0f40 	tst.w	r0, #64	; 0x40
 800396c:	f101 0004 	add.w	r0, r1, #4
 8003970:	6018      	str	r0, [r3, #0]
 8003972:	d0f7      	beq.n	8003964 <_printf_i+0xc4>
 8003974:	880b      	ldrh	r3, [r1, #0]
 8003976:	2a6f      	cmp	r2, #111	; 0x6f
 8003978:	bf14      	ite	ne
 800397a:	220a      	movne	r2, #10
 800397c:	2208      	moveq	r2, #8
 800397e:	4957      	ldr	r1, [pc, #348]	; (8003adc <_printf_i+0x23c>)
 8003980:	2000      	movs	r0, #0
 8003982:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003986:	6865      	ldr	r5, [r4, #4]
 8003988:	2d00      	cmp	r5, #0
 800398a:	60a5      	str	r5, [r4, #8]
 800398c:	f2c0 809c 	blt.w	8003ac8 <_printf_i+0x228>
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	f020 0004 	bic.w	r0, r0, #4
 8003996:	6020      	str	r0, [r4, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d13f      	bne.n	8003a1c <_printf_i+0x17c>
 800399c:	2d00      	cmp	r5, #0
 800399e:	f040 8095 	bne.w	8003acc <_printf_i+0x22c>
 80039a2:	4675      	mov	r5, lr
 80039a4:	2a08      	cmp	r2, #8
 80039a6:	d10b      	bne.n	80039c0 <_printf_i+0x120>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	07da      	lsls	r2, r3, #31
 80039ac:	d508      	bpl.n	80039c0 <_printf_i+0x120>
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	6862      	ldr	r2, [r4, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	bfde      	ittt	le
 80039b6:	2330      	movle	r3, #48	; 0x30
 80039b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039c0:	ebae 0305 	sub.w	r3, lr, r5
 80039c4:	6123      	str	r3, [r4, #16]
 80039c6:	f8cd 8000 	str.w	r8, [sp]
 80039ca:	463b      	mov	r3, r7
 80039cc:	aa03      	add	r2, sp, #12
 80039ce:	4621      	mov	r1, r4
 80039d0:	4630      	mov	r0, r6
 80039d2:	f7ff feed 	bl	80037b0 <_printf_common>
 80039d6:	3001      	adds	r0, #1
 80039d8:	d155      	bne.n	8003a86 <_printf_i+0x1e6>
 80039da:	f04f 30ff 	mov.w	r0, #4294967295
 80039de:	b005      	add	sp, #20
 80039e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039e4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80039e8:	493c      	ldr	r1, [pc, #240]	; (8003adc <_printf_i+0x23c>)
 80039ea:	6822      	ldr	r2, [r4, #0]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80039f2:	f100 0504 	add.w	r5, r0, #4
 80039f6:	601d      	str	r5, [r3, #0]
 80039f8:	d001      	beq.n	80039fe <_printf_i+0x15e>
 80039fa:	6803      	ldr	r3, [r0, #0]
 80039fc:	e002      	b.n	8003a04 <_printf_i+0x164>
 80039fe:	0655      	lsls	r5, r2, #25
 8003a00:	d5fb      	bpl.n	80039fa <_printf_i+0x15a>
 8003a02:	8803      	ldrh	r3, [r0, #0]
 8003a04:	07d0      	lsls	r0, r2, #31
 8003a06:	bf44      	itt	mi
 8003a08:	f042 0220 	orrmi.w	r2, r2, #32
 8003a0c:	6022      	strmi	r2, [r4, #0]
 8003a0e:	b91b      	cbnz	r3, 8003a18 <_printf_i+0x178>
 8003a10:	6822      	ldr	r2, [r4, #0]
 8003a12:	f022 0220 	bic.w	r2, r2, #32
 8003a16:	6022      	str	r2, [r4, #0]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	e7b1      	b.n	8003980 <_printf_i+0xe0>
 8003a1c:	4675      	mov	r5, lr
 8003a1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a22:	fb02 3310 	mls	r3, r2, r0, r3
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d1f5      	bne.n	8003a1e <_printf_i+0x17e>
 8003a32:	e7b7      	b.n	80039a4 <_printf_i+0x104>
 8003a34:	6808      	ldr	r0, [r1, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a3c:	6949      	ldr	r1, [r1, #20]
 8003a3e:	d004      	beq.n	8003a4a <_printf_i+0x1aa>
 8003a40:	1d10      	adds	r0, r2, #4
 8003a42:	6018      	str	r0, [r3, #0]
 8003a44:	6813      	ldr	r3, [r2, #0]
 8003a46:	6019      	str	r1, [r3, #0]
 8003a48:	e007      	b.n	8003a5a <_printf_i+0x1ba>
 8003a4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a4e:	f102 0004 	add.w	r0, r2, #4
 8003a52:	6018      	str	r0, [r3, #0]
 8003a54:	6813      	ldr	r3, [r2, #0]
 8003a56:	d0f6      	beq.n	8003a46 <_printf_i+0x1a6>
 8003a58:	8019      	strh	r1, [r3, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	4675      	mov	r5, lr
 8003a5e:	6123      	str	r3, [r4, #16]
 8003a60:	e7b1      	b.n	80039c6 <_printf_i+0x126>
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	1d11      	adds	r1, r2, #4
 8003a66:	6019      	str	r1, [r3, #0]
 8003a68:	6815      	ldr	r5, [r2, #0]
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	6862      	ldr	r2, [r4, #4]
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f000 f8e0 	bl	8003c34 <memchr>
 8003a74:	b108      	cbz	r0, 8003a7a <_printf_i+0x1da>
 8003a76:	1b40      	subs	r0, r0, r5
 8003a78:	6060      	str	r0, [r4, #4]
 8003a7a:	6863      	ldr	r3, [r4, #4]
 8003a7c:	6123      	str	r3, [r4, #16]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a84:	e79f      	b.n	80039c6 <_printf_i+0x126>
 8003a86:	6923      	ldr	r3, [r4, #16]
 8003a88:	462a      	mov	r2, r5
 8003a8a:	4639      	mov	r1, r7
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	47c0      	blx	r8
 8003a90:	3001      	adds	r0, #1
 8003a92:	d0a2      	beq.n	80039da <_printf_i+0x13a>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	079b      	lsls	r3, r3, #30
 8003a98:	d507      	bpl.n	8003aaa <_printf_i+0x20a>
 8003a9a:	2500      	movs	r5, #0
 8003a9c:	f104 0919 	add.w	r9, r4, #25
 8003aa0:	68e3      	ldr	r3, [r4, #12]
 8003aa2:	9a03      	ldr	r2, [sp, #12]
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	429d      	cmp	r5, r3
 8003aa8:	db05      	blt.n	8003ab6 <_printf_i+0x216>
 8003aaa:	68e0      	ldr	r0, [r4, #12]
 8003aac:	9b03      	ldr	r3, [sp, #12]
 8003aae:	4298      	cmp	r0, r3
 8003ab0:	bfb8      	it	lt
 8003ab2:	4618      	movlt	r0, r3
 8003ab4:	e793      	b.n	80039de <_printf_i+0x13e>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	464a      	mov	r2, r9
 8003aba:	4639      	mov	r1, r7
 8003abc:	4630      	mov	r0, r6
 8003abe:	47c0      	blx	r8
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	d08a      	beq.n	80039da <_printf_i+0x13a>
 8003ac4:	3501      	adds	r5, #1
 8003ac6:	e7eb      	b.n	8003aa0 <_printf_i+0x200>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1a7      	bne.n	8003a1c <_printf_i+0x17c>
 8003acc:	780b      	ldrb	r3, [r1, #0]
 8003ace:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ad2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad6:	e765      	b.n	80039a4 <_printf_i+0x104>
 8003ad8:	08003e3a 	.word	0x08003e3a
 8003adc:	08003e29 	.word	0x08003e29

08003ae0 <_sbrk_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	4c05      	ldr	r4, [pc, #20]	; (8003afc <_sbrk_r+0x1c>)
 8003ae6:	4605      	mov	r5, r0
 8003ae8:	4608      	mov	r0, r1
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	f7fe ffbe 	bl	8002a6c <_sbrk>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_sbrk_r+0x1a>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_sbrk_r+0x1a>
 8003af8:	602b      	str	r3, [r5, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	20000128 	.word	0x20000128

08003b00 <__sread>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	460c      	mov	r4, r1
 8003b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b08:	f000 f8a4 	bl	8003c54 <_read_r>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	bfab      	itete	ge
 8003b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b12:	89a3      	ldrhlt	r3, [r4, #12]
 8003b14:	181b      	addge	r3, r3, r0
 8003b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b1a:	bfac      	ite	ge
 8003b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b1e:	81a3      	strhlt	r3, [r4, #12]
 8003b20:	bd10      	pop	{r4, pc}

08003b22 <__swrite>:
 8003b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b26:	461f      	mov	r7, r3
 8003b28:	898b      	ldrh	r3, [r1, #12]
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	05db      	lsls	r3, r3, #23
 8003b2e:	460c      	mov	r4, r1
 8003b30:	4616      	mov	r6, r2
 8003b32:	d505      	bpl.n	8003b40 <__swrite+0x1e>
 8003b34:	2302      	movs	r3, #2
 8003b36:	2200      	movs	r2, #0
 8003b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b3c:	f000 f868 	bl	8003c10 <_lseek_r>
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	4632      	mov	r2, r6
 8003b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b4e:	463b      	mov	r3, r7
 8003b50:	4628      	mov	r0, r5
 8003b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b56:	f000 b817 	b.w	8003b88 <_write_r>

08003b5a <__sseek>:
 8003b5a:	b510      	push	{r4, lr}
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b62:	f000 f855 	bl	8003c10 <_lseek_r>
 8003b66:	1c43      	adds	r3, r0, #1
 8003b68:	89a3      	ldrh	r3, [r4, #12]
 8003b6a:	bf15      	itete	ne
 8003b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b76:	81a3      	strheq	r3, [r4, #12]
 8003b78:	bf18      	it	ne
 8003b7a:	81a3      	strhne	r3, [r4, #12]
 8003b7c:	bd10      	pop	{r4, pc}

08003b7e <__sclose>:
 8003b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b82:	f000 b813 	b.w	8003bac <_close_r>
	...

08003b88 <_write_r>:
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	2200      	movs	r2, #0
 8003b92:	4c05      	ldr	r4, [pc, #20]	; (8003ba8 <_write_r+0x20>)
 8003b94:	6022      	str	r2, [r4, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	f7fe ff52 	bl	8002a40 <_write>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d102      	bne.n	8003ba6 <_write_r+0x1e>
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	b103      	cbz	r3, 8003ba6 <_write_r+0x1e>
 8003ba4:	602b      	str	r3, [r5, #0]
 8003ba6:	bd38      	pop	{r3, r4, r5, pc}
 8003ba8:	20000128 	.word	0x20000128

08003bac <_close_r>:
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	2300      	movs	r3, #0
 8003bb0:	4c05      	ldr	r4, [pc, #20]	; (8003bc8 <_close_r+0x1c>)
 8003bb2:	4605      	mov	r5, r0
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	f7fe ff84 	bl	8002ac4 <_close>
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	d102      	bne.n	8003bc6 <_close_r+0x1a>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	b103      	cbz	r3, 8003bc6 <_close_r+0x1a>
 8003bc4:	602b      	str	r3, [r5, #0]
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
 8003bc8:	20000128 	.word	0x20000128

08003bcc <_fstat_r>:
 8003bcc:	b538      	push	{r3, r4, r5, lr}
 8003bce:	2300      	movs	r3, #0
 8003bd0:	4c06      	ldr	r4, [pc, #24]	; (8003bec <_fstat_r+0x20>)
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	f7fe ff7e 	bl	8002ada <_fstat>
 8003bde:	1c43      	adds	r3, r0, #1
 8003be0:	d102      	bne.n	8003be8 <_fstat_r+0x1c>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	b103      	cbz	r3, 8003be8 <_fstat_r+0x1c>
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	bd38      	pop	{r3, r4, r5, pc}
 8003bea:	bf00      	nop
 8003bec:	20000128 	.word	0x20000128

08003bf0 <_isatty_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	4c05      	ldr	r4, [pc, #20]	; (8003c0c <_isatty_r+0x1c>)
 8003bf6:	4605      	mov	r5, r0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	6023      	str	r3, [r4, #0]
 8003bfc:	f7fe ff7c 	bl	8002af8 <_isatty>
 8003c00:	1c43      	adds	r3, r0, #1
 8003c02:	d102      	bne.n	8003c0a <_isatty_r+0x1a>
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	b103      	cbz	r3, 8003c0a <_isatty_r+0x1a>
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	20000128 	.word	0x20000128

08003c10 <_lseek_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4605      	mov	r5, r0
 8003c14:	4608      	mov	r0, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4c05      	ldr	r4, [pc, #20]	; (8003c30 <_lseek_r+0x20>)
 8003c1c:	6022      	str	r2, [r4, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f7fe ff74 	bl	8002b0c <_lseek>
 8003c24:	1c43      	adds	r3, r0, #1
 8003c26:	d102      	bne.n	8003c2e <_lseek_r+0x1e>
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	b103      	cbz	r3, 8003c2e <_lseek_r+0x1e>
 8003c2c:	602b      	str	r3, [r5, #0]
 8003c2e:	bd38      	pop	{r3, r4, r5, pc}
 8003c30:	20000128 	.word	0x20000128

08003c34 <memchr>:
 8003c34:	b510      	push	{r4, lr}
 8003c36:	b2c9      	uxtb	r1, r1
 8003c38:	4402      	add	r2, r0
 8003c3a:	4290      	cmp	r0, r2
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	d101      	bne.n	8003c44 <memchr+0x10>
 8003c40:	2000      	movs	r0, #0
 8003c42:	bd10      	pop	{r4, pc}
 8003c44:	781c      	ldrb	r4, [r3, #0]
 8003c46:	3001      	adds	r0, #1
 8003c48:	428c      	cmp	r4, r1
 8003c4a:	d1f6      	bne.n	8003c3a <memchr+0x6>
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd10      	pop	{r4, pc}

08003c50 <__malloc_lock>:
 8003c50:	4770      	bx	lr

08003c52 <__malloc_unlock>:
 8003c52:	4770      	bx	lr

08003c54 <_read_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4605      	mov	r5, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	4c05      	ldr	r4, [pc, #20]	; (8003c74 <_read_r+0x20>)
 8003c60:	6022      	str	r2, [r4, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f7fe fece 	bl	8002a04 <_read>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_read_r+0x1e>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_read_r+0x1e>
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	20000128 	.word	0x20000128

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	bf00      	nop
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
