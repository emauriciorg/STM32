
pwm_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080040d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000cc  20000070  08004144  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000013c  08004144  0002013c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b5f0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c6b  00000000  00000000  0002b689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ca0  00000000  00000000  0002d2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000bf8  00000000  00000000  0002df98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000181eb  00000000  00000000  0002eb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c67e  00000000  00000000  00046d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0008b97c  00000000  00000000  000533f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000ded75  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d14  00000000  00000000  000dedc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003efc 	.word	0x08003efc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003efc 	.word	0x08003efc

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fc8c 	bl	8002a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000008c 	.word	0x2000008c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000008c 	.word	0x2000008c

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800042a:	b480      	push	{r7}
 800042c:	b085      	sub	sp, #20
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000432:	2300      	movs	r3, #0
 8000434:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800043c:	2b02      	cmp	r3, #2
 800043e:	d008      	beq.n	8000452 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2204      	movs	r2, #4
 8000444:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800044e:	2301      	movs	r3, #1
 8000450:	e020      	b.n	8000494 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f022 020e 	bic.w	r2, r2, #14
 8000460:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f022 0201 	bic.w	r2, r2, #1
 8000470:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2201      	movs	r2, #1
 8000486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2200      	movs	r2, #0
 800048e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000492:	7bfb      	ldrb	r3, [r7, #15]
}
 8000494:	4618      	mov	r0, r3
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
	...

080004a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004a8:	2300      	movs	r3, #0
 80004aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d005      	beq.n	80004c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2204      	movs	r2, #4
 80004ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004bc:	2301      	movs	r3, #1
 80004be:	73fb      	strb	r3, [r7, #15]
 80004c0:	e051      	b.n	8000566 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f022 020e 	bic.w	r2, r2, #14
 80004d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f022 0201 	bic.w	r2, r2, #1
 80004e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a22      	ldr	r2, [pc, #136]	; (8000570 <HAL_DMA_Abort_IT+0xd0>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d029      	beq.n	8000540 <HAL_DMA_Abort_IT+0xa0>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a20      	ldr	r2, [pc, #128]	; (8000574 <HAL_DMA_Abort_IT+0xd4>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d022      	beq.n	800053c <HAL_DMA_Abort_IT+0x9c>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a1f      	ldr	r2, [pc, #124]	; (8000578 <HAL_DMA_Abort_IT+0xd8>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d01a      	beq.n	8000536 <HAL_DMA_Abort_IT+0x96>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a1d      	ldr	r2, [pc, #116]	; (800057c <HAL_DMA_Abort_IT+0xdc>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d012      	beq.n	8000530 <HAL_DMA_Abort_IT+0x90>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <HAL_DMA_Abort_IT+0xe0>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d00a      	beq.n	800052a <HAL_DMA_Abort_IT+0x8a>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <HAL_DMA_Abort_IT+0xe4>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d102      	bne.n	8000524 <HAL_DMA_Abort_IT+0x84>
 800051e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000522:	e00e      	b.n	8000542 <HAL_DMA_Abort_IT+0xa2>
 8000524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000528:	e00b      	b.n	8000542 <HAL_DMA_Abort_IT+0xa2>
 800052a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052e:	e008      	b.n	8000542 <HAL_DMA_Abort_IT+0xa2>
 8000530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000534:	e005      	b.n	8000542 <HAL_DMA_Abort_IT+0xa2>
 8000536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053a:	e002      	b.n	8000542 <HAL_DMA_Abort_IT+0xa2>
 800053c:	2310      	movs	r3, #16
 800053e:	e000      	b.n	8000542 <HAL_DMA_Abort_IT+0xa2>
 8000540:	2301      	movs	r3, #1
 8000542:	4a11      	ldr	r2, [pc, #68]	; (8000588 <HAL_DMA_Abort_IT+0xe8>)
 8000544:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2201      	movs	r2, #1
 800054a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2200      	movs	r2, #0
 8000552:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055a:	2b00      	cmp	r3, #0
 800055c:	d003      	beq.n	8000566 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	4798      	blx	r3
    } 
  }
  return status;
 8000566:	7bfb      	ldrb	r3, [r7, #15]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40020008 	.word	0x40020008
 8000574:	4002001c 	.word	0x4002001c
 8000578:	40020030 	.word	0x40020030
 800057c:	40020044 	.word	0x40020044
 8000580:	40020058 	.word	0x40020058
 8000584:	4002006c 	.word	0x4002006c
 8000588:	40020000 	.word	0x40020000

0800058c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800058c:	b480      	push	{r7}
 800058e:	b08b      	sub	sp, #44	; 0x2c
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000596:	2300      	movs	r3, #0
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800059a:	2300      	movs	r3, #0
 800059c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800059e:	e169      	b.n	8000874 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80005a0:	2201      	movs	r2, #1
 80005a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	69fa      	ldr	r2, [r7, #28]
 80005b0:	4013      	ands	r3, r2
 80005b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80005b4:	69ba      	ldr	r2, [r7, #24]
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	f040 8158 	bne.w	800086e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	4a9a      	ldr	r2, [pc, #616]	; (800082c <HAL_GPIO_Init+0x2a0>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d05e      	beq.n	8000686 <HAL_GPIO_Init+0xfa>
 80005c8:	4a98      	ldr	r2, [pc, #608]	; (800082c <HAL_GPIO_Init+0x2a0>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d875      	bhi.n	80006ba <HAL_GPIO_Init+0x12e>
 80005ce:	4a98      	ldr	r2, [pc, #608]	; (8000830 <HAL_GPIO_Init+0x2a4>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d058      	beq.n	8000686 <HAL_GPIO_Init+0xfa>
 80005d4:	4a96      	ldr	r2, [pc, #600]	; (8000830 <HAL_GPIO_Init+0x2a4>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d86f      	bhi.n	80006ba <HAL_GPIO_Init+0x12e>
 80005da:	4a96      	ldr	r2, [pc, #600]	; (8000834 <HAL_GPIO_Init+0x2a8>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d052      	beq.n	8000686 <HAL_GPIO_Init+0xfa>
 80005e0:	4a94      	ldr	r2, [pc, #592]	; (8000834 <HAL_GPIO_Init+0x2a8>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d869      	bhi.n	80006ba <HAL_GPIO_Init+0x12e>
 80005e6:	4a94      	ldr	r2, [pc, #592]	; (8000838 <HAL_GPIO_Init+0x2ac>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d04c      	beq.n	8000686 <HAL_GPIO_Init+0xfa>
 80005ec:	4a92      	ldr	r2, [pc, #584]	; (8000838 <HAL_GPIO_Init+0x2ac>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d863      	bhi.n	80006ba <HAL_GPIO_Init+0x12e>
 80005f2:	4a92      	ldr	r2, [pc, #584]	; (800083c <HAL_GPIO_Init+0x2b0>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d046      	beq.n	8000686 <HAL_GPIO_Init+0xfa>
 80005f8:	4a90      	ldr	r2, [pc, #576]	; (800083c <HAL_GPIO_Init+0x2b0>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d85d      	bhi.n	80006ba <HAL_GPIO_Init+0x12e>
 80005fe:	2b12      	cmp	r3, #18
 8000600:	d82a      	bhi.n	8000658 <HAL_GPIO_Init+0xcc>
 8000602:	2b12      	cmp	r3, #18
 8000604:	d859      	bhi.n	80006ba <HAL_GPIO_Init+0x12e>
 8000606:	a201      	add	r2, pc, #4	; (adr r2, 800060c <HAL_GPIO_Init+0x80>)
 8000608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060c:	08000687 	.word	0x08000687
 8000610:	08000661 	.word	0x08000661
 8000614:	08000673 	.word	0x08000673
 8000618:	080006b5 	.word	0x080006b5
 800061c:	080006bb 	.word	0x080006bb
 8000620:	080006bb 	.word	0x080006bb
 8000624:	080006bb 	.word	0x080006bb
 8000628:	080006bb 	.word	0x080006bb
 800062c:	080006bb 	.word	0x080006bb
 8000630:	080006bb 	.word	0x080006bb
 8000634:	080006bb 	.word	0x080006bb
 8000638:	080006bb 	.word	0x080006bb
 800063c:	080006bb 	.word	0x080006bb
 8000640:	080006bb 	.word	0x080006bb
 8000644:	080006bb 	.word	0x080006bb
 8000648:	080006bb 	.word	0x080006bb
 800064c:	080006bb 	.word	0x080006bb
 8000650:	08000669 	.word	0x08000669
 8000654:	0800067d 	.word	0x0800067d
 8000658:	4a79      	ldr	r2, [pc, #484]	; (8000840 <HAL_GPIO_Init+0x2b4>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d013      	beq.n	8000686 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800065e:	e02c      	b.n	80006ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	623b      	str	r3, [r7, #32]
          break;
 8000666:	e029      	b.n	80006bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	3304      	adds	r3, #4
 800066e:	623b      	str	r3, [r7, #32]
          break;
 8000670:	e024      	b.n	80006bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	3308      	adds	r3, #8
 8000678:	623b      	str	r3, [r7, #32]
          break;
 800067a:	e01f      	b.n	80006bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	330c      	adds	r3, #12
 8000682:	623b      	str	r3, [r7, #32]
          break;
 8000684:	e01a      	b.n	80006bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d102      	bne.n	8000694 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800068e:	2304      	movs	r3, #4
 8000690:	623b      	str	r3, [r7, #32]
          break;
 8000692:	e013      	b.n	80006bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d105      	bne.n	80006a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800069c:	2308      	movs	r3, #8
 800069e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	69fa      	ldr	r2, [r7, #28]
 80006a4:	611a      	str	r2, [r3, #16]
          break;
 80006a6:	e009      	b.n	80006bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006a8:	2308      	movs	r3, #8
 80006aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	69fa      	ldr	r2, [r7, #28]
 80006b0:	615a      	str	r2, [r3, #20]
          break;
 80006b2:	e003      	b.n	80006bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
          break;
 80006b8:	e000      	b.n	80006bc <HAL_GPIO_Init+0x130>
          break;
 80006ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d801      	bhi.n	80006c6 <HAL_GPIO_Init+0x13a>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	e001      	b.n	80006ca <HAL_GPIO_Init+0x13e>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3304      	adds	r3, #4
 80006ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	2bff      	cmp	r3, #255	; 0xff
 80006d0:	d802      	bhi.n	80006d8 <HAL_GPIO_Init+0x14c>
 80006d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	e002      	b.n	80006de <HAL_GPIO_Init+0x152>
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	3b08      	subs	r3, #8
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	210f      	movs	r1, #15
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	401a      	ands	r2, r3
 80006f0:	6a39      	ldr	r1, [r7, #32]
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	fa01 f303 	lsl.w	r3, r1, r3
 80006f8:	431a      	orrs	r2, r3
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	2b00      	cmp	r3, #0
 8000708:	f000 80b1 	beq.w	800086e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800070c:	4b4d      	ldr	r3, [pc, #308]	; (8000844 <HAL_GPIO_Init+0x2b8>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a4c      	ldr	r2, [pc, #304]	; (8000844 <HAL_GPIO_Init+0x2b8>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b4a      	ldr	r3, [pc, #296]	; (8000844 <HAL_GPIO_Init+0x2b8>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000724:	4a48      	ldr	r2, [pc, #288]	; (8000848 <HAL_GPIO_Init+0x2bc>)
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	089b      	lsrs	r3, r3, #2
 800072a:	3302      	adds	r3, #2
 800072c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000730:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	f003 0303 	and.w	r3, r3, #3
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	220f      	movs	r2, #15
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	4013      	ands	r3, r2
 8000746:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a40      	ldr	r2, [pc, #256]	; (800084c <HAL_GPIO_Init+0x2c0>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d013      	beq.n	8000778 <HAL_GPIO_Init+0x1ec>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <HAL_GPIO_Init+0x2c4>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d00d      	beq.n	8000774 <HAL_GPIO_Init+0x1e8>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a3e      	ldr	r2, [pc, #248]	; (8000854 <HAL_GPIO_Init+0x2c8>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d007      	beq.n	8000770 <HAL_GPIO_Init+0x1e4>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a3d      	ldr	r2, [pc, #244]	; (8000858 <HAL_GPIO_Init+0x2cc>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d101      	bne.n	800076c <HAL_GPIO_Init+0x1e0>
 8000768:	2303      	movs	r3, #3
 800076a:	e006      	b.n	800077a <HAL_GPIO_Init+0x1ee>
 800076c:	2304      	movs	r3, #4
 800076e:	e004      	b.n	800077a <HAL_GPIO_Init+0x1ee>
 8000770:	2302      	movs	r3, #2
 8000772:	e002      	b.n	800077a <HAL_GPIO_Init+0x1ee>
 8000774:	2301      	movs	r3, #1
 8000776:	e000      	b.n	800077a <HAL_GPIO_Init+0x1ee>
 8000778:	2300      	movs	r3, #0
 800077a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800077c:	f002 0203 	and.w	r2, r2, #3
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	4093      	lsls	r3, r2
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	4313      	orrs	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800078a:	492f      	ldr	r1, [pc, #188]	; (8000848 <HAL_GPIO_Init+0x2bc>)
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	089b      	lsrs	r3, r3, #2
 8000790:	3302      	adds	r3, #2
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d006      	beq.n	80007b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80007a4:	4b2d      	ldr	r3, [pc, #180]	; (800085c <HAL_GPIO_Init+0x2d0>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	492c      	ldr	r1, [pc, #176]	; (800085c <HAL_GPIO_Init+0x2d0>)
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	600b      	str	r3, [r1, #0]
 80007b0:	e006      	b.n	80007c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <HAL_GPIO_Init+0x2d0>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	43db      	mvns	r3, r3
 80007ba:	4928      	ldr	r1, [pc, #160]	; (800085c <HAL_GPIO_Init+0x2d0>)
 80007bc:	4013      	ands	r3, r2
 80007be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d006      	beq.n	80007da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <HAL_GPIO_Init+0x2d0>)
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	4922      	ldr	r1, [pc, #136]	; (800085c <HAL_GPIO_Init+0x2d0>)
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	604b      	str	r3, [r1, #4]
 80007d8:	e006      	b.n	80007e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <HAL_GPIO_Init+0x2d0>)
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	43db      	mvns	r3, r3
 80007e2:	491e      	ldr	r1, [pc, #120]	; (800085c <HAL_GPIO_Init+0x2d0>)
 80007e4:	4013      	ands	r3, r2
 80007e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d006      	beq.n	8000802 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <HAL_GPIO_Init+0x2d0>)
 80007f6:	689a      	ldr	r2, [r3, #8]
 80007f8:	4918      	ldr	r1, [pc, #96]	; (800085c <HAL_GPIO_Init+0x2d0>)
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	608b      	str	r3, [r1, #8]
 8000800:	e006      	b.n	8000810 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <HAL_GPIO_Init+0x2d0>)
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	43db      	mvns	r3, r3
 800080a:	4914      	ldr	r1, [pc, #80]	; (800085c <HAL_GPIO_Init+0x2d0>)
 800080c:	4013      	ands	r3, r2
 800080e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000818:	2b00      	cmp	r3, #0
 800081a:	d021      	beq.n	8000860 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_GPIO_Init+0x2d0>)
 800081e:	68da      	ldr	r2, [r3, #12]
 8000820:	490e      	ldr	r1, [pc, #56]	; (800085c <HAL_GPIO_Init+0x2d0>)
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	4313      	orrs	r3, r2
 8000826:	60cb      	str	r3, [r1, #12]
 8000828:	e021      	b.n	800086e <HAL_GPIO_Init+0x2e2>
 800082a:	bf00      	nop
 800082c:	10320000 	.word	0x10320000
 8000830:	10310000 	.word	0x10310000
 8000834:	10220000 	.word	0x10220000
 8000838:	10210000 	.word	0x10210000
 800083c:	10120000 	.word	0x10120000
 8000840:	10110000 	.word	0x10110000
 8000844:	40021000 	.word	0x40021000
 8000848:	40010000 	.word	0x40010000
 800084c:	40010800 	.word	0x40010800
 8000850:	40010c00 	.word	0x40010c00
 8000854:	40011000 	.word	0x40011000
 8000858:	40011400 	.word	0x40011400
 800085c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_GPIO_Init+0x304>)
 8000862:	68da      	ldr	r2, [r3, #12]
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	43db      	mvns	r3, r3
 8000868:	4909      	ldr	r1, [pc, #36]	; (8000890 <HAL_GPIO_Init+0x304>)
 800086a:	4013      	ands	r3, r2
 800086c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	3301      	adds	r3, #1
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	fa22 f303 	lsr.w	r3, r2, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	f47f ae8e 	bne.w	80005a0 <HAL_GPIO_Init+0x14>
  }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	372c      	adds	r7, #44	; 0x2c
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40010400 	.word	0x40010400

08000894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
 80008a0:	4613      	mov	r3, r2
 80008a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80008a4:	787b      	ldrb	r3, [r7, #1]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008aa:	887a      	ldrh	r2, [r7, #2]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80008b0:	e003      	b.n	80008ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	041a      	lsls	r2, r3, #16
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	611a      	str	r2, [r3, #16]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008d0:	695a      	ldr	r2, [r3, #20]
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	4013      	ands	r3, r2
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d006      	beq.n	80008e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f806 	bl	80008f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40010400 	.word	0x40010400

080008f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr

08000908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e272      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	2b00      	cmp	r3, #0
 8000924:	f000 8087 	beq.w	8000a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000928:	4b92      	ldr	r3, [pc, #584]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f003 030c 	and.w	r3, r3, #12
 8000930:	2b04      	cmp	r3, #4
 8000932:	d00c      	beq.n	800094e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000934:	4b8f      	ldr	r3, [pc, #572]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 030c 	and.w	r3, r3, #12
 800093c:	2b08      	cmp	r3, #8
 800093e:	d112      	bne.n	8000966 <HAL_RCC_OscConfig+0x5e>
 8000940:	4b8c      	ldr	r3, [pc, #560]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800094c:	d10b      	bne.n	8000966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800094e:	4b89      	ldr	r3, [pc, #548]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d06c      	beq.n	8000a34 <HAL_RCC_OscConfig+0x12c>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d168      	bne.n	8000a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e24c      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800096e:	d106      	bne.n	800097e <HAL_RCC_OscConfig+0x76>
 8000970:	4b80      	ldr	r3, [pc, #512]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a7f      	ldr	r2, [pc, #508]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	e02e      	b.n	80009dc <HAL_RCC_OscConfig+0xd4>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10c      	bne.n	80009a0 <HAL_RCC_OscConfig+0x98>
 8000986:	4b7b      	ldr	r3, [pc, #492]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a7a      	ldr	r2, [pc, #488]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 800098c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	4b78      	ldr	r3, [pc, #480]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a77      	ldr	r2, [pc, #476]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099c:	6013      	str	r3, [r2, #0]
 800099e:	e01d      	b.n	80009dc <HAL_RCC_OscConfig+0xd4>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009a8:	d10c      	bne.n	80009c4 <HAL_RCC_OscConfig+0xbc>
 80009aa:	4b72      	ldr	r3, [pc, #456]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a71      	ldr	r2, [pc, #452]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 80009b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b4:	6013      	str	r3, [r2, #0]
 80009b6:	4b6f      	ldr	r3, [pc, #444]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a6e      	ldr	r2, [pc, #440]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 80009bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	e00b      	b.n	80009dc <HAL_RCC_OscConfig+0xd4>
 80009c4:	4b6b      	ldr	r3, [pc, #428]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a6a      	ldr	r2, [pc, #424]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 80009ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b68      	ldr	r3, [pc, #416]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a67      	ldr	r2, [pc, #412]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 80009d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d013      	beq.n	8000a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009e4:	f7ff fc0a 	bl	80001fc <HAL_GetTick>
 80009e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ea:	e008      	b.n	80009fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009ec:	f7ff fc06 	bl	80001fc <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b64      	cmp	r3, #100	; 0x64
 80009f8:	d901      	bls.n	80009fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80009fa:	2303      	movs	r3, #3
 80009fc:	e200      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009fe:	4b5d      	ldr	r3, [pc, #372]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f0      	beq.n	80009ec <HAL_RCC_OscConfig+0xe4>
 8000a0a:	e014      	b.n	8000a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a0c:	f7ff fbf6 	bl	80001fc <HAL_GetTick>
 8000a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a12:	e008      	b.n	8000a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a14:	f7ff fbf2 	bl	80001fc <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b64      	cmp	r3, #100	; 0x64
 8000a20:	d901      	bls.n	8000a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000a22:	2303      	movs	r3, #3
 8000a24:	e1ec      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a26:	4b53      	ldr	r3, [pc, #332]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f0      	bne.n	8000a14 <HAL_RCC_OscConfig+0x10c>
 8000a32:	e000      	b.n	8000a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d063      	beq.n	8000b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 030c 	and.w	r3, r3, #12
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00b      	beq.n	8000a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a4e:	4b49      	ldr	r3, [pc, #292]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 030c 	and.w	r3, r3, #12
 8000a56:	2b08      	cmp	r3, #8
 8000a58:	d11c      	bne.n	8000a94 <HAL_RCC_OscConfig+0x18c>
 8000a5a:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d116      	bne.n	8000a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d005      	beq.n	8000a7e <HAL_RCC_OscConfig+0x176>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d001      	beq.n	8000a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e1c0      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a7e:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	4939      	ldr	r1, [pc, #228]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a92:	e03a      	b.n	8000b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d020      	beq.n	8000ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <HAL_RCC_OscConfig+0x270>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa2:	f7ff fbab 	bl	80001fc <HAL_GetTick>
 8000aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aa8:	e008      	b.n	8000abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000aaa:	f7ff fba7 	bl	80001fc <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d901      	bls.n	8000abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e1a1      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f0      	beq.n	8000aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	4927      	ldr	r1, [pc, #156]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	600b      	str	r3, [r1, #0]
 8000adc:	e015      	b.n	8000b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ade:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <HAL_RCC_OscConfig+0x270>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fb8a 	bl	80001fc <HAL_GetTick>
 8000ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aea:	e008      	b.n	8000afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000aec:	f7ff fb86 	bl	80001fc <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d901      	bls.n	8000afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e180      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1f0      	bne.n	8000aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d03a      	beq.n	8000b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d019      	beq.n	8000b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_RCC_OscConfig+0x274>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b24:	f7ff fb6a 	bl	80001fc <HAL_GetTick>
 8000b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b2a:	e008      	b.n	8000b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b2c:	f7ff fb66 	bl	80001fc <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d901      	bls.n	8000b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e160      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_RCC_OscConfig+0x26c>)
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0f0      	beq.n	8000b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 fad8 	bl	8001100 <RCC_Delay>
 8000b50:	e01c      	b.n	8000b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_RCC_OscConfig+0x274>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b58:	f7ff fb50 	bl	80001fc <HAL_GetTick>
 8000b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b5e:	e00f      	b.n	8000b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b60:	f7ff fb4c 	bl	80001fc <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d908      	bls.n	8000b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e146      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	42420000 	.word	0x42420000
 8000b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b80:	4b92      	ldr	r3, [pc, #584]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1e9      	bne.n	8000b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f000 80a6 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b9e:	4b8b      	ldr	r3, [pc, #556]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10d      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b88      	ldr	r3, [pc, #544]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a87      	ldr	r2, [pc, #540]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b85      	ldr	r3, [pc, #532]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc6:	4b82      	ldr	r3, [pc, #520]	; (8000dd0 <HAL_RCC_OscConfig+0x4c8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d118      	bne.n	8000c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bd2:	4b7f      	ldr	r3, [pc, #508]	; (8000dd0 <HAL_RCC_OscConfig+0x4c8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a7e      	ldr	r2, [pc, #504]	; (8000dd0 <HAL_RCC_OscConfig+0x4c8>)
 8000bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bde:	f7ff fb0d 	bl	80001fc <HAL_GetTick>
 8000be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be4:	e008      	b.n	8000bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000be6:	f7ff fb09 	bl	80001fc <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	2b64      	cmp	r3, #100	; 0x64
 8000bf2:	d901      	bls.n	8000bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e103      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bf8:	4b75      	ldr	r3, [pc, #468]	; (8000dd0 <HAL_RCC_OscConfig+0x4c8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f0      	beq.n	8000be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d106      	bne.n	8000c1a <HAL_RCC_OscConfig+0x312>
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	4a6e      	ldr	r2, [pc, #440]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6213      	str	r3, [r2, #32]
 8000c18:	e02d      	b.n	8000c76 <HAL_RCC_OscConfig+0x36e>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10c      	bne.n	8000c3c <HAL_RCC_OscConfig+0x334>
 8000c22:	4b6a      	ldr	r3, [pc, #424]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	4a69      	ldr	r2, [pc, #420]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c28:	f023 0301 	bic.w	r3, r3, #1
 8000c2c:	6213      	str	r3, [r2, #32]
 8000c2e:	4b67      	ldr	r3, [pc, #412]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	4a66      	ldr	r2, [pc, #408]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c34:	f023 0304 	bic.w	r3, r3, #4
 8000c38:	6213      	str	r3, [r2, #32]
 8000c3a:	e01c      	b.n	8000c76 <HAL_RCC_OscConfig+0x36e>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d10c      	bne.n	8000c5e <HAL_RCC_OscConfig+0x356>
 8000c44:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	4a60      	ldr	r2, [pc, #384]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6213      	str	r3, [r2, #32]
 8000c50:	4b5e      	ldr	r3, [pc, #376]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	4a5d      	ldr	r2, [pc, #372]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6213      	str	r3, [r2, #32]
 8000c5c:	e00b      	b.n	8000c76 <HAL_RCC_OscConfig+0x36e>
 8000c5e:	4b5b      	ldr	r3, [pc, #364]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c60:	6a1b      	ldr	r3, [r3, #32]
 8000c62:	4a5a      	ldr	r2, [pc, #360]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	6213      	str	r3, [r2, #32]
 8000c6a:	4b58      	ldr	r3, [pc, #352]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c6c:	6a1b      	ldr	r3, [r3, #32]
 8000c6e:	4a57      	ldr	r2, [pc, #348]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c70:	f023 0304 	bic.w	r3, r3, #4
 8000c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d015      	beq.n	8000caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c7e:	f7ff fabd 	bl	80001fc <HAL_GetTick>
 8000c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c84:	e00a      	b.n	8000c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c86:	f7ff fab9 	bl	80001fc <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d901      	bls.n	8000c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e0b1      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c9c:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0ee      	beq.n	8000c86 <HAL_RCC_OscConfig+0x37e>
 8000ca8:	e014      	b.n	8000cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000caa:	f7ff faa7 	bl	80001fc <HAL_GetTick>
 8000cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cb0:	e00a      	b.n	8000cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cb2:	f7ff faa3 	bl	80001fc <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d901      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e09b      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cc8:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1ee      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d105      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a3b      	ldr	r2, [pc, #236]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 8087 	beq.w	8000dfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cf0:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d061      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d146      	bne.n	8000d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d04:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <HAL_RCC_OscConfig+0x4cc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0a:	f7ff fa77 	bl	80001fc <HAL_GetTick>
 8000d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d10:	e008      	b.n	8000d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d12:	f7ff fa73 	bl	80001fc <HAL_GetTick>
 8000d16:	4602      	mov	r2, r0
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e06d      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d24:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f0      	bne.n	8000d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d38:	d108      	bne.n	8000d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	4921      	ldr	r1, [pc, #132]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a19      	ldr	r1, [r3, #32]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	491b      	ldr	r1, [pc, #108]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_RCC_OscConfig+0x4cc>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6a:	f7ff fa47 	bl	80001fc <HAL_GetTick>
 8000d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d70:	e008      	b.n	8000d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d72:	f7ff fa43 	bl	80001fc <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d901      	bls.n	8000d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e03d      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0f0      	beq.n	8000d72 <HAL_RCC_OscConfig+0x46a>
 8000d90:	e035      	b.n	8000dfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_RCC_OscConfig+0x4cc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fa30 	bl	80001fc <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000da0:	f7ff fa2c 	bl	80001fc <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e026      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_RCC_OscConfig+0x4c4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0x498>
 8000dbe:	e01e      	b.n	8000dfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d107      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e019      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40007000 	.word	0x40007000
 8000dd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_RCC_OscConfig+0x500>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d106      	bne.n	8000dfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d001      	beq.n	8000dfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e0d0      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e20:	4b6a      	ldr	r3, [pc, #424]	; (8000fcc <HAL_RCC_ClockConfig+0x1c0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d910      	bls.n	8000e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e2e:	4b67      	ldr	r3, [pc, #412]	; (8000fcc <HAL_RCC_ClockConfig+0x1c0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f023 0207 	bic.w	r2, r3, #7
 8000e36:	4965      	ldr	r1, [pc, #404]	; (8000fcc <HAL_RCC_ClockConfig+0x1c0>)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e3e:	4b63      	ldr	r3, [pc, #396]	; (8000fcc <HAL_RCC_ClockConfig+0x1c0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d001      	beq.n	8000e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e0b8      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d020      	beq.n	8000e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e68:	4b59      	ldr	r3, [pc, #356]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4a58      	ldr	r2, [pc, #352]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e80:	4b53      	ldr	r3, [pc, #332]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	4a52      	ldr	r2, [pc, #328]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e8c:	4b50      	ldr	r3, [pc, #320]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	494d      	ldr	r1, [pc, #308]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d040      	beq.n	8000f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d107      	bne.n	8000ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb2:	4b47      	ldr	r3, [pc, #284]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d115      	bne.n	8000eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e07f      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d107      	bne.n	8000eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eca:	4b41      	ldr	r3, [pc, #260]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d109      	bne.n	8000eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e073      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eda:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e06b      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eea:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f023 0203 	bic.w	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4936      	ldr	r1, [pc, #216]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000efc:	f7ff f97e 	bl	80001fc <HAL_GetTick>
 8000f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f02:	e00a      	b.n	8000f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f04:	f7ff f97a 	bl	80001fc <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e053      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 020c 	and.w	r2, r3, #12
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d1eb      	bne.n	8000f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <HAL_RCC_ClockConfig+0x1c0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d210      	bcs.n	8000f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <HAL_RCC_ClockConfig+0x1c0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f023 0207 	bic.w	r2, r3, #7
 8000f42:	4922      	ldr	r1, [pc, #136]	; (8000fcc <HAL_RCC_ClockConfig+0x1c0>)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HAL_RCC_ClockConfig+0x1c0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d001      	beq.n	8000f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e032      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d008      	beq.n	8000f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	4916      	ldr	r1, [pc, #88]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f76:	4313      	orrs	r3, r2
 8000f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d009      	beq.n	8000f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	490e      	ldr	r1, [pc, #56]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f9a:	f000 f821 	bl	8000fe0 <HAL_RCC_GetSysClockFreq>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	490a      	ldr	r1, [pc, #40]	; (8000fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8000fac:	5ccb      	ldrb	r3, [r1, r3]
 8000fae:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb2:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8000fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_RCC_ClockConfig+0x1d0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f8dc 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40022000 	.word	0x40022000
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	0800401c 	.word	0x0800401c
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000000 	.word	0x20000000

08000fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fe0:	b490      	push	{r4, r7}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fe6:	4b29      	ldr	r3, [pc, #164]	; (800108c <HAL_RCC_GetSysClockFreq+0xac>)
 8000fe8:	1d3c      	adds	r4, r7, #4
 8000fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ff0:	f240 2301 	movw	r3, #513	; 0x201
 8000ff4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_RCC_GetSysClockFreq+0xb0>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b04      	cmp	r3, #4
 8001018:	d002      	beq.n	8001020 <HAL_RCC_GetSysClockFreq+0x40>
 800101a:	2b08      	cmp	r3, #8
 800101c:	d003      	beq.n	8001026 <HAL_RCC_GetSysClockFreq+0x46>
 800101e:	e02b      	b.n	8001078 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001022:	623b      	str	r3, [r7, #32]
      break;
 8001024:	e02b      	b.n	800107e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	0c9b      	lsrs	r3, r3, #18
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3328      	adds	r3, #40	; 0x28
 8001030:	443b      	add	r3, r7
 8001032:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001036:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d012      	beq.n	8001068 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	0c5b      	lsrs	r3, r3, #17
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	3328      	adds	r3, #40	; 0x28
 800104e:	443b      	add	r3, r7
 8001050:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001054:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800105a:	fb03 f202 	mul.w	r2, r3, r2
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	fbb2 f3f3 	udiv	r3, r2, r3
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
 8001066:	e004      	b.n	8001072 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800106c:	fb02 f303 	mul.w	r3, r2, r3
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	623b      	str	r3, [r7, #32]
      break;
 8001076:	e002      	b.n	800107e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800107a:	623b      	str	r3, [r7, #32]
      break;
 800107c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800107e:	6a3b      	ldr	r3, [r7, #32]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bc90      	pop	{r4, r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	08003f14 	.word	0x08003f14
 8001090:	40021000 	.word	0x40021000
 8001094:	007a1200 	.word	0x007a1200
 8001098:	003d0900 	.word	0x003d0900

0800109c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <HAL_RCC_GetHCLKFreq+0x10>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	20000008 	.word	0x20000008

080010b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80010b4:	f7ff fff2 	bl	800109c <HAL_RCC_GetHCLKFreq>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	4903      	ldr	r1, [pc, #12]	; (80010d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010c6:	5ccb      	ldrb	r3, [r1, r3]
 80010c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	0800402c 	.word	0x0800402c

080010d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80010dc:	f7ff ffde 	bl	800109c <HAL_RCC_GetHCLKFreq>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	0adb      	lsrs	r3, r3, #11
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	4903      	ldr	r1, [pc, #12]	; (80010fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80010ee:	5ccb      	ldrb	r3, [r1, r3]
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40021000 	.word	0x40021000
 80010fc:	0800402c 	.word	0x0800402c

08001100 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <RCC_Delay+0x34>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <RCC_Delay+0x38>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0a5b      	lsrs	r3, r3, #9
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800111c:	bf00      	nop
  }
  while (Delay --);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1e5a      	subs	r2, r3, #1
 8001122:	60fa      	str	r2, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f9      	bne.n	800111c <RCC_Delay+0x1c>
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	20000008 	.word	0x20000008
 8001138:	10624dd3 	.word	0x10624dd3

0800113c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e041      	b.n	80011d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d106      	bne.n	8001168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f001 fcc0 	bl	8002ae8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2202      	movs	r2, #2
 800116c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3304      	adds	r3, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4610      	mov	r0, r2
 800117c:	f000 faba 	bl	80016f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d109      	bne.n	8001200 <HAL_TIM_PWM_Start+0x24>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	bf14      	ite	ne
 80011f8:	2301      	movne	r3, #1
 80011fa:	2300      	moveq	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	e022      	b.n	8001246 <HAL_TIM_PWM_Start+0x6a>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2b04      	cmp	r3, #4
 8001204:	d109      	bne.n	800121a <HAL_TIM_PWM_Start+0x3e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b01      	cmp	r3, #1
 8001210:	bf14      	ite	ne
 8001212:	2301      	movne	r3, #1
 8001214:	2300      	moveq	r3, #0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	e015      	b.n	8001246 <HAL_TIM_PWM_Start+0x6a>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b08      	cmp	r3, #8
 800121e:	d109      	bne.n	8001234 <HAL_TIM_PWM_Start+0x58>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b01      	cmp	r3, #1
 800122a:	bf14      	ite	ne
 800122c:	2301      	movne	r3, #1
 800122e:	2300      	moveq	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	e008      	b.n	8001246 <HAL_TIM_PWM_Start+0x6a>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b01      	cmp	r3, #1
 800123e:	bf14      	ite	ne
 8001240:	2301      	movne	r3, #1
 8001242:	2300      	moveq	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e05e      	b.n	800130c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d104      	bne.n	800125e <HAL_TIM_PWM_Start+0x82>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800125c:	e013      	b.n	8001286 <HAL_TIM_PWM_Start+0xaa>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d104      	bne.n	800126e <HAL_TIM_PWM_Start+0x92>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800126c:	e00b      	b.n	8001286 <HAL_TIM_PWM_Start+0xaa>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b08      	cmp	r3, #8
 8001272:	d104      	bne.n	800127e <HAL_TIM_PWM_Start+0xa2>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2202      	movs	r2, #2
 8001278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800127c:	e003      	b.n	8001286 <HAL_TIM_PWM_Start+0xaa>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2202      	movs	r2, #2
 8001282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	6839      	ldr	r1, [r7, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fc1a 	bl	8001ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <HAL_TIM_PWM_Start+0x138>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d107      	bne.n	80012ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a18      	ldr	r2, [pc, #96]	; (8001314 <HAL_TIM_PWM_Start+0x138>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d00e      	beq.n	80012d6 <HAL_TIM_PWM_Start+0xfa>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c0:	d009      	beq.n	80012d6 <HAL_TIM_PWM_Start+0xfa>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a14      	ldr	r2, [pc, #80]	; (8001318 <HAL_TIM_PWM_Start+0x13c>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d004      	beq.n	80012d6 <HAL_TIM_PWM_Start+0xfa>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <HAL_TIM_PWM_Start+0x140>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d111      	bne.n	80012fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b06      	cmp	r3, #6
 80012e6:	d010      	beq.n	800130a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80012f8:	e007      	b.n	800130a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40012c00 	.word	0x40012c00
 8001318:	40000400 	.word	0x40000400
 800131c:	40000800 	.word	0x40000800

08001320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b02      	cmp	r3, #2
 8001334:	d122      	bne.n	800137c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b02      	cmp	r3, #2
 8001342:	d11b      	bne.n	800137c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f06f 0202 	mvn.w	r2, #2
 800134c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f9ab 	bl	80016be <HAL_TIM_IC_CaptureCallback>
 8001368:	e005      	b.n	8001376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f99e 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f9ad 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b04      	cmp	r3, #4
 8001388:	d122      	bne.n	80013d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b04      	cmp	r3, #4
 8001396:	d11b      	bne.n	80013d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f06f 0204 	mvn.w	r2, #4
 80013a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2202      	movs	r2, #2
 80013a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f981 	bl	80016be <HAL_TIM_IC_CaptureCallback>
 80013bc:	e005      	b.n	80013ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f974 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f983 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d122      	bne.n	8001424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d11b      	bne.n	8001424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f06f 0208 	mvn.w	r2, #8
 80013f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2204      	movs	r2, #4
 80013fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f957 	bl	80016be <HAL_TIM_IC_CaptureCallback>
 8001410:	e005      	b.n	800141e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f94a 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f959 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	2b10      	cmp	r3, #16
 8001430:	d122      	bne.n	8001478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b10      	cmp	r3, #16
 800143e:	d11b      	bne.n	8001478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f06f 0210 	mvn.w	r2, #16
 8001448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2208      	movs	r2, #8
 800144e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f92d 	bl	80016be <HAL_TIM_IC_CaptureCallback>
 8001464:	e005      	b.n	8001472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f920 	bl	80016ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f92f 	bl	80016d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10e      	bne.n	80014a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b01      	cmp	r3, #1
 8001492:	d107      	bne.n	80014a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f06f 0201 	mvn.w	r2, #1
 800149c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f001 f8de 	bl	8002660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	2b80      	cmp	r3, #128	; 0x80
 80014b0:	d10e      	bne.n	80014d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014bc:	2b80      	cmp	r3, #128	; 0x80
 80014be:	d107      	bne.n	80014d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80014c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 fb87 	bl	8001bde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	2b40      	cmp	r3, #64	; 0x40
 80014dc:	d10e      	bne.n	80014fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e8:	2b40      	cmp	r3, #64	; 0x40
 80014ea:	d107      	bne.n	80014fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80014f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f8f3 	bl	80016e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f003 0320 	and.w	r3, r3, #32
 8001506:	2b20      	cmp	r3, #32
 8001508:	d10e      	bne.n	8001528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	2b20      	cmp	r3, #32
 8001516:	d107      	bne.n	8001528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f06f 0220 	mvn.w	r2, #32
 8001520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fb52 	bl	8001bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001546:	2302      	movs	r3, #2
 8001548:	e0ac      	b.n	80016a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0c      	cmp	r3, #12
 8001556:	f200 809f 	bhi.w	8001698 <HAL_TIM_PWM_ConfigChannel+0x168>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	08001595 	.word	0x08001595
 8001564:	08001699 	.word	0x08001699
 8001568:	08001699 	.word	0x08001699
 800156c:	08001699 	.word	0x08001699
 8001570:	080015d5 	.word	0x080015d5
 8001574:	08001699 	.word	0x08001699
 8001578:	08001699 	.word	0x08001699
 800157c:	08001699 	.word	0x08001699
 8001580:	08001617 	.word	0x08001617
 8001584:	08001699 	.word	0x08001699
 8001588:	08001699 	.word	0x08001699
 800158c:	08001699 	.word	0x08001699
 8001590:	08001657 	.word	0x08001657
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f90c 	bl	80017b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0208 	orr.w	r2, r2, #8
 80015ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0204 	bic.w	r2, r2, #4
 80015be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6999      	ldr	r1, [r3, #24]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	619a      	str	r2, [r3, #24]
      break;
 80015d2:	e062      	b.n	800169a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f952 	bl	8001884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6999      	ldr	r1, [r3, #24]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	021a      	lsls	r2, r3, #8
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	619a      	str	r2, [r3, #24]
      break;
 8001614:	e041      	b.n	800169a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f99b 	bl	8001958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	69da      	ldr	r2, [r3, #28]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0208 	orr.w	r2, r2, #8
 8001630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0204 	bic.w	r2, r2, #4
 8001640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	69d9      	ldr	r1, [r3, #28]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	61da      	str	r2, [r3, #28]
      break;
 8001654:	e021      	b.n	800169a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f9e5 	bl	8001a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	69da      	ldr	r2, [r3, #28]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69da      	ldr	r2, [r3, #28]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69d9      	ldr	r1, [r3, #28]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	021a      	lsls	r2, r3, #8
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	61da      	str	r2, [r3, #28]
      break;
 8001696:	e000      	b.n	800169a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001698:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a29      	ldr	r2, [pc, #164]	; (80017ac <TIM_Base_SetConfig+0xb8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00b      	beq.n	8001724 <TIM_Base_SetConfig+0x30>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001712:	d007      	beq.n	8001724 <TIM_Base_SetConfig+0x30>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a26      	ldr	r2, [pc, #152]	; (80017b0 <TIM_Base_SetConfig+0xbc>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d003      	beq.n	8001724 <TIM_Base_SetConfig+0x30>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <TIM_Base_SetConfig+0xc0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d108      	bne.n	8001736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <TIM_Base_SetConfig+0xb8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00b      	beq.n	8001756 <TIM_Base_SetConfig+0x62>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001744:	d007      	beq.n	8001756 <TIM_Base_SetConfig+0x62>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <TIM_Base_SetConfig+0xbc>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d003      	beq.n	8001756 <TIM_Base_SetConfig+0x62>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <TIM_Base_SetConfig+0xc0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d108      	bne.n	8001768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800175c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	4313      	orrs	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <TIM_Base_SetConfig+0xb8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d103      	bne.n	800179c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	615a      	str	r2, [r3, #20]
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40012c00 	.word	0x40012c00
 80017b0:	40000400 	.word	0x40000400
 80017b4:	40000800 	.word	0x40000800

080017b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	f023 0201 	bic.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f023 0303 	bic.w	r3, r3, #3
 80017ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f023 0302 	bic.w	r3, r3, #2
 8001800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4313      	orrs	r3, r2
 800180a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <TIM_OC1_SetConfig+0xc8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d10c      	bne.n	800182e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f023 0308 	bic.w	r3, r3, #8
 800181a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	4313      	orrs	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a13      	ldr	r2, [pc, #76]	; (8001880 <TIM_OC1_SetConfig+0xc8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d111      	bne.n	800185a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800183c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	621a      	str	r2, [r3, #32]
}
 8001874:	bf00      	nop
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40012c00 	.word	0x40012c00

08001884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	f023 0210 	bic.w	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f023 0320 	bic.w	r3, r3, #32
 80018ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <TIM_OC2_SetConfig+0xd0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d10d      	bne.n	8001900 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a14      	ldr	r2, [pc, #80]	; (8001954 <TIM_OC2_SetConfig+0xd0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d113      	bne.n	8001930 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800190e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	621a      	str	r2, [r3, #32]
}
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	40012c00 	.word	0x40012c00

08001958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <TIM_OC3_SetConfig+0xd0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10d      	bne.n	80019d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <TIM_OC3_SetConfig+0xd0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d113      	bne.n	8001a02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	621a      	str	r2, [r3, #32]
}
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40012c00 	.word	0x40012c00

08001a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	031b      	lsls	r3, r3, #12
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <TIM_OC4_SetConfig+0x98>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d109      	bne.n	8001aa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	019b      	lsls	r3, r3, #6
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	621a      	str	r2, [r3, #32]
}
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	40012c00 	.word	0x40012c00

08001ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	2201      	movs	r2, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a1a      	ldr	r2, [r3, #32]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a1a      	ldr	r2, [r3, #32]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	431a      	orrs	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	621a      	str	r2, [r3, #32]
}
 8001b06:	bf00      	nop
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e046      	b.n	8001bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d00e      	beq.n	8001b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b74:	d009      	beq.n	8001b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d004      	beq.n	8001b8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10c      	bne.n	8001ba4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40000400 	.word	0x40000400
 8001bc8:	40000800 	.word	0x40000800

08001bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e03f      	b.n	8001c82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 ffbe 	bl	8002b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fc85 	bl	8002544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b08a      	sub	sp, #40	; 0x28
 8001c8e:	af02      	add	r7, sp, #8
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d17c      	bne.n	8001da4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_UART_Transmit+0x2c>
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e075      	b.n	8001da6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_UART_Transmit+0x3e>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e06e      	b.n	8001da6 <HAL_UART_Transmit+0x11c>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2221      	movs	r2, #33	; 0x21
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cde:	f7fe fa8d 	bl	80001fc <HAL_GetTick>
 8001ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	88fa      	ldrh	r2, [r7, #6]
 8001ce8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	88fa      	ldrh	r2, [r7, #6]
 8001cee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf8:	d108      	bne.n	8001d0c <HAL_UART_Transmit+0x82>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d104      	bne.n	8001d0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	e003      	b.n	8001d14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d1c:	e02a      	b.n	8001d74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2200      	movs	r2, #0
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fa38 	bl	800219e <UART_WaitOnFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e036      	b.n	8001da6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10b      	bne.n	8001d56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	3302      	adds	r3, #2
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	e007      	b.n	8001d66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	3301      	adds	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1cf      	bne.n	8001d1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2200      	movs	r2, #0
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 fa08 	bl	800219e <UART_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e006      	b.n	8001da6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d11d      	bne.n	8001e04 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_UART_Receive_IT+0x26>
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e016      	b.n	8001e06 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_UART_Receive_IT+0x38>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e00f      	b.n	8001e06 <HAL_UART_Receive_IT+0x58>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fa19 	bl	8002232 <UART_Start_Receive_IT>
 8001e00:	4603      	mov	r3, r0
 8001e02:	e000      	b.n	8001e06 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001e04:	2302      	movs	r3, #2
  }
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10d      	bne.n	8001e62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_UART_IRQHandler+0x52>
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fac9 	bl	80023f2 <UART_Receive_IT>
      return;
 8001e60:	e17b      	b.n	800215a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80b1 	beq.w	8001fcc <HAL_UART_IRQHandler+0x1bc>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_UART_IRQHandler+0x70>
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80a6 	beq.w	8001fcc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00a      	beq.n	8001ea0 <HAL_UART_IRQHandler+0x90>
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f043 0201 	orr.w	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_UART_IRQHandler+0xb0>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	f043 0202 	orr.w	r2, r3, #2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00a      	beq.n	8001ee0 <HAL_UART_IRQHandler+0xd0>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f043 0204 	orr.w	r2, r3, #4
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00f      	beq.n	8001f0a <HAL_UART_IRQHandler+0xfa>
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d104      	bne.n	8001efe <HAL_UART_IRQHandler+0xee>
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f043 0208 	orr.w	r2, r3, #8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 811e 	beq.w	8002150 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d007      	beq.n	8001f2e <HAL_UART_IRQHandler+0x11e>
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fa62 	bl	80023f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <HAL_UART_IRQHandler+0x146>
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d031      	beq.n	8001fba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f9a4 	bl	80022a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d023      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d013      	beq.n	8001faa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	4a76      	ldr	r2, [pc, #472]	; (8002160 <HAL_UART_IRQHandler+0x350>)
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fa86 	bl	80004a0 <HAL_DMA_Abort_IT>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d016      	beq.n	8001fc8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa8:	e00e      	b.n	8001fc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8e3 	bl	8002176 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb0:	e00a      	b.n	8001fc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8df 	bl	8002176 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb8:	e006      	b.n	8001fc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8db 	bl	8002176 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001fc6:	e0c3      	b.n	8002150 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc8:	bf00      	nop
    return;
 8001fca:	e0c1      	b.n	8002150 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	f040 80a1 	bne.w	8002118 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 809b 	beq.w	8002118 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8095 	beq.w	8002118 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d04e      	beq.n	80020b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800201c:	8a3b      	ldrh	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8098 	beq.w	8002154 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002028:	8a3a      	ldrh	r2, [r7, #16]
 800202a:	429a      	cmp	r2, r3
 800202c:	f080 8092 	bcs.w	8002154 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8a3a      	ldrh	r2, [r7, #16]
 8002034:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b20      	cmp	r3, #32
 800203e:	d02b      	beq.n	8002098 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800204e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800206e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0210 	bic.w	r2, r2, #16
 800208c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f9c9 	bl	800042a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f86d 	bl	8002188 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80020ae:	e051      	b.n	8002154 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d047      	beq.n	8002158 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80020c8:	8a7b      	ldrh	r3, [r7, #18]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d044      	beq.n	8002158 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0210 	bic.w	r2, r2, #16
 800210a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800210c:	8a7b      	ldrh	r3, [r7, #18]
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f839 	bl	8002188 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002116:	e01f      	b.n	8002158 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_UART_IRQHandler+0x324>
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f8f9 	bl	8002324 <UART_Transmit_IT>
    return;
 8002132:	e012      	b.n	800215a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <HAL_UART_IRQHandler+0x34a>
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f93a 	bl	80023c2 <UART_EndTransmit_IT>
    return;
 800214e:	e004      	b.n	800215a <HAL_UART_IRQHandler+0x34a>
    return;
 8002150:	bf00      	nop
 8002152:	e002      	b.n	800215a <HAL_UART_IRQHandler+0x34a>
      return;
 8002154:	bf00      	nop
 8002156:	e000      	b.n	800215a <HAL_UART_IRQHandler+0x34a>
      return;
 8002158:	bf00      	nop
  }
}
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	080022fd 	.word	0x080022fd

08002164 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ae:	e02c      	b.n	800220a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d028      	beq.n	800220a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <UART_WaitOnFlagUntilTimeout+0x30>
 80021be:	f7fe f81d 	bl	80001fc <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d21d      	bcs.n	800220a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e00f      	b.n	800222a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4013      	ands	r3, r2
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	429a      	cmp	r2, r3
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	429a      	cmp	r2, r3
 8002226:	d0c3      	beq.n	80021b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	4613      	mov	r3, r2
 800223e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	88fa      	ldrh	r2, [r7, #6]
 800224a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2222      	movs	r2, #34	; 0x22
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002276:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695a      	ldr	r2, [r3, #20]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0220 	orr.w	r2, r2, #32
 8002296:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0210 	bic.w	r2, r2, #16
 80022e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f7ff ff2d 	bl	8002176 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b21      	cmp	r3, #33	; 0x21
 8002336:	d13e      	bne.n	80023b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002340:	d114      	bne.n	800236c <UART_Transmit_IT+0x48>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d110      	bne.n	800236c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800235e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	1c9a      	adds	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	621a      	str	r2, [r3, #32]
 800236a:	e008      	b.n	800237e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	1c59      	adds	r1, r3, #1
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6211      	str	r1, [r2, #32]
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29b      	uxth	r3, r3
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4619      	mov	r1, r3
 800238c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10f      	bne.n	80023b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e000      	b.n	80023b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023b6:	2302      	movs	r3, #2
  }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff febe 	bl	8002164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b22      	cmp	r3, #34	; 0x22
 8002404:	f040 8099 	bne.w	800253a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002410:	d117      	bne.n	8002442 <UART_Receive_IT+0x50>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d113      	bne.n	8002442 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	b29b      	uxth	r3, r3
 800242c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002430:	b29a      	uxth	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	1c9a      	adds	r2, r3, #2
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
 8002440:	e026      	b.n	8002490 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002454:	d007      	beq.n	8002466 <UART_Receive_IT+0x74>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <UART_Receive_IT+0x82>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	e008      	b.n	8002486 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002480:	b2da      	uxtb	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29b      	uxth	r3, r3
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4619      	mov	r1, r3
 800249e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d148      	bne.n	8002536 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0220 	bic.w	r2, r2, #32
 80024b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d123      	bne.n	800252c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0210 	bic.w	r2, r2, #16
 80024f8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b10      	cmp	r3, #16
 8002506:	d10a      	bne.n	800251e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002522:	4619      	mov	r1, r3
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff fe2f 	bl	8002188 <HAL_UARTEx_RxEventCallback>
 800252a:	e002      	b.n	8002532 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f8a1 	bl	8002674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e002      	b.n	800253c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e000      	b.n	800253c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800253a:	2302      	movs	r3, #2
  }
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800257e:	f023 030c 	bic.w	r3, r3, #12
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	430b      	orrs	r3, r1
 800258a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2c      	ldr	r2, [pc, #176]	; (8002658 <UART_SetConfig+0x114>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d103      	bne.n	80025b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025ac:	f7fe fd94 	bl	80010d8 <HAL_RCC_GetPCLK2Freq>
 80025b0:	60f8      	str	r0, [r7, #12]
 80025b2:	e002      	b.n	80025ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025b4:	f7fe fd7c 	bl	80010b0 <HAL_RCC_GetPCLK1Freq>
 80025b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	009a      	lsls	r2, r3, #2
 80025c4:	441a      	add	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	4a22      	ldr	r2, [pc, #136]	; (800265c <UART_SetConfig+0x118>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	0119      	lsls	r1, r3, #4
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	009a      	lsls	r2, r3, #2
 80025e4:	441a      	add	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <UART_SetConfig+0x118>)
 80025f2:	fba3 0302 	umull	r0, r3, r3, r2
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2064      	movs	r0, #100	; 0x64
 80025fa:	fb00 f303 	mul.w	r3, r0, r3
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	3332      	adds	r3, #50	; 0x32
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <UART_SetConfig+0x118>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002610:	4419      	add	r1, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	009a      	lsls	r2, r3, #2
 800261c:	441a      	add	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	fbb2 f2f3 	udiv	r2, r2, r3
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <UART_SetConfig+0x118>)
 800262a:	fba3 0302 	umull	r0, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2064      	movs	r0, #100	; 0x64
 8002632:	fb00 f303 	mul.w	r3, r0, r3
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	3332      	adds	r3, #50	; 0x32
 800263c:	4a07      	ldr	r2, [pc, #28]	; (800265c <UART_SetConfig+0x118>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	f003 020f 	and.w	r2, r3, #15
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	440a      	add	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40013800 	.word	0x40013800
 800265c:	51eb851f 	.word	0x51eb851f

08002660 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char rx_buffer[2] = {0};
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
	}
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
	...

08002674 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a23      	ldr	r2, [pc, #140]	; (8002710 <HAL_UART_RxCpltCallback+0x9c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d13f      	bne.n	8002706 <HAL_UART_RxCpltCallback+0x92>

		if (rx_buffer[0] == '+' && (TIM3->CCR1 < 1940))
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_UART_RxCpltCallback+0xa0>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b2b      	cmp	r3, #43	; 0x2b
 800268c:	d10b      	bne.n	80026a6 <HAL_UART_RxCpltCallback+0x32>
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <HAL_UART_RxCpltCallback+0xa4>)
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	f240 7293 	movw	r2, #1939	; 0x793
 8002696:	4293      	cmp	r3, r2
 8002698:	d805      	bhi.n	80026a6 <HAL_UART_RxCpltCallback+0x32>
			TIM3->CCR1 +=10;
 800269a:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <HAL_UART_RxCpltCallback+0xa4>)
 800269c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_UART_RxCpltCallback+0xa4>)
 80026a0:	330a      	adds	r3, #10
 80026a2:	6353      	str	r3, [r2, #52]	; 0x34
 80026a4:	e02a      	b.n	80026fc <HAL_UART_RxCpltCallback+0x88>
		else
		if(rx_buffer[0] == '-' && (TIM3->CCR1 > 0))
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_UART_RxCpltCallback+0xa0>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b2d      	cmp	r3, #45	; 0x2d
 80026ac:	d109      	bne.n	80026c2 <HAL_UART_RxCpltCallback+0x4e>
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <HAL_UART_RxCpltCallback+0xa4>)
 80026b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_UART_RxCpltCallback+0x4e>
			TIM3->CCR1 -=10;
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_UART_RxCpltCallback+0xa4>)
 80026b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_UART_RxCpltCallback+0xa4>)
 80026bc:	3b0a      	subs	r3, #10
 80026be:	6353      	str	r3, [r2, #52]	; 0x34
 80026c0:	e01c      	b.n	80026fc <HAL_UART_RxCpltCallback+0x88>
		else
		if(rx_buffer[0] == 'h')
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_UART_RxCpltCallback+0xa0>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b68      	cmp	r3, #104	; 0x68
 80026c8:	d104      	bne.n	80026d4 <HAL_UART_RxCpltCallback+0x60>
			TIM3->CCR1 =500;
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <HAL_UART_RxCpltCallback+0xa4>)
 80026cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
 80026d2:	e013      	b.n	80026fc <HAL_UART_RxCpltCallback+0x88>
		else
		if(rx_buffer[0] == 'l')
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_UART_RxCpltCallback+0xa0>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b6c      	cmp	r3, #108	; 0x6c
 80026da:	d103      	bne.n	80026e4 <HAL_UART_RxCpltCallback+0x70>
			TIM3->CCR1 =0;
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_UART_RxCpltCallback+0xa4>)
 80026de:	2200      	movs	r2, #0
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34
 80026e2:	e00b      	b.n	80026fc <HAL_UART_RxCpltCallback+0x88>
		else
		if(rx_buffer[0] == 'f')
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_UART_RxCpltCallback+0xa0>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b66      	cmp	r3, #102	; 0x66
 80026ea:	d104      	bne.n	80026f6 <HAL_UART_RxCpltCallback+0x82>
			TIM3->CCR1 =1941;
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_UART_RxCpltCallback+0xa4>)
 80026ee:	f240 7295 	movw	r2, #1941	; 0x795
 80026f2:	635a      	str	r2, [r3, #52]	; 0x34
 80026f4:	e002      	b.n	80026fc <HAL_UART_RxCpltCallback+0x88>
		else
			printf("wrong option \r\n");
 80026f6:	4809      	ldr	r0, [pc, #36]	; (800271c <HAL_UART_RxCpltCallback+0xa8>)
 80026f8:	f000 fc7c 	bl	8002ff4 <puts>
		HAL_UART_Receive_IT(huart, (uint8_t *)rx_buffer, 1);
 80026fc:	2201      	movs	r2, #1
 80026fe:	4905      	ldr	r1, [pc, #20]	; (8002714 <HAL_UART_RxCpltCallback+0xa0>)
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff fb54 	bl	8001dae <HAL_UART_Receive_IT>
	}
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40004400 	.word	0x40004400
 8002714:	2000011c 	.word	0x2000011c
 8002718:	40000400 	.word	0x40000400
 800271c:	08003f24 	.word	0x08003f24

08002720 <display_seconds>:

void display_seconds(void){
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
	static uint32_t tick_tracker = 0;
	static uint32_t deci_seconds = 0;
	char time_buffer[20] = {0};
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	60da      	str	r2, [r3, #12]
	if (tick_tracker < HAL_GetTick()){
 8002738:	f7fd fd60 	bl	80001fc <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <display_seconds+0x50>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d910      	bls.n	8002768 <display_seconds+0x48>
		tick_tracker =HAL_GetTick()+100;
 8002746:	f7fd fd59 	bl	80001fc <HAL_GetTick>
 800274a:	4603      	mov	r3, r0
 800274c:	3364      	adds	r3, #100	; 0x64
 800274e:	4a08      	ldr	r2, [pc, #32]	; (8002770 <display_seconds+0x50>)
 8002750:	6013      	str	r3, [r2, #0]
		GPIOA->ODR ^=GPIO_PIN_5;
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <display_seconds+0x54>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	4a07      	ldr	r2, [pc, #28]	; (8002774 <display_seconds+0x54>)
 8002758:	f083 0320 	eor.w	r3, r3, #32
 800275c:	60d3      	str	r3, [r2, #12]
	//	sprintf(time_buffer, "%6lu",deci_seconds);
		deci_seconds++;
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <display_seconds+0x58>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <display_seconds+0x58>)
 8002766:	6013      	str	r3, [r2, #0]
	//	logmessage(time_buffer);
	}
}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000120 	.word	0x20000120
 8002774:	40010800 	.word	0x40010800
 8002778:	20000124 	.word	0x20000124

0800277c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002780:	f7fd fce4 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002784:	f000 f83c 	bl	8002800 <SystemClock_Config>
  	//setvbuf(stdout, NULL, _IONBF, 0);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002788:	f000 f908 	bl	800299c <MX_GPIO_Init>
  MX_TIM3_Init();
 800278c:	f000 f87a 	bl	8002884 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002790:	f000 f8da 	bl	8002948 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer, 1);
 8002794:	2201      	movs	r2, #1
 8002796:	490f      	ldr	r1, [pc, #60]	; (80027d4 <main+0x58>)
 8002798:	480f      	ldr	r0, [pc, #60]	; (80027d8 <main+0x5c>)
 800279a:	f7ff fb08 	bl	8001dae <HAL_UART_Receive_IT>

	printf("Program start %s%s\r\n",__DATE__,__TIME__);
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <main+0x60>)
 80027a0:	490f      	ldr	r1, [pc, #60]	; (80027e0 <main+0x64>)
 80027a2:	4810      	ldr	r0, [pc, #64]	; (80027e4 <main+0x68>)
 80027a4:	f000 fba0 	bl	8002ee8 <iprintf>
	printf("\r\n PRESS ONE OF THE FOLLOWING OPTIONS: \r\n\r\n");
 80027a8:	480f      	ldr	r0, [pc, #60]	; (80027e8 <main+0x6c>)
 80027aa:	f000 fc23 	bl	8002ff4 <puts>
	printf("\t\t [f].......100 percent \r\n");
 80027ae:	480f      	ldr	r0, [pc, #60]	; (80027ec <main+0x70>)
 80027b0:	f000 fc20 	bl	8002ff4 <puts>
	printf("\t\t [h]........50 percent \r\n");
 80027b4:	480e      	ldr	r0, [pc, #56]	; (80027f0 <main+0x74>)
 80027b6:	f000 fc1d 	bl	8002ff4 <puts>
	printf("\t\t [l].........0 percent  \r\n");
 80027ba:	480e      	ldr	r0, [pc, #56]	; (80027f4 <main+0x78>)
 80027bc:	f000 fc1a 	bl	8002ff4 <puts>
	printf("\t\t [+].........increase  \r\n");
 80027c0:	480d      	ldr	r0, [pc, #52]	; (80027f8 <main+0x7c>)
 80027c2:	f000 fc17 	bl	8002ff4 <puts>
	printf("\t\t [-].........decrease  \r\n");
 80027c6:	480d      	ldr	r0, [pc, #52]	; (80027fc <main+0x80>)
 80027c8:	f000 fc14 	bl	8002ff4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	display_seconds();
 80027cc:	f7ff ffa8 	bl	8002720 <display_seconds>
 80027d0:	e7fc      	b.n	80027cc <main+0x50>
 80027d2:	bf00      	nop
 80027d4:	2000011c 	.word	0x2000011c
 80027d8:	200000d8 	.word	0x200000d8
 80027dc:	08003f34 	.word	0x08003f34
 80027e0:	08003f40 	.word	0x08003f40
 80027e4:	08003f4c 	.word	0x08003f4c
 80027e8:	08003f64 	.word	0x08003f64
 80027ec:	08003f90 	.word	0x08003f90
 80027f0:	08003fac 	.word	0x08003fac
 80027f4:	08003fc8 	.word	0x08003fc8
 80027f8:	08003fe4 	.word	0x08003fe4
 80027fc:	08004000 	.word	0x08004000

08002800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b090      	sub	sp, #64	; 0x40
 8002804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002806:	f107 0318 	add.w	r3, r7, #24
 800280a:	2228      	movs	r2, #40	; 0x28
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fb62 	bl	8002ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002822:	2302      	movs	r3, #2
 8002824:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002826:	2301      	movs	r3, #1
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800282a:	2310      	movs	r3, #16
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800282e:	2302      	movs	r3, #2
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002832:	2300      	movs	r3, #0
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002836:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283c:	f107 0318 	add.w	r3, r7, #24
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe f861 	bl	8000908 <HAL_RCC_OscConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800284c:	f000 f914 	bl	8002a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002850:	230f      	movs	r3, #15
 8002852:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002854:	2302      	movs	r3, #2
 8002856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800285c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	2102      	movs	r1, #2
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe face 	bl	8000e0c <HAL_RCC_ClockConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002876:	f000 f8ff 	bl	8002a78 <Error_Handler>
  }
}
 800287a:	bf00      	nop
 800287c:	3740      	adds	r7, #64	; 0x40
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288a:	f107 0320 	add.w	r3, r7, #32
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	611a      	str	r2, [r3, #16]
 80028a2:	615a      	str	r2, [r3, #20]
 80028a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028a6:	4b26      	ldr	r3, [pc, #152]	; (8002940 <MX_TIM3_Init+0xbc>)
 80028a8:	4a26      	ldr	r2, [pc, #152]	; (8002944 <MX_TIM3_Init+0xc0>)
 80028aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <MX_TIM3_Init+0xbc>)
 80028ae:	2220      	movs	r2, #32
 80028b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <MX_TIM3_Init+0xbc>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <MX_TIM3_Init+0xbc>)
 80028ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <MX_TIM3_Init+0xbc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <MX_TIM3_Init+0xbc>)
 80028c8:	2280      	movs	r2, #128	; 0x80
 80028ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028cc:	481c      	ldr	r0, [pc, #112]	; (8002940 <MX_TIM3_Init+0xbc>)
 80028ce:	f7fe fc35 	bl	800113c <HAL_TIM_PWM_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80028d8:	f000 f8ce 	bl	8002a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028e4:	f107 0320 	add.w	r3, r7, #32
 80028e8:	4619      	mov	r1, r3
 80028ea:	4815      	ldr	r0, [pc, #84]	; (8002940 <MX_TIM3_Init+0xbc>)
 80028ec:	f7ff f910 	bl	8001b10 <HAL_TIMEx_MasterConfigSynchronization>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80028f6:	f000 f8bf 	bl	8002a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028fa:	2360      	movs	r3, #96	; 0x60
 80028fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80028fe:	2364      	movs	r3, #100	; 0x64
 8002900:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	2200      	movs	r2, #0
 800290e:	4619      	mov	r1, r3
 8002910:	480b      	ldr	r0, [pc, #44]	; (8002940 <MX_TIM3_Init+0xbc>)
 8002912:	f7fe fe0d 	bl	8001530 <HAL_TIM_PWM_ConfigChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800291c:	f000 f8ac 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8002920:	2100      	movs	r1, #0
 8002922:	4807      	ldr	r0, [pc, #28]	; (8002940 <MX_TIM3_Init+0xbc>)
 8002924:	f7fe fc5a 	bl	80011dc <HAL_TIM_PWM_Start>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_TIM3_Init+0xae>
  {
  	Error_Handler();
 800292e:	f000 f8a3 	bl	8002a78 <Error_Handler>
  }

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002932:	4803      	ldr	r0, [pc, #12]	; (8002940 <MX_TIM3_Init+0xbc>)
 8002934:	f000 f8fe 	bl	8002b34 <HAL_TIM_MspPostInit>

}
 8002938:	bf00      	nop
 800293a:	3728      	adds	r7, #40	; 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000090 	.word	0x20000090
 8002944:	40000400 	.word	0x40000400

08002948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <MX_USART2_UART_Init+0x50>)
 8002950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 8002954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 800296e:	220c      	movs	r2, #12
 8002970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800297e:	4805      	ldr	r0, [pc, #20]	; (8002994 <MX_USART2_UART_Init+0x4c>)
 8002980:	f7ff f936 	bl	8001bf0 <HAL_UART_Init>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800298a:	f000 f875 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200000d8 	.word	0x200000d8
 8002998:	40004400 	.word	0x40004400

0800299c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b0:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	4a2c      	ldr	r2, [pc, #176]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	6193      	str	r3, [r2, #24]
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029ce:	f043 0320 	orr.w	r3, r3, #32
 80029d2:	6193      	str	r3, [r2, #24]
 80029d4:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	4a20      	ldr	r2, [pc, #128]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6193      	str	r3, [r2, #24]
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <MX_GPIO_Init+0xcc>)
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	6193      	str	r3, [r2, #24]
 8002a04:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <MX_GPIO_Init+0xcc>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2120      	movs	r1, #32
 8002a14:	4815      	ldr	r0, [pc, #84]	; (8002a6c <MX_GPIO_Init+0xd0>)
 8002a16:	f7fd ff3d 	bl	8000894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <MX_GPIO_Init+0xd4>)
 8002a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4811      	ldr	r0, [pc, #68]	; (8002a74 <MX_GPIO_Init+0xd8>)
 8002a30:	f7fd fdac 	bl	800058c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002a34:	2320      	movs	r3, #32
 8002a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2302      	movs	r3, #2
 8002a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4808      	ldr	r0, [pc, #32]	; (8002a6c <MX_GPIO_Init+0xd0>)
 8002a4c:	f7fd fd9e 	bl	800058c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	2028      	movs	r0, #40	; 0x28
 8002a56:	f7fd fcb2 	bl	80003be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a5a:	2028      	movs	r0, #40	; 0x28
 8002a5c:	f7fd fccb 	bl	80003f6 <HAL_NVIC_EnableIRQ>

}
 8002a60:	bf00      	nop
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010800 	.word	0x40010800
 8002a70:	10210000 	.word	0x10210000
 8002a74:	40011000 	.word	0x40011000

08002a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_MspInit+0x5c>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <HAL_MspInit+0x5c>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6193      	str	r3, [r2, #24]
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_MspInit+0x5c>)
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <HAL_MspInit+0x5c>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <HAL_MspInit+0x5c>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	61d3      	str	r3, [r2, #28]
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <HAL_MspInit+0x5c>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_MspInit+0x60>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_MspInit+0x60>)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40010000 	.word	0x40010000

08002ae8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <HAL_TIM_PWM_MspInit+0x44>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d113      	bne.n	8002b22 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_TIM_PWM_MspInit+0x48>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4a0c      	ldr	r2, [pc, #48]	; (8002b30 <HAL_TIM_PWM_MspInit+0x48>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	61d3      	str	r3, [r2, #28]
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_TIM_PWM_MspInit+0x48>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	201d      	movs	r0, #29
 8002b18:	f7fd fc51 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b1c:	201d      	movs	r0, #29
 8002b1e:	f7fd fc6a 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40021000 	.word	0x40021000

08002b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <HAL_TIM_MspPostInit+0x58>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d117      	bne.n	8002b84 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <HAL_TIM_MspPostInit+0x5c>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_TIM_MspPostInit+0x5c>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6193      	str	r3, [r2, #24]
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_TIM_MspPostInit+0x5c>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b6c:	2340      	movs	r3, #64	; 0x40
 8002b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2302      	movs	r3, #2
 8002b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4805      	ldr	r0, [pc, #20]	; (8002b94 <HAL_TIM_MspPostInit+0x60>)
 8002b80:	f7fd fd04 	bl	800058c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b84:	bf00      	nop
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010800 	.word	0x40010800

08002b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 0310 	add.w	r3, r7, #16
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a19      	ldr	r2, [pc, #100]	; (8002c18 <HAL_UART_MspInit+0x80>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d12b      	bne.n	8002c10 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_UART_MspInit+0x84>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <HAL_UART_MspInit+0x84>)
 8002bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc2:	61d3      	str	r3, [r2, #28]
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_UART_MspInit+0x84>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_UART_MspInit+0x84>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <HAL_UART_MspInit+0x84>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <HAL_UART_MspInit+0x84>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002be8:	230c      	movs	r3, #12
 8002bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4809      	ldr	r0, [pc, #36]	; (8002c20 <HAL_UART_MspInit+0x88>)
 8002bfc:	f7fd fcc6 	bl	800058c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2100      	movs	r1, #0
 8002c04:	2026      	movs	r0, #38	; 0x26
 8002c06:	f7fd fbda 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c0a:	2026      	movs	r0, #38	; 0x26
 8002c0c:	f7fd fbf3 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c10:	bf00      	nop
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40004400 	.word	0x40004400
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40010800 	.word	0x40010800

08002c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <HardFault_Handler+0x4>

08002c36 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <MemManage_Handler+0x4>

08002c3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <BusFault_Handler+0x4>

08002c42 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c46:	e7fe      	b.n	8002c46 <UsageFault_Handler+0x4>

08002c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c70:	f7fd fab2 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <TIM3_IRQHandler+0x10>)
 8002c7e:	f7fe fb4f 	bl	8001320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000090 	.word	0x20000090

08002c8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <USART2_IRQHandler+0x10>)
 8002c92:	f7ff f8bd 	bl	8001e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200000d8 	.word	0x200000d8

08002ca0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ca4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ca8:	f7fd fe0c 	bl	80008c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e00a      	b.n	8002cd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cc2:	f3af 8000 	nop.w
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	60ba      	str	r2, [r7, #8]
 8002cce:	b2ca      	uxtb	r2, r1
 8002cd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	dbf0      	blt.n	8002cc2 <_read+0x12>
	}

return len;
 8002ce0:	687b      	ldr	r3, [r7, #4]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit( &huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4804      	ldr	r0, [pc, #16]	; (8002d14 <_write+0x28>)
 8002d04:	f7fe ffc1 	bl	8001c8a <HAL_UART_Transmit>

	return len;
 8002d08:	687b      	ldr	r3, [r7, #4]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200000d8 	.word	0x200000d8

08002d18 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <_sbrk+0x50>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x16>
		heap_end = &end;
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <_sbrk+0x50>)
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <_sbrk+0x54>)
 8002d2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <_sbrk+0x50>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <_sbrk+0x50>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	466a      	mov	r2, sp
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d907      	bls.n	8002d52 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002d42:	f000 f89f 	bl	8002e84 <__errno>
 8002d46:	4603      	mov	r3, r0
 8002d48:	220c      	movs	r2, #12
 8002d4a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d50:	e006      	b.n	8002d60 <_sbrk+0x48>
	}

	heap_end += incr;
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <_sbrk+0x50>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <_sbrk+0x50>)
 8002d5c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000128 	.word	0x20000128
 8002d6c:	2000013c 	.word	0x2000013c

08002d70 <_close>:

int _close(int file)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	return -1;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d96:	605a      	str	r2, [r3, #4]
	return 0;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <_isatty>:

int _isatty(int file)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	return 1;
 8002dac:	2301      	movs	r3, #1
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <SystemInit+0x5c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <SystemInit+0x5c>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <SystemInit+0x5c>)
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	4911      	ldr	r1, [pc, #68]	; (8002e2c <SystemInit+0x5c>)
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <SystemInit+0x60>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002dec:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <SystemInit+0x5c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <SystemInit+0x5c>)
 8002df2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <SystemInit+0x5c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <SystemInit+0x5c>)
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <SystemInit+0x5c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <SystemInit+0x5c>)
 8002e0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002e12:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <SystemInit+0x5c>)
 8002e16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002e1a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <SystemInit+0x64>)
 8002e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e22:	609a      	str	r2, [r3, #8]
#endif 
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	f8ff0000 	.word	0xf8ff0000
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e3a:	e003      	b.n	8002e44 <LoopCopyDataInit>

08002e3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e42:	3104      	adds	r1, #4

08002e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e44:	480a      	ldr	r0, [pc, #40]	; (8002e70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e4c:	d3f6      	bcc.n	8002e3c <CopyDataInit>
  ldr r2, =_sbss
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e50:	e002      	b.n	8002e58 <LoopFillZerobss>

08002e52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e54:	f842 3b04 	str.w	r3, [r2], #4

08002e58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002e5c:	d3f9      	bcc.n	8002e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e5e:	f7ff ffb7 	bl	8002dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e62:	f000 f815 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e66:	f7ff fc89 	bl	800277c <main>
  bx lr
 8002e6a:	4770      	bx	lr
  ldr r3, =_sidata
 8002e6c:	080040d4 	.word	0x080040d4
  ldr r0, =_sdata
 8002e70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e74:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002e78:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002e7c:	2000013c 	.word	0x2000013c

08002e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e80:	e7fe      	b.n	8002e80 <ADC1_2_IRQHandler>
	...

08002e84 <__errno>:
 8002e84:	4b01      	ldr	r3, [pc, #4]	; (8002e8c <__errno+0x8>)
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	2000000c 	.word	0x2000000c

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	2600      	movs	r6, #0
 8002e94:	4d0c      	ldr	r5, [pc, #48]	; (8002ec8 <__libc_init_array+0x38>)
 8002e96:	4c0d      	ldr	r4, [pc, #52]	; (8002ecc <__libc_init_array+0x3c>)
 8002e98:	1b64      	subs	r4, r4, r5
 8002e9a:	10a4      	asrs	r4, r4, #2
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	f001 f82c 	bl	8003efc <_init>
 8002ea4:	2600      	movs	r6, #0
 8002ea6:	4d0a      	ldr	r5, [pc, #40]	; (8002ed0 <__libc_init_array+0x40>)
 8002ea8:	4c0a      	ldr	r4, [pc, #40]	; (8002ed4 <__libc_init_array+0x44>)
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb8:	4798      	blx	r3
 8002eba:	3601      	adds	r6, #1
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec2:	4798      	blx	r3
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	080040cc 	.word	0x080040cc
 8002ecc:	080040cc 	.word	0x080040cc
 8002ed0:	080040cc 	.word	0x080040cc
 8002ed4:	080040d0 	.word	0x080040d0

08002ed8 <memset>:
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4402      	add	r2, r0
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d100      	bne.n	8002ee2 <memset+0xa>
 8002ee0:	4770      	bx	lr
 8002ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee6:	e7f9      	b.n	8002edc <memset+0x4>

08002ee8 <iprintf>:
 8002ee8:	b40f      	push	{r0, r1, r2, r3}
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <iprintf+0x2c>)
 8002eec:	b513      	push	{r0, r1, r4, lr}
 8002eee:	681c      	ldr	r4, [r3, #0]
 8002ef0:	b124      	cbz	r4, 8002efc <iprintf+0x14>
 8002ef2:	69a3      	ldr	r3, [r4, #24]
 8002ef4:	b913      	cbnz	r3, 8002efc <iprintf+0x14>
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f000 fa5a 	bl	80033b0 <__sinit>
 8002efc:	ab05      	add	r3, sp, #20
 8002efe:	4620      	mov	r0, r4
 8002f00:	9a04      	ldr	r2, [sp, #16]
 8002f02:	68a1      	ldr	r1, [r4, #8]
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	f000 fc5d 	bl	80037c4 <_vfiprintf_r>
 8002f0a:	b002      	add	sp, #8
 8002f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f10:	b004      	add	sp, #16
 8002f12:	4770      	bx	lr
 8002f14:	2000000c 	.word	0x2000000c

08002f18 <_puts_r>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	460e      	mov	r6, r1
 8002f1c:	4605      	mov	r5, r0
 8002f1e:	b118      	cbz	r0, 8002f28 <_puts_r+0x10>
 8002f20:	6983      	ldr	r3, [r0, #24]
 8002f22:	b90b      	cbnz	r3, 8002f28 <_puts_r+0x10>
 8002f24:	f000 fa44 	bl	80033b0 <__sinit>
 8002f28:	69ab      	ldr	r3, [r5, #24]
 8002f2a:	68ac      	ldr	r4, [r5, #8]
 8002f2c:	b913      	cbnz	r3, 8002f34 <_puts_r+0x1c>
 8002f2e:	4628      	mov	r0, r5
 8002f30:	f000 fa3e 	bl	80033b0 <__sinit>
 8002f34:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <_puts_r+0xd0>)
 8002f36:	429c      	cmp	r4, r3
 8002f38:	d120      	bne.n	8002f7c <_puts_r+0x64>
 8002f3a:	686c      	ldr	r4, [r5, #4]
 8002f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f3e:	07db      	lsls	r3, r3, #31
 8002f40:	d405      	bmi.n	8002f4e <_puts_r+0x36>
 8002f42:	89a3      	ldrh	r3, [r4, #12]
 8002f44:	0598      	lsls	r0, r3, #22
 8002f46:	d402      	bmi.n	8002f4e <_puts_r+0x36>
 8002f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f4a:	f000 facf 	bl	80034ec <__retarget_lock_acquire_recursive>
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	0719      	lsls	r1, r3, #28
 8002f52:	d51d      	bpl.n	8002f90 <_puts_r+0x78>
 8002f54:	6923      	ldr	r3, [r4, #16]
 8002f56:	b1db      	cbz	r3, 8002f90 <_puts_r+0x78>
 8002f58:	3e01      	subs	r6, #1
 8002f5a:	68a3      	ldr	r3, [r4, #8]
 8002f5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f60:	3b01      	subs	r3, #1
 8002f62:	60a3      	str	r3, [r4, #8]
 8002f64:	bb39      	cbnz	r1, 8002fb6 <_puts_r+0x9e>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	da38      	bge.n	8002fdc <_puts_r+0xc4>
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	210a      	movs	r1, #10
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f000 f848 	bl	8003004 <__swbuf_r>
 8002f74:	3001      	adds	r0, #1
 8002f76:	d011      	beq.n	8002f9c <_puts_r+0x84>
 8002f78:	250a      	movs	r5, #10
 8002f7a:	e011      	b.n	8002fa0 <_puts_r+0x88>
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <_puts_r+0xd4>)
 8002f7e:	429c      	cmp	r4, r3
 8002f80:	d101      	bne.n	8002f86 <_puts_r+0x6e>
 8002f82:	68ac      	ldr	r4, [r5, #8]
 8002f84:	e7da      	b.n	8002f3c <_puts_r+0x24>
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <_puts_r+0xd8>)
 8002f88:	429c      	cmp	r4, r3
 8002f8a:	bf08      	it	eq
 8002f8c:	68ec      	ldreq	r4, [r5, #12]
 8002f8e:	e7d5      	b.n	8002f3c <_puts_r+0x24>
 8002f90:	4621      	mov	r1, r4
 8002f92:	4628      	mov	r0, r5
 8002f94:	f000 f888 	bl	80030a8 <__swsetup_r>
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	d0dd      	beq.n	8002f58 <_puts_r+0x40>
 8002f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8002fa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fa2:	07da      	lsls	r2, r3, #31
 8002fa4:	d405      	bmi.n	8002fb2 <_puts_r+0x9a>
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	059b      	lsls	r3, r3, #22
 8002faa:	d402      	bmi.n	8002fb2 <_puts_r+0x9a>
 8002fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fae:	f000 fa9e 	bl	80034ee <__retarget_lock_release_recursive>
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da04      	bge.n	8002fc4 <_puts_r+0xac>
 8002fba:	69a2      	ldr	r2, [r4, #24]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dc06      	bgt.n	8002fce <_puts_r+0xb6>
 8002fc0:	290a      	cmp	r1, #10
 8002fc2:	d004      	beq.n	8002fce <_puts_r+0xb6>
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	6022      	str	r2, [r4, #0]
 8002fca:	7019      	strb	r1, [r3, #0]
 8002fcc:	e7c5      	b.n	8002f5a <_puts_r+0x42>
 8002fce:	4622      	mov	r2, r4
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 f817 	bl	8003004 <__swbuf_r>
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	d1bf      	bne.n	8002f5a <_puts_r+0x42>
 8002fda:	e7df      	b.n	8002f9c <_puts_r+0x84>
 8002fdc:	250a      	movs	r5, #10
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	6022      	str	r2, [r4, #0]
 8002fe4:	701d      	strb	r5, [r3, #0]
 8002fe6:	e7db      	b.n	8002fa0 <_puts_r+0x88>
 8002fe8:	08004058 	.word	0x08004058
 8002fec:	08004078 	.word	0x08004078
 8002ff0:	08004038 	.word	0x08004038

08002ff4 <puts>:
 8002ff4:	4b02      	ldr	r3, [pc, #8]	; (8003000 <puts+0xc>)
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	f7ff bf8d 	b.w	8002f18 <_puts_r>
 8002ffe:	bf00      	nop
 8003000:	2000000c 	.word	0x2000000c

08003004 <__swbuf_r>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	460e      	mov	r6, r1
 8003008:	4614      	mov	r4, r2
 800300a:	4605      	mov	r5, r0
 800300c:	b118      	cbz	r0, 8003016 <__swbuf_r+0x12>
 800300e:	6983      	ldr	r3, [r0, #24]
 8003010:	b90b      	cbnz	r3, 8003016 <__swbuf_r+0x12>
 8003012:	f000 f9cd 	bl	80033b0 <__sinit>
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <__swbuf_r+0x98>)
 8003018:	429c      	cmp	r4, r3
 800301a:	d12b      	bne.n	8003074 <__swbuf_r+0x70>
 800301c:	686c      	ldr	r4, [r5, #4]
 800301e:	69a3      	ldr	r3, [r4, #24]
 8003020:	60a3      	str	r3, [r4, #8]
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	071a      	lsls	r2, r3, #28
 8003026:	d52f      	bpl.n	8003088 <__swbuf_r+0x84>
 8003028:	6923      	ldr	r3, [r4, #16]
 800302a:	b36b      	cbz	r3, 8003088 <__swbuf_r+0x84>
 800302c:	6923      	ldr	r3, [r4, #16]
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	b2f6      	uxtb	r6, r6
 8003032:	1ac0      	subs	r0, r0, r3
 8003034:	6963      	ldr	r3, [r4, #20]
 8003036:	4637      	mov	r7, r6
 8003038:	4283      	cmp	r3, r0
 800303a:	dc04      	bgt.n	8003046 <__swbuf_r+0x42>
 800303c:	4621      	mov	r1, r4
 800303e:	4628      	mov	r0, r5
 8003040:	f000 f922 	bl	8003288 <_fflush_r>
 8003044:	bb30      	cbnz	r0, 8003094 <__swbuf_r+0x90>
 8003046:	68a3      	ldr	r3, [r4, #8]
 8003048:	3001      	adds	r0, #1
 800304a:	3b01      	subs	r3, #1
 800304c:	60a3      	str	r3, [r4, #8]
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	6022      	str	r2, [r4, #0]
 8003054:	701e      	strb	r6, [r3, #0]
 8003056:	6963      	ldr	r3, [r4, #20]
 8003058:	4283      	cmp	r3, r0
 800305a:	d004      	beq.n	8003066 <__swbuf_r+0x62>
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	07db      	lsls	r3, r3, #31
 8003060:	d506      	bpl.n	8003070 <__swbuf_r+0x6c>
 8003062:	2e0a      	cmp	r6, #10
 8003064:	d104      	bne.n	8003070 <__swbuf_r+0x6c>
 8003066:	4621      	mov	r1, r4
 8003068:	4628      	mov	r0, r5
 800306a:	f000 f90d 	bl	8003288 <_fflush_r>
 800306e:	b988      	cbnz	r0, 8003094 <__swbuf_r+0x90>
 8003070:	4638      	mov	r0, r7
 8003072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <__swbuf_r+0x9c>)
 8003076:	429c      	cmp	r4, r3
 8003078:	d101      	bne.n	800307e <__swbuf_r+0x7a>
 800307a:	68ac      	ldr	r4, [r5, #8]
 800307c:	e7cf      	b.n	800301e <__swbuf_r+0x1a>
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <__swbuf_r+0xa0>)
 8003080:	429c      	cmp	r4, r3
 8003082:	bf08      	it	eq
 8003084:	68ec      	ldreq	r4, [r5, #12]
 8003086:	e7ca      	b.n	800301e <__swbuf_r+0x1a>
 8003088:	4621      	mov	r1, r4
 800308a:	4628      	mov	r0, r5
 800308c:	f000 f80c 	bl	80030a8 <__swsetup_r>
 8003090:	2800      	cmp	r0, #0
 8003092:	d0cb      	beq.n	800302c <__swbuf_r+0x28>
 8003094:	f04f 37ff 	mov.w	r7, #4294967295
 8003098:	e7ea      	b.n	8003070 <__swbuf_r+0x6c>
 800309a:	bf00      	nop
 800309c:	08004058 	.word	0x08004058
 80030a0:	08004078 	.word	0x08004078
 80030a4:	08004038 	.word	0x08004038

080030a8 <__swsetup_r>:
 80030a8:	4b32      	ldr	r3, [pc, #200]	; (8003174 <__swsetup_r+0xcc>)
 80030aa:	b570      	push	{r4, r5, r6, lr}
 80030ac:	681d      	ldr	r5, [r3, #0]
 80030ae:	4606      	mov	r6, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	b125      	cbz	r5, 80030be <__swsetup_r+0x16>
 80030b4:	69ab      	ldr	r3, [r5, #24]
 80030b6:	b913      	cbnz	r3, 80030be <__swsetup_r+0x16>
 80030b8:	4628      	mov	r0, r5
 80030ba:	f000 f979 	bl	80033b0 <__sinit>
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <__swsetup_r+0xd0>)
 80030c0:	429c      	cmp	r4, r3
 80030c2:	d10f      	bne.n	80030e4 <__swsetup_r+0x3c>
 80030c4:	686c      	ldr	r4, [r5, #4]
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030cc:	0719      	lsls	r1, r3, #28
 80030ce:	d42c      	bmi.n	800312a <__swsetup_r+0x82>
 80030d0:	06dd      	lsls	r5, r3, #27
 80030d2:	d411      	bmi.n	80030f8 <__swsetup_r+0x50>
 80030d4:	2309      	movs	r3, #9
 80030d6:	6033      	str	r3, [r6, #0]
 80030d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	81a3      	strh	r3, [r4, #12]
 80030e2:	e03e      	b.n	8003162 <__swsetup_r+0xba>
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <__swsetup_r+0xd4>)
 80030e6:	429c      	cmp	r4, r3
 80030e8:	d101      	bne.n	80030ee <__swsetup_r+0x46>
 80030ea:	68ac      	ldr	r4, [r5, #8]
 80030ec:	e7eb      	b.n	80030c6 <__swsetup_r+0x1e>
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <__swsetup_r+0xd8>)
 80030f0:	429c      	cmp	r4, r3
 80030f2:	bf08      	it	eq
 80030f4:	68ec      	ldreq	r4, [r5, #12]
 80030f6:	e7e6      	b.n	80030c6 <__swsetup_r+0x1e>
 80030f8:	0758      	lsls	r0, r3, #29
 80030fa:	d512      	bpl.n	8003122 <__swsetup_r+0x7a>
 80030fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030fe:	b141      	cbz	r1, 8003112 <__swsetup_r+0x6a>
 8003100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003104:	4299      	cmp	r1, r3
 8003106:	d002      	beq.n	800310e <__swsetup_r+0x66>
 8003108:	4630      	mov	r0, r6
 800310a:	f000 fa57 	bl	80035bc <_free_r>
 800310e:	2300      	movs	r3, #0
 8003110:	6363      	str	r3, [r4, #52]	; 0x34
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003118:	81a3      	strh	r3, [r4, #12]
 800311a:	2300      	movs	r3, #0
 800311c:	6063      	str	r3, [r4, #4]
 800311e:	6923      	ldr	r3, [r4, #16]
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	f043 0308 	orr.w	r3, r3, #8
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	b94b      	cbnz	r3, 8003142 <__swsetup_r+0x9a>
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003138:	d003      	beq.n	8003142 <__swsetup_r+0x9a>
 800313a:	4621      	mov	r1, r4
 800313c:	4630      	mov	r0, r6
 800313e:	f000 f9fd 	bl	800353c <__smakebuf_r>
 8003142:	89a0      	ldrh	r0, [r4, #12]
 8003144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003148:	f010 0301 	ands.w	r3, r0, #1
 800314c:	d00a      	beq.n	8003164 <__swsetup_r+0xbc>
 800314e:	2300      	movs	r3, #0
 8003150:	60a3      	str	r3, [r4, #8]
 8003152:	6963      	ldr	r3, [r4, #20]
 8003154:	425b      	negs	r3, r3
 8003156:	61a3      	str	r3, [r4, #24]
 8003158:	6923      	ldr	r3, [r4, #16]
 800315a:	b943      	cbnz	r3, 800316e <__swsetup_r+0xc6>
 800315c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003160:	d1ba      	bne.n	80030d8 <__swsetup_r+0x30>
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	0781      	lsls	r1, r0, #30
 8003166:	bf58      	it	pl
 8003168:	6963      	ldrpl	r3, [r4, #20]
 800316a:	60a3      	str	r3, [r4, #8]
 800316c:	e7f4      	b.n	8003158 <__swsetup_r+0xb0>
 800316e:	2000      	movs	r0, #0
 8003170:	e7f7      	b.n	8003162 <__swsetup_r+0xba>
 8003172:	bf00      	nop
 8003174:	2000000c 	.word	0x2000000c
 8003178:	08004058 	.word	0x08004058
 800317c:	08004078 	.word	0x08004078
 8003180:	08004038 	.word	0x08004038

08003184 <__sflush_r>:
 8003184:	898a      	ldrh	r2, [r1, #12]
 8003186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003188:	4605      	mov	r5, r0
 800318a:	0710      	lsls	r0, r2, #28
 800318c:	460c      	mov	r4, r1
 800318e:	d457      	bmi.n	8003240 <__sflush_r+0xbc>
 8003190:	684b      	ldr	r3, [r1, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	dc04      	bgt.n	80031a0 <__sflush_r+0x1c>
 8003196:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	dc01      	bgt.n	80031a0 <__sflush_r+0x1c>
 800319c:	2000      	movs	r0, #0
 800319e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031a2:	2e00      	cmp	r6, #0
 80031a4:	d0fa      	beq.n	800319c <__sflush_r+0x18>
 80031a6:	2300      	movs	r3, #0
 80031a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031ac:	682f      	ldr	r7, [r5, #0]
 80031ae:	602b      	str	r3, [r5, #0]
 80031b0:	d032      	beq.n	8003218 <__sflush_r+0x94>
 80031b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	075a      	lsls	r2, r3, #29
 80031b8:	d505      	bpl.n	80031c6 <__sflush_r+0x42>
 80031ba:	6863      	ldr	r3, [r4, #4]
 80031bc:	1ac0      	subs	r0, r0, r3
 80031be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031c0:	b10b      	cbz	r3, 80031c6 <__sflush_r+0x42>
 80031c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031c4:	1ac0      	subs	r0, r0, r3
 80031c6:	2300      	movs	r3, #0
 80031c8:	4602      	mov	r2, r0
 80031ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031cc:	4628      	mov	r0, r5
 80031ce:	6a21      	ldr	r1, [r4, #32]
 80031d0:	47b0      	blx	r6
 80031d2:	1c43      	adds	r3, r0, #1
 80031d4:	89a3      	ldrh	r3, [r4, #12]
 80031d6:	d106      	bne.n	80031e6 <__sflush_r+0x62>
 80031d8:	6829      	ldr	r1, [r5, #0]
 80031da:	291d      	cmp	r1, #29
 80031dc:	d82c      	bhi.n	8003238 <__sflush_r+0xb4>
 80031de:	4a29      	ldr	r2, [pc, #164]	; (8003284 <__sflush_r+0x100>)
 80031e0:	40ca      	lsrs	r2, r1
 80031e2:	07d6      	lsls	r6, r2, #31
 80031e4:	d528      	bpl.n	8003238 <__sflush_r+0xb4>
 80031e6:	2200      	movs	r2, #0
 80031e8:	6062      	str	r2, [r4, #4]
 80031ea:	6922      	ldr	r2, [r4, #16]
 80031ec:	04d9      	lsls	r1, r3, #19
 80031ee:	6022      	str	r2, [r4, #0]
 80031f0:	d504      	bpl.n	80031fc <__sflush_r+0x78>
 80031f2:	1c42      	adds	r2, r0, #1
 80031f4:	d101      	bne.n	80031fa <__sflush_r+0x76>
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	b903      	cbnz	r3, 80031fc <__sflush_r+0x78>
 80031fa:	6560      	str	r0, [r4, #84]	; 0x54
 80031fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031fe:	602f      	str	r7, [r5, #0]
 8003200:	2900      	cmp	r1, #0
 8003202:	d0cb      	beq.n	800319c <__sflush_r+0x18>
 8003204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003208:	4299      	cmp	r1, r3
 800320a:	d002      	beq.n	8003212 <__sflush_r+0x8e>
 800320c:	4628      	mov	r0, r5
 800320e:	f000 f9d5 	bl	80035bc <_free_r>
 8003212:	2000      	movs	r0, #0
 8003214:	6360      	str	r0, [r4, #52]	; 0x34
 8003216:	e7c2      	b.n	800319e <__sflush_r+0x1a>
 8003218:	6a21      	ldr	r1, [r4, #32]
 800321a:	2301      	movs	r3, #1
 800321c:	4628      	mov	r0, r5
 800321e:	47b0      	blx	r6
 8003220:	1c41      	adds	r1, r0, #1
 8003222:	d1c7      	bne.n	80031b4 <__sflush_r+0x30>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0c4      	beq.n	80031b4 <__sflush_r+0x30>
 800322a:	2b1d      	cmp	r3, #29
 800322c:	d001      	beq.n	8003232 <__sflush_r+0xae>
 800322e:	2b16      	cmp	r3, #22
 8003230:	d101      	bne.n	8003236 <__sflush_r+0xb2>
 8003232:	602f      	str	r7, [r5, #0]
 8003234:	e7b2      	b.n	800319c <__sflush_r+0x18>
 8003236:	89a3      	ldrh	r3, [r4, #12]
 8003238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	e7ae      	b.n	800319e <__sflush_r+0x1a>
 8003240:	690f      	ldr	r7, [r1, #16]
 8003242:	2f00      	cmp	r7, #0
 8003244:	d0aa      	beq.n	800319c <__sflush_r+0x18>
 8003246:	0793      	lsls	r3, r2, #30
 8003248:	bf18      	it	ne
 800324a:	2300      	movne	r3, #0
 800324c:	680e      	ldr	r6, [r1, #0]
 800324e:	bf08      	it	eq
 8003250:	694b      	ldreq	r3, [r1, #20]
 8003252:	1bf6      	subs	r6, r6, r7
 8003254:	600f      	str	r7, [r1, #0]
 8003256:	608b      	str	r3, [r1, #8]
 8003258:	2e00      	cmp	r6, #0
 800325a:	dd9f      	ble.n	800319c <__sflush_r+0x18>
 800325c:	4633      	mov	r3, r6
 800325e:	463a      	mov	r2, r7
 8003260:	4628      	mov	r0, r5
 8003262:	6a21      	ldr	r1, [r4, #32]
 8003264:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003268:	47e0      	blx	ip
 800326a:	2800      	cmp	r0, #0
 800326c:	dc06      	bgt.n	800327c <__sflush_r+0xf8>
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	e790      	b.n	800319e <__sflush_r+0x1a>
 800327c:	4407      	add	r7, r0
 800327e:	1a36      	subs	r6, r6, r0
 8003280:	e7ea      	b.n	8003258 <__sflush_r+0xd4>
 8003282:	bf00      	nop
 8003284:	20400001 	.word	0x20400001

08003288 <_fflush_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	690b      	ldr	r3, [r1, #16]
 800328c:	4605      	mov	r5, r0
 800328e:	460c      	mov	r4, r1
 8003290:	b913      	cbnz	r3, 8003298 <_fflush_r+0x10>
 8003292:	2500      	movs	r5, #0
 8003294:	4628      	mov	r0, r5
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	b118      	cbz	r0, 80032a2 <_fflush_r+0x1a>
 800329a:	6983      	ldr	r3, [r0, #24]
 800329c:	b90b      	cbnz	r3, 80032a2 <_fflush_r+0x1a>
 800329e:	f000 f887 	bl	80033b0 <__sinit>
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <_fflush_r+0x6c>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	d11b      	bne.n	80032e0 <_fflush_r+0x58>
 80032a8:	686c      	ldr	r4, [r5, #4]
 80032aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ef      	beq.n	8003292 <_fflush_r+0xa>
 80032b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032b4:	07d0      	lsls	r0, r2, #31
 80032b6:	d404      	bmi.n	80032c2 <_fflush_r+0x3a>
 80032b8:	0599      	lsls	r1, r3, #22
 80032ba:	d402      	bmi.n	80032c2 <_fflush_r+0x3a>
 80032bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032be:	f000 f915 	bl	80034ec <__retarget_lock_acquire_recursive>
 80032c2:	4628      	mov	r0, r5
 80032c4:	4621      	mov	r1, r4
 80032c6:	f7ff ff5d 	bl	8003184 <__sflush_r>
 80032ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032cc:	4605      	mov	r5, r0
 80032ce:	07da      	lsls	r2, r3, #31
 80032d0:	d4e0      	bmi.n	8003294 <_fflush_r+0xc>
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	059b      	lsls	r3, r3, #22
 80032d6:	d4dd      	bmi.n	8003294 <_fflush_r+0xc>
 80032d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032da:	f000 f908 	bl	80034ee <__retarget_lock_release_recursive>
 80032de:	e7d9      	b.n	8003294 <_fflush_r+0xc>
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <_fflush_r+0x70>)
 80032e2:	429c      	cmp	r4, r3
 80032e4:	d101      	bne.n	80032ea <_fflush_r+0x62>
 80032e6:	68ac      	ldr	r4, [r5, #8]
 80032e8:	e7df      	b.n	80032aa <_fflush_r+0x22>
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <_fflush_r+0x74>)
 80032ec:	429c      	cmp	r4, r3
 80032ee:	bf08      	it	eq
 80032f0:	68ec      	ldreq	r4, [r5, #12]
 80032f2:	e7da      	b.n	80032aa <_fflush_r+0x22>
 80032f4:	08004058 	.word	0x08004058
 80032f8:	08004078 	.word	0x08004078
 80032fc:	08004038 	.word	0x08004038

08003300 <std>:
 8003300:	2300      	movs	r3, #0
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	e9c0 3300 	strd	r3, r3, [r0]
 800330a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800330e:	6083      	str	r3, [r0, #8]
 8003310:	8181      	strh	r1, [r0, #12]
 8003312:	6643      	str	r3, [r0, #100]	; 0x64
 8003314:	81c2      	strh	r2, [r0, #14]
 8003316:	6183      	str	r3, [r0, #24]
 8003318:	4619      	mov	r1, r3
 800331a:	2208      	movs	r2, #8
 800331c:	305c      	adds	r0, #92	; 0x5c
 800331e:	f7ff fddb 	bl	8002ed8 <memset>
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <std+0x38>)
 8003324:	6224      	str	r4, [r4, #32]
 8003326:	6263      	str	r3, [r4, #36]	; 0x24
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <std+0x3c>)
 800332a:	62a3      	str	r3, [r4, #40]	; 0x28
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <std+0x40>)
 800332e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <std+0x44>)
 8003332:	6323      	str	r3, [r4, #48]	; 0x30
 8003334:	bd10      	pop	{r4, pc}
 8003336:	bf00      	nop
 8003338:	08003d71 	.word	0x08003d71
 800333c:	08003d93 	.word	0x08003d93
 8003340:	08003dcb 	.word	0x08003dcb
 8003344:	08003def 	.word	0x08003def

08003348 <_cleanup_r>:
 8003348:	4901      	ldr	r1, [pc, #4]	; (8003350 <_cleanup_r+0x8>)
 800334a:	f000 b8af 	b.w	80034ac <_fwalk_reent>
 800334e:	bf00      	nop
 8003350:	08003289 	.word	0x08003289

08003354 <__sfmoreglue>:
 8003354:	2268      	movs	r2, #104	; 0x68
 8003356:	b570      	push	{r4, r5, r6, lr}
 8003358:	1e4d      	subs	r5, r1, #1
 800335a:	4355      	muls	r5, r2
 800335c:	460e      	mov	r6, r1
 800335e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003362:	f000 f993 	bl	800368c <_malloc_r>
 8003366:	4604      	mov	r4, r0
 8003368:	b140      	cbz	r0, 800337c <__sfmoreglue+0x28>
 800336a:	2100      	movs	r1, #0
 800336c:	e9c0 1600 	strd	r1, r6, [r0]
 8003370:	300c      	adds	r0, #12
 8003372:	60a0      	str	r0, [r4, #8]
 8003374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003378:	f7ff fdae 	bl	8002ed8 <memset>
 800337c:	4620      	mov	r0, r4
 800337e:	bd70      	pop	{r4, r5, r6, pc}

08003380 <__sfp_lock_acquire>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__sfp_lock_acquire+0x8>)
 8003382:	f000 b8b3 	b.w	80034ec <__retarget_lock_acquire_recursive>
 8003386:	bf00      	nop
 8003388:	2000012d 	.word	0x2000012d

0800338c <__sfp_lock_release>:
 800338c:	4801      	ldr	r0, [pc, #4]	; (8003394 <__sfp_lock_release+0x8>)
 800338e:	f000 b8ae 	b.w	80034ee <__retarget_lock_release_recursive>
 8003392:	bf00      	nop
 8003394:	2000012d 	.word	0x2000012d

08003398 <__sinit_lock_acquire>:
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <__sinit_lock_acquire+0x8>)
 800339a:	f000 b8a7 	b.w	80034ec <__retarget_lock_acquire_recursive>
 800339e:	bf00      	nop
 80033a0:	2000012e 	.word	0x2000012e

080033a4 <__sinit_lock_release>:
 80033a4:	4801      	ldr	r0, [pc, #4]	; (80033ac <__sinit_lock_release+0x8>)
 80033a6:	f000 b8a2 	b.w	80034ee <__retarget_lock_release_recursive>
 80033aa:	bf00      	nop
 80033ac:	2000012e 	.word	0x2000012e

080033b0 <__sinit>:
 80033b0:	b510      	push	{r4, lr}
 80033b2:	4604      	mov	r4, r0
 80033b4:	f7ff fff0 	bl	8003398 <__sinit_lock_acquire>
 80033b8:	69a3      	ldr	r3, [r4, #24]
 80033ba:	b11b      	cbz	r3, 80033c4 <__sinit+0x14>
 80033bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c0:	f7ff bff0 	b.w	80033a4 <__sinit_lock_release>
 80033c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033c8:	6523      	str	r3, [r4, #80]	; 0x50
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <__sinit+0x68>)
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <__sinit+0x6c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80033d2:	42a3      	cmp	r3, r4
 80033d4:	bf08      	it	eq
 80033d6:	2301      	moveq	r3, #1
 80033d8:	4620      	mov	r0, r4
 80033da:	bf08      	it	eq
 80033dc:	61a3      	streq	r3, [r4, #24]
 80033de:	f000 f81f 	bl	8003420 <__sfp>
 80033e2:	6060      	str	r0, [r4, #4]
 80033e4:	4620      	mov	r0, r4
 80033e6:	f000 f81b 	bl	8003420 <__sfp>
 80033ea:	60a0      	str	r0, [r4, #8]
 80033ec:	4620      	mov	r0, r4
 80033ee:	f000 f817 	bl	8003420 <__sfp>
 80033f2:	2200      	movs	r2, #0
 80033f4:	2104      	movs	r1, #4
 80033f6:	60e0      	str	r0, [r4, #12]
 80033f8:	6860      	ldr	r0, [r4, #4]
 80033fa:	f7ff ff81 	bl	8003300 <std>
 80033fe:	2201      	movs	r2, #1
 8003400:	2109      	movs	r1, #9
 8003402:	68a0      	ldr	r0, [r4, #8]
 8003404:	f7ff ff7c 	bl	8003300 <std>
 8003408:	2202      	movs	r2, #2
 800340a:	2112      	movs	r1, #18
 800340c:	68e0      	ldr	r0, [r4, #12]
 800340e:	f7ff ff77 	bl	8003300 <std>
 8003412:	2301      	movs	r3, #1
 8003414:	61a3      	str	r3, [r4, #24]
 8003416:	e7d1      	b.n	80033bc <__sinit+0xc>
 8003418:	08004034 	.word	0x08004034
 800341c:	08003349 	.word	0x08003349

08003420 <__sfp>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	4607      	mov	r7, r0
 8003424:	f7ff ffac 	bl	8003380 <__sfp_lock_acquire>
 8003428:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <__sfp+0x84>)
 800342a:	681e      	ldr	r6, [r3, #0]
 800342c:	69b3      	ldr	r3, [r6, #24]
 800342e:	b913      	cbnz	r3, 8003436 <__sfp+0x16>
 8003430:	4630      	mov	r0, r6
 8003432:	f7ff ffbd 	bl	80033b0 <__sinit>
 8003436:	3648      	adds	r6, #72	; 0x48
 8003438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800343c:	3b01      	subs	r3, #1
 800343e:	d503      	bpl.n	8003448 <__sfp+0x28>
 8003440:	6833      	ldr	r3, [r6, #0]
 8003442:	b30b      	cbz	r3, 8003488 <__sfp+0x68>
 8003444:	6836      	ldr	r6, [r6, #0]
 8003446:	e7f7      	b.n	8003438 <__sfp+0x18>
 8003448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800344c:	b9d5      	cbnz	r5, 8003484 <__sfp+0x64>
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <__sfp+0x88>)
 8003450:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003454:	60e3      	str	r3, [r4, #12]
 8003456:	6665      	str	r5, [r4, #100]	; 0x64
 8003458:	f000 f847 	bl	80034ea <__retarget_lock_init_recursive>
 800345c:	f7ff ff96 	bl	800338c <__sfp_lock_release>
 8003460:	2208      	movs	r2, #8
 8003462:	4629      	mov	r1, r5
 8003464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800346c:	6025      	str	r5, [r4, #0]
 800346e:	61a5      	str	r5, [r4, #24]
 8003470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003474:	f7ff fd30 	bl	8002ed8 <memset>
 8003478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800347c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003480:	4620      	mov	r0, r4
 8003482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003484:	3468      	adds	r4, #104	; 0x68
 8003486:	e7d9      	b.n	800343c <__sfp+0x1c>
 8003488:	2104      	movs	r1, #4
 800348a:	4638      	mov	r0, r7
 800348c:	f7ff ff62 	bl	8003354 <__sfmoreglue>
 8003490:	4604      	mov	r4, r0
 8003492:	6030      	str	r0, [r6, #0]
 8003494:	2800      	cmp	r0, #0
 8003496:	d1d5      	bne.n	8003444 <__sfp+0x24>
 8003498:	f7ff ff78 	bl	800338c <__sfp_lock_release>
 800349c:	230c      	movs	r3, #12
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	e7ee      	b.n	8003480 <__sfp+0x60>
 80034a2:	bf00      	nop
 80034a4:	08004034 	.word	0x08004034
 80034a8:	ffff0001 	.word	0xffff0001

080034ac <_fwalk_reent>:
 80034ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034b0:	4606      	mov	r6, r0
 80034b2:	4688      	mov	r8, r1
 80034b4:	2700      	movs	r7, #0
 80034b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034be:	f1b9 0901 	subs.w	r9, r9, #1
 80034c2:	d505      	bpl.n	80034d0 <_fwalk_reent+0x24>
 80034c4:	6824      	ldr	r4, [r4, #0]
 80034c6:	2c00      	cmp	r4, #0
 80034c8:	d1f7      	bne.n	80034ba <_fwalk_reent+0xe>
 80034ca:	4638      	mov	r0, r7
 80034cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034d0:	89ab      	ldrh	r3, [r5, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d907      	bls.n	80034e6 <_fwalk_reent+0x3a>
 80034d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034da:	3301      	adds	r3, #1
 80034dc:	d003      	beq.n	80034e6 <_fwalk_reent+0x3a>
 80034de:	4629      	mov	r1, r5
 80034e0:	4630      	mov	r0, r6
 80034e2:	47c0      	blx	r8
 80034e4:	4307      	orrs	r7, r0
 80034e6:	3568      	adds	r5, #104	; 0x68
 80034e8:	e7e9      	b.n	80034be <_fwalk_reent+0x12>

080034ea <__retarget_lock_init_recursive>:
 80034ea:	4770      	bx	lr

080034ec <__retarget_lock_acquire_recursive>:
 80034ec:	4770      	bx	lr

080034ee <__retarget_lock_release_recursive>:
 80034ee:	4770      	bx	lr

080034f0 <__swhatbuf_r>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	460e      	mov	r6, r1
 80034f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f8:	4614      	mov	r4, r2
 80034fa:	2900      	cmp	r1, #0
 80034fc:	461d      	mov	r5, r3
 80034fe:	b096      	sub	sp, #88	; 0x58
 8003500:	da08      	bge.n	8003514 <__swhatbuf_r+0x24>
 8003502:	2200      	movs	r2, #0
 8003504:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003508:	602a      	str	r2, [r5, #0]
 800350a:	061a      	lsls	r2, r3, #24
 800350c:	d410      	bmi.n	8003530 <__swhatbuf_r+0x40>
 800350e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003512:	e00e      	b.n	8003532 <__swhatbuf_r+0x42>
 8003514:	466a      	mov	r2, sp
 8003516:	f000 fc91 	bl	8003e3c <_fstat_r>
 800351a:	2800      	cmp	r0, #0
 800351c:	dbf1      	blt.n	8003502 <__swhatbuf_r+0x12>
 800351e:	9a01      	ldr	r2, [sp, #4]
 8003520:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003524:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003528:	425a      	negs	r2, r3
 800352a:	415a      	adcs	r2, r3
 800352c:	602a      	str	r2, [r5, #0]
 800352e:	e7ee      	b.n	800350e <__swhatbuf_r+0x1e>
 8003530:	2340      	movs	r3, #64	; 0x40
 8003532:	2000      	movs	r0, #0
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	b016      	add	sp, #88	; 0x58
 8003538:	bd70      	pop	{r4, r5, r6, pc}
	...

0800353c <__smakebuf_r>:
 800353c:	898b      	ldrh	r3, [r1, #12]
 800353e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003540:	079d      	lsls	r5, r3, #30
 8003542:	4606      	mov	r6, r0
 8003544:	460c      	mov	r4, r1
 8003546:	d507      	bpl.n	8003558 <__smakebuf_r+0x1c>
 8003548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	6123      	str	r3, [r4, #16]
 8003550:	2301      	movs	r3, #1
 8003552:	6163      	str	r3, [r4, #20]
 8003554:	b002      	add	sp, #8
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	466a      	mov	r2, sp
 800355a:	ab01      	add	r3, sp, #4
 800355c:	f7ff ffc8 	bl	80034f0 <__swhatbuf_r>
 8003560:	9900      	ldr	r1, [sp, #0]
 8003562:	4605      	mov	r5, r0
 8003564:	4630      	mov	r0, r6
 8003566:	f000 f891 	bl	800368c <_malloc_r>
 800356a:	b948      	cbnz	r0, 8003580 <__smakebuf_r+0x44>
 800356c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003570:	059a      	lsls	r2, r3, #22
 8003572:	d4ef      	bmi.n	8003554 <__smakebuf_r+0x18>
 8003574:	f023 0303 	bic.w	r3, r3, #3
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	e7e3      	b.n	8003548 <__smakebuf_r+0xc>
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <__smakebuf_r+0x7c>)
 8003582:	62b3      	str	r3, [r6, #40]	; 0x28
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	6020      	str	r0, [r4, #0]
 8003588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	9b00      	ldr	r3, [sp, #0]
 8003590:	6120      	str	r0, [r4, #16]
 8003592:	6163      	str	r3, [r4, #20]
 8003594:	9b01      	ldr	r3, [sp, #4]
 8003596:	b15b      	cbz	r3, 80035b0 <__smakebuf_r+0x74>
 8003598:	4630      	mov	r0, r6
 800359a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800359e:	f000 fc5f 	bl	8003e60 <_isatty_r>
 80035a2:	b128      	cbz	r0, 80035b0 <__smakebuf_r+0x74>
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	81a3      	strh	r3, [r4, #12]
 80035b0:	89a0      	ldrh	r0, [r4, #12]
 80035b2:	4305      	orrs	r5, r0
 80035b4:	81a5      	strh	r5, [r4, #12]
 80035b6:	e7cd      	b.n	8003554 <__smakebuf_r+0x18>
 80035b8:	08003349 	.word	0x08003349

080035bc <_free_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	4605      	mov	r5, r0
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d040      	beq.n	8003646 <_free_r+0x8a>
 80035c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c8:	1f0c      	subs	r4, r1, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bfb8      	it	lt
 80035ce:	18e4      	addlt	r4, r4, r3
 80035d0:	f000 fc76 	bl	8003ec0 <__malloc_lock>
 80035d4:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <_free_r+0x8c>)
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	b933      	cbnz	r3, 80035e8 <_free_r+0x2c>
 80035da:	6063      	str	r3, [r4, #4]
 80035dc:	6014      	str	r4, [r2, #0]
 80035de:	4628      	mov	r0, r5
 80035e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035e4:	f000 bc72 	b.w	8003ecc <__malloc_unlock>
 80035e8:	42a3      	cmp	r3, r4
 80035ea:	d908      	bls.n	80035fe <_free_r+0x42>
 80035ec:	6820      	ldr	r0, [r4, #0]
 80035ee:	1821      	adds	r1, r4, r0
 80035f0:	428b      	cmp	r3, r1
 80035f2:	bf01      	itttt	eq
 80035f4:	6819      	ldreq	r1, [r3, #0]
 80035f6:	685b      	ldreq	r3, [r3, #4]
 80035f8:	1809      	addeq	r1, r1, r0
 80035fa:	6021      	streq	r1, [r4, #0]
 80035fc:	e7ed      	b.n	80035da <_free_r+0x1e>
 80035fe:	461a      	mov	r2, r3
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	b10b      	cbz	r3, 8003608 <_free_r+0x4c>
 8003604:	42a3      	cmp	r3, r4
 8003606:	d9fa      	bls.n	80035fe <_free_r+0x42>
 8003608:	6811      	ldr	r1, [r2, #0]
 800360a:	1850      	adds	r0, r2, r1
 800360c:	42a0      	cmp	r0, r4
 800360e:	d10b      	bne.n	8003628 <_free_r+0x6c>
 8003610:	6820      	ldr	r0, [r4, #0]
 8003612:	4401      	add	r1, r0
 8003614:	1850      	adds	r0, r2, r1
 8003616:	4283      	cmp	r3, r0
 8003618:	6011      	str	r1, [r2, #0]
 800361a:	d1e0      	bne.n	80035de <_free_r+0x22>
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4401      	add	r1, r0
 8003622:	6011      	str	r1, [r2, #0]
 8003624:	6053      	str	r3, [r2, #4]
 8003626:	e7da      	b.n	80035de <_free_r+0x22>
 8003628:	d902      	bls.n	8003630 <_free_r+0x74>
 800362a:	230c      	movs	r3, #12
 800362c:	602b      	str	r3, [r5, #0]
 800362e:	e7d6      	b.n	80035de <_free_r+0x22>
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	1821      	adds	r1, r4, r0
 8003634:	428b      	cmp	r3, r1
 8003636:	bf01      	itttt	eq
 8003638:	6819      	ldreq	r1, [r3, #0]
 800363a:	685b      	ldreq	r3, [r3, #4]
 800363c:	1809      	addeq	r1, r1, r0
 800363e:	6021      	streq	r1, [r4, #0]
 8003640:	6063      	str	r3, [r4, #4]
 8003642:	6054      	str	r4, [r2, #4]
 8003644:	e7cb      	b.n	80035de <_free_r+0x22>
 8003646:	bd38      	pop	{r3, r4, r5, pc}
 8003648:	20000130 	.word	0x20000130

0800364c <sbrk_aligned>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	4e0e      	ldr	r6, [pc, #56]	; (8003688 <sbrk_aligned+0x3c>)
 8003650:	460c      	mov	r4, r1
 8003652:	6831      	ldr	r1, [r6, #0]
 8003654:	4605      	mov	r5, r0
 8003656:	b911      	cbnz	r1, 800365e <sbrk_aligned+0x12>
 8003658:	f000 fb7a 	bl	8003d50 <_sbrk_r>
 800365c:	6030      	str	r0, [r6, #0]
 800365e:	4621      	mov	r1, r4
 8003660:	4628      	mov	r0, r5
 8003662:	f000 fb75 	bl	8003d50 <_sbrk_r>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	d00a      	beq.n	8003680 <sbrk_aligned+0x34>
 800366a:	1cc4      	adds	r4, r0, #3
 800366c:	f024 0403 	bic.w	r4, r4, #3
 8003670:	42a0      	cmp	r0, r4
 8003672:	d007      	beq.n	8003684 <sbrk_aligned+0x38>
 8003674:	1a21      	subs	r1, r4, r0
 8003676:	4628      	mov	r0, r5
 8003678:	f000 fb6a 	bl	8003d50 <_sbrk_r>
 800367c:	3001      	adds	r0, #1
 800367e:	d101      	bne.n	8003684 <sbrk_aligned+0x38>
 8003680:	f04f 34ff 	mov.w	r4, #4294967295
 8003684:	4620      	mov	r0, r4
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	20000134 	.word	0x20000134

0800368c <_malloc_r>:
 800368c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003690:	1ccd      	adds	r5, r1, #3
 8003692:	f025 0503 	bic.w	r5, r5, #3
 8003696:	3508      	adds	r5, #8
 8003698:	2d0c      	cmp	r5, #12
 800369a:	bf38      	it	cc
 800369c:	250c      	movcc	r5, #12
 800369e:	2d00      	cmp	r5, #0
 80036a0:	4607      	mov	r7, r0
 80036a2:	db01      	blt.n	80036a8 <_malloc_r+0x1c>
 80036a4:	42a9      	cmp	r1, r5
 80036a6:	d905      	bls.n	80036b4 <_malloc_r+0x28>
 80036a8:	230c      	movs	r3, #12
 80036aa:	2600      	movs	r6, #0
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4630      	mov	r0, r6
 80036b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b4:	4e2e      	ldr	r6, [pc, #184]	; (8003770 <_malloc_r+0xe4>)
 80036b6:	f000 fc03 	bl	8003ec0 <__malloc_lock>
 80036ba:	6833      	ldr	r3, [r6, #0]
 80036bc:	461c      	mov	r4, r3
 80036be:	bb34      	cbnz	r4, 800370e <_malloc_r+0x82>
 80036c0:	4629      	mov	r1, r5
 80036c2:	4638      	mov	r0, r7
 80036c4:	f7ff ffc2 	bl	800364c <sbrk_aligned>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	4604      	mov	r4, r0
 80036cc:	d14d      	bne.n	800376a <_malloc_r+0xde>
 80036ce:	6834      	ldr	r4, [r6, #0]
 80036d0:	4626      	mov	r6, r4
 80036d2:	2e00      	cmp	r6, #0
 80036d4:	d140      	bne.n	8003758 <_malloc_r+0xcc>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	4631      	mov	r1, r6
 80036da:	4638      	mov	r0, r7
 80036dc:	eb04 0803 	add.w	r8, r4, r3
 80036e0:	f000 fb36 	bl	8003d50 <_sbrk_r>
 80036e4:	4580      	cmp	r8, r0
 80036e6:	d13a      	bne.n	800375e <_malloc_r+0xd2>
 80036e8:	6821      	ldr	r1, [r4, #0]
 80036ea:	3503      	adds	r5, #3
 80036ec:	1a6d      	subs	r5, r5, r1
 80036ee:	f025 0503 	bic.w	r5, r5, #3
 80036f2:	3508      	adds	r5, #8
 80036f4:	2d0c      	cmp	r5, #12
 80036f6:	bf38      	it	cc
 80036f8:	250c      	movcc	r5, #12
 80036fa:	4638      	mov	r0, r7
 80036fc:	4629      	mov	r1, r5
 80036fe:	f7ff ffa5 	bl	800364c <sbrk_aligned>
 8003702:	3001      	adds	r0, #1
 8003704:	d02b      	beq.n	800375e <_malloc_r+0xd2>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	442b      	add	r3, r5
 800370a:	6023      	str	r3, [r4, #0]
 800370c:	e00e      	b.n	800372c <_malloc_r+0xa0>
 800370e:	6822      	ldr	r2, [r4, #0]
 8003710:	1b52      	subs	r2, r2, r5
 8003712:	d41e      	bmi.n	8003752 <_malloc_r+0xc6>
 8003714:	2a0b      	cmp	r2, #11
 8003716:	d916      	bls.n	8003746 <_malloc_r+0xba>
 8003718:	1961      	adds	r1, r4, r5
 800371a:	42a3      	cmp	r3, r4
 800371c:	6025      	str	r5, [r4, #0]
 800371e:	bf18      	it	ne
 8003720:	6059      	strne	r1, [r3, #4]
 8003722:	6863      	ldr	r3, [r4, #4]
 8003724:	bf08      	it	eq
 8003726:	6031      	streq	r1, [r6, #0]
 8003728:	5162      	str	r2, [r4, r5]
 800372a:	604b      	str	r3, [r1, #4]
 800372c:	4638      	mov	r0, r7
 800372e:	f104 060b 	add.w	r6, r4, #11
 8003732:	f000 fbcb 	bl	8003ecc <__malloc_unlock>
 8003736:	f026 0607 	bic.w	r6, r6, #7
 800373a:	1d23      	adds	r3, r4, #4
 800373c:	1af2      	subs	r2, r6, r3
 800373e:	d0b6      	beq.n	80036ae <_malloc_r+0x22>
 8003740:	1b9b      	subs	r3, r3, r6
 8003742:	50a3      	str	r3, [r4, r2]
 8003744:	e7b3      	b.n	80036ae <_malloc_r+0x22>
 8003746:	6862      	ldr	r2, [r4, #4]
 8003748:	42a3      	cmp	r3, r4
 800374a:	bf0c      	ite	eq
 800374c:	6032      	streq	r2, [r6, #0]
 800374e:	605a      	strne	r2, [r3, #4]
 8003750:	e7ec      	b.n	800372c <_malloc_r+0xa0>
 8003752:	4623      	mov	r3, r4
 8003754:	6864      	ldr	r4, [r4, #4]
 8003756:	e7b2      	b.n	80036be <_malloc_r+0x32>
 8003758:	4634      	mov	r4, r6
 800375a:	6876      	ldr	r6, [r6, #4]
 800375c:	e7b9      	b.n	80036d2 <_malloc_r+0x46>
 800375e:	230c      	movs	r3, #12
 8003760:	4638      	mov	r0, r7
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	f000 fbb2 	bl	8003ecc <__malloc_unlock>
 8003768:	e7a1      	b.n	80036ae <_malloc_r+0x22>
 800376a:	6025      	str	r5, [r4, #0]
 800376c:	e7de      	b.n	800372c <_malloc_r+0xa0>
 800376e:	bf00      	nop
 8003770:	20000130 	.word	0x20000130

08003774 <__sfputc_r>:
 8003774:	6893      	ldr	r3, [r2, #8]
 8003776:	b410      	push	{r4}
 8003778:	3b01      	subs	r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	6093      	str	r3, [r2, #8]
 800377e:	da07      	bge.n	8003790 <__sfputc_r+0x1c>
 8003780:	6994      	ldr	r4, [r2, #24]
 8003782:	42a3      	cmp	r3, r4
 8003784:	db01      	blt.n	800378a <__sfputc_r+0x16>
 8003786:	290a      	cmp	r1, #10
 8003788:	d102      	bne.n	8003790 <__sfputc_r+0x1c>
 800378a:	bc10      	pop	{r4}
 800378c:	f7ff bc3a 	b.w	8003004 <__swbuf_r>
 8003790:	6813      	ldr	r3, [r2, #0]
 8003792:	1c58      	adds	r0, r3, #1
 8003794:	6010      	str	r0, [r2, #0]
 8003796:	7019      	strb	r1, [r3, #0]
 8003798:	4608      	mov	r0, r1
 800379a:	bc10      	pop	{r4}
 800379c:	4770      	bx	lr

0800379e <__sfputs_r>:
 800379e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a0:	4606      	mov	r6, r0
 80037a2:	460f      	mov	r7, r1
 80037a4:	4614      	mov	r4, r2
 80037a6:	18d5      	adds	r5, r2, r3
 80037a8:	42ac      	cmp	r4, r5
 80037aa:	d101      	bne.n	80037b0 <__sfputs_r+0x12>
 80037ac:	2000      	movs	r0, #0
 80037ae:	e007      	b.n	80037c0 <__sfputs_r+0x22>
 80037b0:	463a      	mov	r2, r7
 80037b2:	4630      	mov	r0, r6
 80037b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b8:	f7ff ffdc 	bl	8003774 <__sfputc_r>
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	d1f3      	bne.n	80037a8 <__sfputs_r+0xa>
 80037c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037c4 <_vfiprintf_r>:
 80037c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	460d      	mov	r5, r1
 80037ca:	4614      	mov	r4, r2
 80037cc:	4698      	mov	r8, r3
 80037ce:	4606      	mov	r6, r0
 80037d0:	b09d      	sub	sp, #116	; 0x74
 80037d2:	b118      	cbz	r0, 80037dc <_vfiprintf_r+0x18>
 80037d4:	6983      	ldr	r3, [r0, #24]
 80037d6:	b90b      	cbnz	r3, 80037dc <_vfiprintf_r+0x18>
 80037d8:	f7ff fdea 	bl	80033b0 <__sinit>
 80037dc:	4b89      	ldr	r3, [pc, #548]	; (8003a04 <_vfiprintf_r+0x240>)
 80037de:	429d      	cmp	r5, r3
 80037e0:	d11b      	bne.n	800381a <_vfiprintf_r+0x56>
 80037e2:	6875      	ldr	r5, [r6, #4]
 80037e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037e6:	07d9      	lsls	r1, r3, #31
 80037e8:	d405      	bmi.n	80037f6 <_vfiprintf_r+0x32>
 80037ea:	89ab      	ldrh	r3, [r5, #12]
 80037ec:	059a      	lsls	r2, r3, #22
 80037ee:	d402      	bmi.n	80037f6 <_vfiprintf_r+0x32>
 80037f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037f2:	f7ff fe7b 	bl	80034ec <__retarget_lock_acquire_recursive>
 80037f6:	89ab      	ldrh	r3, [r5, #12]
 80037f8:	071b      	lsls	r3, r3, #28
 80037fa:	d501      	bpl.n	8003800 <_vfiprintf_r+0x3c>
 80037fc:	692b      	ldr	r3, [r5, #16]
 80037fe:	b9eb      	cbnz	r3, 800383c <_vfiprintf_r+0x78>
 8003800:	4629      	mov	r1, r5
 8003802:	4630      	mov	r0, r6
 8003804:	f7ff fc50 	bl	80030a8 <__swsetup_r>
 8003808:	b1c0      	cbz	r0, 800383c <_vfiprintf_r+0x78>
 800380a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800380c:	07dc      	lsls	r4, r3, #31
 800380e:	d50e      	bpl.n	800382e <_vfiprintf_r+0x6a>
 8003810:	f04f 30ff 	mov.w	r0, #4294967295
 8003814:	b01d      	add	sp, #116	; 0x74
 8003816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <_vfiprintf_r+0x244>)
 800381c:	429d      	cmp	r5, r3
 800381e:	d101      	bne.n	8003824 <_vfiprintf_r+0x60>
 8003820:	68b5      	ldr	r5, [r6, #8]
 8003822:	e7df      	b.n	80037e4 <_vfiprintf_r+0x20>
 8003824:	4b79      	ldr	r3, [pc, #484]	; (8003a0c <_vfiprintf_r+0x248>)
 8003826:	429d      	cmp	r5, r3
 8003828:	bf08      	it	eq
 800382a:	68f5      	ldreq	r5, [r6, #12]
 800382c:	e7da      	b.n	80037e4 <_vfiprintf_r+0x20>
 800382e:	89ab      	ldrh	r3, [r5, #12]
 8003830:	0598      	lsls	r0, r3, #22
 8003832:	d4ed      	bmi.n	8003810 <_vfiprintf_r+0x4c>
 8003834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003836:	f7ff fe5a 	bl	80034ee <__retarget_lock_release_recursive>
 800383a:	e7e9      	b.n	8003810 <_vfiprintf_r+0x4c>
 800383c:	2300      	movs	r3, #0
 800383e:	9309      	str	r3, [sp, #36]	; 0x24
 8003840:	2320      	movs	r3, #32
 8003842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003846:	2330      	movs	r3, #48	; 0x30
 8003848:	f04f 0901 	mov.w	r9, #1
 800384c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003850:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003a10 <_vfiprintf_r+0x24c>
 8003854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003858:	4623      	mov	r3, r4
 800385a:	469a      	mov	sl, r3
 800385c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003860:	b10a      	cbz	r2, 8003866 <_vfiprintf_r+0xa2>
 8003862:	2a25      	cmp	r2, #37	; 0x25
 8003864:	d1f9      	bne.n	800385a <_vfiprintf_r+0x96>
 8003866:	ebba 0b04 	subs.w	fp, sl, r4
 800386a:	d00b      	beq.n	8003884 <_vfiprintf_r+0xc0>
 800386c:	465b      	mov	r3, fp
 800386e:	4622      	mov	r2, r4
 8003870:	4629      	mov	r1, r5
 8003872:	4630      	mov	r0, r6
 8003874:	f7ff ff93 	bl	800379e <__sfputs_r>
 8003878:	3001      	adds	r0, #1
 800387a:	f000 80aa 	beq.w	80039d2 <_vfiprintf_r+0x20e>
 800387e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003880:	445a      	add	r2, fp
 8003882:	9209      	str	r2, [sp, #36]	; 0x24
 8003884:	f89a 3000 	ldrb.w	r3, [sl]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a2 	beq.w	80039d2 <_vfiprintf_r+0x20e>
 800388e:	2300      	movs	r3, #0
 8003890:	f04f 32ff 	mov.w	r2, #4294967295
 8003894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003898:	f10a 0a01 	add.w	sl, sl, #1
 800389c:	9304      	str	r3, [sp, #16]
 800389e:	9307      	str	r3, [sp, #28]
 80038a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038a4:	931a      	str	r3, [sp, #104]	; 0x68
 80038a6:	4654      	mov	r4, sl
 80038a8:	2205      	movs	r2, #5
 80038aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ae:	4858      	ldr	r0, [pc, #352]	; (8003a10 <_vfiprintf_r+0x24c>)
 80038b0:	f000 faf8 	bl	8003ea4 <memchr>
 80038b4:	9a04      	ldr	r2, [sp, #16]
 80038b6:	b9d8      	cbnz	r0, 80038f0 <_vfiprintf_r+0x12c>
 80038b8:	06d1      	lsls	r1, r2, #27
 80038ba:	bf44      	itt	mi
 80038bc:	2320      	movmi	r3, #32
 80038be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038c2:	0713      	lsls	r3, r2, #28
 80038c4:	bf44      	itt	mi
 80038c6:	232b      	movmi	r3, #43	; 0x2b
 80038c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038cc:	f89a 3000 	ldrb.w	r3, [sl]
 80038d0:	2b2a      	cmp	r3, #42	; 0x2a
 80038d2:	d015      	beq.n	8003900 <_vfiprintf_r+0x13c>
 80038d4:	4654      	mov	r4, sl
 80038d6:	2000      	movs	r0, #0
 80038d8:	f04f 0c0a 	mov.w	ip, #10
 80038dc:	9a07      	ldr	r2, [sp, #28]
 80038de:	4621      	mov	r1, r4
 80038e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038e4:	3b30      	subs	r3, #48	; 0x30
 80038e6:	2b09      	cmp	r3, #9
 80038e8:	d94e      	bls.n	8003988 <_vfiprintf_r+0x1c4>
 80038ea:	b1b0      	cbz	r0, 800391a <_vfiprintf_r+0x156>
 80038ec:	9207      	str	r2, [sp, #28]
 80038ee:	e014      	b.n	800391a <_vfiprintf_r+0x156>
 80038f0:	eba0 0308 	sub.w	r3, r0, r8
 80038f4:	fa09 f303 	lsl.w	r3, r9, r3
 80038f8:	4313      	orrs	r3, r2
 80038fa:	46a2      	mov	sl, r4
 80038fc:	9304      	str	r3, [sp, #16]
 80038fe:	e7d2      	b.n	80038a6 <_vfiprintf_r+0xe2>
 8003900:	9b03      	ldr	r3, [sp, #12]
 8003902:	1d19      	adds	r1, r3, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	9103      	str	r1, [sp, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	bfbb      	ittet	lt
 800390c:	425b      	neglt	r3, r3
 800390e:	f042 0202 	orrlt.w	r2, r2, #2
 8003912:	9307      	strge	r3, [sp, #28]
 8003914:	9307      	strlt	r3, [sp, #28]
 8003916:	bfb8      	it	lt
 8003918:	9204      	strlt	r2, [sp, #16]
 800391a:	7823      	ldrb	r3, [r4, #0]
 800391c:	2b2e      	cmp	r3, #46	; 0x2e
 800391e:	d10c      	bne.n	800393a <_vfiprintf_r+0x176>
 8003920:	7863      	ldrb	r3, [r4, #1]
 8003922:	2b2a      	cmp	r3, #42	; 0x2a
 8003924:	d135      	bne.n	8003992 <_vfiprintf_r+0x1ce>
 8003926:	9b03      	ldr	r3, [sp, #12]
 8003928:	3402      	adds	r4, #2
 800392a:	1d1a      	adds	r2, r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	9203      	str	r2, [sp, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	bfb8      	it	lt
 8003934:	f04f 33ff 	movlt.w	r3, #4294967295
 8003938:	9305      	str	r3, [sp, #20]
 800393a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003a14 <_vfiprintf_r+0x250>
 800393e:	2203      	movs	r2, #3
 8003940:	4650      	mov	r0, sl
 8003942:	7821      	ldrb	r1, [r4, #0]
 8003944:	f000 faae 	bl	8003ea4 <memchr>
 8003948:	b140      	cbz	r0, 800395c <_vfiprintf_r+0x198>
 800394a:	2340      	movs	r3, #64	; 0x40
 800394c:	eba0 000a 	sub.w	r0, r0, sl
 8003950:	fa03 f000 	lsl.w	r0, r3, r0
 8003954:	9b04      	ldr	r3, [sp, #16]
 8003956:	3401      	adds	r4, #1
 8003958:	4303      	orrs	r3, r0
 800395a:	9304      	str	r3, [sp, #16]
 800395c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003960:	2206      	movs	r2, #6
 8003962:	482d      	ldr	r0, [pc, #180]	; (8003a18 <_vfiprintf_r+0x254>)
 8003964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003968:	f000 fa9c 	bl	8003ea4 <memchr>
 800396c:	2800      	cmp	r0, #0
 800396e:	d03f      	beq.n	80039f0 <_vfiprintf_r+0x22c>
 8003970:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <_vfiprintf_r+0x258>)
 8003972:	bb1b      	cbnz	r3, 80039bc <_vfiprintf_r+0x1f8>
 8003974:	9b03      	ldr	r3, [sp, #12]
 8003976:	3307      	adds	r3, #7
 8003978:	f023 0307 	bic.w	r3, r3, #7
 800397c:	3308      	adds	r3, #8
 800397e:	9303      	str	r3, [sp, #12]
 8003980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003982:	443b      	add	r3, r7
 8003984:	9309      	str	r3, [sp, #36]	; 0x24
 8003986:	e767      	b.n	8003858 <_vfiprintf_r+0x94>
 8003988:	460c      	mov	r4, r1
 800398a:	2001      	movs	r0, #1
 800398c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003990:	e7a5      	b.n	80038de <_vfiprintf_r+0x11a>
 8003992:	2300      	movs	r3, #0
 8003994:	f04f 0c0a 	mov.w	ip, #10
 8003998:	4619      	mov	r1, r3
 800399a:	3401      	adds	r4, #1
 800399c:	9305      	str	r3, [sp, #20]
 800399e:	4620      	mov	r0, r4
 80039a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039a4:	3a30      	subs	r2, #48	; 0x30
 80039a6:	2a09      	cmp	r2, #9
 80039a8:	d903      	bls.n	80039b2 <_vfiprintf_r+0x1ee>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0c5      	beq.n	800393a <_vfiprintf_r+0x176>
 80039ae:	9105      	str	r1, [sp, #20]
 80039b0:	e7c3      	b.n	800393a <_vfiprintf_r+0x176>
 80039b2:	4604      	mov	r4, r0
 80039b4:	2301      	movs	r3, #1
 80039b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80039ba:	e7f0      	b.n	800399e <_vfiprintf_r+0x1da>
 80039bc:	ab03      	add	r3, sp, #12
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	462a      	mov	r2, r5
 80039c2:	4630      	mov	r0, r6
 80039c4:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <_vfiprintf_r+0x25c>)
 80039c6:	a904      	add	r1, sp, #16
 80039c8:	f3af 8000 	nop.w
 80039cc:	4607      	mov	r7, r0
 80039ce:	1c78      	adds	r0, r7, #1
 80039d0:	d1d6      	bne.n	8003980 <_vfiprintf_r+0x1bc>
 80039d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039d4:	07d9      	lsls	r1, r3, #31
 80039d6:	d405      	bmi.n	80039e4 <_vfiprintf_r+0x220>
 80039d8:	89ab      	ldrh	r3, [r5, #12]
 80039da:	059a      	lsls	r2, r3, #22
 80039dc:	d402      	bmi.n	80039e4 <_vfiprintf_r+0x220>
 80039de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039e0:	f7ff fd85 	bl	80034ee <__retarget_lock_release_recursive>
 80039e4:	89ab      	ldrh	r3, [r5, #12]
 80039e6:	065b      	lsls	r3, r3, #25
 80039e8:	f53f af12 	bmi.w	8003810 <_vfiprintf_r+0x4c>
 80039ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039ee:	e711      	b.n	8003814 <_vfiprintf_r+0x50>
 80039f0:	ab03      	add	r3, sp, #12
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	462a      	mov	r2, r5
 80039f6:	4630      	mov	r0, r6
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <_vfiprintf_r+0x25c>)
 80039fa:	a904      	add	r1, sp, #16
 80039fc:	f000 f882 	bl	8003b04 <_printf_i>
 8003a00:	e7e4      	b.n	80039cc <_vfiprintf_r+0x208>
 8003a02:	bf00      	nop
 8003a04:	08004058 	.word	0x08004058
 8003a08:	08004078 	.word	0x08004078
 8003a0c:	08004038 	.word	0x08004038
 8003a10:	08004098 	.word	0x08004098
 8003a14:	0800409e 	.word	0x0800409e
 8003a18:	080040a2 	.word	0x080040a2
 8003a1c:	00000000 	.word	0x00000000
 8003a20:	0800379f 	.word	0x0800379f

08003a24 <_printf_common>:
 8003a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a28:	4616      	mov	r6, r2
 8003a2a:	4699      	mov	r9, r3
 8003a2c:	688a      	ldr	r2, [r1, #8]
 8003a2e:	690b      	ldr	r3, [r1, #16]
 8003a30:	4607      	mov	r7, r0
 8003a32:	4293      	cmp	r3, r2
 8003a34:	bfb8      	it	lt
 8003a36:	4613      	movlt	r3, r2
 8003a38:	6033      	str	r3, [r6, #0]
 8003a3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a3e:	460c      	mov	r4, r1
 8003a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a44:	b10a      	cbz	r2, 8003a4a <_printf_common+0x26>
 8003a46:	3301      	adds	r3, #1
 8003a48:	6033      	str	r3, [r6, #0]
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	0699      	lsls	r1, r3, #26
 8003a4e:	bf42      	ittt	mi
 8003a50:	6833      	ldrmi	r3, [r6, #0]
 8003a52:	3302      	addmi	r3, #2
 8003a54:	6033      	strmi	r3, [r6, #0]
 8003a56:	6825      	ldr	r5, [r4, #0]
 8003a58:	f015 0506 	ands.w	r5, r5, #6
 8003a5c:	d106      	bne.n	8003a6c <_printf_common+0x48>
 8003a5e:	f104 0a19 	add.w	sl, r4, #25
 8003a62:	68e3      	ldr	r3, [r4, #12]
 8003a64:	6832      	ldr	r2, [r6, #0]
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	42ab      	cmp	r3, r5
 8003a6a:	dc28      	bgt.n	8003abe <_printf_common+0x9a>
 8003a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a70:	1e13      	subs	r3, r2, #0
 8003a72:	6822      	ldr	r2, [r4, #0]
 8003a74:	bf18      	it	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	0692      	lsls	r2, r2, #26
 8003a7a:	d42d      	bmi.n	8003ad8 <_printf_common+0xb4>
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	4638      	mov	r0, r7
 8003a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a84:	47c0      	blx	r8
 8003a86:	3001      	adds	r0, #1
 8003a88:	d020      	beq.n	8003acc <_printf_common+0xa8>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	68e5      	ldr	r5, [r4, #12]
 8003a8e:	f003 0306 	and.w	r3, r3, #6
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	bf18      	it	ne
 8003a96:	2500      	movne	r5, #0
 8003a98:	6832      	ldr	r2, [r6, #0]
 8003a9a:	f04f 0600 	mov.w	r6, #0
 8003a9e:	68a3      	ldr	r3, [r4, #8]
 8003aa0:	bf08      	it	eq
 8003aa2:	1aad      	subeq	r5, r5, r2
 8003aa4:	6922      	ldr	r2, [r4, #16]
 8003aa6:	bf08      	it	eq
 8003aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003aac:	4293      	cmp	r3, r2
 8003aae:	bfc4      	itt	gt
 8003ab0:	1a9b      	subgt	r3, r3, r2
 8003ab2:	18ed      	addgt	r5, r5, r3
 8003ab4:	341a      	adds	r4, #26
 8003ab6:	42b5      	cmp	r5, r6
 8003ab8:	d11a      	bne.n	8003af0 <_printf_common+0xcc>
 8003aba:	2000      	movs	r0, #0
 8003abc:	e008      	b.n	8003ad0 <_printf_common+0xac>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4652      	mov	r2, sl
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	4638      	mov	r0, r7
 8003ac6:	47c0      	blx	r8
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d103      	bne.n	8003ad4 <_printf_common+0xb0>
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	e7c4      	b.n	8003a62 <_printf_common+0x3e>
 8003ad8:	2030      	movs	r0, #48	; 0x30
 8003ada:	18e1      	adds	r1, r4, r3
 8003adc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ae6:	4422      	add	r2, r4
 8003ae8:	3302      	adds	r3, #2
 8003aea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003aee:	e7c5      	b.n	8003a7c <_printf_common+0x58>
 8003af0:	2301      	movs	r3, #1
 8003af2:	4622      	mov	r2, r4
 8003af4:	4649      	mov	r1, r9
 8003af6:	4638      	mov	r0, r7
 8003af8:	47c0      	blx	r8
 8003afa:	3001      	adds	r0, #1
 8003afc:	d0e6      	beq.n	8003acc <_printf_common+0xa8>
 8003afe:	3601      	adds	r6, #1
 8003b00:	e7d9      	b.n	8003ab6 <_printf_common+0x92>
	...

08003b04 <_printf_i>:
 8003b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b08:	7e0f      	ldrb	r7, [r1, #24]
 8003b0a:	4691      	mov	r9, r2
 8003b0c:	2f78      	cmp	r7, #120	; 0x78
 8003b0e:	4680      	mov	r8, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	469a      	mov	sl, r3
 8003b14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b1a:	d807      	bhi.n	8003b2c <_printf_i+0x28>
 8003b1c:	2f62      	cmp	r7, #98	; 0x62
 8003b1e:	d80a      	bhi.n	8003b36 <_printf_i+0x32>
 8003b20:	2f00      	cmp	r7, #0
 8003b22:	f000 80d9 	beq.w	8003cd8 <_printf_i+0x1d4>
 8003b26:	2f58      	cmp	r7, #88	; 0x58
 8003b28:	f000 80a4 	beq.w	8003c74 <_printf_i+0x170>
 8003b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b34:	e03a      	b.n	8003bac <_printf_i+0xa8>
 8003b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b3a:	2b15      	cmp	r3, #21
 8003b3c:	d8f6      	bhi.n	8003b2c <_printf_i+0x28>
 8003b3e:	a101      	add	r1, pc, #4	; (adr r1, 8003b44 <_printf_i+0x40>)
 8003b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b44:	08003b9d 	.word	0x08003b9d
 8003b48:	08003bb1 	.word	0x08003bb1
 8003b4c:	08003b2d 	.word	0x08003b2d
 8003b50:	08003b2d 	.word	0x08003b2d
 8003b54:	08003b2d 	.word	0x08003b2d
 8003b58:	08003b2d 	.word	0x08003b2d
 8003b5c:	08003bb1 	.word	0x08003bb1
 8003b60:	08003b2d 	.word	0x08003b2d
 8003b64:	08003b2d 	.word	0x08003b2d
 8003b68:	08003b2d 	.word	0x08003b2d
 8003b6c:	08003b2d 	.word	0x08003b2d
 8003b70:	08003cbf 	.word	0x08003cbf
 8003b74:	08003be1 	.word	0x08003be1
 8003b78:	08003ca1 	.word	0x08003ca1
 8003b7c:	08003b2d 	.word	0x08003b2d
 8003b80:	08003b2d 	.word	0x08003b2d
 8003b84:	08003ce1 	.word	0x08003ce1
 8003b88:	08003b2d 	.word	0x08003b2d
 8003b8c:	08003be1 	.word	0x08003be1
 8003b90:	08003b2d 	.word	0x08003b2d
 8003b94:	08003b2d 	.word	0x08003b2d
 8003b98:	08003ca9 	.word	0x08003ca9
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	1d1a      	adds	r2, r3, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	602a      	str	r2, [r5, #0]
 8003ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0a4      	b.n	8003cfa <_printf_i+0x1f6>
 8003bb0:	6820      	ldr	r0, [r4, #0]
 8003bb2:	6829      	ldr	r1, [r5, #0]
 8003bb4:	0606      	lsls	r6, r0, #24
 8003bb6:	f101 0304 	add.w	r3, r1, #4
 8003bba:	d50a      	bpl.n	8003bd2 <_printf_i+0xce>
 8003bbc:	680e      	ldr	r6, [r1, #0]
 8003bbe:	602b      	str	r3, [r5, #0]
 8003bc0:	2e00      	cmp	r6, #0
 8003bc2:	da03      	bge.n	8003bcc <_printf_i+0xc8>
 8003bc4:	232d      	movs	r3, #45	; 0x2d
 8003bc6:	4276      	negs	r6, r6
 8003bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bcc:	230a      	movs	r3, #10
 8003bce:	485e      	ldr	r0, [pc, #376]	; (8003d48 <_printf_i+0x244>)
 8003bd0:	e019      	b.n	8003c06 <_printf_i+0x102>
 8003bd2:	680e      	ldr	r6, [r1, #0]
 8003bd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	bf18      	it	ne
 8003bdc:	b236      	sxthne	r6, r6
 8003bde:	e7ef      	b.n	8003bc0 <_printf_i+0xbc>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	6820      	ldr	r0, [r4, #0]
 8003be4:	1d19      	adds	r1, r3, #4
 8003be6:	6029      	str	r1, [r5, #0]
 8003be8:	0601      	lsls	r1, r0, #24
 8003bea:	d501      	bpl.n	8003bf0 <_printf_i+0xec>
 8003bec:	681e      	ldr	r6, [r3, #0]
 8003bee:	e002      	b.n	8003bf6 <_printf_i+0xf2>
 8003bf0:	0646      	lsls	r6, r0, #25
 8003bf2:	d5fb      	bpl.n	8003bec <_printf_i+0xe8>
 8003bf4:	881e      	ldrh	r6, [r3, #0]
 8003bf6:	2f6f      	cmp	r7, #111	; 0x6f
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2308      	moveq	r3, #8
 8003bfc:	230a      	movne	r3, #10
 8003bfe:	4852      	ldr	r0, [pc, #328]	; (8003d48 <_printf_i+0x244>)
 8003c00:	2100      	movs	r1, #0
 8003c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c06:	6865      	ldr	r5, [r4, #4]
 8003c08:	2d00      	cmp	r5, #0
 8003c0a:	bfa8      	it	ge
 8003c0c:	6821      	ldrge	r1, [r4, #0]
 8003c0e:	60a5      	str	r5, [r4, #8]
 8003c10:	bfa4      	itt	ge
 8003c12:	f021 0104 	bicge.w	r1, r1, #4
 8003c16:	6021      	strge	r1, [r4, #0]
 8003c18:	b90e      	cbnz	r6, 8003c1e <_printf_i+0x11a>
 8003c1a:	2d00      	cmp	r5, #0
 8003c1c:	d04d      	beq.n	8003cba <_printf_i+0x1b6>
 8003c1e:	4615      	mov	r5, r2
 8003c20:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c24:	fb03 6711 	mls	r7, r3, r1, r6
 8003c28:	5dc7      	ldrb	r7, [r0, r7]
 8003c2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c2e:	4637      	mov	r7, r6
 8003c30:	42bb      	cmp	r3, r7
 8003c32:	460e      	mov	r6, r1
 8003c34:	d9f4      	bls.n	8003c20 <_printf_i+0x11c>
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d10b      	bne.n	8003c52 <_printf_i+0x14e>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	07de      	lsls	r6, r3, #31
 8003c3e:	d508      	bpl.n	8003c52 <_printf_i+0x14e>
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	6861      	ldr	r1, [r4, #4]
 8003c44:	4299      	cmp	r1, r3
 8003c46:	bfde      	ittt	le
 8003c48:	2330      	movle	r3, #48	; 0x30
 8003c4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c52:	1b52      	subs	r2, r2, r5
 8003c54:	6122      	str	r2, [r4, #16]
 8003c56:	464b      	mov	r3, r9
 8003c58:	4621      	mov	r1, r4
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	f8cd a000 	str.w	sl, [sp]
 8003c60:	aa03      	add	r2, sp, #12
 8003c62:	f7ff fedf 	bl	8003a24 <_printf_common>
 8003c66:	3001      	adds	r0, #1
 8003c68:	d14c      	bne.n	8003d04 <_printf_i+0x200>
 8003c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6e:	b004      	add	sp, #16
 8003c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c74:	4834      	ldr	r0, [pc, #208]	; (8003d48 <_printf_i+0x244>)
 8003c76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c7a:	6829      	ldr	r1, [r5, #0]
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c82:	6029      	str	r1, [r5, #0]
 8003c84:	061d      	lsls	r5, r3, #24
 8003c86:	d514      	bpl.n	8003cb2 <_printf_i+0x1ae>
 8003c88:	07df      	lsls	r7, r3, #31
 8003c8a:	bf44      	itt	mi
 8003c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8003c90:	6023      	strmi	r3, [r4, #0]
 8003c92:	b91e      	cbnz	r6, 8003c9c <_printf_i+0x198>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	f023 0320 	bic.w	r3, r3, #32
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	e7af      	b.n	8003c00 <_printf_i+0xfc>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	f043 0320 	orr.w	r3, r3, #32
 8003ca6:	6023      	str	r3, [r4, #0]
 8003ca8:	2378      	movs	r3, #120	; 0x78
 8003caa:	4828      	ldr	r0, [pc, #160]	; (8003d4c <_printf_i+0x248>)
 8003cac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cb0:	e7e3      	b.n	8003c7a <_printf_i+0x176>
 8003cb2:	0659      	lsls	r1, r3, #25
 8003cb4:	bf48      	it	mi
 8003cb6:	b2b6      	uxthmi	r6, r6
 8003cb8:	e7e6      	b.n	8003c88 <_printf_i+0x184>
 8003cba:	4615      	mov	r5, r2
 8003cbc:	e7bb      	b.n	8003c36 <_printf_i+0x132>
 8003cbe:	682b      	ldr	r3, [r5, #0]
 8003cc0:	6826      	ldr	r6, [r4, #0]
 8003cc2:	1d18      	adds	r0, r3, #4
 8003cc4:	6961      	ldr	r1, [r4, #20]
 8003cc6:	6028      	str	r0, [r5, #0]
 8003cc8:	0635      	lsls	r5, r6, #24
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	d501      	bpl.n	8003cd2 <_printf_i+0x1ce>
 8003cce:	6019      	str	r1, [r3, #0]
 8003cd0:	e002      	b.n	8003cd8 <_printf_i+0x1d4>
 8003cd2:	0670      	lsls	r0, r6, #25
 8003cd4:	d5fb      	bpl.n	8003cce <_printf_i+0x1ca>
 8003cd6:	8019      	strh	r1, [r3, #0]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4615      	mov	r5, r2
 8003cdc:	6123      	str	r3, [r4, #16]
 8003cde:	e7ba      	b.n	8003c56 <_printf_i+0x152>
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	1d1a      	adds	r2, r3, #4
 8003ce6:	602a      	str	r2, [r5, #0]
 8003ce8:	681d      	ldr	r5, [r3, #0]
 8003cea:	6862      	ldr	r2, [r4, #4]
 8003cec:	4628      	mov	r0, r5
 8003cee:	f000 f8d9 	bl	8003ea4 <memchr>
 8003cf2:	b108      	cbz	r0, 8003cf8 <_printf_i+0x1f4>
 8003cf4:	1b40      	subs	r0, r0, r5
 8003cf6:	6060      	str	r0, [r4, #4]
 8003cf8:	6863      	ldr	r3, [r4, #4]
 8003cfa:	6123      	str	r3, [r4, #16]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d02:	e7a8      	b.n	8003c56 <_printf_i+0x152>
 8003d04:	462a      	mov	r2, r5
 8003d06:	4649      	mov	r1, r9
 8003d08:	4640      	mov	r0, r8
 8003d0a:	6923      	ldr	r3, [r4, #16]
 8003d0c:	47d0      	blx	sl
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d0ab      	beq.n	8003c6a <_printf_i+0x166>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	079b      	lsls	r3, r3, #30
 8003d16:	d413      	bmi.n	8003d40 <_printf_i+0x23c>
 8003d18:	68e0      	ldr	r0, [r4, #12]
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	4298      	cmp	r0, r3
 8003d1e:	bfb8      	it	lt
 8003d20:	4618      	movlt	r0, r3
 8003d22:	e7a4      	b.n	8003c6e <_printf_i+0x16a>
 8003d24:	2301      	movs	r3, #1
 8003d26:	4632      	mov	r2, r6
 8003d28:	4649      	mov	r1, r9
 8003d2a:	4640      	mov	r0, r8
 8003d2c:	47d0      	blx	sl
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d09b      	beq.n	8003c6a <_printf_i+0x166>
 8003d32:	3501      	adds	r5, #1
 8003d34:	68e3      	ldr	r3, [r4, #12]
 8003d36:	9903      	ldr	r1, [sp, #12]
 8003d38:	1a5b      	subs	r3, r3, r1
 8003d3a:	42ab      	cmp	r3, r5
 8003d3c:	dcf2      	bgt.n	8003d24 <_printf_i+0x220>
 8003d3e:	e7eb      	b.n	8003d18 <_printf_i+0x214>
 8003d40:	2500      	movs	r5, #0
 8003d42:	f104 0619 	add.w	r6, r4, #25
 8003d46:	e7f5      	b.n	8003d34 <_printf_i+0x230>
 8003d48:	080040a9 	.word	0x080040a9
 8003d4c:	080040ba 	.word	0x080040ba

08003d50 <_sbrk_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	2300      	movs	r3, #0
 8003d54:	4d05      	ldr	r5, [pc, #20]	; (8003d6c <_sbrk_r+0x1c>)
 8003d56:	4604      	mov	r4, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	f7fe ffdc 	bl	8002d18 <_sbrk>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_sbrk_r+0x1a>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_sbrk_r+0x1a>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	20000138 	.word	0x20000138

08003d70 <__sread>:
 8003d70:	b510      	push	{r4, lr}
 8003d72:	460c      	mov	r4, r1
 8003d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d78:	f000 f8ae 	bl	8003ed8 <_read_r>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	bfab      	itete	ge
 8003d80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d82:	89a3      	ldrhlt	r3, [r4, #12]
 8003d84:	181b      	addge	r3, r3, r0
 8003d86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d8a:	bfac      	ite	ge
 8003d8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d8e:	81a3      	strhlt	r3, [r4, #12]
 8003d90:	bd10      	pop	{r4, pc}

08003d92 <__swrite>:
 8003d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d96:	461f      	mov	r7, r3
 8003d98:	898b      	ldrh	r3, [r1, #12]
 8003d9a:	4605      	mov	r5, r0
 8003d9c:	05db      	lsls	r3, r3, #23
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4616      	mov	r6, r2
 8003da2:	d505      	bpl.n	8003db0 <__swrite+0x1e>
 8003da4:	2302      	movs	r3, #2
 8003da6:	2200      	movs	r2, #0
 8003da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dac:	f000 f868 	bl	8003e80 <_lseek_r>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	4632      	mov	r2, r6
 8003db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db8:	81a3      	strh	r3, [r4, #12]
 8003dba:	4628      	mov	r0, r5
 8003dbc:	463b      	mov	r3, r7
 8003dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc6:	f000 b817 	b.w	8003df8 <_write_r>

08003dca <__sseek>:
 8003dca:	b510      	push	{r4, lr}
 8003dcc:	460c      	mov	r4, r1
 8003dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd2:	f000 f855 	bl	8003e80 <_lseek_r>
 8003dd6:	1c43      	adds	r3, r0, #1
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	bf15      	itete	ne
 8003ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003de6:	81a3      	strheq	r3, [r4, #12]
 8003de8:	bf18      	it	ne
 8003dea:	81a3      	strhne	r3, [r4, #12]
 8003dec:	bd10      	pop	{r4, pc}

08003dee <__sclose>:
 8003dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df2:	f000 b813 	b.w	8003e1c <_close_r>
	...

08003df8 <_write_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	2200      	movs	r2, #0
 8003e02:	4d05      	ldr	r5, [pc, #20]	; (8003e18 <_write_r+0x20>)
 8003e04:	602a      	str	r2, [r5, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f7fe ff70 	bl	8002cec <_write>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d102      	bne.n	8003e16 <_write_r+0x1e>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	b103      	cbz	r3, 8003e16 <_write_r+0x1e>
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	20000138 	.word	0x20000138

08003e1c <_close_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	2300      	movs	r3, #0
 8003e20:	4d05      	ldr	r5, [pc, #20]	; (8003e38 <_close_r+0x1c>)
 8003e22:	4604      	mov	r4, r0
 8003e24:	4608      	mov	r0, r1
 8003e26:	602b      	str	r3, [r5, #0]
 8003e28:	f7fe ffa2 	bl	8002d70 <_close>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d102      	bne.n	8003e36 <_close_r+0x1a>
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	b103      	cbz	r3, 8003e36 <_close_r+0x1a>
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
 8003e38:	20000138 	.word	0x20000138

08003e3c <_fstat_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	2300      	movs	r3, #0
 8003e40:	4d06      	ldr	r5, [pc, #24]	; (8003e5c <_fstat_r+0x20>)
 8003e42:	4604      	mov	r4, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	602b      	str	r3, [r5, #0]
 8003e4a:	f7fe ff9c 	bl	8002d86 <_fstat>
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	d102      	bne.n	8003e58 <_fstat_r+0x1c>
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	b103      	cbz	r3, 8003e58 <_fstat_r+0x1c>
 8003e56:	6023      	str	r3, [r4, #0]
 8003e58:	bd38      	pop	{r3, r4, r5, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000138 	.word	0x20000138

08003e60 <_isatty_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	2300      	movs	r3, #0
 8003e64:	4d05      	ldr	r5, [pc, #20]	; (8003e7c <_isatty_r+0x1c>)
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	602b      	str	r3, [r5, #0]
 8003e6c:	f7fe ff9a 	bl	8002da4 <_isatty>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d102      	bne.n	8003e7a <_isatty_r+0x1a>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	b103      	cbz	r3, 8003e7a <_isatty_r+0x1a>
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	20000138 	.word	0x20000138

08003e80 <_lseek_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4604      	mov	r4, r0
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4d05      	ldr	r5, [pc, #20]	; (8003ea0 <_lseek_r+0x20>)
 8003e8c:	602a      	str	r2, [r5, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f7fe ff92 	bl	8002db8 <_lseek>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_lseek_r+0x1e>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_lseek_r+0x1e>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	20000138 	.word	0x20000138

08003ea4 <memchr>:
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	b2c9      	uxtb	r1, r1
 8003eaa:	4402      	add	r2, r0
 8003eac:	4293      	cmp	r3, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	d101      	bne.n	8003eb6 <memchr+0x12>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e003      	b.n	8003ebe <memchr+0x1a>
 8003eb6:	7804      	ldrb	r4, [r0, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	428c      	cmp	r4, r1
 8003ebc:	d1f6      	bne.n	8003eac <memchr+0x8>
 8003ebe:	bd10      	pop	{r4, pc}

08003ec0 <__malloc_lock>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	; (8003ec8 <__malloc_lock+0x8>)
 8003ec2:	f7ff bb13 	b.w	80034ec <__retarget_lock_acquire_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	2000012c 	.word	0x2000012c

08003ecc <__malloc_unlock>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	; (8003ed4 <__malloc_unlock+0x8>)
 8003ece:	f7ff bb0e 	b.w	80034ee <__retarget_lock_release_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	2000012c 	.word	0x2000012c

08003ed8 <_read_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4604      	mov	r4, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	4611      	mov	r1, r2
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4d05      	ldr	r5, [pc, #20]	; (8003ef8 <_read_r+0x20>)
 8003ee4:	602a      	str	r2, [r5, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f7fe fee2 	bl	8002cb0 <_read>
 8003eec:	1c43      	adds	r3, r0, #1
 8003eee:	d102      	bne.n	8003ef6 <_read_r+0x1e>
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	b103      	cbz	r3, 8003ef6 <_read_r+0x1e>
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	bd38      	pop	{r3, r4, r5, pc}
 8003ef8:	20000138 	.word	0x20000138

08003efc <_init>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	bf00      	nop
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr

08003f08 <_fini>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	bf00      	nop
 8003f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0e:	bc08      	pop	{r3}
 8003f10:	469e      	mov	lr, r3
 8003f12:	4770      	bx	lr
