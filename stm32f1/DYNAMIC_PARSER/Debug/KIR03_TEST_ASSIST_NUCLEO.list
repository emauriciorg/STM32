
KIR03_TEST_ASSIST_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000378  20000000  08002950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000015c  20000378  08002cc8  00020378  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004d4  08002cc8  000204d4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e390  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000234c  00000000  00000000  0002e731  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002fa5  00000000  00000000  00030a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000658  00000000  00000000  00033a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008c8  00000000  00000000  00034080  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003afe  00000000  00000000  00034948  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002548  00000000  00000000  00038446  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003a98e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000017f4  00000000  00000000  0003aa0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000378 	.word	0x20000378
 8000128:	00000000 	.word	0x00000000
 800012c:	080027f0 	.word	0x080027f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000037c 	.word	0x2000037c
 8000148:	080027f0 	.word	0x080027f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f89e 	bl	80002b4 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f854 	bl	8000234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000310 	.word	0x20000310
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f82d 	bl	8000210 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 f96a 	bl	8001494 <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200003a4 	.word	0x200003a4
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200003a4 	.word	0x200003a4

080001ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001ec:	b538      	push	{r3, r4, r5, lr}
 80001ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f0:	f7ff fff6 	bl	80001e0 <HAL_GetTick>
 80001f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001f8:	bf1e      	ittt	ne
 80001fa:	4b04      	ldrne	r3, [pc, #16]	; (800020c <HAL_Delay+0x20>)
 80001fc:	781b      	ldrbne	r3, [r3, #0]
 80001fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000200:	f7ff ffee 	bl	80001e0 <HAL_GetTick>
 8000204:	1b40      	subs	r0, r0, r5
 8000206:	4284      	cmp	r4, r0
 8000208:	d8fa      	bhi.n	8000200 <HAL_Delay+0x14>
  {
  }
}
 800020a:	bd38      	pop	{r3, r4, r5, pc}
 800020c:	20000000 	.word	0x20000000

08000210 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000212:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800021e:	041b      	lsls	r3, r3, #16
 8000220:	0c1b      	lsrs	r3, r3, #16
 8000222:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800022a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800022c:	60d3      	str	r3, [r2, #12]
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000236:	b530      	push	{r4, r5, lr}
 8000238:	68dc      	ldr	r4, [r3, #12]
 800023a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800023e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000244:	2b04      	cmp	r3, #4
 8000246:	bf28      	it	cs
 8000248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	bf98      	it	ls
 8000252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000254:	fa05 f303 	lsl.w	r3, r5, r3
 8000258:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	4019      	ands	r1, r3
 8000262:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000264:	fa05 f404 	lsl.w	r4, r5, r4
 8000268:	3c01      	subs	r4, #1
 800026a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800026c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026e:	ea42 0201 	orr.w	r2, r2, r1
 8000272:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	bfaf      	iteee	ge
 8000278:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	4b06      	ldrlt	r3, [pc, #24]	; (8000298 <HAL_NVIC_SetPriority+0x64>)
 800027e:	f000 000f 	andlt.w	r0, r0, #15
 8000282:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	bfa5      	ittet	ge
 8000286:	b2d2      	uxtbge	r2, r2
 8000288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800029c:	2301      	movs	r3, #1
 800029e:	0942      	lsrs	r2, r0, #5
 80002a0:	f000 001f 	and.w	r0, r0, #31
 80002a4:	fa03 f000 	lsl.w	r0, r3, r0
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_NVIC_EnableIRQ+0x14>)
 80002aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b4:	3801      	subs	r0, #1
 80002b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ba:	d20a      	bcs.n	80002d2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002e0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80002e4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d003      	beq.n	80002f2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002ea:	2304      	movs	r3, #4
 80002ec:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002ee:	2001      	movs	r0, #1
 80002f0:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002f2:	6803      	ldr	r3, [r0, #0]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	f022 020e 	bic.w	r2, r2, #14
 80002fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	f022 0201 	bic.w	r2, r2, #1
 8000302:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000304:	4a18      	ldr	r2, [pc, #96]	; (8000368 <HAL_DMA_Abort_IT+0x88>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d01f      	beq.n	800034a <HAL_DMA_Abort_IT+0x6a>
 800030a:	3214      	adds	r2, #20
 800030c:	4293      	cmp	r3, r2
 800030e:	d01e      	beq.n	800034e <HAL_DMA_Abort_IT+0x6e>
 8000310:	3214      	adds	r2, #20
 8000312:	4293      	cmp	r3, r2
 8000314:	d01d      	beq.n	8000352 <HAL_DMA_Abort_IT+0x72>
 8000316:	3214      	adds	r2, #20
 8000318:	4293      	cmp	r3, r2
 800031a:	d01d      	beq.n	8000358 <HAL_DMA_Abort_IT+0x78>
 800031c:	3214      	adds	r2, #20
 800031e:	4293      	cmp	r3, r2
 8000320:	d01d      	beq.n	800035e <HAL_DMA_Abort_IT+0x7e>
 8000322:	3214      	adds	r2, #20
 8000324:	4293      	cmp	r3, r2
 8000326:	bf0c      	ite	eq
 8000328:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800032c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000330:	4a0e      	ldr	r2, [pc, #56]	; (800036c <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000332:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000334:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000336:	2301      	movs	r3, #1
 8000338:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800033c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800033e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000342:	b17b      	cbz	r3, 8000364 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000344:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000346:	4620      	mov	r0, r4
 8000348:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800034a:	2301      	movs	r3, #1
 800034c:	e7f0      	b.n	8000330 <HAL_DMA_Abort_IT+0x50>
 800034e:	2310      	movs	r3, #16
 8000350:	e7ee      	b.n	8000330 <HAL_DMA_Abort_IT+0x50>
 8000352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000356:	e7eb      	b.n	8000330 <HAL_DMA_Abort_IT+0x50>
 8000358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800035c:	e7e8      	b.n	8000330 <HAL_DMA_Abort_IT+0x50>
 800035e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000362:	e7e5      	b.n	8000330 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000364:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000366:	bd10      	pop	{r4, pc}
 8000368:	40020008 	.word	0x40020008
 800036c:	40020000 	.word	0x40020000

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000374:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000376:	4616      	mov	r6, r2
 8000378:	4b65      	ldr	r3, [pc, #404]	; (8000510 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800037a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000520 <HAL_GPIO_Init+0x1b0>
 800037e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000524 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000382:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000386:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000388:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800038c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000390:	45a0      	cmp	r8, r4
 8000392:	d17f      	bne.n	8000494 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000394:	684d      	ldr	r5, [r1, #4]
 8000396:	2d12      	cmp	r5, #18
 8000398:	f000 80af 	beq.w	80004fa <HAL_GPIO_Init+0x18a>
 800039c:	f200 8088 	bhi.w	80004b0 <HAL_GPIO_Init+0x140>
 80003a0:	2d02      	cmp	r5, #2
 80003a2:	f000 80a7 	beq.w	80004f4 <HAL_GPIO_Init+0x184>
 80003a6:	d87c      	bhi.n	80004a2 <HAL_GPIO_Init+0x132>
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	f000 808e 	beq.w	80004ca <HAL_GPIO_Init+0x15a>
 80003ae:	2d01      	cmp	r5, #1
 80003b0:	f000 809e 	beq.w	80004f0 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003b4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003b8:	2cff      	cmp	r4, #255	; 0xff
 80003ba:	bf93      	iteet	ls
 80003bc:	4682      	movls	sl, r0
 80003be:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003c2:	3d08      	subhi	r5, #8
 80003c4:	f8d0 b000 	ldrls.w	fp, [r0]
 80003c8:	bf92      	itee	ls
 80003ca:	00b5      	lslls	r5, r6, #2
 80003cc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003d0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003d2:	fa09 f805 	lsl.w	r8, r9, r5
 80003d6:	ea2b 0808 	bic.w	r8, fp, r8
 80003da:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003de:	bf88      	it	hi
 80003e0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003e4:	ea48 0505 	orr.w	r5, r8, r5
 80003e8:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003ec:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003f0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003f4:	d04e      	beq.n	8000494 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4d47      	ldr	r5, [pc, #284]	; (8000514 <HAL_GPIO_Init+0x1a4>)
 80003f8:	4f46      	ldr	r7, [pc, #280]	; (8000514 <HAL_GPIO_Init+0x1a4>)
 80003fa:	69ad      	ldr	r5, [r5, #24]
 80003fc:	f026 0803 	bic.w	r8, r6, #3
 8000400:	f045 0501 	orr.w	r5, r5, #1
 8000404:	61bd      	str	r5, [r7, #24]
 8000406:	69bd      	ldr	r5, [r7, #24]
 8000408:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800040c:	f005 0501 	and.w	r5, r5, #1
 8000410:	9501      	str	r5, [sp, #4]
 8000412:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000416:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000420:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000424:	fa09 f90b 	lsl.w	r9, r9, fp
 8000428:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042c:	4d3a      	ldr	r5, [pc, #232]	; (8000518 <HAL_GPIO_Init+0x1a8>)
 800042e:	42a8      	cmp	r0, r5
 8000430:	d068      	beq.n	8000504 <HAL_GPIO_Init+0x194>
 8000432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000436:	42a8      	cmp	r0, r5
 8000438:	d066      	beq.n	8000508 <HAL_GPIO_Init+0x198>
 800043a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800043e:	42a8      	cmp	r0, r5
 8000440:	d064      	beq.n	800050c <HAL_GPIO_Init+0x19c>
 8000442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000446:	42a8      	cmp	r0, r5
 8000448:	bf0c      	ite	eq
 800044a:	2503      	moveq	r5, #3
 800044c:	2504      	movne	r5, #4
 800044e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000452:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000456:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800045a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000460:	bf14      	ite	ne
 8000462:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000464:	43a5      	biceq	r5, r4
 8000466:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000468:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800046a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800046e:	bf14      	ite	ne
 8000470:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000472:	43a5      	biceq	r5, r4
 8000474:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000476:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000478:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800047c:	bf14      	ite	ne
 800047e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000480:	43a5      	biceq	r5, r4
 8000482:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000484:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000486:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800048a:	bf14      	ite	ne
 800048c:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800048e:	ea25 0404 	biceq.w	r4, r5, r4
 8000492:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000494:	3601      	adds	r6, #1
 8000496:	2e10      	cmp	r6, #16
 8000498:	f47f af73 	bne.w	8000382 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800049c:	b003      	add	sp, #12
 800049e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004a2:	2d03      	cmp	r5, #3
 80004a4:	d022      	beq.n	80004ec <HAL_GPIO_Init+0x17c>
 80004a6:	2d11      	cmp	r5, #17
 80004a8:	d184      	bne.n	80003b4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004aa:	68ca      	ldr	r2, [r1, #12]
 80004ac:	3204      	adds	r2, #4
          break;
 80004ae:	e781      	b.n	80003b4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004b0:	4f1a      	ldr	r7, [pc, #104]	; (800051c <HAL_GPIO_Init+0x1ac>)
 80004b2:	42bd      	cmp	r5, r7
 80004b4:	d009      	beq.n	80004ca <HAL_GPIO_Init+0x15a>
 80004b6:	d812      	bhi.n	80004de <HAL_GPIO_Init+0x16e>
 80004b8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000528 <HAL_GPIO_Init+0x1b8>
 80004bc:	454d      	cmp	r5, r9
 80004be:	d004      	beq.n	80004ca <HAL_GPIO_Init+0x15a>
 80004c0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004c4:	454d      	cmp	r5, r9
 80004c6:	f47f af75 	bne.w	80003b4 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ca:	688a      	ldr	r2, [r1, #8]
 80004cc:	b1c2      	cbz	r2, 8000500 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004ce:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004d0:	bf0c      	ite	eq
 80004d2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004d6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004da:	2208      	movs	r2, #8
 80004dc:	e76a      	b.n	80003b4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004de:	4575      	cmp	r5, lr
 80004e0:	d0f3      	beq.n	80004ca <HAL_GPIO_Init+0x15a>
 80004e2:	4565      	cmp	r5, ip
 80004e4:	d0f1      	beq.n	80004ca <HAL_GPIO_Init+0x15a>
 80004e6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800052c <HAL_GPIO_Init+0x1bc>
 80004ea:	e7eb      	b.n	80004c4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004ec:	2200      	movs	r2, #0
 80004ee:	e761      	b.n	80003b4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f0:	68ca      	ldr	r2, [r1, #12]
          break;
 80004f2:	e75f      	b.n	80003b4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004f4:	68ca      	ldr	r2, [r1, #12]
 80004f6:	3208      	adds	r2, #8
          break;
 80004f8:	e75c      	b.n	80003b4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004fa:	68ca      	ldr	r2, [r1, #12]
 80004fc:	320c      	adds	r2, #12
          break;
 80004fe:	e759      	b.n	80003b4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000500:	2204      	movs	r2, #4
 8000502:	e757      	b.n	80003b4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000504:	2500      	movs	r5, #0
 8000506:	e7a2      	b.n	800044e <HAL_GPIO_Init+0xde>
 8000508:	2501      	movs	r5, #1
 800050a:	e7a0      	b.n	800044e <HAL_GPIO_Init+0xde>
 800050c:	2502      	movs	r5, #2
 800050e:	e79e      	b.n	800044e <HAL_GPIO_Init+0xde>
 8000510:	40010400 	.word	0x40010400
 8000514:	40021000 	.word	0x40021000
 8000518:	40010800 	.word	0x40010800
 800051c:	10210000 	.word	0x10210000
 8000520:	10310000 	.word	0x10310000
 8000524:	10320000 	.word	0x10320000
 8000528:	10110000 	.word	0x10110000
 800052c:	10220000 	.word	0x10220000

08000530 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000530:	b10a      	cbz	r2, 8000536 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000532:	6101      	str	r1, [r0, #16]
 8000534:	4770      	bx	lr
 8000536:	0409      	lsls	r1, r1, #16
 8000538:	e7fb      	b.n	8000532 <HAL_GPIO_WritePin+0x2>

0800053a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800053a:	4770      	bx	lr

0800053c <HAL_GPIO_EXTI_IRQHandler>:
{
 800053c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000540:	6959      	ldr	r1, [r3, #20]
 8000542:	4201      	tst	r1, r0
 8000544:	d002      	beq.n	800054c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000546:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000548:	f7ff fff7 	bl	800053a <HAL_GPIO_EXTI_Callback>
 800054c:	bd08      	pop	{r3, pc}
 800054e:	bf00      	nop
 8000550:	40010400 	.word	0x40010400

08000554 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000554:	6803      	ldr	r3, [r0, #0]
{
 8000556:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800055a:	07db      	lsls	r3, r3, #31
{
 800055c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800055e:	d410      	bmi.n	8000582 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000560:	682b      	ldr	r3, [r5, #0]
 8000562:	079f      	lsls	r7, r3, #30
 8000564:	d45e      	bmi.n	8000624 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000566:	682b      	ldr	r3, [r5, #0]
 8000568:	0719      	lsls	r1, r3, #28
 800056a:	f100 8095 	bmi.w	8000698 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800056e:	682b      	ldr	r3, [r5, #0]
 8000570:	075a      	lsls	r2, r3, #29
 8000572:	f100 80bf 	bmi.w	80006f4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000576:	69ea      	ldr	r2, [r5, #28]
 8000578:	2a00      	cmp	r2, #0
 800057a:	f040 812d 	bne.w	80007d8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800057e:	2000      	movs	r0, #0
 8000580:	e014      	b.n	80005ac <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000582:	4c90      	ldr	r4, [pc, #576]	; (80007c4 <HAL_RCC_OscConfig+0x270>)
 8000584:	6863      	ldr	r3, [r4, #4]
 8000586:	f003 030c 	and.w	r3, r3, #12
 800058a:	2b04      	cmp	r3, #4
 800058c:	d007      	beq.n	800059e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800058e:	6863      	ldr	r3, [r4, #4]
 8000590:	f003 030c 	and.w	r3, r3, #12
 8000594:	2b08      	cmp	r3, #8
 8000596:	d10c      	bne.n	80005b2 <HAL_RCC_OscConfig+0x5e>
 8000598:	6863      	ldr	r3, [r4, #4]
 800059a:	03de      	lsls	r6, r3, #15
 800059c:	d509      	bpl.n	80005b2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	039c      	lsls	r4, r3, #14
 80005a2:	d5dd      	bpl.n	8000560 <HAL_RCC_OscConfig+0xc>
 80005a4:	686b      	ldr	r3, [r5, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1da      	bne.n	8000560 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005aa:	2001      	movs	r0, #1
}
 80005ac:	b002      	add	sp, #8
 80005ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b2:	686b      	ldr	r3, [r5, #4]
 80005b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005b8:	d110      	bne.n	80005dc <HAL_RCC_OscConfig+0x88>
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005c2:	f7ff fe0d 	bl	80001e0 <HAL_GetTick>
 80005c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	0398      	lsls	r0, r3, #14
 80005cc:	d4c8      	bmi.n	8000560 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ce:	f7ff fe07 	bl	80001e0 <HAL_GetTick>
 80005d2:	1b80      	subs	r0, r0, r6
 80005d4:	2864      	cmp	r0, #100	; 0x64
 80005d6:	d9f7      	bls.n	80005c8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80005d8:	2003      	movs	r0, #3
 80005da:	e7e7      	b.n	80005ac <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005dc:	b99b      	cbnz	r3, 8000606 <HAL_RCC_OscConfig+0xb2>
 80005de:	6823      	ldr	r3, [r4, #0]
 80005e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005e4:	6023      	str	r3, [r4, #0]
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ee:	f7ff fdf7 	bl	80001e0 <HAL_GetTick>
 80005f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	0399      	lsls	r1, r3, #14
 80005f8:	d5b2      	bpl.n	8000560 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fa:	f7ff fdf1 	bl	80001e0 <HAL_GetTick>
 80005fe:	1b80      	subs	r0, r0, r6
 8000600:	2864      	cmp	r0, #100	; 0x64
 8000602:	d9f7      	bls.n	80005f4 <HAL_RCC_OscConfig+0xa0>
 8000604:	e7e8      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000606:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800060a:	6823      	ldr	r3, [r4, #0]
 800060c:	d103      	bne.n	8000616 <HAL_RCC_OscConfig+0xc2>
 800060e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000612:	6023      	str	r3, [r4, #0]
 8000614:	e7d1      	b.n	80005ba <HAL_RCC_OscConfig+0x66>
 8000616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800061a:	6023      	str	r3, [r4, #0]
 800061c:	6823      	ldr	r3, [r4, #0]
 800061e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000622:	e7cd      	b.n	80005c0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000624:	4c67      	ldr	r4, [pc, #412]	; (80007c4 <HAL_RCC_OscConfig+0x270>)
 8000626:	6863      	ldr	r3, [r4, #4]
 8000628:	f013 0f0c 	tst.w	r3, #12
 800062c:	d007      	beq.n	800063e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800062e:	6863      	ldr	r3, [r4, #4]
 8000630:	f003 030c 	and.w	r3, r3, #12
 8000634:	2b08      	cmp	r3, #8
 8000636:	d110      	bne.n	800065a <HAL_RCC_OscConfig+0x106>
 8000638:	6863      	ldr	r3, [r4, #4]
 800063a:	03da      	lsls	r2, r3, #15
 800063c:	d40d      	bmi.n	800065a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	079b      	lsls	r3, r3, #30
 8000642:	d502      	bpl.n	800064a <HAL_RCC_OscConfig+0xf6>
 8000644:	692b      	ldr	r3, [r5, #16]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d1af      	bne.n	80005aa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800064a:	6823      	ldr	r3, [r4, #0]
 800064c:	696a      	ldr	r2, [r5, #20]
 800064e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000652:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000656:	6023      	str	r3, [r4, #0]
 8000658:	e785      	b.n	8000566 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800065a:	692a      	ldr	r2, [r5, #16]
 800065c:	4b5a      	ldr	r3, [pc, #360]	; (80007c8 <HAL_RCC_OscConfig+0x274>)
 800065e:	b16a      	cbz	r2, 800067c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000664:	f7ff fdbc 	bl	80001e0 <HAL_GetTick>
 8000668:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800066a:	6823      	ldr	r3, [r4, #0]
 800066c:	079f      	lsls	r7, r3, #30
 800066e:	d4ec      	bmi.n	800064a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000670:	f7ff fdb6 	bl	80001e0 <HAL_GetTick>
 8000674:	1b80      	subs	r0, r0, r6
 8000676:	2802      	cmp	r0, #2
 8000678:	d9f7      	bls.n	800066a <HAL_RCC_OscConfig+0x116>
 800067a:	e7ad      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800067c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800067e:	f7ff fdaf 	bl	80001e0 <HAL_GetTick>
 8000682:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000684:	6823      	ldr	r3, [r4, #0]
 8000686:	0798      	lsls	r0, r3, #30
 8000688:	f57f af6d 	bpl.w	8000566 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068c:	f7ff fda8 	bl	80001e0 <HAL_GetTick>
 8000690:	1b80      	subs	r0, r0, r6
 8000692:	2802      	cmp	r0, #2
 8000694:	d9f6      	bls.n	8000684 <HAL_RCC_OscConfig+0x130>
 8000696:	e79f      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000698:	69aa      	ldr	r2, [r5, #24]
 800069a:	4c4a      	ldr	r4, [pc, #296]	; (80007c4 <HAL_RCC_OscConfig+0x270>)
 800069c:	4b4b      	ldr	r3, [pc, #300]	; (80007cc <HAL_RCC_OscConfig+0x278>)
 800069e:	b1da      	cbz	r2, 80006d8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006a4:	f7ff fd9c 	bl	80001e0 <HAL_GetTick>
 80006a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006ac:	079b      	lsls	r3, r3, #30
 80006ae:	d50d      	bpl.n	80006cc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006b0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006b4:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <HAL_RCC_OscConfig+0x27c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80006bc:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006be:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006c0:	9b01      	ldr	r3, [sp, #4]
 80006c2:	1e5a      	subs	r2, r3, #1
 80006c4:	9201      	str	r2, [sp, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f9      	bne.n	80006be <HAL_RCC_OscConfig+0x16a>
 80006ca:	e750      	b.n	800056e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006cc:	f7ff fd88 	bl	80001e0 <HAL_GetTick>
 80006d0:	1b80      	subs	r0, r0, r6
 80006d2:	2802      	cmp	r0, #2
 80006d4:	d9e9      	bls.n	80006aa <HAL_RCC_OscConfig+0x156>
 80006d6:	e77f      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80006d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006da:	f7ff fd81 	bl	80001e0 <HAL_GetTick>
 80006de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006e2:	079f      	lsls	r7, r3, #30
 80006e4:	f57f af43 	bpl.w	800056e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006e8:	f7ff fd7a 	bl	80001e0 <HAL_GetTick>
 80006ec:	1b80      	subs	r0, r0, r6
 80006ee:	2802      	cmp	r0, #2
 80006f0:	d9f6      	bls.n	80006e0 <HAL_RCC_OscConfig+0x18c>
 80006f2:	e771      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006f4:	4c33      	ldr	r4, [pc, #204]	; (80007c4 <HAL_RCC_OscConfig+0x270>)
 80006f6:	69e3      	ldr	r3, [r4, #28]
 80006f8:	00d8      	lsls	r0, r3, #3
 80006fa:	d424      	bmi.n	8000746 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80006fc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	69e3      	ldr	r3, [r4, #28]
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61e3      	str	r3, [r4, #28]
 8000706:	69e3      	ldr	r3, [r4, #28]
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000710:	4e30      	ldr	r6, [pc, #192]	; (80007d4 <HAL_RCC_OscConfig+0x280>)
 8000712:	6833      	ldr	r3, [r6, #0]
 8000714:	05d9      	lsls	r1, r3, #23
 8000716:	d518      	bpl.n	800074a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000718:	68eb      	ldr	r3, [r5, #12]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d126      	bne.n	800076c <HAL_RCC_OscConfig+0x218>
 800071e:	6a23      	ldr	r3, [r4, #32]
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000726:	f7ff fd5b 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800072a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800072e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000730:	6a23      	ldr	r3, [r4, #32]
 8000732:	079b      	lsls	r3, r3, #30
 8000734:	d53f      	bpl.n	80007b6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000736:	2f00      	cmp	r7, #0
 8000738:	f43f af1d 	beq.w	8000576 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800073c:	69e3      	ldr	r3, [r4, #28]
 800073e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000742:	61e3      	str	r3, [r4, #28]
 8000744:	e717      	b.n	8000576 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000746:	2700      	movs	r7, #0
 8000748:	e7e2      	b.n	8000710 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800074a:	6833      	ldr	r3, [r6, #0]
 800074c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000750:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000752:	f7ff fd45 	bl	80001e0 <HAL_GetTick>
 8000756:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000758:	6833      	ldr	r3, [r6, #0]
 800075a:	05da      	lsls	r2, r3, #23
 800075c:	d4dc      	bmi.n	8000718 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800075e:	f7ff fd3f 	bl	80001e0 <HAL_GetTick>
 8000762:	eba0 0008 	sub.w	r0, r0, r8
 8000766:	2864      	cmp	r0, #100	; 0x64
 8000768:	d9f6      	bls.n	8000758 <HAL_RCC_OscConfig+0x204>
 800076a:	e735      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800076c:	b9ab      	cbnz	r3, 800079a <HAL_RCC_OscConfig+0x246>
 800076e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000770:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000774:	f023 0301 	bic.w	r3, r3, #1
 8000778:	6223      	str	r3, [r4, #32]
 800077a:	6a23      	ldr	r3, [r4, #32]
 800077c:	f023 0304 	bic.w	r3, r3, #4
 8000780:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000782:	f7ff fd2d 	bl	80001e0 <HAL_GetTick>
 8000786:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000788:	6a23      	ldr	r3, [r4, #32]
 800078a:	0798      	lsls	r0, r3, #30
 800078c:	d5d3      	bpl.n	8000736 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800078e:	f7ff fd27 	bl	80001e0 <HAL_GetTick>
 8000792:	1b80      	subs	r0, r0, r6
 8000794:	4540      	cmp	r0, r8
 8000796:	d9f7      	bls.n	8000788 <HAL_RCC_OscConfig+0x234>
 8000798:	e71e      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800079a:	2b05      	cmp	r3, #5
 800079c:	6a23      	ldr	r3, [r4, #32]
 800079e:	d103      	bne.n	80007a8 <HAL_RCC_OscConfig+0x254>
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6223      	str	r3, [r4, #32]
 80007a6:	e7ba      	b.n	800071e <HAL_RCC_OscConfig+0x1ca>
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	6223      	str	r3, [r4, #32]
 80007ae:	6a23      	ldr	r3, [r4, #32]
 80007b0:	f023 0304 	bic.w	r3, r3, #4
 80007b4:	e7b6      	b.n	8000724 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007b6:	f7ff fd13 	bl	80001e0 <HAL_GetTick>
 80007ba:	eba0 0008 	sub.w	r0, r0, r8
 80007be:	42b0      	cmp	r0, r6
 80007c0:	d9b6      	bls.n	8000730 <HAL_RCC_OscConfig+0x1dc>
 80007c2:	e709      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
 80007c4:	40021000 	.word	0x40021000
 80007c8:	42420000 	.word	0x42420000
 80007cc:	42420480 	.word	0x42420480
 80007d0:	20000310 	.word	0x20000310
 80007d4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007d8:	4c22      	ldr	r4, [pc, #136]	; (8000864 <HAL_RCC_OscConfig+0x310>)
 80007da:	6863      	ldr	r3, [r4, #4]
 80007dc:	f003 030c 	and.w	r3, r3, #12
 80007e0:	2b08      	cmp	r3, #8
 80007e2:	f43f aee2 	beq.w	80005aa <HAL_RCC_OscConfig+0x56>
 80007e6:	2300      	movs	r3, #0
 80007e8:	4e1f      	ldr	r6, [pc, #124]	; (8000868 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ea:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80007ec:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ee:	d12b      	bne.n	8000848 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80007f0:	f7ff fcf6 	bl	80001e0 <HAL_GetTick>
 80007f4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	0199      	lsls	r1, r3, #6
 80007fa:	d41f      	bmi.n	800083c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80007fc:	6a2b      	ldr	r3, [r5, #32]
 80007fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000802:	d105      	bne.n	8000810 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000804:	6862      	ldr	r2, [r4, #4]
 8000806:	68a9      	ldr	r1, [r5, #8]
 8000808:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800080c:	430a      	orrs	r2, r1
 800080e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000810:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000812:	6862      	ldr	r2, [r4, #4]
 8000814:	430b      	orrs	r3, r1
 8000816:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800081a:	4313      	orrs	r3, r2
 800081c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800081e:	2301      	movs	r3, #1
 8000820:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000822:	f7ff fcdd 	bl	80001e0 <HAL_GetTick>
 8000826:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000828:	6823      	ldr	r3, [r4, #0]
 800082a:	019a      	lsls	r2, r3, #6
 800082c:	f53f aea7 	bmi.w	800057e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000830:	f7ff fcd6 	bl	80001e0 <HAL_GetTick>
 8000834:	1b40      	subs	r0, r0, r5
 8000836:	2802      	cmp	r0, #2
 8000838:	d9f6      	bls.n	8000828 <HAL_RCC_OscConfig+0x2d4>
 800083a:	e6cd      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800083c:	f7ff fcd0 	bl	80001e0 <HAL_GetTick>
 8000840:	1bc0      	subs	r0, r0, r7
 8000842:	2802      	cmp	r0, #2
 8000844:	d9d7      	bls.n	80007f6 <HAL_RCC_OscConfig+0x2a2>
 8000846:	e6c7      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000848:	f7ff fcca 	bl	80001e0 <HAL_GetTick>
 800084c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	019b      	lsls	r3, r3, #6
 8000852:	f57f ae94 	bpl.w	800057e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000856:	f7ff fcc3 	bl	80001e0 <HAL_GetTick>
 800085a:	1b40      	subs	r0, r0, r5
 800085c:	2802      	cmp	r0, #2
 800085e:	d9f6      	bls.n	800084e <HAL_RCC_OscConfig+0x2fa>
 8000860:	e6ba      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	42420060 	.word	0x42420060

0800086c <HAL_RCC_GetSysClockFreq>:
{
 800086c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000870:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000872:	ac02      	add	r4, sp, #8
 8000874:	f103 0510 	add.w	r5, r3, #16
 8000878:	4622      	mov	r2, r4
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	6859      	ldr	r1, [r3, #4]
 800087e:	3308      	adds	r3, #8
 8000880:	c203      	stmia	r2!, {r0, r1}
 8000882:	42ab      	cmp	r3, r5
 8000884:	4614      	mov	r4, r2
 8000886:	d1f7      	bne.n	8000878 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000888:	2301      	movs	r3, #1
 800088a:	f88d 3004 	strb.w	r3, [sp, #4]
 800088e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000890:	4911      	ldr	r1, [pc, #68]	; (80008d8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000892:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000896:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000898:	f003 020c 	and.w	r2, r3, #12
 800089c:	2a08      	cmp	r2, #8
 800089e:	d117      	bne.n	80008d0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008a0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008a4:	a806      	add	r0, sp, #24
 80008a6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008a8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008aa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008ae:	d50c      	bpl.n	80008ca <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008b0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008b2:	480a      	ldr	r0, [pc, #40]	; (80008dc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008b4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008b8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008ba:	aa06      	add	r2, sp, #24
 80008bc:	4413      	add	r3, r2
 80008be:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008c2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80008c6:	b007      	add	sp, #28
 80008c8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x74>)
 80008cc:	4350      	muls	r0, r2
 80008ce:	e7fa      	b.n	80008c6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80008d2:	e7f8      	b.n	80008c6 <HAL_RCC_GetSysClockFreq+0x5a>
 80008d4:	08002808 	.word	0x08002808
 80008d8:	40021000 	.word	0x40021000
 80008dc:	007a1200 	.word	0x007a1200
 80008e0:	003d0900 	.word	0x003d0900

080008e4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e4:	4a54      	ldr	r2, [pc, #336]	; (8000a38 <HAL_RCC_ClockConfig+0x154>)
{
 80008e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ea:	6813      	ldr	r3, [r2, #0]
{
 80008ec:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	428b      	cmp	r3, r1
{
 80008f4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f6:	d32a      	bcc.n	800094e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008f8:	6829      	ldr	r1, [r5, #0]
 80008fa:	078c      	lsls	r4, r1, #30
 80008fc:	d434      	bmi.n	8000968 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008fe:	07ca      	lsls	r2, r1, #31
 8000900:	d447      	bmi.n	8000992 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000902:	4a4d      	ldr	r2, [pc, #308]	; (8000a38 <HAL_RCC_ClockConfig+0x154>)
 8000904:	6813      	ldr	r3, [r2, #0]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	429e      	cmp	r6, r3
 800090c:	f0c0 8082 	bcc.w	8000a14 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000910:	682a      	ldr	r2, [r5, #0]
 8000912:	4c4a      	ldr	r4, [pc, #296]	; (8000a3c <HAL_RCC_ClockConfig+0x158>)
 8000914:	f012 0f04 	tst.w	r2, #4
 8000918:	f040 8087 	bne.w	8000a2a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800091c:	0713      	lsls	r3, r2, #28
 800091e:	d506      	bpl.n	800092e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000920:	6863      	ldr	r3, [r4, #4]
 8000922:	692a      	ldr	r2, [r5, #16]
 8000924:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000928:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800092c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800092e:	f7ff ff9d 	bl	800086c <HAL_RCC_GetSysClockFreq>
 8000932:	6863      	ldr	r3, [r4, #4]
 8000934:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 8000936:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	40d8      	lsrs	r0, r3
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <HAL_RCC_ClockConfig+0x160>)
 8000940:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fc0a 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000948:	2000      	movs	r0, #0
}
 800094a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	f023 0307 	bic.w	r3, r3, #7
 8000954:	430b      	orrs	r3, r1
 8000956:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000958:	6813      	ldr	r3, [r2, #0]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	4299      	cmp	r1, r3
 8000960:	d0ca      	beq.n	80008f8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000962:	2001      	movs	r0, #1
 8000964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000968:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800096a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800096e:	bf1e      	ittt	ne
 8000970:	685a      	ldrne	r2, [r3, #4]
 8000972:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000976:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000978:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800097a:	bf42      	ittt	mi
 800097c:	685a      	ldrmi	r2, [r3, #4]
 800097e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000982:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	68a8      	ldr	r0, [r5, #8]
 8000988:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800098c:	4302      	orrs	r2, r0
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	e7b5      	b.n	80008fe <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000992:	686a      	ldr	r2, [r5, #4]
 8000994:	4c29      	ldr	r4, [pc, #164]	; (8000a3c <HAL_RCC_ClockConfig+0x158>)
 8000996:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000998:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800099a:	d11c      	bne.n	80009d6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a0:	d0df      	beq.n	8000962 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009a2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009a8:	f023 0303 	bic.w	r3, r3, #3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80009b0:	f7ff fc16 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009b4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80009b6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d114      	bne.n	80009e6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009bc:	6863      	ldr	r3, [r4, #4]
 80009be:	f003 030c 	and.w	r3, r3, #12
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d09d      	beq.n	8000902 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c6:	f7ff fc0b 	bl	80001e0 <HAL_GetTick>
 80009ca:	1bc0      	subs	r0, r0, r7
 80009cc:	4540      	cmp	r0, r8
 80009ce:	d9f5      	bls.n	80009bc <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80009d0:	2003      	movs	r0, #3
 80009d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009d6:	2a02      	cmp	r2, #2
 80009d8:	d102      	bne.n	80009e0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009de:	e7df      	b.n	80009a0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	f013 0f02 	tst.w	r3, #2
 80009e4:	e7dc      	b.n	80009a0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d10f      	bne.n	8000a0a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009ea:	6863      	ldr	r3, [r4, #4]
 80009ec:	f003 030c 	and.w	r3, r3, #12
 80009f0:	2b08      	cmp	r3, #8
 80009f2:	d086      	beq.n	8000902 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009f4:	f7ff fbf4 	bl	80001e0 <HAL_GetTick>
 80009f8:	1bc0      	subs	r0, r0, r7
 80009fa:	4540      	cmp	r0, r8
 80009fc:	d9f5      	bls.n	80009ea <HAL_RCC_ClockConfig+0x106>
 80009fe:	e7e7      	b.n	80009d0 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a00:	f7ff fbee 	bl	80001e0 <HAL_GetTick>
 8000a04:	1bc0      	subs	r0, r0, r7
 8000a06:	4540      	cmp	r0, r8
 8000a08:	d8e2      	bhi.n	80009d0 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a0a:	6863      	ldr	r3, [r4, #4]
 8000a0c:	f013 0f0c 	tst.w	r3, #12
 8000a10:	d1f6      	bne.n	8000a00 <HAL_RCC_ClockConfig+0x11c>
 8000a12:	e776      	b.n	8000902 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a14:	6813      	ldr	r3, [r2, #0]
 8000a16:	f023 0307 	bic.w	r3, r3, #7
 8000a1a:	4333      	orrs	r3, r6
 8000a1c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a1e:	6813      	ldr	r3, [r2, #0]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	429e      	cmp	r6, r3
 8000a26:	d19c      	bne.n	8000962 <HAL_RCC_ClockConfig+0x7e>
 8000a28:	e772      	b.n	8000910 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a2a:	6863      	ldr	r3, [r4, #4]
 8000a2c:	68e9      	ldr	r1, [r5, #12]
 8000a2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a32:	430b      	orrs	r3, r1
 8000a34:	6063      	str	r3, [r4, #4]
 8000a36:	e771      	b.n	800091c <HAL_RCC_ClockConfig+0x38>
 8000a38:	40022000 	.word	0x40022000
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	08002896 	.word	0x08002896
 8000a44:	20000310 	.word	0x20000310

08000a48 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a52:	5cd3      	ldrb	r3, [r2, r3]
 8000a54:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a56:	6810      	ldr	r0, [r2, #0]
}    
 8000a58:	40d8      	lsrs	r0, r3
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	080028a6 	.word	0x080028a6
 8000a64:	20000310 	.word	0x20000310

08000a68 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a72:	5cd3      	ldrb	r3, [r2, r3]
 8000a74:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a76:	6810      	ldr	r0, [r2, #0]
} 
 8000a78:	40d8      	lsrs	r0, r3
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	080028a6 	.word	0x080028a6
 8000a84:	20000310 	.word	0x20000310

08000a88 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000a88:	6803      	ldr	r3, [r0, #0]
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000a90:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a92:	695a      	ldr	r2, [r3, #20]
 8000a94:	f022 0201 	bic.w	r2, r2, #1
 8000a98:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000aa0:	4770      	bx	lr
	...

08000aa4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000aa8:	6805      	ldr	r5, [r0, #0]
 8000aaa:	68c2      	ldr	r2, [r0, #12]
 8000aac:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000aae:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ab0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ab8:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000aba:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000abc:	430b      	orrs	r3, r1
 8000abe:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000ac0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000ac4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ac8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ace:	696b      	ldr	r3, [r5, #20]
 8000ad0:	6982      	ldr	r2, [r0, #24]
 8000ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000ada:	4b40      	ldr	r3, [pc, #256]	; (8000bdc <UART_SetConfig+0x138>)
{
 8000adc:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000ade:	429d      	cmp	r5, r3
 8000ae0:	f04f 0419 	mov.w	r4, #25
 8000ae4:	d146      	bne.n	8000b74 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ae6:	f7ff ffbf 	bl	8000a68 <HAL_RCC_GetPCLK2Freq>
 8000aea:	fb04 f300 	mul.w	r3, r4, r0
 8000aee:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000af2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000af6:	00b6      	lsls	r6, r6, #2
 8000af8:	fbb3 f3f6 	udiv	r3, r3, r6
 8000afc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b00:	011e      	lsls	r6, r3, #4
 8000b02:	f7ff ffb1 	bl	8000a68 <HAL_RCC_GetPCLK2Freq>
 8000b06:	4360      	muls	r0, r4
 8000b08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b12:	f7ff ffa9 	bl	8000a68 <HAL_RCC_GetPCLK2Freq>
 8000b16:	4360      	muls	r0, r4
 8000b18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b22:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b26:	fb08 7313 	mls	r3, r8, r3, r7
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	3332      	adds	r3, #50	; 0x32
 8000b2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b32:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b36:	f7ff ff97 	bl	8000a68 <HAL_RCC_GetPCLK2Freq>
 8000b3a:	4360      	muls	r0, r4
 8000b3c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b40:	0092      	lsls	r2, r2, #2
 8000b42:	fbb0 faf2 	udiv	sl, r0, r2
 8000b46:	f7ff ff8f 	bl	8000a68 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b4a:	4360      	muls	r0, r4
 8000b4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b56:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b5a:	fb08 a313 	mls	r3, r8, r3, sl
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	3332      	adds	r3, #50	; 0x32
 8000b62:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	433b      	orrs	r3, r7
 8000b6c:	4433      	add	r3, r6
 8000b6e:	60ab      	str	r3, [r5, #8]
 8000b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b74:	f7ff ff68 	bl	8000a48 <HAL_RCC_GetPCLK1Freq>
 8000b78:	fb04 f300 	mul.w	r3, r4, r0
 8000b7c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b80:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b84:	00b6      	lsls	r6, r6, #2
 8000b86:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b8a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b8e:	011e      	lsls	r6, r3, #4
 8000b90:	f7ff ff5a 	bl	8000a48 <HAL_RCC_GetPCLK1Freq>
 8000b94:	4360      	muls	r0, r4
 8000b96:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	fbb0 f7f3 	udiv	r7, r0, r3
 8000ba0:	f7ff ff52 	bl	8000a48 <HAL_RCC_GetPCLK1Freq>
 8000ba4:	4360      	muls	r0, r4
 8000ba6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000bb4:	fb08 7313 	mls	r3, r8, r3, r7
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	3332      	adds	r3, #50	; 0x32
 8000bbc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000bc0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000bc4:	f7ff ff40 	bl	8000a48 <HAL_RCC_GetPCLK1Freq>
 8000bc8:	4360      	muls	r0, r4
 8000bca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	fbb0 faf2 	udiv	sl, r0, r2
 8000bd4:	f7ff ff38 	bl	8000a48 <HAL_RCC_GetPCLK1Freq>
 8000bd8:	e7b7      	b.n	8000b4a <UART_SetConfig+0xa6>
 8000bda:	bf00      	nop
 8000bdc:	40013800 	.word	0x40013800

08000be0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	4604      	mov	r4, r0
 8000be4:	460e      	mov	r6, r1
 8000be6:	4617      	mov	r7, r2
 8000be8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000bea:	6821      	ldr	r1, [r4, #0]
 8000bec:	680b      	ldr	r3, [r1, #0]
 8000bee:	ea36 0303 	bics.w	r3, r6, r3
 8000bf2:	d101      	bne.n	8000bf8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000bf4:	2000      	movs	r0, #0
}
 8000bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000bf8:	1c6b      	adds	r3, r5, #1
 8000bfa:	d0f7      	beq.n	8000bec <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000bfc:	b995      	cbnz	r5, 8000c24 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000bfe:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000c00:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000c08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c0a:	695a      	ldr	r2, [r3, #20]
 8000c0c:	f022 0201 	bic.w	r2, r2, #1
 8000c10:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000c12:	2320      	movs	r3, #32
 8000c14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000c18:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c24:	f7ff fadc 	bl	80001e0 <HAL_GetTick>
 8000c28:	1bc0      	subs	r0, r0, r7
 8000c2a:	4285      	cmp	r5, r0
 8000c2c:	d2dd      	bcs.n	8000bea <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000c2e:	e7e6      	b.n	8000bfe <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000c30 <HAL_UART_Init>:
{
 8000c30:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000c32:	4604      	mov	r4, r0
 8000c34:	b340      	cbz	r0, 8000c88 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000c36:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c3e:	b91b      	cbnz	r3, 8000c48 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000c40:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000c44:	f000 fc48 	bl	80014d8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000c48:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000c4a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000c4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000c50:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c52:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c58:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c5a:	f7ff ff23 	bl	8000aa4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c5e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c60:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c6a:	695a      	ldr	r2, [r3, #20]
 8000c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c70:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c78:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000c7a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c7c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000c7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000c82:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000c86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c88:	2001      	movs	r0, #1
}
 8000c8a:	bd10      	pop	{r4, pc}

08000c8c <HAL_UART_Transmit>:
{
 8000c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c90:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000c92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000c96:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000c98:	2b20      	cmp	r3, #32
{
 8000c9a:	460d      	mov	r5, r1
 8000c9c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000c9e:	d14e      	bne.n	8000d3e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	d049      	beq.n	8000d38 <HAL_UART_Transmit+0xac>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	d047      	beq.n	8000d38 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000ca8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d046      	beq.n	8000d3e <HAL_UART_Transmit+0xb2>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000cba:	2321      	movs	r3, #33	; 0x21
 8000cbc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000cc0:	f7ff fa8e 	bl	80001e0 <HAL_GetTick>
 8000cc4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000cc6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000cca:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000cce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	b96b      	cbnz	r3, 8000cf0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4632      	mov	r2, r6
 8000cd8:	2140      	movs	r1, #64	; 0x40
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f7ff ff80 	bl	8000be0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ce0:	b9a8      	cbnz	r0, 8000d0e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000ce2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000ce4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000ce8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000cf0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cf2:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cfa:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cfc:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d02:	4620      	mov	r0, r4
 8000d04:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d06:	d10e      	bne.n	8000d26 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d08:	f7ff ff6a 	bl	8000be0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d0c:	b110      	cbz	r0, 8000d14 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000d0e:	2003      	movs	r0, #3
 8000d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000d14:	882b      	ldrh	r3, [r5, #0]
 8000d16:	6822      	ldr	r2, [r4, #0]
 8000d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d1c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d1e:	6923      	ldr	r3, [r4, #16]
 8000d20:	b943      	cbnz	r3, 8000d34 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000d22:	3502      	adds	r5, #2
 8000d24:	e7d3      	b.n	8000cce <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d26:	f7ff ff5b 	bl	8000be0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d1ef      	bne.n	8000d0e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	782a      	ldrb	r2, [r5, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	3501      	adds	r5, #1
 8000d36:	e7ca      	b.n	8000cce <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000d38:	2001      	movs	r0, #1
 8000d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000d3e:	2002      	movs	r0, #2
}
 8000d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d44 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8000d44:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000d48:	2b20      	cmp	r3, #32
 8000d4a:	d120      	bne.n	8000d8e <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 8000d4c:	b1e9      	cbz	r1, 8000d8a <HAL_UART_Receive_IT+0x46>
 8000d4e:	b1e2      	cbz	r2, 8000d8a <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8000d50:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d01a      	beq.n	8000d8e <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8000d58:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8000d5a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d5c:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d5e:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d60:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d62:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d66:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8000d68:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d6a:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8000d6c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d70:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000d74:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d76:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8000d78:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d7a:	f041 0101 	orr.w	r1, r1, #1
 8000d7e:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000d80:	68d1      	ldr	r1, [r2, #12]
 8000d82:	f041 0120 	orr.w	r1, r1, #32
 8000d86:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8000d88:	4770      	bx	lr
      return HAL_ERROR;
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	4770      	bx	lr
    return HAL_BUSY;
 8000d8e:	2002      	movs	r0, #2
}
 8000d90:	4770      	bx	lr

08000d92 <HAL_UART_TxCpltCallback>:
 8000d92:	4770      	bx	lr

08000d94 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000d94:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000d98:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000d9a:	2b22      	cmp	r3, #34	; 0x22
 8000d9c:	d136      	bne.n	8000e0c <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d9e:	6883      	ldr	r3, [r0, #8]
 8000da0:	6901      	ldr	r1, [r0, #16]
 8000da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000da6:	6802      	ldr	r2, [r0, #0]
 8000da8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000daa:	d123      	bne.n	8000df4 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000dac:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000dae:	b9e9      	cbnz	r1, 8000dec <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000db4:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000db8:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8000dba:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000dbc:	3c01      	subs	r4, #1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000dc2:	b98c      	cbnz	r4, 8000de8 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000dc4:	6803      	ldr	r3, [r0, #0]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	f022 0220 	bic.w	r2, r2, #32
 8000dcc:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dd4:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000dd6:	695a      	ldr	r2, [r3, #20]
 8000dd8:	f022 0201 	bic.w	r2, r2, #1
 8000ddc:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000dde:	2320      	movs	r3, #32
 8000de0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000de4:	f000 f914 	bl	8001010 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8000de8:	2000      	movs	r0, #0
}
 8000dea:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	f823 2b01 	strh.w	r2, [r3], #1
 8000df2:	e7e1      	b.n	8000db8 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000df4:	b921      	cbnz	r1, 8000e00 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000df6:	1c59      	adds	r1, r3, #1
 8000df8:	6852      	ldr	r2, [r2, #4]
 8000dfa:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e7dc      	b.n	8000dba <UART_Receive_IT+0x26>
 8000e00:	6852      	ldr	r2, [r2, #4]
 8000e02:	1c59      	adds	r1, r3, #1
 8000e04:	6281      	str	r1, [r0, #40]	; 0x28
 8000e06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e0a:	e7f7      	b.n	8000dfc <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	bd10      	pop	{r4, pc}

08000e10 <HAL_UART_ErrorCallback>:
 8000e10:	4770      	bx	lr
	...

08000e14 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e14:	6803      	ldr	r3, [r0, #0]
{
 8000e16:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e18:	681a      	ldr	r2, [r3, #0]
{
 8000e1a:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8000e1c:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000e1e:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000e20:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8000e22:	d107      	bne.n	8000e34 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e24:	0696      	lsls	r6, r2, #26
 8000e26:	d55a      	bpl.n	8000ede <HAL_UART_IRQHandler+0xca>
 8000e28:	068d      	lsls	r5, r1, #26
 8000e2a:	d558      	bpl.n	8000ede <HAL_UART_IRQHandler+0xca>
}
 8000e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8000e30:	f7ff bfb0 	b.w	8000d94 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000e34:	f015 0501 	ands.w	r5, r5, #1
 8000e38:	d102      	bne.n	8000e40 <HAL_UART_IRQHandler+0x2c>
 8000e3a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8000e3e:	d04e      	beq.n	8000ede <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000e40:	07d3      	lsls	r3, r2, #31
 8000e42:	d505      	bpl.n	8000e50 <HAL_UART_IRQHandler+0x3c>
 8000e44:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000e46:	bf42      	ittt	mi
 8000e48:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000e4a:	f043 0301 	orrmi.w	r3, r3, #1
 8000e4e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e50:	0750      	lsls	r0, r2, #29
 8000e52:	d504      	bpl.n	8000e5e <HAL_UART_IRQHandler+0x4a>
 8000e54:	b11d      	cbz	r5, 8000e5e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000e56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e5e:	0793      	lsls	r3, r2, #30
 8000e60:	d504      	bpl.n	8000e6c <HAL_UART_IRQHandler+0x58>
 8000e62:	b11d      	cbz	r5, 8000e6c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000e64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e6c:	0716      	lsls	r6, r2, #28
 8000e6e:	d504      	bpl.n	8000e7a <HAL_UART_IRQHandler+0x66>
 8000e70:	b11d      	cbz	r5, 8000e7a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000e72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d066      	beq.n	8000f4e <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e80:	0695      	lsls	r5, r2, #26
 8000e82:	d504      	bpl.n	8000e8e <HAL_UART_IRQHandler+0x7a>
 8000e84:	0688      	lsls	r0, r1, #26
 8000e86:	d502      	bpl.n	8000e8e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff ff83 	bl	8000d94 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e8e:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8000e90:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e92:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000e94:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000e96:	0711      	lsls	r1, r2, #28
 8000e98:	d402      	bmi.n	8000ea0 <HAL_UART_IRQHandler+0x8c>
 8000e9a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000e9e:	d01a      	beq.n	8000ed6 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8000ea0:	f7ff fdf2 	bl	8000a88 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	695a      	ldr	r2, [r3, #20]
 8000ea8:	0652      	lsls	r2, r2, #25
 8000eaa:	d510      	bpl.n	8000ece <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000eac:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000eae:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eb4:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000eb6:	b150      	cbz	r0, 8000ece <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <HAL_UART_IRQHandler+0x13c>)
 8000eba:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000ebc:	f7ff fa10 	bl	80002e0 <HAL_DMA_Abort_IT>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d044      	beq.n	8000f4e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000ec4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8000ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000eca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ecc:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff ff9e 	bl	8000e10 <HAL_UART_ErrorCallback>
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8000ed6:	f7ff ff9b 	bl	8000e10 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000eda:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000ede:	0616      	lsls	r6, r2, #24
 8000ee0:	d527      	bpl.n	8000f32 <HAL_UART_IRQHandler+0x11e>
 8000ee2:	060d      	lsls	r5, r1, #24
 8000ee4:	d525      	bpl.n	8000f32 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8000ee6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000eea:	2a21      	cmp	r2, #33	; 0x21
 8000eec:	d12f      	bne.n	8000f4e <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000eee:	68a2      	ldr	r2, [r4, #8]
 8000ef0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000ef4:	6a22      	ldr	r2, [r4, #32]
 8000ef6:	d117      	bne.n	8000f28 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8000ef8:	8811      	ldrh	r1, [r2, #0]
 8000efa:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000efe:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000f00:	6921      	ldr	r1, [r4, #16]
 8000f02:	b979      	cbnz	r1, 8000f24 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8000f04:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8000f06:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8000f08:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8000f0a:	3a01      	subs	r2, #1
 8000f0c:	b292      	uxth	r2, r2
 8000f0e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8000f10:	b9ea      	cbnz	r2, 8000f4e <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f18:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8000f24:	3201      	adds	r2, #1
 8000f26:	e7ee      	b.n	8000f06 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8000f28:	1c51      	adds	r1, r2, #1
 8000f2a:	6221      	str	r1, [r4, #32]
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	e7ea      	b.n	8000f08 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000f32:	0650      	lsls	r0, r2, #25
 8000f34:	d50b      	bpl.n	8000f4e <HAL_UART_IRQHandler+0x13a>
 8000f36:	064a      	lsls	r2, r1, #25
 8000f38:	d509      	bpl.n	8000f4e <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f3a:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8000f3c:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f42:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000f44:	2320      	movs	r3, #32
 8000f46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8000f4a:	f7ff ff22 	bl	8000d92 <HAL_UART_TxCpltCallback>
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	08000f55 	.word	0x08000f55

08000f54 <UART_DMAAbortOnError>:
{
 8000f54:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8000f56:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f58:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8000f5a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000f5c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8000f5e:	f7ff ff57 	bl	8000e10 <HAL_UART_ErrorCallback>
 8000f62:	bd08      	pop	{r3, pc}

08000f64 <dbg_register_task>:
} protocol={'#','*', 0,0,0,0,0, {0},{0},{0},0};



uint8_t dbg_register_task(void (*task_routine)(void), uint8_t *task_command, uint8_t args)
{
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f66:	4604      	mov	r4, r0
	uint8_t	 task_command_len  = strlen((char *)task_command);
 8000f68:	4608      	mov	r0, r1
{
 8000f6a:	460e      	mov	r6, r1
 8000f6c:	4617      	mov	r7, r2
	uint8_t	 task_command_len  = strlen((char *)task_command);
 8000f6e:	f7ff f8ed 	bl	800014c <strlen>
 8000f72:	b2c0      	uxtb	r0, r0
 	if (task_routine == NULL ) return FALSE;
 8000f74:	b304      	cbz	r4, 8000fb8 <dbg_register_task+0x54>

	if (task_command == NULL) return FALSE;

	if (task_command_len > 10) return FALSE;
 8000f76:	280a      	cmp	r0, #10
 8000f78:	d81e      	bhi.n	8000fb8 <dbg_register_task+0x54>

	if ((task_pool.taken_task+1) >= task_pool.limit ) return FALSE;
 8000f7a:	4d10      	ldr	r5, [pc, #64]	; (8000fbc <dbg_register_task+0x58>)
 8000f7c:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
 8000f80:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
 8000f84:	1c59      	adds	r1, r3, #1
 8000f86:	4291      	cmp	r1, r2
 8000f88:	da16      	bge.n	8000fb8 <dbg_register_task+0x54>

	task_pool.entry[task_pool.taken_task].args = args;
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	18e9      	adds	r1, r5, r3


	task_pool.entry[task_pool.taken_task].handlers.basic  = task_routine;
 8000f8e:	50ec      	str	r4, [r5, r3]


	task_pool.entry[task_pool.taken_task].command_len = task_command_len;
	memcpy (task_pool.entry[task_pool.taken_task].command  , task_command,task_command_len);
 8000f90:	3304      	adds	r3, #4
	task_pool.entry[task_pool.taken_task].args = args;
 8000f92:	73cf      	strb	r7, [r1, #15]
	task_pool.entry[task_pool.taken_task].command_len = task_command_len;
 8000f94:	7388      	strb	r0, [r1, #14]
	memcpy (task_pool.entry[task_pool.taken_task].command  , task_command,task_command_len);
 8000f96:	4602      	mov	r2, r0
 8000f98:	4631      	mov	r1, r6
 8000f9a:	18e8      	adds	r0, r5, r3
 8000f9c:	f000 fbe9 	bl	8001772 <memcpy>

	task_pool.taken_task++;
 8000fa0:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0

	printf("Task %x with cmd [%s] OK\r\n", task_routine, task_command);
 8000fa4:	4632      	mov	r2, r6
	task_pool.taken_task++;
 8000fa6:	3301      	adds	r3, #1
	printf("Task %x with cmd [%s] OK\r\n", task_routine, task_command);
 8000fa8:	4621      	mov	r1, r4
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <dbg_register_task+0x5c>)
	task_pool.taken_task++;
 8000fac:	f885 30a0 	strb.w	r3, [r5, #160]	; 0xa0
	printf("Task %x with cmd [%s] OK\r\n", task_routine, task_command);
 8000fb0:	f000 fbf2 	bl	8001798 <iprintf>
	return TRUE;
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 	if (task_routine == NULL ) return FALSE;
 8000fb8:	2000      	movs	r0, #0

}
 8000fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fbc:	200003ac 	.word	0x200003ac
 8000fc0:	08002818 	.word	0x08002818

08000fc4 <dbg_store_packet>:

void dbg_store_packet(char recieved_data)
{
	if (recieved_data == protocol.init_char) {
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <dbg_store_packet+0x48>)
 8000fc6:	7813      	ldrb	r3, [r2, #0]
 8000fc8:	4283      	cmp	r3, r0
 8000fca:	4613      	mov	r3, r2
 8000fcc:	d108      	bne.n	8000fe0 <dbg_store_packet+0x1c>

		protocol.tail     = false;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	7113      	strb	r3, [r2, #4]
		protocol.complete = false;
 8000fd2:	7893      	ldrb	r3, [r2, #2]
		protocol.start    = true;
 8000fd4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	7093      	strb	r3, [r2, #2]
 8000fde:	4770      	bx	lr
		return;
	}

	if ((recieved_data == protocol.end_char)  && protocol.start==true) {
 8000fe0:	7852      	ldrb	r2, [r2, #1]
 8000fe2:	4282      	cmp	r2, r0
 8000fe4:	d107      	bne.n	8000ff6 <dbg_store_packet+0x32>
 8000fe6:	789a      	ldrb	r2, [r3, #2]
 8000fe8:	0791      	lsls	r1, r2, #30

		protocol.complete = true;
		protocol.start    = false;
 8000fea:	bf42      	ittt	mi
 8000fec:	f042 0201 	orrmi.w	r2, r2, #1
 8000ff0:	f36f 0241 	bfcmi	r2, #1, #1
 8000ff4:	709a      	strbmi	r2, [r3, #2]
	}

	protocol.data_in[ protocol.tail ] = recieved_data;
 8000ff6:	791a      	ldrb	r2, [r3, #4]
 8000ff8:	1899      	adds	r1, r3, r2
	protocol.tail++;
 8000ffa:	3201      	adds	r2, #1
 8000ffc:	b2d2      	uxtb	r2, r2

	if ( protocol.tail >= (UART_RX_BUFFER_SIZE-1))
 8000ffe:	2aff      	cmp	r2, #255	; 0xff
		protocol.tail=false;
 8001000:	bf08      	it	eq
 8001002:	2200      	moveq	r2, #0
	protocol.data_in[ protocol.tail ] = recieved_data;
 8001004:	f881 0206 	strb.w	r0, [r1, #518]	; 0x206
		protocol.tail=false;
 8001008:	711a      	strb	r2, [r3, #4]
 800100a:	4770      	bx	lr
 800100c:	20000008 	.word	0x20000008

08001010 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001010:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == DEBUG_USART_INSTANCE) {
 8001012:	6802      	ldr	r2, [r0, #0]
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <HAL_UART_RxCpltCallback+0x24>)
{
 8001016:	4604      	mov	r4, r0
	if (huart->Instance == DEBUG_USART_INSTANCE) {
 8001018:	429a      	cmp	r2, r3
 800101a:	d10a      	bne.n	8001032 <HAL_UART_RxCpltCallback+0x22>
		dbg_store_packet(Rx_data[0]);
 800101c:	4d06      	ldr	r5, [pc, #24]	; (8001038 <HAL_UART_RxCpltCallback+0x28>)
 800101e:	7828      	ldrb	r0, [r5, #0]
 8001020:	f7ff ffd0 	bl	8000fc4 <dbg_store_packet>
		HAL_UART_Receive_IT(huart, (uint8_t *)Rx_data, 1);
 8001024:	4629      	mov	r1, r5
 8001026:	4620      	mov	r0, r4
	}
}
 8001028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(huart, (uint8_t *)Rx_data, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	f7ff be89 	b.w	8000d44 <HAL_UART_Receive_IT>
 8001032:	bd38      	pop	{r3, r4, r5, pc}
 8001034:	40004400 	.word	0x40004400
 8001038:	200003a8 	.word	0x200003a8

0800103c <dbg_command_scan>:

void dbg_command_scan(void)
{
 800103c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!protocol.complete) { return;}
 8001040:	4c41      	ldr	r4, [pc, #260]	; (8001148 <dbg_command_scan+0x10c>)
 8001042:	78a3      	ldrb	r3, [r4, #2]
 8001044:	07da      	lsls	r2, r3, #31
 8001046:	d57c      	bpl.n	8001142 <dbg_command_scan+0x106>

	protocol.complete	= false;
	protocol.data_in[protocol.tail+1] = '\0';
 8001048:	2500      	movs	r5, #0
 800104a:	7922      	ldrb	r2, [r4, #4]
	protocol.complete	= false;
 800104c:	f36f 0300 	bfc	r3, #0, #1
 8001050:	70a3      	strb	r3, [r4, #2]
	protocol.data_in[protocol.tail+1] = '\0';
 8001052:	18a3      	adds	r3, r4, r2
 8001054:	f883 5207 	strb.w	r5, [r3, #519]	; 0x207
	protocol.command	= protocol.data_in[1];
 8001058:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
	memcpy(protocol.parameters,  protocol.data_in,(protocol.tail-1));
 800105c:	f204 2106 	addw	r1, r4, #518	; 0x206
 8001060:	3a01      	subs	r2, #1
 8001062:	f504 7083 	add.w	r0, r4, #262	; 0x106
	protocol.command	= protocol.data_in[1];
 8001066:	7163      	strb	r3, [r4, #5]
	memcpy(protocol.parameters,  protocol.data_in,(protocol.tail-1));
 8001068:	f000 fb83 	bl	8001772 <memcpy>


static uint16_t dbg_has_arguments(uint8_t *msg)
{
	uint8_t *p_char = 0;
	p_char = strchr((char *)msg,' ');
 800106c:	2120      	movs	r1, #32
 800106e:	f504 7083 	add.w	r0, r4, #262	; 0x106
 8001072:	f000 fcbb 	bl	80019ec <strchr>
	if (p_char)
 8001076:	2800      	cmp	r0, #0
 8001078:	d05a      	beq.n	8001130 <dbg_command_scan+0xf4>
 800107a:	1d41      	adds	r1, r0, #5
 	uint16_t convertion_offset = 0x10;

 	if (convertion_type != 'h')
 		convertion_offset = 0xa;

 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 800107c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8001080:	b17b      	cbz	r3, 80010a2 <dbg_command_scan+0x66>
 	if ( hex_char <= 'F' && hex_char >= 'A') return (hex_char -'A')+10;
 8001082:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001086:	2a05      	cmp	r2, #5
 8001088:	d846      	bhi.n	8001118 <dbg_command_scan+0xdc>
 800108a:	3b37      	subs	r3, #55	; 0x37
 	if ( hex_char <= 'f' && hex_char >= 'a') return (hex_char -'a')+10;
 800108c:	b2db      	uxtb	r3, r3

 		converted_digit = ( hexascii_to_hex(*stream_pointer));
 		if (INVALID_DIGIT_CONVERTION == converted_digit) {
 800108e:	2bff      	cmp	r3, #255	; 0xff
 		converted_digit = ( hexascii_to_hex(*stream_pointer));
 8001090:	b29a      	uxth	r2, r3
 		if (INVALID_DIGIT_CONVERTION == converted_digit) {
 8001092:	d006      	beq.n	80010a2 <dbg_command_scan+0x66>
			break;
		}
		hex_result = (hex_result * convertion_offset) + converted_digit;
 8001094:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001098:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 800109c:	4288      	cmp	r0, r1
		hex_result = (hex_result * convertion_offset) + converted_digit;
 800109e:	b2ad      	uxth	r5, r5
 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 80010a0:	d1ec      	bne.n	800107c <dbg_command_scan+0x40>
	uint8_t task_id = 0;
	uint16_t args   = dbg_has_arguments(msg);
	uint8_t cmd_len;
	uint8_t *cmd_str;

	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 80010a2:	f04f 0800 	mov.w	r8, #0
 80010a6:	4e29      	ldr	r6, [pc, #164]	; (800114c <dbg_command_scan+0x110>)

		cmd_str = task_pool.entry[task_id].command;
		cmd_len = task_pool.entry[task_id].command_len;

		if ( !STR_CMP(msg ,cmd_str,cmd_len))
 80010a8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8001150 <dbg_command_scan+0x114>
	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 80010ac:	f896 a0a0 	ldrb.w	sl, [r6, #160]	; 0xa0
 80010b0:	f106 0904 	add.w	r9, r6, #4
 80010b4:	fa5f f388 	uxtb.w	r3, r8
 80010b8:	4553      	cmp	r3, sl
 80010ba:	d214      	bcs.n	80010e6 <dbg_command_scan+0xaa>
		if ( !STR_CMP(msg ,cmd_str,cmd_len))
 80010bc:	f899 200a 	ldrb.w	r2, [r9, #10]
 80010c0:	4649      	mov	r1, r9
 80010c2:	4658      	mov	r0, fp
 80010c4:	f000 fb46 	bl	8001754 <memcmp>
		cmd_str = task_pool.entry[task_id].command;
 80010c8:	4647      	mov	r7, r8
 80010ca:	f109 0910 	add.w	r9, r9, #16
 80010ce:	f108 0801 	add.w	r8, r8, #1
		if ( !STR_CMP(msg ,cmd_str,cmd_len))
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d1ee      	bne.n	80010b4 <dbg_command_scan+0x78>
 80010d6:	013b      	lsls	r3, r7, #4
			continue;

		if (args && task_pool.entry[task_id].args){
 80010d8:	b365      	cbz	r5, 8001134 <dbg_command_scan+0xf8>
 80010da:	18f2      	adds	r2, r6, r3
 80010dc:	7bd2      	ldrb	r2, [r2, #15]
 80010de:	b34a      	cbz	r2, 8001134 <dbg_command_scan+0xf8>
			task_pool.entry[task_id].handlers.uint_args(args);
 80010e0:	58f3      	ldr	r3, [r6, r3]
 80010e2:	4628      	mov	r0, r5
 80010e4:	4798      	blx	r3
	protocol.tail		= false;
 80010e6:	2500      	movs	r5, #0
	protocol.start		= false;
 80010e8:	78a3      	ldrb	r3, [r4, #2]
	memset(protocol.parameters, false, UART_RX_BUFFER_SIZE);
 80010ea:	4629      	mov	r1, r5
	protocol.complete	= false;
 80010ec:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80010f0:	f365 0300 	bfi	r3, r5, #0, #1
	memset(protocol.parameters, false, UART_RX_BUFFER_SIZE);
 80010f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f8:	4815      	ldr	r0, [pc, #84]	; (8001150 <dbg_command_scan+0x114>)
	protocol.tail		= false;
 80010fa:	7125      	strb	r5, [r4, #4]
	protocol.command	= false;
 80010fc:	7165      	strb	r5, [r4, #5]
	protocol.end		= false;
 80010fe:	f884 5306 	strb.w	r5, [r4, #774]	; 0x306
	protocol.complete	= false;
 8001102:	70a3      	strb	r3, [r4, #2]
	memset(protocol.parameters, false, UART_RX_BUFFER_SIZE);
 8001104:	f000 fb40 	bl	8001788 <memset>
	memset(protocol.data_in   , false, UART_RX_BUFFER_SIZE);
 8001108:	4629      	mov	r1, r5
}
 800110a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memset(protocol.data_in   , false, UART_RX_BUFFER_SIZE);
 800110e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001112:	4810      	ldr	r0, [pc, #64]	; (8001154 <dbg_command_scan+0x118>)
 8001114:	f000 bb38 	b.w	8001788 <memset>
 	if ( hex_char <= 'f' && hex_char >= 'a') return (hex_char -'a')+10;
 8001118:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800111c:	2a05      	cmp	r2, #5
 800111e:	d801      	bhi.n	8001124 <dbg_command_scan+0xe8>
 8001120:	3b57      	subs	r3, #87	; 0x57
 8001122:	e7b3      	b.n	800108c <dbg_command_scan+0x50>
 	if ( hex_char <= '9' && hex_char >= '0') return (hex_char -'0');
 8001124:	3b30      	subs	r3, #48	; 0x30
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b09      	cmp	r3, #9
 800112a:	bf88      	it	hi
 800112c:	23ff      	movhi	r3, #255	; 0xff
 800112e:	e7ae      	b.n	800108e <dbg_command_scan+0x52>
	return 0;
 8001130:	4605      	mov	r5, r0
 8001132:	e7b6      	b.n	80010a2 <dbg_command_scan+0x66>
			return;
		}

		if (! (args | task_pool.entry[task_id].args)) {
 8001134:	18f2      	adds	r2, r6, r3
 8001136:	7bd2      	ldrb	r2, [r2, #15]
 8001138:	432a      	orrs	r2, r5
 800113a:	d1d4      	bne.n	80010e6 <dbg_command_scan+0xaa>

			task_pool.entry[task_id].handlers.void_args();
 800113c:	58f3      	ldr	r3, [r6, r3]
 800113e:	4798      	blx	r3
 8001140:	e7d1      	b.n	80010e6 <dbg_command_scan+0xaa>
 8001142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008
 800114c:	200003ac 	.word	0x200003ac
 8001150:	2000010e 	.word	0x2000010e
 8001154:	2000020e 	.word	0x2000020e

08001158 <dbg_setup>:
{
 8001158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__HAL_UART_CLEAR_OREFLAG(UART_DBG_PORT);
 800115a:	2200      	movs	r2, #0
 800115c:	4811      	ldr	r0, [pc, #68]	; (80011a4 <dbg_setup+0x4c>)
 800115e:	9201      	str	r2, [sp, #4]
 8001160:	6803      	ldr	r3, [r0, #0]
 8001162:	6819      	ldr	r1, [r3, #0]
 8001164:	9101      	str	r1, [sp, #4]
 8001166:	6859      	ldr	r1, [r3, #4]
 8001168:	9101      	str	r1, [sp, #4]
 800116a:	9901      	ldr	r1, [sp, #4]
	__HAL_UART_CLEAR_NEFLAG(UART_DBG_PORT);
 800116c:	9202      	str	r2, [sp, #8]
 800116e:	6819      	ldr	r1, [r3, #0]
 8001170:	9102      	str	r1, [sp, #8]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	9102      	str	r1, [sp, #8]
 8001176:	9902      	ldr	r1, [sp, #8]
	__HAL_UART_CLEAR_FEFLAG(UART_DBG_PORT);
 8001178:	9203      	str	r2, [sp, #12]
 800117a:	681a      	ldr	r2, [r3, #0]
	HAL_UART_Receive_IT(UART_DBG_PORT,(uint8_t *)Rx_data,1);
 800117c:	490a      	ldr	r1, [pc, #40]	; (80011a8 <dbg_setup+0x50>)
	__HAL_UART_CLEAR_FEFLAG(UART_DBG_PORT);
 800117e:	9203      	str	r2, [sp, #12]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	9203      	str	r2, [sp, #12]
 8001184:	9a03      	ldr	r2, [sp, #12]
	__HAL_UART_DISABLE_IT(UART_DBG_PORT, UART_IT_ERR);
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	615a      	str	r2, [r3, #20]
	HAL_UART_Receive_IT(UART_DBG_PORT,(uint8_t *)Rx_data,1);
 800118e:	2201      	movs	r2, #1
 8001190:	f7ff fdd8 	bl	8000d44 <HAL_UART_Receive_IT>
	task_pool.limit = MAX_TASK;
 8001194:	220a      	movs	r2, #10
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <dbg_setup+0x54>)
 8001198:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 800119c:	b005      	add	sp, #20
 800119e:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a2:	bf00      	nop
 80011a4:	20000490 	.word	0x20000490
 80011a8:	200003a8 	.word	0x200003a8
 80011ac:	200003ac 	.word	0x200003ac

080011b0 <generate_ticket>:
		LD2_GPIO_Port->ODR ^=LD2_Pin;
	}

}
void generate_ticket(uint16_t tickets)
{
 80011b0:	b570      	push	{r4, r5, r6, lr}

	ASSERT_ACTIVATION;
 80011b2:	4c12      	ldr	r4, [pc, #72]	; (80011fc <generate_ticket+0x4c>)
{
 80011b4:	4605      	mov	r5, r0
	ASSERT_ACTIVATION;
 80011b6:	68e3      	ldr	r3, [r4, #12]
	HAL_Delay(100);
 80011b8:	2064      	movs	r0, #100	; 0x64
	ASSERT_ACTIVATION;
 80011ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011be:	60e3      	str	r3, [r4, #12]
	HAL_Delay(100);
 80011c0:	f7ff f814 	bl	80001ec <HAL_Delay>
	while(tickets-->0) {
		TICKET_GPIO_Port->ODR |= TICKET_Pin;
		HAL_Delay(50);
		TICKET_GPIO_Port->ODR &=~TICKET_Pin;
		HAL_Delay(10);
		LD2_GPIO_Port->ODR ^=LD2_Pin;
 80011c4:	4e0e      	ldr	r6, [pc, #56]	; (8001200 <generate_ticket+0x50>)
		TICKET_GPIO_Port->ODR |= TICKET_Pin;
 80011c6:	68e3      	ldr	r3, [r4, #12]
	while(tickets-->0) {
 80011c8:	b91d      	cbnz	r5, 80011d2 <generate_ticket+0x22>
	}
	DE_ASSER_ACTIVATION;
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	60e3      	str	r3, [r4, #12]
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
		TICKET_GPIO_Port->ODR |= TICKET_Pin;
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	60e3      	str	r3, [r4, #12]
		HAL_Delay(50);
 80011d8:	2032      	movs	r0, #50	; 0x32
 80011da:	f7ff f807 	bl	80001ec <HAL_Delay>
		TICKET_GPIO_Port->ODR &=~TICKET_Pin;
 80011de:	68e3      	ldr	r3, [r4, #12]
		HAL_Delay(10);
 80011e0:	200a      	movs	r0, #10
		TICKET_GPIO_Port->ODR &=~TICKET_Pin;
 80011e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e6:	60e3      	str	r3, [r4, #12]
		HAL_Delay(10);
 80011e8:	f7ff f800 	bl	80001ec <HAL_Delay>
		LD2_GPIO_Port->ODR ^=LD2_Pin;
 80011ec:	68f3      	ldr	r3, [r6, #12]
 80011ee:	3d01      	subs	r5, #1
 80011f0:	f083 0320 	eor.w	r3, r3, #32
 80011f4:	60f3      	str	r3, [r6, #12]
 80011f6:	b2ad      	uxth	r5, r5
 80011f8:	e7e5      	b.n	80011c6 <generate_ticket+0x16>
 80011fa:	bf00      	nop
 80011fc:	40011000 	.word	0x40011000
 8001200:	40010800 	.word	0x40010800

08001204 <get_version>:
}

void get_version(void){
	printf("version is v1.0\r\n");
 8001204:	4801      	ldr	r0, [pc, #4]	; (800120c <get_version+0x8>)
 8001206:	f000 bb3b 	b.w	8001880 <puts>
 800120a:	bf00      	nop
 800120c:	0800283b 	.word	0x0800283b

08001210 <echo_reply>:
}

void echo_reply(void){
	printf("ECHO !\r\n");
 8001210:	4801      	ldr	r0, [pc, #4]	; (8001218 <echo_reply+0x8>)
 8001212:	f000 bb35 	b.w	8001880 <puts>
 8001216:	bf00      	nop
 8001218:	08002833 	.word	0x08002833

0800121c <blink>:
{
 800121c:	b510      	push	{r4, lr}
	if (HAL_GetTick() >millis) {
 800121e:	f7fe ffdf 	bl	80001e0 <HAL_GetTick>
 8001222:	4c07      	ldr	r4, [pc, #28]	; (8001240 <blink+0x24>)
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	4298      	cmp	r0, r3
 8001228:	d908      	bls.n	800123c <blink+0x20>
		millis = HAL_GetTick()+250;
 800122a:	f7fe ffd9 	bl	80001e0 <HAL_GetTick>
		LD2_GPIO_Port->ODR ^=LD2_Pin;
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <blink+0x28>)
		millis = HAL_GetTick()+250;
 8001230:	30fa      	adds	r0, #250	; 0xfa
 8001232:	6020      	str	r0, [r4, #0]
		LD2_GPIO_Port->ODR ^=LD2_Pin;
 8001234:	68d3      	ldr	r3, [r2, #12]
 8001236:	f083 0320 	eor.w	r3, r3, #32
 800123a:	60d3      	str	r3, [r2, #12]
 800123c:	bd10      	pop	{r4, pc}
 800123e:	bf00      	nop
 8001240:	20000394 	.word	0x20000394
 8001244:	40010800 	.word	0x40010800

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b510      	push	{r4, lr}
 800124a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124c:	2228      	movs	r2, #40	; 0x28
 800124e:	2100      	movs	r1, #0
 8001250:	a806      	add	r0, sp, #24
 8001252:	f000 fa99 	bl	8001788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001256:	2214      	movs	r2, #20
 8001258:	2100      	movs	r1, #0
 800125a:	a801      	add	r0, sp, #4
 800125c:	f000 fa94 	bl	8001788 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001260:	2301      	movs	r3, #1
 8001262:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001264:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001266:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001268:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800126a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001270:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001272:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001274:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001276:	f7ff f96d 	bl	8000554 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001280:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001282:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001284:	4621      	mov	r1, r4
 8001286:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001290:	f7ff fb28 	bl	80008e4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001294:	b010      	add	sp, #64	; 0x40
 8001296:	bd10      	pop	{r4, pc}

08001298 <main>:
	setvbuf(stdout, NULL, _IONBF, 0);
 8001298:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <main+0x1ac>)
{
 800129a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	setvbuf(stdout, NULL, _IONBF, 0);
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	2300      	movs	r3, #0
{
 80012a2:	b088      	sub	sp, #32
	setvbuf(stdout, NULL, _IONBF, 0);
 80012a4:	4619      	mov	r1, r3
 80012a6:	2202      	movs	r2, #2
 80012a8:	6880      	ldr	r0, [r0, #8]
 80012aa:	f000 faf1 	bl	8001890 <setvbuf>
  HAL_Init();
 80012ae:	f7fe ff79 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 80012b2:	f7ff ffc9 	bl	8001248 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	2210      	movs	r2, #16
 80012b8:	2100      	movs	r1, #0
 80012ba:	eb0d 0002 	add.w	r0, sp, r2
 80012be:	f000 fa63 	bl	8001788 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b61      	ldr	r3, [pc, #388]	; (8001448 <main+0x1b0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_INPUT_Pin|TICKET_MODE_Pin|TICKET_Pin|ACTIVATION_INPUT_Pin, GPIO_PIN_RESET);
 80012c4:	4d61      	ldr	r5, [pc, #388]	; (800144c <main+0x1b4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c8:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	f042 0210 	orr.w	r2, r2, #16
 80012ce:	619a      	str	r2, [r3, #24]
 80012d0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012d2:	485f      	ldr	r0, [pc, #380]	; (8001450 <main+0x1b8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d4:	f002 0210 	and.w	r2, r2, #16
 80012d8:	9200      	str	r2, [sp, #0]
 80012da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012dc:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e0:	f042 0220 	orr.w	r2, r2, #32
 80012e4:	619a      	str	r2, [r3, #24]
 80012e6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	f002 0220 	and.w	r2, r2, #32
 80012ee:	9201      	str	r2, [sp, #4]
 80012f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	f042 0204 	orr.w	r2, r2, #4
 80012fa:	619a      	str	r2, [r3, #24]
 80012fc:	699a      	ldr	r2, [r3, #24]
  huart1.Init.BaudRate = 115200;
 80012fe:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	f002 0204 	and.w	r2, r2, #4
 8001306:	9202      	str	r2, [sp, #8]
 8001308:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	f042 0208 	orr.w	r2, r2, #8
 8001310:	619a      	str	r2, [r3, #24]
 8001312:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	9303      	str	r3, [sp, #12]
 800131c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131e:	f7ff f907 	bl	8000530 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SENSOR_INPUT_Pin|TICKET_MODE_Pin|TICKET_Pin|ACTIVATION_INPUT_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001328:	4628      	mov	r0, r5
 800132a:	f7ff f901 	bl	8000530 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001332:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001334:	4b47      	ldr	r3, [pc, #284]	; (8001454 <main+0x1bc>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001336:	a904      	add	r1, sp, #16
 8001338:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800133a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133e:	f7ff f817 	bl	8000370 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|EXTERNAL_INPUT_Pin
 8001342:	f641 433f 	movw	r3, #7231	; 0x1c3f
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	a904      	add	r1, sp, #16
 8001348:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|EXTERNAL_INPUT_Pin
 800134a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001350:	f7ff f80e 	bl	8000370 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8001354:	f649 13d3 	movw	r3, #39379	; 0x99d3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	a904      	add	r1, sp, #16
 800135a:	483d      	ldr	r0, [pc, #244]	; (8001450 <main+0x1b8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 800135c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f7ff f805 	bl	8000370 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001366:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001368:	a904      	add	r1, sp, #16
 800136a:	4839      	ldr	r0, [pc, #228]	; (8001450 <main+0x1b8>)
  GPIO_InitStruct.Pin = LD2_Pin;
 800136c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001374:	f7fe fffc 	bl	8000370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001378:	f64f 73f7 	movw	r3, #65527	; 0xfff7
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	a904      	add	r1, sp, #16
 800137e:	4836      	ldr	r0, [pc, #216]	; (8001458 <main+0x1c0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001380:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001382:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f7fe fff3 	bl	8000370 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_INPUT_Pin TICKET_MODE_Pin TICKET_Pin ACTIVATION_INPUT_Pin */
  GPIO_InitStruct.Pin = SENSOR_INPUT_Pin|TICKET_MODE_Pin|TICKET_Pin|ACTIVATION_INPUT_Pin;
 800138a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	a904      	add	r1, sp, #16
 8001390:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = SENSOR_INPUT_Pin|TICKET_MODE_Pin|TICKET_Pin|ACTIVATION_INPUT_Pin;
 8001392:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001398:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f7fe ffe9 	bl	8000370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800139e:	2304      	movs	r3, #4
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a0:	270c      	movs	r7, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a2:	a904      	add	r1, sp, #16
 80013a4:	482d      	ldr	r0, [pc, #180]	; (800145c <main+0x1c4>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ac:	f7fe ffe0 	bl	8000370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013b0:	4622      	mov	r2, r4
 80013b2:	4621      	mov	r1, r4
 80013b4:	2028      	movs	r0, #40	; 0x28
 80013b6:	f7fe ff3d 	bl	8000234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ba:	2028      	movs	r0, #40	; 0x28
 80013bc:	f7fe ff6e 	bl	800029c <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80013c0:	4827      	ldr	r0, [pc, #156]	; (8001460 <main+0x1c8>)
  huart1.Init.BaudRate = 115200;
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <main+0x1cc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c4:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80013c6:	e880 0108 	stmia.w	r0, {r3, r8}
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013ca:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013cc:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ce:	6147      	str	r7, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d0:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013d4:	f7ff fc2c 	bl	8000c30 <HAL_UART_Init>
  huart2.Instance = USART2;
 80013d8:	4823      	ldr	r0, [pc, #140]	; (8001468 <main+0x1d0>)
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <main+0x1d4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013dc:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80013de:	e880 0108 	stmia.w	r0, {r3, r8}
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e2:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e4:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e6:	6147      	str	r7, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e8:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ea:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ec:	f7ff fc20 	bl	8000c30 <HAL_UART_Init>
	DE_ASSER_ACTIVATION;
 80013f0:	68eb      	ldr	r3, [r5, #12]
 80013f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f6:	60eb      	str	r3, [r5, #12]
	dbg_setup();
 80013f8:	f7ff feae 	bl	8001158 <dbg_setup>
	printf("KIR03 Assistant starts %s %s \r\n",__DATE__,__TIME__);
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <main+0x1d8>)
 80013fe:	491d      	ldr	r1, [pc, #116]	; (8001474 <main+0x1dc>)
 8001400:	481d      	ldr	r0, [pc, #116]	; (8001478 <main+0x1e0>)
 8001402:	f000 f9c9 	bl	8001798 <iprintf>
	dbg_register_task(&get_version, (uint8_t *)"version",0);
 8001406:	4622      	mov	r2, r4
 8001408:	491c      	ldr	r1, [pc, #112]	; (800147c <main+0x1e4>)
 800140a:	481d      	ldr	r0, [pc, #116]	; (8001480 <main+0x1e8>)
 800140c:	f7ff fdaa 	bl	8000f64 <dbg_register_task>
	dbg_register_task(&echo_reply, (uint8_t *)"echo",0);
 8001410:	4622      	mov	r2, r4
 8001412:	491c      	ldr	r1, [pc, #112]	; (8001484 <main+0x1ec>)
 8001414:	481c      	ldr	r0, [pc, #112]	; (8001488 <main+0x1f0>)
 8001416:	f7ff fda5 	bl	8000f64 <dbg_register_task>
	dbg_register_task(&generate_ticket,(uint8_t *)"tickets",1);
 800141a:	4632      	mov	r2, r6
 800141c:	491b      	ldr	r1, [pc, #108]	; (800148c <main+0x1f4>)
 800141e:	481c      	ldr	r0, [pc, #112]	; (8001490 <main+0x1f8>)
 8001420:	f7ff fda0 	bl	8000f64 <dbg_register_task>
	dbg_command_scan();
 8001424:	f7ff fe0a 	bl	800103c <dbg_command_scan>
	while (!(B1_GPIO_Port->IDR &B1_Pin)) {
 8001428:	2300      	movs	r3, #0
 800142a:	68aa      	ldr	r2, [r5, #8]
 800142c:	0492      	lsls	r2, r2, #18
 800142e:	d506      	bpl.n	800143e <main+0x1a6>
	if (start_tickets) {
 8001430:	b113      	cbz	r3, 8001438 <main+0x1a0>
		generate_ticket(tickets);
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff febc 	bl	80011b0 <generate_ticket>
	blink();
 8001438:	f7ff fef0 	bl	800121c <blink>
	dbg_command_scan();
 800143c:	e7f2      	b.n	8001424 <main+0x18c>
		tickets      = 25;
 800143e:	2419      	movs	r4, #25
		start_tickets = 1;
 8001440:	2301      	movs	r3, #1
 8001442:	e7f2      	b.n	800142a <main+0x192>
 8001444:	20000314 	.word	0x20000314
 8001448:	40021000 	.word	0x40021000
 800144c:	40011000 	.word	0x40011000
 8001450:	40010800 	.word	0x40010800
 8001454:	10110000 	.word	0x10110000
 8001458:	40010c00 	.word	0x40010c00
 800145c:	40011400 	.word	0x40011400
 8001460:	20000450 	.word	0x20000450
 8001464:	40013800 	.word	0x40013800
 8001468:	20000490 	.word	0x20000490
 800146c:	40004400 	.word	0x40004400
 8001470:	0800284c 	.word	0x0800284c
 8001474:	08002855 	.word	0x08002855
 8001478:	08002861 	.word	0x08002861
 800147c:	08002881 	.word	0x08002881
 8001480:	08001205 	.word	0x08001205
 8001484:	08002889 	.word	0x08002889
 8001488:	08001211 	.word	0x08001211
 800148c:	0800288e 	.word	0x0800288e
 8001490:	080011b1 	.word	0x080011b1

08001494 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_MspInit+0x3c>)
{
 8001496:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	699a      	ldr	r2, [r3, #24]
 80014a2:	f002 0201 	and.w	r2, r2, #1
 80014a6:	9200      	str	r2, [sp, #0]
 80014a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	69da      	ldr	r2, [r3, #28]
 80014ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014b0:	61da      	str	r2, [r3, #28]
 80014b2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014be:	6853      	ldr	r3, [r2, #4]
 80014c0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	b002      	add	sp, #8
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000

080014d8 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	2210      	movs	r2, #16
{
 80014da:	b510      	push	{r4, lr}
 80014dc:	4604      	mov	r4, r0
 80014de:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	eb0d 0002 	add.w	r0, sp, r2
 80014e4:	2100      	movs	r1, #0
 80014e6:	f000 f94f 	bl	8001788 <memset>
  if(huart->Instance==USART1)
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	4a2d      	ldr	r2, [pc, #180]	; (80015a4 <HAL_UART_MspInit+0xcc>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d131      	bne.n	8001556 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_UART_MspInit+0xd0>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	482c      	ldr	r0, [pc, #176]	; (80015ac <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80014fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001504:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001508:	9200      	str	r2, [sp, #0]
 800150a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	f042 0204 	orr.w	r2, r2, #4
 8001512:	619a      	str	r2, [r3, #24]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800151e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001522:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f7fe ff20 	bl	8000370 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001530:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	a904      	add	r1, sp, #16
 8001536:	481d      	ldr	r0, [pc, #116]	; (80015ac <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001538:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f7fe ff17 	bl	8000370 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001542:	2025      	movs	r0, #37	; 0x25
 8001544:	4622      	mov	r2, r4
 8001546:	4621      	mov	r1, r4
 8001548:	f7fe fe74 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800154c:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800154e:	f7fe fea5 	bl	800029c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001552:	b008      	add	sp, #32
 8001554:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <HAL_UART_MspInit+0xd8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d1fa      	bne.n	8001552 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_UART_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8001560:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	4812      	ldr	r0, [pc, #72]	; (80015ac <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001564:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001568:	61da      	str	r2, [r3, #28]
 800156a:	69da      	ldr	r2, [r3, #28]
 800156c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001570:	9202      	str	r2, [sp, #8]
 8001572:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	699a      	ldr	r2, [r3, #24]
 8001576:	f042 0204 	orr.w	r2, r2, #4
 800157a:	619a      	str	r2, [r3, #24]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	9303      	str	r3, [sp, #12]
 8001584:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001586:	230c      	movs	r3, #12
 8001588:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f7fe feee 	bl	8000370 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2026      	movs	r0, #38	; 0x26
 8001598:	4611      	mov	r1, r2
 800159a:	f7fe fe4b 	bl	8000234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800159e:	2026      	movs	r0, #38	; 0x26
 80015a0:	e7d5      	b.n	800154e <HAL_UART_MspInit+0x76>
 80015a2:	bf00      	nop
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010800 	.word	0x40010800
 80015b0:	40004400 	.word	0x40004400

080015b4 <NMI_Handler>:
 80015b4:	4770      	bx	lr

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	e7fe      	b.n	80015b8 <MemManage_Handler>

080015ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler>

080015be <SVC_Handler>:
 80015be:	4770      	bx	lr

080015c0 <DebugMon_Handler>:
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c4:	f7fe be00 	b.w	80001c8 <HAL_IncTick>

080015c8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015c8:	4801      	ldr	r0, [pc, #4]	; (80015d0 <USART1_IRQHandler+0x8>)
 80015ca:	f7ff bc23 	b.w	8000e14 <HAL_UART_IRQHandler>
 80015ce:	bf00      	nop
 80015d0:	20000450 	.word	0x20000450

080015d4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015d4:	4801      	ldr	r0, [pc, #4]	; (80015dc <USART2_IRQHandler+0x8>)
 80015d6:	f7ff bc1d 	b.w	8000e14 <HAL_UART_IRQHandler>
 80015da:	bf00      	nop
 80015dc:	20000490 	.word	0x20000490

080015e0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015e4:	f7fe bfaa 	b.w	800053c <HAL_GPIO_EXTI_IRQHandler>

080015e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	460e      	mov	r6, r1
 80015ec:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	460c      	mov	r4, r1
 80015f0:	1ba3      	subs	r3, r4, r6
 80015f2:	429d      	cmp	r5, r3
 80015f4:	dc01      	bgt.n	80015fa <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80015f6:	4628      	mov	r0, r5
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80015fa:	f3af 8000 	nop.w
 80015fe:	f804 0b01 	strb.w	r0, [r4], #1
 8001602:	e7f5      	b.n	80015f0 <_read+0x8>

08001604 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001604:	b510      	push	{r4, lr}



	HAL_UART_Transmit( &huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
{
 800160a:	4614      	mov	r4, r2
	HAL_UART_Transmit( &huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <_write+0x14>)
 800160e:	b292      	uxth	r2, r2
 8001610:	f7ff fb3c 	bl	8000c8c <HAL_UART_Transmit>

	return len;
}
 8001614:	4620      	mov	r0, r4
 8001616:	bd10      	pop	{r4, pc}
 8001618:	20000490 	.word	0x20000490

0800161c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800161c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <_sbrk+0x2c>)
{
 8001620:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001622:	6819      	ldr	r1, [r3, #0]
 8001624:	b909      	cbnz	r1, 800162a <_sbrk+0xe>
		heap_end = &end;
 8001626:	4909      	ldr	r1, [pc, #36]	; (800164c <_sbrk+0x30>)
 8001628:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800162a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800162c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800162e:	4402      	add	r2, r0
 8001630:	428a      	cmp	r2, r1
 8001632:	d906      	bls.n	8001642 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001634:	f000 f864 	bl	8001700 <__errno>
 8001638:	230c      	movs	r3, #12
 800163a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8001642:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001644:	bd08      	pop	{r3, pc}
 8001646:	bf00      	nop
 8001648:	20000398 	.word	0x20000398
 800164c:	200004d4 	.word	0x200004d4

08001650 <_close>:

int _close(int file)
{
	return -1;
}
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	4770      	bx	lr

08001656 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800165a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800165c:	604b      	str	r3, [r1, #4]
}
 800165e:	4770      	bx	lr

08001660 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001660:	2001      	movs	r0, #1
 8001662:	4770      	bx	lr

08001664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001664:	2000      	movs	r0, #0
 8001666:	4770      	bx	lr

08001668 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <SystemInit+0x40>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <SystemInit+0x44>)
 8001676:	400a      	ands	r2, r1
 8001678:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001680:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001684:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800168c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001694:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001696:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800169a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800169c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <SystemInit+0x48>)
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	f8ff0000 	.word	0xf8ff0000
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016b6:	e003      	b.n	80016c0 <LoopCopyDataInit>

080016b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016be:	3104      	adds	r1, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016c0:	480a      	ldr	r0, [pc, #40]	; (80016ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016c8:	d3f6      	bcc.n	80016b8 <CopyDataInit>
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016cc:	e002      	b.n	80016d4 <LoopFillZerobss>

080016ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016d0:	f842 3b04 	str.w	r3, [r2], #4

080016d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016d8:	d3f9      	bcc.n	80016ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016da:	f7ff ffc5 	bl	8001668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016de:	f000 f815 	bl	800170c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e2:	f7ff fdd9 	bl	8001298 <main>
  bx lr
 80016e6:	4770      	bx	lr
  ldr r3, =_sidata
 80016e8:	08002950 	.word	0x08002950
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016f0:	20000378 	.word	0x20000378
  ldr r2, =_sbss
 80016f4:	20000378 	.word	0x20000378
  ldr r3, = _ebss
 80016f8:	200004d4 	.word	0x200004d4

080016fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_2_IRQHandler>
	...

08001700 <__errno>:
 8001700:	4b01      	ldr	r3, [pc, #4]	; (8001708 <__errno+0x8>)
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000314 	.word	0x20000314

0800170c <__libc_init_array>:
 800170c:	b570      	push	{r4, r5, r6, lr}
 800170e:	2500      	movs	r5, #0
 8001710:	4e0c      	ldr	r6, [pc, #48]	; (8001744 <__libc_init_array+0x38>)
 8001712:	4c0d      	ldr	r4, [pc, #52]	; (8001748 <__libc_init_array+0x3c>)
 8001714:	1ba4      	subs	r4, r4, r6
 8001716:	10a4      	asrs	r4, r4, #2
 8001718:	42a5      	cmp	r5, r4
 800171a:	d109      	bne.n	8001730 <__libc_init_array+0x24>
 800171c:	f001 f868 	bl	80027f0 <_init>
 8001720:	2500      	movs	r5, #0
 8001722:	4e0a      	ldr	r6, [pc, #40]	; (800174c <__libc_init_array+0x40>)
 8001724:	4c0a      	ldr	r4, [pc, #40]	; (8001750 <__libc_init_array+0x44>)
 8001726:	1ba4      	subs	r4, r4, r6
 8001728:	10a4      	asrs	r4, r4, #2
 800172a:	42a5      	cmp	r5, r4
 800172c:	d105      	bne.n	800173a <__libc_init_array+0x2e>
 800172e:	bd70      	pop	{r4, r5, r6, pc}
 8001730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001734:	4798      	blx	r3
 8001736:	3501      	adds	r5, #1
 8001738:	e7ee      	b.n	8001718 <__libc_init_array+0xc>
 800173a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800173e:	4798      	blx	r3
 8001740:	3501      	adds	r5, #1
 8001742:	e7f2      	b.n	800172a <__libc_init_array+0x1e>
 8001744:	08002948 	.word	0x08002948
 8001748:	08002948 	.word	0x08002948
 800174c:	08002948 	.word	0x08002948
 8001750:	0800294c 	.word	0x0800294c

08001754 <memcmp>:
 8001754:	b510      	push	{r4, lr}
 8001756:	3901      	subs	r1, #1
 8001758:	4402      	add	r2, r0
 800175a:	4290      	cmp	r0, r2
 800175c:	d101      	bne.n	8001762 <memcmp+0xe>
 800175e:	2000      	movs	r0, #0
 8001760:	bd10      	pop	{r4, pc}
 8001762:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001766:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800176a:	42a3      	cmp	r3, r4
 800176c:	d0f5      	beq.n	800175a <memcmp+0x6>
 800176e:	1b18      	subs	r0, r3, r4
 8001770:	bd10      	pop	{r4, pc}

08001772 <memcpy>:
 8001772:	b510      	push	{r4, lr}
 8001774:	1e43      	subs	r3, r0, #1
 8001776:	440a      	add	r2, r1
 8001778:	4291      	cmp	r1, r2
 800177a:	d100      	bne.n	800177e <memcpy+0xc>
 800177c:	bd10      	pop	{r4, pc}
 800177e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001786:	e7f7      	b.n	8001778 <memcpy+0x6>

08001788 <memset>:
 8001788:	4603      	mov	r3, r0
 800178a:	4402      	add	r2, r0
 800178c:	4293      	cmp	r3, r2
 800178e:	d100      	bne.n	8001792 <memset+0xa>
 8001790:	4770      	bx	lr
 8001792:	f803 1b01 	strb.w	r1, [r3], #1
 8001796:	e7f9      	b.n	800178c <memset+0x4>

08001798 <iprintf>:
 8001798:	b40f      	push	{r0, r1, r2, r3}
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <iprintf+0x2c>)
 800179c:	b513      	push	{r0, r1, r4, lr}
 800179e:	681c      	ldr	r4, [r3, #0]
 80017a0:	b124      	cbz	r4, 80017ac <iprintf+0x14>
 80017a2:	69a3      	ldr	r3, [r4, #24]
 80017a4:	b913      	cbnz	r3, 80017ac <iprintf+0x14>
 80017a6:	4620      	mov	r0, r4
 80017a8:	f000 fae0 	bl	8001d6c <__sinit>
 80017ac:	ab05      	add	r3, sp, #20
 80017ae:	9a04      	ldr	r2, [sp, #16]
 80017b0:	68a1      	ldr	r1, [r4, #8]
 80017b2:	4620      	mov	r0, r4
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	f000 fca1 	bl	80020fc <_vfiprintf_r>
 80017ba:	b002      	add	sp, #8
 80017bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017c0:	b004      	add	sp, #16
 80017c2:	4770      	bx	lr
 80017c4:	20000314 	.word	0x20000314

080017c8 <_puts_r>:
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	460e      	mov	r6, r1
 80017cc:	4605      	mov	r5, r0
 80017ce:	b118      	cbz	r0, 80017d8 <_puts_r+0x10>
 80017d0:	6983      	ldr	r3, [r0, #24]
 80017d2:	b90b      	cbnz	r3, 80017d8 <_puts_r+0x10>
 80017d4:	f000 faca 	bl	8001d6c <__sinit>
 80017d8:	69ab      	ldr	r3, [r5, #24]
 80017da:	68ac      	ldr	r4, [r5, #8]
 80017dc:	b913      	cbnz	r3, 80017e4 <_puts_r+0x1c>
 80017de:	4628      	mov	r0, r5
 80017e0:	f000 fac4 	bl	8001d6c <__sinit>
 80017e4:	4b23      	ldr	r3, [pc, #140]	; (8001874 <_puts_r+0xac>)
 80017e6:	429c      	cmp	r4, r3
 80017e8:	d117      	bne.n	800181a <_puts_r+0x52>
 80017ea:	686c      	ldr	r4, [r5, #4]
 80017ec:	89a3      	ldrh	r3, [r4, #12]
 80017ee:	071b      	lsls	r3, r3, #28
 80017f0:	d51d      	bpl.n	800182e <_puts_r+0x66>
 80017f2:	6923      	ldr	r3, [r4, #16]
 80017f4:	b1db      	cbz	r3, 800182e <_puts_r+0x66>
 80017f6:	3e01      	subs	r6, #1
 80017f8:	68a3      	ldr	r3, [r4, #8]
 80017fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017fe:	3b01      	subs	r3, #1
 8001800:	60a3      	str	r3, [r4, #8]
 8001802:	b9e9      	cbnz	r1, 8001840 <_puts_r+0x78>
 8001804:	2b00      	cmp	r3, #0
 8001806:	da2e      	bge.n	8001866 <_puts_r+0x9e>
 8001808:	4622      	mov	r2, r4
 800180a:	210a      	movs	r1, #10
 800180c:	4628      	mov	r0, r5
 800180e:	f000 f8fb 	bl	8001a08 <__swbuf_r>
 8001812:	3001      	adds	r0, #1
 8001814:	d011      	beq.n	800183a <_puts_r+0x72>
 8001816:	200a      	movs	r0, #10
 8001818:	bd70      	pop	{r4, r5, r6, pc}
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <_puts_r+0xb0>)
 800181c:	429c      	cmp	r4, r3
 800181e:	d101      	bne.n	8001824 <_puts_r+0x5c>
 8001820:	68ac      	ldr	r4, [r5, #8]
 8001822:	e7e3      	b.n	80017ec <_puts_r+0x24>
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <_puts_r+0xb4>)
 8001826:	429c      	cmp	r4, r3
 8001828:	bf08      	it	eq
 800182a:	68ec      	ldreq	r4, [r5, #12]
 800182c:	e7de      	b.n	80017ec <_puts_r+0x24>
 800182e:	4621      	mov	r1, r4
 8001830:	4628      	mov	r0, r5
 8001832:	f000 f93b 	bl	8001aac <__swsetup_r>
 8001836:	2800      	cmp	r0, #0
 8001838:	d0dd      	beq.n	80017f6 <_puts_r+0x2e>
 800183a:	f04f 30ff 	mov.w	r0, #4294967295
 800183e:	bd70      	pop	{r4, r5, r6, pc}
 8001840:	2b00      	cmp	r3, #0
 8001842:	da04      	bge.n	800184e <_puts_r+0x86>
 8001844:	69a2      	ldr	r2, [r4, #24]
 8001846:	4293      	cmp	r3, r2
 8001848:	db06      	blt.n	8001858 <_puts_r+0x90>
 800184a:	290a      	cmp	r1, #10
 800184c:	d004      	beq.n	8001858 <_puts_r+0x90>
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	6022      	str	r2, [r4, #0]
 8001854:	7019      	strb	r1, [r3, #0]
 8001856:	e7cf      	b.n	80017f8 <_puts_r+0x30>
 8001858:	4622      	mov	r2, r4
 800185a:	4628      	mov	r0, r5
 800185c:	f000 f8d4 	bl	8001a08 <__swbuf_r>
 8001860:	3001      	adds	r0, #1
 8001862:	d1c9      	bne.n	80017f8 <_puts_r+0x30>
 8001864:	e7e9      	b.n	800183a <_puts_r+0x72>
 8001866:	200a      	movs	r0, #10
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	6022      	str	r2, [r4, #0]
 800186e:	7018      	strb	r0, [r3, #0]
 8001870:	bd70      	pop	{r4, r5, r6, pc}
 8001872:	bf00      	nop
 8001874:	080028d4 	.word	0x080028d4
 8001878:	080028f4 	.word	0x080028f4
 800187c:	080028b4 	.word	0x080028b4

08001880 <puts>:
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <puts+0xc>)
 8001882:	4601      	mov	r1, r0
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	f7ff bf9f 	b.w	80017c8 <_puts_r>
 800188a:	bf00      	nop
 800188c:	20000314 	.word	0x20000314

08001890 <setvbuf>:
 8001890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001894:	461d      	mov	r5, r3
 8001896:	4b51      	ldr	r3, [pc, #324]	; (80019dc <setvbuf+0x14c>)
 8001898:	4604      	mov	r4, r0
 800189a:	681e      	ldr	r6, [r3, #0]
 800189c:	460f      	mov	r7, r1
 800189e:	4690      	mov	r8, r2
 80018a0:	b126      	cbz	r6, 80018ac <setvbuf+0x1c>
 80018a2:	69b3      	ldr	r3, [r6, #24]
 80018a4:	b913      	cbnz	r3, 80018ac <setvbuf+0x1c>
 80018a6:	4630      	mov	r0, r6
 80018a8:	f000 fa60 	bl	8001d6c <__sinit>
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <setvbuf+0x150>)
 80018ae:	429c      	cmp	r4, r3
 80018b0:	d152      	bne.n	8001958 <setvbuf+0xc8>
 80018b2:	6874      	ldr	r4, [r6, #4]
 80018b4:	f1b8 0f02 	cmp.w	r8, #2
 80018b8:	d006      	beq.n	80018c8 <setvbuf+0x38>
 80018ba:	f1b8 0f01 	cmp.w	r8, #1
 80018be:	f200 8089 	bhi.w	80019d4 <setvbuf+0x144>
 80018c2:	2d00      	cmp	r5, #0
 80018c4:	f2c0 8086 	blt.w	80019d4 <setvbuf+0x144>
 80018c8:	4621      	mov	r1, r4
 80018ca:	4630      	mov	r0, r6
 80018cc:	f000 f9e4 	bl	8001c98 <_fflush_r>
 80018d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018d2:	b141      	cbz	r1, 80018e6 <setvbuf+0x56>
 80018d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80018d8:	4299      	cmp	r1, r3
 80018da:	d002      	beq.n	80018e2 <setvbuf+0x52>
 80018dc:	4630      	mov	r0, r6
 80018de:	f000 fb3b 	bl	8001f58 <_free_r>
 80018e2:	2300      	movs	r3, #0
 80018e4:	6363      	str	r3, [r4, #52]	; 0x34
 80018e6:	2300      	movs	r3, #0
 80018e8:	61a3      	str	r3, [r4, #24]
 80018ea:	6063      	str	r3, [r4, #4]
 80018ec:	89a3      	ldrh	r3, [r4, #12]
 80018ee:	061b      	lsls	r3, r3, #24
 80018f0:	d503      	bpl.n	80018fa <setvbuf+0x6a>
 80018f2:	6921      	ldr	r1, [r4, #16]
 80018f4:	4630      	mov	r0, r6
 80018f6:	f000 fb2f 	bl	8001f58 <_free_r>
 80018fa:	89a3      	ldrh	r3, [r4, #12]
 80018fc:	f1b8 0f02 	cmp.w	r8, #2
 8001900:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001904:	f023 0303 	bic.w	r3, r3, #3
 8001908:	81a3      	strh	r3, [r4, #12]
 800190a:	d05d      	beq.n	80019c8 <setvbuf+0x138>
 800190c:	ab01      	add	r3, sp, #4
 800190e:	466a      	mov	r2, sp
 8001910:	4621      	mov	r1, r4
 8001912:	4630      	mov	r0, r6
 8001914:	f000 fab4 	bl	8001e80 <__swhatbuf_r>
 8001918:	89a3      	ldrh	r3, [r4, #12]
 800191a:	4318      	orrs	r0, r3
 800191c:	81a0      	strh	r0, [r4, #12]
 800191e:	bb2d      	cbnz	r5, 800196c <setvbuf+0xdc>
 8001920:	9d00      	ldr	r5, [sp, #0]
 8001922:	4628      	mov	r0, r5
 8001924:	f000 fb10 	bl	8001f48 <malloc>
 8001928:	4607      	mov	r7, r0
 800192a:	2800      	cmp	r0, #0
 800192c:	d14e      	bne.n	80019cc <setvbuf+0x13c>
 800192e:	f8dd 9000 	ldr.w	r9, [sp]
 8001932:	45a9      	cmp	r9, r5
 8001934:	d13c      	bne.n	80019b0 <setvbuf+0x120>
 8001936:	f04f 30ff 	mov.w	r0, #4294967295
 800193a:	89a3      	ldrh	r3, [r4, #12]
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	81a3      	strh	r3, [r4, #12]
 8001942:	2300      	movs	r3, #0
 8001944:	60a3      	str	r3, [r4, #8]
 8001946:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800194a:	6023      	str	r3, [r4, #0]
 800194c:	6123      	str	r3, [r4, #16]
 800194e:	2301      	movs	r3, #1
 8001950:	6163      	str	r3, [r4, #20]
 8001952:	b003      	add	sp, #12
 8001954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <setvbuf+0x154>)
 800195a:	429c      	cmp	r4, r3
 800195c:	d101      	bne.n	8001962 <setvbuf+0xd2>
 800195e:	68b4      	ldr	r4, [r6, #8]
 8001960:	e7a8      	b.n	80018b4 <setvbuf+0x24>
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <setvbuf+0x158>)
 8001964:	429c      	cmp	r4, r3
 8001966:	bf08      	it	eq
 8001968:	68f4      	ldreq	r4, [r6, #12]
 800196a:	e7a3      	b.n	80018b4 <setvbuf+0x24>
 800196c:	2f00      	cmp	r7, #0
 800196e:	d0d8      	beq.n	8001922 <setvbuf+0x92>
 8001970:	69b3      	ldr	r3, [r6, #24]
 8001972:	b913      	cbnz	r3, 800197a <setvbuf+0xea>
 8001974:	4630      	mov	r0, r6
 8001976:	f000 f9f9 	bl	8001d6c <__sinit>
 800197a:	f1b8 0f01 	cmp.w	r8, #1
 800197e:	bf08      	it	eq
 8001980:	89a3      	ldrheq	r3, [r4, #12]
 8001982:	6027      	str	r7, [r4, #0]
 8001984:	bf04      	itt	eq
 8001986:	f043 0301 	orreq.w	r3, r3, #1
 800198a:	81a3      	strheq	r3, [r4, #12]
 800198c:	89a3      	ldrh	r3, [r4, #12]
 800198e:	6127      	str	r7, [r4, #16]
 8001990:	f013 0008 	ands.w	r0, r3, #8
 8001994:	6165      	str	r5, [r4, #20]
 8001996:	d01b      	beq.n	80019d0 <setvbuf+0x140>
 8001998:	f013 0001 	ands.w	r0, r3, #1
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	bf1f      	itttt	ne
 80019a2:	426d      	negne	r5, r5
 80019a4:	60a3      	strne	r3, [r4, #8]
 80019a6:	61a5      	strne	r5, [r4, #24]
 80019a8:	4618      	movne	r0, r3
 80019aa:	bf08      	it	eq
 80019ac:	60a5      	streq	r5, [r4, #8]
 80019ae:	e7d0      	b.n	8001952 <setvbuf+0xc2>
 80019b0:	4648      	mov	r0, r9
 80019b2:	f000 fac9 	bl	8001f48 <malloc>
 80019b6:	4607      	mov	r7, r0
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d0bc      	beq.n	8001936 <setvbuf+0xa6>
 80019bc:	89a3      	ldrh	r3, [r4, #12]
 80019be:	464d      	mov	r5, r9
 80019c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c4:	81a3      	strh	r3, [r4, #12]
 80019c6:	e7d3      	b.n	8001970 <setvbuf+0xe0>
 80019c8:	2000      	movs	r0, #0
 80019ca:	e7b6      	b.n	800193a <setvbuf+0xaa>
 80019cc:	46a9      	mov	r9, r5
 80019ce:	e7f5      	b.n	80019bc <setvbuf+0x12c>
 80019d0:	60a0      	str	r0, [r4, #8]
 80019d2:	e7be      	b.n	8001952 <setvbuf+0xc2>
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	e7bb      	b.n	8001952 <setvbuf+0xc2>
 80019da:	bf00      	nop
 80019dc:	20000314 	.word	0x20000314
 80019e0:	080028d4 	.word	0x080028d4
 80019e4:	080028f4 	.word	0x080028f4
 80019e8:	080028b4 	.word	0x080028b4

080019ec <strchr>:
 80019ec:	b2c9      	uxtb	r1, r1
 80019ee:	4603      	mov	r3, r0
 80019f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019f4:	b11a      	cbz	r2, 80019fe <strchr+0x12>
 80019f6:	4291      	cmp	r1, r2
 80019f8:	d1f9      	bne.n	80019ee <strchr+0x2>
 80019fa:	4618      	mov	r0, r3
 80019fc:	4770      	bx	lr
 80019fe:	2900      	cmp	r1, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	4618      	moveq	r0, r3
 8001a04:	2000      	movne	r0, #0
 8001a06:	4770      	bx	lr

08001a08 <__swbuf_r>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	460e      	mov	r6, r1
 8001a0c:	4614      	mov	r4, r2
 8001a0e:	4605      	mov	r5, r0
 8001a10:	b118      	cbz	r0, 8001a1a <__swbuf_r+0x12>
 8001a12:	6983      	ldr	r3, [r0, #24]
 8001a14:	b90b      	cbnz	r3, 8001a1a <__swbuf_r+0x12>
 8001a16:	f000 f9a9 	bl	8001d6c <__sinit>
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <__swbuf_r+0x98>)
 8001a1c:	429c      	cmp	r4, r3
 8001a1e:	d12a      	bne.n	8001a76 <__swbuf_r+0x6e>
 8001a20:	686c      	ldr	r4, [r5, #4]
 8001a22:	69a3      	ldr	r3, [r4, #24]
 8001a24:	60a3      	str	r3, [r4, #8]
 8001a26:	89a3      	ldrh	r3, [r4, #12]
 8001a28:	071a      	lsls	r2, r3, #28
 8001a2a:	d52e      	bpl.n	8001a8a <__swbuf_r+0x82>
 8001a2c:	6923      	ldr	r3, [r4, #16]
 8001a2e:	b363      	cbz	r3, 8001a8a <__swbuf_r+0x82>
 8001a30:	6923      	ldr	r3, [r4, #16]
 8001a32:	6820      	ldr	r0, [r4, #0]
 8001a34:	b2f6      	uxtb	r6, r6
 8001a36:	1ac0      	subs	r0, r0, r3
 8001a38:	6963      	ldr	r3, [r4, #20]
 8001a3a:	4637      	mov	r7, r6
 8001a3c:	4298      	cmp	r0, r3
 8001a3e:	db04      	blt.n	8001a4a <__swbuf_r+0x42>
 8001a40:	4621      	mov	r1, r4
 8001a42:	4628      	mov	r0, r5
 8001a44:	f000 f928 	bl	8001c98 <_fflush_r>
 8001a48:	bb28      	cbnz	r0, 8001a96 <__swbuf_r+0x8e>
 8001a4a:	68a3      	ldr	r3, [r4, #8]
 8001a4c:	3001      	adds	r0, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	60a3      	str	r3, [r4, #8]
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	6022      	str	r2, [r4, #0]
 8001a58:	701e      	strb	r6, [r3, #0]
 8001a5a:	6963      	ldr	r3, [r4, #20]
 8001a5c:	4298      	cmp	r0, r3
 8001a5e:	d004      	beq.n	8001a6a <__swbuf_r+0x62>
 8001a60:	89a3      	ldrh	r3, [r4, #12]
 8001a62:	07db      	lsls	r3, r3, #31
 8001a64:	d519      	bpl.n	8001a9a <__swbuf_r+0x92>
 8001a66:	2e0a      	cmp	r6, #10
 8001a68:	d117      	bne.n	8001a9a <__swbuf_r+0x92>
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	f000 f913 	bl	8001c98 <_fflush_r>
 8001a72:	b190      	cbz	r0, 8001a9a <__swbuf_r+0x92>
 8001a74:	e00f      	b.n	8001a96 <__swbuf_r+0x8e>
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <__swbuf_r+0x9c>)
 8001a78:	429c      	cmp	r4, r3
 8001a7a:	d101      	bne.n	8001a80 <__swbuf_r+0x78>
 8001a7c:	68ac      	ldr	r4, [r5, #8]
 8001a7e:	e7d0      	b.n	8001a22 <__swbuf_r+0x1a>
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <__swbuf_r+0xa0>)
 8001a82:	429c      	cmp	r4, r3
 8001a84:	bf08      	it	eq
 8001a86:	68ec      	ldreq	r4, [r5, #12]
 8001a88:	e7cb      	b.n	8001a22 <__swbuf_r+0x1a>
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	f000 f80d 	bl	8001aac <__swsetup_r>
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d0cc      	beq.n	8001a30 <__swbuf_r+0x28>
 8001a96:	f04f 37ff 	mov.w	r7, #4294967295
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	080028d4 	.word	0x080028d4
 8001aa4:	080028f4 	.word	0x080028f4
 8001aa8:	080028b4 	.word	0x080028b4

08001aac <__swsetup_r>:
 8001aac:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <__swsetup_r+0xcc>)
 8001aae:	b570      	push	{r4, r5, r6, lr}
 8001ab0:	681d      	ldr	r5, [r3, #0]
 8001ab2:	4606      	mov	r6, r0
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	b125      	cbz	r5, 8001ac2 <__swsetup_r+0x16>
 8001ab8:	69ab      	ldr	r3, [r5, #24]
 8001aba:	b913      	cbnz	r3, 8001ac2 <__swsetup_r+0x16>
 8001abc:	4628      	mov	r0, r5
 8001abe:	f000 f955 	bl	8001d6c <__sinit>
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <__swsetup_r+0xd0>)
 8001ac4:	429c      	cmp	r4, r3
 8001ac6:	d10f      	bne.n	8001ae8 <__swsetup_r+0x3c>
 8001ac8:	686c      	ldr	r4, [r5, #4]
 8001aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	0715      	lsls	r5, r2, #28
 8001ad2:	d42c      	bmi.n	8001b2e <__swsetup_r+0x82>
 8001ad4:	06d0      	lsls	r0, r2, #27
 8001ad6:	d411      	bmi.n	8001afc <__swsetup_r+0x50>
 8001ad8:	2209      	movs	r2, #9
 8001ada:	6032      	str	r2, [r6, #0]
 8001adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae0:	81a3      	strh	r3, [r4, #12]
 8001ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae6:	bd70      	pop	{r4, r5, r6, pc}
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <__swsetup_r+0xd4>)
 8001aea:	429c      	cmp	r4, r3
 8001aec:	d101      	bne.n	8001af2 <__swsetup_r+0x46>
 8001aee:	68ac      	ldr	r4, [r5, #8]
 8001af0:	e7eb      	b.n	8001aca <__swsetup_r+0x1e>
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <__swsetup_r+0xd8>)
 8001af4:	429c      	cmp	r4, r3
 8001af6:	bf08      	it	eq
 8001af8:	68ec      	ldreq	r4, [r5, #12]
 8001afa:	e7e6      	b.n	8001aca <__swsetup_r+0x1e>
 8001afc:	0751      	lsls	r1, r2, #29
 8001afe:	d512      	bpl.n	8001b26 <__swsetup_r+0x7a>
 8001b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b02:	b141      	cbz	r1, 8001b16 <__swsetup_r+0x6a>
 8001b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b08:	4299      	cmp	r1, r3
 8001b0a:	d002      	beq.n	8001b12 <__swsetup_r+0x66>
 8001b0c:	4630      	mov	r0, r6
 8001b0e:	f000 fa23 	bl	8001f58 <_free_r>
 8001b12:	2300      	movs	r3, #0
 8001b14:	6363      	str	r3, [r4, #52]	; 0x34
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b1c:	81a3      	strh	r3, [r4, #12]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	6063      	str	r3, [r4, #4]
 8001b22:	6923      	ldr	r3, [r4, #16]
 8001b24:	6023      	str	r3, [r4, #0]
 8001b26:	89a3      	ldrh	r3, [r4, #12]
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	81a3      	strh	r3, [r4, #12]
 8001b2e:	6923      	ldr	r3, [r4, #16]
 8001b30:	b94b      	cbnz	r3, 8001b46 <__swsetup_r+0x9a>
 8001b32:	89a3      	ldrh	r3, [r4, #12]
 8001b34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b3c:	d003      	beq.n	8001b46 <__swsetup_r+0x9a>
 8001b3e:	4621      	mov	r1, r4
 8001b40:	4630      	mov	r0, r6
 8001b42:	f000 f9c1 	bl	8001ec8 <__smakebuf_r>
 8001b46:	89a2      	ldrh	r2, [r4, #12]
 8001b48:	f012 0301 	ands.w	r3, r2, #1
 8001b4c:	d00c      	beq.n	8001b68 <__swsetup_r+0xbc>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60a3      	str	r3, [r4, #8]
 8001b52:	6963      	ldr	r3, [r4, #20]
 8001b54:	425b      	negs	r3, r3
 8001b56:	61a3      	str	r3, [r4, #24]
 8001b58:	6923      	ldr	r3, [r4, #16]
 8001b5a:	b953      	cbnz	r3, 8001b72 <__swsetup_r+0xc6>
 8001b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b60:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001b64:	d1ba      	bne.n	8001adc <__swsetup_r+0x30>
 8001b66:	bd70      	pop	{r4, r5, r6, pc}
 8001b68:	0792      	lsls	r2, r2, #30
 8001b6a:	bf58      	it	pl
 8001b6c:	6963      	ldrpl	r3, [r4, #20]
 8001b6e:	60a3      	str	r3, [r4, #8]
 8001b70:	e7f2      	b.n	8001b58 <__swsetup_r+0xac>
 8001b72:	2000      	movs	r0, #0
 8001b74:	e7f7      	b.n	8001b66 <__swsetup_r+0xba>
 8001b76:	bf00      	nop
 8001b78:	20000314 	.word	0x20000314
 8001b7c:	080028d4 	.word	0x080028d4
 8001b80:	080028f4 	.word	0x080028f4
 8001b84:	080028b4 	.word	0x080028b4

08001b88 <__sflush_r>:
 8001b88:	898a      	ldrh	r2, [r1, #12]
 8001b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b8e:	4605      	mov	r5, r0
 8001b90:	0710      	lsls	r0, r2, #28
 8001b92:	460c      	mov	r4, r1
 8001b94:	d45a      	bmi.n	8001c4c <__sflush_r+0xc4>
 8001b96:	684b      	ldr	r3, [r1, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	dc05      	bgt.n	8001ba8 <__sflush_r+0x20>
 8001b9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	dc02      	bgt.n	8001ba8 <__sflush_r+0x20>
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001baa:	2e00      	cmp	r6, #0
 8001bac:	d0f9      	beq.n	8001ba2 <__sflush_r+0x1a>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bb4:	682f      	ldr	r7, [r5, #0]
 8001bb6:	602b      	str	r3, [r5, #0]
 8001bb8:	d033      	beq.n	8001c22 <__sflush_r+0x9a>
 8001bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001bbc:	89a3      	ldrh	r3, [r4, #12]
 8001bbe:	075a      	lsls	r2, r3, #29
 8001bc0:	d505      	bpl.n	8001bce <__sflush_r+0x46>
 8001bc2:	6863      	ldr	r3, [r4, #4]
 8001bc4:	1ac0      	subs	r0, r0, r3
 8001bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bc8:	b10b      	cbz	r3, 8001bce <__sflush_r+0x46>
 8001bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bcc:	1ac0      	subs	r0, r0, r3
 8001bce:	2300      	movs	r3, #0
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bd4:	6a21      	ldr	r1, [r4, #32]
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	47b0      	blx	r6
 8001bda:	1c43      	adds	r3, r0, #1
 8001bdc:	89a3      	ldrh	r3, [r4, #12]
 8001bde:	d106      	bne.n	8001bee <__sflush_r+0x66>
 8001be0:	6829      	ldr	r1, [r5, #0]
 8001be2:	291d      	cmp	r1, #29
 8001be4:	d84b      	bhi.n	8001c7e <__sflush_r+0xf6>
 8001be6:	4a2b      	ldr	r2, [pc, #172]	; (8001c94 <__sflush_r+0x10c>)
 8001be8:	40ca      	lsrs	r2, r1
 8001bea:	07d6      	lsls	r6, r2, #31
 8001bec:	d547      	bpl.n	8001c7e <__sflush_r+0xf6>
 8001bee:	2200      	movs	r2, #0
 8001bf0:	6062      	str	r2, [r4, #4]
 8001bf2:	6922      	ldr	r2, [r4, #16]
 8001bf4:	04d9      	lsls	r1, r3, #19
 8001bf6:	6022      	str	r2, [r4, #0]
 8001bf8:	d504      	bpl.n	8001c04 <__sflush_r+0x7c>
 8001bfa:	1c42      	adds	r2, r0, #1
 8001bfc:	d101      	bne.n	8001c02 <__sflush_r+0x7a>
 8001bfe:	682b      	ldr	r3, [r5, #0]
 8001c00:	b903      	cbnz	r3, 8001c04 <__sflush_r+0x7c>
 8001c02:	6560      	str	r0, [r4, #84]	; 0x54
 8001c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c06:	602f      	str	r7, [r5, #0]
 8001c08:	2900      	cmp	r1, #0
 8001c0a:	d0ca      	beq.n	8001ba2 <__sflush_r+0x1a>
 8001c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c10:	4299      	cmp	r1, r3
 8001c12:	d002      	beq.n	8001c1a <__sflush_r+0x92>
 8001c14:	4628      	mov	r0, r5
 8001c16:	f000 f99f 	bl	8001f58 <_free_r>
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8001c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c22:	6a21      	ldr	r1, [r4, #32]
 8001c24:	2301      	movs	r3, #1
 8001c26:	4628      	mov	r0, r5
 8001c28:	47b0      	blx	r6
 8001c2a:	1c41      	adds	r1, r0, #1
 8001c2c:	d1c6      	bne.n	8001bbc <__sflush_r+0x34>
 8001c2e:	682b      	ldr	r3, [r5, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0c3      	beq.n	8001bbc <__sflush_r+0x34>
 8001c34:	2b1d      	cmp	r3, #29
 8001c36:	d001      	beq.n	8001c3c <__sflush_r+0xb4>
 8001c38:	2b16      	cmp	r3, #22
 8001c3a:	d101      	bne.n	8001c40 <__sflush_r+0xb8>
 8001c3c:	602f      	str	r7, [r5, #0]
 8001c3e:	e7b0      	b.n	8001ba2 <__sflush_r+0x1a>
 8001c40:	89a3      	ldrh	r3, [r4, #12]
 8001c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c46:	81a3      	strh	r3, [r4, #12]
 8001c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c4c:	690f      	ldr	r7, [r1, #16]
 8001c4e:	2f00      	cmp	r7, #0
 8001c50:	d0a7      	beq.n	8001ba2 <__sflush_r+0x1a>
 8001c52:	0793      	lsls	r3, r2, #30
 8001c54:	bf18      	it	ne
 8001c56:	2300      	movne	r3, #0
 8001c58:	680e      	ldr	r6, [r1, #0]
 8001c5a:	bf08      	it	eq
 8001c5c:	694b      	ldreq	r3, [r1, #20]
 8001c5e:	eba6 0807 	sub.w	r8, r6, r7
 8001c62:	600f      	str	r7, [r1, #0]
 8001c64:	608b      	str	r3, [r1, #8]
 8001c66:	f1b8 0f00 	cmp.w	r8, #0
 8001c6a:	dd9a      	ble.n	8001ba2 <__sflush_r+0x1a>
 8001c6c:	4643      	mov	r3, r8
 8001c6e:	463a      	mov	r2, r7
 8001c70:	6a21      	ldr	r1, [r4, #32]
 8001c72:	4628      	mov	r0, r5
 8001c74:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c76:	47b0      	blx	r6
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	dc07      	bgt.n	8001c8c <__sflush_r+0x104>
 8001c7c:	89a3      	ldrh	r3, [r4, #12]
 8001c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c82:	81a3      	strh	r3, [r4, #12]
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c8c:	4407      	add	r7, r0
 8001c8e:	eba8 0800 	sub.w	r8, r8, r0
 8001c92:	e7e8      	b.n	8001c66 <__sflush_r+0xde>
 8001c94:	20400001 	.word	0x20400001

08001c98 <_fflush_r>:
 8001c98:	b538      	push	{r3, r4, r5, lr}
 8001c9a:	690b      	ldr	r3, [r1, #16]
 8001c9c:	4605      	mov	r5, r0
 8001c9e:	460c      	mov	r4, r1
 8001ca0:	b1db      	cbz	r3, 8001cda <_fflush_r+0x42>
 8001ca2:	b118      	cbz	r0, 8001cac <_fflush_r+0x14>
 8001ca4:	6983      	ldr	r3, [r0, #24]
 8001ca6:	b90b      	cbnz	r3, 8001cac <_fflush_r+0x14>
 8001ca8:	f000 f860 	bl	8001d6c <__sinit>
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <_fflush_r+0x48>)
 8001cae:	429c      	cmp	r4, r3
 8001cb0:	d109      	bne.n	8001cc6 <_fflush_r+0x2e>
 8001cb2:	686c      	ldr	r4, [r5, #4]
 8001cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cb8:	b17b      	cbz	r3, 8001cda <_fflush_r+0x42>
 8001cba:	4621      	mov	r1, r4
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cc2:	f7ff bf61 	b.w	8001b88 <__sflush_r>
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <_fflush_r+0x4c>)
 8001cc8:	429c      	cmp	r4, r3
 8001cca:	d101      	bne.n	8001cd0 <_fflush_r+0x38>
 8001ccc:	68ac      	ldr	r4, [r5, #8]
 8001cce:	e7f1      	b.n	8001cb4 <_fflush_r+0x1c>
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <_fflush_r+0x50>)
 8001cd2:	429c      	cmp	r4, r3
 8001cd4:	bf08      	it	eq
 8001cd6:	68ec      	ldreq	r4, [r5, #12]
 8001cd8:	e7ec      	b.n	8001cb4 <_fflush_r+0x1c>
 8001cda:	2000      	movs	r0, #0
 8001cdc:	bd38      	pop	{r3, r4, r5, pc}
 8001cde:	bf00      	nop
 8001ce0:	080028d4 	.word	0x080028d4
 8001ce4:	080028f4 	.word	0x080028f4
 8001ce8:	080028b4 	.word	0x080028b4

08001cec <_cleanup_r>:
 8001cec:	4901      	ldr	r1, [pc, #4]	; (8001cf4 <_cleanup_r+0x8>)
 8001cee:	f000 b8a9 	b.w	8001e44 <_fwalk_reent>
 8001cf2:	bf00      	nop
 8001cf4:	08001c99 	.word	0x08001c99

08001cf8 <std.isra.0>:
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	b510      	push	{r4, lr}
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	6003      	str	r3, [r0, #0]
 8001d00:	6043      	str	r3, [r0, #4]
 8001d02:	6083      	str	r3, [r0, #8]
 8001d04:	8181      	strh	r1, [r0, #12]
 8001d06:	6643      	str	r3, [r0, #100]	; 0x64
 8001d08:	81c2      	strh	r2, [r0, #14]
 8001d0a:	6103      	str	r3, [r0, #16]
 8001d0c:	6143      	str	r3, [r0, #20]
 8001d0e:	6183      	str	r3, [r0, #24]
 8001d10:	4619      	mov	r1, r3
 8001d12:	2208      	movs	r2, #8
 8001d14:	305c      	adds	r0, #92	; 0x5c
 8001d16:	f7ff fd37 	bl	8001788 <memset>
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <std.isra.0+0x38>)
 8001d1c:	6224      	str	r4, [r4, #32]
 8001d1e:	6263      	str	r3, [r4, #36]	; 0x24
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <std.isra.0+0x3c>)
 8001d22:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <std.isra.0+0x40>)
 8001d26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <std.isra.0+0x44>)
 8001d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8001d2c:	bd10      	pop	{r4, pc}
 8001d2e:	bf00      	nop
 8001d30:	08002679 	.word	0x08002679
 8001d34:	0800269b 	.word	0x0800269b
 8001d38:	080026d3 	.word	0x080026d3
 8001d3c:	080026f7 	.word	0x080026f7

08001d40 <__sfmoreglue>:
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	2568      	movs	r5, #104	; 0x68
 8001d44:	1e4a      	subs	r2, r1, #1
 8001d46:	4355      	muls	r5, r2
 8001d48:	460e      	mov	r6, r1
 8001d4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d4e:	f000 f94f 	bl	8001ff0 <_malloc_r>
 8001d52:	4604      	mov	r4, r0
 8001d54:	b140      	cbz	r0, 8001d68 <__sfmoreglue+0x28>
 8001d56:	2100      	movs	r1, #0
 8001d58:	e880 0042 	stmia.w	r0, {r1, r6}
 8001d5c:	300c      	adds	r0, #12
 8001d5e:	60a0      	str	r0, [r4, #8]
 8001d60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d64:	f7ff fd10 	bl	8001788 <memset>
 8001d68:	4620      	mov	r0, r4
 8001d6a:	bd70      	pop	{r4, r5, r6, pc}

08001d6c <__sinit>:
 8001d6c:	6983      	ldr	r3, [r0, #24]
 8001d6e:	b510      	push	{r4, lr}
 8001d70:	4604      	mov	r4, r0
 8001d72:	bb33      	cbnz	r3, 8001dc2 <__sinit+0x56>
 8001d74:	6483      	str	r3, [r0, #72]	; 0x48
 8001d76:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001d78:	6503      	str	r3, [r0, #80]	; 0x50
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <__sinit+0x58>)
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <__sinit+0x5c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6282      	str	r2, [r0, #40]	; 0x28
 8001d82:	4298      	cmp	r0, r3
 8001d84:	bf04      	itt	eq
 8001d86:	2301      	moveq	r3, #1
 8001d88:	6183      	streq	r3, [r0, #24]
 8001d8a:	f000 f81f 	bl	8001dcc <__sfp>
 8001d8e:	6060      	str	r0, [r4, #4]
 8001d90:	4620      	mov	r0, r4
 8001d92:	f000 f81b 	bl	8001dcc <__sfp>
 8001d96:	60a0      	str	r0, [r4, #8]
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f000 f817 	bl	8001dcc <__sfp>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60e0      	str	r0, [r4, #12]
 8001da2:	2104      	movs	r1, #4
 8001da4:	6860      	ldr	r0, [r4, #4]
 8001da6:	f7ff ffa7 	bl	8001cf8 <std.isra.0>
 8001daa:	2201      	movs	r2, #1
 8001dac:	2109      	movs	r1, #9
 8001dae:	68a0      	ldr	r0, [r4, #8]
 8001db0:	f7ff ffa2 	bl	8001cf8 <std.isra.0>
 8001db4:	2202      	movs	r2, #2
 8001db6:	2112      	movs	r1, #18
 8001db8:	68e0      	ldr	r0, [r4, #12]
 8001dba:	f7ff ff9d 	bl	8001cf8 <std.isra.0>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61a3      	str	r3, [r4, #24]
 8001dc2:	bd10      	pop	{r4, pc}
 8001dc4:	080028b0 	.word	0x080028b0
 8001dc8:	08001ced 	.word	0x08001ced

08001dcc <__sfp>:
 8001dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <__sfp+0x74>)
 8001dd0:	4607      	mov	r7, r0
 8001dd2:	681e      	ldr	r6, [r3, #0]
 8001dd4:	69b3      	ldr	r3, [r6, #24]
 8001dd6:	b913      	cbnz	r3, 8001dde <__sfp+0x12>
 8001dd8:	4630      	mov	r0, r6
 8001dda:	f7ff ffc7 	bl	8001d6c <__sinit>
 8001dde:	3648      	adds	r6, #72	; 0x48
 8001de0:	68b4      	ldr	r4, [r6, #8]
 8001de2:	6873      	ldr	r3, [r6, #4]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	d503      	bpl.n	8001df0 <__sfp+0x24>
 8001de8:	6833      	ldr	r3, [r6, #0]
 8001dea:	b133      	cbz	r3, 8001dfa <__sfp+0x2e>
 8001dec:	6836      	ldr	r6, [r6, #0]
 8001dee:	e7f7      	b.n	8001de0 <__sfp+0x14>
 8001df0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001df4:	b16d      	cbz	r5, 8001e12 <__sfp+0x46>
 8001df6:	3468      	adds	r4, #104	; 0x68
 8001df8:	e7f4      	b.n	8001de4 <__sfp+0x18>
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	4638      	mov	r0, r7
 8001dfe:	f7ff ff9f 	bl	8001d40 <__sfmoreglue>
 8001e02:	6030      	str	r0, [r6, #0]
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d1f1      	bne.n	8001dec <__sfp+0x20>
 8001e08:	230c      	movs	r3, #12
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	4620      	mov	r0, r4
 8001e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e16:	81e3      	strh	r3, [r4, #14]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	6665      	str	r5, [r4, #100]	; 0x64
 8001e1c:	81a3      	strh	r3, [r4, #12]
 8001e1e:	6025      	str	r5, [r4, #0]
 8001e20:	60a5      	str	r5, [r4, #8]
 8001e22:	6065      	str	r5, [r4, #4]
 8001e24:	6125      	str	r5, [r4, #16]
 8001e26:	6165      	str	r5, [r4, #20]
 8001e28:	61a5      	str	r5, [r4, #24]
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e32:	f7ff fca9 	bl	8001788 <memset>
 8001e36:	6365      	str	r5, [r4, #52]	; 0x34
 8001e38:	63a5      	str	r5, [r4, #56]	; 0x38
 8001e3a:	64a5      	str	r5, [r4, #72]	; 0x48
 8001e3c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001e3e:	e7e6      	b.n	8001e0e <__sfp+0x42>
 8001e40:	080028b0 	.word	0x080028b0

08001e44 <_fwalk_reent>:
 8001e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e48:	4680      	mov	r8, r0
 8001e4a:	4689      	mov	r9, r1
 8001e4c:	2600      	movs	r6, #0
 8001e4e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e52:	b914      	cbnz	r4, 8001e5a <_fwalk_reent+0x16>
 8001e54:	4630      	mov	r0, r6
 8001e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e5a:	68a5      	ldr	r5, [r4, #8]
 8001e5c:	6867      	ldr	r7, [r4, #4]
 8001e5e:	3f01      	subs	r7, #1
 8001e60:	d501      	bpl.n	8001e66 <_fwalk_reent+0x22>
 8001e62:	6824      	ldr	r4, [r4, #0]
 8001e64:	e7f5      	b.n	8001e52 <_fwalk_reent+0xe>
 8001e66:	89ab      	ldrh	r3, [r5, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d907      	bls.n	8001e7c <_fwalk_reent+0x38>
 8001e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e70:	3301      	adds	r3, #1
 8001e72:	d003      	beq.n	8001e7c <_fwalk_reent+0x38>
 8001e74:	4629      	mov	r1, r5
 8001e76:	4640      	mov	r0, r8
 8001e78:	47c8      	blx	r9
 8001e7a:	4306      	orrs	r6, r0
 8001e7c:	3568      	adds	r5, #104	; 0x68
 8001e7e:	e7ee      	b.n	8001e5e <_fwalk_reent+0x1a>

08001e80 <__swhatbuf_r>:
 8001e80:	b570      	push	{r4, r5, r6, lr}
 8001e82:	460e      	mov	r6, r1
 8001e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e88:	b090      	sub	sp, #64	; 0x40
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	461d      	mov	r5, r3
 8001e90:	da07      	bge.n	8001ea2 <__swhatbuf_r+0x22>
 8001e92:	2300      	movs	r3, #0
 8001e94:	602b      	str	r3, [r5, #0]
 8001e96:	89b3      	ldrh	r3, [r6, #12]
 8001e98:	061a      	lsls	r2, r3, #24
 8001e9a:	d410      	bmi.n	8001ebe <__swhatbuf_r+0x3e>
 8001e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea0:	e00e      	b.n	8001ec0 <__swhatbuf_r+0x40>
 8001ea2:	aa01      	add	r2, sp, #4
 8001ea4:	f000 fc4e 	bl	8002744 <_fstat_r>
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	dbf2      	blt.n	8001e92 <__swhatbuf_r+0x12>
 8001eac:	9a02      	ldr	r2, [sp, #8]
 8001eae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001eb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001eb6:	425a      	negs	r2, r3
 8001eb8:	415a      	adcs	r2, r3
 8001eba:	602a      	str	r2, [r5, #0]
 8001ebc:	e7ee      	b.n	8001e9c <__swhatbuf_r+0x1c>
 8001ebe:	2340      	movs	r3, #64	; 0x40
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	6023      	str	r3, [r4, #0]
 8001ec4:	b010      	add	sp, #64	; 0x40
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}

08001ec8 <__smakebuf_r>:
 8001ec8:	898b      	ldrh	r3, [r1, #12]
 8001eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ecc:	079d      	lsls	r5, r3, #30
 8001ece:	4606      	mov	r6, r0
 8001ed0:	460c      	mov	r4, r1
 8001ed2:	d507      	bpl.n	8001ee4 <__smakebuf_r+0x1c>
 8001ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ed8:	6023      	str	r3, [r4, #0]
 8001eda:	6123      	str	r3, [r4, #16]
 8001edc:	2301      	movs	r3, #1
 8001ede:	6163      	str	r3, [r4, #20]
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	ab01      	add	r3, sp, #4
 8001ee6:	466a      	mov	r2, sp
 8001ee8:	f7ff ffca 	bl	8001e80 <__swhatbuf_r>
 8001eec:	9900      	ldr	r1, [sp, #0]
 8001eee:	4605      	mov	r5, r0
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f000 f87d 	bl	8001ff0 <_malloc_r>
 8001ef6:	b948      	cbnz	r0, 8001f0c <__smakebuf_r+0x44>
 8001ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001efc:	059a      	lsls	r2, r3, #22
 8001efe:	d4ef      	bmi.n	8001ee0 <__smakebuf_r+0x18>
 8001f00:	f023 0303 	bic.w	r3, r3, #3
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	81a3      	strh	r3, [r4, #12]
 8001f0a:	e7e3      	b.n	8001ed4 <__smakebuf_r+0xc>
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <__smakebuf_r+0x7c>)
 8001f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f10:	89a3      	ldrh	r3, [r4, #12]
 8001f12:	6020      	str	r0, [r4, #0]
 8001f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f18:	81a3      	strh	r3, [r4, #12]
 8001f1a:	9b00      	ldr	r3, [sp, #0]
 8001f1c:	6120      	str	r0, [r4, #16]
 8001f1e:	6163      	str	r3, [r4, #20]
 8001f20:	9b01      	ldr	r3, [sp, #4]
 8001f22:	b15b      	cbz	r3, 8001f3c <__smakebuf_r+0x74>
 8001f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f28:	4630      	mov	r0, r6
 8001f2a:	f000 fc1d 	bl	8002768 <_isatty_r>
 8001f2e:	b128      	cbz	r0, 8001f3c <__smakebuf_r+0x74>
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	81a3      	strh	r3, [r4, #12]
 8001f3c:	89a3      	ldrh	r3, [r4, #12]
 8001f3e:	431d      	orrs	r5, r3
 8001f40:	81a5      	strh	r5, [r4, #12]
 8001f42:	e7cd      	b.n	8001ee0 <__smakebuf_r+0x18>
 8001f44:	08001ced 	.word	0x08001ced

08001f48 <malloc>:
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <malloc+0xc>)
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	f000 b84f 	b.w	8001ff0 <_malloc_r>
 8001f52:	bf00      	nop
 8001f54:	20000314 	.word	0x20000314

08001f58 <_free_r>:
 8001f58:	b538      	push	{r3, r4, r5, lr}
 8001f5a:	4605      	mov	r5, r0
 8001f5c:	2900      	cmp	r1, #0
 8001f5e:	d043      	beq.n	8001fe8 <_free_r+0x90>
 8001f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f64:	1f0c      	subs	r4, r1, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bfb8      	it	lt
 8001f6a:	18e4      	addlt	r4, r4, r3
 8001f6c:	f000 fc2c 	bl	80027c8 <__malloc_lock>
 8001f70:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <_free_r+0x94>)
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	4610      	mov	r0, r2
 8001f76:	b933      	cbnz	r3, 8001f86 <_free_r+0x2e>
 8001f78:	6063      	str	r3, [r4, #4]
 8001f7a:	6014      	str	r4, [r2, #0]
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f82:	f000 bc22 	b.w	80027ca <__malloc_unlock>
 8001f86:	42a3      	cmp	r3, r4
 8001f88:	d90b      	bls.n	8001fa2 <_free_r+0x4a>
 8001f8a:	6821      	ldr	r1, [r4, #0]
 8001f8c:	1862      	adds	r2, r4, r1
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	bf01      	itttt	eq
 8001f92:	681a      	ldreq	r2, [r3, #0]
 8001f94:	685b      	ldreq	r3, [r3, #4]
 8001f96:	1852      	addeq	r2, r2, r1
 8001f98:	6022      	streq	r2, [r4, #0]
 8001f9a:	6063      	str	r3, [r4, #4]
 8001f9c:	6004      	str	r4, [r0, #0]
 8001f9e:	e7ed      	b.n	8001f7c <_free_r+0x24>
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	b10a      	cbz	r2, 8001faa <_free_r+0x52>
 8001fa6:	42a2      	cmp	r2, r4
 8001fa8:	d9fa      	bls.n	8001fa0 <_free_r+0x48>
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	1858      	adds	r0, r3, r1
 8001fae:	42a0      	cmp	r0, r4
 8001fb0:	d10b      	bne.n	8001fca <_free_r+0x72>
 8001fb2:	6820      	ldr	r0, [r4, #0]
 8001fb4:	4401      	add	r1, r0
 8001fb6:	1858      	adds	r0, r3, r1
 8001fb8:	4282      	cmp	r2, r0
 8001fba:	6019      	str	r1, [r3, #0]
 8001fbc:	d1de      	bne.n	8001f7c <_free_r+0x24>
 8001fbe:	6810      	ldr	r0, [r2, #0]
 8001fc0:	6852      	ldr	r2, [r2, #4]
 8001fc2:	4401      	add	r1, r0
 8001fc4:	6019      	str	r1, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	e7d8      	b.n	8001f7c <_free_r+0x24>
 8001fca:	d902      	bls.n	8001fd2 <_free_r+0x7a>
 8001fcc:	230c      	movs	r3, #12
 8001fce:	602b      	str	r3, [r5, #0]
 8001fd0:	e7d4      	b.n	8001f7c <_free_r+0x24>
 8001fd2:	6820      	ldr	r0, [r4, #0]
 8001fd4:	1821      	adds	r1, r4, r0
 8001fd6:	428a      	cmp	r2, r1
 8001fd8:	bf01      	itttt	eq
 8001fda:	6811      	ldreq	r1, [r2, #0]
 8001fdc:	6852      	ldreq	r2, [r2, #4]
 8001fde:	1809      	addeq	r1, r1, r0
 8001fe0:	6021      	streq	r1, [r4, #0]
 8001fe2:	6062      	str	r2, [r4, #4]
 8001fe4:	605c      	str	r4, [r3, #4]
 8001fe6:	e7c9      	b.n	8001f7c <_free_r+0x24>
 8001fe8:	bd38      	pop	{r3, r4, r5, pc}
 8001fea:	bf00      	nop
 8001fec:	2000039c 	.word	0x2000039c

08001ff0 <_malloc_r>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	1ccd      	adds	r5, r1, #3
 8001ff4:	f025 0503 	bic.w	r5, r5, #3
 8001ff8:	3508      	adds	r5, #8
 8001ffa:	2d0c      	cmp	r5, #12
 8001ffc:	bf38      	it	cc
 8001ffe:	250c      	movcc	r5, #12
 8002000:	2d00      	cmp	r5, #0
 8002002:	4606      	mov	r6, r0
 8002004:	db01      	blt.n	800200a <_malloc_r+0x1a>
 8002006:	42a9      	cmp	r1, r5
 8002008:	d903      	bls.n	8002012 <_malloc_r+0x22>
 800200a:	230c      	movs	r3, #12
 800200c:	6033      	str	r3, [r6, #0]
 800200e:	2000      	movs	r0, #0
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	f000 fbd9 	bl	80027c8 <__malloc_lock>
 8002016:	4a23      	ldr	r2, [pc, #140]	; (80020a4 <_malloc_r+0xb4>)
 8002018:	6814      	ldr	r4, [r2, #0]
 800201a:	4621      	mov	r1, r4
 800201c:	b991      	cbnz	r1, 8002044 <_malloc_r+0x54>
 800201e:	4c22      	ldr	r4, [pc, #136]	; (80020a8 <_malloc_r+0xb8>)
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	b91b      	cbnz	r3, 800202c <_malloc_r+0x3c>
 8002024:	4630      	mov	r0, r6
 8002026:	f000 fb17 	bl	8002658 <_sbrk_r>
 800202a:	6020      	str	r0, [r4, #0]
 800202c:	4629      	mov	r1, r5
 800202e:	4630      	mov	r0, r6
 8002030:	f000 fb12 	bl	8002658 <_sbrk_r>
 8002034:	1c43      	adds	r3, r0, #1
 8002036:	d126      	bne.n	8002086 <_malloc_r+0x96>
 8002038:	230c      	movs	r3, #12
 800203a:	4630      	mov	r0, r6
 800203c:	6033      	str	r3, [r6, #0]
 800203e:	f000 fbc4 	bl	80027ca <__malloc_unlock>
 8002042:	e7e4      	b.n	800200e <_malloc_r+0x1e>
 8002044:	680b      	ldr	r3, [r1, #0]
 8002046:	1b5b      	subs	r3, r3, r5
 8002048:	d41a      	bmi.n	8002080 <_malloc_r+0x90>
 800204a:	2b0b      	cmp	r3, #11
 800204c:	d90f      	bls.n	800206e <_malloc_r+0x7e>
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	18cc      	adds	r4, r1, r3
 8002052:	50cd      	str	r5, [r1, r3]
 8002054:	4630      	mov	r0, r6
 8002056:	f000 fbb8 	bl	80027ca <__malloc_unlock>
 800205a:	f104 000b 	add.w	r0, r4, #11
 800205e:	1d23      	adds	r3, r4, #4
 8002060:	f020 0007 	bic.w	r0, r0, #7
 8002064:	1ac3      	subs	r3, r0, r3
 8002066:	d01b      	beq.n	80020a0 <_malloc_r+0xb0>
 8002068:	425a      	negs	r2, r3
 800206a:	50e2      	str	r2, [r4, r3]
 800206c:	bd70      	pop	{r4, r5, r6, pc}
 800206e:	428c      	cmp	r4, r1
 8002070:	bf0b      	itete	eq
 8002072:	6863      	ldreq	r3, [r4, #4]
 8002074:	684b      	ldrne	r3, [r1, #4]
 8002076:	6013      	streq	r3, [r2, #0]
 8002078:	6063      	strne	r3, [r4, #4]
 800207a:	bf18      	it	ne
 800207c:	460c      	movne	r4, r1
 800207e:	e7e9      	b.n	8002054 <_malloc_r+0x64>
 8002080:	460c      	mov	r4, r1
 8002082:	6849      	ldr	r1, [r1, #4]
 8002084:	e7ca      	b.n	800201c <_malloc_r+0x2c>
 8002086:	1cc4      	adds	r4, r0, #3
 8002088:	f024 0403 	bic.w	r4, r4, #3
 800208c:	42a0      	cmp	r0, r4
 800208e:	d005      	beq.n	800209c <_malloc_r+0xac>
 8002090:	1a21      	subs	r1, r4, r0
 8002092:	4630      	mov	r0, r6
 8002094:	f000 fae0 	bl	8002658 <_sbrk_r>
 8002098:	3001      	adds	r0, #1
 800209a:	d0cd      	beq.n	8002038 <_malloc_r+0x48>
 800209c:	6025      	str	r5, [r4, #0]
 800209e:	e7d9      	b.n	8002054 <_malloc_r+0x64>
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
 80020a2:	bf00      	nop
 80020a4:	2000039c 	.word	0x2000039c
 80020a8:	200003a0 	.word	0x200003a0

080020ac <__sfputc_r>:
 80020ac:	6893      	ldr	r3, [r2, #8]
 80020ae:	b410      	push	{r4}
 80020b0:	3b01      	subs	r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	6093      	str	r3, [r2, #8]
 80020b6:	da08      	bge.n	80020ca <__sfputc_r+0x1e>
 80020b8:	6994      	ldr	r4, [r2, #24]
 80020ba:	42a3      	cmp	r3, r4
 80020bc:	db02      	blt.n	80020c4 <__sfputc_r+0x18>
 80020be:	b2cb      	uxtb	r3, r1
 80020c0:	2b0a      	cmp	r3, #10
 80020c2:	d102      	bne.n	80020ca <__sfputc_r+0x1e>
 80020c4:	bc10      	pop	{r4}
 80020c6:	f7ff bc9f 	b.w	8001a08 <__swbuf_r>
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	1c58      	adds	r0, r3, #1
 80020ce:	6010      	str	r0, [r2, #0]
 80020d0:	7019      	strb	r1, [r3, #0]
 80020d2:	b2c8      	uxtb	r0, r1
 80020d4:	bc10      	pop	{r4}
 80020d6:	4770      	bx	lr

080020d8 <__sfputs_r>:
 80020d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020da:	4606      	mov	r6, r0
 80020dc:	460f      	mov	r7, r1
 80020de:	4614      	mov	r4, r2
 80020e0:	18d5      	adds	r5, r2, r3
 80020e2:	42ac      	cmp	r4, r5
 80020e4:	d101      	bne.n	80020ea <__sfputs_r+0x12>
 80020e6:	2000      	movs	r0, #0
 80020e8:	e007      	b.n	80020fa <__sfputs_r+0x22>
 80020ea:	463a      	mov	r2, r7
 80020ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020f0:	4630      	mov	r0, r6
 80020f2:	f7ff ffdb 	bl	80020ac <__sfputc_r>
 80020f6:	1c43      	adds	r3, r0, #1
 80020f8:	d1f3      	bne.n	80020e2 <__sfputs_r+0xa>
 80020fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020fc <_vfiprintf_r>:
 80020fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002100:	b09d      	sub	sp, #116	; 0x74
 8002102:	460c      	mov	r4, r1
 8002104:	4617      	mov	r7, r2
 8002106:	9303      	str	r3, [sp, #12]
 8002108:	4606      	mov	r6, r0
 800210a:	b118      	cbz	r0, 8002114 <_vfiprintf_r+0x18>
 800210c:	6983      	ldr	r3, [r0, #24]
 800210e:	b90b      	cbnz	r3, 8002114 <_vfiprintf_r+0x18>
 8002110:	f7ff fe2c 	bl	8001d6c <__sinit>
 8002114:	4b7c      	ldr	r3, [pc, #496]	; (8002308 <_vfiprintf_r+0x20c>)
 8002116:	429c      	cmp	r4, r3
 8002118:	d157      	bne.n	80021ca <_vfiprintf_r+0xce>
 800211a:	6874      	ldr	r4, [r6, #4]
 800211c:	89a3      	ldrh	r3, [r4, #12]
 800211e:	0718      	lsls	r0, r3, #28
 8002120:	d55d      	bpl.n	80021de <_vfiprintf_r+0xe2>
 8002122:	6923      	ldr	r3, [r4, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d05a      	beq.n	80021de <_vfiprintf_r+0xe2>
 8002128:	2300      	movs	r3, #0
 800212a:	9309      	str	r3, [sp, #36]	; 0x24
 800212c:	2320      	movs	r3, #32
 800212e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002132:	2330      	movs	r3, #48	; 0x30
 8002134:	f04f 0b01 	mov.w	fp, #1
 8002138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800213c:	46b8      	mov	r8, r7
 800213e:	4645      	mov	r5, r8
 8002140:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d155      	bne.n	80021f4 <_vfiprintf_r+0xf8>
 8002148:	ebb8 0a07 	subs.w	sl, r8, r7
 800214c:	d00b      	beq.n	8002166 <_vfiprintf_r+0x6a>
 800214e:	4653      	mov	r3, sl
 8002150:	463a      	mov	r2, r7
 8002152:	4621      	mov	r1, r4
 8002154:	4630      	mov	r0, r6
 8002156:	f7ff ffbf 	bl	80020d8 <__sfputs_r>
 800215a:	3001      	adds	r0, #1
 800215c:	f000 80c4 	beq.w	80022e8 <_vfiprintf_r+0x1ec>
 8002160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002162:	4453      	add	r3, sl
 8002164:	9309      	str	r3, [sp, #36]	; 0x24
 8002166:	f898 3000 	ldrb.w	r3, [r8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80bc 	beq.w	80022e8 <_vfiprintf_r+0x1ec>
 8002170:	2300      	movs	r3, #0
 8002172:	f04f 32ff 	mov.w	r2, #4294967295
 8002176:	9304      	str	r3, [sp, #16]
 8002178:	9307      	str	r3, [sp, #28]
 800217a:	9205      	str	r2, [sp, #20]
 800217c:	9306      	str	r3, [sp, #24]
 800217e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002182:	931a      	str	r3, [sp, #104]	; 0x68
 8002184:	2205      	movs	r2, #5
 8002186:	7829      	ldrb	r1, [r5, #0]
 8002188:	4860      	ldr	r0, [pc, #384]	; (800230c <_vfiprintf_r+0x210>)
 800218a:	f000 fb0f 	bl	80027ac <memchr>
 800218e:	f105 0801 	add.w	r8, r5, #1
 8002192:	9b04      	ldr	r3, [sp, #16]
 8002194:	2800      	cmp	r0, #0
 8002196:	d131      	bne.n	80021fc <_vfiprintf_r+0x100>
 8002198:	06d9      	lsls	r1, r3, #27
 800219a:	bf44      	itt	mi
 800219c:	2220      	movmi	r2, #32
 800219e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80021a2:	071a      	lsls	r2, r3, #28
 80021a4:	bf44      	itt	mi
 80021a6:	222b      	movmi	r2, #43	; 0x2b
 80021a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80021ac:	782a      	ldrb	r2, [r5, #0]
 80021ae:	2a2a      	cmp	r2, #42	; 0x2a
 80021b0:	d02c      	beq.n	800220c <_vfiprintf_r+0x110>
 80021b2:	2100      	movs	r1, #0
 80021b4:	200a      	movs	r0, #10
 80021b6:	9a07      	ldr	r2, [sp, #28]
 80021b8:	46a8      	mov	r8, r5
 80021ba:	f898 3000 	ldrb.w	r3, [r8]
 80021be:	3501      	adds	r5, #1
 80021c0:	3b30      	subs	r3, #48	; 0x30
 80021c2:	2b09      	cmp	r3, #9
 80021c4:	d96d      	bls.n	80022a2 <_vfiprintf_r+0x1a6>
 80021c6:	b371      	cbz	r1, 8002226 <_vfiprintf_r+0x12a>
 80021c8:	e026      	b.n	8002218 <_vfiprintf_r+0x11c>
 80021ca:	4b51      	ldr	r3, [pc, #324]	; (8002310 <_vfiprintf_r+0x214>)
 80021cc:	429c      	cmp	r4, r3
 80021ce:	d101      	bne.n	80021d4 <_vfiprintf_r+0xd8>
 80021d0:	68b4      	ldr	r4, [r6, #8]
 80021d2:	e7a3      	b.n	800211c <_vfiprintf_r+0x20>
 80021d4:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <_vfiprintf_r+0x218>)
 80021d6:	429c      	cmp	r4, r3
 80021d8:	bf08      	it	eq
 80021da:	68f4      	ldreq	r4, [r6, #12]
 80021dc:	e79e      	b.n	800211c <_vfiprintf_r+0x20>
 80021de:	4621      	mov	r1, r4
 80021e0:	4630      	mov	r0, r6
 80021e2:	f7ff fc63 	bl	8001aac <__swsetup_r>
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d09e      	beq.n	8002128 <_vfiprintf_r+0x2c>
 80021ea:	f04f 30ff 	mov.w	r0, #4294967295
 80021ee:	b01d      	add	sp, #116	; 0x74
 80021f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021f4:	2b25      	cmp	r3, #37	; 0x25
 80021f6:	d0a7      	beq.n	8002148 <_vfiprintf_r+0x4c>
 80021f8:	46a8      	mov	r8, r5
 80021fa:	e7a0      	b.n	800213e <_vfiprintf_r+0x42>
 80021fc:	4a43      	ldr	r2, [pc, #268]	; (800230c <_vfiprintf_r+0x210>)
 80021fe:	4645      	mov	r5, r8
 8002200:	1a80      	subs	r0, r0, r2
 8002202:	fa0b f000 	lsl.w	r0, fp, r0
 8002206:	4318      	orrs	r0, r3
 8002208:	9004      	str	r0, [sp, #16]
 800220a:	e7bb      	b.n	8002184 <_vfiprintf_r+0x88>
 800220c:	9a03      	ldr	r2, [sp, #12]
 800220e:	1d11      	adds	r1, r2, #4
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	9103      	str	r1, [sp, #12]
 8002214:	2a00      	cmp	r2, #0
 8002216:	db01      	blt.n	800221c <_vfiprintf_r+0x120>
 8002218:	9207      	str	r2, [sp, #28]
 800221a:	e004      	b.n	8002226 <_vfiprintf_r+0x12a>
 800221c:	4252      	negs	r2, r2
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	9207      	str	r2, [sp, #28]
 8002224:	9304      	str	r3, [sp, #16]
 8002226:	f898 3000 	ldrb.w	r3, [r8]
 800222a:	2b2e      	cmp	r3, #46	; 0x2e
 800222c:	d110      	bne.n	8002250 <_vfiprintf_r+0x154>
 800222e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002232:	f108 0101 	add.w	r1, r8, #1
 8002236:	2b2a      	cmp	r3, #42	; 0x2a
 8002238:	d137      	bne.n	80022aa <_vfiprintf_r+0x1ae>
 800223a:	9b03      	ldr	r3, [sp, #12]
 800223c:	f108 0802 	add.w	r8, r8, #2
 8002240:	1d1a      	adds	r2, r3, #4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	9203      	str	r2, [sp, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	bfb8      	it	lt
 800224a:	f04f 33ff 	movlt.w	r3, #4294967295
 800224e:	9305      	str	r3, [sp, #20]
 8002250:	4d31      	ldr	r5, [pc, #196]	; (8002318 <_vfiprintf_r+0x21c>)
 8002252:	2203      	movs	r2, #3
 8002254:	f898 1000 	ldrb.w	r1, [r8]
 8002258:	4628      	mov	r0, r5
 800225a:	f000 faa7 	bl	80027ac <memchr>
 800225e:	b140      	cbz	r0, 8002272 <_vfiprintf_r+0x176>
 8002260:	2340      	movs	r3, #64	; 0x40
 8002262:	1b40      	subs	r0, r0, r5
 8002264:	fa03 f000 	lsl.w	r0, r3, r0
 8002268:	9b04      	ldr	r3, [sp, #16]
 800226a:	f108 0801 	add.w	r8, r8, #1
 800226e:	4303      	orrs	r3, r0
 8002270:	9304      	str	r3, [sp, #16]
 8002272:	f898 1000 	ldrb.w	r1, [r8]
 8002276:	2206      	movs	r2, #6
 8002278:	4828      	ldr	r0, [pc, #160]	; (800231c <_vfiprintf_r+0x220>)
 800227a:	f108 0701 	add.w	r7, r8, #1
 800227e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002282:	f000 fa93 	bl	80027ac <memchr>
 8002286:	2800      	cmp	r0, #0
 8002288:	d034      	beq.n	80022f4 <_vfiprintf_r+0x1f8>
 800228a:	4b25      	ldr	r3, [pc, #148]	; (8002320 <_vfiprintf_r+0x224>)
 800228c:	bb03      	cbnz	r3, 80022d0 <_vfiprintf_r+0x1d4>
 800228e:	9b03      	ldr	r3, [sp, #12]
 8002290:	3307      	adds	r3, #7
 8002292:	f023 0307 	bic.w	r3, r3, #7
 8002296:	3308      	adds	r3, #8
 8002298:	9303      	str	r3, [sp, #12]
 800229a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800229c:	444b      	add	r3, r9
 800229e:	9309      	str	r3, [sp, #36]	; 0x24
 80022a0:	e74c      	b.n	800213c <_vfiprintf_r+0x40>
 80022a2:	fb00 3202 	mla	r2, r0, r2, r3
 80022a6:	2101      	movs	r1, #1
 80022a8:	e786      	b.n	80021b8 <_vfiprintf_r+0xbc>
 80022aa:	2300      	movs	r3, #0
 80022ac:	250a      	movs	r5, #10
 80022ae:	4618      	mov	r0, r3
 80022b0:	9305      	str	r3, [sp, #20]
 80022b2:	4688      	mov	r8, r1
 80022b4:	f898 2000 	ldrb.w	r2, [r8]
 80022b8:	3101      	adds	r1, #1
 80022ba:	3a30      	subs	r2, #48	; 0x30
 80022bc:	2a09      	cmp	r2, #9
 80022be:	d903      	bls.n	80022c8 <_vfiprintf_r+0x1cc>
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0c5      	beq.n	8002250 <_vfiprintf_r+0x154>
 80022c4:	9005      	str	r0, [sp, #20]
 80022c6:	e7c3      	b.n	8002250 <_vfiprintf_r+0x154>
 80022c8:	fb05 2000 	mla	r0, r5, r0, r2
 80022cc:	2301      	movs	r3, #1
 80022ce:	e7f0      	b.n	80022b2 <_vfiprintf_r+0x1b6>
 80022d0:	ab03      	add	r3, sp, #12
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	4622      	mov	r2, r4
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <_vfiprintf_r+0x228>)
 80022d8:	a904      	add	r1, sp, #16
 80022da:	4630      	mov	r0, r6
 80022dc:	f3af 8000 	nop.w
 80022e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80022e4:	4681      	mov	r9, r0
 80022e6:	d1d8      	bne.n	800229a <_vfiprintf_r+0x19e>
 80022e8:	89a3      	ldrh	r3, [r4, #12]
 80022ea:	065b      	lsls	r3, r3, #25
 80022ec:	f53f af7d 	bmi.w	80021ea <_vfiprintf_r+0xee>
 80022f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022f2:	e77c      	b.n	80021ee <_vfiprintf_r+0xf2>
 80022f4:	ab03      	add	r3, sp, #12
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	4622      	mov	r2, r4
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <_vfiprintf_r+0x228>)
 80022fc:	a904      	add	r1, sp, #16
 80022fe:	4630      	mov	r0, r6
 8002300:	f000 f88a 	bl	8002418 <_printf_i>
 8002304:	e7ec      	b.n	80022e0 <_vfiprintf_r+0x1e4>
 8002306:	bf00      	nop
 8002308:	080028d4 	.word	0x080028d4
 800230c:	08002914 	.word	0x08002914
 8002310:	080028f4 	.word	0x080028f4
 8002314:	080028b4 	.word	0x080028b4
 8002318:	0800291a 	.word	0x0800291a
 800231c:	0800291e 	.word	0x0800291e
 8002320:	00000000 	.word	0x00000000
 8002324:	080020d9 	.word	0x080020d9

08002328 <_printf_common>:
 8002328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800232c:	4691      	mov	r9, r2
 800232e:	461f      	mov	r7, r3
 8002330:	688a      	ldr	r2, [r1, #8]
 8002332:	690b      	ldr	r3, [r1, #16]
 8002334:	4606      	mov	r6, r0
 8002336:	4293      	cmp	r3, r2
 8002338:	bfb8      	it	lt
 800233a:	4613      	movlt	r3, r2
 800233c:	f8c9 3000 	str.w	r3, [r9]
 8002340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002344:	460c      	mov	r4, r1
 8002346:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800234a:	b112      	cbz	r2, 8002352 <_printf_common+0x2a>
 800234c:	3301      	adds	r3, #1
 800234e:	f8c9 3000 	str.w	r3, [r9]
 8002352:	6823      	ldr	r3, [r4, #0]
 8002354:	0699      	lsls	r1, r3, #26
 8002356:	bf42      	ittt	mi
 8002358:	f8d9 3000 	ldrmi.w	r3, [r9]
 800235c:	3302      	addmi	r3, #2
 800235e:	f8c9 3000 	strmi.w	r3, [r9]
 8002362:	6825      	ldr	r5, [r4, #0]
 8002364:	f015 0506 	ands.w	r5, r5, #6
 8002368:	d107      	bne.n	800237a <_printf_common+0x52>
 800236a:	f104 0a19 	add.w	sl, r4, #25
 800236e:	68e3      	ldr	r3, [r4, #12]
 8002370:	f8d9 2000 	ldr.w	r2, [r9]
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	429d      	cmp	r5, r3
 8002378:	db2a      	blt.n	80023d0 <_printf_common+0xa8>
 800237a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800237e:	6822      	ldr	r2, [r4, #0]
 8002380:	3300      	adds	r3, #0
 8002382:	bf18      	it	ne
 8002384:	2301      	movne	r3, #1
 8002386:	0692      	lsls	r2, r2, #26
 8002388:	d42f      	bmi.n	80023ea <_printf_common+0xc2>
 800238a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800238e:	4639      	mov	r1, r7
 8002390:	4630      	mov	r0, r6
 8002392:	47c0      	blx	r8
 8002394:	3001      	adds	r0, #1
 8002396:	d022      	beq.n	80023de <_printf_common+0xb6>
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	68e5      	ldr	r5, [r4, #12]
 800239c:	f003 0306 	and.w	r3, r3, #6
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	bf18      	it	ne
 80023a4:	2500      	movne	r5, #0
 80023a6:	f8d9 2000 	ldr.w	r2, [r9]
 80023aa:	f04f 0900 	mov.w	r9, #0
 80023ae:	bf08      	it	eq
 80023b0:	1aad      	subeq	r5, r5, r2
 80023b2:	68a3      	ldr	r3, [r4, #8]
 80023b4:	6922      	ldr	r2, [r4, #16]
 80023b6:	bf08      	it	eq
 80023b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023bc:	4293      	cmp	r3, r2
 80023be:	bfc4      	itt	gt
 80023c0:	1a9b      	subgt	r3, r3, r2
 80023c2:	18ed      	addgt	r5, r5, r3
 80023c4:	341a      	adds	r4, #26
 80023c6:	454d      	cmp	r5, r9
 80023c8:	d11b      	bne.n	8002402 <_printf_common+0xda>
 80023ca:	2000      	movs	r0, #0
 80023cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d0:	2301      	movs	r3, #1
 80023d2:	4652      	mov	r2, sl
 80023d4:	4639      	mov	r1, r7
 80023d6:	4630      	mov	r0, r6
 80023d8:	47c0      	blx	r8
 80023da:	3001      	adds	r0, #1
 80023dc:	d103      	bne.n	80023e6 <_printf_common+0xbe>
 80023de:	f04f 30ff 	mov.w	r0, #4294967295
 80023e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023e6:	3501      	adds	r5, #1
 80023e8:	e7c1      	b.n	800236e <_printf_common+0x46>
 80023ea:	2030      	movs	r0, #48	; 0x30
 80023ec:	18e1      	adds	r1, r4, r3
 80023ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023f8:	4422      	add	r2, r4
 80023fa:	3302      	adds	r3, #2
 80023fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002400:	e7c3      	b.n	800238a <_printf_common+0x62>
 8002402:	2301      	movs	r3, #1
 8002404:	4622      	mov	r2, r4
 8002406:	4639      	mov	r1, r7
 8002408:	4630      	mov	r0, r6
 800240a:	47c0      	blx	r8
 800240c:	3001      	adds	r0, #1
 800240e:	d0e6      	beq.n	80023de <_printf_common+0xb6>
 8002410:	f109 0901 	add.w	r9, r9, #1
 8002414:	e7d7      	b.n	80023c6 <_printf_common+0x9e>
	...

08002418 <_printf_i>:
 8002418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800241c:	4617      	mov	r7, r2
 800241e:	7e0a      	ldrb	r2, [r1, #24]
 8002420:	b085      	sub	sp, #20
 8002422:	2a6e      	cmp	r2, #110	; 0x6e
 8002424:	4698      	mov	r8, r3
 8002426:	4606      	mov	r6, r0
 8002428:	460c      	mov	r4, r1
 800242a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800242c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002430:	f000 80bc 	beq.w	80025ac <_printf_i+0x194>
 8002434:	d81a      	bhi.n	800246c <_printf_i+0x54>
 8002436:	2a63      	cmp	r2, #99	; 0x63
 8002438:	d02e      	beq.n	8002498 <_printf_i+0x80>
 800243a:	d80a      	bhi.n	8002452 <_printf_i+0x3a>
 800243c:	2a00      	cmp	r2, #0
 800243e:	f000 80c8 	beq.w	80025d2 <_printf_i+0x1ba>
 8002442:	2a58      	cmp	r2, #88	; 0x58
 8002444:	f000 808a 	beq.w	800255c <_printf_i+0x144>
 8002448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800244c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002450:	e02a      	b.n	80024a8 <_printf_i+0x90>
 8002452:	2a64      	cmp	r2, #100	; 0x64
 8002454:	d001      	beq.n	800245a <_printf_i+0x42>
 8002456:	2a69      	cmp	r2, #105	; 0x69
 8002458:	d1f6      	bne.n	8002448 <_printf_i+0x30>
 800245a:	6821      	ldr	r1, [r4, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002462:	d023      	beq.n	80024ac <_printf_i+0x94>
 8002464:	1d11      	adds	r1, r2, #4
 8002466:	6019      	str	r1, [r3, #0]
 8002468:	6813      	ldr	r3, [r2, #0]
 800246a:	e027      	b.n	80024bc <_printf_i+0xa4>
 800246c:	2a73      	cmp	r2, #115	; 0x73
 800246e:	f000 80b4 	beq.w	80025da <_printf_i+0x1c2>
 8002472:	d808      	bhi.n	8002486 <_printf_i+0x6e>
 8002474:	2a6f      	cmp	r2, #111	; 0x6f
 8002476:	d02a      	beq.n	80024ce <_printf_i+0xb6>
 8002478:	2a70      	cmp	r2, #112	; 0x70
 800247a:	d1e5      	bne.n	8002448 <_printf_i+0x30>
 800247c:	680a      	ldr	r2, [r1, #0]
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	600a      	str	r2, [r1, #0]
 8002484:	e003      	b.n	800248e <_printf_i+0x76>
 8002486:	2a75      	cmp	r2, #117	; 0x75
 8002488:	d021      	beq.n	80024ce <_printf_i+0xb6>
 800248a:	2a78      	cmp	r2, #120	; 0x78
 800248c:	d1dc      	bne.n	8002448 <_printf_i+0x30>
 800248e:	2278      	movs	r2, #120	; 0x78
 8002490:	496f      	ldr	r1, [pc, #444]	; (8002650 <_printf_i+0x238>)
 8002492:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002496:	e064      	b.n	8002562 <_printf_i+0x14a>
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800249e:	1d11      	adds	r1, r2, #4
 80024a0:	6019      	str	r1, [r3, #0]
 80024a2:	6813      	ldr	r3, [r2, #0]
 80024a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0a3      	b.n	80025f4 <_printf_i+0x1dc>
 80024ac:	f011 0f40 	tst.w	r1, #64	; 0x40
 80024b0:	f102 0104 	add.w	r1, r2, #4
 80024b4:	6019      	str	r1, [r3, #0]
 80024b6:	d0d7      	beq.n	8002468 <_printf_i+0x50>
 80024b8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da03      	bge.n	80024c8 <_printf_i+0xb0>
 80024c0:	222d      	movs	r2, #45	; 0x2d
 80024c2:	425b      	negs	r3, r3
 80024c4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80024c8:	4962      	ldr	r1, [pc, #392]	; (8002654 <_printf_i+0x23c>)
 80024ca:	220a      	movs	r2, #10
 80024cc:	e017      	b.n	80024fe <_printf_i+0xe6>
 80024ce:	6820      	ldr	r0, [r4, #0]
 80024d0:	6819      	ldr	r1, [r3, #0]
 80024d2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80024d6:	d003      	beq.n	80024e0 <_printf_i+0xc8>
 80024d8:	1d08      	adds	r0, r1, #4
 80024da:	6018      	str	r0, [r3, #0]
 80024dc:	680b      	ldr	r3, [r1, #0]
 80024de:	e006      	b.n	80024ee <_printf_i+0xd6>
 80024e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024e4:	f101 0004 	add.w	r0, r1, #4
 80024e8:	6018      	str	r0, [r3, #0]
 80024ea:	d0f7      	beq.n	80024dc <_printf_i+0xc4>
 80024ec:	880b      	ldrh	r3, [r1, #0]
 80024ee:	2a6f      	cmp	r2, #111	; 0x6f
 80024f0:	bf14      	ite	ne
 80024f2:	220a      	movne	r2, #10
 80024f4:	2208      	moveq	r2, #8
 80024f6:	4957      	ldr	r1, [pc, #348]	; (8002654 <_printf_i+0x23c>)
 80024f8:	2000      	movs	r0, #0
 80024fa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80024fe:	6865      	ldr	r5, [r4, #4]
 8002500:	2d00      	cmp	r5, #0
 8002502:	60a5      	str	r5, [r4, #8]
 8002504:	f2c0 809c 	blt.w	8002640 <_printf_i+0x228>
 8002508:	6820      	ldr	r0, [r4, #0]
 800250a:	f020 0004 	bic.w	r0, r0, #4
 800250e:	6020      	str	r0, [r4, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d13f      	bne.n	8002594 <_printf_i+0x17c>
 8002514:	2d00      	cmp	r5, #0
 8002516:	f040 8095 	bne.w	8002644 <_printf_i+0x22c>
 800251a:	4675      	mov	r5, lr
 800251c:	2a08      	cmp	r2, #8
 800251e:	d10b      	bne.n	8002538 <_printf_i+0x120>
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	07da      	lsls	r2, r3, #31
 8002524:	d508      	bpl.n	8002538 <_printf_i+0x120>
 8002526:	6923      	ldr	r3, [r4, #16]
 8002528:	6862      	ldr	r2, [r4, #4]
 800252a:	429a      	cmp	r2, r3
 800252c:	bfde      	ittt	le
 800252e:	2330      	movle	r3, #48	; 0x30
 8002530:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002534:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002538:	ebae 0305 	sub.w	r3, lr, r5
 800253c:	6123      	str	r3, [r4, #16]
 800253e:	f8cd 8000 	str.w	r8, [sp]
 8002542:	463b      	mov	r3, r7
 8002544:	aa03      	add	r2, sp, #12
 8002546:	4621      	mov	r1, r4
 8002548:	4630      	mov	r0, r6
 800254a:	f7ff feed 	bl	8002328 <_printf_common>
 800254e:	3001      	adds	r0, #1
 8002550:	d155      	bne.n	80025fe <_printf_i+0x1e6>
 8002552:	f04f 30ff 	mov.w	r0, #4294967295
 8002556:	b005      	add	sp, #20
 8002558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800255c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002560:	493c      	ldr	r1, [pc, #240]	; (8002654 <_printf_i+0x23c>)
 8002562:	6822      	ldr	r2, [r4, #0]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	f012 0f80 	tst.w	r2, #128	; 0x80
 800256a:	f100 0504 	add.w	r5, r0, #4
 800256e:	601d      	str	r5, [r3, #0]
 8002570:	d001      	beq.n	8002576 <_printf_i+0x15e>
 8002572:	6803      	ldr	r3, [r0, #0]
 8002574:	e002      	b.n	800257c <_printf_i+0x164>
 8002576:	0655      	lsls	r5, r2, #25
 8002578:	d5fb      	bpl.n	8002572 <_printf_i+0x15a>
 800257a:	8803      	ldrh	r3, [r0, #0]
 800257c:	07d0      	lsls	r0, r2, #31
 800257e:	bf44      	itt	mi
 8002580:	f042 0220 	orrmi.w	r2, r2, #32
 8002584:	6022      	strmi	r2, [r4, #0]
 8002586:	b91b      	cbnz	r3, 8002590 <_printf_i+0x178>
 8002588:	6822      	ldr	r2, [r4, #0]
 800258a:	f022 0220 	bic.w	r2, r2, #32
 800258e:	6022      	str	r2, [r4, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	e7b1      	b.n	80024f8 <_printf_i+0xe0>
 8002594:	4675      	mov	r5, lr
 8002596:	fbb3 f0f2 	udiv	r0, r3, r2
 800259a:	fb02 3310 	mls	r3, r2, r0, r3
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80025a4:	4603      	mov	r3, r0
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d1f5      	bne.n	8002596 <_printf_i+0x17e>
 80025aa:	e7b7      	b.n	800251c <_printf_i+0x104>
 80025ac:	6808      	ldr	r0, [r1, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80025b4:	6949      	ldr	r1, [r1, #20]
 80025b6:	d004      	beq.n	80025c2 <_printf_i+0x1aa>
 80025b8:	1d10      	adds	r0, r2, #4
 80025ba:	6018      	str	r0, [r3, #0]
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	6019      	str	r1, [r3, #0]
 80025c0:	e007      	b.n	80025d2 <_printf_i+0x1ba>
 80025c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025c6:	f102 0004 	add.w	r0, r2, #4
 80025ca:	6018      	str	r0, [r3, #0]
 80025cc:	6813      	ldr	r3, [r2, #0]
 80025ce:	d0f6      	beq.n	80025be <_printf_i+0x1a6>
 80025d0:	8019      	strh	r1, [r3, #0]
 80025d2:	2300      	movs	r3, #0
 80025d4:	4675      	mov	r5, lr
 80025d6:	6123      	str	r3, [r4, #16]
 80025d8:	e7b1      	b.n	800253e <_printf_i+0x126>
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	1d11      	adds	r1, r2, #4
 80025de:	6019      	str	r1, [r3, #0]
 80025e0:	6815      	ldr	r5, [r2, #0]
 80025e2:	2100      	movs	r1, #0
 80025e4:	6862      	ldr	r2, [r4, #4]
 80025e6:	4628      	mov	r0, r5
 80025e8:	f000 f8e0 	bl	80027ac <memchr>
 80025ec:	b108      	cbz	r0, 80025f2 <_printf_i+0x1da>
 80025ee:	1b40      	subs	r0, r0, r5
 80025f0:	6060      	str	r0, [r4, #4]
 80025f2:	6863      	ldr	r3, [r4, #4]
 80025f4:	6123      	str	r3, [r4, #16]
 80025f6:	2300      	movs	r3, #0
 80025f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025fc:	e79f      	b.n	800253e <_printf_i+0x126>
 80025fe:	6923      	ldr	r3, [r4, #16]
 8002600:	462a      	mov	r2, r5
 8002602:	4639      	mov	r1, r7
 8002604:	4630      	mov	r0, r6
 8002606:	47c0      	blx	r8
 8002608:	3001      	adds	r0, #1
 800260a:	d0a2      	beq.n	8002552 <_printf_i+0x13a>
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	079b      	lsls	r3, r3, #30
 8002610:	d507      	bpl.n	8002622 <_printf_i+0x20a>
 8002612:	2500      	movs	r5, #0
 8002614:	f104 0919 	add.w	r9, r4, #25
 8002618:	68e3      	ldr	r3, [r4, #12]
 800261a:	9a03      	ldr	r2, [sp, #12]
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	429d      	cmp	r5, r3
 8002620:	db05      	blt.n	800262e <_printf_i+0x216>
 8002622:	68e0      	ldr	r0, [r4, #12]
 8002624:	9b03      	ldr	r3, [sp, #12]
 8002626:	4298      	cmp	r0, r3
 8002628:	bfb8      	it	lt
 800262a:	4618      	movlt	r0, r3
 800262c:	e793      	b.n	8002556 <_printf_i+0x13e>
 800262e:	2301      	movs	r3, #1
 8002630:	464a      	mov	r2, r9
 8002632:	4639      	mov	r1, r7
 8002634:	4630      	mov	r0, r6
 8002636:	47c0      	blx	r8
 8002638:	3001      	adds	r0, #1
 800263a:	d08a      	beq.n	8002552 <_printf_i+0x13a>
 800263c:	3501      	adds	r5, #1
 800263e:	e7eb      	b.n	8002618 <_printf_i+0x200>
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1a7      	bne.n	8002594 <_printf_i+0x17c>
 8002644:	780b      	ldrb	r3, [r1, #0]
 8002646:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800264a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800264e:	e765      	b.n	800251c <_printf_i+0x104>
 8002650:	08002936 	.word	0x08002936
 8002654:	08002925 	.word	0x08002925

08002658 <_sbrk_r>:
 8002658:	b538      	push	{r3, r4, r5, lr}
 800265a:	2300      	movs	r3, #0
 800265c:	4c05      	ldr	r4, [pc, #20]	; (8002674 <_sbrk_r+0x1c>)
 800265e:	4605      	mov	r5, r0
 8002660:	4608      	mov	r0, r1
 8002662:	6023      	str	r3, [r4, #0]
 8002664:	f7fe ffda 	bl	800161c <_sbrk>
 8002668:	1c43      	adds	r3, r0, #1
 800266a:	d102      	bne.n	8002672 <_sbrk_r+0x1a>
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	b103      	cbz	r3, 8002672 <_sbrk_r+0x1a>
 8002670:	602b      	str	r3, [r5, #0]
 8002672:	bd38      	pop	{r3, r4, r5, pc}
 8002674:	200004d0 	.word	0x200004d0

08002678 <__sread>:
 8002678:	b510      	push	{r4, lr}
 800267a:	460c      	mov	r4, r1
 800267c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002680:	f000 f8a4 	bl	80027cc <_read_r>
 8002684:	2800      	cmp	r0, #0
 8002686:	bfab      	itete	ge
 8002688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800268a:	89a3      	ldrhlt	r3, [r4, #12]
 800268c:	181b      	addge	r3, r3, r0
 800268e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002692:	bfac      	ite	ge
 8002694:	6563      	strge	r3, [r4, #84]	; 0x54
 8002696:	81a3      	strhlt	r3, [r4, #12]
 8002698:	bd10      	pop	{r4, pc}

0800269a <__swrite>:
 800269a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800269e:	461f      	mov	r7, r3
 80026a0:	898b      	ldrh	r3, [r1, #12]
 80026a2:	4605      	mov	r5, r0
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	460c      	mov	r4, r1
 80026a8:	4616      	mov	r6, r2
 80026aa:	d505      	bpl.n	80026b8 <__swrite+0x1e>
 80026ac:	2302      	movs	r3, #2
 80026ae:	2200      	movs	r2, #0
 80026b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b4:	f000 f868 	bl	8002788 <_lseek_r>
 80026b8:	89a3      	ldrh	r3, [r4, #12]
 80026ba:	4632      	mov	r2, r6
 80026bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026c0:	81a3      	strh	r3, [r4, #12]
 80026c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026c6:	463b      	mov	r3, r7
 80026c8:	4628      	mov	r0, r5
 80026ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026ce:	f000 b817 	b.w	8002700 <_write_r>

080026d2 <__sseek>:
 80026d2:	b510      	push	{r4, lr}
 80026d4:	460c      	mov	r4, r1
 80026d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026da:	f000 f855 	bl	8002788 <_lseek_r>
 80026de:	1c43      	adds	r3, r0, #1
 80026e0:	89a3      	ldrh	r3, [r4, #12]
 80026e2:	bf15      	itete	ne
 80026e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80026e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80026ee:	81a3      	strheq	r3, [r4, #12]
 80026f0:	bf18      	it	ne
 80026f2:	81a3      	strhne	r3, [r4, #12]
 80026f4:	bd10      	pop	{r4, pc}

080026f6 <__sclose>:
 80026f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026fa:	f000 b813 	b.w	8002724 <_close_r>
	...

08002700 <_write_r>:
 8002700:	b538      	push	{r3, r4, r5, lr}
 8002702:	4605      	mov	r5, r0
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	2200      	movs	r2, #0
 800270a:	4c05      	ldr	r4, [pc, #20]	; (8002720 <_write_r+0x20>)
 800270c:	6022      	str	r2, [r4, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	f7fe ff78 	bl	8001604 <_write>
 8002714:	1c43      	adds	r3, r0, #1
 8002716:	d102      	bne.n	800271e <_write_r+0x1e>
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	b103      	cbz	r3, 800271e <_write_r+0x1e>
 800271c:	602b      	str	r3, [r5, #0]
 800271e:	bd38      	pop	{r3, r4, r5, pc}
 8002720:	200004d0 	.word	0x200004d0

08002724 <_close_r>:
 8002724:	b538      	push	{r3, r4, r5, lr}
 8002726:	2300      	movs	r3, #0
 8002728:	4c05      	ldr	r4, [pc, #20]	; (8002740 <_close_r+0x1c>)
 800272a:	4605      	mov	r5, r0
 800272c:	4608      	mov	r0, r1
 800272e:	6023      	str	r3, [r4, #0]
 8002730:	f7fe ff8e 	bl	8001650 <_close>
 8002734:	1c43      	adds	r3, r0, #1
 8002736:	d102      	bne.n	800273e <_close_r+0x1a>
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	b103      	cbz	r3, 800273e <_close_r+0x1a>
 800273c:	602b      	str	r3, [r5, #0]
 800273e:	bd38      	pop	{r3, r4, r5, pc}
 8002740:	200004d0 	.word	0x200004d0

08002744 <_fstat_r>:
 8002744:	b538      	push	{r3, r4, r5, lr}
 8002746:	2300      	movs	r3, #0
 8002748:	4c06      	ldr	r4, [pc, #24]	; (8002764 <_fstat_r+0x20>)
 800274a:	4605      	mov	r5, r0
 800274c:	4608      	mov	r0, r1
 800274e:	4611      	mov	r1, r2
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	f7fe ff80 	bl	8001656 <_fstat>
 8002756:	1c43      	adds	r3, r0, #1
 8002758:	d102      	bne.n	8002760 <_fstat_r+0x1c>
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	b103      	cbz	r3, 8002760 <_fstat_r+0x1c>
 800275e:	602b      	str	r3, [r5, #0]
 8002760:	bd38      	pop	{r3, r4, r5, pc}
 8002762:	bf00      	nop
 8002764:	200004d0 	.word	0x200004d0

08002768 <_isatty_r>:
 8002768:	b538      	push	{r3, r4, r5, lr}
 800276a:	2300      	movs	r3, #0
 800276c:	4c05      	ldr	r4, [pc, #20]	; (8002784 <_isatty_r+0x1c>)
 800276e:	4605      	mov	r5, r0
 8002770:	4608      	mov	r0, r1
 8002772:	6023      	str	r3, [r4, #0]
 8002774:	f7fe ff74 	bl	8001660 <_isatty>
 8002778:	1c43      	adds	r3, r0, #1
 800277a:	d102      	bne.n	8002782 <_isatty_r+0x1a>
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	b103      	cbz	r3, 8002782 <_isatty_r+0x1a>
 8002780:	602b      	str	r3, [r5, #0]
 8002782:	bd38      	pop	{r3, r4, r5, pc}
 8002784:	200004d0 	.word	0x200004d0

08002788 <_lseek_r>:
 8002788:	b538      	push	{r3, r4, r5, lr}
 800278a:	4605      	mov	r5, r0
 800278c:	4608      	mov	r0, r1
 800278e:	4611      	mov	r1, r2
 8002790:	2200      	movs	r2, #0
 8002792:	4c05      	ldr	r4, [pc, #20]	; (80027a8 <_lseek_r+0x20>)
 8002794:	6022      	str	r2, [r4, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	f7fe ff64 	bl	8001664 <_lseek>
 800279c:	1c43      	adds	r3, r0, #1
 800279e:	d102      	bne.n	80027a6 <_lseek_r+0x1e>
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	b103      	cbz	r3, 80027a6 <_lseek_r+0x1e>
 80027a4:	602b      	str	r3, [r5, #0]
 80027a6:	bd38      	pop	{r3, r4, r5, pc}
 80027a8:	200004d0 	.word	0x200004d0

080027ac <memchr>:
 80027ac:	b510      	push	{r4, lr}
 80027ae:	b2c9      	uxtb	r1, r1
 80027b0:	4402      	add	r2, r0
 80027b2:	4290      	cmp	r0, r2
 80027b4:	4603      	mov	r3, r0
 80027b6:	d101      	bne.n	80027bc <memchr+0x10>
 80027b8:	2000      	movs	r0, #0
 80027ba:	bd10      	pop	{r4, pc}
 80027bc:	781c      	ldrb	r4, [r3, #0]
 80027be:	3001      	adds	r0, #1
 80027c0:	428c      	cmp	r4, r1
 80027c2:	d1f6      	bne.n	80027b2 <memchr+0x6>
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd10      	pop	{r4, pc}

080027c8 <__malloc_lock>:
 80027c8:	4770      	bx	lr

080027ca <__malloc_unlock>:
 80027ca:	4770      	bx	lr

080027cc <_read_r>:
 80027cc:	b538      	push	{r3, r4, r5, lr}
 80027ce:	4605      	mov	r5, r0
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	2200      	movs	r2, #0
 80027d6:	4c05      	ldr	r4, [pc, #20]	; (80027ec <_read_r+0x20>)
 80027d8:	6022      	str	r2, [r4, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	f7fe ff04 	bl	80015e8 <_read>
 80027e0:	1c43      	adds	r3, r0, #1
 80027e2:	d102      	bne.n	80027ea <_read_r+0x1e>
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	b103      	cbz	r3, 80027ea <_read_r+0x1e>
 80027e8:	602b      	str	r3, [r5, #0]
 80027ea:	bd38      	pop	{r3, r4, r5, pc}
 80027ec:	200004d0 	.word	0x200004d0

080027f0 <_init>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	bf00      	nop
 80027f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f6:	bc08      	pop	{r3}
 80027f8:	469e      	mov	lr, r3
 80027fa:	4770      	bx	lr

080027fc <_fini>:
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	bf00      	nop
 8002800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002802:	bc08      	pop	{r3}
 8002804:	469e      	mov	lr, r3
 8002806:	4770      	bx	lr
