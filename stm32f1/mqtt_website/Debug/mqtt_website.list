
mqtt_website.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc4  08004cc4  000205b8  2**0
                  CONTENTS
  4 .ARM          00000000  08004cc4  08004cc4  000205b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cc4  08004cc4  000205b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc4  08004cc4  00014cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  20000000  08004ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200005b8  08005284  000205b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  08005284  00020794  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dea3  00000000  00000000  000205e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021e5  00000000  00000000  0002e484  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  00030670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  00031380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015be9  00000000  00000000  00031f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f43  00000000  00000000  00047b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007324c  00000000  00000000  00051ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4d00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dac  00000000  00000000  000c4d7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200005b8 	.word	0x200005b8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b30 	.word	0x08004b30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200005bc 	.word	0x200005bc
 8000148:	08004b30 	.word	0x08004b30

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dbg_register_task>:
} protocol={'#','*', 0,0,0,0,0, {0},{0},{0},0};



uint8_t dbg_register_task(void (*task_routine)(void), char *task_command, uint8_t args)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	4613      	mov	r3, r2
 8000168:	71fb      	strb	r3, [r7, #7]
	uint8_t	 task_command_len  = strlen((char *)task_command);
 800016a:	68b8      	ldr	r0, [r7, #8]
 800016c:	f7ff ffee 	bl	800014c <strlen>
 8000170:	4603      	mov	r3, r0
 8000172:	75fb      	strb	r3, [r7, #23]
 	if (task_routine == NULL ) return FALSE;
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d101      	bne.n	800017e <dbg_register_task+0x22>
 800017a:	2300      	movs	r3, #0
 800017c:	e049      	b.n	8000212 <dbg_register_task+0xb6>

	if (task_command == NULL) return FALSE;
 800017e:	68bb      	ldr	r3, [r7, #8]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d101      	bne.n	8000188 <dbg_register_task+0x2c>
 8000184:	2300      	movs	r3, #0
 8000186:	e044      	b.n	8000212 <dbg_register_task+0xb6>

	if (task_command_len > 10) return FALSE;
 8000188:	7dfb      	ldrb	r3, [r7, #23]
 800018a:	2b0a      	cmp	r3, #10
 800018c:	d901      	bls.n	8000192 <dbg_register_task+0x36>
 800018e:	2300      	movs	r3, #0
 8000190:	e03f      	b.n	8000212 <dbg_register_task+0xb6>

	if ((task_pool.taken_task+1) >= task_pool.limit ) return FALSE;
 8000192:	4b22      	ldr	r3, [pc, #136]	; (800021c <dbg_register_task+0xc0>)
 8000194:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000198:	3301      	adds	r3, #1
 800019a:	4a20      	ldr	r2, [pc, #128]	; (800021c <dbg_register_task+0xc0>)
 800019c:	f892 20a1 	ldrb.w	r2, [r2, #161]	; 0xa1
 80001a0:	4293      	cmp	r3, r2
 80001a2:	db01      	blt.n	80001a8 <dbg_register_task+0x4c>
 80001a4:	2300      	movs	r3, #0
 80001a6:	e034      	b.n	8000212 <dbg_register_task+0xb6>

	task_pool.entry[task_pool.taken_task].args = args;
 80001a8:	4b1c      	ldr	r3, [pc, #112]	; (800021c <dbg_register_task+0xc0>)
 80001aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80001ae:	4a1b      	ldr	r2, [pc, #108]	; (800021c <dbg_register_task+0xc0>)
 80001b0:	011b      	lsls	r3, r3, #4
 80001b2:	4413      	add	r3, r2
 80001b4:	330f      	adds	r3, #15
 80001b6:	79fa      	ldrb	r2, [r7, #7]
 80001b8:	701a      	strb	r2, [r3, #0]


	task_pool.entry[task_pool.taken_task].handlers.basic  = task_routine;
 80001ba:	4b18      	ldr	r3, [pc, #96]	; (800021c <dbg_register_task+0xc0>)
 80001bc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80001c0:	4a16      	ldr	r2, [pc, #88]	; (800021c <dbg_register_task+0xc0>)
 80001c2:	011b      	lsls	r3, r3, #4
 80001c4:	4413      	add	r3, r2
 80001c6:	68fa      	ldr	r2, [r7, #12]
 80001c8:	601a      	str	r2, [r3, #0]


	task_pool.entry[task_pool.taken_task].command_len = task_command_len;
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <dbg_register_task+0xc0>)
 80001cc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80001d0:	4a12      	ldr	r2, [pc, #72]	; (800021c <dbg_register_task+0xc0>)
 80001d2:	011b      	lsls	r3, r3, #4
 80001d4:	4413      	add	r3, r2
 80001d6:	330e      	adds	r3, #14
 80001d8:	7dfa      	ldrb	r2, [r7, #23]
 80001da:	701a      	strb	r2, [r3, #0]
	memcpy (task_pool.entry[task_pool.taken_task].command  , task_command,task_command_len);
 80001dc:	4b0f      	ldr	r3, [pc, #60]	; (800021c <dbg_register_task+0xc0>)
 80001de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80001e2:	011b      	lsls	r3, r3, #4
 80001e4:	4a0d      	ldr	r2, [pc, #52]	; (800021c <dbg_register_task+0xc0>)
 80001e6:	4413      	add	r3, r2
 80001e8:	3304      	adds	r3, #4
 80001ea:	7dfa      	ldrb	r2, [r7, #23]
 80001ec:	68b9      	ldr	r1, [r7, #8]
 80001ee:	4618      	mov	r0, r3
 80001f0:	f003 fc75 	bl	8003ade <memcpy>

	task_pool.taken_task++;
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <dbg_register_task+0xc0>)
 80001f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80001fa:	3301      	adds	r3, #1
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	4b07      	ldr	r3, [pc, #28]	; (800021c <dbg_register_task+0xc0>)
 8000200:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	printf("Task %lx with cmd [%s] OK\r\n", (uint32_t)task_routine, task_command);
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	68ba      	ldr	r2, [r7, #8]
 8000208:	4619      	mov	r1, r3
 800020a:	4805      	ldr	r0, [pc, #20]	; (8000220 <dbg_register_task+0xc4>)
 800020c:	f003 fc7a 	bl	8003b04 <iprintf>
	return TRUE;
 8000210:	2301      	movs	r3, #1

}
 8000212:	4618      	mov	r0, r3
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	200005e4 	.word	0x200005e4
 8000220:	08004b48 	.word	0x08004b48

08000224 <dbg_command_scan>:
	if ( protocol.tail >= (UART_RX_BUFFER_SIZE-1))
		protocol.tail=false;
}

void dbg_command_scan(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0



	if (!protocol.complete) { return;}
 8000228:	4b15      	ldr	r3, [pc, #84]	; (8000280 <dbg_command_scan+0x5c>)
 800022a:	789b      	ldrb	r3, [r3, #2]
 800022c:	f003 0301 	and.w	r3, r3, #1
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d022      	beq.n	800027c <dbg_command_scan+0x58>
	printf("something recieved\r\n");
 8000236:	4813      	ldr	r0, [pc, #76]	; (8000284 <dbg_command_scan+0x60>)
 8000238:	f003 fcd8 	bl	8003bec <puts>
	protocol.complete	= false;
 800023c:	4a10      	ldr	r2, [pc, #64]	; (8000280 <dbg_command_scan+0x5c>)
 800023e:	7893      	ldrb	r3, [r2, #2]
 8000240:	f36f 0300 	bfc	r3, #0, #1
 8000244:	7093      	strb	r3, [r2, #2]
	protocol.data_in[protocol.tail+1] = '\0';
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <dbg_command_scan+0x5c>)
 8000248:	791b      	ldrb	r3, [r3, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	4a0c      	ldr	r2, [pc, #48]	; (8000280 <dbg_command_scan+0x5c>)
 800024e:	4413      	add	r3, r2
 8000250:	2200      	movs	r2, #0
 8000252:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
	protocol.command	= protocol.data_in[1];
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <dbg_command_scan+0x5c>)
 8000258:	f893 2207 	ldrb.w	r2, [r3, #519]	; 0x207
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <dbg_command_scan+0x5c>)
 800025e:	715a      	strb	r2, [r3, #5]
	memcpy(protocol.parameters,  protocol.data_in,(protocol.tail-1));
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <dbg_command_scan+0x5c>)
 8000262:	791b      	ldrb	r3, [r3, #4]
 8000264:	3b01      	subs	r3, #1
 8000266:	461a      	mov	r2, r3
 8000268:	4907      	ldr	r1, [pc, #28]	; (8000288 <dbg_command_scan+0x64>)
 800026a:	4808      	ldr	r0, [pc, #32]	; (800028c <dbg_command_scan+0x68>)
 800026c:	f003 fc37 	bl	8003ade <memcpy>

	dbg_uart_parser( protocol.parameters) ;
 8000270:	4806      	ldr	r0, [pc, #24]	; (800028c <dbg_command_scan+0x68>)
 8000272:	f000 f90b 	bl	800048c <dbg_uart_parser>
	dbg_clear_packet();
 8000276:	f000 f80b 	bl	8000290 <dbg_clear_packet>
 800027a:	e000      	b.n	800027e <dbg_command_scan+0x5a>
	if (!protocol.complete) { return;}
 800027c:	bf00      	nop

}
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000000 	.word	0x20000000
 8000284:	08004b64 	.word	0x08004b64
 8000288:	20000206 	.word	0x20000206
 800028c:	20000106 	.word	0x20000106

08000290 <dbg_clear_packet>:
	}
}


static void dbg_clear_packet(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	protocol.tail		= false;
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <dbg_clear_packet+0x48>)
 8000296:	2200      	movs	r2, #0
 8000298:	711a      	strb	r2, [r3, #4]
	protocol.start		= false;
 800029a:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <dbg_clear_packet+0x48>)
 800029c:	7893      	ldrb	r3, [r2, #2]
 800029e:	f36f 0341 	bfc	r3, #1, #1
 80002a2:	7093      	strb	r3, [r2, #2]
	protocol.command	= false;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <dbg_clear_packet+0x48>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	715a      	strb	r2, [r3, #5]
	protocol.end		= false;
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <dbg_clear_packet+0x48>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
	protocol.complete	= false;
 80002b2:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <dbg_clear_packet+0x48>)
 80002b4:	7893      	ldrb	r3, [r2, #2]
 80002b6:	f36f 0300 	bfc	r3, #0, #1
 80002ba:	7093      	strb	r3, [r2, #2]

	memset(protocol.parameters, false, UART_RX_BUFFER_SIZE);
 80002bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002c0:	2100      	movs	r1, #0
 80002c2:	4806      	ldr	r0, [pc, #24]	; (80002dc <dbg_clear_packet+0x4c>)
 80002c4:	f003 fc16 	bl	8003af4 <memset>
	memset(protocol.data_in   , false, UART_RX_BUFFER_SIZE);
 80002c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002cc:	2100      	movs	r1, #0
 80002ce:	4804      	ldr	r0, [pc, #16]	; (80002e0 <dbg_clear_packet+0x50>)
 80002d0:	f003 fc10 	bl	8003af4 <memset>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000000 	.word	0x20000000
 80002dc:	20000106 	.word	0x20000106
 80002e0:	20000206 	.word	0x20000206

080002e4 <dbg_has_arguments>:


static uint16_t dbg_has_arguments(uint8_t *msg)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	uint8_t *p_char = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
	p_char = (uint8_t *) strchr((char *)msg,' ');
 80002f0:	2120      	movs	r1, #32
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f003 fd30 	bl	8003d58 <strchr>
 80002f8:	60f8      	str	r0, [r7, #12]
	if (p_char)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d007      	beq.n	8000310 <dbg_has_arguments+0x2c>
		return  ascii_to_to_hex(p_char+1, 'd');
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3301      	adds	r3, #1
 8000304:	2164      	movs	r1, #100	; 0x64
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f846 	bl	8000398 <ascii_to_to_hex>
 800030c:	4603      	mov	r3, r0
 800030e:	e000      	b.n	8000312 <dbg_has_arguments+0x2e>
	return 0;
 8000310:	2300      	movs	r3, #0
}
 8000312:	4618      	mov	r0, r3
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <get_arg_ptr>:


static uint8_t *get_arg_ptr(uint8_t *msg)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
	uint8_t *p_char = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
	p_char = (uint8_t *) strchr((char *)msg,' ');
 8000326:	2120      	movs	r1, #32
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f003 fd15 	bl	8003d58 <strchr>
 800032e:	60f8      	str	r0, [r7, #12]
	if (p_char)
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d002      	beq.n	800033c <get_arg_ptr+0x22>
		return  (p_char+1);
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	3301      	adds	r3, #1
 800033a:	e000      	b.n	800033e <get_arg_ptr+0x24>
	return 0;
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <hexascii_to_hex>:

static uint8_t hexascii_to_hex( char  hex_char) {
 8000346:	b480      	push	{r7}
 8000348:	b083      	sub	sp, #12
 800034a:	af00      	add	r7, sp, #0
 800034c:	4603      	mov	r3, r0
 800034e:	71fb      	strb	r3, [r7, #7]

 	if ( hex_char <= 'F' && hex_char >= 'A') return (hex_char -'A')+10;
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	2b46      	cmp	r3, #70	; 0x46
 8000354:	d806      	bhi.n	8000364 <hexascii_to_hex+0x1e>
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2b40      	cmp	r3, #64	; 0x40
 800035a:	d903      	bls.n	8000364 <hexascii_to_hex+0x1e>
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	3b37      	subs	r3, #55	; 0x37
 8000360:	b2db      	uxtb	r3, r3
 8000362:	e014      	b.n	800038e <hexascii_to_hex+0x48>

 	if ( hex_char <= 'f' && hex_char >= 'a') return (hex_char -'a')+10;
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	2b66      	cmp	r3, #102	; 0x66
 8000368:	d806      	bhi.n	8000378 <hexascii_to_hex+0x32>
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	2b60      	cmp	r3, #96	; 0x60
 800036e:	d903      	bls.n	8000378 <hexascii_to_hex+0x32>
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	3b57      	subs	r3, #87	; 0x57
 8000374:	b2db      	uxtb	r3, r3
 8000376:	e00a      	b.n	800038e <hexascii_to_hex+0x48>

 	if ( hex_char <= '9' && hex_char >= '0') return (hex_char -'0');
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	2b39      	cmp	r3, #57	; 0x39
 800037c:	d806      	bhi.n	800038c <hexascii_to_hex+0x46>
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b2f      	cmp	r3, #47	; 0x2f
 8000382:	d903      	bls.n	800038c <hexascii_to_hex+0x46>
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	3b30      	subs	r3, #48	; 0x30
 8000388:	b2db      	uxtb	r3, r3
 800038a:	e000      	b.n	800038e <hexascii_to_hex+0x48>

 	return INVALID_DIGIT_CONVERTION;
 800038c:	23ff      	movs	r3, #255	; 0xff
 }
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <ascii_to_to_hex>:


static uint16_t ascii_to_to_hex(uint8_t *stream_pointer, uint8_t convertion_type)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	70fb      	strb	r3, [r7, #3]
	uint16_t hex_result        = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	81fb      	strh	r3, [r7, #14]
 	uint8_t stream_length      = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	737b      	strb	r3, [r7, #13]
 	uint16_t converted_digit   = 1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	813b      	strh	r3, [r7, #8]
 	uint16_t convertion_offset = 0x10;
 80003b0:	2310      	movs	r3, #16
 80003b2:	817b      	strh	r3, [r7, #10]

 	if (convertion_type != 'h')
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2b68      	cmp	r3, #104	; 0x68
 80003b8:	d01a      	beq.n	80003f0 <ascii_to_to_hex+0x58>
 		convertion_offset = 0xa;
 80003ba:	230a      	movs	r3, #10
 80003bc:	817b      	strh	r3, [r7, #10]

 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 80003be:	e017      	b.n	80003f0 <ascii_to_to_hex+0x58>

 		converted_digit = ( hexascii_to_hex(*stream_pointer));
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ffbe 	bl	8000346 <hexascii_to_hex>
 80003ca:	4603      	mov	r3, r0
 80003cc:	813b      	strh	r3, [r7, #8]
 		if (INVALID_DIGIT_CONVERTION == converted_digit) {
 80003ce:	893b      	ldrh	r3, [r7, #8]
 80003d0:	2bff      	cmp	r3, #255	; 0xff
 80003d2:	d015      	beq.n	8000400 <ascii_to_to_hex+0x68>
			break;
		}
		hex_result = (hex_result * convertion_offset) + converted_digit;
 80003d4:	89fb      	ldrh	r3, [r7, #14]
 80003d6:	897a      	ldrh	r2, [r7, #10]
 80003d8:	fb02 f303 	mul.w	r3, r2, r3
 80003dc:	b29a      	uxth	r2, r3
 80003de:	893b      	ldrh	r3, [r7, #8]
 80003e0:	4413      	add	r3, r2
 80003e2:	81fb      	strh	r3, [r7, #14]
		stream_pointer++;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3301      	adds	r3, #1
 80003e8:	607b      	str	r3, [r7, #4]
		stream_length++;
 80003ea:	7b7b      	ldrb	r3, [r7, #13]
 80003ec:	3301      	adds	r3, #1
 80003ee:	737b      	strb	r3, [r7, #13]
 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 80003f0:	7b7b      	ldrb	r3, [r7, #13]
 80003f2:	2b05      	cmp	r3, #5
 80003f4:	d005      	beq.n	8000402 <ascii_to_to_hex+0x6a>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d1e0      	bne.n	80003c0 <ascii_to_to_hex+0x28>
 80003fe:	e000      	b.n	8000402 <ascii_to_to_hex+0x6a>
			break;
 8000400:	bf00      	nop
	}
	return hex_result;
 8000402:	89fb      	ldrh	r3, [r7, #14]
  }
 8000404:	4618      	mov	r0, r3
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}

0800040c <dbg_setup>:



void dbg_setup(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
	__HAL_UART_CLEAR_OREFLAG(UART_DBG_PORT);
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <dbg_setup+0x74>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	4b18      	ldr	r3, [pc, #96]	; (8000480 <dbg_setup+0x74>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
	__HAL_UART_CLEAR_NEFLAG(UART_DBG_PORT);
 8000428:	2300      	movs	r3, #0
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <dbg_setup+0x74>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <dbg_setup+0x74>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
	__HAL_UART_CLEAR_FEFLAG(UART_DBG_PORT);
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <dbg_setup+0x74>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <dbg_setup+0x74>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_DISABLE_IT(UART_DBG_PORT, UART_IT_ERR);
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <dbg_setup+0x74>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <dbg_setup+0x74>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f022 0201 	bic.w	r2, r2, #1
 8000462:	615a      	str	r2, [r3, #20]

	HAL_UART_Receive_IT(UART_DBG_PORT,(uint8_t *)Rx_data,1);
 8000464:	2201      	movs	r2, #1
 8000466:	4907      	ldr	r1, [pc, #28]	; (8000484 <dbg_setup+0x78>)
 8000468:	4805      	ldr	r0, [pc, #20]	; (8000480 <dbg_setup+0x74>)
 800046a:	f003 f987 	bl	800377c <HAL_UART_Receive_IT>

	task_pool.limit = MAX_TASK;
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <dbg_setup+0x7c>)
 8000470:	220a      	movs	r2, #10
 8000472:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20000708 	.word	0x20000708
 8000484:	200005e0 	.word	0x200005e0
 8000488:	200005e4 	.word	0x200005e4

0800048c <dbg_uart_parser>:
}



void dbg_uart_parser(uint8_t *msg)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b087      	sub	sp, #28
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uint8_t task_id = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	75fb      	strb	r3, [r7, #23]
	uint16_t args   = dbg_has_arguments(msg);
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f7ff ff23 	bl	80002e4 <dbg_has_arguments>
 800049e:	4603      	mov	r3, r0
 80004a0:	82bb      	strh	r3, [r7, #20]
	uint8_t cmd_len;
	uint8_t *cmd_str;

	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 80004a2:	2300      	movs	r3, #0
 80004a4:	75fb      	strb	r3, [r7, #23]
 80004a6:	e058      	b.n	800055a <dbg_uart_parser+0xce>

		cmd_str = task_pool.entry[task_id].command;
 80004a8:	7dfb      	ldrb	r3, [r7, #23]
 80004aa:	011b      	lsls	r3, r3, #4
 80004ac:	4a32      	ldr	r2, [pc, #200]	; (8000578 <dbg_uart_parser+0xec>)
 80004ae:	4413      	add	r3, r2
 80004b0:	3304      	adds	r3, #4
 80004b2:	613b      	str	r3, [r7, #16]
		cmd_len = task_pool.entry[task_id].command_len;
 80004b4:	7dfb      	ldrb	r3, [r7, #23]
 80004b6:	4a30      	ldr	r2, [pc, #192]	; (8000578 <dbg_uart_parser+0xec>)
 80004b8:	011b      	lsls	r3, r3, #4
 80004ba:	4413      	add	r3, r2
 80004bc:	330e      	adds	r3, #14
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	73fb      	strb	r3, [r7, #15]

		if ( !STR_CMP(msg ,cmd_str,cmd_len))
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	461a      	mov	r2, r3
 80004c6:	6939      	ldr	r1, [r7, #16]
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f003 faf9 	bl	8003ac0 <memcmp>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d003      	beq.n	80004dc <dbg_uart_parser+0x50>
	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 80004d4:	7dfb      	ldrb	r3, [r7, #23]
 80004d6:	3301      	adds	r3, #1
 80004d8:	75fb      	strb	r3, [r7, #23]
 80004da:	e03e      	b.n	800055a <dbg_uart_parser+0xce>
			continue;

		if ((task_pool.entry[task_id].args=='p')){
 80004dc:	7dfb      	ldrb	r3, [r7, #23]
 80004de:	4a26      	ldr	r2, [pc, #152]	; (8000578 <dbg_uart_parser+0xec>)
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	4413      	add	r3, r2
 80004e4:	330f      	adds	r3, #15
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b70      	cmp	r3, #112	; 0x70
 80004ea:	d10e      	bne.n	800050a <dbg_uart_parser+0x7e>
			printf("executing task arg\r\n");
 80004ec:	4823      	ldr	r0, [pc, #140]	; (800057c <dbg_uart_parser+0xf0>)
 80004ee:	f003 fb7d 	bl	8003bec <puts>
			task_pool.entry[task_id].handlers.ptr_arg(get_arg_ptr(msg));
 80004f2:	7dfb      	ldrb	r3, [r7, #23]
 80004f4:	4a20      	ldr	r2, [pc, #128]	; (8000578 <dbg_uart_parser+0xec>)
 80004f6:	011b      	lsls	r3, r3, #4
 80004f8:	4413      	add	r3, r2
 80004fa:	681c      	ldr	r4, [r3, #0]
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff0c 	bl	800031a <get_arg_ptr>
 8000502:	4603      	mov	r3, r0
 8000504:	4618      	mov	r0, r3
 8000506:	47a0      	blx	r4
			return;
 8000508:	e032      	b.n	8000570 <dbg_uart_parser+0xe4>
		}

		if (args && task_pool.entry[task_id].args){
 800050a:	8abb      	ldrh	r3, [r7, #20]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d010      	beq.n	8000532 <dbg_uart_parser+0xa6>
 8000510:	7dfb      	ldrb	r3, [r7, #23]
 8000512:	4a19      	ldr	r2, [pc, #100]	; (8000578 <dbg_uart_parser+0xec>)
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	4413      	add	r3, r2
 8000518:	330f      	adds	r3, #15
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d008      	beq.n	8000532 <dbg_uart_parser+0xa6>
			task_pool.entry[task_id].handlers.uint_args(args);
 8000520:	7dfb      	ldrb	r3, [r7, #23]
 8000522:	4a15      	ldr	r2, [pc, #84]	; (8000578 <dbg_uart_parser+0xec>)
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	4413      	add	r3, r2
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	8aba      	ldrh	r2, [r7, #20]
 800052c:	4610      	mov	r0, r2
 800052e:	4798      	blx	r3
			return;
 8000530:	e01e      	b.n	8000570 <dbg_uart_parser+0xe4>
		}


		if (! (args | task_pool.entry[task_id].args)) {
 8000532:	8abb      	ldrh	r3, [r7, #20]
 8000534:	7dfa      	ldrb	r2, [r7, #23]
 8000536:	4910      	ldr	r1, [pc, #64]	; (8000578 <dbg_uart_parser+0xec>)
 8000538:	0112      	lsls	r2, r2, #4
 800053a:	440a      	add	r2, r1
 800053c:	320f      	adds	r2, #15
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	4313      	orrs	r3, r2
 8000542:	2b00      	cmp	r3, #0
 8000544:	d110      	bne.n	8000568 <dbg_uart_parser+0xdc>
			printf("executing task NO arg\r\n");
 8000546:	480e      	ldr	r0, [pc, #56]	; (8000580 <dbg_uart_parser+0xf4>)
 8000548:	f003 fb50 	bl	8003bec <puts>

			task_pool.entry[task_id].handlers.void_args();
 800054c:	7dfb      	ldrb	r3, [r7, #23]
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <dbg_uart_parser+0xec>)
 8000550:	011b      	lsls	r3, r3, #4
 8000552:	4413      	add	r3, r2
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4798      	blx	r3
			return;
 8000558:	e00a      	b.n	8000570 <dbg_uart_parser+0xe4>
	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <dbg_uart_parser+0xec>)
 800055c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000560:	7dfa      	ldrb	r2, [r7, #23]
 8000562:	429a      	cmp	r2, r3
 8000564:	d3a0      	bcc.n	80004a8 <dbg_uart_parser+0x1c>
 8000566:	e000      	b.n	800056a <dbg_uart_parser+0xde>
		}
		break;
 8000568:	bf00      	nop
	}
	printf("task executed\r\n");
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <dbg_uart_parser+0xf8>)
 800056c:	f003 fb3e 	bl	8003bec <puts>
}
 8000570:	371c      	adds	r7, #28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd90      	pop	{r4, r7, pc}
 8000576:	bf00      	nop
 8000578:	200005e4 	.word	0x200005e4
 800057c:	08004b78 	.word	0x08004b78
 8000580:	08004b8c 	.word	0x08004b8c
 8000584:	08004ba4 	.word	0x08004ba4

08000588 <servo_set_angle>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define SERVO_ANGLE_0   400
#define SERVO_PERIOD    20000
#define SERVO_TIM_PRESCALER 8
void servo_set_angle(uint16_t angle){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]

	printf(" Angle to be set is [%d]\r\n",angle );
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	4619      	mov	r1, r3
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <servo_set_angle+0x1c>)
 8000598:	f003 fab4 	bl	8003b04 <iprintf>
	// if (angle >  MAX_ANGLE) return;
		// htim4.Instance->CCR1 = angle;
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08004bb4 	.word	0x08004bb4

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdout,0, _IOLBF, 0);
 80005ae:	4b31      	ldr	r3, [pc, #196]	; (8000674 <main+0xcc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6898      	ldr	r0, [r3, #8]
 80005b4:	2300      	movs	r3, #0
 80005b6:	2201      	movs	r2, #1
 80005b8:	2100      	movs	r1, #0
 80005ba:	f003 fb1f 	bl	8003bfc <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fddb 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f86d 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f9ed 	bl	80009a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ca:	f000 f9cd 	bl	8000968 <MX_DMA_Init>
  MX_TIM3_Init();
 80005ce:	f000 f8a9 	bl	8000724 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80005d2:	f000 f99f 	bl	8000914 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80005d6:	f000 f925 	bl	8000824 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uint32_t seconds = HAL_GetTick();
 80005da:	f000 fe25 	bl	8001228 <HAL_GetTick>
 80005de:	60f8      	str	r0, [r7, #12]
  printf("Program stars!!\r\n" );
 80005e0:	4825      	ldr	r0, [pc, #148]	; (8000678 <main+0xd0>)
 80005e2:	f003 fb03 	bl	8003bec <puts>
  //printf("PWM table size[%d] !!\r\n",sizeof(pwm_value)/2 );

  dbg_setup();
 80005e6:	f7ff ff11 	bl	800040c <dbg_setup>
  start_led_sequence();
 80005ea:	f000 fc6b 	bl	8000ec4 <start_led_sequence>
  dbg_register_task((void*)parse_led_color_input, "set", 'p');
 80005ee:	2270      	movs	r2, #112	; 0x70
 80005f0:	4922      	ldr	r1, [pc, #136]	; (800067c <main+0xd4>)
 80005f2:	4823      	ldr	r0, [pc, #140]	; (8000680 <main+0xd8>)
 80005f4:	f7ff fdb2 	bl	800015c <dbg_register_task>
  dbg_register_task(stop_led_sequence, "stop",0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	4922      	ldr	r1, [pc, #136]	; (8000684 <main+0xdc>)
 80005fc:	4822      	ldr	r0, [pc, #136]	; (8000688 <main+0xe0>)
 80005fe:	f7ff fdad 	bl	800015c <dbg_register_task>
  dbg_register_task(start_led_sequence, "start",0);
 8000602:	2200      	movs	r2, #0
 8000604:	4921      	ldr	r1, [pc, #132]	; (800068c <main+0xe4>)
 8000606:	4822      	ldr	r0, [pc, #136]	; (8000690 <main+0xe8>)
 8000608:	f7ff fda8 	bl	800015c <dbg_register_task>
  dbg_register_task(servo_set_angle ,"servo",'1');
 800060c:	2231      	movs	r2, #49	; 0x31
 800060e:	4921      	ldr	r1, [pc, #132]	; (8000694 <main+0xec>)
 8000610:	4821      	ldr	r0, [pc, #132]	; (8000698 <main+0xf0>)
 8000612:	f7ff fda3 	bl	800015c <dbg_register_task>

  uint8_t switch_colors = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	72bb      	strb	r3, [r7, #10]
  uint8_t led_id[9]= {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	721a      	strb	r2, [r3, #8]
  uint8_t index = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	72fb      	strb	r3, [r7, #11]
  for(index = 0;index< 9;index++) {
 8000628:	2300      	movs	r3, #0
 800062a:	72fb      	strb	r3, [r7, #11]
 800062c:	e009      	b.n	8000642 <main+0x9a>
	  led_id[index] = index;
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	f107 0210 	add.w	r2, r7, #16
 8000634:	4413      	add	r3, r2
 8000636:	7afa      	ldrb	r2, [r7, #11]
 8000638:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(index = 0;index< 9;index++) {
 800063c:	7afb      	ldrb	r3, [r7, #11]
 800063e:	3301      	adds	r3, #1
 8000640:	72fb      	strb	r3, [r7, #11]
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d9f2      	bls.n	800062e <main+0x86>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    dbg_command_scan();
 8000648:	f7ff fdec 	bl	8000224 <dbg_command_scan>
    if ( HAL_GetTick() >seconds){
 800064c:	f000 fdec 	bl	8001228 <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4293      	cmp	r3, r2
 8000656:	d2f7      	bcs.n	8000648 <main+0xa0>
	    seconds = HAL_GetTick() + 600;
 8000658:	f000 fde6 	bl	8001228 <HAL_GetTick>
 800065c:	4603      	mov	r3, r0
 800065e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000662:	60fb      	str	r3, [r7, #12]
	    GPIOC->ODR ^=GPIO_PIN_13;
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <main+0xf4>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <main+0xf4>)
 800066a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800066e:	60d3      	str	r3, [r2, #12]
    dbg_command_scan();
 8000670:	e7ea      	b.n	8000648 <main+0xa0>
 8000672:	bf00      	nop
 8000674:	20000554 	.word	0x20000554
 8000678:	08004bd0 	.word	0x08004bd0
 800067c:	08004be4 	.word	0x08004be4
 8000680:	08000feb 	.word	0x08000feb
 8000684:	08004be8 	.word	0x08004be8
 8000688:	08000ee9 	.word	0x08000ee9
 800068c:	08004bf0 	.word	0x08004bf0
 8000690:	08000ec5 	.word	0x08000ec5
 8000694:	08004bf8 	.word	0x08004bf8
 8000698:	08000589 	.word	0x08000589
 800069c:	40011000 	.word	0x40011000

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b090      	sub	sp, #64	; 0x40
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	2228      	movs	r2, #40	; 0x28
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fa20 	bl	8003af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c6:	2301      	movs	r3, #1
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2310      	movs	r3, #16
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006d6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fab1 	bl	8001c48 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006ec:	f000 f9a6 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fd1c 	bl	8002148 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000716:	f000 f991 	bl	8000a3c <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3740      	adds	r7, #64	; 0x40
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	; 0x38
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_TIM3_Init+0xf0>)
 8000756:	4a30      	ldr	r2, [pc, #192]	; (8000818 <MX_TIM3_Init+0xf4>)
 8000758:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIMER_PRESCALER;
 800075a:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <MX_TIM3_Init+0xf0>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <MX_TIM3_Init+0xf0>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMER_PERIOD;
 8000766:	4b2d      	ldr	r3, [pc, #180]	; (800081c <MX_TIM3_Init+0xf8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <MX_TIM3_Init+0xfc>)
 800076e:	fba2 2303 	umull	r2, r3, r2, r3
 8000772:	091b      	lsrs	r3, r3, #4
 8000774:	3b01      	subs	r3, #1
 8000776:	4a27      	ldr	r2, [pc, #156]	; (8000814 <MX_TIM3_Init+0xf0>)
 8000778:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <MX_TIM3_Init+0xf0>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_TIM3_Init+0xf0>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000786:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_TIM3_Init+0xf0>)
 8000788:	f001 fe7a 	bl	8002480 <HAL_TIM_Base_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000792:	f000 f953 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800079c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a0:	4619      	mov	r1, r3
 80007a2:	481c      	ldr	r0, [pc, #112]	; (8000814 <MX_TIM3_Init+0xf0>)
 80007a4:	f002 fa92 	bl	8002ccc <HAL_TIM_ConfigClockSource>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80007ae:	f000 f945 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <MX_TIM3_Init+0xf0>)
 80007b4:	f001 fedc 	bl	8002570 <HAL_TIM_PWM_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80007be:	f000 f93d 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	4619      	mov	r1, r3
 80007d0:	4810      	ldr	r0, [pc, #64]	; (8000814 <MX_TIM3_Init+0xf0>)
 80007d2:	f002 fe97 	bl	8003504 <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 80007dc:	f000 f92e 	bl	8000a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e0:	2360      	movs	r3, #96	; 0x60
 80007e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = TIM_OCMODE_PWM1;
 80007e4:	2360      	movs	r3, #96	; 0x60
 80007e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80007ec:	2304      	movs	r3, #4
 80007ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	220c      	movs	r2, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <MX_TIM3_Init+0xf0>)
 80007f8:	f002 f9a2 	bl	8002b40 <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8000802:	f000 f91b 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000806:	4803      	ldr	r0, [pc, #12]	; (8000814 <MX_TIM3_Init+0xf0>)
 8000808:	f000 f9bc 	bl	8000b84 <HAL_TIM_MspPostInit>

}
 800080c:	bf00      	nop
 800080e:	3738      	adds	r7, #56	; 0x38
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200006c8 	.word	0x200006c8
 8000818:	40000400 	.word	0x40000400
 800081c:	20000308 	.word	0x20000308
 8000820:	014f8b59 	.word	0x014f8b59

08000824 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000854:	4b2d      	ldr	r3, [pc, #180]	; (800090c <MX_TIM4_Init+0xe8>)
 8000856:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <MX_TIM4_Init+0xec>)
 8000858:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = SERVO_TIM_PRESCALER;
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <MX_TIM4_Init+0xe8>)
 800085c:	2208      	movs	r2, #8
 800085e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <MX_TIM4_Init+0xe8>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = SERVO_PERIOD;
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <MX_TIM4_Init+0xe8>)
 8000868:	f644 6220 	movw	r2, #20000	; 0x4e20
 800086c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <MX_TIM4_Init+0xe8>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_TIM4_Init+0xe8>)
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800087a:	4824      	ldr	r0, [pc, #144]	; (800090c <MX_TIM4_Init+0xe8>)
 800087c:	f001 fe00 	bl	8002480 <HAL_TIM_Base_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000886:	f000 f8d9 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000894:	4619      	mov	r1, r3
 8000896:	481d      	ldr	r0, [pc, #116]	; (800090c <MX_TIM4_Init+0xe8>)
 8000898:	f002 fa18 	bl	8002ccc <HAL_TIM_ConfigClockSource>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80008a2:	f000 f8cb 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008a6:	4819      	ldr	r0, [pc, #100]	; (800090c <MX_TIM4_Init+0xe8>)
 80008a8:	f001 fe62 	bl	8002570 <HAL_TIM_PWM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80008b2:	f000 f8c3 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_TIM4_Init+0xe8>)
 80008c6:	f002 fe1d 	bl	8003504 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80008d0:	f000 f8b4 	bl	8000a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d4:	2360      	movs	r3, #96	; 0x60
 80008d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = SERVO_ANGLE_0;
 80008d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80008dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80008e2:	2304      	movs	r3, #4
 80008e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	4619      	mov	r1, r3
 80008ec:	4807      	ldr	r0, [pc, #28]	; (800090c <MX_TIM4_Init+0xe8>)
 80008ee:	f002 f927 	bl	8002b40 <HAL_TIM_PWM_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80008f8:	f000 f8a0 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <MX_TIM4_Init+0xe8>)
 80008fe:	f000 f941 	bl	8000b84 <HAL_TIM_MspPostInit>

}
 8000902:	bf00      	nop
 8000904:	3738      	adds	r7, #56	; 0x38
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000688 	.word	0x20000688
 8000910:	40000800 	.word	0x40000800

08000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_USART1_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800094c:	f002 fe30 	bl	80035b0 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000956:	f000 f871 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000708 	.word	0x20000708
 8000964:	40013800 	.word	0x40013800

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_DMA_Init+0x38>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <MX_DMA_Init+0x38>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_DMA_Init+0x38>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	200d      	movs	r0, #13
 800098c:	f000 fd4f 	bl	800142e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000990:	200d      	movs	r0, #13
 8000992:	f000 fd68 	bl	8001466 <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_GPIO_Init+0x90>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(board_led_GPIO_Port, board_led_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_GPIO_Init+0x94>)
 8000a08:	f001 f906 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : board_led_Pin */
  GPIO_InitStruct.Pin = board_led_Pin;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(board_led_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_GPIO_Init+0x94>)
 8000a26:	f000 ff9d 	bl	8001964 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40011000 	.word	0x40011000

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x5c>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_MspInit+0x60>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_MspInit+0x60>)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000

08000aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <HAL_TIM_Base_MspInit+0xc4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d142      	bne.n	8000b44 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <HAL_TIM_Base_MspInit+0xc8>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a2c      	ldr	r2, [pc, #176]	; (8000b74 <HAL_TIM_Base_MspInit+0xc8>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <HAL_TIM_Base_MspInit+0xc8>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <HAL_TIM_Base_MspInit+0xd0>)
 8000ada:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aee:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000afc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000b00:	2220      	movs	r2, #32
 8000b02:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000b0a:	481b      	ldr	r0, [pc, #108]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000b0c:	f000 fcc6 	bl	800149c <HAL_DMA_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000b16:	f7ff ff91 	bl	8000a3c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b20:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000b2a:	621a      	str	r2, [r3, #32]
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_TIM_Base_MspInit+0xcc>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	201d      	movs	r0, #29
 8000b38:	f000 fc79 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b3c:	201d      	movs	r0, #29
 8000b3e:	f000 fc92 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b42:	e010      	b.n	8000b66 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <HAL_TIM_Base_MspInit+0xd4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d10b      	bne.n	8000b66 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_TIM_Base_MspInit+0xc8>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_TIM_Base_MspInit+0xc8>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_TIM_Base_MspInit+0xc8>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40000400 	.word	0x40000400
 8000b74:	40021000 	.word	0x40021000
 8000b78:	20000748 	.word	0x20000748
 8000b7c:	40020030 	.word	0x40020030
 8000b80:	40000800 	.word	0x40000800

08000b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <HAL_TIM_MspPostInit+0x94>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d118      	bne.n	8000bd6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <HAL_TIM_MspPostInit+0x98>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <HAL_TIM_MspPostInit+0x98>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_TIM_MspPostInit+0x98>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000bd0:	f000 fec8 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bd4:	e01c      	b.n	8000c10 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <HAL_TIM_MspPostInit+0xa0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d117      	bne.n	8000c10 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_TIM_MspPostInit+0x98>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <HAL_TIM_MspPostInit+0x98>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_TIM_MspPostInit+0x98>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bf8:	2340      	movs	r3, #64	; 0x40
 8000bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_TIM_MspPostInit+0x9c>)
 8000c0c:	f000 feaa 	bl	8001964 <HAL_GPIO_Init>
}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40000400 	.word	0x40000400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	40000800 	.word	0x40000800

08000c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <HAL_UART_MspInit+0x8c>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d131      	bne.n	8000cac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_UART_MspInit+0x90>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <HAL_UART_MspInit+0x90>)
 8000c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x90>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x90>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <HAL_UART_MspInit+0x90>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_UART_MspInit+0x90>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <HAL_UART_MspInit+0x94>)
 8000c8e:	f000 fe69 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x94>)
 8000ca8:	f000 fe5c 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40013800 	.word	0x40013800
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010800 	.word	0x40010800

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <MemManage_Handler+0x4>

08000cd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <BusFault_Handler+0x4>

08000cde <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <UsageFault_Handler+0x4>

08000ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 fa7a 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <DMA1_Channel3_IRQHandler+0x10>)
 8000d1a:	f000 fcef 	bl	80016fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000748 	.word	0x20000748

08000d28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM3_IRQHandler+0x10>)
 8000d2e:	f001 fdff 	bl	8002930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200006c8 	.word	0x200006c8

08000d3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e00a      	b.n	8000d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4e:	f3af 8000 	nop.w
 8000d52:	4601      	mov	r1, r0
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf0      	blt.n	8000d4e <_read+0x12>
	}

return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
	UNUSED(file);
	UNUSED(len);
	HAL_UART_Transmit( &huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	4804      	ldr	r0, [pc, #16]	; (8000da0 <_write+0x28>)
 8000d90:	f002 fc5b 	bl	800364a <HAL_UART_Transmit>

	return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000708 	.word	0x20000708

08000da4 <_close>:

int _close(int file)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr

08000dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dca:	605a      	str	r2, [r3, #4]
	return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <_isatty>:

int _isatty(int file)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	return 1;
 8000de0:	2301      	movs	r3, #1
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	return 0;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x50>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x16>
		heap_end = &end;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <_sbrk+0x50>)
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <_sbrk+0x54>)
 8000e18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <_sbrk+0x50>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <_sbrk+0x50>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	466a      	mov	r2, sp
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d907      	bls.n	8000e3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e2e:	f002 fe1d 	bl	8003a6c <__errno>
 8000e32:	4602      	mov	r2, r0
 8000e34:	230c      	movs	r3, #12
 8000e36:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	e006      	b.n	8000e4c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <_sbrk+0x50>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <_sbrk+0x50>)
 8000e48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200005d4 	.word	0x200005d4
 8000e58:	20000798 	.word	0x20000798

08000e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <SystemInit+0x5c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <SystemInit+0x5c>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <SystemInit+0x5c>)
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4911      	ldr	r1, [pc, #68]	; (8000eb8 <SystemInit+0x5c>)
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <SystemInit+0x60>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <SystemInit+0x5c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <SystemInit+0x5c>)
 8000e7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <SystemInit+0x5c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SystemInit+0x5c>)
 8000e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e92:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <SystemInit+0x5c>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <SystemInit+0x5c>)
 8000e9a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e9e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SystemInit+0x5c>)
 8000ea2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ea6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SystemInit+0x64>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	609a      	str	r2, [r3, #8]
#endif 
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	f8ff0000 	.word	0xf8ff0000
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <start_led_sequence>:
		0,0,0,0,0,0,0,0
	}
};

void start_led_sequence(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(TIMER_HANDLER_PTR);
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <start_led_sequence+0x1c>)
 8000eca:	f001 fb04 	bl	80024d6 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_DMA(TIMER_HANDLER_PTR, PWM_CHANNEL, (uint32_t *)led_table, sizeof(led_table)/2);
 8000ece:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <start_led_sequence+0x20>)
 8000ed4:	210c      	movs	r1, #12
 8000ed6:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <start_led_sequence+0x1c>)
 8000ed8:	f001 fb7e 	bl	80025d8 <HAL_TIM_PWM_Start_DMA>
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200006c8 	.word	0x200006c8
 8000ee4:	2000030c 	.word	0x2000030c

08000ee8 <stop_led_sequence>:

void stop_led_sequence(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(TIMER_HANDLER_PTR, PWM_CHANNEL);
 8000eec:	210c      	movs	r1, #12
 8000eee:	4808      	ldr	r0, [pc, #32]	; (8000f10 <stop_led_sequence+0x28>)
 8000ef0:	f001 fc78 	bl	80027e4 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_Base_Stop(TIMER_HANDLER_PTR);
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <stop_led_sequence+0x28>)
 8000ef6:	f001 fb11 	bl	800251c <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2102      	movs	r1, #2
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <stop_led_sequence+0x2c>)
 8000f00:	f000 fe8a 	bl	8001c18 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f04:	200a      	movs	r0, #10
 8000f06:	f000 f999 	bl	800123c <HAL_Delay>

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200006c8 	.word	0x200006c8
 8000f14:	40010c00 	.word	0x40010c00

08000f18 <set_color>:
void set_color(uint32_t color_rgb, uint16_t led_id)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
	if (led_id >= TOTAL_LEDS) return;
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d82e      	bhi.n	8000f88 <set_color+0x70>
	uint8_t red_color   = (color_rgb & 0xff0000)>>16;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	73fb      	strb	r3, [r7, #15]
	uint8_t green_color = (color_rgb & 0x00ff00)>>8;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	73bb      	strb	r3, [r7, #14]
	uint8_t blue_color  = (color_rgb & 0x0000ff);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	737b      	strb	r3, [r7, #13]
	set_pwm_entry_color(red_color  , &led_table[led_id][8]);
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	3310      	adds	r3, #16
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <set_color+0x78>)
 8000f48:	441a      	add	r2, r3
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f820 	bl	8000f94 <set_pwm_entry_color>
	set_pwm_entry_color(green_color, &led_table[led_id][0]);
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <set_color+0x78>)
 8000f60:	441a      	add	r2, r3
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f814 	bl	8000f94 <set_pwm_entry_color>
	set_pwm_entry_color(blue_color , &led_table[led_id][16]);
 8000f6c:	887a      	ldrh	r2, [r7, #2]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	3320      	adds	r3, #32
 8000f78:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <set_color+0x78>)
 8000f7a:	441a      	add	r2, r3
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f807 	bl	8000f94 <set_pwm_entry_color>
 8000f86:	e000      	b.n	8000f8a <set_color+0x72>
	if (led_id >= TOTAL_LEDS) return;
 8000f88:	bf00      	nop
}
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000030c 	.word	0x2000030c

08000f94 <set_pwm_entry_color>:

void set_pwm_entry_color(uint8_t color, uint16_t *color_ptr)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
	uint8_t bits;
//w0	memset(color_ptr,0, 8);
	for(bits=0; bits<8;bits++){
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e019      	b.n	8000fda <set_pwm_entry_color+0x46>
		if (((color >>(7-bits) & 0x01))){
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	fa42 f303 	asr.w	r3, r2, r3
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <set_pwm_entry_color+0x34>
			color_ptr[bits] = W1;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	2234      	movs	r2, #52	; 0x34
 8000fc4:	801a      	strh	r2, [r3, #0]
 8000fc6:	e005      	b.n	8000fd4 <set_pwm_entry_color+0x40>
		}else{
			color_ptr[bits] = W0;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	221a      	movs	r2, #26
 8000fd2:	801a      	strh	r2, [r3, #0]
	for(bits=0; bits<8;bits++){
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b07      	cmp	r3, #7
 8000fde:	d9e2      	bls.n	8000fa6 <set_pwm_entry_color+0x12>
		}
	}

}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <parse_led_color_input>:
void parse_led_color_input(char *ascii_color, uint32_t *color_out){
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]

	stop_led_sequence();
 8000ff4:	f7ff ff78 	bl	8000ee8 <stop_led_sequence>
	uint8_t *p_char = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
	uint8_t led_id = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	72fb      	strb	r3, [r7, #11]
	p_char = (uint8_t *) strchr((char *)ascii_color,' ');
 8001000:	2120      	movs	r1, #32
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f002 fea8 	bl	8003d58 <strchr>
 8001008:	60f8      	str	r0, [r7, #12]
	if (p_char == 0)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00e      	beq.n	800102e <parse_led_color_input+0x44>
		return;
	led_id = (uint8_t)((*ascii_color)-'0');
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	3b30      	subs	r3, #48	; 0x30
 8001016:	72fb      	strb	r3, [r7, #11]
	//printf("Led is [%x] , color [%s]\r\n",led_id ,(char *)(p_char+1));
	led_set_color_ascii((char *)(p_char+1),led_id,0 );
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	7afa      	ldrb	r2, [r7, #11]
 800101e:	b291      	uxth	r1, r2
 8001020:	2200      	movs	r2, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f807 	bl	8001036 <led_set_color_ascii>
	start_led_sequence();
 8001028:	f7ff ff4c 	bl	8000ec4 <start_led_sequence>
 800102c:	e000      	b.n	8001030 <parse_led_color_input+0x46>
		return;
 800102e:	bf00      	nop
}
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <led_set_color_ascii>:


void led_set_color_ascii(char *ascii_color ,uint16_t led_id, uint32_t *color_out)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	460b      	mov	r3, r1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	817b      	strh	r3, [r7, #10]
	uint32_t color_out_local;

	color_out_local = ascii_to_to_hex((uint8_t *)ascii_color,'h');
 8001044:	2168      	movs	r1, #104	; 0x68
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f000 f83c 	bl	80010c4 <ascii_to_to_hex>
 800104c:	6178      	str	r0, [r7, #20]
	if (color_out_local == INVALID_DIGIT_CONVERTION) return;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d00b      	beq.n	800106e <led_set_color_ascii+0x38>

	set_color(color_out_local, led_id);
 8001056:	897b      	ldrh	r3, [r7, #10]
 8001058:	4619      	mov	r1, r3
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff5c 	bl	8000f18 <set_color>
	if (color_out != 0){
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <led_set_color_ascii+0x3a>
		*color_out = color_out_local;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e000      	b.n	8001070 <led_set_color_ascii+0x3a>
	if (color_out_local == INVALID_DIGIT_CONVERTION) return;
 800106e:	bf00      	nop
	}
}
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <hexascii_to_hex>:



static uint32_t hexascii_to_hex( char  hex_char) {
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]

	if ( hex_char <= 'F' && hex_char >= 'A') return (hex_char -'A')+10;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b46      	cmp	r3, #70	; 0x46
 8001084:	d805      	bhi.n	8001092 <hexascii_to_hex+0x1c>
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b40      	cmp	r3, #64	; 0x40
 800108a:	d902      	bls.n	8001092 <hexascii_to_hex+0x1c>
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	3b37      	subs	r3, #55	; 0x37
 8001090:	e013      	b.n	80010ba <hexascii_to_hex+0x44>

	if ( hex_char <= 'f' && hex_char >= 'a') return (hex_char -'a')+10;
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b66      	cmp	r3, #102	; 0x66
 8001096:	d805      	bhi.n	80010a4 <hexascii_to_hex+0x2e>
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b60      	cmp	r3, #96	; 0x60
 800109c:	d902      	bls.n	80010a4 <hexascii_to_hex+0x2e>
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	3b57      	subs	r3, #87	; 0x57
 80010a2:	e00a      	b.n	80010ba <hexascii_to_hex+0x44>

	if ( hex_char <= '9' && hex_char >= '0') return (hex_char -'0');
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b39      	cmp	r3, #57	; 0x39
 80010a8:	d805      	bhi.n	80010b6 <hexascii_to_hex+0x40>
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b2f      	cmp	r3, #47	; 0x2f
 80010ae:	d902      	bls.n	80010b6 <hexascii_to_hex+0x40>
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	3b30      	subs	r3, #48	; 0x30
 80010b4:	e001      	b.n	80010ba <hexascii_to_hex+0x44>

	return INVALID_DIGIT_CONVERTION;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 }
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <ascii_to_to_hex>:

 #define MAX_DIGITS                 6
static uint32_t ascii_to_to_hex(uint8_t *stream_pointer, uint8_t convertion_type)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
	uint32_t hex_result        = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
	uint8_t stream_length      = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	74fb      	strb	r3, [r7, #19]
	uint16_t converted_digit   = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	81fb      	strh	r3, [r7, #14]
	uint16_t convertion_offset = 0x10;
 80010dc:	2310      	movs	r3, #16
 80010de:	823b      	strh	r3, [r7, #16]

	if (convertion_type != 'h')
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	2b68      	cmp	r3, #104	; 0x68
 80010e4:	d016      	beq.n	8001114 <ascii_to_to_hex+0x50>
		convertion_offset = 0xa;
 80010e6:	230a      	movs	r3, #10
 80010e8:	823b      	strh	r3, [r7, #16]

	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 80010ea:	e013      	b.n	8001114 <ascii_to_to_hex+0x50>

		converted_digit = ( hexascii_to_hex(*stream_pointer));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ffc0 	bl	8001076 <hexascii_to_hex>
 80010f6:	4603      	mov	r3, r0
 80010f8:	81fb      	strh	r3, [r7, #14]
		if (INVALID_DIGIT_CONVERTION == converted_digit) {
			return  INVALID_DIGIT_CONVERTION;
			break;
		}
		hex_result = (hex_result * convertion_offset) + converted_digit;
 80010fa:	8a3b      	ldrh	r3, [r7, #16]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	fb02 f203 	mul.w	r2, r2, r3
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	4413      	add	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
		stream_pointer++;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3301      	adds	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
		stream_length++;
 800110e:	7cfb      	ldrb	r3, [r7, #19]
 8001110:	3301      	adds	r3, #1
 8001112:	74fb      	strb	r3, [r7, #19]
	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 8001114:	7cfb      	ldrb	r3, [r7, #19]
 8001116:	2b06      	cmp	r3, #6
 8001118:	d003      	beq.n	8001122 <ascii_to_to_hex+0x5e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1e4      	bne.n	80010ec <ascii_to_to_hex+0x28>
	}
	return hex_result;
 8001122:	697b      	ldr	r3, [r7, #20]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800112c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001152:	f7ff fe83 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f002 fc8f 	bl	8003a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800115a:	f7ff fa25 	bl	80005a8 <main>
  bx lr
 800115e:	4770      	bx	lr
  ldr r3, =_sidata
 8001160:	08004ccc 	.word	0x08004ccc
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001168:	200005b8 	.word	0x200005b8
  ldr r2, =_sbss
 800116c:	200005b8 	.word	0x200005b8
  ldr r3, = _ebss
 8001170:	20000794 	.word	0x20000794

08001174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_2_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_Init+0x28>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_Init+0x28>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f945 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fc58 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f95d 	bl	8001482 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 f925 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000308 	.word	0x20000308
 80011fc:	20000550 	.word	0x20000550
 8001200:	2000054c 	.word	0x2000054c

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_IncTick+0x1c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x20>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <HAL_IncTick+0x20>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	20000550 	.word	0x20000550
 8001224:	2000078c 	.word	0x2000078c

08001228 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <HAL_GetTick+0x10>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	2000078c 	.word	0x2000078c

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff fff0 	bl	8001228 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_Delay+0x40>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffe0 	bl	8001228 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000550 	.word	0x20000550

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4906      	ldr	r1, [pc, #24]	; (8001318 <__NVIC_EnableIRQ+0x34>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff90 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff2d 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff42 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff90 	bl	8001370 <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5f 	bl	800131c <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff35 	bl	80012e4 <__NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffa2 	bl	80013d4 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e043      	b.n	800153a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_DMA_Init+0xa8>)
 80014ba:	4413      	add	r3, r2
 80014bc:	4a22      	ldr	r2, [pc, #136]	; (8001548 <HAL_DMA_Init+0xac>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	009a      	lsls	r2, r3, #2
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1f      	ldr	r2, [pc, #124]	; (800154c <HAL_DMA_Init+0xb0>)
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2202      	movs	r2, #2
 80014d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80014e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	bffdfff8 	.word	0xbffdfff8
 8001548:	cccccccd 	.word	0xcccccccd
 800154c:	40020000 	.word	0x40020000

08001550 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_DMA_Start_IT+0x20>
 800156c:	2302      	movs	r3, #2
 800156e:	e04a      	b.n	8001606 <HAL_DMA_Start_IT+0xb6>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800157e:	2b01      	cmp	r3, #1
 8001580:	d13a      	bne.n	80015f8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2202      	movs	r2, #2
 8001586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 f9ae 	bl	8001908 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 020e 	orr.w	r2, r2, #14
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e00f      	b.n	80015e6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0204 	bic.w	r2, r2, #4
 80015d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 020a 	orr.w	r2, r2, #10
 80015e4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	e005      	b.n	8001604 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001600:	2302      	movs	r3, #2
 8001602:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001604:	7dfb      	ldrb	r3, [r7, #23]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001622:	2b02      	cmp	r3, #2
 8001624:	d005      	beq.n	8001632 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2204      	movs	r2, #4
 800162a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e051      	b.n	80016d6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 020e 	bic.w	r2, r2, #14
 8001640:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0201 	bic.w	r2, r2, #1
 8001650:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a22      	ldr	r2, [pc, #136]	; (80016e0 <HAL_DMA_Abort_IT+0xd0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d029      	beq.n	80016b0 <HAL_DMA_Abort_IT+0xa0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a20      	ldr	r2, [pc, #128]	; (80016e4 <HAL_DMA_Abort_IT+0xd4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d022      	beq.n	80016ac <HAL_DMA_Abort_IT+0x9c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <HAL_DMA_Abort_IT+0xd8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d01a      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x96>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <HAL_DMA_Abort_IT+0xdc>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d012      	beq.n	80016a0 <HAL_DMA_Abort_IT+0x90>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_DMA_Abort_IT+0xe0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d00a      	beq.n	800169a <HAL_DMA_Abort_IT+0x8a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <HAL_DMA_Abort_IT+0xe4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d102      	bne.n	8001694 <HAL_DMA_Abort_IT+0x84>
 800168e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001692:	e00e      	b.n	80016b2 <HAL_DMA_Abort_IT+0xa2>
 8001694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001698:	e00b      	b.n	80016b2 <HAL_DMA_Abort_IT+0xa2>
 800169a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169e:	e008      	b.n	80016b2 <HAL_DMA_Abort_IT+0xa2>
 80016a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a4:	e005      	b.n	80016b2 <HAL_DMA_Abort_IT+0xa2>
 80016a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016aa:	e002      	b.n	80016b2 <HAL_DMA_Abort_IT+0xa2>
 80016ac:	2310      	movs	r3, #16
 80016ae:	e000      	b.n	80016b2 <HAL_DMA_Abort_IT+0xa2>
 80016b0:	2301      	movs	r3, #1
 80016b2:	4a11      	ldr	r2, [pc, #68]	; (80016f8 <HAL_DMA_Abort_IT+0xe8>)
 80016b4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
    } 
  }
  return status;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40020008 	.word	0x40020008
 80016e4:	4002001c 	.word	0x4002001c
 80016e8:	40020030 	.word	0x40020030
 80016ec:	40020044 	.word	0x40020044
 80016f0:	40020058 	.word	0x40020058
 80016f4:	4002006c 	.word	0x4002006c
 80016f8:	40020000 	.word	0x40020000

080016fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	2204      	movs	r2, #4
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d04f      	beq.n	80017c4 <HAL_DMA_IRQHandler+0xc8>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	d04a      	beq.n	80017c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0204 	bic.w	r2, r2, #4
 800174a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a66      	ldr	r2, [pc, #408]	; (80018ec <HAL_DMA_IRQHandler+0x1f0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d029      	beq.n	80017aa <HAL_DMA_IRQHandler+0xae>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a65      	ldr	r2, [pc, #404]	; (80018f0 <HAL_DMA_IRQHandler+0x1f4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d022      	beq.n	80017a6 <HAL_DMA_IRQHandler+0xaa>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a63      	ldr	r2, [pc, #396]	; (80018f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01a      	beq.n	80017a0 <HAL_DMA_IRQHandler+0xa4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a62      	ldr	r2, [pc, #392]	; (80018f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d012      	beq.n	800179a <HAL_DMA_IRQHandler+0x9e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a60      	ldr	r2, [pc, #384]	; (80018fc <HAL_DMA_IRQHandler+0x200>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00a      	beq.n	8001794 <HAL_DMA_IRQHandler+0x98>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a5f      	ldr	r2, [pc, #380]	; (8001900 <HAL_DMA_IRQHandler+0x204>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d102      	bne.n	800178e <HAL_DMA_IRQHandler+0x92>
 8001788:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800178c:	e00e      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 800178e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001792:	e00b      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 8001794:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001798:	e008      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 800179a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179e:	e005      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 80017a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a4:	e002      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	e000      	b.n	80017ac <HAL_DMA_IRQHandler+0xb0>
 80017aa:	2304      	movs	r3, #4
 80017ac:	4a55      	ldr	r2, [pc, #340]	; (8001904 <HAL_DMA_IRQHandler+0x208>)
 80017ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8094 	beq.w	80018e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017c2:	e08e      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2202      	movs	r2, #2
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d056      	beq.n	8001882 <HAL_DMA_IRQHandler+0x186>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d051      	beq.n	8001882 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10b      	bne.n	8001804 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 020a 	bic.w	r2, r2, #10
 80017fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a38      	ldr	r2, [pc, #224]	; (80018ec <HAL_DMA_IRQHandler+0x1f0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d029      	beq.n	8001862 <HAL_DMA_IRQHandler+0x166>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a37      	ldr	r2, [pc, #220]	; (80018f0 <HAL_DMA_IRQHandler+0x1f4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d022      	beq.n	800185e <HAL_DMA_IRQHandler+0x162>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a35      	ldr	r2, [pc, #212]	; (80018f4 <HAL_DMA_IRQHandler+0x1f8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01a      	beq.n	8001858 <HAL_DMA_IRQHandler+0x15c>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a34      	ldr	r2, [pc, #208]	; (80018f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d012      	beq.n	8001852 <HAL_DMA_IRQHandler+0x156>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a32      	ldr	r2, [pc, #200]	; (80018fc <HAL_DMA_IRQHandler+0x200>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00a      	beq.n	800184c <HAL_DMA_IRQHandler+0x150>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a31      	ldr	r2, [pc, #196]	; (8001900 <HAL_DMA_IRQHandler+0x204>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d102      	bne.n	8001846 <HAL_DMA_IRQHandler+0x14a>
 8001840:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001844:	e00e      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 8001846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184a:	e00b      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 800184c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001850:	e008      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 8001852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001856:	e005      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	e002      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 800185e:	2320      	movs	r3, #32
 8001860:	e000      	b.n	8001864 <HAL_DMA_IRQHandler+0x168>
 8001862:	2302      	movs	r3, #2
 8001864:	4a27      	ldr	r2, [pc, #156]	; (8001904 <HAL_DMA_IRQHandler+0x208>)
 8001866:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	2b00      	cmp	r3, #0
 8001876:	d034      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001880:	e02f      	b.n	80018e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2208      	movs	r2, #8
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d028      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x1e8>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d023      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 020e 	bic.w	r2, r2, #14
 80018aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	2101      	movs	r1, #1
 80018b6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
    }
  }
  return;
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
}
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020008 	.word	0x40020008
 80018f0:	4002001c 	.word	0x4002001c
 80018f4:	40020030 	.word	0x40020030
 80018f8:	40020044 	.word	0x40020044
 80018fc:	40020058 	.word	0x40020058
 8001900:	4002006c 	.word	0x4002006c
 8001904:	40020000 	.word	0x40020000

08001908 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191e:	2101      	movs	r1, #1
 8001920:	fa01 f202 	lsl.w	r2, r1, r2
 8001924:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b10      	cmp	r3, #16
 8001934:	d108      	bne.n	8001948 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001946:	e007      	b.n	8001958 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	60da      	str	r2, [r3, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	; 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e127      	b.n	8001bc8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001978:	2201      	movs	r2, #1
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8116 	bne.w	8001bc2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b12      	cmp	r3, #18
 800199c:	d034      	beq.n	8001a08 <HAL_GPIO_Init+0xa4>
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d80d      	bhi.n	80019be <HAL_GPIO_Init+0x5a>
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d02b      	beq.n	80019fe <HAL_GPIO_Init+0x9a>
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d804      	bhi.n	80019b4 <HAL_GPIO_Init+0x50>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d031      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d01c      	beq.n	80019ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019b2:	e048      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d043      	beq.n	8001a40 <HAL_GPIO_Init+0xdc>
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d01b      	beq.n	80019f4 <HAL_GPIO_Init+0x90>
          break;
 80019bc:	e043      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019be:	4a89      	ldr	r2, [pc, #548]	; (8001be4 <HAL_GPIO_Init+0x280>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d026      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019c4:	4a87      	ldr	r2, [pc, #540]	; (8001be4 <HAL_GPIO_Init+0x280>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d806      	bhi.n	80019d8 <HAL_GPIO_Init+0x74>
 80019ca:	4a87      	ldr	r2, [pc, #540]	; (8001be8 <HAL_GPIO_Init+0x284>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d020      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019d0:	4a86      	ldr	r2, [pc, #536]	; (8001bec <HAL_GPIO_Init+0x288>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d01d      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
          break;
 80019d6:	e036      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019d8:	4a85      	ldr	r2, [pc, #532]	; (8001bf0 <HAL_GPIO_Init+0x28c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019de:	4a85      	ldr	r2, [pc, #532]	; (8001bf4 <HAL_GPIO_Init+0x290>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d016      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019e4:	4a84      	ldr	r2, [pc, #528]	; (8001bf8 <HAL_GPIO_Init+0x294>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
          break;
 80019ea:	e02c      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e028      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	3304      	adds	r3, #4
 80019fa:	623b      	str	r3, [r7, #32]
          break;
 80019fc:	e023      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	3308      	adds	r3, #8
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e01e      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	330c      	adds	r3, #12
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	e019      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e012      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	611a      	str	r2, [r3, #16]
          break;
 8001a32:	e008      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a34:	2308      	movs	r3, #8
 8001a36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	615a      	str	r2, [r3, #20]
          break;
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2bff      	cmp	r3, #255	; 0xff
 8001a4a:	d801      	bhi.n	8001a50 <HAL_GPIO_Init+0xec>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	e001      	b.n	8001a54 <HAL_GPIO_Init+0xf0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3304      	adds	r3, #4
 8001a54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2bff      	cmp	r3, #255	; 0xff
 8001a5a:	d802      	bhi.n	8001a62 <HAL_GPIO_Init+0xfe>
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x104>
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	3b08      	subs	r3, #8
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	210f      	movs	r1, #15
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	6a39      	ldr	r1, [r7, #32]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	431a      	orrs	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8096 	beq.w	8001bc2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a96:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <HAL_GPIO_Init+0x298>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	4a58      	ldr	r2, [pc, #352]	; (8001bfc <HAL_GPIO_Init+0x298>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6193      	str	r3, [r2, #24]
 8001aa2:	4b56      	ldr	r3, [pc, #344]	; (8001bfc <HAL_GPIO_Init+0x298>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aae:	4a54      	ldr	r2, [pc, #336]	; (8001c00 <HAL_GPIO_Init+0x29c>)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4b      	ldr	r2, [pc, #300]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x19e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <HAL_GPIO_Init+0x2a4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x19a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a49      	ldr	r2, [pc, #292]	; (8001c0c <HAL_GPIO_Init+0x2a8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x196>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a48      	ldr	r2, [pc, #288]	; (8001c10 <HAL_GPIO_Init+0x2ac>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x192>
 8001af2:	2303      	movs	r3, #3
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x1a0>
 8001af6:	2304      	movs	r3, #4
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x1a0>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x1a0>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x1a0>
 8001b02:	2300      	movs	r3, #0
 8001b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b14:	493a      	ldr	r1, [pc, #232]	; (8001c00 <HAL_GPIO_Init+0x29c>)
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b2e:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4938      	ldr	r1, [pc, #224]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
 8001b3a:	e006      	b.n	8001b4a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b3c:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4933      	ldr	r1, [pc, #204]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	492e      	ldr	r1, [pc, #184]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
 8001b62:	e006      	b.n	8001b72 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	4929      	ldr	r1, [pc, #164]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b7e:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	4924      	ldr	r1, [pc, #144]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
 8001b8a:	e006      	b.n	8001b9a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b8c:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	491f      	ldr	r1, [pc, #124]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	491a      	ldr	r1, [pc, #104]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60cb      	str	r3, [r1, #12]
 8001bb2:	e006      	b.n	8001bc2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4915      	ldr	r1, [pc, #84]	; (8001c14 <HAL_GPIO_Init+0x2b0>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f47f aed0 	bne.w	8001978 <HAL_GPIO_Init+0x14>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	372c      	adds	r7, #44	; 0x2c
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	10210000 	.word	0x10210000
 8001be8:	10110000 	.word	0x10110000
 8001bec:	10120000 	.word	0x10120000
 8001bf0:	10310000 	.word	0x10310000
 8001bf4:	10320000 	.word	0x10320000
 8001bf8:	10220000 	.word	0x10220000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	40010c00 	.word	0x40010c00
 8001c0c:	40011000 	.word	0x40011000
 8001c10:	40011400 	.word	0x40011400
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]
 8001c24:	4613      	mov	r3, r2
 8001c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c28:	787b      	ldrb	r3, [r7, #1]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c34:	e003      	b.n	8001c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	041a      	lsls	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e26c      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8087 	beq.w	8001d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c68:	4b92      	ldr	r3, [pc, #584]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d00c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c74:	4b8f      	ldr	r3, [pc, #572]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d112      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5e>
 8001c80:	4b8c      	ldr	r3, [pc, #560]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8e:	4b89      	ldr	r3, [pc, #548]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d06c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x12c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d168      	bne.n	8001d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e246      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x76>
 8001cb0:	4b80      	ldr	r3, [pc, #512]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a7f      	ldr	r2, [pc, #508]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e02e      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b7b      	ldr	r3, [pc, #492]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a7a      	ldr	r2, [pc, #488]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b78      	ldr	r3, [pc, #480]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a77      	ldr	r2, [pc, #476]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e01d      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0xbc>
 8001cea:	4b72      	ldr	r3, [pc, #456]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a71      	ldr	r2, [pc, #452]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a6e      	ldr	r2, [pc, #440]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001d04:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a6a      	ldr	r2, [pc, #424]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b68      	ldr	r3, [pc, #416]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a67      	ldr	r2, [pc, #412]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fa80 	bl	8001228 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fa7c 	bl	8001228 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1fa      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0xe4>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fa6c 	bl	8001228 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff fa68 	bl	8001228 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1e6      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x10c>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d063      	beq.n	8001e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d82:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x18c>
 8001d9a:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x176>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1ba      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4939      	ldr	r1, [pc, #228]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	e03a      	b.n	8001e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fa21 	bl	8001228 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7ff fa1d 	bl	8001228 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e19b      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4927      	ldr	r1, [pc, #156]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e015      	b.n	8001e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fa00 	bl	8001228 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7ff f9fc 	bl	8001228 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e17a      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d03a      	beq.n	8001ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d019      	beq.n	8001e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e64:	f7ff f9e0 	bl	8001228 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7ff f9dc 	bl	8001228 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e15a      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f000 fada 	bl	8002444 <RCC_Delay>
 8001e90:	e01c      	b.n	8001ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff f9c6 	bl	8001228 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f9c2 	bl	8001228 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d908      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e140      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	42420000 	.word	0x42420000
 8001ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	4b9e      	ldr	r3, [pc, #632]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e9      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a6 	beq.w	8002026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ede:	4b97      	ldr	r3, [pc, #604]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b94      	ldr	r3, [pc, #592]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a93      	ldr	r2, [pc, #588]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b91      	ldr	r3, [pc, #580]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	4b8e      	ldr	r3, [pc, #568]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d118      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f12:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a8a      	ldr	r2, [pc, #552]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f983 	bl	8001228 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f26:	f7ff f97f 	bl	8001228 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b64      	cmp	r3, #100	; 0x64
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0fd      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b81      	ldr	r3, [pc, #516]	; (8002140 <HAL_RCC_OscConfig+0x4f8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x312>
 8001f4c:	4b7b      	ldr	r3, [pc, #492]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a7a      	ldr	r2, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e02d      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x334>
 8001f62:	4b76      	ldr	r3, [pc, #472]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a75      	ldr	r2, [pc, #468]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	4b73      	ldr	r3, [pc, #460]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a72      	ldr	r2, [pc, #456]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	e01c      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d10c      	bne.n	8001f9e <HAL_RCC_OscConfig+0x356>
 8001f84:	4b6d      	ldr	r3, [pc, #436]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a6c      	ldr	r2, [pc, #432]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	4b6a      	ldr	r3, [pc, #424]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a69      	ldr	r2, [pc, #420]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f9e:	4b67      	ldr	r3, [pc, #412]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a66      	ldr	r2, [pc, #408]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b64      	ldr	r3, [pc, #400]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a63      	ldr	r2, [pc, #396]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d015      	beq.n	8001fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f933 	bl	8001228 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7ff f92f 	bl	8001228 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e0ab      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	4b57      	ldr	r3, [pc, #348]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x37e>
 8001fe8:	e014      	b.n	8002014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff f91d 	bl	8001228 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff f919 	bl	8001228 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e095      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ee      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d105      	bne.n	8002026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4b48      	ldr	r3, [pc, #288]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a47      	ldr	r2, [pc, #284]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8081 	beq.w	8002132 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002030:	4b42      	ldr	r3, [pc, #264]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d061      	beq.n	8002100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d146      	bne.n	80020d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002044:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_OscConfig+0x4fc>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff f8ed 	bl	8001228 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7ff f8e9 	bl	8001228 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e067      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002064:	4b35      	ldr	r3, [pc, #212]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002078:	d108      	bne.n	800208c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	492d      	ldr	r1, [pc, #180]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208c:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a19      	ldr	r1, [r3, #32]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	430b      	orrs	r3, r1
 800209e:	4927      	ldr	r1, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_RCC_OscConfig+0x4fc>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7ff f8bd 	bl	8001228 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff f8b9 	bl	8001228 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e037      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46a>
 80020d0:	e02f      	b.n	8002132 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HAL_RCC_OscConfig+0x4fc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7ff f8a6 	bl	8001228 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f8a2 	bl	8001228 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e020      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x498>
 80020fe:	e018      	b.n	8002132 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e013      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x4f4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	429a      	cmp	r2, r3
 800211e:	d106      	bne.n	800212e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	40007000 	.word	0x40007000
 8002144:	42420060 	.word	0x42420060

08002148 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0d0      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4965      	ldr	r1, [pc, #404]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0b8      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	494d      	ldr	r1, [pc, #308]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d040      	beq.n	8002268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d115      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e07f      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e073      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b3d      	ldr	r3, [pc, #244]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e06b      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4936      	ldr	r1, [pc, #216]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002238:	f7fe fff6 	bl	8001228 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7fe fff2 	bl	8001228 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e053      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d210      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	4922      	ldr	r1, [pc, #136]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e032      	b.n	80022fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4916      	ldr	r1, [pc, #88]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	490e      	ldr	r1, [pc, #56]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022d6:	f000 f821 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022da:	4601      	mov	r1, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	fa21 f303 	lsr.w	r3, r1, r3
 80022ee:	4a09      	ldr	r2, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1cc>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1d0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe ff54 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40022000 	.word	0x40022000
 800230c:	40021000 	.word	0x40021000
 8002310:	08004c14 	.word	0x08004c14
 8002314:	20000308 	.word	0x20000308
 8002318:	2000054c 	.word	0x2000054c

0800231c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b490      	push	{r4, r7}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002324:	1d3c      	adds	r4, r7, #4
 8002326:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800232c:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b04      	cmp	r3, #4
 8002354:	d002      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x40>
 8002356:	2b08      	cmp	r3, #8
 8002358:	d003      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0x46>
 800235a:	e02d      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800235e:	623b      	str	r3, [r7, #32]
      break;
 8002360:	e02d      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	0c9b      	lsrs	r3, r3, #18
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800236e:	4413      	add	r3, r2
 8002370:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002374:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d013      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c5b      	lsrs	r3, r3, #17
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800238e:	4413      	add	r3, r2
 8002390:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002394:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800239a:	fb02 f203 	mul.w	r2, r2, r3
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	e004      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	623b      	str	r3, [r7, #32]
      break;
 80023b6:	e002      	b.n	80023be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ba:	623b      	str	r3, [r7, #32]
      break;
 80023bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023be:	6a3b      	ldr	r3, [r7, #32]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc90      	pop	{r4, r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	08004c00 	.word	0x08004c00
 80023d0:	08004c10 	.word	0x08004c10
 80023d4:	40021000 	.word	0x40021000
 80023d8:	007a1200 	.word	0x007a1200
 80023dc:	003d0900 	.word	0x003d0900

080023e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b02      	ldr	r3, [pc, #8]	; (80023f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	20000308 	.word	0x20000308

080023f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023f8:	f7ff fff2 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 80023fc:	4601      	mov	r1, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4a03      	ldr	r2, [pc, #12]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	08004c24 	.word	0x08004c24

0800241c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002420:	f7ff ffde 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002424:	4601      	mov	r1, r0
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	0adb      	lsrs	r3, r3, #11
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4a03      	ldr	r2, [pc, #12]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	08004c24 	.word	0x08004c24

08002444 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <RCC_Delay+0x34>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0a      	ldr	r2, [pc, #40]	; (800247c <RCC_Delay+0x38>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0a5b      	lsrs	r3, r3, #9
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002460:	bf00      	nop
  }
  while (Delay --);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	60fa      	str	r2, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f9      	bne.n	8002460 <RCC_Delay+0x1c>
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000308 	.word	0x20000308
 800247c:	10624dd3 	.word	0x10624dd3

08002480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e01d      	b.n	80024ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7fe fb00 	bl	8000aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3304      	adds	r3, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f000 fd7c 	bl	8002fbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d007      	beq.n	8002508 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a1a      	ldr	r2, [r3, #32]
 8002532:	f241 1311 	movw	r3, #4369	; 0x1111
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_TIM_Base_Stop+0x40>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a1a      	ldr	r2, [r3, #32]
 8002542:	f240 4344 	movw	r3, #1092	; 0x444
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_TIM_Base_Stop+0x40>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e01d      	b.n	80025be <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f815 	bl	80025c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3304      	adds	r3, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f000 fd04 	bl	8002fbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d101      	bne.n	80025f6 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80025f2:	2302      	movs	r3, #2
 80025f4:	e0e9      	b.n	80027ca <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10b      	bne.n	800261a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <HAL_TIM_PWM_Start_DMA+0x3a>
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0db      	b.n	80027ca <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b0c      	cmp	r3, #12
 800261e:	f200 80ad 	bhi.w	800277c <HAL_TIM_PWM_Start_DMA+0x1a4>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <HAL_TIM_PWM_Start_DMA+0x50>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	0800265d 	.word	0x0800265d
 800262c:	0800277d 	.word	0x0800277d
 8002630:	0800277d 	.word	0x0800277d
 8002634:	0800277d 	.word	0x0800277d
 8002638:	080026a5 	.word	0x080026a5
 800263c:	0800277d 	.word	0x0800277d
 8002640:	0800277d 	.word	0x0800277d
 8002644:	0800277d 	.word	0x0800277d
 8002648:	080026ed 	.word	0x080026ed
 800264c:	0800277d 	.word	0x0800277d
 8002650:	0800277d 	.word	0x0800277d
 8002654:	0800277d 	.word	0x0800277d
 8002658:	08002735 	.word	0x08002735
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	4a5c      	ldr	r2, [pc, #368]	; (80027d4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	4a5b      	ldr	r2, [pc, #364]	; (80027d8 <HAL_TIM_PWM_Start_DMA+0x200>)
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	4a5a      	ldr	r2, [pc, #360]	; (80027dc <HAL_TIM_PWM_Start_DMA+0x204>)
 8002672:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3334      	adds	r3, #52	; 0x34
 8002680:	461a      	mov	r2, r3
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	f7fe ff64 	bl	8001550 <HAL_DMA_Start_IT>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e09b      	b.n	80027ca <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a0:	60da      	str	r2, [r3, #12]
      break;
 80026a2:	e06c      	b.n	800277e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	4a4a      	ldr	r2, [pc, #296]	; (80027d4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	4a49      	ldr	r2, [pc, #292]	; (80027d8 <HAL_TIM_PWM_Start_DMA+0x200>)
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	4a48      	ldr	r2, [pc, #288]	; (80027dc <HAL_TIM_PWM_Start_DMA+0x204>)
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3338      	adds	r3, #56	; 0x38
 80026c8:	461a      	mov	r2, r3
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	f7fe ff40 	bl	8001550 <HAL_DMA_Start_IT>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e077      	b.n	80027ca <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026e8:	60da      	str	r2, [r3, #12]
      break;
 80026ea:	e048      	b.n	800277e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	4a38      	ldr	r2, [pc, #224]	; (80027d4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80026f2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	4a37      	ldr	r2, [pc, #220]	; (80027d8 <HAL_TIM_PWM_Start_DMA+0x200>)
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	4a36      	ldr	r2, [pc, #216]	; (80027dc <HAL_TIM_PWM_Start_DMA+0x204>)
 8002702:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	333c      	adds	r3, #60	; 0x3c
 8002710:	461a      	mov	r2, r3
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	f7fe ff1c 	bl	8001550 <HAL_DMA_Start_IT>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e053      	b.n	80027ca <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002730:	60da      	str	r2, [r3, #12]
      break;
 8002732:	e024      	b.n	800277e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	4a26      	ldr	r2, [pc, #152]	; (80027d4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <HAL_TIM_PWM_Start_DMA+0x204>)
 800274a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3340      	adds	r3, #64	; 0x40
 8002758:	461a      	mov	r2, r3
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	f7fe fef8 	bl	8001550 <HAL_DMA_Start_IT>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e02f      	b.n	80027ca <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002778:	60da      	str	r2, [r3, #12]
      break;
 800277a:	e000      	b.n	800277e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800277c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2201      	movs	r2, #1
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fe98 	bl	80034bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <HAL_TIM_PWM_Start_DMA+0x208>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d107      	bne.n	80027a6 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2b06      	cmp	r3, #6
 80027b6:	d007      	beq.n	80027c8 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	08002edd 	.word	0x08002edd
 80027d8:	08002f4d 	.word	0x08002f4d
 80027dc:	08002eb9 	.word	0x08002eb9
 80027e0:	40012c00 	.word	0x40012c00

080027e4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b0c      	cmp	r3, #12
 80027f2:	d855      	bhi.n	80028a0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <HAL_TIM_PWM_Stop_DMA+0x18>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	08002831 	.word	0x08002831
 8002800:	080028a1 	.word	0x080028a1
 8002804:	080028a1 	.word	0x080028a1
 8002808:	080028a1 	.word	0x080028a1
 800280c:	0800284d 	.word	0x0800284d
 8002810:	080028a1 	.word	0x080028a1
 8002814:	080028a1 	.word	0x080028a1
 8002818:	080028a1 	.word	0x080028a1
 800281c:	08002869 	.word	0x08002869
 8002820:	080028a1 	.word	0x080028a1
 8002824:	080028a1 	.word	0x080028a1
 8002828:	080028a1 	.word	0x080028a1
 800282c:	08002885 	.word	0x08002885
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800283e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fee3 	bl	8001610 <HAL_DMA_Abort_IT>
      break;
 800284a:	e02a      	b.n	80028a2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe fed5 	bl	8001610 <HAL_DMA_Abort_IT>
      break;
 8002866:	e01c      	b.n	80028a2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002876:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fec7 	bl	8001610 <HAL_DMA_Abort_IT>
      break;
 8002882:	e00e      	b.n	80028a2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002892:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe feb9 	bl	8001610 <HAL_DMA_Abort_IT>
      break;
 800289e:	e000      	b.n	80028a2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80028a0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fe06 	bl	80034bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_TIM_PWM_Stop_DMA+0x148>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d117      	bne.n	80028ea <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <HAL_TIM_PWM_Stop_DMA+0x106>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	f240 4344 	movw	r3, #1092	; 0x444
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <HAL_TIM_PWM_Stop_DMA+0x106>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a1a      	ldr	r2, [r3, #32]
 80028f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10f      	bne.n	800291a <HAL_TIM_PWM_Stop_DMA+0x136>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	f240 4344 	movw	r3, #1092	; 0x444
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d107      	bne.n	800291a <HAL_TIM_PWM_Stop_DMA+0x136>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40012c00 	.word	0x40012c00

08002930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d122      	bne.n	800298c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b02      	cmp	r3, #2
 8002952:	d11b      	bne.n	800298c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0202 	mvn.w	r2, #2
 800295c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa73 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa66 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fa75 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b04      	cmp	r3, #4
 8002998:	d122      	bne.n	80029e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d11b      	bne.n	80029e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0204 	mvn.w	r2, #4
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa49 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 80029cc:	e005      	b.n	80029da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa3c 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fa4b 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d122      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d11b      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0208 	mvn.w	r2, #8
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa1f 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa12 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fa21 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d122      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d11b      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0210 	mvn.w	r2, #16
 8002a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9f5 	bl	8002e5e <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9e8 	bl	8002e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f9f7 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0201 	mvn.w	r2, #1
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f9c3 	bl	8002e3a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	2b80      	cmp	r3, #128	; 0x80
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d107      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fd5f 	bl	800359e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d10e      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d107      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f9c4 	bl	8002e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0220 	mvn.w	r2, #32
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fd2a 	bl	800358c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e0b4      	b.n	8002cc4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b0c      	cmp	r3, #12
 8002b6e:	f200 809f 	bhi.w	8002cb0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002bad 	.word	0x08002bad
 8002b7c:	08002cb1 	.word	0x08002cb1
 8002b80:	08002cb1 	.word	0x08002cb1
 8002b84:	08002cb1 	.word	0x08002cb1
 8002b88:	08002bed 	.word	0x08002bed
 8002b8c:	08002cb1 	.word	0x08002cb1
 8002b90:	08002cb1 	.word	0x08002cb1
 8002b94:	08002cb1 	.word	0x08002cb1
 8002b98:	08002c2f 	.word	0x08002c2f
 8002b9c:	08002cb1 	.word	0x08002cb1
 8002ba0:	08002cb1 	.word	0x08002cb1
 8002ba4:	08002cb1 	.word	0x08002cb1
 8002ba8:	08002c6f 	.word	0x08002c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fa64 	bl	8003080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0208 	orr.w	r2, r2, #8
 8002bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0204 	bic.w	r2, r2, #4
 8002bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6999      	ldr	r1, [r3, #24]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	619a      	str	r2, [r3, #24]
      break;
 8002bea:	e062      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 faaa 	bl	800314c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6999      	ldr	r1, [r3, #24]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	021a      	lsls	r2, r3, #8
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	619a      	str	r2, [r3, #24]
      break;
 8002c2c:	e041      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 faf3 	bl	8003220 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0208 	orr.w	r2, r2, #8
 8002c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0204 	bic.w	r2, r2, #4
 8002c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69d9      	ldr	r1, [r3, #28]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	61da      	str	r2, [r3, #28]
      break;
 8002c6c:	e021      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fb3d 	bl	80032f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69d9      	ldr	r1, [r3, #28]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	021a      	lsls	r2, r3, #8
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	61da      	str	r2, [r3, #28]
      break;
 8002cae:	e000      	b.n	8002cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002cb0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIM_ConfigClockSource+0x18>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0a6      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x166>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d067      	beq.n	8002dec <HAL_TIM_ConfigClockSource+0x120>
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d80b      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x6c>
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	d073      	beq.n	8002e0c <HAL_TIM_ConfigClockSource+0x140>
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d802      	bhi.n	8002d2e <HAL_TIM_ConfigClockSource+0x62>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d06f      	beq.n	8002e0c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d2c:	e078      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d06c      	beq.n	8002e0c <HAL_TIM_ConfigClockSource+0x140>
 8002d32:	2b30      	cmp	r3, #48	; 0x30
 8002d34:	d06a      	beq.n	8002e0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d36:	e073      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d38:	2b70      	cmp	r3, #112	; 0x70
 8002d3a:	d00d      	beq.n	8002d58 <HAL_TIM_ConfigClockSource+0x8c>
 8002d3c:	2b70      	cmp	r3, #112	; 0x70
 8002d3e:	d804      	bhi.n	8002d4a <HAL_TIM_ConfigClockSource+0x7e>
 8002d40:	2b50      	cmp	r3, #80	; 0x50
 8002d42:	d033      	beq.n	8002dac <HAL_TIM_ConfigClockSource+0xe0>
 8002d44:	2b60      	cmp	r3, #96	; 0x60
 8002d46:	d041      	beq.n	8002dcc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d48:	e06a      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4e:	d066      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x152>
 8002d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d54:	d017      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d56:	e063      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6899      	ldr	r1, [r3, #8]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f000 fb89 	bl	800347e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	609a      	str	r2, [r3, #8]
      break;
 8002d84:	e04c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f000 fb72 	bl	800347e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002da8:	609a      	str	r2, [r3, #8]
      break;
 8002daa:	e039      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	461a      	mov	r2, r3
 8002dba:	f000 fae9 	bl	8003390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2150      	movs	r1, #80	; 0x50
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fb40 	bl	800344a <TIM_ITRx_SetConfig>
      break;
 8002dca:	e029      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f000 fb07 	bl	80033ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2160      	movs	r1, #96	; 0x60
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fb30 	bl	800344a <TIM_ITRx_SetConfig>
      break;
 8002dea:	e019      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f000 fac9 	bl	8003390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2140      	movs	r1, #64	; 0x40
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fb20 	bl	800344a <TIM_ITRx_SetConfig>
      break;
 8002e0a:	e009      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f000 fb17 	bl	800344a <TIM_ITRx_SetConfig>
      break;
 8002e1c:	e000      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f7ff ffe9 	bl	8002ea6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d103      	bne.n	8002f04 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	771a      	strb	r2, [r3, #28]
 8002f02:	e019      	b.n	8002f38 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d103      	bne.n	8002f16 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2202      	movs	r2, #2
 8002f12:	771a      	strb	r2, [r3, #28]
 8002f14:	e010      	b.n	8002f38 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d103      	bne.n	8002f28 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2204      	movs	r2, #4
 8002f24:	771a      	strb	r2, [r3, #28]
 8002f26:	e007      	b.n	8002f38 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d102      	bne.n	8002f38 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2208      	movs	r2, #8
 8002f36:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff ff99 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d103      	bne.n	8002f74 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	771a      	strb	r2, [r3, #28]
 8002f72:	e019      	b.n	8002fa8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d103      	bne.n	8002f86 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2202      	movs	r2, #2
 8002f82:	771a      	strb	r2, [r3, #28]
 8002f84:	e010      	b.n	8002fa8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d103      	bne.n	8002f98 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2204      	movs	r2, #4
 8002f94:	771a      	strb	r2, [r3, #28]
 8002f96:	e007      	b.n	8002fa8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d102      	bne.n	8002fa8 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7ff ff6a 	bl	8002e82 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a29      	ldr	r2, [pc, #164]	; (8003074 <TIM_Base_SetConfig+0xb8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00b      	beq.n	8002fec <TIM_Base_SetConfig+0x30>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fda:	d007      	beq.n	8002fec <TIM_Base_SetConfig+0x30>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a26      	ldr	r2, [pc, #152]	; (8003078 <TIM_Base_SetConfig+0xbc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_Base_SetConfig+0x30>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a25      	ldr	r2, [pc, #148]	; (800307c <TIM_Base_SetConfig+0xc0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d108      	bne.n	8002ffe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <TIM_Base_SetConfig+0xb8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00b      	beq.n	800301e <TIM_Base_SetConfig+0x62>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d007      	beq.n	800301e <TIM_Base_SetConfig+0x62>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a19      	ldr	r2, [pc, #100]	; (8003078 <TIM_Base_SetConfig+0xbc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <TIM_Base_SetConfig+0x62>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a18      	ldr	r2, [pc, #96]	; (800307c <TIM_Base_SetConfig+0xc0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d108      	bne.n	8003030 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a07      	ldr	r2, [pc, #28]	; (8003074 <TIM_Base_SetConfig+0xb8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d103      	bne.n	8003064 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	615a      	str	r2, [r3, #20]
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40000400 	.word	0x40000400
 800307c:	40000800 	.word	0x40000800

08003080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0201 	bic.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0303 	bic.w	r3, r3, #3
 80030b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f023 0302 	bic.w	r3, r3, #2
 80030c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <TIM_OC1_SetConfig+0xc8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d10c      	bne.n	80030f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0308 	bic.w	r3, r3, #8
 80030e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a13      	ldr	r2, [pc, #76]	; (8003148 <TIM_OC1_SetConfig+0xc8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d111      	bne.n	8003122 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800310c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	621a      	str	r2, [r3, #32]
}
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40012c00 	.word	0x40012c00

0800314c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f023 0210 	bic.w	r2, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800317a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0320 	bic.w	r3, r3, #32
 8003196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a1d      	ldr	r2, [pc, #116]	; (800321c <TIM_OC2_SetConfig+0xd0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d10d      	bne.n	80031c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a14      	ldr	r2, [pc, #80]	; (800321c <TIM_OC2_SetConfig+0xd0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d113      	bne.n	80031f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	40012c00 	.word	0x40012c00

08003220 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0303 	bic.w	r3, r3, #3
 8003256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <TIM_OC3_SetConfig+0xd0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10d      	bne.n	800329a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <TIM_OC3_SetConfig+0xd0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d113      	bne.n	80032ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	621a      	str	r2, [r3, #32]
}
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40012c00 	.word	0x40012c00

080032f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800333e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	031b      	lsls	r3, r3, #12
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a0f      	ldr	r2, [pc, #60]	; (800338c <TIM_OC4_SetConfig+0x98>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d109      	bne.n	8003368 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800335a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	019b      	lsls	r3, r3, #6
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	621a      	str	r2, [r3, #32]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00

08003390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f023 0201 	bic.w	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f023 030a 	bic.w	r3, r3, #10
 80033cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f023 0210 	bic.w	r2, r3, #16
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003416:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	031b      	lsls	r3, r3, #12
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003428:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	621a      	str	r2, [r3, #32]
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800344a:	b480      	push	{r7}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	f043 0307 	orr.w	r3, r3, #7
 800346c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	609a      	str	r2, [r3, #8]
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800347e:	b480      	push	{r7}
 8003480:	b087      	sub	sp, #28
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003498:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	021a      	lsls	r2, r3, #8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	609a      	str	r2, [r3, #8]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2201      	movs	r2, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1a      	ldr	r2, [r3, #32]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	43db      	mvns	r3, r3
 80034de:	401a      	ands	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003518:	2302      	movs	r3, #2
 800351a:	e032      	b.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003554:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	4313      	orrs	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e03f      	b.n	8003642 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd fb26 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2224      	movs	r2, #36	; 0x24
 80035e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f95f 	bl	80038b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b088      	sub	sp, #32
 800364e:	af02      	add	r7, sp, #8
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b20      	cmp	r3, #32
 8003668:	f040 8083 	bne.w	8003772 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_UART_Transmit+0x2e>
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e07b      	b.n	8003774 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_UART_Transmit+0x40>
 8003686:	2302      	movs	r3, #2
 8003688:	e074      	b.n	8003774 <HAL_UART_Transmit+0x12a>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2221      	movs	r2, #33	; 0x21
 800369c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80036a0:	f7fd fdc2 	bl	8001228 <HAL_GetTick>
 80036a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	88fa      	ldrh	r2, [r7, #6]
 80036aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	88fa      	ldrh	r2, [r7, #6]
 80036b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036b2:	e042      	b.n	800373a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ca:	d122      	bne.n	8003712 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f8a4 	bl	8003824 <UART_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e046      	b.n	8003774 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	3302      	adds	r3, #2
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	e017      	b.n	800373a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	3301      	adds	r3, #1
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	e013      	b.n	800373a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2200      	movs	r2, #0
 800371a:	2180      	movs	r1, #128	; 0x80
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f881 	bl	8003824 <UART_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e023      	b.n	8003774 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	60ba      	str	r2, [r7, #8]
 8003732:	781a      	ldrb	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1b7      	bne.n	80036b4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2200      	movs	r2, #0
 800374c:	2140      	movs	r1, #64	; 0x40
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f868 	bl	8003824 <UART_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e00a      	b.n	8003774 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003772:	2302      	movs	r3, #2
  }
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	d140      	bne.n	8003818 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_UART_Receive_IT+0x26>
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e039      	b.n	800381a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_UART_Receive_IT+0x38>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e032      	b.n	800381a <HAL_UART_Receive_IT+0x9e>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2222      	movs	r2, #34	; 0x22
 80037d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003834:	e02c      	b.n	8003890 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d028      	beq.n	8003890 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x30>
 8003844:	f7fd fcf0 	bl	8001228 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	429a      	cmp	r2, r3
 8003852:	d21d      	bcs.n	8003890 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003862:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e00f      	b.n	80038b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4013      	ands	r3, r2
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	429a      	cmp	r2, r3
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d0c3      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038f2:	f023 030c 	bic.w	r3, r3, #12
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	68f9      	ldr	r1, [r7, #12]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a52      	ldr	r2, [pc, #328]	; (8003a64 <UART_SetConfig+0x1ac>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d14e      	bne.n	80039be <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003920:	f7fe fd7c 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 8003924:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009a      	lsls	r2, r3, #2
 8003930:	441a      	add	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	4a4a      	ldr	r2, [pc, #296]	; (8003a68 <UART_SetConfig+0x1b0>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	0119      	lsls	r1, r3, #4
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009a      	lsls	r2, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fbb2 f2f3 	udiv	r2, r2, r3
 800395c:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <UART_SetConfig+0x1b0>)
 800395e:	fba3 0302 	umull	r0, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2064      	movs	r0, #100	; 0x64
 8003966:	fb00 f303 	mul.w	r3, r0, r3
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	3332      	adds	r3, #50	; 0x32
 8003970:	4a3d      	ldr	r2, [pc, #244]	; (8003a68 <UART_SetConfig+0x1b0>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397c:	4419      	add	r1, r3
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	fbb2 f2f3 	udiv	r2, r2, r3
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <UART_SetConfig+0x1b0>)
 8003996:	fba3 0302 	umull	r0, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2064      	movs	r0, #100	; 0x64
 800399e:	fb00 f303 	mul.w	r3, r0, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	3332      	adds	r3, #50	; 0x32
 80039a8:	4a2f      	ldr	r2, [pc, #188]	; (8003a68 <UART_SetConfig+0x1b0>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	440a      	add	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80039bc:	e04d      	b.n	8003a5a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80039be:	f7fe fd19 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 80039c2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	009a      	lsls	r2, r3, #2
 80039ce:	441a      	add	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <UART_SetConfig+0x1b0>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	0119      	lsls	r1, r3, #4
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009a      	lsls	r2, r3, #2
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <UART_SetConfig+0x1b0>)
 80039fc:	fba3 0302 	umull	r0, r3, r3, r2
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	2064      	movs	r0, #100	; 0x64
 8003a04:	fb00 f303 	mul.w	r3, r0, r3
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	3332      	adds	r3, #50	; 0x32
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <UART_SetConfig+0x1b0>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1a:	4419      	add	r1, r3
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	441a      	add	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <UART_SetConfig+0x1b0>)
 8003a34:	fba3 0302 	umull	r0, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2064      	movs	r0, #100	; 0x64
 8003a3c:	fb00 f303 	mul.w	r3, r0, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	3332      	adds	r3, #50	; 0x32
 8003a46:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <UART_SetConfig+0x1b0>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	440a      	add	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40013800 	.word	0x40013800
 8003a68:	51eb851f 	.word	0x51eb851f

08003a6c <__errno>:
 8003a6c:	4b01      	ldr	r3, [pc, #4]	; (8003a74 <__errno+0x8>)
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000554 	.word	0x20000554

08003a78 <__libc_init_array>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	2500      	movs	r5, #0
 8003a7c:	4e0c      	ldr	r6, [pc, #48]	; (8003ab0 <__libc_init_array+0x38>)
 8003a7e:	4c0d      	ldr	r4, [pc, #52]	; (8003ab4 <__libc_init_array+0x3c>)
 8003a80:	1ba4      	subs	r4, r4, r6
 8003a82:	10a4      	asrs	r4, r4, #2
 8003a84:	42a5      	cmp	r5, r4
 8003a86:	d109      	bne.n	8003a9c <__libc_init_array+0x24>
 8003a88:	f001 f852 	bl	8004b30 <_init>
 8003a8c:	2500      	movs	r5, #0
 8003a8e:	4e0a      	ldr	r6, [pc, #40]	; (8003ab8 <__libc_init_array+0x40>)
 8003a90:	4c0a      	ldr	r4, [pc, #40]	; (8003abc <__libc_init_array+0x44>)
 8003a92:	1ba4      	subs	r4, r4, r6
 8003a94:	10a4      	asrs	r4, r4, #2
 8003a96:	42a5      	cmp	r5, r4
 8003a98:	d105      	bne.n	8003aa6 <__libc_init_array+0x2e>
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aa0:	4798      	blx	r3
 8003aa2:	3501      	adds	r5, #1
 8003aa4:	e7ee      	b.n	8003a84 <__libc_init_array+0xc>
 8003aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aaa:	4798      	blx	r3
 8003aac:	3501      	adds	r5, #1
 8003aae:	e7f2      	b.n	8003a96 <__libc_init_array+0x1e>
 8003ab0:	08004cc4 	.word	0x08004cc4
 8003ab4:	08004cc4 	.word	0x08004cc4
 8003ab8:	08004cc4 	.word	0x08004cc4
 8003abc:	08004cc8 	.word	0x08004cc8

08003ac0 <memcmp>:
 8003ac0:	b530      	push	{r4, r5, lr}
 8003ac2:	2400      	movs	r4, #0
 8003ac4:	42a2      	cmp	r2, r4
 8003ac6:	d101      	bne.n	8003acc <memcmp+0xc>
 8003ac8:	2000      	movs	r0, #0
 8003aca:	e007      	b.n	8003adc <memcmp+0x1c>
 8003acc:	5d03      	ldrb	r3, [r0, r4]
 8003ace:	3401      	adds	r4, #1
 8003ad0:	190d      	adds	r5, r1, r4
 8003ad2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003ad6:	42ab      	cmp	r3, r5
 8003ad8:	d0f4      	beq.n	8003ac4 <memcmp+0x4>
 8003ada:	1b58      	subs	r0, r3, r5
 8003adc:	bd30      	pop	{r4, r5, pc}

08003ade <memcpy>:
 8003ade:	b510      	push	{r4, lr}
 8003ae0:	1e43      	subs	r3, r0, #1
 8003ae2:	440a      	add	r2, r1
 8003ae4:	4291      	cmp	r1, r2
 8003ae6:	d100      	bne.n	8003aea <memcpy+0xc>
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003af2:	e7f7      	b.n	8003ae4 <memcpy+0x6>

08003af4 <memset>:
 8003af4:	4603      	mov	r3, r0
 8003af6:	4402      	add	r2, r0
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d100      	bne.n	8003afe <memset+0xa>
 8003afc:	4770      	bx	lr
 8003afe:	f803 1b01 	strb.w	r1, [r3], #1
 8003b02:	e7f9      	b.n	8003af8 <memset+0x4>

08003b04 <iprintf>:
 8003b04:	b40f      	push	{r0, r1, r2, r3}
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <iprintf+0x2c>)
 8003b08:	b513      	push	{r0, r1, r4, lr}
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	b124      	cbz	r4, 8003b18 <iprintf+0x14>
 8003b0e:	69a3      	ldr	r3, [r4, #24]
 8003b10:	b913      	cbnz	r3, 8003b18 <iprintf+0x14>
 8003b12:	4620      	mov	r0, r4
 8003b14:	f000 fade 	bl	80040d4 <__sinit>
 8003b18:	ab05      	add	r3, sp, #20
 8003b1a:	9a04      	ldr	r2, [sp, #16]
 8003b1c:	68a1      	ldr	r1, [r4, #8]
 8003b1e:	4620      	mov	r0, r4
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	f000 fc9b 	bl	800445c <_vfiprintf_r>
 8003b26:	b002      	add	sp, #8
 8003b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b2c:	b004      	add	sp, #16
 8003b2e:	4770      	bx	lr
 8003b30:	20000554 	.word	0x20000554

08003b34 <_puts_r>:
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	460e      	mov	r6, r1
 8003b38:	4605      	mov	r5, r0
 8003b3a:	b118      	cbz	r0, 8003b44 <_puts_r+0x10>
 8003b3c:	6983      	ldr	r3, [r0, #24]
 8003b3e:	b90b      	cbnz	r3, 8003b44 <_puts_r+0x10>
 8003b40:	f000 fac8 	bl	80040d4 <__sinit>
 8003b44:	69ab      	ldr	r3, [r5, #24]
 8003b46:	68ac      	ldr	r4, [r5, #8]
 8003b48:	b913      	cbnz	r3, 8003b50 <_puts_r+0x1c>
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f000 fac2 	bl	80040d4 <__sinit>
 8003b50:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <_puts_r+0xac>)
 8003b52:	429c      	cmp	r4, r3
 8003b54:	d117      	bne.n	8003b86 <_puts_r+0x52>
 8003b56:	686c      	ldr	r4, [r5, #4]
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	071b      	lsls	r3, r3, #28
 8003b5c:	d51d      	bpl.n	8003b9a <_puts_r+0x66>
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	b1db      	cbz	r3, 8003b9a <_puts_r+0x66>
 8003b62:	3e01      	subs	r6, #1
 8003b64:	68a3      	ldr	r3, [r4, #8]
 8003b66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	60a3      	str	r3, [r4, #8]
 8003b6e:	b9e9      	cbnz	r1, 8003bac <_puts_r+0x78>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da2e      	bge.n	8003bd2 <_puts_r+0x9e>
 8003b74:	4622      	mov	r2, r4
 8003b76:	210a      	movs	r1, #10
 8003b78:	4628      	mov	r0, r5
 8003b7a:	f000 f8fb 	bl	8003d74 <__swbuf_r>
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d011      	beq.n	8003ba6 <_puts_r+0x72>
 8003b82:	200a      	movs	r0, #10
 8003b84:	e011      	b.n	8003baa <_puts_r+0x76>
 8003b86:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <_puts_r+0xb0>)
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	d101      	bne.n	8003b90 <_puts_r+0x5c>
 8003b8c:	68ac      	ldr	r4, [r5, #8]
 8003b8e:	e7e3      	b.n	8003b58 <_puts_r+0x24>
 8003b90:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <_puts_r+0xb4>)
 8003b92:	429c      	cmp	r4, r3
 8003b94:	bf08      	it	eq
 8003b96:	68ec      	ldreq	r4, [r5, #12]
 8003b98:	e7de      	b.n	8003b58 <_puts_r+0x24>
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	f000 f93b 	bl	8003e18 <__swsetup_r>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d0dd      	beq.n	8003b62 <_puts_r+0x2e>
 8003ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	da04      	bge.n	8003bba <_puts_r+0x86>
 8003bb0:	69a2      	ldr	r2, [r4, #24]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	dc06      	bgt.n	8003bc4 <_puts_r+0x90>
 8003bb6:	290a      	cmp	r1, #10
 8003bb8:	d004      	beq.n	8003bc4 <_puts_r+0x90>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	6022      	str	r2, [r4, #0]
 8003bc0:	7019      	strb	r1, [r3, #0]
 8003bc2:	e7cf      	b.n	8003b64 <_puts_r+0x30>
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f000 f8d4 	bl	8003d74 <__swbuf_r>
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d1c9      	bne.n	8003b64 <_puts_r+0x30>
 8003bd0:	e7e9      	b.n	8003ba6 <_puts_r+0x72>
 8003bd2:	200a      	movs	r0, #10
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	6022      	str	r2, [r4, #0]
 8003bda:	7018      	strb	r0, [r3, #0]
 8003bdc:	e7e5      	b.n	8003baa <_puts_r+0x76>
 8003bde:	bf00      	nop
 8003be0:	08004c50 	.word	0x08004c50
 8003be4:	08004c70 	.word	0x08004c70
 8003be8:	08004c30 	.word	0x08004c30

08003bec <puts>:
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <puts+0xc>)
 8003bee:	4601      	mov	r1, r0
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	f7ff bf9f 	b.w	8003b34 <_puts_r>
 8003bf6:	bf00      	nop
 8003bf8:	20000554 	.word	0x20000554

08003bfc <setvbuf>:
 8003bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c00:	461d      	mov	r5, r3
 8003c02:	4b51      	ldr	r3, [pc, #324]	; (8003d48 <setvbuf+0x14c>)
 8003c04:	4604      	mov	r4, r0
 8003c06:	681e      	ldr	r6, [r3, #0]
 8003c08:	460f      	mov	r7, r1
 8003c0a:	4690      	mov	r8, r2
 8003c0c:	b126      	cbz	r6, 8003c18 <setvbuf+0x1c>
 8003c0e:	69b3      	ldr	r3, [r6, #24]
 8003c10:	b913      	cbnz	r3, 8003c18 <setvbuf+0x1c>
 8003c12:	4630      	mov	r0, r6
 8003c14:	f000 fa5e 	bl	80040d4 <__sinit>
 8003c18:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <setvbuf+0x150>)
 8003c1a:	429c      	cmp	r4, r3
 8003c1c:	d152      	bne.n	8003cc4 <setvbuf+0xc8>
 8003c1e:	6874      	ldr	r4, [r6, #4]
 8003c20:	f1b8 0f02 	cmp.w	r8, #2
 8003c24:	d006      	beq.n	8003c34 <setvbuf+0x38>
 8003c26:	f1b8 0f01 	cmp.w	r8, #1
 8003c2a:	f200 8089 	bhi.w	8003d40 <setvbuf+0x144>
 8003c2e:	2d00      	cmp	r5, #0
 8003c30:	f2c0 8086 	blt.w	8003d40 <setvbuf+0x144>
 8003c34:	4621      	mov	r1, r4
 8003c36:	4630      	mov	r0, r6
 8003c38:	f000 f9e2 	bl	8004000 <_fflush_r>
 8003c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c3e:	b141      	cbz	r1, 8003c52 <setvbuf+0x56>
 8003c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c44:	4299      	cmp	r1, r3
 8003c46:	d002      	beq.n	8003c4e <setvbuf+0x52>
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f000 fb39 	bl	80042c0 <_free_r>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6363      	str	r3, [r4, #52]	; 0x34
 8003c52:	2300      	movs	r3, #0
 8003c54:	61a3      	str	r3, [r4, #24]
 8003c56:	6063      	str	r3, [r4, #4]
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	061b      	lsls	r3, r3, #24
 8003c5c:	d503      	bpl.n	8003c66 <setvbuf+0x6a>
 8003c5e:	6921      	ldr	r1, [r4, #16]
 8003c60:	4630      	mov	r0, r6
 8003c62:	f000 fb2d 	bl	80042c0 <_free_r>
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	f1b8 0f02 	cmp.w	r8, #2
 8003c6c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003c70:	f023 0303 	bic.w	r3, r3, #3
 8003c74:	81a3      	strh	r3, [r4, #12]
 8003c76:	d05d      	beq.n	8003d34 <setvbuf+0x138>
 8003c78:	ab01      	add	r3, sp, #4
 8003c7a:	466a      	mov	r2, sp
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	4630      	mov	r0, r6
 8003c80:	f000 fab2 	bl	80041e8 <__swhatbuf_r>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	4318      	orrs	r0, r3
 8003c88:	81a0      	strh	r0, [r4, #12]
 8003c8a:	bb2d      	cbnz	r5, 8003cd8 <setvbuf+0xdc>
 8003c8c:	9d00      	ldr	r5, [sp, #0]
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f000 fb0e 	bl	80042b0 <malloc>
 8003c94:	4607      	mov	r7, r0
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d14e      	bne.n	8003d38 <setvbuf+0x13c>
 8003c9a:	f8dd 9000 	ldr.w	r9, [sp]
 8003c9e:	45a9      	cmp	r9, r5
 8003ca0:	d13c      	bne.n	8003d1c <setvbuf+0x120>
 8003ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca6:	89a3      	ldrh	r3, [r4, #12]
 8003ca8:	f043 0302 	orr.w	r3, r3, #2
 8003cac:	81a3      	strh	r3, [r4, #12]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60a3      	str	r3, [r4, #8]
 8003cb2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	6123      	str	r3, [r4, #16]
 8003cba:	2301      	movs	r3, #1
 8003cbc:	6163      	str	r3, [r4, #20]
 8003cbe:	b003      	add	sp, #12
 8003cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cc4:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <setvbuf+0x154>)
 8003cc6:	429c      	cmp	r4, r3
 8003cc8:	d101      	bne.n	8003cce <setvbuf+0xd2>
 8003cca:	68b4      	ldr	r4, [r6, #8]
 8003ccc:	e7a8      	b.n	8003c20 <setvbuf+0x24>
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <setvbuf+0x158>)
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	bf08      	it	eq
 8003cd4:	68f4      	ldreq	r4, [r6, #12]
 8003cd6:	e7a3      	b.n	8003c20 <setvbuf+0x24>
 8003cd8:	2f00      	cmp	r7, #0
 8003cda:	d0d8      	beq.n	8003c8e <setvbuf+0x92>
 8003cdc:	69b3      	ldr	r3, [r6, #24]
 8003cde:	b913      	cbnz	r3, 8003ce6 <setvbuf+0xea>
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f000 f9f7 	bl	80040d4 <__sinit>
 8003ce6:	f1b8 0f01 	cmp.w	r8, #1
 8003cea:	bf08      	it	eq
 8003cec:	89a3      	ldrheq	r3, [r4, #12]
 8003cee:	6027      	str	r7, [r4, #0]
 8003cf0:	bf04      	itt	eq
 8003cf2:	f043 0301 	orreq.w	r3, r3, #1
 8003cf6:	81a3      	strheq	r3, [r4, #12]
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003cfe:	f013 0008 	ands.w	r0, r3, #8
 8003d02:	d01b      	beq.n	8003d3c <setvbuf+0x140>
 8003d04:	f013 0001 	ands.w	r0, r3, #1
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	bf1f      	itttt	ne
 8003d0e:	426d      	negne	r5, r5
 8003d10:	60a3      	strne	r3, [r4, #8]
 8003d12:	61a5      	strne	r5, [r4, #24]
 8003d14:	4618      	movne	r0, r3
 8003d16:	bf08      	it	eq
 8003d18:	60a5      	streq	r5, [r4, #8]
 8003d1a:	e7d0      	b.n	8003cbe <setvbuf+0xc2>
 8003d1c:	4648      	mov	r0, r9
 8003d1e:	f000 fac7 	bl	80042b0 <malloc>
 8003d22:	4607      	mov	r7, r0
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d0bc      	beq.n	8003ca2 <setvbuf+0xa6>
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	464d      	mov	r5, r9
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d30:	81a3      	strh	r3, [r4, #12]
 8003d32:	e7d3      	b.n	8003cdc <setvbuf+0xe0>
 8003d34:	2000      	movs	r0, #0
 8003d36:	e7b6      	b.n	8003ca6 <setvbuf+0xaa>
 8003d38:	46a9      	mov	r9, r5
 8003d3a:	e7f5      	b.n	8003d28 <setvbuf+0x12c>
 8003d3c:	60a0      	str	r0, [r4, #8]
 8003d3e:	e7be      	b.n	8003cbe <setvbuf+0xc2>
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	e7bb      	b.n	8003cbe <setvbuf+0xc2>
 8003d46:	bf00      	nop
 8003d48:	20000554 	.word	0x20000554
 8003d4c:	08004c50 	.word	0x08004c50
 8003d50:	08004c70 	.word	0x08004c70
 8003d54:	08004c30 	.word	0x08004c30

08003d58 <strchr>:
 8003d58:	b2c9      	uxtb	r1, r1
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d60:	b11a      	cbz	r2, 8003d6a <strchr+0x12>
 8003d62:	428a      	cmp	r2, r1
 8003d64:	d1f9      	bne.n	8003d5a <strchr+0x2>
 8003d66:	4618      	mov	r0, r3
 8003d68:	4770      	bx	lr
 8003d6a:	2900      	cmp	r1, #0
 8003d6c:	bf18      	it	ne
 8003d6e:	2300      	movne	r3, #0
 8003d70:	e7f9      	b.n	8003d66 <strchr+0xe>
	...

08003d74 <__swbuf_r>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	460e      	mov	r6, r1
 8003d78:	4614      	mov	r4, r2
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	b118      	cbz	r0, 8003d86 <__swbuf_r+0x12>
 8003d7e:	6983      	ldr	r3, [r0, #24]
 8003d80:	b90b      	cbnz	r3, 8003d86 <__swbuf_r+0x12>
 8003d82:	f000 f9a7 	bl	80040d4 <__sinit>
 8003d86:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <__swbuf_r+0x98>)
 8003d88:	429c      	cmp	r4, r3
 8003d8a:	d12a      	bne.n	8003de2 <__swbuf_r+0x6e>
 8003d8c:	686c      	ldr	r4, [r5, #4]
 8003d8e:	69a3      	ldr	r3, [r4, #24]
 8003d90:	60a3      	str	r3, [r4, #8]
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	071a      	lsls	r2, r3, #28
 8003d96:	d52e      	bpl.n	8003df6 <__swbuf_r+0x82>
 8003d98:	6923      	ldr	r3, [r4, #16]
 8003d9a:	b363      	cbz	r3, 8003df6 <__swbuf_r+0x82>
 8003d9c:	6923      	ldr	r3, [r4, #16]
 8003d9e:	6820      	ldr	r0, [r4, #0]
 8003da0:	b2f6      	uxtb	r6, r6
 8003da2:	1ac0      	subs	r0, r0, r3
 8003da4:	6963      	ldr	r3, [r4, #20]
 8003da6:	4637      	mov	r7, r6
 8003da8:	4283      	cmp	r3, r0
 8003daa:	dc04      	bgt.n	8003db6 <__swbuf_r+0x42>
 8003dac:	4621      	mov	r1, r4
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 f926 	bl	8004000 <_fflush_r>
 8003db4:	bb28      	cbnz	r0, 8003e02 <__swbuf_r+0x8e>
 8003db6:	68a3      	ldr	r3, [r4, #8]
 8003db8:	3001      	adds	r0, #1
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	60a3      	str	r3, [r4, #8]
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	6022      	str	r2, [r4, #0]
 8003dc4:	701e      	strb	r6, [r3, #0]
 8003dc6:	6963      	ldr	r3, [r4, #20]
 8003dc8:	4283      	cmp	r3, r0
 8003dca:	d004      	beq.n	8003dd6 <__swbuf_r+0x62>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	07db      	lsls	r3, r3, #31
 8003dd0:	d519      	bpl.n	8003e06 <__swbuf_r+0x92>
 8003dd2:	2e0a      	cmp	r6, #10
 8003dd4:	d117      	bne.n	8003e06 <__swbuf_r+0x92>
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f000 f911 	bl	8004000 <_fflush_r>
 8003dde:	b190      	cbz	r0, 8003e06 <__swbuf_r+0x92>
 8003de0:	e00f      	b.n	8003e02 <__swbuf_r+0x8e>
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <__swbuf_r+0x9c>)
 8003de4:	429c      	cmp	r4, r3
 8003de6:	d101      	bne.n	8003dec <__swbuf_r+0x78>
 8003de8:	68ac      	ldr	r4, [r5, #8]
 8003dea:	e7d0      	b.n	8003d8e <__swbuf_r+0x1a>
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <__swbuf_r+0xa0>)
 8003dee:	429c      	cmp	r4, r3
 8003df0:	bf08      	it	eq
 8003df2:	68ec      	ldreq	r4, [r5, #12]
 8003df4:	e7cb      	b.n	8003d8e <__swbuf_r+0x1a>
 8003df6:	4621      	mov	r1, r4
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 f80d 	bl	8003e18 <__swsetup_r>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	d0cc      	beq.n	8003d9c <__swbuf_r+0x28>
 8003e02:	f04f 37ff 	mov.w	r7, #4294967295
 8003e06:	4638      	mov	r0, r7
 8003e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	08004c50 	.word	0x08004c50
 8003e10:	08004c70 	.word	0x08004c70
 8003e14:	08004c30 	.word	0x08004c30

08003e18 <__swsetup_r>:
 8003e18:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <__swsetup_r+0xcc>)
 8003e1a:	b570      	push	{r4, r5, r6, lr}
 8003e1c:	681d      	ldr	r5, [r3, #0]
 8003e1e:	4606      	mov	r6, r0
 8003e20:	460c      	mov	r4, r1
 8003e22:	b125      	cbz	r5, 8003e2e <__swsetup_r+0x16>
 8003e24:	69ab      	ldr	r3, [r5, #24]
 8003e26:	b913      	cbnz	r3, 8003e2e <__swsetup_r+0x16>
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f000 f953 	bl	80040d4 <__sinit>
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <__swsetup_r+0xd0>)
 8003e30:	429c      	cmp	r4, r3
 8003e32:	d10f      	bne.n	8003e54 <__swsetup_r+0x3c>
 8003e34:	686c      	ldr	r4, [r5, #4]
 8003e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	0715      	lsls	r5, r2, #28
 8003e3e:	d42c      	bmi.n	8003e9a <__swsetup_r+0x82>
 8003e40:	06d0      	lsls	r0, r2, #27
 8003e42:	d411      	bmi.n	8003e68 <__swsetup_r+0x50>
 8003e44:	2209      	movs	r2, #9
 8003e46:	6032      	str	r2, [r6, #0]
 8003e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e4c:	81a3      	strh	r3, [r4, #12]
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e52:	e03e      	b.n	8003ed2 <__swsetup_r+0xba>
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <__swsetup_r+0xd4>)
 8003e56:	429c      	cmp	r4, r3
 8003e58:	d101      	bne.n	8003e5e <__swsetup_r+0x46>
 8003e5a:	68ac      	ldr	r4, [r5, #8]
 8003e5c:	e7eb      	b.n	8003e36 <__swsetup_r+0x1e>
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <__swsetup_r+0xd8>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	bf08      	it	eq
 8003e64:	68ec      	ldreq	r4, [r5, #12]
 8003e66:	e7e6      	b.n	8003e36 <__swsetup_r+0x1e>
 8003e68:	0751      	lsls	r1, r2, #29
 8003e6a:	d512      	bpl.n	8003e92 <__swsetup_r+0x7a>
 8003e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e6e:	b141      	cbz	r1, 8003e82 <__swsetup_r+0x6a>
 8003e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e74:	4299      	cmp	r1, r3
 8003e76:	d002      	beq.n	8003e7e <__swsetup_r+0x66>
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f000 fa21 	bl	80042c0 <_free_r>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6363      	str	r3, [r4, #52]	; 0x34
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	6063      	str	r3, [r4, #4]
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	f043 0308 	orr.w	r3, r3, #8
 8003e98:	81a3      	strh	r3, [r4, #12]
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	b94b      	cbnz	r3, 8003eb2 <__swsetup_r+0x9a>
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea8:	d003      	beq.n	8003eb2 <__swsetup_r+0x9a>
 8003eaa:	4621      	mov	r1, r4
 8003eac:	4630      	mov	r0, r6
 8003eae:	f000 f9bf 	bl	8004230 <__smakebuf_r>
 8003eb2:	89a2      	ldrh	r2, [r4, #12]
 8003eb4:	f012 0301 	ands.w	r3, r2, #1
 8003eb8:	d00c      	beq.n	8003ed4 <__swsetup_r+0xbc>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60a3      	str	r3, [r4, #8]
 8003ebe:	6963      	ldr	r3, [r4, #20]
 8003ec0:	425b      	negs	r3, r3
 8003ec2:	61a3      	str	r3, [r4, #24]
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	b953      	cbnz	r3, 8003ede <__swsetup_r+0xc6>
 8003ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ecc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003ed0:	d1ba      	bne.n	8003e48 <__swsetup_r+0x30>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	0792      	lsls	r2, r2, #30
 8003ed6:	bf58      	it	pl
 8003ed8:	6963      	ldrpl	r3, [r4, #20]
 8003eda:	60a3      	str	r3, [r4, #8]
 8003edc:	e7f2      	b.n	8003ec4 <__swsetup_r+0xac>
 8003ede:	2000      	movs	r0, #0
 8003ee0:	e7f7      	b.n	8003ed2 <__swsetup_r+0xba>
 8003ee2:	bf00      	nop
 8003ee4:	20000554 	.word	0x20000554
 8003ee8:	08004c50 	.word	0x08004c50
 8003eec:	08004c70 	.word	0x08004c70
 8003ef0:	08004c30 	.word	0x08004c30

08003ef4 <__sflush_r>:
 8003ef4:	898a      	ldrh	r2, [r1, #12]
 8003ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	4605      	mov	r5, r0
 8003efc:	0710      	lsls	r0, r2, #28
 8003efe:	460c      	mov	r4, r1
 8003f00:	d458      	bmi.n	8003fb4 <__sflush_r+0xc0>
 8003f02:	684b      	ldr	r3, [r1, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	dc05      	bgt.n	8003f14 <__sflush_r+0x20>
 8003f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	dc02      	bgt.n	8003f14 <__sflush_r+0x20>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f16:	2e00      	cmp	r6, #0
 8003f18:	d0f9      	beq.n	8003f0e <__sflush_r+0x1a>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f20:	682f      	ldr	r7, [r5, #0]
 8003f22:	6a21      	ldr	r1, [r4, #32]
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	d032      	beq.n	8003f8e <__sflush_r+0x9a>
 8003f28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	075a      	lsls	r2, r3, #29
 8003f2e:	d505      	bpl.n	8003f3c <__sflush_r+0x48>
 8003f30:	6863      	ldr	r3, [r4, #4]
 8003f32:	1ac0      	subs	r0, r0, r3
 8003f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f36:	b10b      	cbz	r3, 8003f3c <__sflush_r+0x48>
 8003f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f3a:	1ac0      	subs	r0, r0, r3
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f42:	6a21      	ldr	r1, [r4, #32]
 8003f44:	4628      	mov	r0, r5
 8003f46:	47b0      	blx	r6
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	d106      	bne.n	8003f5c <__sflush_r+0x68>
 8003f4e:	6829      	ldr	r1, [r5, #0]
 8003f50:	291d      	cmp	r1, #29
 8003f52:	d848      	bhi.n	8003fe6 <__sflush_r+0xf2>
 8003f54:	4a29      	ldr	r2, [pc, #164]	; (8003ffc <__sflush_r+0x108>)
 8003f56:	40ca      	lsrs	r2, r1
 8003f58:	07d6      	lsls	r6, r2, #31
 8003f5a:	d544      	bpl.n	8003fe6 <__sflush_r+0xf2>
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	6062      	str	r2, [r4, #4]
 8003f60:	6922      	ldr	r2, [r4, #16]
 8003f62:	04d9      	lsls	r1, r3, #19
 8003f64:	6022      	str	r2, [r4, #0]
 8003f66:	d504      	bpl.n	8003f72 <__sflush_r+0x7e>
 8003f68:	1c42      	adds	r2, r0, #1
 8003f6a:	d101      	bne.n	8003f70 <__sflush_r+0x7c>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b903      	cbnz	r3, 8003f72 <__sflush_r+0x7e>
 8003f70:	6560      	str	r0, [r4, #84]	; 0x54
 8003f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f74:	602f      	str	r7, [r5, #0]
 8003f76:	2900      	cmp	r1, #0
 8003f78:	d0c9      	beq.n	8003f0e <__sflush_r+0x1a>
 8003f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f7e:	4299      	cmp	r1, r3
 8003f80:	d002      	beq.n	8003f88 <__sflush_r+0x94>
 8003f82:	4628      	mov	r0, r5
 8003f84:	f000 f99c 	bl	80042c0 <_free_r>
 8003f88:	2000      	movs	r0, #0
 8003f8a:	6360      	str	r0, [r4, #52]	; 0x34
 8003f8c:	e7c0      	b.n	8003f10 <__sflush_r+0x1c>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4628      	mov	r0, r5
 8003f92:	47b0      	blx	r6
 8003f94:	1c41      	adds	r1, r0, #1
 8003f96:	d1c8      	bne.n	8003f2a <__sflush_r+0x36>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0c5      	beq.n	8003f2a <__sflush_r+0x36>
 8003f9e:	2b1d      	cmp	r3, #29
 8003fa0:	d001      	beq.n	8003fa6 <__sflush_r+0xb2>
 8003fa2:	2b16      	cmp	r3, #22
 8003fa4:	d101      	bne.n	8003faa <__sflush_r+0xb6>
 8003fa6:	602f      	str	r7, [r5, #0]
 8003fa8:	e7b1      	b.n	8003f0e <__sflush_r+0x1a>
 8003faa:	89a3      	ldrh	r3, [r4, #12]
 8003fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	e7ad      	b.n	8003f10 <__sflush_r+0x1c>
 8003fb4:	690f      	ldr	r7, [r1, #16]
 8003fb6:	2f00      	cmp	r7, #0
 8003fb8:	d0a9      	beq.n	8003f0e <__sflush_r+0x1a>
 8003fba:	0793      	lsls	r3, r2, #30
 8003fbc:	bf18      	it	ne
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	680e      	ldr	r6, [r1, #0]
 8003fc2:	bf08      	it	eq
 8003fc4:	694b      	ldreq	r3, [r1, #20]
 8003fc6:	eba6 0807 	sub.w	r8, r6, r7
 8003fca:	600f      	str	r7, [r1, #0]
 8003fcc:	608b      	str	r3, [r1, #8]
 8003fce:	f1b8 0f00 	cmp.w	r8, #0
 8003fd2:	dd9c      	ble.n	8003f0e <__sflush_r+0x1a>
 8003fd4:	4643      	mov	r3, r8
 8003fd6:	463a      	mov	r2, r7
 8003fd8:	6a21      	ldr	r1, [r4, #32]
 8003fda:	4628      	mov	r0, r5
 8003fdc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fde:	47b0      	blx	r6
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	dc06      	bgt.n	8003ff2 <__sflush_r+0xfe>
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	e78e      	b.n	8003f10 <__sflush_r+0x1c>
 8003ff2:	4407      	add	r7, r0
 8003ff4:	eba8 0800 	sub.w	r8, r8, r0
 8003ff8:	e7e9      	b.n	8003fce <__sflush_r+0xda>
 8003ffa:	bf00      	nop
 8003ffc:	20400001 	.word	0x20400001

08004000 <_fflush_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	690b      	ldr	r3, [r1, #16]
 8004004:	4605      	mov	r5, r0
 8004006:	460c      	mov	r4, r1
 8004008:	b1db      	cbz	r3, 8004042 <_fflush_r+0x42>
 800400a:	b118      	cbz	r0, 8004014 <_fflush_r+0x14>
 800400c:	6983      	ldr	r3, [r0, #24]
 800400e:	b90b      	cbnz	r3, 8004014 <_fflush_r+0x14>
 8004010:	f000 f860 	bl	80040d4 <__sinit>
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <_fflush_r+0x48>)
 8004016:	429c      	cmp	r4, r3
 8004018:	d109      	bne.n	800402e <_fflush_r+0x2e>
 800401a:	686c      	ldr	r4, [r5, #4]
 800401c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004020:	b17b      	cbz	r3, 8004042 <_fflush_r+0x42>
 8004022:	4621      	mov	r1, r4
 8004024:	4628      	mov	r0, r5
 8004026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800402a:	f7ff bf63 	b.w	8003ef4 <__sflush_r>
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <_fflush_r+0x4c>)
 8004030:	429c      	cmp	r4, r3
 8004032:	d101      	bne.n	8004038 <_fflush_r+0x38>
 8004034:	68ac      	ldr	r4, [r5, #8]
 8004036:	e7f1      	b.n	800401c <_fflush_r+0x1c>
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <_fflush_r+0x50>)
 800403a:	429c      	cmp	r4, r3
 800403c:	bf08      	it	eq
 800403e:	68ec      	ldreq	r4, [r5, #12]
 8004040:	e7ec      	b.n	800401c <_fflush_r+0x1c>
 8004042:	2000      	movs	r0, #0
 8004044:	bd38      	pop	{r3, r4, r5, pc}
 8004046:	bf00      	nop
 8004048:	08004c50 	.word	0x08004c50
 800404c:	08004c70 	.word	0x08004c70
 8004050:	08004c30 	.word	0x08004c30

08004054 <std>:
 8004054:	2300      	movs	r3, #0
 8004056:	b510      	push	{r4, lr}
 8004058:	4604      	mov	r4, r0
 800405a:	e9c0 3300 	strd	r3, r3, [r0]
 800405e:	6083      	str	r3, [r0, #8]
 8004060:	8181      	strh	r1, [r0, #12]
 8004062:	6643      	str	r3, [r0, #100]	; 0x64
 8004064:	81c2      	strh	r2, [r0, #14]
 8004066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800406a:	6183      	str	r3, [r0, #24]
 800406c:	4619      	mov	r1, r3
 800406e:	2208      	movs	r2, #8
 8004070:	305c      	adds	r0, #92	; 0x5c
 8004072:	f7ff fd3f 	bl	8003af4 <memset>
 8004076:	4b05      	ldr	r3, [pc, #20]	; (800408c <std+0x38>)
 8004078:	6224      	str	r4, [r4, #32]
 800407a:	6263      	str	r3, [r4, #36]	; 0x24
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <std+0x3c>)
 800407e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <std+0x40>)
 8004082:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <std+0x44>)
 8004086:	6323      	str	r3, [r4, #48]	; 0x30
 8004088:	bd10      	pop	{r4, pc}
 800408a:	bf00      	nop
 800408c:	080049b9 	.word	0x080049b9
 8004090:	080049db 	.word	0x080049db
 8004094:	08004a13 	.word	0x08004a13
 8004098:	08004a37 	.word	0x08004a37

0800409c <_cleanup_r>:
 800409c:	4901      	ldr	r1, [pc, #4]	; (80040a4 <_cleanup_r+0x8>)
 800409e:	f000 b885 	b.w	80041ac <_fwalk_reent>
 80040a2:	bf00      	nop
 80040a4:	08004001 	.word	0x08004001

080040a8 <__sfmoreglue>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	2568      	movs	r5, #104	; 0x68
 80040ac:	1e4a      	subs	r2, r1, #1
 80040ae:	4355      	muls	r5, r2
 80040b0:	460e      	mov	r6, r1
 80040b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040b6:	f000 f94f 	bl	8004358 <_malloc_r>
 80040ba:	4604      	mov	r4, r0
 80040bc:	b140      	cbz	r0, 80040d0 <__sfmoreglue+0x28>
 80040be:	2100      	movs	r1, #0
 80040c0:	e9c0 1600 	strd	r1, r6, [r0]
 80040c4:	300c      	adds	r0, #12
 80040c6:	60a0      	str	r0, [r4, #8]
 80040c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040cc:	f7ff fd12 	bl	8003af4 <memset>
 80040d0:	4620      	mov	r0, r4
 80040d2:	bd70      	pop	{r4, r5, r6, pc}

080040d4 <__sinit>:
 80040d4:	6983      	ldr	r3, [r0, #24]
 80040d6:	b510      	push	{r4, lr}
 80040d8:	4604      	mov	r4, r0
 80040da:	bb33      	cbnz	r3, 800412a <__sinit+0x56>
 80040dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80040e0:	6503      	str	r3, [r0, #80]	; 0x50
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <__sinit+0x58>)
 80040e4:	4a12      	ldr	r2, [pc, #72]	; (8004130 <__sinit+0x5c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6282      	str	r2, [r0, #40]	; 0x28
 80040ea:	4298      	cmp	r0, r3
 80040ec:	bf04      	itt	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	6183      	streq	r3, [r0, #24]
 80040f2:	f000 f81f 	bl	8004134 <__sfp>
 80040f6:	6060      	str	r0, [r4, #4]
 80040f8:	4620      	mov	r0, r4
 80040fa:	f000 f81b 	bl	8004134 <__sfp>
 80040fe:	60a0      	str	r0, [r4, #8]
 8004100:	4620      	mov	r0, r4
 8004102:	f000 f817 	bl	8004134 <__sfp>
 8004106:	2200      	movs	r2, #0
 8004108:	60e0      	str	r0, [r4, #12]
 800410a:	2104      	movs	r1, #4
 800410c:	6860      	ldr	r0, [r4, #4]
 800410e:	f7ff ffa1 	bl	8004054 <std>
 8004112:	2201      	movs	r2, #1
 8004114:	2109      	movs	r1, #9
 8004116:	68a0      	ldr	r0, [r4, #8]
 8004118:	f7ff ff9c 	bl	8004054 <std>
 800411c:	2202      	movs	r2, #2
 800411e:	2112      	movs	r1, #18
 8004120:	68e0      	ldr	r0, [r4, #12]
 8004122:	f7ff ff97 	bl	8004054 <std>
 8004126:	2301      	movs	r3, #1
 8004128:	61a3      	str	r3, [r4, #24]
 800412a:	bd10      	pop	{r4, pc}
 800412c:	08004c2c 	.word	0x08004c2c
 8004130:	0800409d 	.word	0x0800409d

08004134 <__sfp>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <__sfp+0x70>)
 8004138:	4607      	mov	r7, r0
 800413a:	681e      	ldr	r6, [r3, #0]
 800413c:	69b3      	ldr	r3, [r6, #24]
 800413e:	b913      	cbnz	r3, 8004146 <__sfp+0x12>
 8004140:	4630      	mov	r0, r6
 8004142:	f7ff ffc7 	bl	80040d4 <__sinit>
 8004146:	3648      	adds	r6, #72	; 0x48
 8004148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800414c:	3b01      	subs	r3, #1
 800414e:	d503      	bpl.n	8004158 <__sfp+0x24>
 8004150:	6833      	ldr	r3, [r6, #0]
 8004152:	b133      	cbz	r3, 8004162 <__sfp+0x2e>
 8004154:	6836      	ldr	r6, [r6, #0]
 8004156:	e7f7      	b.n	8004148 <__sfp+0x14>
 8004158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800415c:	b16d      	cbz	r5, 800417a <__sfp+0x46>
 800415e:	3468      	adds	r4, #104	; 0x68
 8004160:	e7f4      	b.n	800414c <__sfp+0x18>
 8004162:	2104      	movs	r1, #4
 8004164:	4638      	mov	r0, r7
 8004166:	f7ff ff9f 	bl	80040a8 <__sfmoreglue>
 800416a:	6030      	str	r0, [r6, #0]
 800416c:	2800      	cmp	r0, #0
 800416e:	d1f1      	bne.n	8004154 <__sfp+0x20>
 8004170:	230c      	movs	r3, #12
 8004172:	4604      	mov	r4, r0
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	4620      	mov	r0, r4
 8004178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <__sfp+0x74>)
 800417c:	6665      	str	r5, [r4, #100]	; 0x64
 800417e:	e9c4 5500 	strd	r5, r5, [r4]
 8004182:	60a5      	str	r5, [r4, #8]
 8004184:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004188:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800418c:	2208      	movs	r2, #8
 800418e:	4629      	mov	r1, r5
 8004190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004194:	f7ff fcae 	bl	8003af4 <memset>
 8004198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800419c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041a0:	e7e9      	b.n	8004176 <__sfp+0x42>
 80041a2:	bf00      	nop
 80041a4:	08004c2c 	.word	0x08004c2c
 80041a8:	ffff0001 	.word	0xffff0001

080041ac <_fwalk_reent>:
 80041ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b0:	4680      	mov	r8, r0
 80041b2:	4689      	mov	r9, r1
 80041b4:	2600      	movs	r6, #0
 80041b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041ba:	b914      	cbnz	r4, 80041c2 <_fwalk_reent+0x16>
 80041bc:	4630      	mov	r0, r6
 80041be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80041c6:	3f01      	subs	r7, #1
 80041c8:	d501      	bpl.n	80041ce <_fwalk_reent+0x22>
 80041ca:	6824      	ldr	r4, [r4, #0]
 80041cc:	e7f5      	b.n	80041ba <_fwalk_reent+0xe>
 80041ce:	89ab      	ldrh	r3, [r5, #12]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d907      	bls.n	80041e4 <_fwalk_reent+0x38>
 80041d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041d8:	3301      	adds	r3, #1
 80041da:	d003      	beq.n	80041e4 <_fwalk_reent+0x38>
 80041dc:	4629      	mov	r1, r5
 80041de:	4640      	mov	r0, r8
 80041e0:	47c8      	blx	r9
 80041e2:	4306      	orrs	r6, r0
 80041e4:	3568      	adds	r5, #104	; 0x68
 80041e6:	e7ee      	b.n	80041c6 <_fwalk_reent+0x1a>

080041e8 <__swhatbuf_r>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	460e      	mov	r6, r1
 80041ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f0:	b096      	sub	sp, #88	; 0x58
 80041f2:	2900      	cmp	r1, #0
 80041f4:	4614      	mov	r4, r2
 80041f6:	461d      	mov	r5, r3
 80041f8:	da07      	bge.n	800420a <__swhatbuf_r+0x22>
 80041fa:	2300      	movs	r3, #0
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	89b3      	ldrh	r3, [r6, #12]
 8004200:	061a      	lsls	r2, r3, #24
 8004202:	d410      	bmi.n	8004226 <__swhatbuf_r+0x3e>
 8004204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004208:	e00e      	b.n	8004228 <__swhatbuf_r+0x40>
 800420a:	466a      	mov	r2, sp
 800420c:	f000 fc3a 	bl	8004a84 <_fstat_r>
 8004210:	2800      	cmp	r0, #0
 8004212:	dbf2      	blt.n	80041fa <__swhatbuf_r+0x12>
 8004214:	9a01      	ldr	r2, [sp, #4]
 8004216:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800421a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800421e:	425a      	negs	r2, r3
 8004220:	415a      	adcs	r2, r3
 8004222:	602a      	str	r2, [r5, #0]
 8004224:	e7ee      	b.n	8004204 <__swhatbuf_r+0x1c>
 8004226:	2340      	movs	r3, #64	; 0x40
 8004228:	2000      	movs	r0, #0
 800422a:	6023      	str	r3, [r4, #0]
 800422c:	b016      	add	sp, #88	; 0x58
 800422e:	bd70      	pop	{r4, r5, r6, pc}

08004230 <__smakebuf_r>:
 8004230:	898b      	ldrh	r3, [r1, #12]
 8004232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004234:	079d      	lsls	r5, r3, #30
 8004236:	4606      	mov	r6, r0
 8004238:	460c      	mov	r4, r1
 800423a:	d507      	bpl.n	800424c <__smakebuf_r+0x1c>
 800423c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	6123      	str	r3, [r4, #16]
 8004244:	2301      	movs	r3, #1
 8004246:	6163      	str	r3, [r4, #20]
 8004248:	b002      	add	sp, #8
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	ab01      	add	r3, sp, #4
 800424e:	466a      	mov	r2, sp
 8004250:	f7ff ffca 	bl	80041e8 <__swhatbuf_r>
 8004254:	9900      	ldr	r1, [sp, #0]
 8004256:	4605      	mov	r5, r0
 8004258:	4630      	mov	r0, r6
 800425a:	f000 f87d 	bl	8004358 <_malloc_r>
 800425e:	b948      	cbnz	r0, 8004274 <__smakebuf_r+0x44>
 8004260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004264:	059a      	lsls	r2, r3, #22
 8004266:	d4ef      	bmi.n	8004248 <__smakebuf_r+0x18>
 8004268:	f023 0303 	bic.w	r3, r3, #3
 800426c:	f043 0302 	orr.w	r3, r3, #2
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	e7e3      	b.n	800423c <__smakebuf_r+0xc>
 8004274:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <__smakebuf_r+0x7c>)
 8004276:	62b3      	str	r3, [r6, #40]	; 0x28
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	6020      	str	r0, [r4, #0]
 800427c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004280:	81a3      	strh	r3, [r4, #12]
 8004282:	9b00      	ldr	r3, [sp, #0]
 8004284:	6120      	str	r0, [r4, #16]
 8004286:	6163      	str	r3, [r4, #20]
 8004288:	9b01      	ldr	r3, [sp, #4]
 800428a:	b15b      	cbz	r3, 80042a4 <__smakebuf_r+0x74>
 800428c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004290:	4630      	mov	r0, r6
 8004292:	f000 fc09 	bl	8004aa8 <_isatty_r>
 8004296:	b128      	cbz	r0, 80042a4 <__smakebuf_r+0x74>
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	81a3      	strh	r3, [r4, #12]
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	431d      	orrs	r5, r3
 80042a8:	81a5      	strh	r5, [r4, #12]
 80042aa:	e7cd      	b.n	8004248 <__smakebuf_r+0x18>
 80042ac:	0800409d 	.word	0x0800409d

080042b0 <malloc>:
 80042b0:	4b02      	ldr	r3, [pc, #8]	; (80042bc <malloc+0xc>)
 80042b2:	4601      	mov	r1, r0
 80042b4:	6818      	ldr	r0, [r3, #0]
 80042b6:	f000 b84f 	b.w	8004358 <_malloc_r>
 80042ba:	bf00      	nop
 80042bc:	20000554 	.word	0x20000554

080042c0 <_free_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4605      	mov	r5, r0
 80042c4:	2900      	cmp	r1, #0
 80042c6:	d043      	beq.n	8004350 <_free_r+0x90>
 80042c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042cc:	1f0c      	subs	r4, r1, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bfb8      	it	lt
 80042d2:	18e4      	addlt	r4, r4, r3
 80042d4:	f000 fc18 	bl	8004b08 <__malloc_lock>
 80042d8:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <_free_r+0x94>)
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	4610      	mov	r0, r2
 80042de:	b933      	cbnz	r3, 80042ee <_free_r+0x2e>
 80042e0:	6063      	str	r3, [r4, #4]
 80042e2:	6014      	str	r4, [r2, #0]
 80042e4:	4628      	mov	r0, r5
 80042e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042ea:	f000 bc0e 	b.w	8004b0a <__malloc_unlock>
 80042ee:	42a3      	cmp	r3, r4
 80042f0:	d90b      	bls.n	800430a <_free_r+0x4a>
 80042f2:	6821      	ldr	r1, [r4, #0]
 80042f4:	1862      	adds	r2, r4, r1
 80042f6:	4293      	cmp	r3, r2
 80042f8:	bf01      	itttt	eq
 80042fa:	681a      	ldreq	r2, [r3, #0]
 80042fc:	685b      	ldreq	r3, [r3, #4]
 80042fe:	1852      	addeq	r2, r2, r1
 8004300:	6022      	streq	r2, [r4, #0]
 8004302:	6063      	str	r3, [r4, #4]
 8004304:	6004      	str	r4, [r0, #0]
 8004306:	e7ed      	b.n	80042e4 <_free_r+0x24>
 8004308:	4613      	mov	r3, r2
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	b10a      	cbz	r2, 8004312 <_free_r+0x52>
 800430e:	42a2      	cmp	r2, r4
 8004310:	d9fa      	bls.n	8004308 <_free_r+0x48>
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	1858      	adds	r0, r3, r1
 8004316:	42a0      	cmp	r0, r4
 8004318:	d10b      	bne.n	8004332 <_free_r+0x72>
 800431a:	6820      	ldr	r0, [r4, #0]
 800431c:	4401      	add	r1, r0
 800431e:	1858      	adds	r0, r3, r1
 8004320:	4282      	cmp	r2, r0
 8004322:	6019      	str	r1, [r3, #0]
 8004324:	d1de      	bne.n	80042e4 <_free_r+0x24>
 8004326:	6810      	ldr	r0, [r2, #0]
 8004328:	6852      	ldr	r2, [r2, #4]
 800432a:	4401      	add	r1, r0
 800432c:	6019      	str	r1, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	e7d8      	b.n	80042e4 <_free_r+0x24>
 8004332:	d902      	bls.n	800433a <_free_r+0x7a>
 8004334:	230c      	movs	r3, #12
 8004336:	602b      	str	r3, [r5, #0]
 8004338:	e7d4      	b.n	80042e4 <_free_r+0x24>
 800433a:	6820      	ldr	r0, [r4, #0]
 800433c:	1821      	adds	r1, r4, r0
 800433e:	428a      	cmp	r2, r1
 8004340:	bf01      	itttt	eq
 8004342:	6811      	ldreq	r1, [r2, #0]
 8004344:	6852      	ldreq	r2, [r2, #4]
 8004346:	1809      	addeq	r1, r1, r0
 8004348:	6021      	streq	r1, [r4, #0]
 800434a:	6062      	str	r2, [r4, #4]
 800434c:	605c      	str	r4, [r3, #4]
 800434e:	e7c9      	b.n	80042e4 <_free_r+0x24>
 8004350:	bd38      	pop	{r3, r4, r5, pc}
 8004352:	bf00      	nop
 8004354:	200005d8 	.word	0x200005d8

08004358 <_malloc_r>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	1ccd      	adds	r5, r1, #3
 800435c:	f025 0503 	bic.w	r5, r5, #3
 8004360:	3508      	adds	r5, #8
 8004362:	2d0c      	cmp	r5, #12
 8004364:	bf38      	it	cc
 8004366:	250c      	movcc	r5, #12
 8004368:	2d00      	cmp	r5, #0
 800436a:	4606      	mov	r6, r0
 800436c:	db01      	blt.n	8004372 <_malloc_r+0x1a>
 800436e:	42a9      	cmp	r1, r5
 8004370:	d903      	bls.n	800437a <_malloc_r+0x22>
 8004372:	230c      	movs	r3, #12
 8004374:	6033      	str	r3, [r6, #0]
 8004376:	2000      	movs	r0, #0
 8004378:	bd70      	pop	{r4, r5, r6, pc}
 800437a:	f000 fbc5 	bl	8004b08 <__malloc_lock>
 800437e:	4a21      	ldr	r2, [pc, #132]	; (8004404 <_malloc_r+0xac>)
 8004380:	6814      	ldr	r4, [r2, #0]
 8004382:	4621      	mov	r1, r4
 8004384:	b991      	cbnz	r1, 80043ac <_malloc_r+0x54>
 8004386:	4c20      	ldr	r4, [pc, #128]	; (8004408 <_malloc_r+0xb0>)
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	b91b      	cbnz	r3, 8004394 <_malloc_r+0x3c>
 800438c:	4630      	mov	r0, r6
 800438e:	f000 fb03 	bl	8004998 <_sbrk_r>
 8004392:	6020      	str	r0, [r4, #0]
 8004394:	4629      	mov	r1, r5
 8004396:	4630      	mov	r0, r6
 8004398:	f000 fafe 	bl	8004998 <_sbrk_r>
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d124      	bne.n	80043ea <_malloc_r+0x92>
 80043a0:	230c      	movs	r3, #12
 80043a2:	4630      	mov	r0, r6
 80043a4:	6033      	str	r3, [r6, #0]
 80043a6:	f000 fbb0 	bl	8004b0a <__malloc_unlock>
 80043aa:	e7e4      	b.n	8004376 <_malloc_r+0x1e>
 80043ac:	680b      	ldr	r3, [r1, #0]
 80043ae:	1b5b      	subs	r3, r3, r5
 80043b0:	d418      	bmi.n	80043e4 <_malloc_r+0x8c>
 80043b2:	2b0b      	cmp	r3, #11
 80043b4:	d90f      	bls.n	80043d6 <_malloc_r+0x7e>
 80043b6:	600b      	str	r3, [r1, #0]
 80043b8:	18cc      	adds	r4, r1, r3
 80043ba:	50cd      	str	r5, [r1, r3]
 80043bc:	4630      	mov	r0, r6
 80043be:	f000 fba4 	bl	8004b0a <__malloc_unlock>
 80043c2:	f104 000b 	add.w	r0, r4, #11
 80043c6:	1d23      	adds	r3, r4, #4
 80043c8:	f020 0007 	bic.w	r0, r0, #7
 80043cc:	1ac3      	subs	r3, r0, r3
 80043ce:	d0d3      	beq.n	8004378 <_malloc_r+0x20>
 80043d0:	425a      	negs	r2, r3
 80043d2:	50e2      	str	r2, [r4, r3]
 80043d4:	e7d0      	b.n	8004378 <_malloc_r+0x20>
 80043d6:	684b      	ldr	r3, [r1, #4]
 80043d8:	428c      	cmp	r4, r1
 80043da:	bf16      	itet	ne
 80043dc:	6063      	strne	r3, [r4, #4]
 80043de:	6013      	streq	r3, [r2, #0]
 80043e0:	460c      	movne	r4, r1
 80043e2:	e7eb      	b.n	80043bc <_malloc_r+0x64>
 80043e4:	460c      	mov	r4, r1
 80043e6:	6849      	ldr	r1, [r1, #4]
 80043e8:	e7cc      	b.n	8004384 <_malloc_r+0x2c>
 80043ea:	1cc4      	adds	r4, r0, #3
 80043ec:	f024 0403 	bic.w	r4, r4, #3
 80043f0:	42a0      	cmp	r0, r4
 80043f2:	d005      	beq.n	8004400 <_malloc_r+0xa8>
 80043f4:	1a21      	subs	r1, r4, r0
 80043f6:	4630      	mov	r0, r6
 80043f8:	f000 face 	bl	8004998 <_sbrk_r>
 80043fc:	3001      	adds	r0, #1
 80043fe:	d0cf      	beq.n	80043a0 <_malloc_r+0x48>
 8004400:	6025      	str	r5, [r4, #0]
 8004402:	e7db      	b.n	80043bc <_malloc_r+0x64>
 8004404:	200005d8 	.word	0x200005d8
 8004408:	200005dc 	.word	0x200005dc

0800440c <__sfputc_r>:
 800440c:	6893      	ldr	r3, [r2, #8]
 800440e:	b410      	push	{r4}
 8004410:	3b01      	subs	r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	6093      	str	r3, [r2, #8]
 8004416:	da07      	bge.n	8004428 <__sfputc_r+0x1c>
 8004418:	6994      	ldr	r4, [r2, #24]
 800441a:	42a3      	cmp	r3, r4
 800441c:	db01      	blt.n	8004422 <__sfputc_r+0x16>
 800441e:	290a      	cmp	r1, #10
 8004420:	d102      	bne.n	8004428 <__sfputc_r+0x1c>
 8004422:	bc10      	pop	{r4}
 8004424:	f7ff bca6 	b.w	8003d74 <__swbuf_r>
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	1c58      	adds	r0, r3, #1
 800442c:	6010      	str	r0, [r2, #0]
 800442e:	7019      	strb	r1, [r3, #0]
 8004430:	4608      	mov	r0, r1
 8004432:	bc10      	pop	{r4}
 8004434:	4770      	bx	lr

08004436 <__sfputs_r>:
 8004436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004438:	4606      	mov	r6, r0
 800443a:	460f      	mov	r7, r1
 800443c:	4614      	mov	r4, r2
 800443e:	18d5      	adds	r5, r2, r3
 8004440:	42ac      	cmp	r4, r5
 8004442:	d101      	bne.n	8004448 <__sfputs_r+0x12>
 8004444:	2000      	movs	r0, #0
 8004446:	e007      	b.n	8004458 <__sfputs_r+0x22>
 8004448:	463a      	mov	r2, r7
 800444a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800444e:	4630      	mov	r0, r6
 8004450:	f7ff ffdc 	bl	800440c <__sfputc_r>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	d1f3      	bne.n	8004440 <__sfputs_r+0xa>
 8004458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800445c <_vfiprintf_r>:
 800445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004460:	460c      	mov	r4, r1
 8004462:	b09d      	sub	sp, #116	; 0x74
 8004464:	4617      	mov	r7, r2
 8004466:	461d      	mov	r5, r3
 8004468:	4606      	mov	r6, r0
 800446a:	b118      	cbz	r0, 8004474 <_vfiprintf_r+0x18>
 800446c:	6983      	ldr	r3, [r0, #24]
 800446e:	b90b      	cbnz	r3, 8004474 <_vfiprintf_r+0x18>
 8004470:	f7ff fe30 	bl	80040d4 <__sinit>
 8004474:	4b7c      	ldr	r3, [pc, #496]	; (8004668 <_vfiprintf_r+0x20c>)
 8004476:	429c      	cmp	r4, r3
 8004478:	d158      	bne.n	800452c <_vfiprintf_r+0xd0>
 800447a:	6874      	ldr	r4, [r6, #4]
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	0718      	lsls	r0, r3, #28
 8004480:	d55e      	bpl.n	8004540 <_vfiprintf_r+0xe4>
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d05b      	beq.n	8004540 <_vfiprintf_r+0xe4>
 8004488:	2300      	movs	r3, #0
 800448a:	9309      	str	r3, [sp, #36]	; 0x24
 800448c:	2320      	movs	r3, #32
 800448e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004492:	2330      	movs	r3, #48	; 0x30
 8004494:	f04f 0b01 	mov.w	fp, #1
 8004498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800449c:	9503      	str	r5, [sp, #12]
 800449e:	46b8      	mov	r8, r7
 80044a0:	4645      	mov	r5, r8
 80044a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80044a6:	b10b      	cbz	r3, 80044ac <_vfiprintf_r+0x50>
 80044a8:	2b25      	cmp	r3, #37	; 0x25
 80044aa:	d154      	bne.n	8004556 <_vfiprintf_r+0xfa>
 80044ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80044b0:	d00b      	beq.n	80044ca <_vfiprintf_r+0x6e>
 80044b2:	4653      	mov	r3, sl
 80044b4:	463a      	mov	r2, r7
 80044b6:	4621      	mov	r1, r4
 80044b8:	4630      	mov	r0, r6
 80044ba:	f7ff ffbc 	bl	8004436 <__sfputs_r>
 80044be:	3001      	adds	r0, #1
 80044c0:	f000 80c2 	beq.w	8004648 <_vfiprintf_r+0x1ec>
 80044c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c6:	4453      	add	r3, sl
 80044c8:	9309      	str	r3, [sp, #36]	; 0x24
 80044ca:	f898 3000 	ldrb.w	r3, [r8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80ba 	beq.w	8004648 <_vfiprintf_r+0x1ec>
 80044d4:	2300      	movs	r3, #0
 80044d6:	f04f 32ff 	mov.w	r2, #4294967295
 80044da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044de:	9304      	str	r3, [sp, #16]
 80044e0:	9307      	str	r3, [sp, #28]
 80044e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044e6:	931a      	str	r3, [sp, #104]	; 0x68
 80044e8:	46a8      	mov	r8, r5
 80044ea:	2205      	movs	r2, #5
 80044ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80044f0:	485e      	ldr	r0, [pc, #376]	; (800466c <_vfiprintf_r+0x210>)
 80044f2:	f000 fafb 	bl	8004aec <memchr>
 80044f6:	9b04      	ldr	r3, [sp, #16]
 80044f8:	bb78      	cbnz	r0, 800455a <_vfiprintf_r+0xfe>
 80044fa:	06d9      	lsls	r1, r3, #27
 80044fc:	bf44      	itt	mi
 80044fe:	2220      	movmi	r2, #32
 8004500:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004504:	071a      	lsls	r2, r3, #28
 8004506:	bf44      	itt	mi
 8004508:	222b      	movmi	r2, #43	; 0x2b
 800450a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800450e:	782a      	ldrb	r2, [r5, #0]
 8004510:	2a2a      	cmp	r2, #42	; 0x2a
 8004512:	d02a      	beq.n	800456a <_vfiprintf_r+0x10e>
 8004514:	46a8      	mov	r8, r5
 8004516:	2000      	movs	r0, #0
 8004518:	250a      	movs	r5, #10
 800451a:	9a07      	ldr	r2, [sp, #28]
 800451c:	4641      	mov	r1, r8
 800451e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004522:	3b30      	subs	r3, #48	; 0x30
 8004524:	2b09      	cmp	r3, #9
 8004526:	d969      	bls.n	80045fc <_vfiprintf_r+0x1a0>
 8004528:	b360      	cbz	r0, 8004584 <_vfiprintf_r+0x128>
 800452a:	e024      	b.n	8004576 <_vfiprintf_r+0x11a>
 800452c:	4b50      	ldr	r3, [pc, #320]	; (8004670 <_vfiprintf_r+0x214>)
 800452e:	429c      	cmp	r4, r3
 8004530:	d101      	bne.n	8004536 <_vfiprintf_r+0xda>
 8004532:	68b4      	ldr	r4, [r6, #8]
 8004534:	e7a2      	b.n	800447c <_vfiprintf_r+0x20>
 8004536:	4b4f      	ldr	r3, [pc, #316]	; (8004674 <_vfiprintf_r+0x218>)
 8004538:	429c      	cmp	r4, r3
 800453a:	bf08      	it	eq
 800453c:	68f4      	ldreq	r4, [r6, #12]
 800453e:	e79d      	b.n	800447c <_vfiprintf_r+0x20>
 8004540:	4621      	mov	r1, r4
 8004542:	4630      	mov	r0, r6
 8004544:	f7ff fc68 	bl	8003e18 <__swsetup_r>
 8004548:	2800      	cmp	r0, #0
 800454a:	d09d      	beq.n	8004488 <_vfiprintf_r+0x2c>
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	b01d      	add	sp, #116	; 0x74
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	46a8      	mov	r8, r5
 8004558:	e7a2      	b.n	80044a0 <_vfiprintf_r+0x44>
 800455a:	4a44      	ldr	r2, [pc, #272]	; (800466c <_vfiprintf_r+0x210>)
 800455c:	4645      	mov	r5, r8
 800455e:	1a80      	subs	r0, r0, r2
 8004560:	fa0b f000 	lsl.w	r0, fp, r0
 8004564:	4318      	orrs	r0, r3
 8004566:	9004      	str	r0, [sp, #16]
 8004568:	e7be      	b.n	80044e8 <_vfiprintf_r+0x8c>
 800456a:	9a03      	ldr	r2, [sp, #12]
 800456c:	1d11      	adds	r1, r2, #4
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	9103      	str	r1, [sp, #12]
 8004572:	2a00      	cmp	r2, #0
 8004574:	db01      	blt.n	800457a <_vfiprintf_r+0x11e>
 8004576:	9207      	str	r2, [sp, #28]
 8004578:	e004      	b.n	8004584 <_vfiprintf_r+0x128>
 800457a:	4252      	negs	r2, r2
 800457c:	f043 0302 	orr.w	r3, r3, #2
 8004580:	9207      	str	r2, [sp, #28]
 8004582:	9304      	str	r3, [sp, #16]
 8004584:	f898 3000 	ldrb.w	r3, [r8]
 8004588:	2b2e      	cmp	r3, #46	; 0x2e
 800458a:	d10e      	bne.n	80045aa <_vfiprintf_r+0x14e>
 800458c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004590:	2b2a      	cmp	r3, #42	; 0x2a
 8004592:	d138      	bne.n	8004606 <_vfiprintf_r+0x1aa>
 8004594:	9b03      	ldr	r3, [sp, #12]
 8004596:	f108 0802 	add.w	r8, r8, #2
 800459a:	1d1a      	adds	r2, r3, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	9203      	str	r2, [sp, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bfb8      	it	lt
 80045a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80045a8:	9305      	str	r3, [sp, #20]
 80045aa:	4d33      	ldr	r5, [pc, #204]	; (8004678 <_vfiprintf_r+0x21c>)
 80045ac:	2203      	movs	r2, #3
 80045ae:	f898 1000 	ldrb.w	r1, [r8]
 80045b2:	4628      	mov	r0, r5
 80045b4:	f000 fa9a 	bl	8004aec <memchr>
 80045b8:	b140      	cbz	r0, 80045cc <_vfiprintf_r+0x170>
 80045ba:	2340      	movs	r3, #64	; 0x40
 80045bc:	1b40      	subs	r0, r0, r5
 80045be:	fa03 f000 	lsl.w	r0, r3, r0
 80045c2:	9b04      	ldr	r3, [sp, #16]
 80045c4:	f108 0801 	add.w	r8, r8, #1
 80045c8:	4303      	orrs	r3, r0
 80045ca:	9304      	str	r3, [sp, #16]
 80045cc:	f898 1000 	ldrb.w	r1, [r8]
 80045d0:	2206      	movs	r2, #6
 80045d2:	482a      	ldr	r0, [pc, #168]	; (800467c <_vfiprintf_r+0x220>)
 80045d4:	f108 0701 	add.w	r7, r8, #1
 80045d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045dc:	f000 fa86 	bl	8004aec <memchr>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d037      	beq.n	8004654 <_vfiprintf_r+0x1f8>
 80045e4:	4b26      	ldr	r3, [pc, #152]	; (8004680 <_vfiprintf_r+0x224>)
 80045e6:	bb1b      	cbnz	r3, 8004630 <_vfiprintf_r+0x1d4>
 80045e8:	9b03      	ldr	r3, [sp, #12]
 80045ea:	3307      	adds	r3, #7
 80045ec:	f023 0307 	bic.w	r3, r3, #7
 80045f0:	3308      	adds	r3, #8
 80045f2:	9303      	str	r3, [sp, #12]
 80045f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f6:	444b      	add	r3, r9
 80045f8:	9309      	str	r3, [sp, #36]	; 0x24
 80045fa:	e750      	b.n	800449e <_vfiprintf_r+0x42>
 80045fc:	fb05 3202 	mla	r2, r5, r2, r3
 8004600:	2001      	movs	r0, #1
 8004602:	4688      	mov	r8, r1
 8004604:	e78a      	b.n	800451c <_vfiprintf_r+0xc0>
 8004606:	2300      	movs	r3, #0
 8004608:	250a      	movs	r5, #10
 800460a:	4619      	mov	r1, r3
 800460c:	f108 0801 	add.w	r8, r8, #1
 8004610:	9305      	str	r3, [sp, #20]
 8004612:	4640      	mov	r0, r8
 8004614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004618:	3a30      	subs	r2, #48	; 0x30
 800461a:	2a09      	cmp	r2, #9
 800461c:	d903      	bls.n	8004626 <_vfiprintf_r+0x1ca>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0c3      	beq.n	80045aa <_vfiprintf_r+0x14e>
 8004622:	9105      	str	r1, [sp, #20]
 8004624:	e7c1      	b.n	80045aa <_vfiprintf_r+0x14e>
 8004626:	fb05 2101 	mla	r1, r5, r1, r2
 800462a:	2301      	movs	r3, #1
 800462c:	4680      	mov	r8, r0
 800462e:	e7f0      	b.n	8004612 <_vfiprintf_r+0x1b6>
 8004630:	ab03      	add	r3, sp, #12
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	4622      	mov	r2, r4
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <_vfiprintf_r+0x228>)
 8004638:	a904      	add	r1, sp, #16
 800463a:	4630      	mov	r0, r6
 800463c:	f3af 8000 	nop.w
 8004640:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004644:	4681      	mov	r9, r0
 8004646:	d1d5      	bne.n	80045f4 <_vfiprintf_r+0x198>
 8004648:	89a3      	ldrh	r3, [r4, #12]
 800464a:	065b      	lsls	r3, r3, #25
 800464c:	f53f af7e 	bmi.w	800454c <_vfiprintf_r+0xf0>
 8004650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004652:	e77d      	b.n	8004550 <_vfiprintf_r+0xf4>
 8004654:	ab03      	add	r3, sp, #12
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	4622      	mov	r2, r4
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <_vfiprintf_r+0x228>)
 800465c:	a904      	add	r1, sp, #16
 800465e:	4630      	mov	r0, r6
 8004660:	f000 f888 	bl	8004774 <_printf_i>
 8004664:	e7ec      	b.n	8004640 <_vfiprintf_r+0x1e4>
 8004666:	bf00      	nop
 8004668:	08004c50 	.word	0x08004c50
 800466c:	08004c90 	.word	0x08004c90
 8004670:	08004c70 	.word	0x08004c70
 8004674:	08004c30 	.word	0x08004c30
 8004678:	08004c96 	.word	0x08004c96
 800467c:	08004c9a 	.word	0x08004c9a
 8004680:	00000000 	.word	0x00000000
 8004684:	08004437 	.word	0x08004437

08004688 <_printf_common>:
 8004688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800468c:	4691      	mov	r9, r2
 800468e:	461f      	mov	r7, r3
 8004690:	688a      	ldr	r2, [r1, #8]
 8004692:	690b      	ldr	r3, [r1, #16]
 8004694:	4606      	mov	r6, r0
 8004696:	4293      	cmp	r3, r2
 8004698:	bfb8      	it	lt
 800469a:	4613      	movlt	r3, r2
 800469c:	f8c9 3000 	str.w	r3, [r9]
 80046a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046a4:	460c      	mov	r4, r1
 80046a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046aa:	b112      	cbz	r2, 80046b2 <_printf_common+0x2a>
 80046ac:	3301      	adds	r3, #1
 80046ae:	f8c9 3000 	str.w	r3, [r9]
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	0699      	lsls	r1, r3, #26
 80046b6:	bf42      	ittt	mi
 80046b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80046bc:	3302      	addmi	r3, #2
 80046be:	f8c9 3000 	strmi.w	r3, [r9]
 80046c2:	6825      	ldr	r5, [r4, #0]
 80046c4:	f015 0506 	ands.w	r5, r5, #6
 80046c8:	d107      	bne.n	80046da <_printf_common+0x52>
 80046ca:	f104 0a19 	add.w	sl, r4, #25
 80046ce:	68e3      	ldr	r3, [r4, #12]
 80046d0:	f8d9 2000 	ldr.w	r2, [r9]
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	42ab      	cmp	r3, r5
 80046d8:	dc29      	bgt.n	800472e <_printf_common+0xa6>
 80046da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80046de:	6822      	ldr	r2, [r4, #0]
 80046e0:	3300      	adds	r3, #0
 80046e2:	bf18      	it	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	0692      	lsls	r2, r2, #26
 80046e8:	d42e      	bmi.n	8004748 <_printf_common+0xc0>
 80046ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046ee:	4639      	mov	r1, r7
 80046f0:	4630      	mov	r0, r6
 80046f2:	47c0      	blx	r8
 80046f4:	3001      	adds	r0, #1
 80046f6:	d021      	beq.n	800473c <_printf_common+0xb4>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	68e5      	ldr	r5, [r4, #12]
 80046fc:	f003 0306 	and.w	r3, r3, #6
 8004700:	2b04      	cmp	r3, #4
 8004702:	bf18      	it	ne
 8004704:	2500      	movne	r5, #0
 8004706:	f8d9 2000 	ldr.w	r2, [r9]
 800470a:	f04f 0900 	mov.w	r9, #0
 800470e:	bf08      	it	eq
 8004710:	1aad      	subeq	r5, r5, r2
 8004712:	68a3      	ldr	r3, [r4, #8]
 8004714:	6922      	ldr	r2, [r4, #16]
 8004716:	bf08      	it	eq
 8004718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800471c:	4293      	cmp	r3, r2
 800471e:	bfc4      	itt	gt
 8004720:	1a9b      	subgt	r3, r3, r2
 8004722:	18ed      	addgt	r5, r5, r3
 8004724:	341a      	adds	r4, #26
 8004726:	454d      	cmp	r5, r9
 8004728:	d11a      	bne.n	8004760 <_printf_common+0xd8>
 800472a:	2000      	movs	r0, #0
 800472c:	e008      	b.n	8004740 <_printf_common+0xb8>
 800472e:	2301      	movs	r3, #1
 8004730:	4652      	mov	r2, sl
 8004732:	4639      	mov	r1, r7
 8004734:	4630      	mov	r0, r6
 8004736:	47c0      	blx	r8
 8004738:	3001      	adds	r0, #1
 800473a:	d103      	bne.n	8004744 <_printf_common+0xbc>
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004744:	3501      	adds	r5, #1
 8004746:	e7c2      	b.n	80046ce <_printf_common+0x46>
 8004748:	2030      	movs	r0, #48	; 0x30
 800474a:	18e1      	adds	r1, r4, r3
 800474c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004756:	4422      	add	r2, r4
 8004758:	3302      	adds	r3, #2
 800475a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800475e:	e7c4      	b.n	80046ea <_printf_common+0x62>
 8004760:	2301      	movs	r3, #1
 8004762:	4622      	mov	r2, r4
 8004764:	4639      	mov	r1, r7
 8004766:	4630      	mov	r0, r6
 8004768:	47c0      	blx	r8
 800476a:	3001      	adds	r0, #1
 800476c:	d0e6      	beq.n	800473c <_printf_common+0xb4>
 800476e:	f109 0901 	add.w	r9, r9, #1
 8004772:	e7d8      	b.n	8004726 <_printf_common+0x9e>

08004774 <_printf_i>:
 8004774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004778:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800477c:	460c      	mov	r4, r1
 800477e:	7e09      	ldrb	r1, [r1, #24]
 8004780:	b085      	sub	sp, #20
 8004782:	296e      	cmp	r1, #110	; 0x6e
 8004784:	4617      	mov	r7, r2
 8004786:	4606      	mov	r6, r0
 8004788:	4698      	mov	r8, r3
 800478a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800478c:	f000 80b3 	beq.w	80048f6 <_printf_i+0x182>
 8004790:	d822      	bhi.n	80047d8 <_printf_i+0x64>
 8004792:	2963      	cmp	r1, #99	; 0x63
 8004794:	d036      	beq.n	8004804 <_printf_i+0x90>
 8004796:	d80a      	bhi.n	80047ae <_printf_i+0x3a>
 8004798:	2900      	cmp	r1, #0
 800479a:	f000 80b9 	beq.w	8004910 <_printf_i+0x19c>
 800479e:	2958      	cmp	r1, #88	; 0x58
 80047a0:	f000 8083 	beq.w	80048aa <_printf_i+0x136>
 80047a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80047ac:	e032      	b.n	8004814 <_printf_i+0xa0>
 80047ae:	2964      	cmp	r1, #100	; 0x64
 80047b0:	d001      	beq.n	80047b6 <_printf_i+0x42>
 80047b2:	2969      	cmp	r1, #105	; 0x69
 80047b4:	d1f6      	bne.n	80047a4 <_printf_i+0x30>
 80047b6:	6820      	ldr	r0, [r4, #0]
 80047b8:	6813      	ldr	r3, [r2, #0]
 80047ba:	0605      	lsls	r5, r0, #24
 80047bc:	f103 0104 	add.w	r1, r3, #4
 80047c0:	d52a      	bpl.n	8004818 <_printf_i+0xa4>
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6011      	str	r1, [r2, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	da03      	bge.n	80047d2 <_printf_i+0x5e>
 80047ca:	222d      	movs	r2, #45	; 0x2d
 80047cc:	425b      	negs	r3, r3
 80047ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80047d2:	486f      	ldr	r0, [pc, #444]	; (8004990 <_printf_i+0x21c>)
 80047d4:	220a      	movs	r2, #10
 80047d6:	e039      	b.n	800484c <_printf_i+0xd8>
 80047d8:	2973      	cmp	r1, #115	; 0x73
 80047da:	f000 809d 	beq.w	8004918 <_printf_i+0x1a4>
 80047de:	d808      	bhi.n	80047f2 <_printf_i+0x7e>
 80047e0:	296f      	cmp	r1, #111	; 0x6f
 80047e2:	d020      	beq.n	8004826 <_printf_i+0xb2>
 80047e4:	2970      	cmp	r1, #112	; 0x70
 80047e6:	d1dd      	bne.n	80047a4 <_printf_i+0x30>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f043 0320 	orr.w	r3, r3, #32
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	e003      	b.n	80047fa <_printf_i+0x86>
 80047f2:	2975      	cmp	r1, #117	; 0x75
 80047f4:	d017      	beq.n	8004826 <_printf_i+0xb2>
 80047f6:	2978      	cmp	r1, #120	; 0x78
 80047f8:	d1d4      	bne.n	80047a4 <_printf_i+0x30>
 80047fa:	2378      	movs	r3, #120	; 0x78
 80047fc:	4865      	ldr	r0, [pc, #404]	; (8004994 <_printf_i+0x220>)
 80047fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004802:	e055      	b.n	80048b0 <_printf_i+0x13c>
 8004804:	6813      	ldr	r3, [r2, #0]
 8004806:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800480a:	1d19      	adds	r1, r3, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6011      	str	r1, [r2, #0]
 8004810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004814:	2301      	movs	r3, #1
 8004816:	e08c      	b.n	8004932 <_printf_i+0x1be>
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800481e:	6011      	str	r1, [r2, #0]
 8004820:	bf18      	it	ne
 8004822:	b21b      	sxthne	r3, r3
 8004824:	e7cf      	b.n	80047c6 <_printf_i+0x52>
 8004826:	6813      	ldr	r3, [r2, #0]
 8004828:	6825      	ldr	r5, [r4, #0]
 800482a:	1d18      	adds	r0, r3, #4
 800482c:	6010      	str	r0, [r2, #0]
 800482e:	0628      	lsls	r0, r5, #24
 8004830:	d501      	bpl.n	8004836 <_printf_i+0xc2>
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	e002      	b.n	800483c <_printf_i+0xc8>
 8004836:	0668      	lsls	r0, r5, #25
 8004838:	d5fb      	bpl.n	8004832 <_printf_i+0xbe>
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	296f      	cmp	r1, #111	; 0x6f
 800483e:	bf14      	ite	ne
 8004840:	220a      	movne	r2, #10
 8004842:	2208      	moveq	r2, #8
 8004844:	4852      	ldr	r0, [pc, #328]	; (8004990 <_printf_i+0x21c>)
 8004846:	2100      	movs	r1, #0
 8004848:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800484c:	6865      	ldr	r5, [r4, #4]
 800484e:	2d00      	cmp	r5, #0
 8004850:	60a5      	str	r5, [r4, #8]
 8004852:	f2c0 8095 	blt.w	8004980 <_printf_i+0x20c>
 8004856:	6821      	ldr	r1, [r4, #0]
 8004858:	f021 0104 	bic.w	r1, r1, #4
 800485c:	6021      	str	r1, [r4, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d13d      	bne.n	80048de <_printf_i+0x16a>
 8004862:	2d00      	cmp	r5, #0
 8004864:	f040 808e 	bne.w	8004984 <_printf_i+0x210>
 8004868:	4665      	mov	r5, ip
 800486a:	2a08      	cmp	r2, #8
 800486c:	d10b      	bne.n	8004886 <_printf_i+0x112>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	07db      	lsls	r3, r3, #31
 8004872:	d508      	bpl.n	8004886 <_printf_i+0x112>
 8004874:	6923      	ldr	r3, [r4, #16]
 8004876:	6862      	ldr	r2, [r4, #4]
 8004878:	429a      	cmp	r2, r3
 800487a:	bfde      	ittt	le
 800487c:	2330      	movle	r3, #48	; 0x30
 800487e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004882:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004886:	ebac 0305 	sub.w	r3, ip, r5
 800488a:	6123      	str	r3, [r4, #16]
 800488c:	f8cd 8000 	str.w	r8, [sp]
 8004890:	463b      	mov	r3, r7
 8004892:	aa03      	add	r2, sp, #12
 8004894:	4621      	mov	r1, r4
 8004896:	4630      	mov	r0, r6
 8004898:	f7ff fef6 	bl	8004688 <_printf_common>
 800489c:	3001      	adds	r0, #1
 800489e:	d14d      	bne.n	800493c <_printf_i+0x1c8>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	b005      	add	sp, #20
 80048a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048aa:	4839      	ldr	r0, [pc, #228]	; (8004990 <_printf_i+0x21c>)
 80048ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80048b0:	6813      	ldr	r3, [r2, #0]
 80048b2:	6821      	ldr	r1, [r4, #0]
 80048b4:	1d1d      	adds	r5, r3, #4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6015      	str	r5, [r2, #0]
 80048ba:	060a      	lsls	r2, r1, #24
 80048bc:	d50b      	bpl.n	80048d6 <_printf_i+0x162>
 80048be:	07ca      	lsls	r2, r1, #31
 80048c0:	bf44      	itt	mi
 80048c2:	f041 0120 	orrmi.w	r1, r1, #32
 80048c6:	6021      	strmi	r1, [r4, #0]
 80048c8:	b91b      	cbnz	r3, 80048d2 <_printf_i+0x15e>
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	f022 0220 	bic.w	r2, r2, #32
 80048d0:	6022      	str	r2, [r4, #0]
 80048d2:	2210      	movs	r2, #16
 80048d4:	e7b7      	b.n	8004846 <_printf_i+0xd2>
 80048d6:	064d      	lsls	r5, r1, #25
 80048d8:	bf48      	it	mi
 80048da:	b29b      	uxthmi	r3, r3
 80048dc:	e7ef      	b.n	80048be <_printf_i+0x14a>
 80048de:	4665      	mov	r5, ip
 80048e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80048e4:	fb02 3311 	mls	r3, r2, r1, r3
 80048e8:	5cc3      	ldrb	r3, [r0, r3]
 80048ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80048ee:	460b      	mov	r3, r1
 80048f0:	2900      	cmp	r1, #0
 80048f2:	d1f5      	bne.n	80048e0 <_printf_i+0x16c>
 80048f4:	e7b9      	b.n	800486a <_printf_i+0xf6>
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	6825      	ldr	r5, [r4, #0]
 80048fa:	1d18      	adds	r0, r3, #4
 80048fc:	6961      	ldr	r1, [r4, #20]
 80048fe:	6010      	str	r0, [r2, #0]
 8004900:	0628      	lsls	r0, r5, #24
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	d501      	bpl.n	800490a <_printf_i+0x196>
 8004906:	6019      	str	r1, [r3, #0]
 8004908:	e002      	b.n	8004910 <_printf_i+0x19c>
 800490a:	066a      	lsls	r2, r5, #25
 800490c:	d5fb      	bpl.n	8004906 <_printf_i+0x192>
 800490e:	8019      	strh	r1, [r3, #0]
 8004910:	2300      	movs	r3, #0
 8004912:	4665      	mov	r5, ip
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	e7b9      	b.n	800488c <_printf_i+0x118>
 8004918:	6813      	ldr	r3, [r2, #0]
 800491a:	1d19      	adds	r1, r3, #4
 800491c:	6011      	str	r1, [r2, #0]
 800491e:	681d      	ldr	r5, [r3, #0]
 8004920:	6862      	ldr	r2, [r4, #4]
 8004922:	2100      	movs	r1, #0
 8004924:	4628      	mov	r0, r5
 8004926:	f000 f8e1 	bl	8004aec <memchr>
 800492a:	b108      	cbz	r0, 8004930 <_printf_i+0x1bc>
 800492c:	1b40      	subs	r0, r0, r5
 800492e:	6060      	str	r0, [r4, #4]
 8004930:	6863      	ldr	r3, [r4, #4]
 8004932:	6123      	str	r3, [r4, #16]
 8004934:	2300      	movs	r3, #0
 8004936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800493a:	e7a7      	b.n	800488c <_printf_i+0x118>
 800493c:	6923      	ldr	r3, [r4, #16]
 800493e:	462a      	mov	r2, r5
 8004940:	4639      	mov	r1, r7
 8004942:	4630      	mov	r0, r6
 8004944:	47c0      	blx	r8
 8004946:	3001      	adds	r0, #1
 8004948:	d0aa      	beq.n	80048a0 <_printf_i+0x12c>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	079b      	lsls	r3, r3, #30
 800494e:	d413      	bmi.n	8004978 <_printf_i+0x204>
 8004950:	68e0      	ldr	r0, [r4, #12]
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	4298      	cmp	r0, r3
 8004956:	bfb8      	it	lt
 8004958:	4618      	movlt	r0, r3
 800495a:	e7a3      	b.n	80048a4 <_printf_i+0x130>
 800495c:	2301      	movs	r3, #1
 800495e:	464a      	mov	r2, r9
 8004960:	4639      	mov	r1, r7
 8004962:	4630      	mov	r0, r6
 8004964:	47c0      	blx	r8
 8004966:	3001      	adds	r0, #1
 8004968:	d09a      	beq.n	80048a0 <_printf_i+0x12c>
 800496a:	3501      	adds	r5, #1
 800496c:	68e3      	ldr	r3, [r4, #12]
 800496e:	9a03      	ldr	r2, [sp, #12]
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	42ab      	cmp	r3, r5
 8004974:	dcf2      	bgt.n	800495c <_printf_i+0x1e8>
 8004976:	e7eb      	b.n	8004950 <_printf_i+0x1dc>
 8004978:	2500      	movs	r5, #0
 800497a:	f104 0919 	add.w	r9, r4, #25
 800497e:	e7f5      	b.n	800496c <_printf_i+0x1f8>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ac      	bne.n	80048de <_printf_i+0x16a>
 8004984:	7803      	ldrb	r3, [r0, #0]
 8004986:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800498a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800498e:	e76c      	b.n	800486a <_printf_i+0xf6>
 8004990:	08004ca1 	.word	0x08004ca1
 8004994:	08004cb2 	.word	0x08004cb2

08004998 <_sbrk_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	2300      	movs	r3, #0
 800499c:	4c05      	ldr	r4, [pc, #20]	; (80049b4 <_sbrk_r+0x1c>)
 800499e:	4605      	mov	r5, r0
 80049a0:	4608      	mov	r0, r1
 80049a2:	6023      	str	r3, [r4, #0]
 80049a4:	f7fc fa2e 	bl	8000e04 <_sbrk>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d102      	bne.n	80049b2 <_sbrk_r+0x1a>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	b103      	cbz	r3, 80049b2 <_sbrk_r+0x1a>
 80049b0:	602b      	str	r3, [r5, #0]
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	20000790 	.word	0x20000790

080049b8 <__sread>:
 80049b8:	b510      	push	{r4, lr}
 80049ba:	460c      	mov	r4, r1
 80049bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c0:	f000 f8a4 	bl	8004b0c <_read_r>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	bfab      	itete	ge
 80049c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049ca:	89a3      	ldrhlt	r3, [r4, #12]
 80049cc:	181b      	addge	r3, r3, r0
 80049ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049d2:	bfac      	ite	ge
 80049d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80049d6:	81a3      	strhlt	r3, [r4, #12]
 80049d8:	bd10      	pop	{r4, pc}

080049da <__swrite>:
 80049da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049de:	461f      	mov	r7, r3
 80049e0:	898b      	ldrh	r3, [r1, #12]
 80049e2:	4605      	mov	r5, r0
 80049e4:	05db      	lsls	r3, r3, #23
 80049e6:	460c      	mov	r4, r1
 80049e8:	4616      	mov	r6, r2
 80049ea:	d505      	bpl.n	80049f8 <__swrite+0x1e>
 80049ec:	2302      	movs	r3, #2
 80049ee:	2200      	movs	r2, #0
 80049f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f4:	f000 f868 	bl	8004ac8 <_lseek_r>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	4632      	mov	r2, r6
 80049fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a00:	81a3      	strh	r3, [r4, #12]
 8004a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a06:	463b      	mov	r3, r7
 8004a08:	4628      	mov	r0, r5
 8004a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a0e:	f000 b817 	b.w	8004a40 <_write_r>

08004a12 <__sseek>:
 8004a12:	b510      	push	{r4, lr}
 8004a14:	460c      	mov	r4, r1
 8004a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1a:	f000 f855 	bl	8004ac8 <_lseek_r>
 8004a1e:	1c43      	adds	r3, r0, #1
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	bf15      	itete	ne
 8004a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a2e:	81a3      	strheq	r3, [r4, #12]
 8004a30:	bf18      	it	ne
 8004a32:	81a3      	strhne	r3, [r4, #12]
 8004a34:	bd10      	pop	{r4, pc}

08004a36 <__sclose>:
 8004a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3a:	f000 b813 	b.w	8004a64 <_close_r>
	...

08004a40 <_write_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4605      	mov	r5, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4c05      	ldr	r4, [pc, #20]	; (8004a60 <_write_r+0x20>)
 8004a4c:	6022      	str	r2, [r4, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f7fc f992 	bl	8000d78 <_write>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_write_r+0x1e>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_write_r+0x1e>
 8004a5c:	602b      	str	r3, [r5, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	20000790 	.word	0x20000790

08004a64 <_close_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	2300      	movs	r3, #0
 8004a68:	4c05      	ldr	r4, [pc, #20]	; (8004a80 <_close_r+0x1c>)
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	f7fc f998 	bl	8000da4 <_close>
 8004a74:	1c43      	adds	r3, r0, #1
 8004a76:	d102      	bne.n	8004a7e <_close_r+0x1a>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	b103      	cbz	r3, 8004a7e <_close_r+0x1a>
 8004a7c:	602b      	str	r3, [r5, #0]
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	20000790 	.word	0x20000790

08004a84 <_fstat_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	2300      	movs	r3, #0
 8004a88:	4c06      	ldr	r4, [pc, #24]	; (8004aa4 <_fstat_r+0x20>)
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	f7fc f992 	bl	8000dba <_fstat>
 8004a96:	1c43      	adds	r3, r0, #1
 8004a98:	d102      	bne.n	8004aa0 <_fstat_r+0x1c>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	b103      	cbz	r3, 8004aa0 <_fstat_r+0x1c>
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	bd38      	pop	{r3, r4, r5, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000790 	.word	0x20000790

08004aa8 <_isatty_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	2300      	movs	r3, #0
 8004aac:	4c05      	ldr	r4, [pc, #20]	; (8004ac4 <_isatty_r+0x1c>)
 8004aae:	4605      	mov	r5, r0
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	f7fc f990 	bl	8000dd8 <_isatty>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_isatty_r+0x1a>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_isatty_r+0x1a>
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	20000790 	.word	0x20000790

08004ac8 <_lseek_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4605      	mov	r5, r0
 8004acc:	4608      	mov	r0, r1
 8004ace:	4611      	mov	r1, r2
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	4c05      	ldr	r4, [pc, #20]	; (8004ae8 <_lseek_r+0x20>)
 8004ad4:	6022      	str	r2, [r4, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f7fc f988 	bl	8000dec <_lseek>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_lseek_r+0x1e>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_lseek_r+0x1e>
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	20000790 	.word	0x20000790

08004aec <memchr>:
 8004aec:	b510      	push	{r4, lr}
 8004aee:	b2c9      	uxtb	r1, r1
 8004af0:	4402      	add	r2, r0
 8004af2:	4290      	cmp	r0, r2
 8004af4:	4603      	mov	r3, r0
 8004af6:	d101      	bne.n	8004afc <memchr+0x10>
 8004af8:	2300      	movs	r3, #0
 8004afa:	e003      	b.n	8004b04 <memchr+0x18>
 8004afc:	781c      	ldrb	r4, [r3, #0]
 8004afe:	3001      	adds	r0, #1
 8004b00:	428c      	cmp	r4, r1
 8004b02:	d1f6      	bne.n	8004af2 <memchr+0x6>
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd10      	pop	{r4, pc}

08004b08 <__malloc_lock>:
 8004b08:	4770      	bx	lr

08004b0a <__malloc_unlock>:
 8004b0a:	4770      	bx	lr

08004b0c <_read_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	4605      	mov	r5, r0
 8004b10:	4608      	mov	r0, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	2200      	movs	r2, #0
 8004b16:	4c05      	ldr	r4, [pc, #20]	; (8004b2c <_read_r+0x20>)
 8004b18:	6022      	str	r2, [r4, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f7fc f90e 	bl	8000d3c <_read>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_read_r+0x1e>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_read_r+0x1e>
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	20000790 	.word	0x20000790

08004b30 <_init>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	bf00      	nop
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr

08004b3c <_fini>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr
