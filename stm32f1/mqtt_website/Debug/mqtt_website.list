
mqtt_website.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08005cd0  08005cd0  00015cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb8  08005eb8  000205b8  2**0
                  CONTENTS
  4 .ARM          00000000  08005eb8  08005eb8  000205b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eb8  08005eb8  000205b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb8  08005eb8  00015eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ebc  08005ebc  00015ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  20000000  08005ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200005b8  08006478  000205b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  08006478  000207d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0ed  00000000  00000000  000205e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002411  00000000  00000000  0002f6ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d50  00000000  00000000  00031ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  00032830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f66  00000000  00000000  00033468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a893  00000000  00000000  000493ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073425  00000000  00000000  00053c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7086  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f80  00000000  00000000  000c7104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200005b8 	.word	0x200005b8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005cb8 	.word	0x08005cb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200005bc 	.word	0x200005bc
 800014c:	08005cb8 	.word	0x08005cb8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <dbg_register_task>:
} protocol={'#','*', 0,0,0,0,0, {0},{0},{0},0};



uint8_t dbg_register_task(void (*task_routine)(void), char *task_command, uint8_t args)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	4613      	mov	r3, r2
 8000948:	71fb      	strb	r3, [r7, #7]
	uint8_t	 task_command_len  = strlen((char *)task_command);
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f7ff fc00 	bl	8000150 <strlen>
 8000950:	4603      	mov	r3, r0
 8000952:	75fb      	strb	r3, [r7, #23]
 	if (task_routine == NULL ) return FALSE;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <dbg_register_task+0x22>
 800095a:	2300      	movs	r3, #0
 800095c:	e049      	b.n	80009f2 <dbg_register_task+0xb6>

	if (task_command == NULL) return FALSE;
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d101      	bne.n	8000968 <dbg_register_task+0x2c>
 8000964:	2300      	movs	r3, #0
 8000966:	e044      	b.n	80009f2 <dbg_register_task+0xb6>

	if (task_command_len > 10) return FALSE;
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	2b0a      	cmp	r3, #10
 800096c:	d901      	bls.n	8000972 <dbg_register_task+0x36>
 800096e:	2300      	movs	r3, #0
 8000970:	e03f      	b.n	80009f2 <dbg_register_task+0xb6>

	if ((task_pool.taken_task+1) >= task_pool.limit ) return FALSE;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <dbg_register_task+0xc0>)
 8000974:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000978:	3301      	adds	r3, #1
 800097a:	4a20      	ldr	r2, [pc, #128]	; (80009fc <dbg_register_task+0xc0>)
 800097c:	f892 20a1 	ldrb.w	r2, [r2, #161]	; 0xa1
 8000980:	4293      	cmp	r3, r2
 8000982:	db01      	blt.n	8000988 <dbg_register_task+0x4c>
 8000984:	2300      	movs	r3, #0
 8000986:	e034      	b.n	80009f2 <dbg_register_task+0xb6>

	task_pool.entry[task_pool.taken_task].args = args;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <dbg_register_task+0xc0>)
 800098a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800098e:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <dbg_register_task+0xc0>)
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	4413      	add	r3, r2
 8000994:	330f      	adds	r3, #15
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	701a      	strb	r2, [r3, #0]


	task_pool.entry[task_pool.taken_task].handlers.basic  = task_routine;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <dbg_register_task+0xc0>)
 800099c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80009a0:	4a16      	ldr	r2, [pc, #88]	; (80009fc <dbg_register_task+0xc0>)
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	4413      	add	r3, r2
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	601a      	str	r2, [r3, #0]


	task_pool.entry[task_pool.taken_task].command_len = task_command_len;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <dbg_register_task+0xc0>)
 80009ac:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80009b0:	4a12      	ldr	r2, [pc, #72]	; (80009fc <dbg_register_task+0xc0>)
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	4413      	add	r3, r2
 80009b6:	330e      	adds	r3, #14
 80009b8:	7dfa      	ldrb	r2, [r7, #23]
 80009ba:	701a      	strb	r2, [r3, #0]
	memcpy (task_pool.entry[task_pool.taken_task].command  , task_command,task_command_len);
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <dbg_register_task+0xc0>)
 80009be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <dbg_register_task+0xc0>)
 80009c6:	4413      	add	r3, r2
 80009c8:	3304      	adds	r3, #4
 80009ca:	7dfa      	ldrb	r2, [r7, #23]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f004 f949 	bl	8004c66 <memcpy>

	task_pool.taken_task++;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <dbg_register_task+0xc0>)
 80009d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80009da:	3301      	adds	r3, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <dbg_register_task+0xc0>)
 80009e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	printf("Task %lx with cmd [%s] OK\r\n", (uint32_t)task_routine, task_command);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <dbg_register_task+0xc4>)
 80009ec:	f004 f94e 	bl	8004c8c <iprintf>
	return TRUE;
 80009f0:	2301      	movs	r3, #1

}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200005e4 	.word	0x200005e4
 8000a00:	08005cd0 	.word	0x08005cd0

08000a04 <dbg_store_packet>:

void dbg_store_packet(char recieved_data)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if((recieved_data =='\r') || recieved_data =='\n')
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b0d      	cmp	r3, #13
 8000a12:	d041      	beq.n	8000a98 <dbg_store_packet+0x94>
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b0a      	cmp	r3, #10
 8000a18:	d03e      	beq.n	8000a98 <dbg_store_packet+0x94>
		return;
	if (recieved_data == protocol.init_char) {
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d10d      	bne.n	8000a40 <dbg_store_packet+0x3c>

		protocol.tail     = false;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	711a      	strb	r2, [r3, #4]
		protocol.complete = false;
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a2c:	7893      	ldrb	r3, [r2, #2]
 8000a2e:	f36f 0300 	bfc	r3, #0, #1
 8000a32:	7093      	strb	r3, [r2, #2]
		protocol.start    = true;
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a36:	7893      	ldrb	r3, [r2, #2]
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	7093      	strb	r3, [r2, #2]
		return;
 8000a3e:	e02c      	b.n	8000a9a <dbg_store_packet+0x96>
	}

	if ((recieved_data == protocol.end_char)  && protocol.start==true) {
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d110      	bne.n	8000a6c <dbg_store_packet+0x68>
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a4c:	789b      	ldrb	r3, [r3, #2]
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d009      	beq.n	8000a6c <dbg_store_packet+0x68>

		protocol.complete = true;
 8000a58:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a5a:	7893      	ldrb	r3, [r2, #2]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	7093      	strb	r3, [r2, #2]
		protocol.start    = false;
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a64:	7893      	ldrb	r3, [r2, #2]
 8000a66:	f36f 0341 	bfc	r3, #1, #1
 8000a6a:	7093      	strb	r3, [r2, #2]
	}

	protocol.data_in[ protocol.tail ] = recieved_data;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a74:	4413      	add	r3, r2
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
	protocol.tail++;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a7e:	791b      	ldrb	r3, [r3, #4]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a86:	711a      	strb	r2, [r3, #4]

	if ( protocol.tail >= (UART_RX_BUFFER_SIZE-1))
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	2bff      	cmp	r3, #255	; 0xff
 8000a8e:	d104      	bne.n	8000a9a <dbg_store_packet+0x96>
		protocol.tail=false;
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	711a      	strb	r2, [r3, #4]
 8000a96:	e000      	b.n	8000a9a <dbg_store_packet+0x96>
		return;
 8000a98:	bf00      	nop
}
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000000 	.word	0x20000000

08000aa8 <dbg_command_scan>:

void dbg_command_scan(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0



	if (!protocol.complete) { return;}
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <dbg_command_scan+0x58>)
 8000aae:	789b      	ldrb	r3, [r3, #2]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d01f      	beq.n	8000afa <dbg_command_scan+0x52>
	//printf("something recieved\r\n");
	protocol.complete	= false;
 8000aba:	4a11      	ldr	r2, [pc, #68]	; (8000b00 <dbg_command_scan+0x58>)
 8000abc:	7893      	ldrb	r3, [r2, #2]
 8000abe:	f36f 0300 	bfc	r3, #0, #1
 8000ac2:	7093      	strb	r3, [r2, #2]
	protocol.data_in[protocol.tail+1] = '\0';
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <dbg_command_scan+0x58>)
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <dbg_command_scan+0x58>)
 8000acc:	4413      	add	r3, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
	protocol.command	= protocol.data_in[1];
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <dbg_command_scan+0x58>)
 8000ad6:	f893 2207 	ldrb.w	r2, [r3, #519]	; 0x207
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <dbg_command_scan+0x58>)
 8000adc:	715a      	strb	r2, [r3, #5]
	memcpy(protocol.parameters,  protocol.data_in,(protocol.tail-1));
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <dbg_command_scan+0x58>)
 8000ae0:	791b      	ldrb	r3, [r3, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4907      	ldr	r1, [pc, #28]	; (8000b04 <dbg_command_scan+0x5c>)
 8000ae8:	4807      	ldr	r0, [pc, #28]	; (8000b08 <dbg_command_scan+0x60>)
 8000aea:	f004 f8bc 	bl	8004c66 <memcpy>

	dbg_uart_parser( protocol.parameters) ;
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <dbg_command_scan+0x60>)
 8000af0:	f000 f934 	bl	8000d5c <dbg_uart_parser>
	dbg_clear_packet();
 8000af4:	f000 f834 	bl	8000b60 <dbg_clear_packet>
 8000af8:	e000      	b.n	8000afc <dbg_command_scan+0x54>
	if (!protocol.complete) { return;}
 8000afa:	bf00      	nop

}
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000206 	.word	0x20000206
 8000b08:	20000106 	.word	0x20000106

08000b0c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if (huart->Instance == DEBUG_USART_INSTANCE) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_UART_RxCpltCallback+0x48>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d115      	bne.n	8000b4a <HAL_UART_RxCpltCallback+0x3e>
		dbg_store_packet(Rx_data[0]);
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_UART_RxCpltCallback+0x4c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff6d 	bl	8000a04 <dbg_store_packet>

		__HAL_UART_CLEAR_OREFLAG(UART_DBG_PORT);
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_UART_RxCpltCallback+0x50>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_UART_RxCpltCallback+0x50>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]

		HAL_UART_Receive_IT(huart, (uint8_t *)Rx_data, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	4905      	ldr	r1, [pc, #20]	; (8000b58 <HAL_UART_RxCpltCallback+0x4c>)
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f003 fcaf 	bl	80044a8 <HAL_UART_Receive_IT>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40013800 	.word	0x40013800
 8000b58:	200005e0 	.word	0x200005e0
 8000b5c:	20000708 	.word	0x20000708

08000b60 <dbg_clear_packet>:


static void dbg_clear_packet(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	protocol.tail		= false;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <dbg_clear_packet+0x48>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	711a      	strb	r2, [r3, #4]
	protocol.start		= false;
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <dbg_clear_packet+0x48>)
 8000b6c:	7893      	ldrb	r3, [r2, #2]
 8000b6e:	f36f 0341 	bfc	r3, #1, #1
 8000b72:	7093      	strb	r3, [r2, #2]
	protocol.command	= false;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <dbg_clear_packet+0x48>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	715a      	strb	r2, [r3, #5]
	protocol.end		= false;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <dbg_clear_packet+0x48>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
	protocol.complete	= false;
 8000b82:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <dbg_clear_packet+0x48>)
 8000b84:	7893      	ldrb	r3, [r2, #2]
 8000b86:	f36f 0300 	bfc	r3, #0, #1
 8000b8a:	7093      	strb	r3, [r2, #2]

	memset(protocol.parameters, false, UART_RX_BUFFER_SIZE);
 8000b8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b90:	2100      	movs	r1, #0
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <dbg_clear_packet+0x4c>)
 8000b94:	f004 f872 	bl	8004c7c <memset>
	memset(protocol.data_in   , false, UART_RX_BUFFER_SIZE);
 8000b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <dbg_clear_packet+0x50>)
 8000ba0:	f004 f86c 	bl	8004c7c <memset>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000106 	.word	0x20000106
 8000bb0:	20000206 	.word	0x20000206

08000bb4 <dbg_has_arguments>:


static uint16_t dbg_has_arguments(uint8_t *msg)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	uint8_t *p_char = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
	p_char = (uint8_t *) strchr((char *)msg,' ');
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f004 f98c 	bl	8004ee0 <strchr>
 8000bc8:	60f8      	str	r0, [r7, #12]
	if (p_char)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d007      	beq.n	8000be0 <dbg_has_arguments+0x2c>
		return  ascii_to_to_hex(p_char+1, 'd');
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	2164      	movs	r1, #100	; 0x64
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f846 	bl	8000c68 <ascii_to_to_hex>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	e000      	b.n	8000be2 <dbg_has_arguments+0x2e>
	return INVALID_DIGIT_CONVERTION;
 8000be0:	23ff      	movs	r3, #255	; 0xff
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <get_arg_ptr>:


static uint8_t *get_arg_ptr(uint8_t *msg)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	uint8_t *p_char = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
	p_char = (uint8_t *) strchr((char *)msg,' ');
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f004 f971 	bl	8004ee0 <strchr>
 8000bfe:	60f8      	str	r0, [r7, #12]
	if (p_char)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <get_arg_ptr+0x22>
		return  (p_char+1);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	e000      	b.n	8000c0e <get_arg_ptr+0x24>
	return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <hexascii_to_hex>:

static uint8_t hexascii_to_hex( char  hex_char) {
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]

 	if ( hex_char <= 'F' && hex_char >= 'A') return (hex_char -'A')+10;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b46      	cmp	r3, #70	; 0x46
 8000c24:	d806      	bhi.n	8000c34 <hexascii_to_hex+0x1e>
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b40      	cmp	r3, #64	; 0x40
 8000c2a:	d903      	bls.n	8000c34 <hexascii_to_hex+0x1e>
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	3b37      	subs	r3, #55	; 0x37
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	e014      	b.n	8000c5e <hexascii_to_hex+0x48>

 	if ( hex_char <= 'f' && hex_char >= 'a') return (hex_char -'a')+10;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b66      	cmp	r3, #102	; 0x66
 8000c38:	d806      	bhi.n	8000c48 <hexascii_to_hex+0x32>
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b60      	cmp	r3, #96	; 0x60
 8000c3e:	d903      	bls.n	8000c48 <hexascii_to_hex+0x32>
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	3b57      	subs	r3, #87	; 0x57
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	e00a      	b.n	8000c5e <hexascii_to_hex+0x48>

 	if ( hex_char <= '9' && hex_char >= '0') return (hex_char -'0');
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2b39      	cmp	r3, #57	; 0x39
 8000c4c:	d806      	bhi.n	8000c5c <hexascii_to_hex+0x46>
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b2f      	cmp	r3, #47	; 0x2f
 8000c52:	d903      	bls.n	8000c5c <hexascii_to_hex+0x46>
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3b30      	subs	r3, #48	; 0x30
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	e000      	b.n	8000c5e <hexascii_to_hex+0x48>

 	return INVALID_DIGIT_CONVERTION;
 8000c5c:	23ff      	movs	r3, #255	; 0xff
 }
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <ascii_to_to_hex>:


static uint16_t ascii_to_to_hex(uint8_t *stream_pointer, uint8_t convertion_type)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	uint16_t hex_result        = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	81fb      	strh	r3, [r7, #14]
 	uint8_t stream_length      = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	737b      	strb	r3, [r7, #13]
 	uint16_t converted_digit   = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	813b      	strh	r3, [r7, #8]
 	uint16_t convertion_offset = 0x10;
 8000c80:	2310      	movs	r3, #16
 8000c82:	817b      	strh	r3, [r7, #10]

 	if (convertion_type != 'h')
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	2b68      	cmp	r3, #104	; 0x68
 8000c88:	d01c      	beq.n	8000cc4 <ascii_to_to_hex+0x5c>
 		convertion_offset = 0xa;
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	817b      	strh	r3, [r7, #10]

 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 8000c8e:	e019      	b.n	8000cc4 <ascii_to_to_hex+0x5c>

 		converted_digit = ( hexascii_to_hex(*stream_pointer));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffbe 	bl	8000c16 <hexascii_to_hex>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	813b      	strh	r3, [r7, #8]
 		if (INVALID_DIGIT_CONVERTION == converted_digit) {
 8000c9e:	893b      	ldrh	r3, [r7, #8]
 8000ca0:	2bff      	cmp	r3, #255	; 0xff
 8000ca2:	d101      	bne.n	8000ca8 <ascii_to_to_hex+0x40>
			return INVALID_DIGIT_CONVERTION;
 8000ca4:	23ff      	movs	r3, #255	; 0xff
 8000ca6:	e015      	b.n	8000cd4 <ascii_to_to_hex+0x6c>
		}
		hex_result = (hex_result * convertion_offset) + converted_digit;
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	897a      	ldrh	r2, [r7, #10]
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	893b      	ldrh	r3, [r7, #8]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	81fb      	strh	r3, [r7, #14]
		stream_pointer++;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
		stream_length++;
 8000cbe:	7b7b      	ldrb	r3, [r7, #13]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	737b      	strb	r3, [r7, #13]
 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 8000cc4:	7b7b      	ldrb	r3, [r7, #13]
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d003      	beq.n	8000cd2 <ascii_to_to_hex+0x6a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1de      	bne.n	8000c90 <ascii_to_to_hex+0x28>
	}
	return hex_result;
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
  }
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <dbg_setup>:



void dbg_setup(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
	__HAL_UART_CLEAR_OREFLAG(UART_DBG_PORT);
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <dbg_setup+0x74>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <dbg_setup+0x74>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
	__HAL_UART_CLEAR_NEFLAG(UART_DBG_PORT);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <dbg_setup+0x74>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <dbg_setup+0x74>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_UART_CLEAR_FEFLAG(UART_DBG_PORT);
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <dbg_setup+0x74>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <dbg_setup+0x74>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_DISABLE_IT(UART_DBG_PORT, UART_IT_ERR);
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <dbg_setup+0x74>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	695a      	ldr	r2, [r3, #20]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <dbg_setup+0x74>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0201 	bic.w	r2, r2, #1
 8000d32:	615a      	str	r2, [r3, #20]

	HAL_UART_Receive_IT(UART_DBG_PORT,(uint8_t *)Rx_data,1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	4907      	ldr	r1, [pc, #28]	; (8000d54 <dbg_setup+0x78>)
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <dbg_setup+0x74>)
 8000d3a:	f003 fbb5 	bl	80044a8 <HAL_UART_Receive_IT>

	task_pool.limit = MAX_TASK;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <dbg_setup+0x7c>)
 8000d40:	220a      	movs	r2, #10
 8000d42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000708 	.word	0x20000708
 8000d54:	200005e0 	.word	0x200005e0
 8000d58:	200005e4 	.word	0x200005e4

08000d5c <dbg_uart_parser>:
}



void dbg_uart_parser(uint8_t *msg)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	uint8_t task_id = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	75fb      	strb	r3, [r7, #23]
	uint16_t args   = dbg_has_arguments(msg);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff23 	bl	8000bb4 <dbg_has_arguments>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	82bb      	strh	r3, [r7, #20]
	uint8_t cmd_len;
	uint8_t *cmd_str;

	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	75fb      	strb	r3, [r7, #23]
 8000d76:	e050      	b.n	8000e1a <dbg_uart_parser+0xbe>

		cmd_str = task_pool.entry[task_id].command;
 8000d78:	7dfb      	ldrb	r3, [r7, #23]
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	4a2c      	ldr	r2, [pc, #176]	; (8000e30 <dbg_uart_parser+0xd4>)
 8000d7e:	4413      	add	r3, r2
 8000d80:	3304      	adds	r3, #4
 8000d82:	613b      	str	r3, [r7, #16]
		cmd_len = task_pool.entry[task_id].command_len;
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	4a2a      	ldr	r2, [pc, #168]	; (8000e30 <dbg_uart_parser+0xd4>)
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	4413      	add	r3, r2
 8000d8c:	330e      	adds	r3, #14
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	73fb      	strb	r3, [r7, #15]

		if ( !STR_CMP(msg ,cmd_str,cmd_len))
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	461a      	mov	r2, r3
 8000d96:	6939      	ldr	r1, [r7, #16]
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f003 ff55 	bl	8004c48 <memcmp>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <dbg_uart_parser+0x50>
	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	3301      	adds	r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
 8000daa:	e036      	b.n	8000e1a <dbg_uart_parser+0xbe>
			continue;

		if ((task_pool.entry[task_id].args=='p')){
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <dbg_uart_parser+0xd4>)
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	4413      	add	r3, r2
 8000db4:	330f      	adds	r3, #15
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b70      	cmp	r3, #112	; 0x70
 8000dba:	d10b      	bne.n	8000dd4 <dbg_uart_parser+0x78>
			// printf("executing task arg\r\n");
			task_pool.entry[task_id].handlers.ptr_arg(get_arg_ptr(msg));
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <dbg_uart_parser+0xd4>)
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	4413      	add	r3, r2
 8000dc4:	681c      	ldr	r4, [r3, #0]
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff0f 	bl	8000bea <get_arg_ptr>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	47a0      	blx	r4
			return;
 8000dd2:	e02a      	b.n	8000e2a <dbg_uart_parser+0xce>
		}

		if ((args!=INVALID_DIGIT_CONVERTION) && task_pool.entry[task_id].args){
 8000dd4:	8abb      	ldrh	r3, [r7, #20]
 8000dd6:	2bff      	cmp	r3, #255	; 0xff
 8000dd8:	d010      	beq.n	8000dfc <dbg_uart_parser+0xa0>
 8000dda:	7dfb      	ldrb	r3, [r7, #23]
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <dbg_uart_parser+0xd4>)
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	4413      	add	r3, r2
 8000de2:	330f      	adds	r3, #15
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d008      	beq.n	8000dfc <dbg_uart_parser+0xa0>
			task_pool.entry[task_id].handlers.uint_args(args);
 8000dea:	7dfb      	ldrb	r3, [r7, #23]
 8000dec:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <dbg_uart_parser+0xd4>)
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	4413      	add	r3, r2
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	8aba      	ldrh	r2, [r7, #20]
 8000df6:	4610      	mov	r0, r2
 8000df8:	4798      	blx	r3
			return;
 8000dfa:	e016      	b.n	8000e2a <dbg_uart_parser+0xce>
		}


		if (! (task_pool.entry[task_id].args)) {
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <dbg_uart_parser+0xd4>)
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	4413      	add	r3, r2
 8000e04:	330f      	adds	r3, #15
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d10d      	bne.n	8000e28 <dbg_uart_parser+0xcc>
			// printf("executing task NO arg\r\n");

			task_pool.entry[task_id].handlers.void_args();
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <dbg_uart_parser+0xd4>)
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	4413      	add	r3, r2
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4798      	blx	r3
			return;
 8000e18:	e007      	b.n	8000e2a <dbg_uart_parser+0xce>
	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <dbg_uart_parser+0xd4>)
 8000e1c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000e20:	7dfa      	ldrb	r2, [r7, #23]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d3a8      	bcc.n	8000d78 <dbg_uart_parser+0x1c>
 8000e26:	e000      	b.n	8000e2a <dbg_uart_parser+0xce>
		}
		break;
 8000e28:	bf00      	nop
	}
	//printf("task executed\r\n");
}
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}
 8000e30:	200005e4 	.word	0x200005e4

08000e34 <dth11_init>:
#define PAYLOAD_SIZE 40
#define DTH11_PORT GPIOB
#define DTH11_PIN  GPIO_PIN_0

void dth11_init(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	DTH11_PORT->ODR |=DTH11_PIN;
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <dth11_init+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <dth11_init+0x18>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40010c00 	.word	0x40010c00

08000e50 <dth11_read>:
}

void change_pin_dir(uint32_t pin_mode);

void dth11_read(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
/*
Data format: 8bit integral RH data || 8bit decimal RH data || 8bit integral T data || 8bit decimal T
data + 8bit check sum.
*/
	uint16_t local_temp = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	82fb      	strh	r3, [r7, #22]
	uint16_t local_hum  = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	82bb      	strh	r3, [r7, #20]
	uint16_t local_crc  = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	827b      	strh	r3, [r7, #18]

	uint8_t read_bits = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	747b      	strb	r3, [r7, #17]
	uint32_t micro_seconds = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
	uint32_t  timeout_temp = HAL_GetTick() + 20;
 8000e6a:	f001 f841 	bl	8001ef0 <HAL_GetTick>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	3314      	adds	r3, #20
 8000e72:	60bb      	str	r3, [r7, #8]
	uint8_t bit_value = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	743b      	strb	r3, [r7, #16]
	uint8_t temperature;
	uint8_t humidity;
	/*start signal*/
	//printf("reading dth11\r\n");

	DTH11_PORT->CRL = (DTH11_PORT->CRL & 0XFFFFFFF0)| 0X3; /*OUTMODE PP*/
 8000e78:	4b74      	ldr	r3, [pc, #464]	; (800104c <dth11_read+0x1fc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 030f 	bic.w	r3, r3, #15
 8000e80:	4a72      	ldr	r2, [pc, #456]	; (800104c <dth11_read+0x1fc>)
 8000e82:	f043 0303 	orr.w	r3, r3, #3
 8000e86:	6013      	str	r3, [r2, #0]



	DTH11_PORT->ODR &=~DTH11_PIN;
 8000e88:	4b70      	ldr	r3, [pc, #448]	; (800104c <dth11_read+0x1fc>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a6f      	ldr	r2, [pc, #444]	; (800104c <dth11_read+0x1fc>)
 8000e8e:	f023 0301 	bic.w	r3, r3, #1
 8000e92:	60d3      	str	r3, [r2, #12]
	HAL_Delay(20);
 8000e94:	2014      	movs	r0, #20
 8000e96:	f001 f835 	bl	8001f04 <HAL_Delay>

	DTH11_PORT->CRL = (DTH11_PORT->CRL & 0XFFFFFFF0)| 0X4; /*INPUT PP*/
 8000e9a:	4b6c      	ldr	r3, [pc, #432]	; (800104c <dth11_read+0x1fc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f023 030f 	bic.w	r3, r3, #15
 8000ea2:	4a6a      	ldr	r2, [pc, #424]	; (800104c <dth11_read+0x1fc>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6013      	str	r3, [r2, #0]


	/*port as in input mode & wait for sensor reply*/

	timeout_temp = HAL_GetTick() + 10;
 8000eaa:	f001 f821 	bl	8001ef0 <HAL_GetTick>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	330a      	adds	r3, #10
 8000eb2:	60bb      	str	r3, [r7, #8]

	while (DTH11_PORT->IDR & DTH11_PIN){
 8000eb4:	e009      	b.n	8000eca <dth11_read+0x7a>
		if (timeout_temp < HAL_GetTick() ) {
 8000eb6:	f001 f81b 	bl	8001ef0 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d203      	bcs.n	8000eca <dth11_read+0x7a>
			printf("Sensor reply timeout_temp  \r\n");
 8000ec2:	4863      	ldr	r0, [pc, #396]	; (8001050 <dth11_read+0x200>)
 8000ec4:	f003 ff56 	bl	8004d74 <puts>
			return;
 8000ec8:	e0bd      	b.n	8001046 <dth11_read+0x1f6>
	while (DTH11_PORT->IDR & DTH11_PIN){
 8000eca:	4b60      	ldr	r3, [pc, #384]	; (800104c <dth11_read+0x1fc>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1ef      	bne.n	8000eb6 <dth11_read+0x66>
		};
	};
	timeout_temp = HAL_GetTick() +10;
 8000ed6:	f001 f80b 	bl	8001ef0 <HAL_GetTick>
 8000eda:	4603      	mov	r3, r0
 8000edc:	330a      	adds	r3, #10
 8000ede:	60bb      	str	r3, [r7, #8]

	while ((DTH11_PORT->IDR & DTH11_PIN) == 0){
 8000ee0:	e009      	b.n	8000ef6 <dth11_read+0xa6>
		if (timeout_temp < HAL_GetTick() ) {
 8000ee2:	f001 f805 	bl	8001ef0 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d203      	bcs.n	8000ef6 <dth11_read+0xa6>
			printf("Sensor reply timeout_temp2  \r\n");
 8000eee:	4859      	ldr	r0, [pc, #356]	; (8001054 <dth11_read+0x204>)
 8000ef0:	f003 ff40 	bl	8004d74 <puts>
			return;
 8000ef4:	e0a7      	b.n	8001046 <dth11_read+0x1f6>
	while ((DTH11_PORT->IDR & DTH11_PIN) == 0){
 8000ef6:	4b55      	ldr	r3, [pc, #340]	; (800104c <dth11_read+0x1fc>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0ef      	beq.n	8000ee2 <dth11_read+0x92>
		};

	};
	timeout_temp = HAL_GetTick() +10;
 8000f02:	f000 fff5 	bl	8001ef0 <HAL_GetTick>
 8000f06:	4603      	mov	r3, r0
 8000f08:	330a      	adds	r3, #10
 8000f0a:	60bb      	str	r3, [r7, #8]

	while ((DTH11_PORT->IDR & DTH11_PIN)){
 8000f0c:	e009      	b.n	8000f22 <dth11_read+0xd2>
		if (timeout_temp < HAL_GetTick() ) {
 8000f0e:	f000 ffef 	bl	8001ef0 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d203      	bcs.n	8000f22 <dth11_read+0xd2>
			printf("Sensor reply timeout_temp2  \r\n");
 8000f1a:	484e      	ldr	r0, [pc, #312]	; (8001054 <dth11_read+0x204>)
 8000f1c:	f003 ff2a 	bl	8004d74 <puts>
			return;
 8000f20:	e091      	b.n	8001046 <dth11_read+0x1f6>
	while ((DTH11_PORT->IDR & DTH11_PIN)){
 8000f22:	4b4a      	ldr	r3, [pc, #296]	; (800104c <dth11_read+0x1fc>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1ef      	bne.n	8000f0e <dth11_read+0xbe>
		};

	};

	timeout_temp = HAL_GetTick() + 20;
 8000f2e:	f000 ffdf 	bl	8001ef0 <HAL_GetTick>
 8000f32:	4603      	mov	r3, r0
 8000f34:	3314      	adds	r3, #20
 8000f36:	60bb      	str	r3, [r7, #8]

	/*read stage*/

	uint8_t check_sum_sw = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	71fb      	strb	r3, [r7, #7]
	while(read_bits < 40)
 8000f3c:	e05e      	b.n	8000ffc <dth11_read+0x1ac>
	{
		while((DTH11_PORT->IDR &DTH11_PIN) == 0){}; /*50us or bit start */
 8000f3e:	bf00      	nop
 8000f40:	4b42      	ldr	r3, [pc, #264]	; (800104c <dth11_read+0x1fc>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f9      	beq.n	8000f40 <dth11_read+0xf0>
		TIM2->CNT = 0;
 8000f4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim2);
 8000f54:	4840      	ldr	r0, [pc, #256]	; (8001058 <dth11_read+0x208>)
 8000f56:	f002 f922 	bl	800319e <HAL_TIM_Base_Start>
		while((DTH11_PORT->IDR &DTH11_PIN) == 1){} /*reading the actual bit*/
 8000f5a:	bf00      	nop
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	; (800104c <dth11_read+0x1fc>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d0f9      	beq.n	8000f5c <dth11_read+0x10c>
		micro_seconds = TIM2->CNT; /*gets bit time length*/
 8000f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 8000f70:	4b39      	ldr	r3, [pc, #228]	; (8001058 <dth11_read+0x208>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f06f 0201 	mvn.w	r2, #1
 8000f78:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Stop(&htim2);
 8000f7a:	4837      	ldr	r0, [pc, #220]	; (8001058 <dth11_read+0x208>)
 8000f7c:	f002 f932 	bl	80031e4 <HAL_TIM_Base_Stop>

		if (micro_seconds > 40){
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b28      	cmp	r3, #40	; 0x28
 8000f84:	d902      	bls.n	8000f8c <dth11_read+0x13c>
			bit_value= 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	743b      	strb	r3, [r7, #16]
 8000f8a:	e001      	b.n	8000f90 <dth11_read+0x140>
		}else{
			bit_value =0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	743b      	strb	r3, [r7, #16]
		}

		if (read_bits <  16) {
 8000f90:	7c7b      	ldrb	r3, [r7, #17]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	d808      	bhi.n	8000fa8 <dth11_read+0x158>
			local_hum = (local_hum << 1) |  bit_value;
 8000f96:	8abb      	ldrh	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	7c3b      	ldrb	r3, [r7, #16]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	82bb      	strh	r3, [r7, #20]
 8000fa6:	e020      	b.n	8000fea <dth11_read+0x19a>
		}else
		if (read_bits > 15  && read_bits < 32) {
 8000fa8:	7c7b      	ldrb	r3, [r7, #17]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	d90b      	bls.n	8000fc6 <dth11_read+0x176>
 8000fae:	7c7b      	ldrb	r3, [r7, #17]
 8000fb0:	2b1f      	cmp	r3, #31
 8000fb2:	d808      	bhi.n	8000fc6 <dth11_read+0x176>
			local_temp = (local_temp << 1) | bit_value;
 8000fb4:	8afb      	ldrh	r3, [r7, #22]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7c3b      	ldrb	r3, [r7, #16]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	82fb      	strh	r3, [r7, #22]
 8000fc4:	e011      	b.n	8000fea <dth11_read+0x19a>

		}else
		if (read_bits > 31  && read_bits < 40){
 8000fc6:	7c7b      	ldrb	r3, [r7, #17]
 8000fc8:	2b1f      	cmp	r3, #31
 8000fca:	d90b      	bls.n	8000fe4 <dth11_read+0x194>
 8000fcc:	7c7b      	ldrb	r3, [r7, #17]
 8000fce:	2b27      	cmp	r3, #39	; 0x27
 8000fd0:	d808      	bhi.n	8000fe4 <dth11_read+0x194>
			local_crc = (local_crc << 1) |bit_value;
 8000fd2:	8a7b      	ldrh	r3, [r7, #18]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	7c3b      	ldrb	r3, [r7, #16]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	827b      	strh	r3, [r7, #18]
 8000fe2:	e002      	b.n	8000fea <dth11_read+0x19a>
		}else{
			printf("out of range \r\n");
 8000fe4:	481d      	ldr	r0, [pc, #116]	; (800105c <dth11_read+0x20c>)
 8000fe6:	f003 fec5 	bl	8004d74 <puts>
		}
		read_bits++;
 8000fea:	7c7b      	ldrb	r3, [r7, #17]
 8000fec:	3301      	adds	r3, #1
 8000fee:	747b      	strb	r3, [r7, #17]
		if (timeout_temp < HAL_GetTick()) break;
 8000ff0:	f000 ff7e 	bl	8001ef0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d303      	bcc.n	8001004 <dth11_read+0x1b4>
	while(read_bits < 40)
 8000ffc:	7c7b      	ldrb	r3, [r7, #17]
 8000ffe:	2b27      	cmp	r3, #39	; 0x27
 8001000:	d99d      	bls.n	8000f3e <dth11_read+0xee>
 8001002:	e000      	b.n	8001006 <dth11_read+0x1b6>
		if (timeout_temp < HAL_GetTick()) break;
 8001004:	bf00      	nop
	}
	check_sum_sw = ((local_temp&0xff00) >>8) + (local_temp&0x00ff)+
 8001006:	8afb      	ldrh	r3, [r7, #22]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	b29b      	uxth	r3, r3
 800100c:	b2da      	uxtb	r2, r3
 800100e:	8afb      	ldrh	r3, [r7, #22]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4413      	add	r3, r2
 8001014:	b2da      	uxtb	r2, r3
	               ((local_hum &0xff00) >>8) + (local_hum&0x00ff);
 8001016:	8abb      	ldrh	r3, [r7, #20]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
	check_sum_sw = ((local_temp&0xff00) >>8) + (local_temp&0x00ff)+
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4413      	add	r3, r2
 8001020:	b2da      	uxtb	r2, r3
	               ((local_hum &0xff00) >>8) + (local_hum&0x00ff);
 8001022:	8abb      	ldrh	r3, [r7, #20]
 8001024:	b2db      	uxtb	r3, r3
	check_sum_sw = ((local_temp&0xff00) >>8) + (local_temp&0x00ff)+
 8001026:	4413      	add	r3, r2
 8001028:	71fb      	strb	r3, [r7, #7]
#ifdef HUMAN_OUTPUT
	printf("temp %d . %d \r\n",  (local_temp&0xff00) >>8, local_temp&0x00ff);
	printf("hum %d . %d  \r\n",(local_hum & 0xff00)>>8 , local_hum&0x00ff);
	printf("crc %d  %d   \r\n",local_crc, check_sum_sw);
#else
	temperature = (local_temp&0xff00) >>8;
 800102a:	8afb      	ldrh	r3, [r7, #22]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	b29b      	uxth	r3, r3
 8001030:	71bb      	strb	r3, [r7, #6]
	humidity    = (local_hum & 0xff00)>>8;
 8001032:	8abb      	ldrh	r3, [r7, #20]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	b29b      	uxth	r3, r3
 8001038:	717b      	strb	r3, [r7, #5]
	printf("#%d,%d*\r\n",temperature,humidity);
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	797a      	ldrb	r2, [r7, #5]
 800103e:	4619      	mov	r1, r3
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <dth11_read+0x210>)
 8001042:	f003 fe23 	bl	8004c8c <iprintf>
#endif


}
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40010c00 	.word	0x40010c00
 8001050:	08005d14 	.word	0x08005d14
 8001054:	08005d34 	.word	0x08005d34
 8001058:	2000078c 	.word	0x2000078c
 800105c:	08005d54 	.word	0x08005d54
 8001060:	08005d64 	.word	0x08005d64
 8001064:	00000000 	.word	0x00000000

08001068 <servo_set_angle>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define SERVO_ANGLE_0   1000
#define SERVO_PERIOD    (20000 -1)
#define SERVO_TIM_PRESCALER 64
void servo_set_angle(uint16_t angle){
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]

	uint16_t pulse_width = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	81fb      	strh	r3, [r7, #14]

	printf(" Angle to be set is [%d]\r\n",angle );
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	4619      	mov	r1, r3
 800107a:	481f      	ldr	r0, [pc, #124]	; (80010f8 <servo_set_angle+0x90>)
 800107c:	f003 fe06 	bl	8004c8c <iprintf>
	 if ( (angle >  180) || (angle < 0)) {
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	2bb4      	cmp	r3, #180	; 0xb4
 8001084:	d903      	bls.n	800108e <servo_set_angle+0x26>
		 printf("wrong angle value\r\n" );
 8001086:	481d      	ldr	r0, [pc, #116]	; (80010fc <servo_set_angle+0x94>)
 8001088:	f003 fe74 	bl	8004d74 <puts>
		 return;
 800108c:	e029      	b.n	80010e2 <servo_set_angle+0x7a>
	}
	if( angle > 90){
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	2b5a      	cmp	r3, #90	; 0x5a
 8001092:	d91a      	bls.n	80010ca <servo_set_angle+0x62>
		pulse_width = (angle * 8.8) + 413;
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f9b4 	bl	8000404 <__aeabi_i2d>
 800109c:	a312      	add	r3, pc, #72	; (adr r3, 80010e8 <servo_set_angle+0x80>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff fa19 	bl	80004d8 <__aeabi_dmul>
 80010a6:	4603      	mov	r3, r0
 80010a8:	460c      	mov	r4, r1
 80010aa:	4618      	mov	r0, r3
 80010ac:	4621      	mov	r1, r4
 80010ae:	a310      	add	r3, pc, #64	; (adr r3, 80010f0 <servo_set_angle+0x88>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff f85a 	bl	800016c <__adddf3>
 80010b8:	4603      	mov	r3, r0
 80010ba:	460c      	mov	r4, r1
 80010bc:	4618      	mov	r0, r3
 80010be:	4621      	mov	r1, r4
 80010c0:	f7ff fc1c 	bl	80008fc <__aeabi_d2uiz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	81fb      	strh	r3, [r7, #14]
 80010c8:	e007      	b.n	80010da <servo_set_angle+0x72>

	}else{
		pulse_width = (angle * 7) + 413;
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	461a      	mov	r2, r3
 80010ce:	00d2      	lsls	r2, r2, #3
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f203 139d 	addw	r3, r3, #413	; 0x19d
 80010d8:	81fb      	strh	r3, [r7, #14]
	}


	htim4.Instance->CCR2 = pulse_width;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <servo_set_angle+0x98>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	89fa      	ldrh	r2, [r7, #14]
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	40219999 	.word	0x40219999
 80010f0:	00000000 	.word	0x00000000
 80010f4:	4079d000 	.word	0x4079d000
 80010f8:	08005d70 	.word	0x08005d70
 80010fc:	08005d8c 	.word	0x08005d8c
 8001100:	20000688 	.word	0x20000688

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdout,0, _IOLBF, 0);
 800110a:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <main+0xf0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6898      	ldr	r0, [r3, #8]
 8001110:	2300      	movs	r3, #0
 8001112:	2201      	movs	r2, #1
 8001114:	2100      	movs	r1, #0
 8001116:	f003 fe35 	bl	8004d84 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111a:	f000 fe91 	bl	8001e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111e:	f000 f885 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001122:	f000 fa63 	bl	80015ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001126:	f000 fa43 	bl	80015b0 <MX_DMA_Init>
  MX_TIM3_Init();
 800112a:	f000 f8c1 	bl	80012b0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800112e:	f000 fa15 	bl	800155c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001132:	f000 f98f 	bl	8001454 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001136:	f000 f941 	bl	80013bc <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  uint32_t seconds = HAL_GetTick();
 800113a:	f000 fed9 	bl	8001ef0 <HAL_GetTick>
 800113e:	60f8      	str	r0, [r7, #12]
  printf("Program stars!!\r\n" );
 8001140:	482d      	ldr	r0, [pc, #180]	; (80011f8 <main+0xf4>)
 8001142:	f003 fe17 	bl	8004d74 <puts>
  //printf("PWM table size[%d] !!\r\n",sizeof(pwm_value)/2 );

  dbg_setup();
 8001146:	f7ff fdc9 	bl	8000cdc <dbg_setup>
  start_led_sequence();
 800114a:	f000 fd13 	bl	8001b74 <start_led_sequence>
  dth11_init();
 800114e:	f7ff fe71 	bl	8000e34 <dth11_init>
  dbg_register_task(dth11_read,"read",0);
 8001152:	2200      	movs	r2, #0
 8001154:	4929      	ldr	r1, [pc, #164]	; (80011fc <main+0xf8>)
 8001156:	482a      	ldr	r0, [pc, #168]	; (8001200 <main+0xfc>)
 8001158:	f7ff fbf0 	bl	800093c <dbg_register_task>
  dbg_register_task((void*)parse_led_color_input, "set", 'p');
 800115c:	2270      	movs	r2, #112	; 0x70
 800115e:	4929      	ldr	r1, [pc, #164]	; (8001204 <main+0x100>)
 8001160:	4829      	ldr	r0, [pc, #164]	; (8001208 <main+0x104>)
 8001162:	f7ff fbeb 	bl	800093c <dbg_register_task>
  dbg_register_task(stop_led_sequence, "stop",0);
 8001166:	2200      	movs	r2, #0
 8001168:	4928      	ldr	r1, [pc, #160]	; (800120c <main+0x108>)
 800116a:	4829      	ldr	r0, [pc, #164]	; (8001210 <main+0x10c>)
 800116c:	f7ff fbe6 	bl	800093c <dbg_register_task>
  dbg_register_task(start_led_sequence, "start",0);
 8001170:	2200      	movs	r2, #0
 8001172:	4928      	ldr	r1, [pc, #160]	; (8001214 <main+0x110>)
 8001174:	4828      	ldr	r0, [pc, #160]	; (8001218 <main+0x114>)
 8001176:	f7ff fbe1 	bl	800093c <dbg_register_task>
  dbg_register_task(servo_set_angle ,"servo",'1');
 800117a:	2231      	movs	r2, #49	; 0x31
 800117c:	4927      	ldr	r1, [pc, #156]	; (800121c <main+0x118>)
 800117e:	4828      	ldr	r0, [pc, #160]	; (8001220 <main+0x11c>)
 8001180:	f7ff fbdc 	bl	800093c <dbg_register_task>


  servo_set_angle(0);
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff ff6f 	bl	8001068 <servo_set_angle>
  uint8_t switch_colors = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	72bb      	strb	r3, [r7, #10]
  uint8_t led_id[9]= {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	721a      	strb	r2, [r3, #8]
  uint8_t index = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	72fb      	strb	r3, [r7, #11]
  for(index = 0;index< 9;index++) {
 800119c:	2300      	movs	r3, #0
 800119e:	72fb      	strb	r3, [r7, #11]
 80011a0:	e009      	b.n	80011b6 <main+0xb2>
	  led_id[index] = index;
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	f107 0210 	add.w	r2, r7, #16
 80011a8:	4413      	add	r3, r2
 80011aa:	7afa      	ldrb	r2, [r7, #11]
 80011ac:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(index = 0;index< 9;index++) {
 80011b0:	7afb      	ldrb	r3, [r7, #11]
 80011b2:	3301      	adds	r3, #1
 80011b4:	72fb      	strb	r3, [r7, #11]
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d9f2      	bls.n	80011a2 <main+0x9e>
  }

// htim4.Instance->CCR1 = 1000;
 HAL_TIM_Base_Start(&htim4);
 80011bc:	4819      	ldr	r0, [pc, #100]	; (8001224 <main+0x120>)
 80011be:	f001 ffee 	bl	800319e <HAL_TIM_Base_Start>
 HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80011c2:	2104      	movs	r1, #4
 80011c4:	4817      	ldr	r0, [pc, #92]	; (8001224 <main+0x120>)
 80011c6:	f002 f86b 	bl	80032a0 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    dbg_command_scan();
 80011ca:	f7ff fc6d 	bl	8000aa8 <dbg_command_scan>
    if ( HAL_GetTick() >seconds){
 80011ce:	f000 fe8f 	bl	8001ef0 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d2f7      	bcs.n	80011ca <main+0xc6>
	    seconds = HAL_GetTick() + 600;
 80011da:	f000 fe89 	bl	8001ef0 <HAL_GetTick>
 80011de:	4603      	mov	r3, r0
 80011e0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80011e4:	60fb      	str	r3, [r7, #12]
	    GPIOC->ODR ^=GPIO_PIN_13;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <main+0x124>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <main+0x124>)
 80011ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80011f0:	60d3      	str	r3, [r2, #12]
    dbg_command_scan();
 80011f2:	e7ea      	b.n	80011ca <main+0xc6>
 80011f4:	20000554 	.word	0x20000554
 80011f8:	08005da0 	.word	0x08005da0
 80011fc:	08005db4 	.word	0x08005db4
 8001200:	08000e51 	.word	0x08000e51
 8001204:	08005dbc 	.word	0x08005dbc
 8001208:	08001c9d 	.word	0x08001c9d
 800120c:	08005dc0 	.word	0x08005dc0
 8001210:	08001b99 	.word	0x08001b99
 8001214:	08005dc8 	.word	0x08005dc8
 8001218:	08001b75 	.word	0x08001b75
 800121c:	08005dd0 	.word	0x08005dd0
 8001220:	08001069 	.word	0x08001069
 8001224:	20000688 	.word	0x20000688
 8001228:	40011000 	.word	0x40011000

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	; 0x40
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0318 	add.w	r3, r7, #24
 8001236:	2228      	movs	r2, #40	; 0x28
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fd1e 	bl	8004c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001252:	2301      	movs	r3, #1
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001256:	2310      	movs	r3, #16
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800125e:	2300      	movs	r3, #0
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001262:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fb4f 	bl	8002910 <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001278:	f000 fa14 	bl	80016a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	230f      	movs	r3, #15
 800127e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001280:	2302      	movs	r3, #2
 8001282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2102      	movs	r1, #2
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fdba 	bl	8002e10 <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80012a2:	f000 f9ff 	bl	80016a4 <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3740      	adds	r7, #64	; 0x40
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	; 0x38
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	f107 0320 	add.w	r3, r7, #32
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e0:	4b32      	ldr	r3, [pc, #200]	; (80013ac <MX_TIM3_Init+0xfc>)
 80012e2:	4a33      	ldr	r2, [pc, #204]	; (80013b0 <MX_TIM3_Init+0x100>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIMER_PRESCALER;
 80012e6:	4b31      	ldr	r3, [pc, #196]	; (80013ac <MX_TIM3_Init+0xfc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <MX_TIM3_Init+0xfc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMER_PERIOD;
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <MX_TIM3_Init+0x104>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	4a2f      	ldr	r2, [pc, #188]	; (80013b8 <MX_TIM3_Init+0x108>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	3b01      	subs	r3, #1
 8001302:	4a2a      	ldr	r2, [pc, #168]	; (80013ac <MX_TIM3_Init+0xfc>)
 8001304:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <MX_TIM3_Init+0xfc>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_TIM3_Init+0xfc>)
 800130e:	2280      	movs	r2, #128	; 0x80
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001312:	4826      	ldr	r0, [pc, #152]	; (80013ac <MX_TIM3_Init+0xfc>)
 8001314:	f001 ff18 	bl	8003148 <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800131e:	f000 f9c1 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132c:	4619      	mov	r1, r3
 800132e:	481f      	ldr	r0, [pc, #124]	; (80013ac <MX_TIM3_Init+0xfc>)
 8001330:	f002 fb62 	bl	80039f8 <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800133a:	f000 f9b3 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800133e:	481b      	ldr	r0, [pc, #108]	; (80013ac <MX_TIM3_Init+0xfc>)
 8001340:	f001 ff7a 	bl	8003238 <HAL_TIM_PWM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800134a:	f000 f9ab 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4619      	mov	r1, r3
 800135c:	4813      	ldr	r0, [pc, #76]	; (80013ac <MX_TIM3_Init+0xfc>)
 800135e:	f002 ff67 	bl	8004230 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8001368:	f000 f99c 	bl	80016a4 <Error_Handler>
  }
  sConfigOC.OCIdleState  = TIM_OCIDLESTATE_SET;
 800136c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001370:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001376:	2360      	movs	r3, #96	; 0x60
 8001378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001382:	2304      	movs	r3, #4
 8001384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	220c      	movs	r2, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <MX_TIM3_Init+0xfc>)
 800138e:	f002 fa6d 	bl	800386c <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001398:	f000 f984 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <MX_TIM3_Init+0xfc>)
 800139e:	f000 fa37 	bl	8001810 <HAL_TIM_MspPostInit>

}
 80013a2:	bf00      	nop
 80013a4:	3738      	adds	r7, #56	; 0x38
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200006c8 	.word	0x200006c8
 80013b0:	40000400 	.word	0x40000400
 80013b4:	20000308 	.word	0x20000308
 80013b8:	014f8b59 	.word	0x014f8b59

080013bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_TIM2_Init+0x94>)
 80013da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_TIM2_Init+0x94>)
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_TIM2_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_TIM2_Init+0x94>)
 80013ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80013f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_TIM2_Init+0x94>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_TIM2_Init+0x94>)
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001400:	4813      	ldr	r0, [pc, #76]	; (8001450 <MX_TIM2_Init+0x94>)
 8001402:	f001 fea1 	bl	8003148 <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800140c:	f000 f94a 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <MX_TIM2_Init+0x94>)
 800141e:	f002 faeb 	bl	80039f8 <HAL_TIM_ConfigClockSource>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001428:	f000 f93c 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_TIM2_Init+0x94>)
 800143a:	f002 fef9 	bl	8004230 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001444:	f000 f92e 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000078c 	.word	0x2000078c

08001454 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001484:	4b33      	ldr	r3, [pc, #204]	; (8001554 <MX_TIM4_Init+0x100>)
 8001486:	4a34      	ldr	r2, [pc, #208]	; (8001558 <MX_TIM4_Init+0x104>)
 8001488:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = SERVO_TIM_PRESCALER;
 800148a:	4b32      	ldr	r3, [pc, #200]	; (8001554 <MX_TIM4_Init+0x100>)
 800148c:	2240      	movs	r2, #64	; 0x40
 800148e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <MX_TIM4_Init+0x100>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = SERVO_PERIOD;
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <MX_TIM4_Init+0x100>)
 8001498:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800149c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <MX_TIM4_Init+0x100>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <MX_TIM4_Init+0x100>)
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014aa:	482a      	ldr	r0, [pc, #168]	; (8001554 <MX_TIM4_Init+0x100>)
 80014ac:	f001 fe4c 	bl	8003148 <HAL_TIM_Base_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80014b6:	f000 f8f5 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4823      	ldr	r0, [pc, #140]	; (8001554 <MX_TIM4_Init+0x100>)
 80014c8:	f002 fa96 	bl	80039f8 <HAL_TIM_ConfigClockSource>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014d2:	f000 f8e7 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014d6:	481f      	ldr	r0, [pc, #124]	; (8001554 <MX_TIM4_Init+0x100>)
 80014d8:	f001 feae 	bl	8003238 <HAL_TIM_PWM_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014e2:	f000 f8df 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	4619      	mov	r1, r3
 80014f4:	4817      	ldr	r0, [pc, #92]	; (8001554 <MX_TIM4_Init+0x100>)
 80014f6:	f002 fe9b 	bl	8004230 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001500:	f000 f8d0 	bl	80016a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001504:	2360      	movs	r3, #96	; 0x60
 8001506:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = SERVO_ANGLE_0;
 8001508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_TIM4_Init+0x100>)
 800151e:	f002 f9a5 	bl	800386c <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001528:	f000 f8bc 	bl	80016a4 <Error_Handler>
  }

  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2204      	movs	r2, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <MX_TIM4_Init+0x100>)
 8001538:	f002 f998 	bl	800386c <HAL_TIM_PWM_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM4_Init+0xf2>
	{
  	Error_Handler();
 8001542:	f000 f8af 	bl	80016a4 <Error_Handler>
	}
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001546:	4803      	ldr	r0, [pc, #12]	; (8001554 <MX_TIM4_Init+0x100>)
 8001548:	f000 f962 	bl	8001810 <HAL_TIM_MspPostInit>

}
 800154c:	bf00      	nop
 800154e:	3738      	adds	r7, #56	; 0x38
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000688 	.word	0x20000688
 8001558:	40000800 	.word	0x40000800

0800155c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <MX_USART1_UART_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001594:	f002 fea2 	bl	80042dc <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800159e:	f000 f881 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000708 	.word	0x20000708
 80015ac:	40013800 	.word	0x40013800

080015b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_DMA_Init+0x38>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <MX_DMA_Init+0x38>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6153      	str	r3, [r2, #20]
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_DMA_Init+0x38>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	200d      	movs	r0, #13
 80015d4:	f000 fd8f 	bl	80020f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015d8:	200d      	movs	r0, #13
 80015da:	f000 fda8 	bl	800212e <HAL_NVIC_EnableIRQ>

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000

080015ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MX_GPIO_Init+0xac>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a24      	ldr	r2, [pc, #144]	; (8001698 <MX_GPIO_Init+0xac>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <MX_GPIO_Init+0xac>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <MX_GPIO_Init+0xac>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <MX_GPIO_Init+0xac>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_GPIO_Init+0xac>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_GPIO_Init+0xac>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a18      	ldr	r2, [pc, #96]	; (8001698 <MX_GPIO_Init+0xac>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_GPIO_Init+0xac>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(board_led_GPIO_Port, board_led_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800164e:	4813      	ldr	r0, [pc, #76]	; (800169c <MX_GPIO_Init+0xb0>)
 8001650:	f001 f946 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : board_led_Pin */
  GPIO_InitStruct.Pin = board_led_Pin;
 8001654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2302      	movs	r3, #2
 8001664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(board_led_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4619      	mov	r1, r3
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <MX_GPIO_Init+0xb0>)
 800166e:	f000 ffdd 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001672:	2301      	movs	r3, #1
 8001674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_GPIO_Init+0xb4>)
 800168a:	f000 ffcf 	bl	800262c <HAL_GPIO_Init>

}
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40011000 	.word	0x40011000
 80016a0:	40010c00 	.word	0x40010c00

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_MspInit+0x5c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6193      	str	r3, [r2, #24]
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_MspInit+0x5c>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_MspInit+0x5c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	61d3      	str	r3, [r2, #28]
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_MspInit+0x5c>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_MspInit+0x60>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_MspInit+0x60>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d10c      	bne.n	8001740 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	4b35      	ldr	r3, [pc, #212]	; (80017fc <HAL_TIM_Base_MspInit+0xe8>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a34      	ldr	r2, [pc, #208]	; (80017fc <HAL_TIM_Base_MspInit+0xe8>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	61d3      	str	r3, [r2, #28]
 8001732:	4b32      	ldr	r3, [pc, #200]	; (80017fc <HAL_TIM_Base_MspInit+0xe8>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800173e:	e058      	b.n	80017f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <HAL_TIM_Base_MspInit+0xec>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d142      	bne.n	80017d0 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800174a:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <HAL_TIM_Base_MspInit+0xe8>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a2b      	ldr	r2, [pc, #172]	; (80017fc <HAL_TIM_Base_MspInit+0xe8>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <HAL_TIM_Base_MspInit+0xe8>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 8001764:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HAL_TIM_Base_MspInit+0xf4>)
 8001766:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 800176a:	2210      	movs	r2, #16
 800176c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800177a:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 800177c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001780:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 8001784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001788:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 800178c:	2220      	movs	r2, #32
 800178e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001796:	481b      	ldr	r0, [pc, #108]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 8001798:	f000 fce4 	bl	8002164 <HAL_DMA_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_TIM_Base_MspInit+0x92>
      Error_Handler();
 80017a2:	f7ff ff7f 	bl	80016a4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a16      	ldr	r2, [pc, #88]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
 80017ac:	4a15      	ldr	r2, [pc, #84]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a13      	ldr	r2, [pc, #76]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 80017b6:	621a      	str	r2, [r3, #32]
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_TIM_Base_MspInit+0xf0>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	201d      	movs	r0, #29
 80017c4:	f000 fc97 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017c8:	201d      	movs	r0, #29
 80017ca:	f000 fcb0 	bl	800212e <HAL_NVIC_EnableIRQ>
}
 80017ce:	e010      	b.n	80017f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_TIM_Base_MspInit+0xf8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d10b      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_TIM_Base_MspInit+0xe8>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_TIM_Base_MspInit+0xe8>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	61d3      	str	r3, [r2, #28]
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_TIM_Base_MspInit+0xe8>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	40000400 	.word	0x40000400
 8001804:	20000748 	.word	0x20000748
 8001808:	40020030 	.word	0x40020030
 800180c:	40000800 	.word	0x40000800

08001810 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <HAL_TIM_MspPostInit+0x94>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d118      	bne.n	8001862 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <HAL_TIM_MspPostInit+0x98>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <HAL_TIM_MspPostInit+0x98>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <HAL_TIM_MspPostInit+0x98>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001848:	2302      	movs	r3, #2
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2302      	movs	r3, #2
 8001852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	4814      	ldr	r0, [pc, #80]	; (80018ac <HAL_TIM_MspPostInit+0x9c>)
 800185c:	f000 fee6 	bl	800262c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001860:	e01c      	b.n	800189c <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_TIM_MspPostInit+0xa0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d117      	bne.n	800189c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_TIM_MspPostInit+0x98>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_TIM_MspPostInit+0x98>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_TIM_MspPostInit+0x98>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001884:	23c0      	movs	r3, #192	; 0xc0
 8001886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2302      	movs	r3, #2
 800188e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <HAL_TIM_MspPostInit+0x9c>)
 8001898:	f000 fec8 	bl	800262c <HAL_GPIO_Init>
}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40000400 	.word	0x40000400
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010c00 	.word	0x40010c00
 80018b0:	40000800 	.word	0x40000800

080018b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a20      	ldr	r2, [pc, #128]	; (8001950 <HAL_UART_MspInit+0x9c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d139      	bne.n	8001948 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_UART_MspInit+0xa0>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <HAL_UART_MspInit+0xa0>)
 80018da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_UART_MspInit+0xa0>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_UART_MspInit+0xa0>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a18      	ldr	r2, [pc, #96]	; (8001954 <HAL_UART_MspInit+0xa0>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HAL_UART_MspInit+0xa0>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001908:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	4619      	mov	r1, r3
 8001918:	480f      	ldr	r0, [pc, #60]	; (8001958 <HAL_UART_MspInit+0xa4>)
 800191a:	f000 fe87 	bl	800262c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800191e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	4809      	ldr	r0, [pc, #36]	; (8001958 <HAL_UART_MspInit+0xa4>)
 8001934:	f000 fe7a 	bl	800262c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2025      	movs	r0, #37	; 0x25
 800193e:	f000 fbda 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001942:	2025      	movs	r0, #37	; 0x25
 8001944:	f000 fbf3 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40013800 	.word	0x40013800
 8001954:	40021000 	.word	0x40021000
 8001958:	40010800 	.word	0x40010800

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <HardFault_Handler+0x4>

0800196e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <MemManage_Handler+0x4>

08001974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <BusFault_Handler+0x4>

0800197a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <UsageFault_Handler+0x4>

08001980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 fa90 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DMA1_Channel3_IRQHandler+0x10>)
 80019b6:	f000 fd05 	bl	80023c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000748 	.word	0x20000748

080019c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <TIM3_IRQHandler+0x10>)
 80019ca:	f001 fe47 	bl	800365c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200006c8 	.word	0x200006c8

080019d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <USART1_IRQHandler+0x10>)
 80019de:	f002 fdb7 	bl	8004550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000708 	.word	0x20000708

080019ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e00a      	b.n	8001a14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019fe:	f3af 8000 	nop.w
 8001a02:	4601      	mov	r1, r0
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	60ba      	str	r2, [r7, #8]
 8001a0a:	b2ca      	uxtb	r2, r1
 8001a0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf0      	blt.n	80019fe <_read+0x12>
	}

return len;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	UNUSED(file);
	UNUSED(len);
	HAL_UART_Transmit( &huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	4804      	ldr	r0, [pc, #16]	; (8001a50 <_write+0x28>)
 8001a40:	f002 fc99 	bl	8004376 <HAL_UART_Transmit>

	return len;
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000708 	.word	0x20000708

08001a54 <_close>:

int _close(int file)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	return -1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <_isatty>:

int _isatty(int file)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	return 1;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
	return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <_sbrk>:
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <_sbrk+0x50>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x16>
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <_sbrk+0x50>)
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <_sbrk+0x54>)
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <_sbrk+0x50>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <_sbrk+0x50>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	466a      	mov	r2, sp
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d907      	bls.n	8001aee <_sbrk+0x3a>
 8001ade:	f003 f889 	bl	8004bf4 <__errno>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	e006      	b.n	8001afc <_sbrk+0x48>
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <_sbrk+0x50>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <_sbrk+0x50>)
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200005d4 	.word	0x200005d4
 8001b08:	200007d8 	.word	0x200007d8

08001b0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <SystemInit+0x5c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <SystemInit+0x5c>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <SystemInit+0x5c>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4911      	ldr	r1, [pc, #68]	; (8001b68 <SystemInit+0x5c>)
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <SystemInit+0x60>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <SystemInit+0x5c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <SystemInit+0x5c>)
 8001b2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <SystemInit+0x5c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <SystemInit+0x5c>)
 8001b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <SystemInit+0x5c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <SystemInit+0x5c>)
 8001b4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b4e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <SystemInit+0x5c>)
 8001b52:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b56:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <SystemInit+0x64>)
 8001b5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b5e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	f8ff0000 	.word	0xf8ff0000
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <start_led_sequence>:
		0,0,0,0,0,0,0,0
	}
};

void start_led_sequence(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(TIMER_HANDLER_PTR);
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <start_led_sequence+0x1c>)
 8001b7a:	f001 fb10 	bl	800319e <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_DMA(TIMER_HANDLER_PTR, PWM_CHANNEL, (uint32_t *)led_table, sizeof(led_table)/2);
 8001b7e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <start_led_sequence+0x20>)
 8001b84:	210c      	movs	r1, #12
 8001b86:	4802      	ldr	r0, [pc, #8]	; (8001b90 <start_led_sequence+0x1c>)
 8001b88:	f001 fbbc 	bl	8003304 <HAL_TIM_PWM_Start_DMA>
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	200006c8 	.word	0x200006c8
 8001b94:	2000030c 	.word	0x2000030c

08001b98 <stop_led_sequence>:

void stop_led_sequence(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(TIMER_HANDLER_PTR, PWM_CHANNEL);
 8001b9c:	210c      	movs	r1, #12
 8001b9e:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <stop_led_sequence+0x28>)
 8001ba0:	f001 fcb6 	bl	8003510 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_Base_Stop(TIMER_HANDLER_PTR);
 8001ba4:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <stop_led_sequence+0x28>)
 8001ba6:	f001 fb1d 	bl	80031e4 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2102      	movs	r1, #2
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <stop_led_sequence+0x2c>)
 8001bb0:	f000 fe96 	bl	80028e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f000 f9a5 	bl	8001f04 <HAL_Delay>

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200006c8 	.word	0x200006c8
 8001bc4:	40010c00 	.word	0x40010c00

08001bc8 <set_color>:
void set_color(uint32_t color_rgb, uint16_t led_id)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
	if (led_id >= TOTAL_LEDS) return;
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d82e      	bhi.n	8001c38 <set_color+0x70>
	uint8_t red_color   = (color_rgb & 0xff0000)>>16;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0c1b      	lsrs	r3, r3, #16
 8001bde:	73fb      	strb	r3, [r7, #15]
	uint8_t green_color = (color_rgb & 0x00ff00)>>8;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	73bb      	strb	r3, [r7, #14]
	uint8_t blue_color  = (color_rgb & 0x0000ff);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	737b      	strb	r3, [r7, #13]
	set_pwm_entry_color(red_color  , &led_table[led_id][8]);
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	3310      	adds	r3, #16
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <set_color+0x78>)
 8001bf8:	441a      	add	r2, r3
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f820 	bl	8001c44 <set_pwm_entry_color>
	set_pwm_entry_color(green_color, &led_table[led_id][0]);
 8001c04:	887a      	ldrh	r2, [r7, #2]
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <set_color+0x78>)
 8001c10:	441a      	add	r2, r3
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f814 	bl	8001c44 <set_pwm_entry_color>
	set_pwm_entry_color(blue_color , &led_table[led_id][16]);
 8001c1c:	887a      	ldrh	r2, [r7, #2]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	3320      	adds	r3, #32
 8001c28:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <set_color+0x78>)
 8001c2a:	441a      	add	r2, r3
 8001c2c:	7b7b      	ldrb	r3, [r7, #13]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f807 	bl	8001c44 <set_pwm_entry_color>
 8001c36:	e000      	b.n	8001c3a <set_color+0x72>
	if (led_id >= TOTAL_LEDS) return;
 8001c38:	bf00      	nop
}
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000030c 	.word	0x2000030c

08001c44 <set_pwm_entry_color>:

void set_pwm_entry_color(uint8_t color, uint16_t *color_ptr)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
	uint8_t bits;
//w0	memset(color_ptr,0, 8);
	for(bits=0; bits<8;bits++){
 8001c50:	2300      	movs	r3, #0
 8001c52:	73fb      	strb	r3, [r7, #15]
 8001c54:	e019      	b.n	8001c8a <set_pwm_entry_color+0x46>
		if (((color >>(7-bits) & 0x01))){
 8001c56:	79fa      	ldrb	r2, [r7, #7]
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	fa42 f303 	asr.w	r3, r2, r3
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <set_pwm_entry_color+0x34>
			color_ptr[bits] = W1;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	2234      	movs	r2, #52	; 0x34
 8001c74:	801a      	strh	r2, [r3, #0]
 8001c76:	e005      	b.n	8001c84 <set_pwm_entry_color+0x40>
		}else{
			color_ptr[bits] = W0;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	221a      	movs	r2, #26
 8001c82:	801a      	strh	r2, [r3, #0]
	for(bits=0; bits<8;bits++){
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	3301      	adds	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b07      	cmp	r3, #7
 8001c8e:	d9e2      	bls.n	8001c56 <set_pwm_entry_color+0x12>
		}
	}

}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
	...

08001c9c <parse_led_color_input>:
void parse_led_color_input(char *ascii_color, uint32_t *color_out){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]

	stop_led_sequence();
 8001ca6:	f7ff ff77 	bl	8001b98 <stop_led_sequence>
	uint8_t *p_char = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
	uint8_t led_id = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	72fb      	strb	r3, [r7, #11]
	p_char = (uint8_t *) strchr((char *)ascii_color,' ');
 8001cb2:	2120      	movs	r1, #32
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f003 f913 	bl	8004ee0 <strchr>
 8001cba:	60f8      	str	r0, [r7, #12]
	if (p_char == 0)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d015      	beq.n	8001cee <parse_led_color_input+0x52>
		return;
	led_id = (uint8_t)((*ascii_color)-'0');
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3b30      	subs	r3, #48	; 0x30
 8001cc8:	72fb      	strb	r3, [r7, #11]
	printf("Led is [%x] , color [%s]\r\n",led_id ,(char *)(p_char+1));
 8001cca:	7af9      	ldrb	r1, [r7, #11]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <parse_led_color_input+0x5c>)
 8001cd4:	f002 ffda 	bl	8004c8c <iprintf>
	led_set_color_ascii((char *)(p_char+1),led_id,0 );
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	7afa      	ldrb	r2, [r7, #11]
 8001cde:	b291      	uxth	r1, r2
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f80a 	bl	8001cfc <led_set_color_ascii>
	start_led_sequence();
 8001ce8:	f7ff ff44 	bl	8001b74 <start_led_sequence>
 8001cec:	e000      	b.n	8001cf0 <parse_led_color_input+0x54>
		return;
 8001cee:	bf00      	nop
}
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	08005dd8 	.word	0x08005dd8

08001cfc <led_set_color_ascii>:


void led_set_color_ascii(char *ascii_color ,uint16_t led_id, uint32_t *color_out)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	460b      	mov	r3, r1
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	817b      	strh	r3, [r7, #10]
	uint32_t color_out_local;

	color_out_local = ascii_to_to_hex((uint8_t *)ascii_color,'h');
 8001d0a:	2168      	movs	r1, #104	; 0x68
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f83c 	bl	8001d8a <ascii_to_to_hex>
 8001d12:	6178      	str	r0, [r7, #20]
	if (color_out_local == INVALID_DIGIT_CONVERTION) return;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1a:	d00b      	beq.n	8001d34 <led_set_color_ascii+0x38>

	set_color(color_out_local, led_id);
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6978      	ldr	r0, [r7, #20]
 8001d22:	f7ff ff51 	bl	8001bc8 <set_color>
	if (color_out != 0){
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <led_set_color_ascii+0x3a>
		*color_out = color_out_local;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e000      	b.n	8001d36 <led_set_color_ascii+0x3a>
	if (color_out_local == INVALID_DIGIT_CONVERTION) return;
 8001d34:	bf00      	nop
	}
}
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <hexascii_to_hex>:



static uint32_t hexascii_to_hex( char  hex_char) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]

	if ( hex_char <= 'F' && hex_char >= 'A') return (hex_char -'A')+10;
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b46      	cmp	r3, #70	; 0x46
 8001d4a:	d805      	bhi.n	8001d58 <hexascii_to_hex+0x1c>
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b40      	cmp	r3, #64	; 0x40
 8001d50:	d902      	bls.n	8001d58 <hexascii_to_hex+0x1c>
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	3b37      	subs	r3, #55	; 0x37
 8001d56:	e013      	b.n	8001d80 <hexascii_to_hex+0x44>

	if ( hex_char <= 'f' && hex_char >= 'a') return (hex_char -'a')+10;
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2b66      	cmp	r3, #102	; 0x66
 8001d5c:	d805      	bhi.n	8001d6a <hexascii_to_hex+0x2e>
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b60      	cmp	r3, #96	; 0x60
 8001d62:	d902      	bls.n	8001d6a <hexascii_to_hex+0x2e>
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	3b57      	subs	r3, #87	; 0x57
 8001d68:	e00a      	b.n	8001d80 <hexascii_to_hex+0x44>

	if ( hex_char <= '9' && hex_char >= '0') return (hex_char -'0');
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b39      	cmp	r3, #57	; 0x39
 8001d6e:	d805      	bhi.n	8001d7c <hexascii_to_hex+0x40>
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	2b2f      	cmp	r3, #47	; 0x2f
 8001d74:	d902      	bls.n	8001d7c <hexascii_to_hex+0x40>
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	3b30      	subs	r3, #48	; 0x30
 8001d7a:	e001      	b.n	8001d80 <hexascii_to_hex+0x44>

	return INVALID_DIGIT_CONVERTION;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 }
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <ascii_to_to_hex>:

 #define MAX_DIGITS                 6
static uint32_t ascii_to_to_hex(uint8_t *stream_pointer, uint8_t convertion_type)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	70fb      	strb	r3, [r7, #3]
	uint32_t hex_result        = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
	uint8_t stream_length      = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	74fb      	strb	r3, [r7, #19]
	uint16_t converted_digit   = 1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	81fb      	strh	r3, [r7, #14]
	uint16_t convertion_offset = 0x10;
 8001da2:	2310      	movs	r3, #16
 8001da4:	823b      	strh	r3, [r7, #16]

	if (convertion_type != 'h')
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	2b68      	cmp	r3, #104	; 0x68
 8001daa:	d016      	beq.n	8001dda <ascii_to_to_hex+0x50>
		convertion_offset = 0xa;
 8001dac:	230a      	movs	r3, #10
 8001dae:	823b      	strh	r3, [r7, #16]

	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 8001db0:	e013      	b.n	8001dda <ascii_to_to_hex+0x50>

		converted_digit = ( hexascii_to_hex(*stream_pointer));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ffc0 	bl	8001d3c <hexascii_to_hex>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
		if (INVALID_DIGIT_CONVERTION == converted_digit) {
			return  INVALID_DIGIT_CONVERTION;
			break;
		}
		hex_result = (hex_result * convertion_offset) + converted_digit;
 8001dc0:	8a3b      	ldrh	r3, [r7, #16]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	fb02 f203 	mul.w	r2, r2, r3
 8001dc8:	89fb      	ldrh	r3, [r7, #14]
 8001dca:	4413      	add	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
		stream_pointer++;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	607b      	str	r3, [r7, #4]
		stream_length++;
 8001dd4:	7cfb      	ldrb	r3, [r7, #19]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	74fb      	strb	r3, [r7, #19]
	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 8001dda:	7cfb      	ldrb	r3, [r7, #19]
 8001ddc:	2b06      	cmp	r3, #6
 8001dde:	d003      	beq.n	8001de8 <ascii_to_to_hex+0x5e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e4      	bne.n	8001db2 <ascii_to_to_hex+0x28>
	}
	return hex_result;
 8001de8:	697b      	ldr	r3, [r7, #20]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <Reset_Handler>:
 8001df4:	2100      	movs	r1, #0
 8001df6:	e003      	b.n	8001e00 <LoopCopyDataInit>

08001df8 <CopyDataInit>:
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <LoopFillZerobss+0x14>)
 8001dfa:	585b      	ldr	r3, [r3, r1]
 8001dfc:	5043      	str	r3, [r0, r1]
 8001dfe:	3104      	adds	r1, #4

08001e00 <LoopCopyDataInit>:
 8001e00:	480a      	ldr	r0, [pc, #40]	; (8001e2c <LoopFillZerobss+0x18>)
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <LoopFillZerobss+0x1c>)
 8001e04:	1842      	adds	r2, r0, r1
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3f6      	bcc.n	8001df8 <CopyDataInit>
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <LoopFillZerobss+0x20>)
 8001e0c:	e002      	b.n	8001e14 <LoopFillZerobss>

08001e0e <FillZerobss>:
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f842 3b04 	str.w	r3, [r2], #4

08001e14 <LoopFillZerobss>:
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <LoopFillZerobss+0x24>)
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3f9      	bcc.n	8001e0e <FillZerobss>
 8001e1a:	f7ff fe77 	bl	8001b0c <SystemInit>
 8001e1e:	f002 feef 	bl	8004c00 <__libc_init_array>
 8001e22:	f7ff f96f 	bl	8001104 <main>
 8001e26:	4770      	bx	lr
 8001e28:	08005ec0 	.word	0x08005ec0
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	200005b8 	.word	0x200005b8
 8001e34:	200005b8 	.word	0x200005b8
 8001e38:	200007d4 	.word	0x200007d4

08001e3c <ADC1_2_IRQHandler>:
 8001e3c:	e7fe      	b.n	8001e3c <ADC1_2_IRQHandler>
	...

08001e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_Init+0x28>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_Init+0x28>)
 8001e4a:	f043 0310 	orr.w	r3, r3, #16
 8001e4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f945 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fc28 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f95d 	bl	800214a <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f925 	bl	80020f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000308 	.word	0x20000308
 8001ec4:	20000550 	.word	0x20000550
 8001ec8:	2000054c 	.word	0x2000054c

08001ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_IncTick+0x1c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_IncTick+0x20>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <HAL_IncTick+0x20>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	20000550 	.word	0x20000550
 8001eec:	200007cc 	.word	0x200007cc

08001ef0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_GetTick+0x10>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	200007cc 	.word	0x200007cc

08001f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f0c:	f7ff fff0 	bl	8001ef0 <HAL_GetTick>
 8001f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d005      	beq.n	8001f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_Delay+0x40>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f2a:	bf00      	nop
 8001f2c:	f7ff ffe0 	bl	8001ef0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d8f7      	bhi.n	8001f2c <HAL_Delay+0x28>
  {
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000550 	.word	0x20000550

08001f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f64:	4013      	ands	r3, r2
 8001f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <__NVIC_SetPriorityGrouping+0x44>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f003 0307 	and.w	r3, r3, #7
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db0b      	blt.n	8001fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4906      	ldr	r1, [pc, #24]	; (8001fe0 <__NVIC_EnableIRQ+0x34>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	2001      	movs	r0, #1
 8001fce:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff90 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff2d 	bl	8001f48 <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff42 	bl	8001f90 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff90 	bl	8002038 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5f 	bl	8001fe4 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff35 	bl	8001fac <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa2 	bl	800209c <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e043      	b.n	8002202 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <HAL_DMA_Init+0xa8>)
 8002182:	4413      	add	r3, r2
 8002184:	4a22      	ldr	r2, [pc, #136]	; (8002210 <HAL_DMA_Init+0xac>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	009a      	lsls	r2, r3, #2
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_DMA_Init+0xb0>)
 8002196:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	bffdfff8 	.word	0xbffdfff8
 8002210:	cccccccd 	.word	0xcccccccd
 8002214:	40020000 	.word	0x40020000

08002218 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_DMA_Start_IT+0x20>
 8002234:	2302      	movs	r3, #2
 8002236:	e04a      	b.n	80022ce <HAL_DMA_Start_IT+0xb6>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002246:	2b01      	cmp	r3, #1
 8002248:	d13a      	bne.n	80022c0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f9ae 	bl	80025d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 020e 	orr.w	r2, r2, #14
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e00f      	b.n	80022ae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0204 	bic.w	r2, r2, #4
 800229c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 020a 	orr.w	r2, r2, #10
 80022ac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e005      	b.n	80022cc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022c8:	2302      	movs	r3, #2
 80022ca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d005      	beq.n	80022fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e051      	b.n	800239e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 020e 	bic.w	r2, r2, #14
 8002308:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0201 	bic.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <HAL_DMA_Abort_IT+0xd0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d029      	beq.n	8002378 <HAL_DMA_Abort_IT+0xa0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a20      	ldr	r2, [pc, #128]	; (80023ac <HAL_DMA_Abort_IT+0xd4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d022      	beq.n	8002374 <HAL_DMA_Abort_IT+0x9c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_DMA_Abort_IT+0xd8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d01a      	beq.n	800236e <HAL_DMA_Abort_IT+0x96>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_DMA_Abort_IT+0xdc>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d012      	beq.n	8002368 <HAL_DMA_Abort_IT+0x90>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_DMA_Abort_IT+0xe0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00a      	beq.n	8002362 <HAL_DMA_Abort_IT+0x8a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_DMA_Abort_IT+0xe4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d102      	bne.n	800235c <HAL_DMA_Abort_IT+0x84>
 8002356:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800235a:	e00e      	b.n	800237a <HAL_DMA_Abort_IT+0xa2>
 800235c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002360:	e00b      	b.n	800237a <HAL_DMA_Abort_IT+0xa2>
 8002362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002366:	e008      	b.n	800237a <HAL_DMA_Abort_IT+0xa2>
 8002368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236c:	e005      	b.n	800237a <HAL_DMA_Abort_IT+0xa2>
 800236e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002372:	e002      	b.n	800237a <HAL_DMA_Abort_IT+0xa2>
 8002374:	2310      	movs	r3, #16
 8002376:	e000      	b.n	800237a <HAL_DMA_Abort_IT+0xa2>
 8002378:	2301      	movs	r3, #1
 800237a:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <HAL_DMA_Abort_IT+0xe8>)
 800237c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
    } 
  }
  return status;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40020008 	.word	0x40020008
 80023ac:	4002001c 	.word	0x4002001c
 80023b0:	40020030 	.word	0x40020030
 80023b4:	40020044 	.word	0x40020044
 80023b8:	40020058 	.word	0x40020058
 80023bc:	4002006c 	.word	0x4002006c
 80023c0:	40020000 	.word	0x40020000

080023c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	2204      	movs	r2, #4
 80023e2:	409a      	lsls	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d04f      	beq.n	800248c <HAL_DMA_IRQHandler+0xc8>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d04a      	beq.n	800248c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0204 	bic.w	r2, r2, #4
 8002412:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_DMA_IRQHandler+0x1f0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d029      	beq.n	8002472 <HAL_DMA_IRQHandler+0xae>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d022      	beq.n	800246e <HAL_DMA_IRQHandler+0xaa>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a63      	ldr	r2, [pc, #396]	; (80025bc <HAL_DMA_IRQHandler+0x1f8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01a      	beq.n	8002468 <HAL_DMA_IRQHandler+0xa4>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a62      	ldr	r2, [pc, #392]	; (80025c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d012      	beq.n	8002462 <HAL_DMA_IRQHandler+0x9e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a60      	ldr	r2, [pc, #384]	; (80025c4 <HAL_DMA_IRQHandler+0x200>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00a      	beq.n	800245c <HAL_DMA_IRQHandler+0x98>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a5f      	ldr	r2, [pc, #380]	; (80025c8 <HAL_DMA_IRQHandler+0x204>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d102      	bne.n	8002456 <HAL_DMA_IRQHandler+0x92>
 8002450:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002454:	e00e      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 8002456:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800245a:	e00b      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 800245c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002460:	e008      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 8002462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002466:	e005      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 8002468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800246c:	e002      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 800246e:	2340      	movs	r3, #64	; 0x40
 8002470:	e000      	b.n	8002474 <HAL_DMA_IRQHandler+0xb0>
 8002472:	2304      	movs	r3, #4
 8002474:	4a55      	ldr	r2, [pc, #340]	; (80025cc <HAL_DMA_IRQHandler+0x208>)
 8002476:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8094 	beq.w	80025aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800248a:	e08e      	b.n	80025aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	2202      	movs	r2, #2
 8002492:	409a      	lsls	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d056      	beq.n	800254a <HAL_DMA_IRQHandler+0x186>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d051      	beq.n	800254a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 020a 	bic.w	r2, r2, #10
 80024c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a38      	ldr	r2, [pc, #224]	; (80025b4 <HAL_DMA_IRQHandler+0x1f0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d029      	beq.n	800252a <HAL_DMA_IRQHandler+0x166>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a37      	ldr	r2, [pc, #220]	; (80025b8 <HAL_DMA_IRQHandler+0x1f4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <HAL_DMA_IRQHandler+0x162>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a35      	ldr	r2, [pc, #212]	; (80025bc <HAL_DMA_IRQHandler+0x1f8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01a      	beq.n	8002520 <HAL_DMA_IRQHandler+0x15c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a34      	ldr	r2, [pc, #208]	; (80025c0 <HAL_DMA_IRQHandler+0x1fc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d012      	beq.n	800251a <HAL_DMA_IRQHandler+0x156>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_DMA_IRQHandler+0x200>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00a      	beq.n	8002514 <HAL_DMA_IRQHandler+0x150>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a31      	ldr	r2, [pc, #196]	; (80025c8 <HAL_DMA_IRQHandler+0x204>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d102      	bne.n	800250e <HAL_DMA_IRQHandler+0x14a>
 8002508:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800250c:	e00e      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 800250e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002512:	e00b      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 8002514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002518:	e008      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 800251a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800251e:	e005      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 8002520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002524:	e002      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 8002526:	2320      	movs	r3, #32
 8002528:	e000      	b.n	800252c <HAL_DMA_IRQHandler+0x168>
 800252a:	2302      	movs	r3, #2
 800252c:	4a27      	ldr	r2, [pc, #156]	; (80025cc <HAL_DMA_IRQHandler+0x208>)
 800252e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d034      	beq.n	80025aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002548:	e02f      	b.n	80025aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2208      	movs	r2, #8
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d028      	beq.n	80025ac <HAL_DMA_IRQHandler+0x1e8>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d023      	beq.n	80025ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 020e 	bic.w	r2, r2, #14
 8002572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
    }
  }
  return;
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
}
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40020008 	.word	0x40020008
 80025b8:	4002001c 	.word	0x4002001c
 80025bc:	40020030 	.word	0x40020030
 80025c0:	40020044 	.word	0x40020044
 80025c4:	40020058 	.word	0x40020058
 80025c8:	4002006c 	.word	0x4002006c
 80025cc:	40020000 	.word	0x40020000

080025d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d108      	bne.n	8002610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800260e:	e007      	b.n	8002620 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800262c:	b480      	push	{r7}
 800262e:	b08b      	sub	sp, #44	; 0x2c
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263e:	e127      	b.n	8002890 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002640:	2201      	movs	r2, #1
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	429a      	cmp	r2, r3
 800265a:	f040 8116 	bne.w	800288a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b12      	cmp	r3, #18
 8002664:	d034      	beq.n	80026d0 <HAL_GPIO_Init+0xa4>
 8002666:	2b12      	cmp	r3, #18
 8002668:	d80d      	bhi.n	8002686 <HAL_GPIO_Init+0x5a>
 800266a:	2b02      	cmp	r3, #2
 800266c:	d02b      	beq.n	80026c6 <HAL_GPIO_Init+0x9a>
 800266e:	2b02      	cmp	r3, #2
 8002670:	d804      	bhi.n	800267c <HAL_GPIO_Init+0x50>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d031      	beq.n	80026da <HAL_GPIO_Init+0xae>
 8002676:	2b01      	cmp	r3, #1
 8002678:	d01c      	beq.n	80026b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800267a:	e048      	b.n	800270e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800267c:	2b03      	cmp	r3, #3
 800267e:	d043      	beq.n	8002708 <HAL_GPIO_Init+0xdc>
 8002680:	2b11      	cmp	r3, #17
 8002682:	d01b      	beq.n	80026bc <HAL_GPIO_Init+0x90>
          break;
 8002684:	e043      	b.n	800270e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002686:	4a89      	ldr	r2, [pc, #548]	; (80028ac <HAL_GPIO_Init+0x280>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d026      	beq.n	80026da <HAL_GPIO_Init+0xae>
 800268c:	4a87      	ldr	r2, [pc, #540]	; (80028ac <HAL_GPIO_Init+0x280>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d806      	bhi.n	80026a0 <HAL_GPIO_Init+0x74>
 8002692:	4a87      	ldr	r2, [pc, #540]	; (80028b0 <HAL_GPIO_Init+0x284>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d020      	beq.n	80026da <HAL_GPIO_Init+0xae>
 8002698:	4a86      	ldr	r2, [pc, #536]	; (80028b4 <HAL_GPIO_Init+0x288>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d01d      	beq.n	80026da <HAL_GPIO_Init+0xae>
          break;
 800269e:	e036      	b.n	800270e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80026a0:	4a85      	ldr	r2, [pc, #532]	; (80028b8 <HAL_GPIO_Init+0x28c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d019      	beq.n	80026da <HAL_GPIO_Init+0xae>
 80026a6:	4a85      	ldr	r2, [pc, #532]	; (80028bc <HAL_GPIO_Init+0x290>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d016      	beq.n	80026da <HAL_GPIO_Init+0xae>
 80026ac:	4a84      	ldr	r2, [pc, #528]	; (80028c0 <HAL_GPIO_Init+0x294>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0xae>
          break;
 80026b2:	e02c      	b.n	800270e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	623b      	str	r3, [r7, #32]
          break;
 80026ba:	e028      	b.n	800270e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	3304      	adds	r3, #4
 80026c2:	623b      	str	r3, [r7, #32]
          break;
 80026c4:	e023      	b.n	800270e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	3308      	adds	r3, #8
 80026cc:	623b      	str	r3, [r7, #32]
          break;
 80026ce:	e01e      	b.n	800270e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	330c      	adds	r3, #12
 80026d6:	623b      	str	r3, [r7, #32]
          break;
 80026d8:	e019      	b.n	800270e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026e2:	2304      	movs	r3, #4
 80026e4:	623b      	str	r3, [r7, #32]
          break;
 80026e6:	e012      	b.n	800270e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026f0:	2308      	movs	r3, #8
 80026f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	611a      	str	r2, [r3, #16]
          break;
 80026fa:	e008      	b.n	800270e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026fc:	2308      	movs	r3, #8
 80026fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	615a      	str	r2, [r3, #20]
          break;
 8002706:	e002      	b.n	800270e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002708:	2300      	movs	r3, #0
 800270a:	623b      	str	r3, [r7, #32]
          break;
 800270c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2bff      	cmp	r3, #255	; 0xff
 8002712:	d801      	bhi.n	8002718 <HAL_GPIO_Init+0xec>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	e001      	b.n	800271c <HAL_GPIO_Init+0xf0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2bff      	cmp	r3, #255	; 0xff
 8002722:	d802      	bhi.n	800272a <HAL_GPIO_Init+0xfe>
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	e002      	b.n	8002730 <HAL_GPIO_Init+0x104>
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	3b08      	subs	r3, #8
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	210f      	movs	r1, #15
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	401a      	ands	r2, r3
 8002742:	6a39      	ldr	r1, [r7, #32]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	431a      	orrs	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8096 	beq.w	800288a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800275e:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_GPIO_Init+0x298>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	4a58      	ldr	r2, [pc, #352]	; (80028c4 <HAL_GPIO_Init+0x298>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6193      	str	r3, [r2, #24]
 800276a:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <HAL_GPIO_Init+0x298>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002776:	4a54      	ldr	r2, [pc, #336]	; (80028c8 <HAL_GPIO_Init+0x29c>)
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3302      	adds	r3, #2
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4b      	ldr	r2, [pc, #300]	; (80028cc <HAL_GPIO_Init+0x2a0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_GPIO_Init+0x19e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4a      	ldr	r2, [pc, #296]	; (80028d0 <HAL_GPIO_Init+0x2a4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00d      	beq.n	80027c6 <HAL_GPIO_Init+0x19a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a49      	ldr	r2, [pc, #292]	; (80028d4 <HAL_GPIO_Init+0x2a8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d007      	beq.n	80027c2 <HAL_GPIO_Init+0x196>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a48      	ldr	r2, [pc, #288]	; (80028d8 <HAL_GPIO_Init+0x2ac>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_GPIO_Init+0x192>
 80027ba:	2303      	movs	r3, #3
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x1a0>
 80027be:	2304      	movs	r3, #4
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x1a0>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x1a0>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x1a0>
 80027ca:	2300      	movs	r3, #0
 80027cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027dc:	493a      	ldr	r1, [pc, #232]	; (80028c8 <HAL_GPIO_Init+0x29c>)
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027f6:	4b39      	ldr	r3, [pc, #228]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4938      	ldr	r1, [pc, #224]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
 8002802:	e006      	b.n	8002812 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002804:	4b35      	ldr	r3, [pc, #212]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	43db      	mvns	r3, r3
 800280c:	4933      	ldr	r1, [pc, #204]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 800280e:	4013      	ands	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800281e:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	492e      	ldr	r1, [pc, #184]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
 800282a:	e006      	b.n	800283a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800282c:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	43db      	mvns	r3, r3
 8002834:	4929      	ldr	r1, [pc, #164]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 8002836:	4013      	ands	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002846:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	4924      	ldr	r1, [pc, #144]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
 8002852:	e006      	b.n	8002862 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	43db      	mvns	r3, r3
 800285c:	491f      	ldr	r1, [pc, #124]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 800285e:	4013      	ands	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d006      	beq.n	800287c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800286e:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	491a      	ldr	r1, [pc, #104]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	60cb      	str	r3, [r1, #12]
 800287a:	e006      	b.n	800288a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	43db      	mvns	r3, r3
 8002884:	4915      	ldr	r1, [pc, #84]	; (80028dc <HAL_GPIO_Init+0x2b0>)
 8002886:	4013      	ands	r3, r2
 8002888:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	3301      	adds	r3, #1
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	f47f aed0 	bne.w	8002640 <HAL_GPIO_Init+0x14>
  }
}
 80028a0:	bf00      	nop
 80028a2:	372c      	adds	r7, #44	; 0x2c
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	10210000 	.word	0x10210000
 80028b0:	10110000 	.word	0x10110000
 80028b4:	10120000 	.word	0x10120000
 80028b8:	10310000 	.word	0x10310000
 80028bc:	10320000 	.word	0x10320000
 80028c0:	10220000 	.word	0x10220000
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010000 	.word	0x40010000
 80028cc:	40010800 	.word	0x40010800
 80028d0:	40010c00 	.word	0x40010c00
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40011400 	.word	0x40011400
 80028dc:	40010400 	.word	0x40010400

080028e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
 80028ec:	4613      	mov	r3, r2
 80028ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f0:	787b      	ldrb	r3, [r7, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028fc:	e003      	b.n	8002906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	041a      	lsls	r2, r3, #16
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	611a      	str	r2, [r3, #16]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e26c      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8087 	beq.w	8002a3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002930:	4b92      	ldr	r3, [pc, #584]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b04      	cmp	r3, #4
 800293a:	d00c      	beq.n	8002956 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800293c:	4b8f      	ldr	r3, [pc, #572]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d112      	bne.n	800296e <HAL_RCC_OscConfig+0x5e>
 8002948:	4b8c      	ldr	r3, [pc, #560]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002954:	d10b      	bne.n	800296e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002956:	4b89      	ldr	r3, [pc, #548]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d06c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x12c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d168      	bne.n	8002a3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e246      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002976:	d106      	bne.n	8002986 <HAL_RCC_OscConfig+0x76>
 8002978:	4b80      	ldr	r3, [pc, #512]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a7f      	ldr	r2, [pc, #508]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800297e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	e02e      	b.n	80029e4 <HAL_RCC_OscConfig+0xd4>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x98>
 800298e:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7a      	ldr	r2, [pc, #488]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	4b78      	ldr	r3, [pc, #480]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a77      	ldr	r2, [pc, #476]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xd4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0xbc>
 80029b2:	4b72      	ldr	r3, [pc, #456]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a71      	ldr	r2, [pc, #452]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b6f      	ldr	r3, [pc, #444]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6e      	ldr	r2, [pc, #440]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xd4>
 80029cc:	4b6b      	ldr	r3, [pc, #428]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a6a      	ldr	r2, [pc, #424]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b68      	ldr	r3, [pc, #416]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a67      	ldr	r2, [pc, #412]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7ff fa80 	bl	8001ef0 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7ff fa7c 	bl	8001ef0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e1fa      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b5d      	ldr	r3, [pc, #372]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xe4>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7ff fa6c 	bl	8001ef0 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7ff fa68 	bl	8001ef0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1e6      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x10c>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d063      	beq.n	8002b12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a4a:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a56:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x18c>
 8002a62:	4b46      	ldr	r3, [pc, #280]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x176>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1ba      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b3d      	ldr	r3, [pc, #244]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4939      	ldr	r1, [pc, #228]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e03a      	b.n	8002b12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7ff fa21 	bl	8001ef0 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7ff fa1d 	bl	8001ef0 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e19b      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4927      	ldr	r1, [pc, #156]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff fa00 	bl	8001ef0 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af4:	f7ff f9fc 	bl	8001ef0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e17a      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d03a      	beq.n	8002b94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d019      	beq.n	8002b5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <HAL_RCC_OscConfig+0x274>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2c:	f7ff f9e0 	bl	8001ef0 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b34:	f7ff f9dc 	bl	8001ef0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e15a      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_RCC_OscConfig+0x26c>)
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f000 fada 	bl	800310c <RCC_Delay>
 8002b58:	e01c      	b.n	8002b94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7ff f9c6 	bl	8001ef0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b66:	e00f      	b.n	8002b88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b68:	f7ff f9c2 	bl	8001ef0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d908      	bls.n	8002b88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e140      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	42420000 	.word	0x42420000
 8002b84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	4b9e      	ldr	r3, [pc, #632]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e9      	bne.n	8002b68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a6 	beq.w	8002cee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba6:	4b97      	ldr	r3, [pc, #604]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	4b94      	ldr	r3, [pc, #592]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a93      	ldr	r2, [pc, #588]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	61d3      	str	r3, [r2, #28]
 8002bbe:	4b91      	ldr	r3, [pc, #580]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b8e      	ldr	r3, [pc, #568]	; (8002e08 <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d118      	bne.n	8002c0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bda:	4b8b      	ldr	r3, [pc, #556]	; (8002e08 <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a8a      	ldr	r2, [pc, #552]	; (8002e08 <HAL_RCC_OscConfig+0x4f8>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be6:	f7ff f983 	bl	8001ef0 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bee:	f7ff f97f 	bl	8001ef0 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b64      	cmp	r3, #100	; 0x64
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0fd      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	4b81      	ldr	r3, [pc, #516]	; (8002e08 <HAL_RCC_OscConfig+0x4f8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x312>
 8002c14:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	4a7a      	ldr	r2, [pc, #488]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6213      	str	r3, [r2, #32]
 8002c20:	e02d      	b.n	8002c7e <HAL_RCC_OscConfig+0x36e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x334>
 8002c2a:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a75      	ldr	r2, [pc, #468]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	6213      	str	r3, [r2, #32]
 8002c36:	4b73      	ldr	r3, [pc, #460]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a72      	ldr	r2, [pc, #456]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	6213      	str	r3, [r2, #32]
 8002c42:	e01c      	b.n	8002c7e <HAL_RCC_OscConfig+0x36e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d10c      	bne.n	8002c66 <HAL_RCC_OscConfig+0x356>
 8002c4c:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a6c      	ldr	r2, [pc, #432]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	4b6a      	ldr	r3, [pc, #424]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	4a69      	ldr	r2, [pc, #420]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6213      	str	r3, [r2, #32]
 8002c64:	e00b      	b.n	8002c7e <HAL_RCC_OscConfig+0x36e>
 8002c66:	4b67      	ldr	r3, [pc, #412]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	4a66      	ldr	r2, [pc, #408]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	6213      	str	r3, [r2, #32]
 8002c72:	4b64      	ldr	r3, [pc, #400]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4a63      	ldr	r2, [pc, #396]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002c78:	f023 0304 	bic.w	r3, r3, #4
 8002c7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d015      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7ff f933 	bl	8001ef0 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7ff f92f 	bl	8001ef0 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0ab      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	4b57      	ldr	r3, [pc, #348]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0ee      	beq.n	8002c8e <HAL_RCC_OscConfig+0x37e>
 8002cb0:	e014      	b.n	8002cdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7ff f91d 	bl	8001ef0 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7ff f919 	bl	8001ef0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e095      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ee      	bne.n	8002cba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d105      	bne.n	8002cee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce2:	4b48      	ldr	r3, [pc, #288]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a47      	ldr	r2, [pc, #284]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8081 	beq.w	8002dfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cf8:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d061      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d146      	bne.n	8002d9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <HAL_RCC_OscConfig+0x4fc>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7ff f8ed 	bl	8001ef0 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7ff f8e9 	bl	8001ef0 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e067      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2c:	4b35      	ldr	r3, [pc, #212]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f0      	bne.n	8002d1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d108      	bne.n	8002d54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d42:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	492d      	ldr	r1, [pc, #180]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d54:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a19      	ldr	r1, [r3, #32]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	430b      	orrs	r3, r1
 8002d66:	4927      	ldr	r1, [pc, #156]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_RCC_OscConfig+0x4fc>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7ff f8bd 	bl	8001ef0 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7ff f8b9 	bl	8001ef0 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e037      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x46a>
 8002d98:	e02f      	b.n	8002dfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <HAL_RCC_OscConfig+0x4fc>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7ff f8a6 	bl	8001ef0 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da8:	f7ff f8a2 	bl	8001ef0 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e020      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x498>
 8002dc6:	e018      	b.n	8002dfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e013      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	42420060 	.word	0x42420060

08002e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0d0      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e24:	4b6a      	ldr	r3, [pc, #424]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d910      	bls.n	8002e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b67      	ldr	r3, [pc, #412]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 0207 	bic.w	r2, r3, #7
 8002e3a:	4965      	ldr	r1, [pc, #404]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b63      	ldr	r3, [pc, #396]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0b8      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e6c:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a58      	ldr	r2, [pc, #352]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e84:	4b53      	ldr	r3, [pc, #332]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a52      	ldr	r2, [pc, #328]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	494d      	ldr	r1, [pc, #308]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d040      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d115      	bne.n	8002eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e07f      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d107      	bne.n	8002ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ece:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e073      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ede:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e06b      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eee:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f023 0203 	bic.w	r2, r3, #3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4936      	ldr	r1, [pc, #216]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f00:	f7fe fff6 	bl	8001ef0 <HAL_GetTick>
 8002f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f08:	f7fe fff2 	bl	8001ef0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e053      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f003 020c 	and.w	r2, r3, #12
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d1eb      	bne.n	8002f08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d210      	bcs.n	8002f60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 0207 	bic.w	r2, r3, #7
 8002f46:	4922      	ldr	r1, [pc, #136]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e032      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f6c:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4916      	ldr	r1, [pc, #88]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f9e:	f000 f821 	bl	8002fe4 <HAL_RCC_GetSysClockFreq>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	5cd3      	ldrb	r3, [r2, r3]
 8002fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8002fb6:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <HAL_RCC_ClockConfig+0x1cc>)
 8002fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_RCC_ClockConfig+0x1d0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe ff54 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40022000 	.word	0x40022000
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	08005e08 	.word	0x08005e08
 8002fdc:	20000308 	.word	0x20000308
 8002fe0:	2000054c 	.word	0x2000054c

08002fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe4:	b490      	push	{r4, r7}
 8002fe6:	b08a      	sub	sp, #40	; 0x28
 8002fe8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fec:	1d3c      	adds	r4, r7, #4
 8002fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ff4:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b04      	cmp	r3, #4
 800301c:	d002      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x40>
 800301e:	2b08      	cmp	r3, #8
 8003020:	d003      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x46>
 8003022:	e02d      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003024:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003026:	623b      	str	r3, [r7, #32]
      break;
 8003028:	e02d      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	0c9b      	lsrs	r3, r3, #18
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003036:	4413      	add	r3, r2
 8003038:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800303c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d013      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003048:	4b14      	ldr	r3, [pc, #80]	; (800309c <HAL_RCC_GetSysClockFreq+0xb8>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c5b      	lsrs	r3, r3, #17
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003056:	4413      	add	r3, r2
 8003058:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800305c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003062:	fb02 f203 	mul.w	r2, r2, r3
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
 800306e:	e004      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	623b      	str	r3, [r7, #32]
      break;
 800307e:	e002      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003082:	623b      	str	r3, [r7, #32]
      break;
 8003084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003086:	6a3b      	ldr	r3, [r7, #32]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3728      	adds	r7, #40	; 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bc90      	pop	{r4, r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	08005df4 	.word	0x08005df4
 8003098:	08005e04 	.word	0x08005e04
 800309c:	40021000 	.word	0x40021000
 80030a0:	007a1200 	.word	0x007a1200
 80030a4:	003d0900 	.word	0x003d0900

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	20000308 	.word	0x20000308

080030bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c0:	f7ff fff2 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030c4:	4601      	mov	r1, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4a03      	ldr	r2, [pc, #12]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08005e18 	.word	0x08005e18

080030e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030ec:	4601      	mov	r1, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	0adb      	lsrs	r3, r3, #11
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4a03      	ldr	r2, [pc, #12]	; (8003108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	08005e18 	.word	0x08005e18

0800310c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <RCC_Delay+0x34>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <RCC_Delay+0x38>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0a5b      	lsrs	r3, r3, #9
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003128:	bf00      	nop
  }
  while (Delay --);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e5a      	subs	r2, r3, #1
 800312e:	60fa      	str	r2, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f9      	bne.n	8003128 <RCC_Delay+0x1c>
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000308 	.word	0x20000308
 8003144:	10624dd3 	.word	0x10624dd3

08003148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e01d      	b.n	8003196 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe fad0 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f000 fdae 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b06      	cmp	r3, #6
 80031be:	d007      	beq.n	80031d0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6a1a      	ldr	r2, [r3, #32]
 80031fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10f      	bne.n	8003224 <HAL_TIM_Base_Stop+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a1a      	ldr	r2, [r3, #32]
 800320a:	f240 4344 	movw	r3, #1092	; 0x444
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d107      	bne.n	8003224 <HAL_TIM_Base_Stop+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e01d      	b.n	8003286 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f815 	bl	800328e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f000 fd36 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 ff98 	bl	80041e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a10      	ldr	r2, [pc, #64]	; (8003300 <HAL_TIM_PWM_Start+0x60>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d007      	beq.n	80032f4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00

08003304 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d101      	bne.n	8003322 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800331e:	2302      	movs	r3, #2
 8003320:	e0e9      	b.n	80034f6 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d10b      	bne.n	8003346 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <HAL_TIM_PWM_Start_DMA+0x3a>
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e0db      	b.n	80034f6 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	f200 80ad 	bhi.w	80034a8 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <HAL_TIM_PWM_Start_DMA+0x50>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	08003389 	.word	0x08003389
 8003358:	080034a9 	.word	0x080034a9
 800335c:	080034a9 	.word	0x080034a9
 8003360:	080034a9 	.word	0x080034a9
 8003364:	080033d1 	.word	0x080033d1
 8003368:	080034a9 	.word	0x080034a9
 800336c:	080034a9 	.word	0x080034a9
 8003370:	080034a9 	.word	0x080034a9
 8003374:	08003419 	.word	0x08003419
 8003378:	080034a9 	.word	0x080034a9
 800337c:	080034a9 	.word	0x080034a9
 8003380:	080034a9 	.word	0x080034a9
 8003384:	08003461 	.word	0x08003461
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	4a5c      	ldr	r2, [pc, #368]	; (8003500 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800338e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	4a5b      	ldr	r2, [pc, #364]	; (8003504 <HAL_TIM_PWM_Start_DMA+0x200>)
 8003396:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	4a5a      	ldr	r2, [pc, #360]	; (8003508 <HAL_TIM_PWM_Start_DMA+0x204>)
 800339e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3334      	adds	r3, #52	; 0x34
 80033ac:	461a      	mov	r2, r3
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	f7fe ff32 	bl	8002218 <HAL_DMA_Start_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e09b      	b.n	80034f6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033cc:	60da      	str	r2, [r3, #12]
      break;
 80033ce:	e06c      	b.n	80034aa <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	4a4a      	ldr	r2, [pc, #296]	; (8003500 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	4a49      	ldr	r2, [pc, #292]	; (8003504 <HAL_TIM_PWM_Start_DMA+0x200>)
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	4a48      	ldr	r2, [pc, #288]	; (8003508 <HAL_TIM_PWM_Start_DMA+0x204>)
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3338      	adds	r3, #56	; 0x38
 80033f4:	461a      	mov	r2, r3
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	f7fe ff0e 	bl	8002218 <HAL_DMA_Start_IT>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e077      	b.n	80034f6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003414:	60da      	str	r2, [r3, #12]
      break;
 8003416:	e048      	b.n	80034aa <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	4a38      	ldr	r2, [pc, #224]	; (8003500 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	4a37      	ldr	r2, [pc, #220]	; (8003504 <HAL_TIM_PWM_Start_DMA+0x200>)
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	4a36      	ldr	r2, [pc, #216]	; (8003508 <HAL_TIM_PWM_Start_DMA+0x204>)
 800342e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	333c      	adds	r3, #60	; 0x3c
 800343c:	461a      	mov	r2, r3
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	f7fe feea 	bl	8002218 <HAL_DMA_Start_IT>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e053      	b.n	80034f6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345c:	60da      	str	r2, [r3, #12]
      break;
 800345e:	e024      	b.n	80034aa <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	4a26      	ldr	r2, [pc, #152]	; (8003500 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	4a25      	ldr	r2, [pc, #148]	; (8003504 <HAL_TIM_PWM_Start_DMA+0x200>)
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	4a24      	ldr	r2, [pc, #144]	; (8003508 <HAL_TIM_PWM_Start_DMA+0x204>)
 8003476:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3340      	adds	r3, #64	; 0x40
 8003484:	461a      	mov	r2, r3
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	f7fe fec6 	bl	8002218 <HAL_DMA_Start_IT>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e02f      	b.n	80034f6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034a4:	60da      	str	r2, [r3, #12]
      break;
 80034a6:	e000      	b.n	80034aa <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80034a8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2201      	movs	r2, #1
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fe98 	bl	80041e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a13      	ldr	r2, [pc, #76]	; (800350c <HAL_TIM_PWM_Start_DMA+0x208>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d107      	bne.n	80034d2 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b06      	cmp	r3, #6
 80034e2:	d007      	beq.n	80034f4 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	08003c09 	.word	0x08003c09
 8003504:	08003c79 	.word	0x08003c79
 8003508:	08003be5 	.word	0x08003be5
 800350c:	40012c00 	.word	0x40012c00

08003510 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d855      	bhi.n	80035cc <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800355d 	.word	0x0800355d
 800352c:	080035cd 	.word	0x080035cd
 8003530:	080035cd 	.word	0x080035cd
 8003534:	080035cd 	.word	0x080035cd
 8003538:	08003579 	.word	0x08003579
 800353c:	080035cd 	.word	0x080035cd
 8003540:	080035cd 	.word	0x080035cd
 8003544:	080035cd 	.word	0x080035cd
 8003548:	08003595 	.word	0x08003595
 800354c:	080035cd 	.word	0x080035cd
 8003550:	080035cd 	.word	0x080035cd
 8003554:	080035cd 	.word	0x080035cd
 8003558:	080035b1 	.word	0x080035b1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800356a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe feb1 	bl	80022d8 <HAL_DMA_Abort_IT>
      break;
 8003576:	e02a      	b.n	80035ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe fea3 	bl	80022d8 <HAL_DMA_Abort_IT>
      break;
 8003592:	e01c      	b.n	80035ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fe95 	bl	80022d8 <HAL_DMA_Abort_IT>
      break;
 80035ae:	e00e      	b.n	80035ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe fe87 	bl	80022d8 <HAL_DMA_Abort_IT>
      break;
 80035ca:	e000      	b.n	80035ce <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80035cc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2200      	movs	r2, #0
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fe06 	bl	80041e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_TIM_PWM_Stop_DMA+0x148>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d117      	bne.n	8003616 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10f      	bne.n	8003616 <HAL_TIM_PWM_Stop_DMA+0x106>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a1a      	ldr	r2, [r3, #32]
 80035fc:	f240 4344 	movw	r3, #1092	; 0x444
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d107      	bne.n	8003616 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a1a      	ldr	r2, [r3, #32]
 800361c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	f240 4344 	movw	r3, #1092	; 0x444
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d107      	bne.n	8003646 <HAL_TIM_PWM_Stop_DMA+0x136>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40012c00 	.word	0x40012c00

0800365c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b02      	cmp	r3, #2
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0202 	mvn.w	r2, #2
 8003688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fa73 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa66 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fa75 	bl	8003b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0204 	mvn.w	r2, #4
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa49 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa3c 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fa4b 	bl	8003b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b08      	cmp	r3, #8
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b08      	cmp	r3, #8
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0208 	mvn.w	r2, #8
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2204      	movs	r2, #4
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa1f 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa12 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fa21 	bl	8003b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b10      	cmp	r3, #16
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0210 	mvn.w	r2, #16
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2208      	movs	r2, #8
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f9f5 	bl	8003b8a <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9e8 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f9f7 	bl	8003b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0201 	mvn.w	r2, #1
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f9c3 	bl	8003b66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fd5f 	bl	80042ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f9c4 	bl	8003bc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b20      	cmp	r3, #32
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b20      	cmp	r3, #32
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0220 	mvn.w	r2, #32
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fd2a 	bl	80042b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003882:	2302      	movs	r3, #2
 8003884:	e0b4      	b.n	80039f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	f200 809f 	bhi.w	80039dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800389e:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	080038d9 	.word	0x080038d9
 80038a8:	080039dd 	.word	0x080039dd
 80038ac:	080039dd 	.word	0x080039dd
 80038b0:	080039dd 	.word	0x080039dd
 80038b4:	08003919 	.word	0x08003919
 80038b8:	080039dd 	.word	0x080039dd
 80038bc:	080039dd 	.word	0x080039dd
 80038c0:	080039dd 	.word	0x080039dd
 80038c4:	0800395b 	.word	0x0800395b
 80038c8:	080039dd 	.word	0x080039dd
 80038cc:	080039dd 	.word	0x080039dd
 80038d0:	080039dd 	.word	0x080039dd
 80038d4:	0800399b 	.word	0x0800399b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fa64 	bl	8003dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0208 	orr.w	r2, r2, #8
 80038f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0204 	bic.w	r2, r2, #4
 8003902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	619a      	str	r2, [r3, #24]
      break;
 8003916:	e062      	b.n	80039de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 faaa 	bl	8003e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	021a      	lsls	r2, r3, #8
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	619a      	str	r2, [r3, #24]
      break;
 8003958:	e041      	b.n	80039de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 faf3 	bl	8003f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0208 	orr.w	r2, r2, #8
 8003974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0204 	bic.w	r2, r2, #4
 8003984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69d9      	ldr	r1, [r3, #28]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	61da      	str	r2, [r3, #28]
      break;
 8003998:	e021      	b.n	80039de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fb3d 	bl	8004020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69d9      	ldr	r1, [r3, #28]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	021a      	lsls	r2, r3, #8
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	61da      	str	r2, [r3, #28]
      break;
 80039da:	e000      	b.n	80039de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80039dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_TIM_ConfigClockSource+0x18>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e0a6      	b.n	8003b5e <HAL_TIM_ConfigClockSource+0x166>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b40      	cmp	r3, #64	; 0x40
 8003a46:	d067      	beq.n	8003b18 <HAL_TIM_ConfigClockSource+0x120>
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d80b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x6c>
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d073      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0x140>
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d802      	bhi.n	8003a5a <HAL_TIM_ConfigClockSource+0x62>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d06f      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003a58:	e078      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d06c      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0x140>
 8003a5e:	2b30      	cmp	r3, #48	; 0x30
 8003a60:	d06a      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a62:	e073      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a64:	2b70      	cmp	r3, #112	; 0x70
 8003a66:	d00d      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0x8c>
 8003a68:	2b70      	cmp	r3, #112	; 0x70
 8003a6a:	d804      	bhi.n	8003a76 <HAL_TIM_ConfigClockSource+0x7e>
 8003a6c:	2b50      	cmp	r3, #80	; 0x50
 8003a6e:	d033      	beq.n	8003ad8 <HAL_TIM_ConfigClockSource+0xe0>
 8003a70:	2b60      	cmp	r3, #96	; 0x60
 8003a72:	d041      	beq.n	8003af8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a74:	e06a      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d066      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x152>
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a80:	d017      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a82:	e063      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f000 fb89 	bl	80041aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aa6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	609a      	str	r2, [r3, #8]
      break;
 8003ab0:	e04c      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f000 fb72 	bl	80041aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad4:	609a      	str	r2, [r3, #8]
      break;
 8003ad6:	e039      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f000 fae9 	bl	80040bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2150      	movs	r1, #80	; 0x50
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fb40 	bl	8004176 <TIM_ITRx_SetConfig>
      break;
 8003af6:	e029      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	6859      	ldr	r1, [r3, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	461a      	mov	r2, r3
 8003b06:	f000 fb07 	bl	8004118 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2160      	movs	r1, #96	; 0x60
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fb30 	bl	8004176 <TIM_ITRx_SetConfig>
      break;
 8003b16:	e019      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	461a      	mov	r2, r3
 8003b26:	f000 fac9 	bl	80040bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2140      	movs	r1, #64	; 0x40
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fb20 	bl	8004176 <TIM_ITRx_SetConfig>
      break;
 8003b36:	e009      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f000 fb17 	bl	8004176 <TIM_ITRx_SetConfig>
      break;
 8003b48:	e000      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr

08003b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr

08003bae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff ffe9 	bl	8003bd2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d103      	bne.n	8003c30 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	771a      	strb	r2, [r3, #28]
 8003c2e:	e019      	b.n	8003c64 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d103      	bne.n	8003c42 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	771a      	strb	r2, [r3, #28]
 8003c40:	e010      	b.n	8003c64 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d103      	bne.n	8003c54 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2204      	movs	r2, #4
 8003c50:	771a      	strb	r2, [r3, #28]
 8003c52:	e007      	b.n	8003c64 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d102      	bne.n	8003c64 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2208      	movs	r2, #8
 8003c62:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff ff99 	bl	8003b9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d103      	bne.n	8003ca0 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	771a      	strb	r2, [r3, #28]
 8003c9e:	e019      	b.n	8003cd4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d103      	bne.n	8003cb2 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2202      	movs	r2, #2
 8003cae:	771a      	strb	r2, [r3, #28]
 8003cb0:	e010      	b.n	8003cd4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d103      	bne.n	8003cc4 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	771a      	strb	r2, [r3, #28]
 8003cc2:	e007      	b.n	8003cd4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d102      	bne.n	8003cd4 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff ff6a 	bl	8003bae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <TIM_Base_SetConfig+0xb8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00b      	beq.n	8003d18 <TIM_Base_SetConfig+0x30>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d007      	beq.n	8003d18 <TIM_Base_SetConfig+0x30>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <TIM_Base_SetConfig+0xbc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0x30>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <TIM_Base_SetConfig+0xc0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d108      	bne.n	8003d2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <TIM_Base_SetConfig+0xb8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00b      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d007      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <TIM_Base_SetConfig+0xbc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d003      	beq.n	8003d4a <TIM_Base_SetConfig+0x62>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <TIM_Base_SetConfig+0xc0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <TIM_Base_SetConfig+0xb8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	615a      	str	r2, [r3, #20]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800

08003dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 0302 	bic.w	r3, r3, #2
 8003df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <TIM_OC1_SetConfig+0xc8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d10c      	bne.n	8003e22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f023 0308 	bic.w	r3, r3, #8
 8003e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f023 0304 	bic.w	r3, r3, #4
 8003e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <TIM_OC1_SetConfig+0xc8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d111      	bne.n	8003e4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	621a      	str	r2, [r3, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40012c00 	.word	0x40012c00

08003e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0210 	bic.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <TIM_OC2_SetConfig+0xd0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d10d      	bne.n	8003ef4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <TIM_OC2_SetConfig+0xd0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d113      	bne.n	8003f24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	40012c00 	.word	0x40012c00

08003f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0303 	bic.w	r3, r3, #3
 8003f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <TIM_OC3_SetConfig+0xd0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10d      	bne.n	8003fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a14      	ldr	r2, [pc, #80]	; (800401c <TIM_OC3_SetConfig+0xd0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d113      	bne.n	8003ff6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00

08004020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800406a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	031b      	lsls	r3, r3, #12
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <TIM_OC4_SetConfig+0x98>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d109      	bne.n	8004094 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	019b      	lsls	r3, r3, #6
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	40012c00 	.word	0x40012c00

080040bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 030a 	bic.w	r3, r3, #10
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f023 0210 	bic.w	r2, r3, #16
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004142:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	031b      	lsls	r3, r3, #12
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004154:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	621a      	str	r2, [r3, #32]
}
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	f043 0307 	orr.w	r3, r3, #7
 8004198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	609a      	str	r2, [r3, #8]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b087      	sub	sp, #28
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	021a      	lsls	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	609a      	str	r2, [r3, #8]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2201      	movs	r2, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1a      	ldr	r2, [r3, #32]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	43db      	mvns	r3, r3
 800420a:	401a      	ands	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1a      	ldr	r2, [r3, #32]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004244:	2302      	movs	r3, #2
 8004246:	e032      	b.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004280:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4313      	orrs	r3, r2
 800428a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr

080042ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e03f      	b.n	800436e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd fad6 	bl	80018b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fb8d 	bl	8004a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b088      	sub	sp, #32
 800437a:	af02      	add	r7, sp, #8
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b20      	cmp	r3, #32
 8004394:	f040 8083 	bne.w	800449e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Transmit+0x2e>
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e07b      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Transmit+0x40>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e074      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2221      	movs	r2, #33	; 0x21
 80043c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80043cc:	f7fd fd90 	bl	8001ef0 <HAL_GetTick>
 80043d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043de:	e042      	b.n	8004466 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	d122      	bne.n	800443e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	2180      	movs	r1, #128	; 0x80
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f9b2 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e046      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004424:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3302      	adds	r3, #2
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	e017      	b.n	8004466 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	e013      	b.n	8004466 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2200      	movs	r2, #0
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f98f 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e023      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	60ba      	str	r2, [r7, #8]
 800445e:	781a      	ldrb	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1b7      	bne.n	80043e0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2200      	movs	r2, #0
 8004478:	2140      	movs	r1, #64	; 0x40
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f976 	bl	800476c <UART_WaitOnFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e00a      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d140      	bne.n	8004544 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_UART_Receive_IT+0x26>
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e039      	b.n	8004546 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Receive_IT+0x38>
 80044dc:	2302      	movs	r3, #2
 80044de:	e032      	b.n	8004546 <HAL_UART_Receive_IT+0x9e>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2222      	movs	r2, #34	; 0x22
 8004504:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800451e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695a      	ldr	r2, [r3, #20]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0220 	orr.w	r2, r2, #32
 800453e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_UART_IRQHandler+0x52>
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f9ce 	bl	800493c <UART_Receive_IT>
      return;
 80045a0:	e0cc      	b.n	800473c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80ab 	beq.w	8004700 <HAL_UART_IRQHandler+0x1b0>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_UART_IRQHandler+0x70>
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80a0 	beq.w	8004700 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_UART_IRQHandler+0x90>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_UART_IRQHandler+0xb0>
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	f043 0202 	orr.w	r2, r3, #2
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_UART_IRQHandler+0xd0>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	f043 0204 	orr.w	r2, r3, #4
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_UART_IRQHandler+0xf0>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	f043 0208 	orr.w	r2, r3, #8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d078      	beq.n	800473a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_UART_IRQHandler+0x112>
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f96d 	bl	800493c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <HAL_UART_IRQHandler+0x13a>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d031      	beq.n	80046ee <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8b8 	bl	8004800 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d023      	beq.n	80046e6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d013      	beq.n	80046de <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	4a22      	ldr	r2, [pc, #136]	; (8004744 <HAL_UART_IRQHandler+0x1f4>)
 80046bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd fe08 	bl	80022d8 <HAL_DMA_Abort_IT>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d016      	beq.n	80046fc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046d8:	4610      	mov	r0, r2
 80046da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	e00e      	b.n	80046fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f83b 	bl	800475a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	e00a      	b.n	80046fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f837 	bl	800475a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	e006      	b.n	80046fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f833 	bl	800475a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80046fa:	e01e      	b.n	800473a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	bf00      	nop
    return;
 80046fe:	e01c      	b.n	800473a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_UART_IRQHandler+0x1cc>
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8a4 	bl	8004862 <UART_Transmit_IT>
    return;
 800471a:	e00f      	b.n	800473c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_UART_IRQHandler+0x1ec>
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8eb 	bl	800490c <UART_EndTransmit_IT>
    return;
 8004736:	bf00      	nop
 8004738:	e000      	b.n	800473c <HAL_UART_IRQHandler+0x1ec>
    return;
 800473a:	bf00      	nop
  }
}
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	0800483b 	.word	0x0800483b

08004748 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477c:	e02c      	b.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d028      	beq.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <UART_WaitOnFlagUntilTimeout+0x30>
 800478c:	f7fd fbb0 	bl	8001ef0 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	429a      	cmp	r2, r3
 800479a:	d21d      	bcs.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e00f      	b.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d0c3      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004816:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff ff80 	bl	800475a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b21      	cmp	r3, #33	; 0x21
 8004874:	d144      	bne.n	8004900 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487e:	d11a      	bne.n	80048b6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004894:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	1c9a      	adds	r2, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	621a      	str	r2, [r3, #32]
 80048a8:	e00e      	b.n	80048c8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	621a      	str	r2, [r3, #32]
 80048b4:	e008      	b.n	80048c8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	1c59      	adds	r1, r3, #1
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6211      	str	r1, [r2, #32]
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4619      	mov	r1, r3
 80048d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10f      	bne.n	80048fc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	e000      	b.n	8004902 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004900:	2302      	movs	r3, #2
  }
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004922:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ff0b 	bl	8004748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b22      	cmp	r3, #34	; 0x22
 800494e:	d171      	bne.n	8004a34 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004958:	d123      	bne.n	80049a2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10e      	bne.n	8004986 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
 8004984:	e029      	b.n	80049da <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	b29b      	uxth	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28
 80049a0:	e01b      	b.n	80049da <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6858      	ldr	r0, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	1c59      	adds	r1, r3, #1
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6291      	str	r1, [r2, #40]	; 0x28
 80049ba:	b2c2      	uxtb	r2, r0
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e00c      	b.n	80049da <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	1c58      	adds	r0, r3, #1
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	6288      	str	r0, [r1, #40]	; 0x28
 80049d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	4619      	mov	r1, r3
 80049e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d120      	bne.n	8004a30 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0220 	bic.w	r2, r2, #32
 80049fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc f870 	bl	8000b0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	e002      	b.n	8004a36 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e000      	b.n	8004a36 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a34:	2302      	movs	r3, #2
  }
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a7a:	f023 030c 	bic.w	r3, r3, #12
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	430b      	orrs	r3, r1
 8004a86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a52      	ldr	r2, [pc, #328]	; (8004bec <UART_SetConfig+0x1ac>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d14e      	bne.n	8004b46 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004aa8:	f7fe fb1c 	bl	80030e4 <HAL_RCC_GetPCLK2Freq>
 8004aac:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009a      	lsls	r2, r3, #2
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	4a4a      	ldr	r2, [pc, #296]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	0119      	lsls	r1, r3, #4
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009a      	lsls	r2, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ae4:	4b42      	ldr	r3, [pc, #264]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2064      	movs	r0, #100	; 0x64
 8004aee:	fb00 f303 	mul.w	r3, r0, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	3332      	adds	r3, #50	; 0x32
 8004af8:	4a3d      	ldr	r2, [pc, #244]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b04:	4419      	add	r1, r3
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009a      	lsls	r2, r3, #2
 8004b10:	441a      	add	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b1c:	4b34      	ldr	r3, [pc, #208]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	2064      	movs	r0, #100	; 0x64
 8004b26:	fb00 f303 	mul.w	r3, r0, r3
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	3332      	adds	r3, #50	; 0x32
 8004b30:	4a2f      	ldr	r2, [pc, #188]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	f003 020f 	and.w	r2, r3, #15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	440a      	add	r2, r1
 8004b42:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004b44:	e04d      	b.n	8004be2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b46:	f7fe fab9 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 8004b4a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009a      	lsls	r2, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b62:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	0119      	lsls	r1, r3, #4
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	009a      	lsls	r2, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b82:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004b84:	fba3 0302 	umull	r0, r3, r3, r2
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	2064      	movs	r0, #100	; 0x64
 8004b8c:	fb00 f303 	mul.w	r3, r0, r3
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	3332      	adds	r3, #50	; 0x32
 8004b96:	4a16      	ldr	r2, [pc, #88]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004b98:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba2:	4419      	add	r1, r3
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009a      	lsls	r2, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bba:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004bbc:	fba3 0302 	umull	r0, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	2064      	movs	r0, #100	; 0x64
 8004bc4:	fb00 f303 	mul.w	r3, r0, r3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	3332      	adds	r3, #50	; 0x32
 8004bce:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <UART_SetConfig+0x1b0>)
 8004bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	f003 020f 	and.w	r2, r3, #15
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	440a      	add	r2, r1
 8004be0:	609a      	str	r2, [r3, #8]
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40013800 	.word	0x40013800
 8004bf0:	51eb851f 	.word	0x51eb851f

08004bf4 <__errno>:
 8004bf4:	4b01      	ldr	r3, [pc, #4]	; (8004bfc <__errno+0x8>)
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000554 	.word	0x20000554

08004c00 <__libc_init_array>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	2500      	movs	r5, #0
 8004c04:	4e0c      	ldr	r6, [pc, #48]	; (8004c38 <__libc_init_array+0x38>)
 8004c06:	4c0d      	ldr	r4, [pc, #52]	; (8004c3c <__libc_init_array+0x3c>)
 8004c08:	1ba4      	subs	r4, r4, r6
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	42a5      	cmp	r5, r4
 8004c0e:	d109      	bne.n	8004c24 <__libc_init_array+0x24>
 8004c10:	f001 f852 	bl	8005cb8 <_init>
 8004c14:	2500      	movs	r5, #0
 8004c16:	4e0a      	ldr	r6, [pc, #40]	; (8004c40 <__libc_init_array+0x40>)
 8004c18:	4c0a      	ldr	r4, [pc, #40]	; (8004c44 <__libc_init_array+0x44>)
 8004c1a:	1ba4      	subs	r4, r4, r6
 8004c1c:	10a4      	asrs	r4, r4, #2
 8004c1e:	42a5      	cmp	r5, r4
 8004c20:	d105      	bne.n	8004c2e <__libc_init_array+0x2e>
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c28:	4798      	blx	r3
 8004c2a:	3501      	adds	r5, #1
 8004c2c:	e7ee      	b.n	8004c0c <__libc_init_array+0xc>
 8004c2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c32:	4798      	blx	r3
 8004c34:	3501      	adds	r5, #1
 8004c36:	e7f2      	b.n	8004c1e <__libc_init_array+0x1e>
 8004c38:	08005eb8 	.word	0x08005eb8
 8004c3c:	08005eb8 	.word	0x08005eb8
 8004c40:	08005eb8 	.word	0x08005eb8
 8004c44:	08005ebc 	.word	0x08005ebc

08004c48 <memcmp>:
 8004c48:	b530      	push	{r4, r5, lr}
 8004c4a:	2400      	movs	r4, #0
 8004c4c:	42a2      	cmp	r2, r4
 8004c4e:	d101      	bne.n	8004c54 <memcmp+0xc>
 8004c50:	2000      	movs	r0, #0
 8004c52:	e007      	b.n	8004c64 <memcmp+0x1c>
 8004c54:	5d03      	ldrb	r3, [r0, r4]
 8004c56:	3401      	adds	r4, #1
 8004c58:	190d      	adds	r5, r1, r4
 8004c5a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004c5e:	42ab      	cmp	r3, r5
 8004c60:	d0f4      	beq.n	8004c4c <memcmp+0x4>
 8004c62:	1b58      	subs	r0, r3, r5
 8004c64:	bd30      	pop	{r4, r5, pc}

08004c66 <memcpy>:
 8004c66:	b510      	push	{r4, lr}
 8004c68:	1e43      	subs	r3, r0, #1
 8004c6a:	440a      	add	r2, r1
 8004c6c:	4291      	cmp	r1, r2
 8004c6e:	d100      	bne.n	8004c72 <memcpy+0xc>
 8004c70:	bd10      	pop	{r4, pc}
 8004c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c7a:	e7f7      	b.n	8004c6c <memcpy+0x6>

08004c7c <memset>:
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4402      	add	r2, r0
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d100      	bne.n	8004c86 <memset+0xa>
 8004c84:	4770      	bx	lr
 8004c86:	f803 1b01 	strb.w	r1, [r3], #1
 8004c8a:	e7f9      	b.n	8004c80 <memset+0x4>

08004c8c <iprintf>:
 8004c8c:	b40f      	push	{r0, r1, r2, r3}
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <iprintf+0x2c>)
 8004c90:	b513      	push	{r0, r1, r4, lr}
 8004c92:	681c      	ldr	r4, [r3, #0]
 8004c94:	b124      	cbz	r4, 8004ca0 <iprintf+0x14>
 8004c96:	69a3      	ldr	r3, [r4, #24]
 8004c98:	b913      	cbnz	r3, 8004ca0 <iprintf+0x14>
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f000 fade 	bl	800525c <__sinit>
 8004ca0:	ab05      	add	r3, sp, #20
 8004ca2:	9a04      	ldr	r2, [sp, #16]
 8004ca4:	68a1      	ldr	r1, [r4, #8]
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	9301      	str	r3, [sp, #4]
 8004caa:	f000 fc9b 	bl	80055e4 <_vfiprintf_r>
 8004cae:	b002      	add	sp, #8
 8004cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb4:	b004      	add	sp, #16
 8004cb6:	4770      	bx	lr
 8004cb8:	20000554 	.word	0x20000554

08004cbc <_puts_r>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	460e      	mov	r6, r1
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	b118      	cbz	r0, 8004ccc <_puts_r+0x10>
 8004cc4:	6983      	ldr	r3, [r0, #24]
 8004cc6:	b90b      	cbnz	r3, 8004ccc <_puts_r+0x10>
 8004cc8:	f000 fac8 	bl	800525c <__sinit>
 8004ccc:	69ab      	ldr	r3, [r5, #24]
 8004cce:	68ac      	ldr	r4, [r5, #8]
 8004cd0:	b913      	cbnz	r3, 8004cd8 <_puts_r+0x1c>
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f000 fac2 	bl	800525c <__sinit>
 8004cd8:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <_puts_r+0xac>)
 8004cda:	429c      	cmp	r4, r3
 8004cdc:	d117      	bne.n	8004d0e <_puts_r+0x52>
 8004cde:	686c      	ldr	r4, [r5, #4]
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	071b      	lsls	r3, r3, #28
 8004ce4:	d51d      	bpl.n	8004d22 <_puts_r+0x66>
 8004ce6:	6923      	ldr	r3, [r4, #16]
 8004ce8:	b1db      	cbz	r3, 8004d22 <_puts_r+0x66>
 8004cea:	3e01      	subs	r6, #1
 8004cec:	68a3      	ldr	r3, [r4, #8]
 8004cee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	60a3      	str	r3, [r4, #8]
 8004cf6:	b9e9      	cbnz	r1, 8004d34 <_puts_r+0x78>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	da2e      	bge.n	8004d5a <_puts_r+0x9e>
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	210a      	movs	r1, #10
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 f8fb 	bl	8004efc <__swbuf_r>
 8004d06:	3001      	adds	r0, #1
 8004d08:	d011      	beq.n	8004d2e <_puts_r+0x72>
 8004d0a:	200a      	movs	r0, #10
 8004d0c:	e011      	b.n	8004d32 <_puts_r+0x76>
 8004d0e:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <_puts_r+0xb0>)
 8004d10:	429c      	cmp	r4, r3
 8004d12:	d101      	bne.n	8004d18 <_puts_r+0x5c>
 8004d14:	68ac      	ldr	r4, [r5, #8]
 8004d16:	e7e3      	b.n	8004ce0 <_puts_r+0x24>
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <_puts_r+0xb4>)
 8004d1a:	429c      	cmp	r4, r3
 8004d1c:	bf08      	it	eq
 8004d1e:	68ec      	ldreq	r4, [r5, #12]
 8004d20:	e7de      	b.n	8004ce0 <_puts_r+0x24>
 8004d22:	4621      	mov	r1, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 f93b 	bl	8004fa0 <__swsetup_r>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d0dd      	beq.n	8004cea <_puts_r+0x2e>
 8004d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	da04      	bge.n	8004d42 <_puts_r+0x86>
 8004d38:	69a2      	ldr	r2, [r4, #24]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	dc06      	bgt.n	8004d4c <_puts_r+0x90>
 8004d3e:	290a      	cmp	r1, #10
 8004d40:	d004      	beq.n	8004d4c <_puts_r+0x90>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	6022      	str	r2, [r4, #0]
 8004d48:	7019      	strb	r1, [r3, #0]
 8004d4a:	e7cf      	b.n	8004cec <_puts_r+0x30>
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 f8d4 	bl	8004efc <__swbuf_r>
 8004d54:	3001      	adds	r0, #1
 8004d56:	d1c9      	bne.n	8004cec <_puts_r+0x30>
 8004d58:	e7e9      	b.n	8004d2e <_puts_r+0x72>
 8004d5a:	200a      	movs	r0, #10
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	6022      	str	r2, [r4, #0]
 8004d62:	7018      	strb	r0, [r3, #0]
 8004d64:	e7e5      	b.n	8004d32 <_puts_r+0x76>
 8004d66:	bf00      	nop
 8004d68:	08005e44 	.word	0x08005e44
 8004d6c:	08005e64 	.word	0x08005e64
 8004d70:	08005e24 	.word	0x08005e24

08004d74 <puts>:
 8004d74:	4b02      	ldr	r3, [pc, #8]	; (8004d80 <puts+0xc>)
 8004d76:	4601      	mov	r1, r0
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f7ff bf9f 	b.w	8004cbc <_puts_r>
 8004d7e:	bf00      	nop
 8004d80:	20000554 	.word	0x20000554

08004d84 <setvbuf>:
 8004d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d88:	461d      	mov	r5, r3
 8004d8a:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <setvbuf+0x14c>)
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	681e      	ldr	r6, [r3, #0]
 8004d90:	460f      	mov	r7, r1
 8004d92:	4690      	mov	r8, r2
 8004d94:	b126      	cbz	r6, 8004da0 <setvbuf+0x1c>
 8004d96:	69b3      	ldr	r3, [r6, #24]
 8004d98:	b913      	cbnz	r3, 8004da0 <setvbuf+0x1c>
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f000 fa5e 	bl	800525c <__sinit>
 8004da0:	4b4c      	ldr	r3, [pc, #304]	; (8004ed4 <setvbuf+0x150>)
 8004da2:	429c      	cmp	r4, r3
 8004da4:	d152      	bne.n	8004e4c <setvbuf+0xc8>
 8004da6:	6874      	ldr	r4, [r6, #4]
 8004da8:	f1b8 0f02 	cmp.w	r8, #2
 8004dac:	d006      	beq.n	8004dbc <setvbuf+0x38>
 8004dae:	f1b8 0f01 	cmp.w	r8, #1
 8004db2:	f200 8089 	bhi.w	8004ec8 <setvbuf+0x144>
 8004db6:	2d00      	cmp	r5, #0
 8004db8:	f2c0 8086 	blt.w	8004ec8 <setvbuf+0x144>
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	f000 f9e2 	bl	8005188 <_fflush_r>
 8004dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dc6:	b141      	cbz	r1, 8004dda <setvbuf+0x56>
 8004dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dcc:	4299      	cmp	r1, r3
 8004dce:	d002      	beq.n	8004dd6 <setvbuf+0x52>
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	f000 fb39 	bl	8005448 <_free_r>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61a3      	str	r3, [r4, #24]
 8004dde:	6063      	str	r3, [r4, #4]
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	061b      	lsls	r3, r3, #24
 8004de4:	d503      	bpl.n	8004dee <setvbuf+0x6a>
 8004de6:	6921      	ldr	r1, [r4, #16]
 8004de8:	4630      	mov	r0, r6
 8004dea:	f000 fb2d 	bl	8005448 <_free_r>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	f1b8 0f02 	cmp.w	r8, #2
 8004df4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004df8:	f023 0303 	bic.w	r3, r3, #3
 8004dfc:	81a3      	strh	r3, [r4, #12]
 8004dfe:	d05d      	beq.n	8004ebc <setvbuf+0x138>
 8004e00:	ab01      	add	r3, sp, #4
 8004e02:	466a      	mov	r2, sp
 8004e04:	4621      	mov	r1, r4
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 fab2 	bl	8005370 <__swhatbuf_r>
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	4318      	orrs	r0, r3
 8004e10:	81a0      	strh	r0, [r4, #12]
 8004e12:	bb2d      	cbnz	r5, 8004e60 <setvbuf+0xdc>
 8004e14:	9d00      	ldr	r5, [sp, #0]
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 fb0e 	bl	8005438 <malloc>
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d14e      	bne.n	8004ec0 <setvbuf+0x13c>
 8004e22:	f8dd 9000 	ldr.w	r9, [sp]
 8004e26:	45a9      	cmp	r9, r5
 8004e28:	d13c      	bne.n	8004ea4 <setvbuf+0x120>
 8004e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	f043 0302 	orr.w	r3, r3, #2
 8004e34:	81a3      	strh	r3, [r4, #12]
 8004e36:	2300      	movs	r3, #0
 8004e38:	60a3      	str	r3, [r4, #8]
 8004e3a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	6123      	str	r3, [r4, #16]
 8004e42:	2301      	movs	r3, #1
 8004e44:	6163      	str	r3, [r4, #20]
 8004e46:	b003      	add	sp, #12
 8004e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e4c:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <setvbuf+0x154>)
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d101      	bne.n	8004e56 <setvbuf+0xd2>
 8004e52:	68b4      	ldr	r4, [r6, #8]
 8004e54:	e7a8      	b.n	8004da8 <setvbuf+0x24>
 8004e56:	4b21      	ldr	r3, [pc, #132]	; (8004edc <setvbuf+0x158>)
 8004e58:	429c      	cmp	r4, r3
 8004e5a:	bf08      	it	eq
 8004e5c:	68f4      	ldreq	r4, [r6, #12]
 8004e5e:	e7a3      	b.n	8004da8 <setvbuf+0x24>
 8004e60:	2f00      	cmp	r7, #0
 8004e62:	d0d8      	beq.n	8004e16 <setvbuf+0x92>
 8004e64:	69b3      	ldr	r3, [r6, #24]
 8004e66:	b913      	cbnz	r3, 8004e6e <setvbuf+0xea>
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f000 f9f7 	bl	800525c <__sinit>
 8004e6e:	f1b8 0f01 	cmp.w	r8, #1
 8004e72:	bf08      	it	eq
 8004e74:	89a3      	ldrheq	r3, [r4, #12]
 8004e76:	6027      	str	r7, [r4, #0]
 8004e78:	bf04      	itt	eq
 8004e7a:	f043 0301 	orreq.w	r3, r3, #1
 8004e7e:	81a3      	strheq	r3, [r4, #12]
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004e86:	f013 0008 	ands.w	r0, r3, #8
 8004e8a:	d01b      	beq.n	8004ec4 <setvbuf+0x140>
 8004e8c:	f013 0001 	ands.w	r0, r3, #1
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	bf1f      	itttt	ne
 8004e96:	426d      	negne	r5, r5
 8004e98:	60a3      	strne	r3, [r4, #8]
 8004e9a:	61a5      	strne	r5, [r4, #24]
 8004e9c:	4618      	movne	r0, r3
 8004e9e:	bf08      	it	eq
 8004ea0:	60a5      	streq	r5, [r4, #8]
 8004ea2:	e7d0      	b.n	8004e46 <setvbuf+0xc2>
 8004ea4:	4648      	mov	r0, r9
 8004ea6:	f000 fac7 	bl	8005438 <malloc>
 8004eaa:	4607      	mov	r7, r0
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d0bc      	beq.n	8004e2a <setvbuf+0xa6>
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	464d      	mov	r5, r9
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	81a3      	strh	r3, [r4, #12]
 8004eba:	e7d3      	b.n	8004e64 <setvbuf+0xe0>
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e7b6      	b.n	8004e2e <setvbuf+0xaa>
 8004ec0:	46a9      	mov	r9, r5
 8004ec2:	e7f5      	b.n	8004eb0 <setvbuf+0x12c>
 8004ec4:	60a0      	str	r0, [r4, #8]
 8004ec6:	e7be      	b.n	8004e46 <setvbuf+0xc2>
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ecc:	e7bb      	b.n	8004e46 <setvbuf+0xc2>
 8004ece:	bf00      	nop
 8004ed0:	20000554 	.word	0x20000554
 8004ed4:	08005e44 	.word	0x08005e44
 8004ed8:	08005e64 	.word	0x08005e64
 8004edc:	08005e24 	.word	0x08005e24

08004ee0 <strchr>:
 8004ee0:	b2c9      	uxtb	r1, r1
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ee8:	b11a      	cbz	r2, 8004ef2 <strchr+0x12>
 8004eea:	428a      	cmp	r2, r1
 8004eec:	d1f9      	bne.n	8004ee2 <strchr+0x2>
 8004eee:	4618      	mov	r0, r3
 8004ef0:	4770      	bx	lr
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	bf18      	it	ne
 8004ef6:	2300      	movne	r3, #0
 8004ef8:	e7f9      	b.n	8004eee <strchr+0xe>
	...

08004efc <__swbuf_r>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	460e      	mov	r6, r1
 8004f00:	4614      	mov	r4, r2
 8004f02:	4605      	mov	r5, r0
 8004f04:	b118      	cbz	r0, 8004f0e <__swbuf_r+0x12>
 8004f06:	6983      	ldr	r3, [r0, #24]
 8004f08:	b90b      	cbnz	r3, 8004f0e <__swbuf_r+0x12>
 8004f0a:	f000 f9a7 	bl	800525c <__sinit>
 8004f0e:	4b21      	ldr	r3, [pc, #132]	; (8004f94 <__swbuf_r+0x98>)
 8004f10:	429c      	cmp	r4, r3
 8004f12:	d12a      	bne.n	8004f6a <__swbuf_r+0x6e>
 8004f14:	686c      	ldr	r4, [r5, #4]
 8004f16:	69a3      	ldr	r3, [r4, #24]
 8004f18:	60a3      	str	r3, [r4, #8]
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	071a      	lsls	r2, r3, #28
 8004f1e:	d52e      	bpl.n	8004f7e <__swbuf_r+0x82>
 8004f20:	6923      	ldr	r3, [r4, #16]
 8004f22:	b363      	cbz	r3, 8004f7e <__swbuf_r+0x82>
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	6820      	ldr	r0, [r4, #0]
 8004f28:	b2f6      	uxtb	r6, r6
 8004f2a:	1ac0      	subs	r0, r0, r3
 8004f2c:	6963      	ldr	r3, [r4, #20]
 8004f2e:	4637      	mov	r7, r6
 8004f30:	4283      	cmp	r3, r0
 8004f32:	dc04      	bgt.n	8004f3e <__swbuf_r+0x42>
 8004f34:	4621      	mov	r1, r4
 8004f36:	4628      	mov	r0, r5
 8004f38:	f000 f926 	bl	8005188 <_fflush_r>
 8004f3c:	bb28      	cbnz	r0, 8004f8a <__swbuf_r+0x8e>
 8004f3e:	68a3      	ldr	r3, [r4, #8]
 8004f40:	3001      	adds	r0, #1
 8004f42:	3b01      	subs	r3, #1
 8004f44:	60a3      	str	r3, [r4, #8]
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	6022      	str	r2, [r4, #0]
 8004f4c:	701e      	strb	r6, [r3, #0]
 8004f4e:	6963      	ldr	r3, [r4, #20]
 8004f50:	4283      	cmp	r3, r0
 8004f52:	d004      	beq.n	8004f5e <__swbuf_r+0x62>
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	07db      	lsls	r3, r3, #31
 8004f58:	d519      	bpl.n	8004f8e <__swbuf_r+0x92>
 8004f5a:	2e0a      	cmp	r6, #10
 8004f5c:	d117      	bne.n	8004f8e <__swbuf_r+0x92>
 8004f5e:	4621      	mov	r1, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 f911 	bl	8005188 <_fflush_r>
 8004f66:	b190      	cbz	r0, 8004f8e <__swbuf_r+0x92>
 8004f68:	e00f      	b.n	8004f8a <__swbuf_r+0x8e>
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <__swbuf_r+0x9c>)
 8004f6c:	429c      	cmp	r4, r3
 8004f6e:	d101      	bne.n	8004f74 <__swbuf_r+0x78>
 8004f70:	68ac      	ldr	r4, [r5, #8]
 8004f72:	e7d0      	b.n	8004f16 <__swbuf_r+0x1a>
 8004f74:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <__swbuf_r+0xa0>)
 8004f76:	429c      	cmp	r4, r3
 8004f78:	bf08      	it	eq
 8004f7a:	68ec      	ldreq	r4, [r5, #12]
 8004f7c:	e7cb      	b.n	8004f16 <__swbuf_r+0x1a>
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 f80d 	bl	8004fa0 <__swsetup_r>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d0cc      	beq.n	8004f24 <__swbuf_r+0x28>
 8004f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f8e:	4638      	mov	r0, r7
 8004f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f92:	bf00      	nop
 8004f94:	08005e44 	.word	0x08005e44
 8004f98:	08005e64 	.word	0x08005e64
 8004f9c:	08005e24 	.word	0x08005e24

08004fa0 <__swsetup_r>:
 8004fa0:	4b32      	ldr	r3, [pc, #200]	; (800506c <__swsetup_r+0xcc>)
 8004fa2:	b570      	push	{r4, r5, r6, lr}
 8004fa4:	681d      	ldr	r5, [r3, #0]
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	b125      	cbz	r5, 8004fb6 <__swsetup_r+0x16>
 8004fac:	69ab      	ldr	r3, [r5, #24]
 8004fae:	b913      	cbnz	r3, 8004fb6 <__swsetup_r+0x16>
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f000 f953 	bl	800525c <__sinit>
 8004fb6:	4b2e      	ldr	r3, [pc, #184]	; (8005070 <__swsetup_r+0xd0>)
 8004fb8:	429c      	cmp	r4, r3
 8004fba:	d10f      	bne.n	8004fdc <__swsetup_r+0x3c>
 8004fbc:	686c      	ldr	r4, [r5, #4]
 8004fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	0715      	lsls	r5, r2, #28
 8004fc6:	d42c      	bmi.n	8005022 <__swsetup_r+0x82>
 8004fc8:	06d0      	lsls	r0, r2, #27
 8004fca:	d411      	bmi.n	8004ff0 <__swsetup_r+0x50>
 8004fcc:	2209      	movs	r2, #9
 8004fce:	6032      	str	r2, [r6, #0]
 8004fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd4:	81a3      	strh	r3, [r4, #12]
 8004fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fda:	e03e      	b.n	800505a <__swsetup_r+0xba>
 8004fdc:	4b25      	ldr	r3, [pc, #148]	; (8005074 <__swsetup_r+0xd4>)
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	d101      	bne.n	8004fe6 <__swsetup_r+0x46>
 8004fe2:	68ac      	ldr	r4, [r5, #8]
 8004fe4:	e7eb      	b.n	8004fbe <__swsetup_r+0x1e>
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <__swsetup_r+0xd8>)
 8004fe8:	429c      	cmp	r4, r3
 8004fea:	bf08      	it	eq
 8004fec:	68ec      	ldreq	r4, [r5, #12]
 8004fee:	e7e6      	b.n	8004fbe <__swsetup_r+0x1e>
 8004ff0:	0751      	lsls	r1, r2, #29
 8004ff2:	d512      	bpl.n	800501a <__swsetup_r+0x7a>
 8004ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ff6:	b141      	cbz	r1, 800500a <__swsetup_r+0x6a>
 8004ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ffc:	4299      	cmp	r1, r3
 8004ffe:	d002      	beq.n	8005006 <__swsetup_r+0x66>
 8005000:	4630      	mov	r0, r6
 8005002:	f000 fa21 	bl	8005448 <_free_r>
 8005006:	2300      	movs	r3, #0
 8005008:	6363      	str	r3, [r4, #52]	; 0x34
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	2300      	movs	r3, #0
 8005014:	6063      	str	r3, [r4, #4]
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	f043 0308 	orr.w	r3, r3, #8
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	b94b      	cbnz	r3, 800503a <__swsetup_r+0x9a>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800502c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005030:	d003      	beq.n	800503a <__swsetup_r+0x9a>
 8005032:	4621      	mov	r1, r4
 8005034:	4630      	mov	r0, r6
 8005036:	f000 f9bf 	bl	80053b8 <__smakebuf_r>
 800503a:	89a2      	ldrh	r2, [r4, #12]
 800503c:	f012 0301 	ands.w	r3, r2, #1
 8005040:	d00c      	beq.n	800505c <__swsetup_r+0xbc>
 8005042:	2300      	movs	r3, #0
 8005044:	60a3      	str	r3, [r4, #8]
 8005046:	6963      	ldr	r3, [r4, #20]
 8005048:	425b      	negs	r3, r3
 800504a:	61a3      	str	r3, [r4, #24]
 800504c:	6923      	ldr	r3, [r4, #16]
 800504e:	b953      	cbnz	r3, 8005066 <__swsetup_r+0xc6>
 8005050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005054:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005058:	d1ba      	bne.n	8004fd0 <__swsetup_r+0x30>
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	0792      	lsls	r2, r2, #30
 800505e:	bf58      	it	pl
 8005060:	6963      	ldrpl	r3, [r4, #20]
 8005062:	60a3      	str	r3, [r4, #8]
 8005064:	e7f2      	b.n	800504c <__swsetup_r+0xac>
 8005066:	2000      	movs	r0, #0
 8005068:	e7f7      	b.n	800505a <__swsetup_r+0xba>
 800506a:	bf00      	nop
 800506c:	20000554 	.word	0x20000554
 8005070:	08005e44 	.word	0x08005e44
 8005074:	08005e64 	.word	0x08005e64
 8005078:	08005e24 	.word	0x08005e24

0800507c <__sflush_r>:
 800507c:	898a      	ldrh	r2, [r1, #12]
 800507e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005082:	4605      	mov	r5, r0
 8005084:	0710      	lsls	r0, r2, #28
 8005086:	460c      	mov	r4, r1
 8005088:	d458      	bmi.n	800513c <__sflush_r+0xc0>
 800508a:	684b      	ldr	r3, [r1, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	dc05      	bgt.n	800509c <__sflush_r+0x20>
 8005090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	dc02      	bgt.n	800509c <__sflush_r+0x20>
 8005096:	2000      	movs	r0, #0
 8005098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800509c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800509e:	2e00      	cmp	r6, #0
 80050a0:	d0f9      	beq.n	8005096 <__sflush_r+0x1a>
 80050a2:	2300      	movs	r3, #0
 80050a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050a8:	682f      	ldr	r7, [r5, #0]
 80050aa:	6a21      	ldr	r1, [r4, #32]
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	d032      	beq.n	8005116 <__sflush_r+0x9a>
 80050b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	075a      	lsls	r2, r3, #29
 80050b6:	d505      	bpl.n	80050c4 <__sflush_r+0x48>
 80050b8:	6863      	ldr	r3, [r4, #4]
 80050ba:	1ac0      	subs	r0, r0, r3
 80050bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050be:	b10b      	cbz	r3, 80050c4 <__sflush_r+0x48>
 80050c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050c2:	1ac0      	subs	r0, r0, r3
 80050c4:	2300      	movs	r3, #0
 80050c6:	4602      	mov	r2, r0
 80050c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ca:	6a21      	ldr	r1, [r4, #32]
 80050cc:	4628      	mov	r0, r5
 80050ce:	47b0      	blx	r6
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	d106      	bne.n	80050e4 <__sflush_r+0x68>
 80050d6:	6829      	ldr	r1, [r5, #0]
 80050d8:	291d      	cmp	r1, #29
 80050da:	d848      	bhi.n	800516e <__sflush_r+0xf2>
 80050dc:	4a29      	ldr	r2, [pc, #164]	; (8005184 <__sflush_r+0x108>)
 80050de:	40ca      	lsrs	r2, r1
 80050e0:	07d6      	lsls	r6, r2, #31
 80050e2:	d544      	bpl.n	800516e <__sflush_r+0xf2>
 80050e4:	2200      	movs	r2, #0
 80050e6:	6062      	str	r2, [r4, #4]
 80050e8:	6922      	ldr	r2, [r4, #16]
 80050ea:	04d9      	lsls	r1, r3, #19
 80050ec:	6022      	str	r2, [r4, #0]
 80050ee:	d504      	bpl.n	80050fa <__sflush_r+0x7e>
 80050f0:	1c42      	adds	r2, r0, #1
 80050f2:	d101      	bne.n	80050f8 <__sflush_r+0x7c>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	b903      	cbnz	r3, 80050fa <__sflush_r+0x7e>
 80050f8:	6560      	str	r0, [r4, #84]	; 0x54
 80050fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050fc:	602f      	str	r7, [r5, #0]
 80050fe:	2900      	cmp	r1, #0
 8005100:	d0c9      	beq.n	8005096 <__sflush_r+0x1a>
 8005102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005106:	4299      	cmp	r1, r3
 8005108:	d002      	beq.n	8005110 <__sflush_r+0x94>
 800510a:	4628      	mov	r0, r5
 800510c:	f000 f99c 	bl	8005448 <_free_r>
 8005110:	2000      	movs	r0, #0
 8005112:	6360      	str	r0, [r4, #52]	; 0x34
 8005114:	e7c0      	b.n	8005098 <__sflush_r+0x1c>
 8005116:	2301      	movs	r3, #1
 8005118:	4628      	mov	r0, r5
 800511a:	47b0      	blx	r6
 800511c:	1c41      	adds	r1, r0, #1
 800511e:	d1c8      	bne.n	80050b2 <__sflush_r+0x36>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0c5      	beq.n	80050b2 <__sflush_r+0x36>
 8005126:	2b1d      	cmp	r3, #29
 8005128:	d001      	beq.n	800512e <__sflush_r+0xb2>
 800512a:	2b16      	cmp	r3, #22
 800512c:	d101      	bne.n	8005132 <__sflush_r+0xb6>
 800512e:	602f      	str	r7, [r5, #0]
 8005130:	e7b1      	b.n	8005096 <__sflush_r+0x1a>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	e7ad      	b.n	8005098 <__sflush_r+0x1c>
 800513c:	690f      	ldr	r7, [r1, #16]
 800513e:	2f00      	cmp	r7, #0
 8005140:	d0a9      	beq.n	8005096 <__sflush_r+0x1a>
 8005142:	0793      	lsls	r3, r2, #30
 8005144:	bf18      	it	ne
 8005146:	2300      	movne	r3, #0
 8005148:	680e      	ldr	r6, [r1, #0]
 800514a:	bf08      	it	eq
 800514c:	694b      	ldreq	r3, [r1, #20]
 800514e:	eba6 0807 	sub.w	r8, r6, r7
 8005152:	600f      	str	r7, [r1, #0]
 8005154:	608b      	str	r3, [r1, #8]
 8005156:	f1b8 0f00 	cmp.w	r8, #0
 800515a:	dd9c      	ble.n	8005096 <__sflush_r+0x1a>
 800515c:	4643      	mov	r3, r8
 800515e:	463a      	mov	r2, r7
 8005160:	6a21      	ldr	r1, [r4, #32]
 8005162:	4628      	mov	r0, r5
 8005164:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005166:	47b0      	blx	r6
 8005168:	2800      	cmp	r0, #0
 800516a:	dc06      	bgt.n	800517a <__sflush_r+0xfe>
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005172:	81a3      	strh	r3, [r4, #12]
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	e78e      	b.n	8005098 <__sflush_r+0x1c>
 800517a:	4407      	add	r7, r0
 800517c:	eba8 0800 	sub.w	r8, r8, r0
 8005180:	e7e9      	b.n	8005156 <__sflush_r+0xda>
 8005182:	bf00      	nop
 8005184:	20400001 	.word	0x20400001

08005188 <_fflush_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	690b      	ldr	r3, [r1, #16]
 800518c:	4605      	mov	r5, r0
 800518e:	460c      	mov	r4, r1
 8005190:	b1db      	cbz	r3, 80051ca <_fflush_r+0x42>
 8005192:	b118      	cbz	r0, 800519c <_fflush_r+0x14>
 8005194:	6983      	ldr	r3, [r0, #24]
 8005196:	b90b      	cbnz	r3, 800519c <_fflush_r+0x14>
 8005198:	f000 f860 	bl	800525c <__sinit>
 800519c:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <_fflush_r+0x48>)
 800519e:	429c      	cmp	r4, r3
 80051a0:	d109      	bne.n	80051b6 <_fflush_r+0x2e>
 80051a2:	686c      	ldr	r4, [r5, #4]
 80051a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a8:	b17b      	cbz	r3, 80051ca <_fflush_r+0x42>
 80051aa:	4621      	mov	r1, r4
 80051ac:	4628      	mov	r0, r5
 80051ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051b2:	f7ff bf63 	b.w	800507c <__sflush_r>
 80051b6:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <_fflush_r+0x4c>)
 80051b8:	429c      	cmp	r4, r3
 80051ba:	d101      	bne.n	80051c0 <_fflush_r+0x38>
 80051bc:	68ac      	ldr	r4, [r5, #8]
 80051be:	e7f1      	b.n	80051a4 <_fflush_r+0x1c>
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <_fflush_r+0x50>)
 80051c2:	429c      	cmp	r4, r3
 80051c4:	bf08      	it	eq
 80051c6:	68ec      	ldreq	r4, [r5, #12]
 80051c8:	e7ec      	b.n	80051a4 <_fflush_r+0x1c>
 80051ca:	2000      	movs	r0, #0
 80051cc:	bd38      	pop	{r3, r4, r5, pc}
 80051ce:	bf00      	nop
 80051d0:	08005e44 	.word	0x08005e44
 80051d4:	08005e64 	.word	0x08005e64
 80051d8:	08005e24 	.word	0x08005e24

080051dc <std>:
 80051dc:	2300      	movs	r3, #0
 80051de:	b510      	push	{r4, lr}
 80051e0:	4604      	mov	r4, r0
 80051e2:	e9c0 3300 	strd	r3, r3, [r0]
 80051e6:	6083      	str	r3, [r0, #8]
 80051e8:	8181      	strh	r1, [r0, #12]
 80051ea:	6643      	str	r3, [r0, #100]	; 0x64
 80051ec:	81c2      	strh	r2, [r0, #14]
 80051ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051f2:	6183      	str	r3, [r0, #24]
 80051f4:	4619      	mov	r1, r3
 80051f6:	2208      	movs	r2, #8
 80051f8:	305c      	adds	r0, #92	; 0x5c
 80051fa:	f7ff fd3f 	bl	8004c7c <memset>
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <std+0x38>)
 8005200:	6224      	str	r4, [r4, #32]
 8005202:	6263      	str	r3, [r4, #36]	; 0x24
 8005204:	4b04      	ldr	r3, [pc, #16]	; (8005218 <std+0x3c>)
 8005206:	62a3      	str	r3, [r4, #40]	; 0x28
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <std+0x40>)
 800520a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <std+0x44>)
 800520e:	6323      	str	r3, [r4, #48]	; 0x30
 8005210:	bd10      	pop	{r4, pc}
 8005212:	bf00      	nop
 8005214:	08005b41 	.word	0x08005b41
 8005218:	08005b63 	.word	0x08005b63
 800521c:	08005b9b 	.word	0x08005b9b
 8005220:	08005bbf 	.word	0x08005bbf

08005224 <_cleanup_r>:
 8005224:	4901      	ldr	r1, [pc, #4]	; (800522c <_cleanup_r+0x8>)
 8005226:	f000 b885 	b.w	8005334 <_fwalk_reent>
 800522a:	bf00      	nop
 800522c:	08005189 	.word	0x08005189

08005230 <__sfmoreglue>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	2568      	movs	r5, #104	; 0x68
 8005234:	1e4a      	subs	r2, r1, #1
 8005236:	4355      	muls	r5, r2
 8005238:	460e      	mov	r6, r1
 800523a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800523e:	f000 f94f 	bl	80054e0 <_malloc_r>
 8005242:	4604      	mov	r4, r0
 8005244:	b140      	cbz	r0, 8005258 <__sfmoreglue+0x28>
 8005246:	2100      	movs	r1, #0
 8005248:	e9c0 1600 	strd	r1, r6, [r0]
 800524c:	300c      	adds	r0, #12
 800524e:	60a0      	str	r0, [r4, #8]
 8005250:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005254:	f7ff fd12 	bl	8004c7c <memset>
 8005258:	4620      	mov	r0, r4
 800525a:	bd70      	pop	{r4, r5, r6, pc}

0800525c <__sinit>:
 800525c:	6983      	ldr	r3, [r0, #24]
 800525e:	b510      	push	{r4, lr}
 8005260:	4604      	mov	r4, r0
 8005262:	bb33      	cbnz	r3, 80052b2 <__sinit+0x56>
 8005264:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005268:	6503      	str	r3, [r0, #80]	; 0x50
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <__sinit+0x58>)
 800526c:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <__sinit+0x5c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6282      	str	r2, [r0, #40]	; 0x28
 8005272:	4298      	cmp	r0, r3
 8005274:	bf04      	itt	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	6183      	streq	r3, [r0, #24]
 800527a:	f000 f81f 	bl	80052bc <__sfp>
 800527e:	6060      	str	r0, [r4, #4]
 8005280:	4620      	mov	r0, r4
 8005282:	f000 f81b 	bl	80052bc <__sfp>
 8005286:	60a0      	str	r0, [r4, #8]
 8005288:	4620      	mov	r0, r4
 800528a:	f000 f817 	bl	80052bc <__sfp>
 800528e:	2200      	movs	r2, #0
 8005290:	60e0      	str	r0, [r4, #12]
 8005292:	2104      	movs	r1, #4
 8005294:	6860      	ldr	r0, [r4, #4]
 8005296:	f7ff ffa1 	bl	80051dc <std>
 800529a:	2201      	movs	r2, #1
 800529c:	2109      	movs	r1, #9
 800529e:	68a0      	ldr	r0, [r4, #8]
 80052a0:	f7ff ff9c 	bl	80051dc <std>
 80052a4:	2202      	movs	r2, #2
 80052a6:	2112      	movs	r1, #18
 80052a8:	68e0      	ldr	r0, [r4, #12]
 80052aa:	f7ff ff97 	bl	80051dc <std>
 80052ae:	2301      	movs	r3, #1
 80052b0:	61a3      	str	r3, [r4, #24]
 80052b2:	bd10      	pop	{r4, pc}
 80052b4:	08005e20 	.word	0x08005e20
 80052b8:	08005225 	.word	0x08005225

080052bc <__sfp>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	4b1b      	ldr	r3, [pc, #108]	; (800532c <__sfp+0x70>)
 80052c0:	4607      	mov	r7, r0
 80052c2:	681e      	ldr	r6, [r3, #0]
 80052c4:	69b3      	ldr	r3, [r6, #24]
 80052c6:	b913      	cbnz	r3, 80052ce <__sfp+0x12>
 80052c8:	4630      	mov	r0, r6
 80052ca:	f7ff ffc7 	bl	800525c <__sinit>
 80052ce:	3648      	adds	r6, #72	; 0x48
 80052d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	d503      	bpl.n	80052e0 <__sfp+0x24>
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	b133      	cbz	r3, 80052ea <__sfp+0x2e>
 80052dc:	6836      	ldr	r6, [r6, #0]
 80052de:	e7f7      	b.n	80052d0 <__sfp+0x14>
 80052e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052e4:	b16d      	cbz	r5, 8005302 <__sfp+0x46>
 80052e6:	3468      	adds	r4, #104	; 0x68
 80052e8:	e7f4      	b.n	80052d4 <__sfp+0x18>
 80052ea:	2104      	movs	r1, #4
 80052ec:	4638      	mov	r0, r7
 80052ee:	f7ff ff9f 	bl	8005230 <__sfmoreglue>
 80052f2:	6030      	str	r0, [r6, #0]
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d1f1      	bne.n	80052dc <__sfp+0x20>
 80052f8:	230c      	movs	r3, #12
 80052fa:	4604      	mov	r4, r0
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	4620      	mov	r0, r4
 8005300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <__sfp+0x74>)
 8005304:	6665      	str	r5, [r4, #100]	; 0x64
 8005306:	e9c4 5500 	strd	r5, r5, [r4]
 800530a:	60a5      	str	r5, [r4, #8]
 800530c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005310:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005314:	2208      	movs	r2, #8
 8005316:	4629      	mov	r1, r5
 8005318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800531c:	f7ff fcae 	bl	8004c7c <memset>
 8005320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005328:	e7e9      	b.n	80052fe <__sfp+0x42>
 800532a:	bf00      	nop
 800532c:	08005e20 	.word	0x08005e20
 8005330:	ffff0001 	.word	0xffff0001

08005334 <_fwalk_reent>:
 8005334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005338:	4680      	mov	r8, r0
 800533a:	4689      	mov	r9, r1
 800533c:	2600      	movs	r6, #0
 800533e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005342:	b914      	cbnz	r4, 800534a <_fwalk_reent+0x16>
 8005344:	4630      	mov	r0, r6
 8005346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800534a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800534e:	3f01      	subs	r7, #1
 8005350:	d501      	bpl.n	8005356 <_fwalk_reent+0x22>
 8005352:	6824      	ldr	r4, [r4, #0]
 8005354:	e7f5      	b.n	8005342 <_fwalk_reent+0xe>
 8005356:	89ab      	ldrh	r3, [r5, #12]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d907      	bls.n	800536c <_fwalk_reent+0x38>
 800535c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005360:	3301      	adds	r3, #1
 8005362:	d003      	beq.n	800536c <_fwalk_reent+0x38>
 8005364:	4629      	mov	r1, r5
 8005366:	4640      	mov	r0, r8
 8005368:	47c8      	blx	r9
 800536a:	4306      	orrs	r6, r0
 800536c:	3568      	adds	r5, #104	; 0x68
 800536e:	e7ee      	b.n	800534e <_fwalk_reent+0x1a>

08005370 <__swhatbuf_r>:
 8005370:	b570      	push	{r4, r5, r6, lr}
 8005372:	460e      	mov	r6, r1
 8005374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005378:	b096      	sub	sp, #88	; 0x58
 800537a:	2900      	cmp	r1, #0
 800537c:	4614      	mov	r4, r2
 800537e:	461d      	mov	r5, r3
 8005380:	da07      	bge.n	8005392 <__swhatbuf_r+0x22>
 8005382:	2300      	movs	r3, #0
 8005384:	602b      	str	r3, [r5, #0]
 8005386:	89b3      	ldrh	r3, [r6, #12]
 8005388:	061a      	lsls	r2, r3, #24
 800538a:	d410      	bmi.n	80053ae <__swhatbuf_r+0x3e>
 800538c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005390:	e00e      	b.n	80053b0 <__swhatbuf_r+0x40>
 8005392:	466a      	mov	r2, sp
 8005394:	f000 fc3a 	bl	8005c0c <_fstat_r>
 8005398:	2800      	cmp	r0, #0
 800539a:	dbf2      	blt.n	8005382 <__swhatbuf_r+0x12>
 800539c:	9a01      	ldr	r2, [sp, #4]
 800539e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053a6:	425a      	negs	r2, r3
 80053a8:	415a      	adcs	r2, r3
 80053aa:	602a      	str	r2, [r5, #0]
 80053ac:	e7ee      	b.n	800538c <__swhatbuf_r+0x1c>
 80053ae:	2340      	movs	r3, #64	; 0x40
 80053b0:	2000      	movs	r0, #0
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	b016      	add	sp, #88	; 0x58
 80053b6:	bd70      	pop	{r4, r5, r6, pc}

080053b8 <__smakebuf_r>:
 80053b8:	898b      	ldrh	r3, [r1, #12]
 80053ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053bc:	079d      	lsls	r5, r3, #30
 80053be:	4606      	mov	r6, r0
 80053c0:	460c      	mov	r4, r1
 80053c2:	d507      	bpl.n	80053d4 <__smakebuf_r+0x1c>
 80053c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	6123      	str	r3, [r4, #16]
 80053cc:	2301      	movs	r3, #1
 80053ce:	6163      	str	r3, [r4, #20]
 80053d0:	b002      	add	sp, #8
 80053d2:	bd70      	pop	{r4, r5, r6, pc}
 80053d4:	ab01      	add	r3, sp, #4
 80053d6:	466a      	mov	r2, sp
 80053d8:	f7ff ffca 	bl	8005370 <__swhatbuf_r>
 80053dc:	9900      	ldr	r1, [sp, #0]
 80053de:	4605      	mov	r5, r0
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 f87d 	bl	80054e0 <_malloc_r>
 80053e6:	b948      	cbnz	r0, 80053fc <__smakebuf_r+0x44>
 80053e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ec:	059a      	lsls	r2, r3, #22
 80053ee:	d4ef      	bmi.n	80053d0 <__smakebuf_r+0x18>
 80053f0:	f023 0303 	bic.w	r3, r3, #3
 80053f4:	f043 0302 	orr.w	r3, r3, #2
 80053f8:	81a3      	strh	r3, [r4, #12]
 80053fa:	e7e3      	b.n	80053c4 <__smakebuf_r+0xc>
 80053fc:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <__smakebuf_r+0x7c>)
 80053fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	6020      	str	r0, [r4, #0]
 8005404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005408:	81a3      	strh	r3, [r4, #12]
 800540a:	9b00      	ldr	r3, [sp, #0]
 800540c:	6120      	str	r0, [r4, #16]
 800540e:	6163      	str	r3, [r4, #20]
 8005410:	9b01      	ldr	r3, [sp, #4]
 8005412:	b15b      	cbz	r3, 800542c <__smakebuf_r+0x74>
 8005414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005418:	4630      	mov	r0, r6
 800541a:	f000 fc09 	bl	8005c30 <_isatty_r>
 800541e:	b128      	cbz	r0, 800542c <__smakebuf_r+0x74>
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	f023 0303 	bic.w	r3, r3, #3
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	431d      	orrs	r5, r3
 8005430:	81a5      	strh	r5, [r4, #12]
 8005432:	e7cd      	b.n	80053d0 <__smakebuf_r+0x18>
 8005434:	08005225 	.word	0x08005225

08005438 <malloc>:
 8005438:	4b02      	ldr	r3, [pc, #8]	; (8005444 <malloc+0xc>)
 800543a:	4601      	mov	r1, r0
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	f000 b84f 	b.w	80054e0 <_malloc_r>
 8005442:	bf00      	nop
 8005444:	20000554 	.word	0x20000554

08005448 <_free_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4605      	mov	r5, r0
 800544c:	2900      	cmp	r1, #0
 800544e:	d043      	beq.n	80054d8 <_free_r+0x90>
 8005450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005454:	1f0c      	subs	r4, r1, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	bfb8      	it	lt
 800545a:	18e4      	addlt	r4, r4, r3
 800545c:	f000 fc18 	bl	8005c90 <__malloc_lock>
 8005460:	4a1e      	ldr	r2, [pc, #120]	; (80054dc <_free_r+0x94>)
 8005462:	6813      	ldr	r3, [r2, #0]
 8005464:	4610      	mov	r0, r2
 8005466:	b933      	cbnz	r3, 8005476 <_free_r+0x2e>
 8005468:	6063      	str	r3, [r4, #4]
 800546a:	6014      	str	r4, [r2, #0]
 800546c:	4628      	mov	r0, r5
 800546e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005472:	f000 bc0e 	b.w	8005c92 <__malloc_unlock>
 8005476:	42a3      	cmp	r3, r4
 8005478:	d90b      	bls.n	8005492 <_free_r+0x4a>
 800547a:	6821      	ldr	r1, [r4, #0]
 800547c:	1862      	adds	r2, r4, r1
 800547e:	4293      	cmp	r3, r2
 8005480:	bf01      	itttt	eq
 8005482:	681a      	ldreq	r2, [r3, #0]
 8005484:	685b      	ldreq	r3, [r3, #4]
 8005486:	1852      	addeq	r2, r2, r1
 8005488:	6022      	streq	r2, [r4, #0]
 800548a:	6063      	str	r3, [r4, #4]
 800548c:	6004      	str	r4, [r0, #0]
 800548e:	e7ed      	b.n	800546c <_free_r+0x24>
 8005490:	4613      	mov	r3, r2
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	b10a      	cbz	r2, 800549a <_free_r+0x52>
 8005496:	42a2      	cmp	r2, r4
 8005498:	d9fa      	bls.n	8005490 <_free_r+0x48>
 800549a:	6819      	ldr	r1, [r3, #0]
 800549c:	1858      	adds	r0, r3, r1
 800549e:	42a0      	cmp	r0, r4
 80054a0:	d10b      	bne.n	80054ba <_free_r+0x72>
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	4401      	add	r1, r0
 80054a6:	1858      	adds	r0, r3, r1
 80054a8:	4282      	cmp	r2, r0
 80054aa:	6019      	str	r1, [r3, #0]
 80054ac:	d1de      	bne.n	800546c <_free_r+0x24>
 80054ae:	6810      	ldr	r0, [r2, #0]
 80054b0:	6852      	ldr	r2, [r2, #4]
 80054b2:	4401      	add	r1, r0
 80054b4:	6019      	str	r1, [r3, #0]
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	e7d8      	b.n	800546c <_free_r+0x24>
 80054ba:	d902      	bls.n	80054c2 <_free_r+0x7a>
 80054bc:	230c      	movs	r3, #12
 80054be:	602b      	str	r3, [r5, #0]
 80054c0:	e7d4      	b.n	800546c <_free_r+0x24>
 80054c2:	6820      	ldr	r0, [r4, #0]
 80054c4:	1821      	adds	r1, r4, r0
 80054c6:	428a      	cmp	r2, r1
 80054c8:	bf01      	itttt	eq
 80054ca:	6811      	ldreq	r1, [r2, #0]
 80054cc:	6852      	ldreq	r2, [r2, #4]
 80054ce:	1809      	addeq	r1, r1, r0
 80054d0:	6021      	streq	r1, [r4, #0]
 80054d2:	6062      	str	r2, [r4, #4]
 80054d4:	605c      	str	r4, [r3, #4]
 80054d6:	e7c9      	b.n	800546c <_free_r+0x24>
 80054d8:	bd38      	pop	{r3, r4, r5, pc}
 80054da:	bf00      	nop
 80054dc:	200005d8 	.word	0x200005d8

080054e0 <_malloc_r>:
 80054e0:	b570      	push	{r4, r5, r6, lr}
 80054e2:	1ccd      	adds	r5, r1, #3
 80054e4:	f025 0503 	bic.w	r5, r5, #3
 80054e8:	3508      	adds	r5, #8
 80054ea:	2d0c      	cmp	r5, #12
 80054ec:	bf38      	it	cc
 80054ee:	250c      	movcc	r5, #12
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	4606      	mov	r6, r0
 80054f4:	db01      	blt.n	80054fa <_malloc_r+0x1a>
 80054f6:	42a9      	cmp	r1, r5
 80054f8:	d903      	bls.n	8005502 <_malloc_r+0x22>
 80054fa:	230c      	movs	r3, #12
 80054fc:	6033      	str	r3, [r6, #0]
 80054fe:	2000      	movs	r0, #0
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	f000 fbc5 	bl	8005c90 <__malloc_lock>
 8005506:	4a21      	ldr	r2, [pc, #132]	; (800558c <_malloc_r+0xac>)
 8005508:	6814      	ldr	r4, [r2, #0]
 800550a:	4621      	mov	r1, r4
 800550c:	b991      	cbnz	r1, 8005534 <_malloc_r+0x54>
 800550e:	4c20      	ldr	r4, [pc, #128]	; (8005590 <_malloc_r+0xb0>)
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	b91b      	cbnz	r3, 800551c <_malloc_r+0x3c>
 8005514:	4630      	mov	r0, r6
 8005516:	f000 fb03 	bl	8005b20 <_sbrk_r>
 800551a:	6020      	str	r0, [r4, #0]
 800551c:	4629      	mov	r1, r5
 800551e:	4630      	mov	r0, r6
 8005520:	f000 fafe 	bl	8005b20 <_sbrk_r>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d124      	bne.n	8005572 <_malloc_r+0x92>
 8005528:	230c      	movs	r3, #12
 800552a:	4630      	mov	r0, r6
 800552c:	6033      	str	r3, [r6, #0]
 800552e:	f000 fbb0 	bl	8005c92 <__malloc_unlock>
 8005532:	e7e4      	b.n	80054fe <_malloc_r+0x1e>
 8005534:	680b      	ldr	r3, [r1, #0]
 8005536:	1b5b      	subs	r3, r3, r5
 8005538:	d418      	bmi.n	800556c <_malloc_r+0x8c>
 800553a:	2b0b      	cmp	r3, #11
 800553c:	d90f      	bls.n	800555e <_malloc_r+0x7e>
 800553e:	600b      	str	r3, [r1, #0]
 8005540:	18cc      	adds	r4, r1, r3
 8005542:	50cd      	str	r5, [r1, r3]
 8005544:	4630      	mov	r0, r6
 8005546:	f000 fba4 	bl	8005c92 <__malloc_unlock>
 800554a:	f104 000b 	add.w	r0, r4, #11
 800554e:	1d23      	adds	r3, r4, #4
 8005550:	f020 0007 	bic.w	r0, r0, #7
 8005554:	1ac3      	subs	r3, r0, r3
 8005556:	d0d3      	beq.n	8005500 <_malloc_r+0x20>
 8005558:	425a      	negs	r2, r3
 800555a:	50e2      	str	r2, [r4, r3]
 800555c:	e7d0      	b.n	8005500 <_malloc_r+0x20>
 800555e:	684b      	ldr	r3, [r1, #4]
 8005560:	428c      	cmp	r4, r1
 8005562:	bf16      	itet	ne
 8005564:	6063      	strne	r3, [r4, #4]
 8005566:	6013      	streq	r3, [r2, #0]
 8005568:	460c      	movne	r4, r1
 800556a:	e7eb      	b.n	8005544 <_malloc_r+0x64>
 800556c:	460c      	mov	r4, r1
 800556e:	6849      	ldr	r1, [r1, #4]
 8005570:	e7cc      	b.n	800550c <_malloc_r+0x2c>
 8005572:	1cc4      	adds	r4, r0, #3
 8005574:	f024 0403 	bic.w	r4, r4, #3
 8005578:	42a0      	cmp	r0, r4
 800557a:	d005      	beq.n	8005588 <_malloc_r+0xa8>
 800557c:	1a21      	subs	r1, r4, r0
 800557e:	4630      	mov	r0, r6
 8005580:	f000 face 	bl	8005b20 <_sbrk_r>
 8005584:	3001      	adds	r0, #1
 8005586:	d0cf      	beq.n	8005528 <_malloc_r+0x48>
 8005588:	6025      	str	r5, [r4, #0]
 800558a:	e7db      	b.n	8005544 <_malloc_r+0x64>
 800558c:	200005d8 	.word	0x200005d8
 8005590:	200005dc 	.word	0x200005dc

08005594 <__sfputc_r>:
 8005594:	6893      	ldr	r3, [r2, #8]
 8005596:	b410      	push	{r4}
 8005598:	3b01      	subs	r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	6093      	str	r3, [r2, #8]
 800559e:	da07      	bge.n	80055b0 <__sfputc_r+0x1c>
 80055a0:	6994      	ldr	r4, [r2, #24]
 80055a2:	42a3      	cmp	r3, r4
 80055a4:	db01      	blt.n	80055aa <__sfputc_r+0x16>
 80055a6:	290a      	cmp	r1, #10
 80055a8:	d102      	bne.n	80055b0 <__sfputc_r+0x1c>
 80055aa:	bc10      	pop	{r4}
 80055ac:	f7ff bca6 	b.w	8004efc <__swbuf_r>
 80055b0:	6813      	ldr	r3, [r2, #0]
 80055b2:	1c58      	adds	r0, r3, #1
 80055b4:	6010      	str	r0, [r2, #0]
 80055b6:	7019      	strb	r1, [r3, #0]
 80055b8:	4608      	mov	r0, r1
 80055ba:	bc10      	pop	{r4}
 80055bc:	4770      	bx	lr

080055be <__sfputs_r>:
 80055be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c0:	4606      	mov	r6, r0
 80055c2:	460f      	mov	r7, r1
 80055c4:	4614      	mov	r4, r2
 80055c6:	18d5      	adds	r5, r2, r3
 80055c8:	42ac      	cmp	r4, r5
 80055ca:	d101      	bne.n	80055d0 <__sfputs_r+0x12>
 80055cc:	2000      	movs	r0, #0
 80055ce:	e007      	b.n	80055e0 <__sfputs_r+0x22>
 80055d0:	463a      	mov	r2, r7
 80055d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d6:	4630      	mov	r0, r6
 80055d8:	f7ff ffdc 	bl	8005594 <__sfputc_r>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d1f3      	bne.n	80055c8 <__sfputs_r+0xa>
 80055e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055e4 <_vfiprintf_r>:
 80055e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e8:	460c      	mov	r4, r1
 80055ea:	b09d      	sub	sp, #116	; 0x74
 80055ec:	4617      	mov	r7, r2
 80055ee:	461d      	mov	r5, r3
 80055f0:	4606      	mov	r6, r0
 80055f2:	b118      	cbz	r0, 80055fc <_vfiprintf_r+0x18>
 80055f4:	6983      	ldr	r3, [r0, #24]
 80055f6:	b90b      	cbnz	r3, 80055fc <_vfiprintf_r+0x18>
 80055f8:	f7ff fe30 	bl	800525c <__sinit>
 80055fc:	4b7c      	ldr	r3, [pc, #496]	; (80057f0 <_vfiprintf_r+0x20c>)
 80055fe:	429c      	cmp	r4, r3
 8005600:	d158      	bne.n	80056b4 <_vfiprintf_r+0xd0>
 8005602:	6874      	ldr	r4, [r6, #4]
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	0718      	lsls	r0, r3, #28
 8005608:	d55e      	bpl.n	80056c8 <_vfiprintf_r+0xe4>
 800560a:	6923      	ldr	r3, [r4, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d05b      	beq.n	80056c8 <_vfiprintf_r+0xe4>
 8005610:	2300      	movs	r3, #0
 8005612:	9309      	str	r3, [sp, #36]	; 0x24
 8005614:	2320      	movs	r3, #32
 8005616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800561a:	2330      	movs	r3, #48	; 0x30
 800561c:	f04f 0b01 	mov.w	fp, #1
 8005620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005624:	9503      	str	r5, [sp, #12]
 8005626:	46b8      	mov	r8, r7
 8005628:	4645      	mov	r5, r8
 800562a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800562e:	b10b      	cbz	r3, 8005634 <_vfiprintf_r+0x50>
 8005630:	2b25      	cmp	r3, #37	; 0x25
 8005632:	d154      	bne.n	80056de <_vfiprintf_r+0xfa>
 8005634:	ebb8 0a07 	subs.w	sl, r8, r7
 8005638:	d00b      	beq.n	8005652 <_vfiprintf_r+0x6e>
 800563a:	4653      	mov	r3, sl
 800563c:	463a      	mov	r2, r7
 800563e:	4621      	mov	r1, r4
 8005640:	4630      	mov	r0, r6
 8005642:	f7ff ffbc 	bl	80055be <__sfputs_r>
 8005646:	3001      	adds	r0, #1
 8005648:	f000 80c2 	beq.w	80057d0 <_vfiprintf_r+0x1ec>
 800564c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800564e:	4453      	add	r3, sl
 8005650:	9309      	str	r3, [sp, #36]	; 0x24
 8005652:	f898 3000 	ldrb.w	r3, [r8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80ba 	beq.w	80057d0 <_vfiprintf_r+0x1ec>
 800565c:	2300      	movs	r3, #0
 800565e:	f04f 32ff 	mov.w	r2, #4294967295
 8005662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005666:	9304      	str	r3, [sp, #16]
 8005668:	9307      	str	r3, [sp, #28]
 800566a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800566e:	931a      	str	r3, [sp, #104]	; 0x68
 8005670:	46a8      	mov	r8, r5
 8005672:	2205      	movs	r2, #5
 8005674:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005678:	485e      	ldr	r0, [pc, #376]	; (80057f4 <_vfiprintf_r+0x210>)
 800567a:	f000 fafb 	bl	8005c74 <memchr>
 800567e:	9b04      	ldr	r3, [sp, #16]
 8005680:	bb78      	cbnz	r0, 80056e2 <_vfiprintf_r+0xfe>
 8005682:	06d9      	lsls	r1, r3, #27
 8005684:	bf44      	itt	mi
 8005686:	2220      	movmi	r2, #32
 8005688:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800568c:	071a      	lsls	r2, r3, #28
 800568e:	bf44      	itt	mi
 8005690:	222b      	movmi	r2, #43	; 0x2b
 8005692:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005696:	782a      	ldrb	r2, [r5, #0]
 8005698:	2a2a      	cmp	r2, #42	; 0x2a
 800569a:	d02a      	beq.n	80056f2 <_vfiprintf_r+0x10e>
 800569c:	46a8      	mov	r8, r5
 800569e:	2000      	movs	r0, #0
 80056a0:	250a      	movs	r5, #10
 80056a2:	9a07      	ldr	r2, [sp, #28]
 80056a4:	4641      	mov	r1, r8
 80056a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056aa:	3b30      	subs	r3, #48	; 0x30
 80056ac:	2b09      	cmp	r3, #9
 80056ae:	d969      	bls.n	8005784 <_vfiprintf_r+0x1a0>
 80056b0:	b360      	cbz	r0, 800570c <_vfiprintf_r+0x128>
 80056b2:	e024      	b.n	80056fe <_vfiprintf_r+0x11a>
 80056b4:	4b50      	ldr	r3, [pc, #320]	; (80057f8 <_vfiprintf_r+0x214>)
 80056b6:	429c      	cmp	r4, r3
 80056b8:	d101      	bne.n	80056be <_vfiprintf_r+0xda>
 80056ba:	68b4      	ldr	r4, [r6, #8]
 80056bc:	e7a2      	b.n	8005604 <_vfiprintf_r+0x20>
 80056be:	4b4f      	ldr	r3, [pc, #316]	; (80057fc <_vfiprintf_r+0x218>)
 80056c0:	429c      	cmp	r4, r3
 80056c2:	bf08      	it	eq
 80056c4:	68f4      	ldreq	r4, [r6, #12]
 80056c6:	e79d      	b.n	8005604 <_vfiprintf_r+0x20>
 80056c8:	4621      	mov	r1, r4
 80056ca:	4630      	mov	r0, r6
 80056cc:	f7ff fc68 	bl	8004fa0 <__swsetup_r>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d09d      	beq.n	8005610 <_vfiprintf_r+0x2c>
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	b01d      	add	sp, #116	; 0x74
 80056da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056de:	46a8      	mov	r8, r5
 80056e0:	e7a2      	b.n	8005628 <_vfiprintf_r+0x44>
 80056e2:	4a44      	ldr	r2, [pc, #272]	; (80057f4 <_vfiprintf_r+0x210>)
 80056e4:	4645      	mov	r5, r8
 80056e6:	1a80      	subs	r0, r0, r2
 80056e8:	fa0b f000 	lsl.w	r0, fp, r0
 80056ec:	4318      	orrs	r0, r3
 80056ee:	9004      	str	r0, [sp, #16]
 80056f0:	e7be      	b.n	8005670 <_vfiprintf_r+0x8c>
 80056f2:	9a03      	ldr	r2, [sp, #12]
 80056f4:	1d11      	adds	r1, r2, #4
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	9103      	str	r1, [sp, #12]
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	db01      	blt.n	8005702 <_vfiprintf_r+0x11e>
 80056fe:	9207      	str	r2, [sp, #28]
 8005700:	e004      	b.n	800570c <_vfiprintf_r+0x128>
 8005702:	4252      	negs	r2, r2
 8005704:	f043 0302 	orr.w	r3, r3, #2
 8005708:	9207      	str	r2, [sp, #28]
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	f898 3000 	ldrb.w	r3, [r8]
 8005710:	2b2e      	cmp	r3, #46	; 0x2e
 8005712:	d10e      	bne.n	8005732 <_vfiprintf_r+0x14e>
 8005714:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005718:	2b2a      	cmp	r3, #42	; 0x2a
 800571a:	d138      	bne.n	800578e <_vfiprintf_r+0x1aa>
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	f108 0802 	add.w	r8, r8, #2
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	9203      	str	r2, [sp, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfb8      	it	lt
 800572c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005730:	9305      	str	r3, [sp, #20]
 8005732:	4d33      	ldr	r5, [pc, #204]	; (8005800 <_vfiprintf_r+0x21c>)
 8005734:	2203      	movs	r2, #3
 8005736:	f898 1000 	ldrb.w	r1, [r8]
 800573a:	4628      	mov	r0, r5
 800573c:	f000 fa9a 	bl	8005c74 <memchr>
 8005740:	b140      	cbz	r0, 8005754 <_vfiprintf_r+0x170>
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	1b40      	subs	r0, r0, r5
 8005746:	fa03 f000 	lsl.w	r0, r3, r0
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	f108 0801 	add.w	r8, r8, #1
 8005750:	4303      	orrs	r3, r0
 8005752:	9304      	str	r3, [sp, #16]
 8005754:	f898 1000 	ldrb.w	r1, [r8]
 8005758:	2206      	movs	r2, #6
 800575a:	482a      	ldr	r0, [pc, #168]	; (8005804 <_vfiprintf_r+0x220>)
 800575c:	f108 0701 	add.w	r7, r8, #1
 8005760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005764:	f000 fa86 	bl	8005c74 <memchr>
 8005768:	2800      	cmp	r0, #0
 800576a:	d037      	beq.n	80057dc <_vfiprintf_r+0x1f8>
 800576c:	4b26      	ldr	r3, [pc, #152]	; (8005808 <_vfiprintf_r+0x224>)
 800576e:	bb1b      	cbnz	r3, 80057b8 <_vfiprintf_r+0x1d4>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	3307      	adds	r3, #7
 8005774:	f023 0307 	bic.w	r3, r3, #7
 8005778:	3308      	adds	r3, #8
 800577a:	9303      	str	r3, [sp, #12]
 800577c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577e:	444b      	add	r3, r9
 8005780:	9309      	str	r3, [sp, #36]	; 0x24
 8005782:	e750      	b.n	8005626 <_vfiprintf_r+0x42>
 8005784:	fb05 3202 	mla	r2, r5, r2, r3
 8005788:	2001      	movs	r0, #1
 800578a:	4688      	mov	r8, r1
 800578c:	e78a      	b.n	80056a4 <_vfiprintf_r+0xc0>
 800578e:	2300      	movs	r3, #0
 8005790:	250a      	movs	r5, #10
 8005792:	4619      	mov	r1, r3
 8005794:	f108 0801 	add.w	r8, r8, #1
 8005798:	9305      	str	r3, [sp, #20]
 800579a:	4640      	mov	r0, r8
 800579c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a0:	3a30      	subs	r2, #48	; 0x30
 80057a2:	2a09      	cmp	r2, #9
 80057a4:	d903      	bls.n	80057ae <_vfiprintf_r+0x1ca>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0c3      	beq.n	8005732 <_vfiprintf_r+0x14e>
 80057aa:	9105      	str	r1, [sp, #20]
 80057ac:	e7c1      	b.n	8005732 <_vfiprintf_r+0x14e>
 80057ae:	fb05 2101 	mla	r1, r5, r1, r2
 80057b2:	2301      	movs	r3, #1
 80057b4:	4680      	mov	r8, r0
 80057b6:	e7f0      	b.n	800579a <_vfiprintf_r+0x1b6>
 80057b8:	ab03      	add	r3, sp, #12
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	4622      	mov	r2, r4
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <_vfiprintf_r+0x228>)
 80057c0:	a904      	add	r1, sp, #16
 80057c2:	4630      	mov	r0, r6
 80057c4:	f3af 8000 	nop.w
 80057c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057cc:	4681      	mov	r9, r0
 80057ce:	d1d5      	bne.n	800577c <_vfiprintf_r+0x198>
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	065b      	lsls	r3, r3, #25
 80057d4:	f53f af7e 	bmi.w	80056d4 <_vfiprintf_r+0xf0>
 80057d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057da:	e77d      	b.n	80056d8 <_vfiprintf_r+0xf4>
 80057dc:	ab03      	add	r3, sp, #12
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	4622      	mov	r2, r4
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <_vfiprintf_r+0x228>)
 80057e4:	a904      	add	r1, sp, #16
 80057e6:	4630      	mov	r0, r6
 80057e8:	f000 f888 	bl	80058fc <_printf_i>
 80057ec:	e7ec      	b.n	80057c8 <_vfiprintf_r+0x1e4>
 80057ee:	bf00      	nop
 80057f0:	08005e44 	.word	0x08005e44
 80057f4:	08005e84 	.word	0x08005e84
 80057f8:	08005e64 	.word	0x08005e64
 80057fc:	08005e24 	.word	0x08005e24
 8005800:	08005e8a 	.word	0x08005e8a
 8005804:	08005e8e 	.word	0x08005e8e
 8005808:	00000000 	.word	0x00000000
 800580c:	080055bf 	.word	0x080055bf

08005810 <_printf_common>:
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	4691      	mov	r9, r2
 8005816:	461f      	mov	r7, r3
 8005818:	688a      	ldr	r2, [r1, #8]
 800581a:	690b      	ldr	r3, [r1, #16]
 800581c:	4606      	mov	r6, r0
 800581e:	4293      	cmp	r3, r2
 8005820:	bfb8      	it	lt
 8005822:	4613      	movlt	r3, r2
 8005824:	f8c9 3000 	str.w	r3, [r9]
 8005828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800582c:	460c      	mov	r4, r1
 800582e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005832:	b112      	cbz	r2, 800583a <_printf_common+0x2a>
 8005834:	3301      	adds	r3, #1
 8005836:	f8c9 3000 	str.w	r3, [r9]
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	0699      	lsls	r1, r3, #26
 800583e:	bf42      	ittt	mi
 8005840:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005844:	3302      	addmi	r3, #2
 8005846:	f8c9 3000 	strmi.w	r3, [r9]
 800584a:	6825      	ldr	r5, [r4, #0]
 800584c:	f015 0506 	ands.w	r5, r5, #6
 8005850:	d107      	bne.n	8005862 <_printf_common+0x52>
 8005852:	f104 0a19 	add.w	sl, r4, #25
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	f8d9 2000 	ldr.w	r2, [r9]
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	42ab      	cmp	r3, r5
 8005860:	dc29      	bgt.n	80058b6 <_printf_common+0xa6>
 8005862:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	3300      	adds	r3, #0
 800586a:	bf18      	it	ne
 800586c:	2301      	movne	r3, #1
 800586e:	0692      	lsls	r2, r2, #26
 8005870:	d42e      	bmi.n	80058d0 <_printf_common+0xc0>
 8005872:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005876:	4639      	mov	r1, r7
 8005878:	4630      	mov	r0, r6
 800587a:	47c0      	blx	r8
 800587c:	3001      	adds	r0, #1
 800587e:	d021      	beq.n	80058c4 <_printf_common+0xb4>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	68e5      	ldr	r5, [r4, #12]
 8005884:	f003 0306 	and.w	r3, r3, #6
 8005888:	2b04      	cmp	r3, #4
 800588a:	bf18      	it	ne
 800588c:	2500      	movne	r5, #0
 800588e:	f8d9 2000 	ldr.w	r2, [r9]
 8005892:	f04f 0900 	mov.w	r9, #0
 8005896:	bf08      	it	eq
 8005898:	1aad      	subeq	r5, r5, r2
 800589a:	68a3      	ldr	r3, [r4, #8]
 800589c:	6922      	ldr	r2, [r4, #16]
 800589e:	bf08      	it	eq
 80058a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a4:	4293      	cmp	r3, r2
 80058a6:	bfc4      	itt	gt
 80058a8:	1a9b      	subgt	r3, r3, r2
 80058aa:	18ed      	addgt	r5, r5, r3
 80058ac:	341a      	adds	r4, #26
 80058ae:	454d      	cmp	r5, r9
 80058b0:	d11a      	bne.n	80058e8 <_printf_common+0xd8>
 80058b2:	2000      	movs	r0, #0
 80058b4:	e008      	b.n	80058c8 <_printf_common+0xb8>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4652      	mov	r2, sl
 80058ba:	4639      	mov	r1, r7
 80058bc:	4630      	mov	r0, r6
 80058be:	47c0      	blx	r8
 80058c0:	3001      	adds	r0, #1
 80058c2:	d103      	bne.n	80058cc <_printf_common+0xbc>
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058cc:	3501      	adds	r5, #1
 80058ce:	e7c2      	b.n	8005856 <_printf_common+0x46>
 80058d0:	2030      	movs	r0, #48	; 0x30
 80058d2:	18e1      	adds	r1, r4, r3
 80058d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058de:	4422      	add	r2, r4
 80058e0:	3302      	adds	r3, #2
 80058e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058e6:	e7c4      	b.n	8005872 <_printf_common+0x62>
 80058e8:	2301      	movs	r3, #1
 80058ea:	4622      	mov	r2, r4
 80058ec:	4639      	mov	r1, r7
 80058ee:	4630      	mov	r0, r6
 80058f0:	47c0      	blx	r8
 80058f2:	3001      	adds	r0, #1
 80058f4:	d0e6      	beq.n	80058c4 <_printf_common+0xb4>
 80058f6:	f109 0901 	add.w	r9, r9, #1
 80058fa:	e7d8      	b.n	80058ae <_printf_common+0x9e>

080058fc <_printf_i>:
 80058fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005900:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005904:	460c      	mov	r4, r1
 8005906:	7e09      	ldrb	r1, [r1, #24]
 8005908:	b085      	sub	sp, #20
 800590a:	296e      	cmp	r1, #110	; 0x6e
 800590c:	4617      	mov	r7, r2
 800590e:	4606      	mov	r6, r0
 8005910:	4698      	mov	r8, r3
 8005912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005914:	f000 80b3 	beq.w	8005a7e <_printf_i+0x182>
 8005918:	d822      	bhi.n	8005960 <_printf_i+0x64>
 800591a:	2963      	cmp	r1, #99	; 0x63
 800591c:	d036      	beq.n	800598c <_printf_i+0x90>
 800591e:	d80a      	bhi.n	8005936 <_printf_i+0x3a>
 8005920:	2900      	cmp	r1, #0
 8005922:	f000 80b9 	beq.w	8005a98 <_printf_i+0x19c>
 8005926:	2958      	cmp	r1, #88	; 0x58
 8005928:	f000 8083 	beq.w	8005a32 <_printf_i+0x136>
 800592c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005930:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005934:	e032      	b.n	800599c <_printf_i+0xa0>
 8005936:	2964      	cmp	r1, #100	; 0x64
 8005938:	d001      	beq.n	800593e <_printf_i+0x42>
 800593a:	2969      	cmp	r1, #105	; 0x69
 800593c:	d1f6      	bne.n	800592c <_printf_i+0x30>
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	6813      	ldr	r3, [r2, #0]
 8005942:	0605      	lsls	r5, r0, #24
 8005944:	f103 0104 	add.w	r1, r3, #4
 8005948:	d52a      	bpl.n	80059a0 <_printf_i+0xa4>
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6011      	str	r1, [r2, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	da03      	bge.n	800595a <_printf_i+0x5e>
 8005952:	222d      	movs	r2, #45	; 0x2d
 8005954:	425b      	negs	r3, r3
 8005956:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800595a:	486f      	ldr	r0, [pc, #444]	; (8005b18 <_printf_i+0x21c>)
 800595c:	220a      	movs	r2, #10
 800595e:	e039      	b.n	80059d4 <_printf_i+0xd8>
 8005960:	2973      	cmp	r1, #115	; 0x73
 8005962:	f000 809d 	beq.w	8005aa0 <_printf_i+0x1a4>
 8005966:	d808      	bhi.n	800597a <_printf_i+0x7e>
 8005968:	296f      	cmp	r1, #111	; 0x6f
 800596a:	d020      	beq.n	80059ae <_printf_i+0xb2>
 800596c:	2970      	cmp	r1, #112	; 0x70
 800596e:	d1dd      	bne.n	800592c <_printf_i+0x30>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	f043 0320 	orr.w	r3, r3, #32
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	e003      	b.n	8005982 <_printf_i+0x86>
 800597a:	2975      	cmp	r1, #117	; 0x75
 800597c:	d017      	beq.n	80059ae <_printf_i+0xb2>
 800597e:	2978      	cmp	r1, #120	; 0x78
 8005980:	d1d4      	bne.n	800592c <_printf_i+0x30>
 8005982:	2378      	movs	r3, #120	; 0x78
 8005984:	4865      	ldr	r0, [pc, #404]	; (8005b1c <_printf_i+0x220>)
 8005986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800598a:	e055      	b.n	8005a38 <_printf_i+0x13c>
 800598c:	6813      	ldr	r3, [r2, #0]
 800598e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005992:	1d19      	adds	r1, r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6011      	str	r1, [r2, #0]
 8005998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800599c:	2301      	movs	r3, #1
 800599e:	e08c      	b.n	8005aba <_printf_i+0x1be>
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059a6:	6011      	str	r1, [r2, #0]
 80059a8:	bf18      	it	ne
 80059aa:	b21b      	sxthne	r3, r3
 80059ac:	e7cf      	b.n	800594e <_printf_i+0x52>
 80059ae:	6813      	ldr	r3, [r2, #0]
 80059b0:	6825      	ldr	r5, [r4, #0]
 80059b2:	1d18      	adds	r0, r3, #4
 80059b4:	6010      	str	r0, [r2, #0]
 80059b6:	0628      	lsls	r0, r5, #24
 80059b8:	d501      	bpl.n	80059be <_printf_i+0xc2>
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	e002      	b.n	80059c4 <_printf_i+0xc8>
 80059be:	0668      	lsls	r0, r5, #25
 80059c0:	d5fb      	bpl.n	80059ba <_printf_i+0xbe>
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	296f      	cmp	r1, #111	; 0x6f
 80059c6:	bf14      	ite	ne
 80059c8:	220a      	movne	r2, #10
 80059ca:	2208      	moveq	r2, #8
 80059cc:	4852      	ldr	r0, [pc, #328]	; (8005b18 <_printf_i+0x21c>)
 80059ce:	2100      	movs	r1, #0
 80059d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059d4:	6865      	ldr	r5, [r4, #4]
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	60a5      	str	r5, [r4, #8]
 80059da:	f2c0 8095 	blt.w	8005b08 <_printf_i+0x20c>
 80059de:	6821      	ldr	r1, [r4, #0]
 80059e0:	f021 0104 	bic.w	r1, r1, #4
 80059e4:	6021      	str	r1, [r4, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d13d      	bne.n	8005a66 <_printf_i+0x16a>
 80059ea:	2d00      	cmp	r5, #0
 80059ec:	f040 808e 	bne.w	8005b0c <_printf_i+0x210>
 80059f0:	4665      	mov	r5, ip
 80059f2:	2a08      	cmp	r2, #8
 80059f4:	d10b      	bne.n	8005a0e <_printf_i+0x112>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	07db      	lsls	r3, r3, #31
 80059fa:	d508      	bpl.n	8005a0e <_printf_i+0x112>
 80059fc:	6923      	ldr	r3, [r4, #16]
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	bfde      	ittt	le
 8005a04:	2330      	movle	r3, #48	; 0x30
 8005a06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a0e:	ebac 0305 	sub.w	r3, ip, r5
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	f8cd 8000 	str.w	r8, [sp]
 8005a18:	463b      	mov	r3, r7
 8005a1a:	aa03      	add	r2, sp, #12
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7ff fef6 	bl	8005810 <_printf_common>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d14d      	bne.n	8005ac4 <_printf_i+0x1c8>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	b005      	add	sp, #20
 8005a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a32:	4839      	ldr	r0, [pc, #228]	; (8005b18 <_printf_i+0x21c>)
 8005a34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a38:	6813      	ldr	r3, [r2, #0]
 8005a3a:	6821      	ldr	r1, [r4, #0]
 8005a3c:	1d1d      	adds	r5, r3, #4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6015      	str	r5, [r2, #0]
 8005a42:	060a      	lsls	r2, r1, #24
 8005a44:	d50b      	bpl.n	8005a5e <_printf_i+0x162>
 8005a46:	07ca      	lsls	r2, r1, #31
 8005a48:	bf44      	itt	mi
 8005a4a:	f041 0120 	orrmi.w	r1, r1, #32
 8005a4e:	6021      	strmi	r1, [r4, #0]
 8005a50:	b91b      	cbnz	r3, 8005a5a <_printf_i+0x15e>
 8005a52:	6822      	ldr	r2, [r4, #0]
 8005a54:	f022 0220 	bic.w	r2, r2, #32
 8005a58:	6022      	str	r2, [r4, #0]
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	e7b7      	b.n	80059ce <_printf_i+0xd2>
 8005a5e:	064d      	lsls	r5, r1, #25
 8005a60:	bf48      	it	mi
 8005a62:	b29b      	uxthmi	r3, r3
 8005a64:	e7ef      	b.n	8005a46 <_printf_i+0x14a>
 8005a66:	4665      	mov	r5, ip
 8005a68:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a6c:	fb02 3311 	mls	r3, r2, r1, r3
 8005a70:	5cc3      	ldrb	r3, [r0, r3]
 8005a72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a76:	460b      	mov	r3, r1
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	d1f5      	bne.n	8005a68 <_printf_i+0x16c>
 8005a7c:	e7b9      	b.n	80059f2 <_printf_i+0xf6>
 8005a7e:	6813      	ldr	r3, [r2, #0]
 8005a80:	6825      	ldr	r5, [r4, #0]
 8005a82:	1d18      	adds	r0, r3, #4
 8005a84:	6961      	ldr	r1, [r4, #20]
 8005a86:	6010      	str	r0, [r2, #0]
 8005a88:	0628      	lsls	r0, r5, #24
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	d501      	bpl.n	8005a92 <_printf_i+0x196>
 8005a8e:	6019      	str	r1, [r3, #0]
 8005a90:	e002      	b.n	8005a98 <_printf_i+0x19c>
 8005a92:	066a      	lsls	r2, r5, #25
 8005a94:	d5fb      	bpl.n	8005a8e <_printf_i+0x192>
 8005a96:	8019      	strh	r1, [r3, #0]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4665      	mov	r5, ip
 8005a9c:	6123      	str	r3, [r4, #16]
 8005a9e:	e7b9      	b.n	8005a14 <_printf_i+0x118>
 8005aa0:	6813      	ldr	r3, [r2, #0]
 8005aa2:	1d19      	adds	r1, r3, #4
 8005aa4:	6011      	str	r1, [r2, #0]
 8005aa6:	681d      	ldr	r5, [r3, #0]
 8005aa8:	6862      	ldr	r2, [r4, #4]
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4628      	mov	r0, r5
 8005aae:	f000 f8e1 	bl	8005c74 <memchr>
 8005ab2:	b108      	cbz	r0, 8005ab8 <_printf_i+0x1bc>
 8005ab4:	1b40      	subs	r0, r0, r5
 8005ab6:	6060      	str	r0, [r4, #4]
 8005ab8:	6863      	ldr	r3, [r4, #4]
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	2300      	movs	r3, #0
 8005abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac2:	e7a7      	b.n	8005a14 <_printf_i+0x118>
 8005ac4:	6923      	ldr	r3, [r4, #16]
 8005ac6:	462a      	mov	r2, r5
 8005ac8:	4639      	mov	r1, r7
 8005aca:	4630      	mov	r0, r6
 8005acc:	47c0      	blx	r8
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d0aa      	beq.n	8005a28 <_printf_i+0x12c>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	079b      	lsls	r3, r3, #30
 8005ad6:	d413      	bmi.n	8005b00 <_printf_i+0x204>
 8005ad8:	68e0      	ldr	r0, [r4, #12]
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	4298      	cmp	r0, r3
 8005ade:	bfb8      	it	lt
 8005ae0:	4618      	movlt	r0, r3
 8005ae2:	e7a3      	b.n	8005a2c <_printf_i+0x130>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	464a      	mov	r2, r9
 8005ae8:	4639      	mov	r1, r7
 8005aea:	4630      	mov	r0, r6
 8005aec:	47c0      	blx	r8
 8005aee:	3001      	adds	r0, #1
 8005af0:	d09a      	beq.n	8005a28 <_printf_i+0x12c>
 8005af2:	3501      	adds	r5, #1
 8005af4:	68e3      	ldr	r3, [r4, #12]
 8005af6:	9a03      	ldr	r2, [sp, #12]
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	42ab      	cmp	r3, r5
 8005afc:	dcf2      	bgt.n	8005ae4 <_printf_i+0x1e8>
 8005afe:	e7eb      	b.n	8005ad8 <_printf_i+0x1dc>
 8005b00:	2500      	movs	r5, #0
 8005b02:	f104 0919 	add.w	r9, r4, #25
 8005b06:	e7f5      	b.n	8005af4 <_printf_i+0x1f8>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1ac      	bne.n	8005a66 <_printf_i+0x16a>
 8005b0c:	7803      	ldrb	r3, [r0, #0]
 8005b0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b16:	e76c      	b.n	80059f2 <_printf_i+0xf6>
 8005b18:	08005e95 	.word	0x08005e95
 8005b1c:	08005ea6 	.word	0x08005ea6

08005b20 <_sbrk_r>:
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	2300      	movs	r3, #0
 8005b24:	4c05      	ldr	r4, [pc, #20]	; (8005b3c <_sbrk_r+0x1c>)
 8005b26:	4605      	mov	r5, r0
 8005b28:	4608      	mov	r0, r1
 8005b2a:	6023      	str	r3, [r4, #0]
 8005b2c:	f7fb ffc2 	bl	8001ab4 <_sbrk>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d102      	bne.n	8005b3a <_sbrk_r+0x1a>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	b103      	cbz	r3, 8005b3a <_sbrk_r+0x1a>
 8005b38:	602b      	str	r3, [r5, #0]
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	200007d0 	.word	0x200007d0

08005b40 <__sread>:
 8005b40:	b510      	push	{r4, lr}
 8005b42:	460c      	mov	r4, r1
 8005b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b48:	f000 f8a4 	bl	8005c94 <_read_r>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	bfab      	itete	ge
 8005b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b52:	89a3      	ldrhlt	r3, [r4, #12]
 8005b54:	181b      	addge	r3, r3, r0
 8005b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b5a:	bfac      	ite	ge
 8005b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b5e:	81a3      	strhlt	r3, [r4, #12]
 8005b60:	bd10      	pop	{r4, pc}

08005b62 <__swrite>:
 8005b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b66:	461f      	mov	r7, r3
 8005b68:	898b      	ldrh	r3, [r1, #12]
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	05db      	lsls	r3, r3, #23
 8005b6e:	460c      	mov	r4, r1
 8005b70:	4616      	mov	r6, r2
 8005b72:	d505      	bpl.n	8005b80 <__swrite+0x1e>
 8005b74:	2302      	movs	r3, #2
 8005b76:	2200      	movs	r2, #0
 8005b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b7c:	f000 f868 	bl	8005c50 <_lseek_r>
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	4632      	mov	r2, r6
 8005b84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b88:	81a3      	strh	r3, [r4, #12]
 8005b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b8e:	463b      	mov	r3, r7
 8005b90:	4628      	mov	r0, r5
 8005b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b96:	f000 b817 	b.w	8005bc8 <_write_r>

08005b9a <__sseek>:
 8005b9a:	b510      	push	{r4, lr}
 8005b9c:	460c      	mov	r4, r1
 8005b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba2:	f000 f855 	bl	8005c50 <_lseek_r>
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	bf15      	itete	ne
 8005bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bb6:	81a3      	strheq	r3, [r4, #12]
 8005bb8:	bf18      	it	ne
 8005bba:	81a3      	strhne	r3, [r4, #12]
 8005bbc:	bd10      	pop	{r4, pc}

08005bbe <__sclose>:
 8005bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc2:	f000 b813 	b.w	8005bec <_close_r>
	...

08005bc8 <_write_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4605      	mov	r5, r0
 8005bcc:	4608      	mov	r0, r1
 8005bce:	4611      	mov	r1, r2
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4c05      	ldr	r4, [pc, #20]	; (8005be8 <_write_r+0x20>)
 8005bd4:	6022      	str	r2, [r4, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f7fb ff26 	bl	8001a28 <_write>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d102      	bne.n	8005be6 <_write_r+0x1e>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	b103      	cbz	r3, 8005be6 <_write_r+0x1e>
 8005be4:	602b      	str	r3, [r5, #0]
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	200007d0 	.word	0x200007d0

08005bec <_close_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	2300      	movs	r3, #0
 8005bf0:	4c05      	ldr	r4, [pc, #20]	; (8005c08 <_close_r+0x1c>)
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	f7fb ff2c 	bl	8001a54 <_close>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_close_r+0x1a>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_close_r+0x1a>
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	200007d0 	.word	0x200007d0

08005c0c <_fstat_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	2300      	movs	r3, #0
 8005c10:	4c06      	ldr	r4, [pc, #24]	; (8005c2c <_fstat_r+0x20>)
 8005c12:	4605      	mov	r5, r0
 8005c14:	4608      	mov	r0, r1
 8005c16:	4611      	mov	r1, r2
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	f7fb ff26 	bl	8001a6a <_fstat>
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	d102      	bne.n	8005c28 <_fstat_r+0x1c>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	b103      	cbz	r3, 8005c28 <_fstat_r+0x1c>
 8005c26:	602b      	str	r3, [r5, #0]
 8005c28:	bd38      	pop	{r3, r4, r5, pc}
 8005c2a:	bf00      	nop
 8005c2c:	200007d0 	.word	0x200007d0

08005c30 <_isatty_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	2300      	movs	r3, #0
 8005c34:	4c05      	ldr	r4, [pc, #20]	; (8005c4c <_isatty_r+0x1c>)
 8005c36:	4605      	mov	r5, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	6023      	str	r3, [r4, #0]
 8005c3c:	f7fb ff24 	bl	8001a88 <_isatty>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_isatty_r+0x1a>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_isatty_r+0x1a>
 8005c48:	602b      	str	r3, [r5, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	200007d0 	.word	0x200007d0

08005c50 <_lseek_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4605      	mov	r5, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	4611      	mov	r1, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4c05      	ldr	r4, [pc, #20]	; (8005c70 <_lseek_r+0x20>)
 8005c5c:	6022      	str	r2, [r4, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fb ff1c 	bl	8001a9c <_lseek>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_lseek_r+0x1e>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_lseek_r+0x1e>
 8005c6c:	602b      	str	r3, [r5, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	200007d0 	.word	0x200007d0

08005c74 <memchr>:
 8005c74:	b510      	push	{r4, lr}
 8005c76:	b2c9      	uxtb	r1, r1
 8005c78:	4402      	add	r2, r0
 8005c7a:	4290      	cmp	r0, r2
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	d101      	bne.n	8005c84 <memchr+0x10>
 8005c80:	2300      	movs	r3, #0
 8005c82:	e003      	b.n	8005c8c <memchr+0x18>
 8005c84:	781c      	ldrb	r4, [r3, #0]
 8005c86:	3001      	adds	r0, #1
 8005c88:	428c      	cmp	r4, r1
 8005c8a:	d1f6      	bne.n	8005c7a <memchr+0x6>
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	bd10      	pop	{r4, pc}

08005c90 <__malloc_lock>:
 8005c90:	4770      	bx	lr

08005c92 <__malloc_unlock>:
 8005c92:	4770      	bx	lr

08005c94 <_read_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4605      	mov	r5, r0
 8005c98:	4608      	mov	r0, r1
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4c05      	ldr	r4, [pc, #20]	; (8005cb4 <_read_r+0x20>)
 8005ca0:	6022      	str	r2, [r4, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f7fb fea2 	bl	80019ec <_read>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d102      	bne.n	8005cb2 <_read_r+0x1e>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	b103      	cbz	r3, 8005cb2 <_read_r+0x1e>
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	200007d0 	.word	0x200007d0

08005cb8 <_init>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	bf00      	nop
 8005cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cbe:	bc08      	pop	{r3}
 8005cc0:	469e      	mov	lr, r3
 8005cc2:	4770      	bx	lr

08005cc4 <_fini>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr
