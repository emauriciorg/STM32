
mqtt_website.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  000205b8  2**0
                  CONTENTS
  4 .ARM          00000000  08005b80  08005b80  000205b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b80  08005b80  000205b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  20000000  08005b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200005b8  08006140  000205b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  08006140  00020794  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0eb  00000000  00000000  000205e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021fd  00000000  00000000  0002e6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  000308d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c10  00000000  00000000  000315e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015be9  00000000  00000000  000321f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f79  00000000  00000000  00047de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073278  00000000  00000000  00051d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eec  00000000  00000000  000c5050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200005b8 	.word	0x200005b8
 800012c:	00000000 	.word	0x00000000
 8000130:	080059bc 	.word	0x080059bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200005bc 	.word	0x200005bc
 800014c:	080059bc 	.word	0x080059bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <dbg_register_task>:
} protocol={'#','*', 0,0,0,0,0, {0},{0},{0},0};



uint8_t dbg_register_task(void (*task_routine)(void), char *task_command, uint8_t args)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	4613      	mov	r3, r2
 8000948:	71fb      	strb	r3, [r7, #7]
	uint8_t	 task_command_len  = strlen((char *)task_command);
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f7ff fc00 	bl	8000150 <strlen>
 8000950:	4603      	mov	r3, r0
 8000952:	75fb      	strb	r3, [r7, #23]
 	if (task_routine == NULL ) return FALSE;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <dbg_register_task+0x22>
 800095a:	2300      	movs	r3, #0
 800095c:	e049      	b.n	80009f2 <dbg_register_task+0xb6>

	if (task_command == NULL) return FALSE;
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d101      	bne.n	8000968 <dbg_register_task+0x2c>
 8000964:	2300      	movs	r3, #0
 8000966:	e044      	b.n	80009f2 <dbg_register_task+0xb6>

	if (task_command_len > 10) return FALSE;
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	2b0a      	cmp	r3, #10
 800096c:	d901      	bls.n	8000972 <dbg_register_task+0x36>
 800096e:	2300      	movs	r3, #0
 8000970:	e03f      	b.n	80009f2 <dbg_register_task+0xb6>

	if ((task_pool.taken_task+1) >= task_pool.limit ) return FALSE;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <dbg_register_task+0xc0>)
 8000974:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000978:	3301      	adds	r3, #1
 800097a:	4a20      	ldr	r2, [pc, #128]	; (80009fc <dbg_register_task+0xc0>)
 800097c:	f892 20a1 	ldrb.w	r2, [r2, #161]	; 0xa1
 8000980:	4293      	cmp	r3, r2
 8000982:	db01      	blt.n	8000988 <dbg_register_task+0x4c>
 8000984:	2300      	movs	r3, #0
 8000986:	e034      	b.n	80009f2 <dbg_register_task+0xb6>

	task_pool.entry[task_pool.taken_task].args = args;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <dbg_register_task+0xc0>)
 800098a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800098e:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <dbg_register_task+0xc0>)
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	4413      	add	r3, r2
 8000994:	330f      	adds	r3, #15
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	701a      	strb	r2, [r3, #0]


	task_pool.entry[task_pool.taken_task].handlers.basic  = task_routine;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <dbg_register_task+0xc0>)
 800099c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80009a0:	4a16      	ldr	r2, [pc, #88]	; (80009fc <dbg_register_task+0xc0>)
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	4413      	add	r3, r2
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	601a      	str	r2, [r3, #0]


	task_pool.entry[task_pool.taken_task].command_len = task_command_len;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <dbg_register_task+0xc0>)
 80009ac:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80009b0:	4a12      	ldr	r2, [pc, #72]	; (80009fc <dbg_register_task+0xc0>)
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	4413      	add	r3, r2
 80009b6:	330e      	adds	r3, #14
 80009b8:	7dfa      	ldrb	r2, [r7, #23]
 80009ba:	701a      	strb	r2, [r3, #0]
	memcpy (task_pool.entry[task_pool.taken_task].command  , task_command,task_command_len);
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <dbg_register_task+0xc0>)
 80009be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <dbg_register_task+0xc0>)
 80009c6:	4413      	add	r3, r2
 80009c8:	3304      	adds	r3, #4
 80009ca:	7dfa      	ldrb	r2, [r7, #23]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 ffcb 	bl	800496a <memcpy>

	task_pool.taken_task++;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <dbg_register_task+0xc0>)
 80009d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80009da:	3301      	adds	r3, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <dbg_register_task+0xc0>)
 80009e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	printf("Task %lx with cmd [%s] OK\r\n", (uint32_t)task_routine, task_command);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <dbg_register_task+0xc4>)
 80009ec:	f003 ffd0 	bl	8004990 <iprintf>
	return TRUE;
 80009f0:	2301      	movs	r3, #1

}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200005e4 	.word	0x200005e4
 8000a00:	080059d4 	.word	0x080059d4

08000a04 <dbg_store_packet>:

void dbg_store_packet(char recieved_data)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if((recieved_data =='\r') || recieved_data =='\n')
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b0d      	cmp	r3, #13
 8000a12:	d041      	beq.n	8000a98 <dbg_store_packet+0x94>
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b0a      	cmp	r3, #10
 8000a18:	d03e      	beq.n	8000a98 <dbg_store_packet+0x94>
		return;
	if (recieved_data == protocol.init_char) {
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d10d      	bne.n	8000a40 <dbg_store_packet+0x3c>

		protocol.tail     = false;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	711a      	strb	r2, [r3, #4]
		protocol.complete = false;
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a2c:	7893      	ldrb	r3, [r2, #2]
 8000a2e:	f36f 0300 	bfc	r3, #0, #1
 8000a32:	7093      	strb	r3, [r2, #2]
		protocol.start    = true;
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a36:	7893      	ldrb	r3, [r2, #2]
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	7093      	strb	r3, [r2, #2]
		return;
 8000a3e:	e02c      	b.n	8000a9a <dbg_store_packet+0x96>
	}

	if ((recieved_data == protocol.end_char)  && protocol.start==true) {
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d110      	bne.n	8000a6c <dbg_store_packet+0x68>
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a4c:	789b      	ldrb	r3, [r3, #2]
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d009      	beq.n	8000a6c <dbg_store_packet+0x68>

		protocol.complete = true;
 8000a58:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a5a:	7893      	ldrb	r3, [r2, #2]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	7093      	strb	r3, [r2, #2]
		protocol.start    = false;
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a64:	7893      	ldrb	r3, [r2, #2]
 8000a66:	f36f 0341 	bfc	r3, #1, #1
 8000a6a:	7093      	strb	r3, [r2, #2]
	}

	protocol.data_in[ protocol.tail ] = recieved_data;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a74:	4413      	add	r3, r2
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
	protocol.tail++;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a7e:	791b      	ldrb	r3, [r3, #4]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a86:	711a      	strb	r2, [r3, #4]

	if ( protocol.tail >= (UART_RX_BUFFER_SIZE-1))
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	2bff      	cmp	r3, #255	; 0xff
 8000a8e:	d104      	bne.n	8000a9a <dbg_store_packet+0x96>
		protocol.tail=false;
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <dbg_store_packet+0xa0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	711a      	strb	r2, [r3, #4]
 8000a96:	e000      	b.n	8000a9a <dbg_store_packet+0x96>
		return;
 8000a98:	bf00      	nop
}
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000000 	.word	0x20000000

08000aa8 <dbg_command_scan>:

void dbg_command_scan(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0



	if (!protocol.complete) { return;}
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <dbg_command_scan+0x5c>)
 8000aae:	789b      	ldrb	r3, [r3, #2]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d022      	beq.n	8000b00 <dbg_command_scan+0x58>
	printf("something recieved\r\n");
 8000aba:	4813      	ldr	r0, [pc, #76]	; (8000b08 <dbg_command_scan+0x60>)
 8000abc:	f003 ffdc 	bl	8004a78 <puts>
	protocol.complete	= false;
 8000ac0:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <dbg_command_scan+0x5c>)
 8000ac2:	7893      	ldrb	r3, [r2, #2]
 8000ac4:	f36f 0300 	bfc	r3, #0, #1
 8000ac8:	7093      	strb	r3, [r2, #2]
	protocol.data_in[protocol.tail+1] = '\0';
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <dbg_command_scan+0x5c>)
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <dbg_command_scan+0x5c>)
 8000ad2:	4413      	add	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
	protocol.command	= protocol.data_in[1];
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <dbg_command_scan+0x5c>)
 8000adc:	f893 2207 	ldrb.w	r2, [r3, #519]	; 0x207
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <dbg_command_scan+0x5c>)
 8000ae2:	715a      	strb	r2, [r3, #5]
	memcpy(protocol.parameters,  protocol.data_in,(protocol.tail-1));
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <dbg_command_scan+0x5c>)
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	461a      	mov	r2, r3
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <dbg_command_scan+0x64>)
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <dbg_command_scan+0x68>)
 8000af0:	f003 ff3b 	bl	800496a <memcpy>

	dbg_uart_parser( protocol.parameters) ;
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <dbg_command_scan+0x68>)
 8000af6:	f000 f935 	bl	8000d64 <dbg_uart_parser>
	dbg_clear_packet();
 8000afa:	f000 f835 	bl	8000b68 <dbg_clear_packet>
 8000afe:	e000      	b.n	8000b02 <dbg_command_scan+0x5a>
	if (!protocol.complete) { return;}
 8000b00:	bf00      	nop

}
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	080059f0 	.word	0x080059f0
 8000b0c:	20000206 	.word	0x20000206
 8000b10:	20000106 	.word	0x20000106

08000b14 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == DEBUG_USART_INSTANCE) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_UART_RxCpltCallback+0x48>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d115      	bne.n	8000b52 <HAL_UART_RxCpltCallback+0x3e>
		dbg_store_packet(Rx_data[0]);
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_UART_RxCpltCallback+0x4c>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff69 	bl	8000a04 <dbg_store_packet>

		__HAL_UART_CLEAR_OREFLAG(UART_DBG_PORT);
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_UART_RxCpltCallback+0x50>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_UART_RxCpltCallback+0x50>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]

		HAL_UART_Receive_IT(huart, (uint8_t *)Rx_data, 1);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4905      	ldr	r1, [pc, #20]	; (8000b60 <HAL_UART_RxCpltCallback+0x4c>)
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f003 fb2d 	bl	80041ac <HAL_UART_Receive_IT>
	}
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	200005e0 	.word	0x200005e0
 8000b64:	20000708 	.word	0x20000708

08000b68 <dbg_clear_packet>:


static void dbg_clear_packet(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	protocol.tail		= false;
 8000b6c:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <dbg_clear_packet+0x48>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	711a      	strb	r2, [r3, #4]
	protocol.start		= false;
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <dbg_clear_packet+0x48>)
 8000b74:	7893      	ldrb	r3, [r2, #2]
 8000b76:	f36f 0341 	bfc	r3, #1, #1
 8000b7a:	7093      	strb	r3, [r2, #2]
	protocol.command	= false;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <dbg_clear_packet+0x48>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	715a      	strb	r2, [r3, #5]
	protocol.end		= false;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <dbg_clear_packet+0x48>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
	protocol.complete	= false;
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <dbg_clear_packet+0x48>)
 8000b8c:	7893      	ldrb	r3, [r2, #2]
 8000b8e:	f36f 0300 	bfc	r3, #0, #1
 8000b92:	7093      	strb	r3, [r2, #2]

	memset(protocol.parameters, false, UART_RX_BUFFER_SIZE);
 8000b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <dbg_clear_packet+0x4c>)
 8000b9c:	f003 fef0 	bl	8004980 <memset>
	memset(protocol.data_in   , false, UART_RX_BUFFER_SIZE);
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <dbg_clear_packet+0x50>)
 8000ba8:	f003 feea 	bl	8004980 <memset>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000106 	.word	0x20000106
 8000bb8:	20000206 	.word	0x20000206

08000bbc <dbg_has_arguments>:


static uint16_t dbg_has_arguments(uint8_t *msg)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	uint8_t *p_char = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
	p_char = (uint8_t *) strchr((char *)msg,' ');
 8000bc8:	2120      	movs	r1, #32
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f004 f80a 	bl	8004be4 <strchr>
 8000bd0:	60f8      	str	r0, [r7, #12]
	if (p_char)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d007      	beq.n	8000be8 <dbg_has_arguments+0x2c>
		return  ascii_to_to_hex(p_char+1, 'd');
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	2164      	movs	r1, #100	; 0x64
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f846 	bl	8000c70 <ascii_to_to_hex>
 8000be4:	4603      	mov	r3, r0
 8000be6:	e000      	b.n	8000bea <dbg_has_arguments+0x2e>
	return INVALID_DIGIT_CONVERTION;
 8000be8:	23ff      	movs	r3, #255	; 0xff
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <get_arg_ptr>:


static uint8_t *get_arg_ptr(uint8_t *msg)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
	uint8_t *p_char = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
	p_char = (uint8_t *) strchr((char *)msg,' ');
 8000bfe:	2120      	movs	r1, #32
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f003 ffef 	bl	8004be4 <strchr>
 8000c06:	60f8      	str	r0, [r7, #12]
	if (p_char)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <get_arg_ptr+0x22>
		return  (p_char+1);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3301      	adds	r3, #1
 8000c12:	e000      	b.n	8000c16 <get_arg_ptr+0x24>
	return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <hexascii_to_hex>:

static uint8_t hexascii_to_hex( char  hex_char) {
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]

 	if ( hex_char <= 'F' && hex_char >= 'A') return (hex_char -'A')+10;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b46      	cmp	r3, #70	; 0x46
 8000c2c:	d806      	bhi.n	8000c3c <hexascii_to_hex+0x1e>
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b40      	cmp	r3, #64	; 0x40
 8000c32:	d903      	bls.n	8000c3c <hexascii_to_hex+0x1e>
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	3b37      	subs	r3, #55	; 0x37
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	e014      	b.n	8000c66 <hexascii_to_hex+0x48>

 	if ( hex_char <= 'f' && hex_char >= 'a') return (hex_char -'a')+10;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b66      	cmp	r3, #102	; 0x66
 8000c40:	d806      	bhi.n	8000c50 <hexascii_to_hex+0x32>
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b60      	cmp	r3, #96	; 0x60
 8000c46:	d903      	bls.n	8000c50 <hexascii_to_hex+0x32>
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	3b57      	subs	r3, #87	; 0x57
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	e00a      	b.n	8000c66 <hexascii_to_hex+0x48>

 	if ( hex_char <= '9' && hex_char >= '0') return (hex_char -'0');
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b39      	cmp	r3, #57	; 0x39
 8000c54:	d806      	bhi.n	8000c64 <hexascii_to_hex+0x46>
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b2f      	cmp	r3, #47	; 0x2f
 8000c5a:	d903      	bls.n	8000c64 <hexascii_to_hex+0x46>
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	3b30      	subs	r3, #48	; 0x30
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	e000      	b.n	8000c66 <hexascii_to_hex+0x48>

 	return INVALID_DIGIT_CONVERTION;
 8000c64:	23ff      	movs	r3, #255	; 0xff
 }
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <ascii_to_to_hex>:


static uint16_t ascii_to_to_hex(uint8_t *stream_pointer, uint8_t convertion_type)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	uint16_t hex_result        = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	81fb      	strh	r3, [r7, #14]
 	uint8_t stream_length      = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	737b      	strb	r3, [r7, #13]
 	uint16_t converted_digit   = 1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	813b      	strh	r3, [r7, #8]
 	uint16_t convertion_offset = 0x10;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	817b      	strh	r3, [r7, #10]

 	if (convertion_type != 'h')
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	2b68      	cmp	r3, #104	; 0x68
 8000c90:	d01c      	beq.n	8000ccc <ascii_to_to_hex+0x5c>
 		convertion_offset = 0xa;
 8000c92:	230a      	movs	r3, #10
 8000c94:	817b      	strh	r3, [r7, #10]

 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 8000c96:	e019      	b.n	8000ccc <ascii_to_to_hex+0x5c>

 		converted_digit = ( hexascii_to_hex(*stream_pointer));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ffbe 	bl	8000c1e <hexascii_to_hex>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	813b      	strh	r3, [r7, #8]
 		if (INVALID_DIGIT_CONVERTION == converted_digit) {
 8000ca6:	893b      	ldrh	r3, [r7, #8]
 8000ca8:	2bff      	cmp	r3, #255	; 0xff
 8000caa:	d101      	bne.n	8000cb0 <ascii_to_to_hex+0x40>
			return INVALID_DIGIT_CONVERTION;
 8000cac:	23ff      	movs	r3, #255	; 0xff
 8000cae:	e015      	b.n	8000cdc <ascii_to_to_hex+0x6c>
		}
		hex_result = (hex_result * convertion_offset) + converted_digit;
 8000cb0:	89fb      	ldrh	r3, [r7, #14]
 8000cb2:	897a      	ldrh	r2, [r7, #10]
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	893b      	ldrh	r3, [r7, #8]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	81fb      	strh	r3, [r7, #14]
		stream_pointer++;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	607b      	str	r3, [r7, #4]
		stream_length++;
 8000cc6:	7b7b      	ldrb	r3, [r7, #13]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	737b      	strb	r3, [r7, #13]
 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 8000ccc:	7b7b      	ldrb	r3, [r7, #13]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	d003      	beq.n	8000cda <ascii_to_to_hex+0x6a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1de      	bne.n	8000c98 <ascii_to_to_hex+0x28>
	}
	return hex_result;
 8000cda:	89fb      	ldrh	r3, [r7, #14]
  }
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <dbg_setup>:



void dbg_setup(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
	__HAL_UART_CLEAR_OREFLAG(UART_DBG_PORT);
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <dbg_setup+0x74>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <dbg_setup+0x74>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
	__HAL_UART_CLEAR_NEFLAG(UART_DBG_PORT);
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <dbg_setup+0x74>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <dbg_setup+0x74>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
	__HAL_UART_CLEAR_FEFLAG(UART_DBG_PORT);
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <dbg_setup+0x74>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <dbg_setup+0x74>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_DISABLE_IT(UART_DBG_PORT, UART_IT_ERR);
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <dbg_setup+0x74>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <dbg_setup+0x74>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 0201 	bic.w	r2, r2, #1
 8000d3a:	615a      	str	r2, [r3, #20]

	HAL_UART_Receive_IT(UART_DBG_PORT,(uint8_t *)Rx_data,1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4907      	ldr	r1, [pc, #28]	; (8000d5c <dbg_setup+0x78>)
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <dbg_setup+0x74>)
 8000d42:	f003 fa33 	bl	80041ac <HAL_UART_Receive_IT>

	task_pool.limit = MAX_TASK;
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <dbg_setup+0x7c>)
 8000d48:	220a      	movs	r2, #10
 8000d4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000708 	.word	0x20000708
 8000d5c:	200005e0 	.word	0x200005e0
 8000d60:	200005e4 	.word	0x200005e4

08000d64 <dbg_uart_parser>:
}



void dbg_uart_parser(uint8_t *msg)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	uint8_t task_id = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	75fb      	strb	r3, [r7, #23]
	uint16_t args   = dbg_has_arguments(msg);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff23 	bl	8000bbc <dbg_has_arguments>
 8000d76:	4603      	mov	r3, r0
 8000d78:	82bb      	strh	r3, [r7, #20]
	uint8_t cmd_len;
	uint8_t *cmd_str;

	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	75fb      	strb	r3, [r7, #23]
 8000d7e:	e058      	b.n	8000e32 <dbg_uart_parser+0xce>

		cmd_str = task_pool.entry[task_id].command;
 8000d80:	7dfb      	ldrb	r3, [r7, #23]
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	4a32      	ldr	r2, [pc, #200]	; (8000e50 <dbg_uart_parser+0xec>)
 8000d86:	4413      	add	r3, r2
 8000d88:	3304      	adds	r3, #4
 8000d8a:	613b      	str	r3, [r7, #16]
		cmd_len = task_pool.entry[task_id].command_len;
 8000d8c:	7dfb      	ldrb	r3, [r7, #23]
 8000d8e:	4a30      	ldr	r2, [pc, #192]	; (8000e50 <dbg_uart_parser+0xec>)
 8000d90:	011b      	lsls	r3, r3, #4
 8000d92:	4413      	add	r3, r2
 8000d94:	330e      	adds	r3, #14
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	73fb      	strb	r3, [r7, #15]

		if ( !STR_CMP(msg ,cmd_str,cmd_len))
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	6939      	ldr	r1, [r7, #16]
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f003 fdd3 	bl	800494c <memcmp>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <dbg_uart_parser+0x50>
	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	3301      	adds	r3, #1
 8000db0:	75fb      	strb	r3, [r7, #23]
 8000db2:	e03e      	b.n	8000e32 <dbg_uart_parser+0xce>
			continue;

		if ((task_pool.entry[task_id].args=='p')){
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <dbg_uart_parser+0xec>)
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	4413      	add	r3, r2
 8000dbc:	330f      	adds	r3, #15
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b70      	cmp	r3, #112	; 0x70
 8000dc2:	d10e      	bne.n	8000de2 <dbg_uart_parser+0x7e>
			printf("executing task arg\r\n");
 8000dc4:	4823      	ldr	r0, [pc, #140]	; (8000e54 <dbg_uart_parser+0xf0>)
 8000dc6:	f003 fe57 	bl	8004a78 <puts>
			task_pool.entry[task_id].handlers.ptr_arg(get_arg_ptr(msg));
 8000dca:	7dfb      	ldrb	r3, [r7, #23]
 8000dcc:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <dbg_uart_parser+0xec>)
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	4413      	add	r3, r2
 8000dd2:	681c      	ldr	r4, [r3, #0]
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff0c 	bl	8000bf2 <get_arg_ptr>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	47a0      	blx	r4
			return;
 8000de0:	e032      	b.n	8000e48 <dbg_uart_parser+0xe4>
		}

		if ((args!=INVALID_DIGIT_CONVERTION) && task_pool.entry[task_id].args){
 8000de2:	8abb      	ldrh	r3, [r7, #20]
 8000de4:	2bff      	cmp	r3, #255	; 0xff
 8000de6:	d010      	beq.n	8000e0a <dbg_uart_parser+0xa6>
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <dbg_uart_parser+0xec>)
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4413      	add	r3, r2
 8000df0:	330f      	adds	r3, #15
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d008      	beq.n	8000e0a <dbg_uart_parser+0xa6>
			task_pool.entry[task_id].handlers.uint_args(args);
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <dbg_uart_parser+0xec>)
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	4413      	add	r3, r2
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	8aba      	ldrh	r2, [r7, #20]
 8000e04:	4610      	mov	r0, r2
 8000e06:	4798      	blx	r3
			return;
 8000e08:	e01e      	b.n	8000e48 <dbg_uart_parser+0xe4>
		}


		if (! (args | task_pool.entry[task_id].args)) {
 8000e0a:	8abb      	ldrh	r3, [r7, #20]
 8000e0c:	7dfa      	ldrb	r2, [r7, #23]
 8000e0e:	4910      	ldr	r1, [pc, #64]	; (8000e50 <dbg_uart_parser+0xec>)
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	440a      	add	r2, r1
 8000e14:	320f      	adds	r2, #15
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d110      	bne.n	8000e40 <dbg_uart_parser+0xdc>
			printf("executing task NO arg\r\n");
 8000e1e:	480e      	ldr	r0, [pc, #56]	; (8000e58 <dbg_uart_parser+0xf4>)
 8000e20:	f003 fe2a 	bl	8004a78 <puts>

			task_pool.entry[task_id].handlers.void_args();
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <dbg_uart_parser+0xec>)
 8000e28:	011b      	lsls	r3, r3, #4
 8000e2a:	4413      	add	r3, r2
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4798      	blx	r3
			return;
 8000e30:	e00a      	b.n	8000e48 <dbg_uart_parser+0xe4>
	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <dbg_uart_parser+0xec>)
 8000e34:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000e38:	7dfa      	ldrb	r2, [r7, #23]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3a0      	bcc.n	8000d80 <dbg_uart_parser+0x1c>
 8000e3e:	e000      	b.n	8000e42 <dbg_uart_parser+0xde>
		}
		break;
 8000e40:	bf00      	nop
	}
	printf("task executed\r\n");
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <dbg_uart_parser+0xf8>)
 8000e44:	f003 fe18 	bl	8004a78 <puts>
}
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200005e4 	.word	0x200005e4
 8000e54:	08005a04 	.word	0x08005a04
 8000e58:	08005a18 	.word	0x08005a18
 8000e5c:	08005a30 	.word	0x08005a30

08000e60 <servo_set_angle>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define SERVO_ANGLE_0   1000
#define SERVO_PERIOD    (20000 -1)
#define SERVO_TIM_PRESCALER 64
void servo_set_angle(uint16_t angle){
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]

	uint16_t pulse_width = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	81fb      	strh	r3, [r7, #14]

	printf(" Angle to be set is [%d]\r\n",angle );
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	4619      	mov	r1, r3
 8000e72:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <servo_set_angle+0x90>)
 8000e74:	f003 fd8c 	bl	8004990 <iprintf>
	 if ( (angle >  180) || (angle < 0)) {
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	2bb4      	cmp	r3, #180	; 0xb4
 8000e7c:	d903      	bls.n	8000e86 <servo_set_angle+0x26>
		 printf("wrong angle value\r\n" );
 8000e7e:	481d      	ldr	r0, [pc, #116]	; (8000ef4 <servo_set_angle+0x94>)
 8000e80:	f003 fdfa 	bl	8004a78 <puts>
		 return;
 8000e84:	e029      	b.n	8000eda <servo_set_angle+0x7a>
	}
	if( angle > 90){
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	2b5a      	cmp	r3, #90	; 0x5a
 8000e8a:	d91a      	bls.n	8000ec2 <servo_set_angle+0x62>
		pulse_width = (angle * 8.8) + 413;
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fab8 	bl	8000404 <__aeabi_i2d>
 8000e94:	a312      	add	r3, pc, #72	; (adr r3, 8000ee0 <servo_set_angle+0x80>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	f7ff fb1d 	bl	80004d8 <__aeabi_dmul>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460c      	mov	r4, r1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	a310      	add	r3, pc, #64	; (adr r3, 8000ee8 <servo_set_angle+0x88>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f7ff f95e 	bl	800016c <__adddf3>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	460c      	mov	r4, r1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	4621      	mov	r1, r4
 8000eb8:	f7ff fd20 	bl	80008fc <__aeabi_d2uiz>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	81fb      	strh	r3, [r7, #14]
 8000ec0:	e007      	b.n	8000ed2 <servo_set_angle+0x72>

	}else{
		pulse_width = (angle * 7) + 413;
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	00d2      	lsls	r2, r2, #3
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	f203 139d 	addw	r3, r3, #413	; 0x19d
 8000ed0:	81fb      	strh	r3, [r7, #14]
	}


	htim4.Instance->CCR2 = pulse_width;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <servo_set_angle+0x98>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	89fa      	ldrh	r2, [r7, #14]
 8000ed8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	9999999a 	.word	0x9999999a
 8000ee4:	40219999 	.word	0x40219999
 8000ee8:	00000000 	.word	0x00000000
 8000eec:	4079d000 	.word	0x4079d000
 8000ef0:	08005a40 	.word	0x08005a40
 8000ef4:	08005a5c 	.word	0x08005a5c
 8000ef8:	20000688 	.word	0x20000688

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdout,0, _IOLBF, 0);
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <main+0xe0>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6898      	ldr	r0, [r3, #8]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f003 fdbb 	bl	8004a88 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 fe17 	bl	8001b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f879 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f000 fa0b 	bl	8001334 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f1e:	f000 f9eb 	bl	80012f8 <MX_DMA_Init>
  MX_TIM3_Init();
 8000f22:	f000 f8b5 	bl	8001090 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f26:	f000 f9bd 	bl	80012a4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f2a:	f000 f937 	bl	800119c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uint32_t seconds = HAL_GetTick();
 8000f2e:	f000 fe61 	bl	8001bf4 <HAL_GetTick>
 8000f32:	60f8      	str	r0, [r7, #12]
  printf("Program stars!!\r\n" );
 8000f34:	482a      	ldr	r0, [pc, #168]	; (8000fe0 <main+0xe4>)
 8000f36:	f003 fd9f 	bl	8004a78 <puts>
  //printf("PWM table size[%d] !!\r\n",sizeof(pwm_value)/2 );

  dbg_setup();
 8000f3a:	f7ff fed3 	bl	8000ce4 <dbg_setup>
   start_led_sequence();
 8000f3e:	f000 fc9b 	bl	8001878 <start_led_sequence>
  dbg_register_task((void*)parse_led_color_input, "set", 'p');
 8000f42:	2270      	movs	r2, #112	; 0x70
 8000f44:	4927      	ldr	r1, [pc, #156]	; (8000fe4 <main+0xe8>)
 8000f46:	4828      	ldr	r0, [pc, #160]	; (8000fe8 <main+0xec>)
 8000f48:	f7ff fcf8 	bl	800093c <dbg_register_task>
  dbg_register_task(stop_led_sequence, "stop",0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4927      	ldr	r1, [pc, #156]	; (8000fec <main+0xf0>)
 8000f50:	4827      	ldr	r0, [pc, #156]	; (8000ff0 <main+0xf4>)
 8000f52:	f7ff fcf3 	bl	800093c <dbg_register_task>
  dbg_register_task(start_led_sequence, "start",0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	4926      	ldr	r1, [pc, #152]	; (8000ff4 <main+0xf8>)
 8000f5a:	4827      	ldr	r0, [pc, #156]	; (8000ff8 <main+0xfc>)
 8000f5c:	f7ff fcee 	bl	800093c <dbg_register_task>
  dbg_register_task(servo_set_angle ,"servo",'1');
 8000f60:	2231      	movs	r2, #49	; 0x31
 8000f62:	4926      	ldr	r1, [pc, #152]	; (8000ffc <main+0x100>)
 8000f64:	4826      	ldr	r0, [pc, #152]	; (8001000 <main+0x104>)
 8000f66:	f7ff fce9 	bl	800093c <dbg_register_task>


  servo_set_angle(0);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff ff78 	bl	8000e60 <servo_set_angle>
  uint8_t switch_colors = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	72bb      	strb	r3, [r7, #10]
  uint8_t led_id[9]= {0};
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	721a      	strb	r2, [r3, #8]
  uint8_t index = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	72fb      	strb	r3, [r7, #11]
  for(index = 0;index< 9;index++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	72fb      	strb	r3, [r7, #11]
 8000f86:	e009      	b.n	8000f9c <main+0xa0>
	  led_id[index] = index;
 8000f88:	7afb      	ldrb	r3, [r7, #11]
 8000f8a:	f107 0210 	add.w	r2, r7, #16
 8000f8e:	4413      	add	r3, r2
 8000f90:	7afa      	ldrb	r2, [r7, #11]
 8000f92:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(index = 0;index< 9;index++) {
 8000f96:	7afb      	ldrb	r3, [r7, #11]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	72fb      	strb	r3, [r7, #11]
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d9f2      	bls.n	8000f88 <main+0x8c>
  }

// htim4.Instance->CCR1 = 1000;
 HAL_TIM_Base_Start(&htim4);
 8000fa2:	4818      	ldr	r0, [pc, #96]	; (8001004 <main+0x108>)
 8000fa4:	f001 ff7d 	bl	8002ea2 <HAL_TIM_Base_Start>
 HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4816      	ldr	r0, [pc, #88]	; (8001004 <main+0x108>)
 8000fac:	f001 fffa 	bl	8002fa4 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    dbg_command_scan();
 8000fb0:	f7ff fd7a 	bl	8000aa8 <dbg_command_scan>
    if ( HAL_GetTick() >seconds){
 8000fb4:	f000 fe1e 	bl	8001bf4 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d2f7      	bcs.n	8000fb0 <main+0xb4>
	    seconds = HAL_GetTick() + 600;
 8000fc0:	f000 fe18 	bl	8001bf4 <HAL_GetTick>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000fca:	60fb      	str	r3, [r7, #12]
	    GPIOC->ODR ^=GPIO_PIN_13;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <main+0x10c>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <main+0x10c>)
 8000fd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000fd6:	60d3      	str	r3, [r2, #12]
    dbg_command_scan();
 8000fd8:	e7ea      	b.n	8000fb0 <main+0xb4>
 8000fda:	bf00      	nop
 8000fdc:	20000554 	.word	0x20000554
 8000fe0:	08005a70 	.word	0x08005a70
 8000fe4:	08005a84 	.word	0x08005a84
 8000fe8:	080019a1 	.word	0x080019a1
 8000fec:	08005a88 	.word	0x08005a88
 8000ff0:	0800189d 	.word	0x0800189d
 8000ff4:	08005a90 	.word	0x08005a90
 8000ff8:	08001879 	.word	0x08001879
 8000ffc:	08005a98 	.word	0x08005a98
 8001000:	08000e61 	.word	0x08000e61
 8001004:	20000688 	.word	0x20000688
 8001008:	40011000 	.word	0x40011000

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b090      	sub	sp, #64	; 0x40
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	2228      	movs	r2, #40	; 0x28
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fcb0 	bl	8004980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001036:	2310      	movs	r3, #16
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800103e:	2300      	movs	r3, #0
 8001040:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001042:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fae1 	bl	8002614 <HAL_RCC_OscConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001058:	f000 f9b8 	bl	80013cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105c:	230f      	movs	r3, #15
 800105e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001060:	2302      	movs	r3, #2
 8001062:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2102      	movs	r1, #2
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fd4c 	bl	8002b14 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001082:	f000 f9a3 	bl	80013cc <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3740      	adds	r7, #64	; 0x40
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	; 0x38
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <MX_TIM3_Init+0xfc>)
 80010c2:	4a33      	ldr	r2, [pc, #204]	; (8001190 <MX_TIM3_Init+0x100>)
 80010c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIMER_PRESCALER;
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <MX_TIM3_Init+0xfc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <MX_TIM3_Init+0xfc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMER_PERIOD;
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <MX_TIM3_Init+0x104>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <MX_TIM3_Init+0x108>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4a2a      	ldr	r2, [pc, #168]	; (800118c <MX_TIM3_Init+0xfc>)
 80010e4:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_TIM3_Init+0xfc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <MX_TIM3_Init+0xfc>)
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010f2:	4826      	ldr	r0, [pc, #152]	; (800118c <MX_TIM3_Init+0xfc>)
 80010f4:	f001 feaa 	bl	8002e4c <HAL_TIM_Base_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80010fe:	f000 f965 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110c:	4619      	mov	r1, r3
 800110e:	481f      	ldr	r0, [pc, #124]	; (800118c <MX_TIM3_Init+0xfc>)
 8001110:	f002 faf4 	bl	80036fc <HAL_TIM_ConfigClockSource>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800111a:	f000 f957 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800111e:	481b      	ldr	r0, [pc, #108]	; (800118c <MX_TIM3_Init+0xfc>)
 8001120:	f001 ff0c 	bl	8002f3c <HAL_TIM_PWM_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800112a:	f000 f94f 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	4619      	mov	r1, r3
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <MX_TIM3_Init+0xfc>)
 800113e:	f002 fef9 	bl	8003f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8001148:	f000 f940 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCIdleState  = TIM_OCIDLESTATE_SET;
 800114c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001150:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001156:	2360      	movs	r3, #96	; 0x60
 8001158:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001162:	2304      	movs	r3, #4
 8001164:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	220c      	movs	r2, #12
 800116a:	4619      	mov	r1, r3
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_TIM3_Init+0xfc>)
 800116e:	f002 f9ff 	bl	8003570 <HAL_TIM_PWM_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001178:	f000 f928 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <MX_TIM3_Init+0xfc>)
 800117e:	f000 f9c9 	bl	8001514 <HAL_TIM_MspPostInit>

}
 8001182:	bf00      	nop
 8001184:	3738      	adds	r7, #56	; 0x38
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200006c8 	.word	0x200006c8
 8001190:	40000400 	.word	0x40000400
 8001194:	20000308 	.word	0x20000308
 8001198:	014f8b59 	.word	0x014f8b59

0800119c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <MX_TIM4_Init+0x100>)
 80011ce:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <MX_TIM4_Init+0x104>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = SERVO_TIM_PRESCALER;
 80011d2:	4b32      	ldr	r3, [pc, #200]	; (800129c <MX_TIM4_Init+0x100>)
 80011d4:	2240      	movs	r2, #64	; 0x40
 80011d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b30      	ldr	r3, [pc, #192]	; (800129c <MX_TIM4_Init+0x100>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = SERVO_PERIOD;
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <MX_TIM4_Init+0x100>)
 80011e0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80011e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <MX_TIM4_Init+0x100>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <MX_TIM4_Init+0x100>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011f2:	482a      	ldr	r0, [pc, #168]	; (800129c <MX_TIM4_Init+0x100>)
 80011f4:	f001 fe2a 	bl	8002e4c <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80011fe:	f000 f8e5 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120c:	4619      	mov	r1, r3
 800120e:	4823      	ldr	r0, [pc, #140]	; (800129c <MX_TIM4_Init+0x100>)
 8001210:	f002 fa74 	bl	80036fc <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800121a:	f000 f8d7 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800121e:	481f      	ldr	r0, [pc, #124]	; (800129c <MX_TIM4_Init+0x100>)
 8001220:	f001 fe8c 	bl	8002f3c <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800122a:	f000 f8cf 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	4619      	mov	r1, r3
 800123c:	4817      	ldr	r0, [pc, #92]	; (800129c <MX_TIM4_Init+0x100>)
 800123e:	f002 fe79 	bl	8003f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001248:	f000 f8c0 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = SERVO_ANGLE_0;
 8001250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_TIM4_Init+0x100>)
 8001266:	f002 f983 	bl	8003570 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001270:	f000 f8ac 	bl	80013cc <Error_Handler>
  }

  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2204      	movs	r2, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM4_Init+0x100>)
 8001280:	f002 f976 	bl	8003570 <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM4_Init+0xf2>
	{
  	Error_Handler();
 800128a:	f000 f89f 	bl	80013cc <Error_Handler>
	}
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM4_Init+0x100>)
 8001290:	f000 f940 	bl	8001514 <HAL_TIM_MspPostInit>

}
 8001294:	bf00      	nop
 8001296:	3738      	adds	r7, #56	; 0x38
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000688 	.word	0x20000688
 80012a0:	40000800 	.word	0x40000800

080012a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_USART1_UART_Init+0x50>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012dc:	f002 fe80 	bl	8003fe0 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012e6:	f000 f871 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000708 	.word	0x20000708
 80012f4:	40013800 	.word	0x40013800

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_DMA_Init+0x38>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <MX_DMA_Init+0x38>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6153      	str	r3, [r2, #20]
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_DMA_Init+0x38>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	200d      	movs	r0, #13
 800131c:	f000 fd6d 	bl	8001dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001320:	200d      	movs	r0, #13
 8001322:	f000 fd86 	bl	8001e32 <HAL_NVIC_EnableIRQ>

}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_GPIO_Init+0x90>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <MX_GPIO_Init+0x90>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_GPIO_Init+0x90>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_GPIO_Init+0x90>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <MX_GPIO_Init+0x90>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_GPIO_Init+0x90>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(board_led_GPIO_Port, board_led_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <MX_GPIO_Init+0x94>)
 8001398:	f001 f924 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : board_led_Pin */
  GPIO_InitStruct.Pin = board_led_Pin;
 800139c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(board_led_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4619      	mov	r1, r3
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_GPIO_Init+0x94>)
 80013b6:	f000 ffbb 	bl	8002330 <HAL_GPIO_Init>

}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40011000 	.word	0x40011000

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_MspInit+0x5c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4a14      	ldr	r2, [pc, #80]	; (8001434 <HAL_MspInit+0x5c>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6193      	str	r3, [r2, #24]
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_MspInit+0x5c>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_MspInit+0x5c>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_MspInit+0x5c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	61d3      	str	r3, [r2, #28]
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_MspInit+0x5c>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_MspInit+0x60>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_MspInit+0x60>)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40021000 	.word	0x40021000
 8001438:	40010000 	.word	0x40010000

0800143c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2d      	ldr	r2, [pc, #180]	; (8001500 <HAL_TIM_Base_MspInit+0xc4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d142      	bne.n	80014d4 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_TIM_Base_MspInit+0xc8>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a2c      	ldr	r2, [pc, #176]	; (8001504 <HAL_TIM_Base_MspInit+0xc8>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_TIM_Base_MspInit+0xc8>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 8001468:	4a28      	ldr	r2, [pc, #160]	; (800150c <HAL_TIM_Base_MspInit+0xd0>)
 800146a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 800146e:	2210      	movs	r2, #16
 8001470:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 8001480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001484:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 8001488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 8001490:	2220      	movs	r2, #32
 8001492:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800149a:	481b      	ldr	r0, [pc, #108]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 800149c:	f000 fce4 	bl	8001e68 <HAL_DMA_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80014a6:	f7ff ff91 	bl	80013cc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a16      	ldr	r2, [pc, #88]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
 80014b0:	4a15      	ldr	r2, [pc, #84]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a13      	ldr	r2, [pc, #76]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 80014ba:	621a      	str	r2, [r3, #32]
 80014bc:	4a12      	ldr	r2, [pc, #72]	; (8001508 <HAL_TIM_Base_MspInit+0xcc>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	201d      	movs	r0, #29
 80014c8:	f000 fc97 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014cc:	201d      	movs	r0, #29
 80014ce:	f000 fcb0 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80014d2:	e010      	b.n	80014f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <HAL_TIM_Base_MspInit+0xd4>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10b      	bne.n	80014f6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_TIM_Base_MspInit+0xc8>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_TIM_Base_MspInit+0xc8>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_TIM_Base_MspInit+0xc8>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40000400 	.word	0x40000400
 8001504:	40021000 	.word	0x40021000
 8001508:	20000748 	.word	0x20000748
 800150c:	40020030 	.word	0x40020030
 8001510:	40000800 	.word	0x40000800

08001514 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_TIM_MspPostInit+0x94>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d118      	bne.n	8001566 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <HAL_TIM_MspPostInit+0x98>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <HAL_TIM_MspPostInit+0x98>)
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_TIM_MspPostInit+0x98>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800154c:	2302      	movs	r3, #2
 800154e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2302      	movs	r3, #2
 8001556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4619      	mov	r1, r3
 800155e:	4814      	ldr	r0, [pc, #80]	; (80015b0 <HAL_TIM_MspPostInit+0x9c>)
 8001560:	f000 fee6 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001564:	e01c      	b.n	80015a0 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <HAL_TIM_MspPostInit+0xa0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d117      	bne.n	80015a0 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_TIM_MspPostInit+0x98>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_TIM_MspPostInit+0x98>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_TIM_MspPostInit+0x98>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001588:	23c0      	movs	r3, #192	; 0xc0
 800158a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2302      	movs	r3, #2
 8001592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4619      	mov	r1, r3
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_TIM_MspPostInit+0x9c>)
 800159c:	f000 fec8 	bl	8002330 <HAL_GPIO_Init>
}
 80015a0:	bf00      	nop
 80015a2:	3720      	adds	r7, #32
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40000400 	.word	0x40000400
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	40000800 	.word	0x40000800

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a20      	ldr	r2, [pc, #128]	; (8001654 <HAL_UART_MspInit+0x9c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d139      	bne.n	800164c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <HAL_UART_MspInit+0xa0>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_UART_MspInit+0xa0>)
 80015de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <HAL_UART_MspInit+0xa0>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_UART_MspInit+0xa0>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_UART_MspInit+0xa0>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_UART_MspInit+0xa0>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4619      	mov	r1, r3
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <HAL_UART_MspInit+0xa4>)
 800161e:	f000 fe87 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	4809      	ldr	r0, [pc, #36]	; (800165c <HAL_UART_MspInit+0xa4>)
 8001638:	f000 fe7a 	bl	8002330 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2025      	movs	r0, #37	; 0x25
 8001642:	f000 fbda 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001646:	2025      	movs	r0, #37	; 0x25
 8001648:	f000 fbf3 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40013800 	.word	0x40013800
 8001658:	40021000 	.word	0x40021000
 800165c:	40010800 	.word	0x40010800

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <HardFault_Handler+0x4>

08001672 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <MemManage_Handler+0x4>

08001678 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <BusFault_Handler+0x4>

0800167e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <UsageFault_Handler+0x4>

08001684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ac:	f000 fa90 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DMA1_Channel3_IRQHandler+0x10>)
 80016ba:	f000 fd05 	bl	80020c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000748 	.word	0x20000748

080016c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <TIM3_IRQHandler+0x10>)
 80016ce:	f001 fe47 	bl	8003360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200006c8 	.word	0x200006c8

080016dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <USART1_IRQHandler+0x10>)
 80016e2:	f002 fdb7 	bl	8004254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000708 	.word	0x20000708

080016f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
	}

return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
	UNUSED(file);
	UNUSED(len);
	HAL_UART_Transmit( &huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	b29a      	uxth	r2, r3
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <_write+0x28>)
 8001744:	f002 fc99 	bl	800407a <HAL_UART_Transmit>

	return len;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000708 	.word	0x20000708

08001758 <_close>:

int _close(int file)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return -1;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800177e:	605a      	str	r2, [r3, #4]
	return 0;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <_isatty>:

int _isatty(int file)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	return 1;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x50>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x16>
		heap_end = &end;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <_sbrk+0x50>)
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <_sbrk+0x54>)
 80017cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <_sbrk+0x50>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <_sbrk+0x50>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	466a      	mov	r2, sp
 80017de:	4293      	cmp	r3, r2
 80017e0:	d907      	bls.n	80017f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017e2:	f003 f889 	bl	80048f8 <__errno>
 80017e6:	4602      	mov	r2, r0
 80017e8:	230c      	movs	r3, #12
 80017ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	e006      	b.n	8001800 <_sbrk+0x48>
	}

	heap_end += incr;
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <_sbrk+0x50>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a03      	ldr	r2, [pc, #12]	; (8001808 <_sbrk+0x50>)
 80017fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200005d4 	.word	0x200005d4
 800180c:	20000798 	.word	0x20000798

08001810 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <SystemInit+0x5c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <SystemInit+0x5c>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <SystemInit+0x5c>)
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4911      	ldr	r1, [pc, #68]	; (800186c <SystemInit+0x5c>)
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <SystemInit+0x60>)
 8001828:	4013      	ands	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <SystemInit+0x5c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <SystemInit+0x5c>)
 8001832:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <SystemInit+0x5c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <SystemInit+0x5c>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <SystemInit+0x5c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <SystemInit+0x5c>)
 800184e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001852:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <SystemInit+0x5c>)
 8001856:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800185a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SystemInit+0x64>)
 800185e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001862:	609a      	str	r2, [r3, #8]
#endif 
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000
 8001870:	f8ff0000 	.word	0xf8ff0000
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <start_led_sequence>:
		0,0,0,0,0,0,0,0
	}
};

void start_led_sequence(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(TIMER_HANDLER_PTR);
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <start_led_sequence+0x1c>)
 800187e:	f001 fb10 	bl	8002ea2 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start_DMA(TIMER_HANDLER_PTR, PWM_CHANNEL, (uint32_t *)led_table, sizeof(led_table)/2);
 8001882:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <start_led_sequence+0x20>)
 8001888:	210c      	movs	r1, #12
 800188a:	4802      	ldr	r0, [pc, #8]	; (8001894 <start_led_sequence+0x1c>)
 800188c:	f001 fbbc 	bl	8003008 <HAL_TIM_PWM_Start_DMA>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200006c8 	.word	0x200006c8
 8001898:	2000030c 	.word	0x2000030c

0800189c <stop_led_sequence>:

void stop_led_sequence(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(TIMER_HANDLER_PTR, PWM_CHANNEL);
 80018a0:	210c      	movs	r1, #12
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <stop_led_sequence+0x28>)
 80018a4:	f001 fcb6 	bl	8003214 <HAL_TIM_PWM_Stop_DMA>
	HAL_TIM_Base_Stop(TIMER_HANDLER_PTR);
 80018a8:	4806      	ldr	r0, [pc, #24]	; (80018c4 <stop_led_sequence+0x28>)
 80018aa:	f001 fb1d 	bl	8002ee8 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2102      	movs	r1, #2
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <stop_led_sequence+0x2c>)
 80018b4:	f000 fe96 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018b8:	200a      	movs	r0, #10
 80018ba:	f000 f9a5 	bl	8001c08 <HAL_Delay>

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200006c8 	.word	0x200006c8
 80018c8:	40010c00 	.word	0x40010c00

080018cc <set_color>:
void set_color(uint32_t color_rgb, uint16_t led_id)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
	if (led_id >= TOTAL_LEDS) return;
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d82e      	bhi.n	800193c <set_color+0x70>
	uint8_t red_color   = (color_rgb & 0xff0000)>>16;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	73fb      	strb	r3, [r7, #15]
	uint8_t green_color = (color_rgb & 0x00ff00)>>8;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	73bb      	strb	r3, [r7, #14]
	uint8_t blue_color  = (color_rgb & 0x0000ff);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	737b      	strb	r3, [r7, #13]
	set_pwm_entry_color(red_color  , &led_table[led_id][8]);
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	3310      	adds	r3, #16
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <set_color+0x78>)
 80018fc:	441a      	add	r2, r3
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f820 	bl	8001948 <set_pwm_entry_color>
	set_pwm_entry_color(green_color, &led_table[led_id][0]);
 8001908:	887a      	ldrh	r2, [r7, #2]
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <set_color+0x78>)
 8001914:	441a      	add	r2, r3
 8001916:	7bbb      	ldrb	r3, [r7, #14]
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f814 	bl	8001948 <set_pwm_entry_color>
	set_pwm_entry_color(blue_color , &led_table[led_id][16]);
 8001920:	887a      	ldrh	r2, [r7, #2]
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	3320      	adds	r3, #32
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <set_color+0x78>)
 800192e:	441a      	add	r2, r3
 8001930:	7b7b      	ldrb	r3, [r7, #13]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f807 	bl	8001948 <set_pwm_entry_color>
 800193a:	e000      	b.n	800193e <set_color+0x72>
	if (led_id >= TOTAL_LEDS) return;
 800193c:	bf00      	nop
}
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	2000030c 	.word	0x2000030c

08001948 <set_pwm_entry_color>:

void set_pwm_entry_color(uint8_t color, uint16_t *color_ptr)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
	uint8_t bits;
//w0	memset(color_ptr,0, 8);
	for(bits=0; bits<8;bits++){
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e019      	b.n	800198e <set_pwm_entry_color+0x46>
		if (((color >>(7-bits) & 0x01))){
 800195a:	79fa      	ldrb	r2, [r7, #7]
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	fa42 f303 	asr.w	r3, r2, r3
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <set_pwm_entry_color+0x34>
			color_ptr[bits] = W1;
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	4413      	add	r3, r2
 8001976:	2234      	movs	r2, #52	; 0x34
 8001978:	801a      	strh	r2, [r3, #0]
 800197a:	e005      	b.n	8001988 <set_pwm_entry_color+0x40>
		}else{
			color_ptr[bits] = W0;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	4413      	add	r3, r2
 8001984:	221a      	movs	r2, #26
 8001986:	801a      	strh	r2, [r3, #0]
	for(bits=0; bits<8;bits++){
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	3301      	adds	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	2b07      	cmp	r3, #7
 8001992:	d9e2      	bls.n	800195a <set_pwm_entry_color+0x12>
		}
	}

}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
	...

080019a0 <parse_led_color_input>:
void parse_led_color_input(char *ascii_color, uint32_t *color_out){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]

	stop_led_sequence();
 80019aa:	f7ff ff77 	bl	800189c <stop_led_sequence>
	uint8_t *p_char = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
	uint8_t led_id = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	72fb      	strb	r3, [r7, #11]
	p_char = (uint8_t *) strchr((char *)ascii_color,' ');
 80019b6:	2120      	movs	r1, #32
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f003 f913 	bl	8004be4 <strchr>
 80019be:	60f8      	str	r0, [r7, #12]
	if (p_char == 0)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d015      	beq.n	80019f2 <parse_led_color_input+0x52>
		return;
	led_id = (uint8_t)((*ascii_color)-'0');
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	3b30      	subs	r3, #48	; 0x30
 80019cc:	72fb      	strb	r3, [r7, #11]
	printf("Led is [%x] , color [%s]\r\n",led_id ,(char *)(p_char+1));
 80019ce:	7af9      	ldrb	r1, [r7, #11]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	461a      	mov	r2, r3
 80019d6:	4809      	ldr	r0, [pc, #36]	; (80019fc <parse_led_color_input+0x5c>)
 80019d8:	f002 ffda 	bl	8004990 <iprintf>
	led_set_color_ascii((char *)(p_char+1),led_id,0 );
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3301      	adds	r3, #1
 80019e0:	7afa      	ldrb	r2, [r7, #11]
 80019e2:	b291      	uxth	r1, r2
 80019e4:	2200      	movs	r2, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f80a 	bl	8001a00 <led_set_color_ascii>
	start_led_sequence();
 80019ec:	f7ff ff44 	bl	8001878 <start_led_sequence>
 80019f0:	e000      	b.n	80019f4 <parse_led_color_input+0x54>
		return;
 80019f2:	bf00      	nop
}
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	08005aa0 	.word	0x08005aa0

08001a00 <led_set_color_ascii>:


void led_set_color_ascii(char *ascii_color ,uint16_t led_id, uint32_t *color_out)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	817b      	strh	r3, [r7, #10]
	uint32_t color_out_local;

	color_out_local = ascii_to_to_hex((uint8_t *)ascii_color,'h');
 8001a0e:	2168      	movs	r1, #104	; 0x68
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f83c 	bl	8001a8e <ascii_to_to_hex>
 8001a16:	6178      	str	r0, [r7, #20]
	if (color_out_local == INVALID_DIGIT_CONVERTION) return;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1e:	d00b      	beq.n	8001a38 <led_set_color_ascii+0x38>

	set_color(color_out_local, led_id);
 8001a20:	897b      	ldrh	r3, [r7, #10]
 8001a22:	4619      	mov	r1, r3
 8001a24:	6978      	ldr	r0, [r7, #20]
 8001a26:	f7ff ff51 	bl	80018cc <set_color>
	if (color_out != 0){
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <led_set_color_ascii+0x3a>
		*color_out = color_out_local;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e000      	b.n	8001a3a <led_set_color_ascii+0x3a>
	if (color_out_local == INVALID_DIGIT_CONVERTION) return;
 8001a38:	bf00      	nop
	}
}
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <hexascii_to_hex>:



static uint32_t hexascii_to_hex( char  hex_char) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]

	if ( hex_char <= 'F' && hex_char >= 'A') return (hex_char -'A')+10;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b46      	cmp	r3, #70	; 0x46
 8001a4e:	d805      	bhi.n	8001a5c <hexascii_to_hex+0x1c>
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b40      	cmp	r3, #64	; 0x40
 8001a54:	d902      	bls.n	8001a5c <hexascii_to_hex+0x1c>
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	3b37      	subs	r3, #55	; 0x37
 8001a5a:	e013      	b.n	8001a84 <hexascii_to_hex+0x44>

	if ( hex_char <= 'f' && hex_char >= 'a') return (hex_char -'a')+10;
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	2b66      	cmp	r3, #102	; 0x66
 8001a60:	d805      	bhi.n	8001a6e <hexascii_to_hex+0x2e>
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b60      	cmp	r3, #96	; 0x60
 8001a66:	d902      	bls.n	8001a6e <hexascii_to_hex+0x2e>
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	3b57      	subs	r3, #87	; 0x57
 8001a6c:	e00a      	b.n	8001a84 <hexascii_to_hex+0x44>

	if ( hex_char <= '9' && hex_char >= '0') return (hex_char -'0');
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b39      	cmp	r3, #57	; 0x39
 8001a72:	d805      	bhi.n	8001a80 <hexascii_to_hex+0x40>
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b2f      	cmp	r3, #47	; 0x2f
 8001a78:	d902      	bls.n	8001a80 <hexascii_to_hex+0x40>
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	3b30      	subs	r3, #48	; 0x30
 8001a7e:	e001      	b.n	8001a84 <hexascii_to_hex+0x44>

	return INVALID_DIGIT_CONVERTION;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 }
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <ascii_to_to_hex>:

 #define MAX_DIGITS                 6
static uint32_t ascii_to_to_hex(uint8_t *stream_pointer, uint8_t convertion_type)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
	uint32_t hex_result        = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
	uint8_t stream_length      = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	74fb      	strb	r3, [r7, #19]
	uint16_t converted_digit   = 1;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	81fb      	strh	r3, [r7, #14]
	uint16_t convertion_offset = 0x10;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	823b      	strh	r3, [r7, #16]

	if (convertion_type != 'h')
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	2b68      	cmp	r3, #104	; 0x68
 8001aae:	d016      	beq.n	8001ade <ascii_to_to_hex+0x50>
		convertion_offset = 0xa;
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	823b      	strh	r3, [r7, #16]

	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 8001ab4:	e013      	b.n	8001ade <ascii_to_to_hex+0x50>

		converted_digit = ( hexascii_to_hex(*stream_pointer));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ffc0 	bl	8001a40 <hexascii_to_hex>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	81fb      	strh	r3, [r7, #14]
		if (INVALID_DIGIT_CONVERTION == converted_digit) {
			return  INVALID_DIGIT_CONVERTION;
			break;
		}
		hex_result = (hex_result * convertion_offset) + converted_digit;
 8001ac4:	8a3b      	ldrh	r3, [r7, #16]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	fb02 f203 	mul.w	r2, r2, r3
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	4413      	add	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]
		stream_pointer++;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
		stream_length++;
 8001ad8:	7cfb      	ldrb	r3, [r7, #19]
 8001ada:	3301      	adds	r3, #1
 8001adc:	74fb      	strb	r3, [r7, #19]
	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 8001ade:	7cfb      	ldrb	r3, [r7, #19]
 8001ae0:	2b06      	cmp	r3, #6
 8001ae2:	d003      	beq.n	8001aec <ascii_to_to_hex+0x5e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e4      	bne.n	8001ab6 <ascii_to_to_hex+0x28>
	}
	return hex_result;
 8001aec:	697b      	ldr	r3, [r7, #20]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001af8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001afa:	e003      	b.n	8001b04 <LoopCopyDataInit>

08001afc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001afe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b02:	3104      	adds	r1, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b04:	480a      	ldr	r0, [pc, #40]	; (8001b30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b0c:	d3f6      	bcc.n	8001afc <CopyDataInit>
  ldr r2, =_sbss
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b10:	e002      	b.n	8001b18 <LoopFillZerobss>

08001b12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b14:	f842 3b04 	str.w	r3, [r2], #4

08001b18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b1c:	d3f9      	bcc.n	8001b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b1e:	f7ff fe77 	bl	8001810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b22:	f002 feef 	bl	8004904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b26:	f7ff f9e9 	bl	8000efc <main>
  bx lr
 8001b2a:	4770      	bx	lr
  ldr r3, =_sidata
 8001b2c:	08005b88 	.word	0x08005b88
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b34:	200005b8 	.word	0x200005b8
  ldr r2, =_sbss
 8001b38:	200005b8 	.word	0x200005b8
  ldr r3, = _ebss
 8001b3c:	20000794 	.word	0x20000794

08001b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_2_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_Init+0x28>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_Init+0x28>)
 8001b4e:	f043 0310 	orr.w	r3, r3, #16
 8001b52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 f945 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f808 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7ff fc3a 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40022000 	.word	0x40022000

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x58>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f95d 	bl	8001e4e <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f000 f925 	bl	8001dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <HAL_InitTick+0x5c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000308 	.word	0x20000308
 8001bc8:	20000550 	.word	0x20000550
 8001bcc:	2000054c 	.word	0x2000054c

08001bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_IncTick+0x20>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000550 	.word	0x20000550
 8001bf0:	2000078c 	.word	0x2000078c

08001bf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_GetTick+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	2000078c 	.word	0x2000078c

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_Delay+0x40>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffe0 	bl	8001bf4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000550 	.word	0x20000550

08001c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <__NVIC_GetPriorityGrouping+0x18>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db0b      	blt.n	8001cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	4906      	ldr	r1, [pc, #24]	; (8001ce4 <__NVIC_EnableIRQ+0x34>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f7ff ff90 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff2d 	bl	8001c4c <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff42 	bl	8001c94 <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff90 	bl	8001d3c <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5f 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff35 	bl	8001cb0 <__NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffa2 	bl	8001da0 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e043      	b.n	8001f06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_DMA_Init+0xa8>)
 8001e86:	4413      	add	r3, r2
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <HAL_DMA_Init+0xac>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	009a      	lsls	r2, r3, #2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_DMA_Init+0xb0>)
 8001e9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001eb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001eb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	bffdfff8 	.word	0xbffdfff8
 8001f14:	cccccccd 	.word	0xcccccccd
 8001f18:	40020000 	.word	0x40020000

08001f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_DMA_Start_IT+0x20>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e04a      	b.n	8001fd2 <HAL_DMA_Start_IT+0xb6>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d13a      	bne.n	8001fc4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f9ae 	bl	80022d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 020e 	orr.w	r2, r2, #14
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e00f      	b.n	8001fb2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0204 	bic.w	r2, r2, #4
 8001fa0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 020a 	orr.w	r2, r2, #10
 8001fb0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e005      	b.n	8001fd0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d005      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e051      	b.n	80020a2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 020e 	bic.w	r2, r2, #14
 800200c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_DMA_Abort_IT+0xd0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d029      	beq.n	800207c <HAL_DMA_Abort_IT+0xa0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <HAL_DMA_Abort_IT+0xd4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d022      	beq.n	8002078 <HAL_DMA_Abort_IT+0x9c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <HAL_DMA_Abort_IT+0xd8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d01a      	beq.n	8002072 <HAL_DMA_Abort_IT+0x96>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_DMA_Abort_IT+0xdc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d012      	beq.n	800206c <HAL_DMA_Abort_IT+0x90>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_DMA_Abort_IT+0xe0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00a      	beq.n	8002066 <HAL_DMA_Abort_IT+0x8a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_DMA_Abort_IT+0xe4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d102      	bne.n	8002060 <HAL_DMA_Abort_IT+0x84>
 800205a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800205e:	e00e      	b.n	800207e <HAL_DMA_Abort_IT+0xa2>
 8002060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002064:	e00b      	b.n	800207e <HAL_DMA_Abort_IT+0xa2>
 8002066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800206a:	e008      	b.n	800207e <HAL_DMA_Abort_IT+0xa2>
 800206c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002070:	e005      	b.n	800207e <HAL_DMA_Abort_IT+0xa2>
 8002072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002076:	e002      	b.n	800207e <HAL_DMA_Abort_IT+0xa2>
 8002078:	2310      	movs	r3, #16
 800207a:	e000      	b.n	800207e <HAL_DMA_Abort_IT+0xa2>
 800207c:	2301      	movs	r3, #1
 800207e:	4a11      	ldr	r2, [pc, #68]	; (80020c4 <HAL_DMA_Abort_IT+0xe8>)
 8002080:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
    } 
  }
  return status;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40020008 	.word	0x40020008
 80020b0:	4002001c 	.word	0x4002001c
 80020b4:	40020030 	.word	0x40020030
 80020b8:	40020044 	.word	0x40020044
 80020bc:	40020058 	.word	0x40020058
 80020c0:	4002006c 	.word	0x4002006c
 80020c4:	40020000 	.word	0x40020000

080020c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	2204      	movs	r2, #4
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d04f      	beq.n	8002190 <HAL_DMA_IRQHandler+0xc8>
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04a      	beq.n	8002190 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0204 	bic.w	r2, r2, #4
 8002116:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_DMA_IRQHandler+0x1f0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d029      	beq.n	8002176 <HAL_DMA_IRQHandler+0xae>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a65      	ldr	r2, [pc, #404]	; (80022bc <HAL_DMA_IRQHandler+0x1f4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d022      	beq.n	8002172 <HAL_DMA_IRQHandler+0xaa>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_DMA_IRQHandler+0x1f8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01a      	beq.n	800216c <HAL_DMA_IRQHandler+0xa4>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a62      	ldr	r2, [pc, #392]	; (80022c4 <HAL_DMA_IRQHandler+0x1fc>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d012      	beq.n	8002166 <HAL_DMA_IRQHandler+0x9e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a60      	ldr	r2, [pc, #384]	; (80022c8 <HAL_DMA_IRQHandler+0x200>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00a      	beq.n	8002160 <HAL_DMA_IRQHandler+0x98>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a5f      	ldr	r2, [pc, #380]	; (80022cc <HAL_DMA_IRQHandler+0x204>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d102      	bne.n	800215a <HAL_DMA_IRQHandler+0x92>
 8002154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002158:	e00e      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 800215a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800215e:	e00b      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 8002160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002164:	e008      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 8002166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800216a:	e005      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 800216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002170:	e002      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 8002172:	2340      	movs	r3, #64	; 0x40
 8002174:	e000      	b.n	8002178 <HAL_DMA_IRQHandler+0xb0>
 8002176:	2304      	movs	r3, #4
 8002178:	4a55      	ldr	r2, [pc, #340]	; (80022d0 <HAL_DMA_IRQHandler+0x208>)
 800217a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 8094 	beq.w	80022ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800218e:	e08e      	b.n	80022ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	2202      	movs	r2, #2
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d056      	beq.n	800224e <HAL_DMA_IRQHandler+0x186>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d051      	beq.n	800224e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10b      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 020a 	bic.w	r2, r2, #10
 80021c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a38      	ldr	r2, [pc, #224]	; (80022b8 <HAL_DMA_IRQHandler+0x1f0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d029      	beq.n	800222e <HAL_DMA_IRQHandler+0x166>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a37      	ldr	r2, [pc, #220]	; (80022bc <HAL_DMA_IRQHandler+0x1f4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d022      	beq.n	800222a <HAL_DMA_IRQHandler+0x162>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a35      	ldr	r2, [pc, #212]	; (80022c0 <HAL_DMA_IRQHandler+0x1f8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01a      	beq.n	8002224 <HAL_DMA_IRQHandler+0x15c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <HAL_DMA_IRQHandler+0x1fc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d012      	beq.n	800221e <HAL_DMA_IRQHandler+0x156>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a32      	ldr	r2, [pc, #200]	; (80022c8 <HAL_DMA_IRQHandler+0x200>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00a      	beq.n	8002218 <HAL_DMA_IRQHandler+0x150>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a31      	ldr	r2, [pc, #196]	; (80022cc <HAL_DMA_IRQHandler+0x204>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d102      	bne.n	8002212 <HAL_DMA_IRQHandler+0x14a>
 800220c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002210:	e00e      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 8002212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002216:	e00b      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 8002218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800221c:	e008      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 800221e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002222:	e005      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 8002224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002228:	e002      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 800222a:	2320      	movs	r3, #32
 800222c:	e000      	b.n	8002230 <HAL_DMA_IRQHandler+0x168>
 800222e:	2302      	movs	r3, #2
 8002230:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <HAL_DMA_IRQHandler+0x208>)
 8002232:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	d034      	beq.n	80022ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800224c:	e02f      	b.n	80022ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	2208      	movs	r2, #8
 8002254:	409a      	lsls	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d028      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x1e8>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 020e 	bic.w	r2, r2, #14
 8002276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	2101      	movs	r1, #1
 8002282:	fa01 f202 	lsl.w	r2, r1, r2
 8002286:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
    }
  }
  return;
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
}
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40020008 	.word	0x40020008
 80022bc:	4002001c 	.word	0x4002001c
 80022c0:	40020030 	.word	0x40020030
 80022c4:	40020044 	.word	0x40020044
 80022c8:	40020058 	.word	0x40020058
 80022cc:	4002006c 	.word	0x4002006c
 80022d0:	40020000 	.word	0x40020000

080022d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d108      	bne.n	8002314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002312:	e007      	b.n	8002324 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	60da      	str	r2, [r3, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
	...

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b08b      	sub	sp, #44	; 0x2c
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002342:	e127      	b.n	8002594 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002344:	2201      	movs	r2, #1
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	429a      	cmp	r2, r3
 800235e:	f040 8116 	bne.w	800258e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b12      	cmp	r3, #18
 8002368:	d034      	beq.n	80023d4 <HAL_GPIO_Init+0xa4>
 800236a:	2b12      	cmp	r3, #18
 800236c:	d80d      	bhi.n	800238a <HAL_GPIO_Init+0x5a>
 800236e:	2b02      	cmp	r3, #2
 8002370:	d02b      	beq.n	80023ca <HAL_GPIO_Init+0x9a>
 8002372:	2b02      	cmp	r3, #2
 8002374:	d804      	bhi.n	8002380 <HAL_GPIO_Init+0x50>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d031      	beq.n	80023de <HAL_GPIO_Init+0xae>
 800237a:	2b01      	cmp	r3, #1
 800237c:	d01c      	beq.n	80023b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800237e:	e048      	b.n	8002412 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002380:	2b03      	cmp	r3, #3
 8002382:	d043      	beq.n	800240c <HAL_GPIO_Init+0xdc>
 8002384:	2b11      	cmp	r3, #17
 8002386:	d01b      	beq.n	80023c0 <HAL_GPIO_Init+0x90>
          break;
 8002388:	e043      	b.n	8002412 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800238a:	4a89      	ldr	r2, [pc, #548]	; (80025b0 <HAL_GPIO_Init+0x280>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d026      	beq.n	80023de <HAL_GPIO_Init+0xae>
 8002390:	4a87      	ldr	r2, [pc, #540]	; (80025b0 <HAL_GPIO_Init+0x280>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d806      	bhi.n	80023a4 <HAL_GPIO_Init+0x74>
 8002396:	4a87      	ldr	r2, [pc, #540]	; (80025b4 <HAL_GPIO_Init+0x284>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d020      	beq.n	80023de <HAL_GPIO_Init+0xae>
 800239c:	4a86      	ldr	r2, [pc, #536]	; (80025b8 <HAL_GPIO_Init+0x288>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01d      	beq.n	80023de <HAL_GPIO_Init+0xae>
          break;
 80023a2:	e036      	b.n	8002412 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023a4:	4a85      	ldr	r2, [pc, #532]	; (80025bc <HAL_GPIO_Init+0x28c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0xae>
 80023aa:	4a85      	ldr	r2, [pc, #532]	; (80025c0 <HAL_GPIO_Init+0x290>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d016      	beq.n	80023de <HAL_GPIO_Init+0xae>
 80023b0:	4a84      	ldr	r2, [pc, #528]	; (80025c4 <HAL_GPIO_Init+0x294>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0xae>
          break;
 80023b6:	e02c      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e028      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	3304      	adds	r3, #4
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e023      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	3308      	adds	r3, #8
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e01e      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	330c      	adds	r3, #12
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e019      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e6:	2304      	movs	r3, #4
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e012      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	611a      	str	r2, [r3, #16]
          break;
 80023fe:	e008      	b.n	8002412 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	615a      	str	r2, [r3, #20]
          break;
 800240a:	e002      	b.n	8002412 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2bff      	cmp	r3, #255	; 0xff
 8002416:	d801      	bhi.n	800241c <HAL_GPIO_Init+0xec>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	e001      	b.n	8002420 <HAL_GPIO_Init+0xf0>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2bff      	cmp	r3, #255	; 0xff
 8002426:	d802      	bhi.n	800242e <HAL_GPIO_Init+0xfe>
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x104>
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	3b08      	subs	r3, #8
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	210f      	movs	r1, #15
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	401a      	ands	r2, r3
 8002446:	6a39      	ldr	r1, [r7, #32]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	431a      	orrs	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8096 	beq.w	800258e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002462:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_GPIO_Init+0x298>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_GPIO_Init+0x298>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6193      	str	r3, [r2, #24]
 800246e:	4b56      	ldr	r3, [pc, #344]	; (80025c8 <HAL_GPIO_Init+0x298>)
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800247a:	4a54      	ldr	r2, [pc, #336]	; (80025cc <HAL_GPIO_Init+0x29c>)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4b      	ldr	r2, [pc, #300]	; (80025d0 <HAL_GPIO_Init+0x2a0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x19e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4a      	ldr	r2, [pc, #296]	; (80025d4 <HAL_GPIO_Init+0x2a4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x19a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <HAL_GPIO_Init+0x2a8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x196>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a48      	ldr	r2, [pc, #288]	; (80025dc <HAL_GPIO_Init+0x2ac>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x192>
 80024be:	2303      	movs	r3, #3
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x1a0>
 80024c2:	2304      	movs	r3, #4
 80024c4:	e004      	b.n	80024d0 <HAL_GPIO_Init+0x1a0>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_Init+0x1a0>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x1a0>
 80024ce:	2300      	movs	r3, #0
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	f002 0203 	and.w	r2, r2, #3
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	4093      	lsls	r3, r2
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024e0:	493a      	ldr	r1, [pc, #232]	; (80025cc <HAL_GPIO_Init+0x29c>)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024fa:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4938      	ldr	r1, [pc, #224]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
 8002506:	e006      	b.n	8002516 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002508:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	43db      	mvns	r3, r3
 8002510:	4933      	ldr	r1, [pc, #204]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002512:	4013      	ands	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	492e      	ldr	r1, [pc, #184]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
 800252e:	e006      	b.n	800253e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	43db      	mvns	r3, r3
 8002538:	4929      	ldr	r1, [pc, #164]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 800253a:	4013      	ands	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800254a:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	4924      	ldr	r1, [pc, #144]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	608b      	str	r3, [r1, #8]
 8002556:	e006      	b.n	8002566 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002558:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	43db      	mvns	r3, r3
 8002560:	491f      	ldr	r1, [pc, #124]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002562:	4013      	ands	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	491a      	ldr	r1, [pc, #104]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	60cb      	str	r3, [r1, #12]
 800257e:	e006      	b.n	800258e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	43db      	mvns	r3, r3
 8002588:	4915      	ldr	r1, [pc, #84]	; (80025e0 <HAL_GPIO_Init+0x2b0>)
 800258a:	4013      	ands	r3, r2
 800258c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	3301      	adds	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f47f aed0 	bne.w	8002344 <HAL_GPIO_Init+0x14>
  }
}
 80025a4:	bf00      	nop
 80025a6:	372c      	adds	r7, #44	; 0x2c
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	10210000 	.word	0x10210000
 80025b4:	10110000 	.word	0x10110000
 80025b8:	10120000 	.word	0x10120000
 80025bc:	10310000 	.word	0x10310000
 80025c0:	10320000 	.word	0x10320000
 80025c4:	10220000 	.word	0x10220000
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000
 80025d0:	40010800 	.word	0x40010800
 80025d4:	40010c00 	.word	0x40010c00
 80025d8:	40011000 	.word	0x40011000
 80025dc:	40011400 	.word	0x40011400
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002600:	e003      	b.n	800260a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	041a      	lsls	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	611a      	str	r2, [r3, #16]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e26c      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8087 	beq.w	8002742 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002634:	4b92      	ldr	r3, [pc, #584]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b04      	cmp	r3, #4
 800263e:	d00c      	beq.n	800265a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002640:	4b8f      	ldr	r3, [pc, #572]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d112      	bne.n	8002672 <HAL_RCC_OscConfig+0x5e>
 800264c:	4b8c      	ldr	r3, [pc, #560]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d10b      	bne.n	8002672 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265a:	4b89      	ldr	r3, [pc, #548]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d06c      	beq.n	8002740 <HAL_RCC_OscConfig+0x12c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d168      	bne.n	8002740 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e246      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x76>
 800267c:	4b80      	ldr	r3, [pc, #512]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a7f      	ldr	r2, [pc, #508]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e02e      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x98>
 8002692:	4b7b      	ldr	r3, [pc, #492]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7a      	ldr	r2, [pc, #488]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b78      	ldr	r3, [pc, #480]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a77      	ldr	r2, [pc, #476]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e01d      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0xbc>
 80026b6:	4b72      	ldr	r3, [pc, #456]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a71      	ldr	r2, [pc, #452]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6e      	ldr	r2, [pc, #440]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 80026d0:	4b6b      	ldr	r3, [pc, #428]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a6a      	ldr	r2, [pc, #424]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b68      	ldr	r3, [pc, #416]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a67      	ldr	r2, [pc, #412]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7ff fa80 	bl	8001bf4 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7ff fa7c 	bl	8001bf4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1fa      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b5d      	ldr	r3, [pc, #372]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe4>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7ff fa6c 	bl	8001bf4 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7ff fa68 	bl	8001bf4 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e1e6      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x10c>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d063      	beq.n	8002816 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800274e:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800275a:	4b49      	ldr	r3, [pc, #292]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b08      	cmp	r3, #8
 8002764:	d11c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x18c>
 8002766:	4b46      	ldr	r3, [pc, #280]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d116      	bne.n	80027a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_RCC_OscConfig+0x176>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e1ba      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4939      	ldr	r1, [pc, #228]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	e03a      	b.n	8002816 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d020      	beq.n	80027ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff fa21 	bl	8001bf4 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7ff fa1d 	bl	8001bf4 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e19b      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c8:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4927      	ldr	r1, [pc, #156]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]
 80027e8:	e015      	b.n	8002816 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_RCC_OscConfig+0x270>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7ff fa00 	bl	8001bf4 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f8:	f7ff f9fc 	bl	8001bf4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e17a      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d03a      	beq.n	8002898 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d019      	beq.n	800285e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282a:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002830:	f7ff f9e0 	bl	8001bf4 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002838:	f7ff f9dc 	bl	8001bf4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e15a      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <HAL_RCC_OscConfig+0x26c>)
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002856:	2001      	movs	r0, #1
 8002858:	f000 fada 	bl	8002e10 <RCC_Delay>
 800285c:	e01c      	b.n	8002898 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_RCC_OscConfig+0x274>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7ff f9c6 	bl	8001bf4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286a:	e00f      	b.n	800288c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7ff f9c2 	bl	8001bf4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d908      	bls.n	800288c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e140      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	42420000 	.word	0x42420000
 8002888:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b9e      	ldr	r3, [pc, #632]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e9      	bne.n	800286c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a6 	beq.w	80029f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028aa:	4b97      	ldr	r3, [pc, #604]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	4b94      	ldr	r3, [pc, #592]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4a93      	ldr	r2, [pc, #588]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c0:	61d3      	str	r3, [r2, #28]
 80028c2:	4b91      	ldr	r3, [pc, #580]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b8e      	ldr	r3, [pc, #568]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d118      	bne.n	8002910 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b8b      	ldr	r3, [pc, #556]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a8a      	ldr	r2, [pc, #552]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f7ff f983 	bl	8001bf4 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f2:	f7ff f97f 	bl	8001bf4 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b64      	cmp	r3, #100	; 0x64
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e0fd      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b81      	ldr	r3, [pc, #516]	; (8002b0c <HAL_RCC_OscConfig+0x4f8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x312>
 8002918:	4b7b      	ldr	r3, [pc, #492]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a7a      	ldr	r2, [pc, #488]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	e02d      	b.n	8002982 <HAL_RCC_OscConfig+0x36e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x334>
 800292e:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a75      	ldr	r2, [pc, #468]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6213      	str	r3, [r2, #32]
 800293a:	4b73      	ldr	r3, [pc, #460]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4a72      	ldr	r2, [pc, #456]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002940:	f023 0304 	bic.w	r3, r3, #4
 8002944:	6213      	str	r3, [r2, #32]
 8002946:	e01c      	b.n	8002982 <HAL_RCC_OscConfig+0x36e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d10c      	bne.n	800296a <HAL_RCC_OscConfig+0x356>
 8002950:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a6c      	ldr	r2, [pc, #432]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	4b6a      	ldr	r3, [pc, #424]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a69      	ldr	r2, [pc, #420]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6213      	str	r3, [r2, #32]
 8002968:	e00b      	b.n	8002982 <HAL_RCC_OscConfig+0x36e>
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a66      	ldr	r2, [pc, #408]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6213      	str	r3, [r2, #32]
 8002976:	4b64      	ldr	r3, [pc, #400]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4a63      	ldr	r2, [pc, #396]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	f023 0304 	bic.w	r3, r3, #4
 8002980:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d015      	beq.n	80029b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7ff f933 	bl	8001bf4 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7ff f92f 	bl	8001bf4 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0ab      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ee      	beq.n	8002992 <HAL_RCC_OscConfig+0x37e>
 80029b4:	e014      	b.n	80029e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b6:	f7ff f91d 	bl	8001bf4 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7ff f919 	bl	8001bf4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e095      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d4:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1ee      	bne.n	80029be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e6:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a47      	ldr	r2, [pc, #284]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8081 	beq.w	8002afe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d061      	beq.n	8002acc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d146      	bne.n	8002a9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a10:	4b3f      	ldr	r3, [pc, #252]	; (8002b10 <HAL_RCC_OscConfig+0x4fc>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7ff f8ed 	bl	8001bf4 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7ff f8e9 	bl	8001bf4 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e067      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a30:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a44:	d108      	bne.n	8002a58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a46:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	492d      	ldr	r1, [pc, #180]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a19      	ldr	r1, [r3, #32]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	4927      	ldr	r1, [pc, #156]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_RCC_OscConfig+0x4fc>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7ff f8bd 	bl	8001bf4 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7e:	f7ff f8b9 	bl	8001bf4 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e037      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x46a>
 8002a9c:	e02f      	b.n	8002afe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_RCC_OscConfig+0x4fc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7ff f8a6 	bl	8001bf4 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7ff f8a2 	bl	8001bf4 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e020      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x498>
 8002aca:	e018      	b.n	8002afe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e013      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	42420060 	.word	0x42420060

08002b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0d0      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d910      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 0207 	bic.w	r2, r3, #7
 8002b3e:	4965      	ldr	r1, [pc, #404]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d040      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d115      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e073      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06b      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4936      	ldr	r1, [pc, #216]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c04:	f7fe fff6 	bl	8001bf4 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fe fff2 	bl	8001bf4 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e053      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 020c 	and.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1eb      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d210      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	4922      	ldr	r1, [pc, #136]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e032      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ca2:	f000 f821 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe ff54 	bl	8001b70 <HAL_InitTick>

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08005ad0 	.word	0x08005ad0
 8002ce0:	20000308 	.word	0x20000308
 8002ce4:	2000054c 	.word	0x2000054c

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	b490      	push	{r4, r7}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cee:	4b2a      	ldr	r3, [pc, #168]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf0:	1d3c      	adds	r4, r7, #4
 8002cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	2300      	movs	r3, #0
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d12:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d002      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x40>
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x46>
 8002d26:	e02d      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d2a:	623b      	str	r3, [r7, #32]
      break;
 8002d2c:	e02d      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	0c9b      	lsrs	r3, r3, #18
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d4c:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	0c5b      	lsrs	r3, r3, #17
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d66:	fb02 f203 	mul.w	r2, r2, r3
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	e004      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	623b      	str	r3, [r7, #32]
      break;
 8002d82:	e002      	b.n	8002d8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d86:	623b      	str	r3, [r7, #32]
      break;
 8002d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc90      	pop	{r4, r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	08005abc 	.word	0x08005abc
 8002d9c:	08005acc 	.word	0x08005acc
 8002da0:	40021000 	.word	0x40021000
 8002da4:	007a1200 	.word	0x007a1200
 8002da8:	003d0900 	.word	0x003d0900

08002dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b02      	ldr	r3, [pc, #8]	; (8002dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	20000308 	.word	0x20000308

08002dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc4:	f7ff fff2 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dc8:	4601      	mov	r1, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4a03      	ldr	r2, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd6:	5cd3      	ldrb	r3, [r2, r3]
 8002dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	08005ae0 	.word	0x08005ae0

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dec:	f7ff ffde 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002df0:	4601      	mov	r1, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	0adb      	lsrs	r3, r3, #11
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4a03      	ldr	r2, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08005ae0 	.word	0x08005ae0

08002e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <RCC_Delay+0x34>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <RCC_Delay+0x38>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0a5b      	lsrs	r3, r3, #9
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e2c:	bf00      	nop
  }
  while (Delay --);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1e5a      	subs	r2, r3, #1
 8002e32:	60fa      	str	r2, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f9      	bne.n	8002e2c <RCC_Delay+0x1c>
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000308 	.word	0x20000308
 8002e48:	10624dd3 	.word	0x10624dd3

08002e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e01d      	b.n	8002e9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fe fae2 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f000 fdae 	bl	80039ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b06      	cmp	r3, #6
 8002ec2:	d007      	beq.n	8002ed4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10f      	bne.n	8002f28 <HAL_TIM_Base_Stop+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a1a      	ldr	r2, [r3, #32]
 8002f0e:	f240 4344 	movw	r3, #1092	; 0x444
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <HAL_TIM_Base_Stop+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e01d      	b.n	8002f8a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f815 	bl	8002f92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f000 fd36 	bl	80039ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 ff98 	bl	8003eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a10      	ldr	r2, [pc, #64]	; (8003004 <HAL_TIM_PWM_Start+0x60>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d107      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b06      	cmp	r3, #6
 8002fe6:	d007      	beq.n	8002ff8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40012c00 	.word	0x40012c00

08003008 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d101      	bne.n	8003026 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
 8003024:	e0e9      	b.n	80031fa <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10b      	bne.n	800304a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <HAL_TIM_PWM_Start_DMA+0x3a>
 8003038:	887b      	ldrh	r3, [r7, #2]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0db      	b.n	80031fa <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	f200 80ad 	bhi.w	80031ac <HAL_TIM_PWM_Start_DMA+0x1a4>
 8003052:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <HAL_TIM_PWM_Start_DMA+0x50>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	0800308d 	.word	0x0800308d
 800305c:	080031ad 	.word	0x080031ad
 8003060:	080031ad 	.word	0x080031ad
 8003064:	080031ad 	.word	0x080031ad
 8003068:	080030d5 	.word	0x080030d5
 800306c:	080031ad 	.word	0x080031ad
 8003070:	080031ad 	.word	0x080031ad
 8003074:	080031ad 	.word	0x080031ad
 8003078:	0800311d 	.word	0x0800311d
 800307c:	080031ad 	.word	0x080031ad
 8003080:	080031ad 	.word	0x080031ad
 8003084:	080031ad 	.word	0x080031ad
 8003088:	08003165 	.word	0x08003165
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	4a5c      	ldr	r2, [pc, #368]	; (8003204 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	4a5b      	ldr	r2, [pc, #364]	; (8003208 <HAL_TIM_PWM_Start_DMA+0x200>)
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	4a5a      	ldr	r2, [pc, #360]	; (800320c <HAL_TIM_PWM_Start_DMA+0x204>)
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3334      	adds	r3, #52	; 0x34
 80030b0:	461a      	mov	r2, r3
 80030b2:	887b      	ldrh	r3, [r7, #2]
 80030b4:	f7fe ff32 	bl	8001f1c <HAL_DMA_Start_IT>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e09b      	b.n	80031fa <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d0:	60da      	str	r2, [r3, #12]
      break;
 80030d2:	e06c      	b.n	80031ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	4a4a      	ldr	r2, [pc, #296]	; (8003204 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	4a49      	ldr	r2, [pc, #292]	; (8003208 <HAL_TIM_PWM_Start_DMA+0x200>)
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	4a48      	ldr	r2, [pc, #288]	; (800320c <HAL_TIM_PWM_Start_DMA+0x204>)
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3338      	adds	r3, #56	; 0x38
 80030f8:	461a      	mov	r2, r3
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	f7fe ff0e 	bl	8001f1c <HAL_DMA_Start_IT>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e077      	b.n	80031fa <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003118:	60da      	str	r2, [r3, #12]
      break;
 800311a:	e048      	b.n	80031ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	4a38      	ldr	r2, [pc, #224]	; (8003204 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4a37      	ldr	r2, [pc, #220]	; (8003208 <HAL_TIM_PWM_Start_DMA+0x200>)
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	4a36      	ldr	r2, [pc, #216]	; (800320c <HAL_TIM_PWM_Start_DMA+0x204>)
 8003132:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	333c      	adds	r3, #60	; 0x3c
 8003140:	461a      	mov	r2, r3
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	f7fe feea 	bl	8001f1c <HAL_DMA_Start_IT>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e053      	b.n	80031fa <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003160:	60da      	str	r2, [r3, #12]
      break;
 8003162:	e024      	b.n	80031ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800316a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	4a25      	ldr	r2, [pc, #148]	; (8003208 <HAL_TIM_PWM_Start_DMA+0x200>)
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4a24      	ldr	r2, [pc, #144]	; (800320c <HAL_TIM_PWM_Start_DMA+0x204>)
 800317a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3340      	adds	r3, #64	; 0x40
 8003188:	461a      	mov	r2, r3
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	f7fe fec6 	bl	8001f1c <HAL_DMA_Start_IT>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e02f      	b.n	80031fa <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031a8:	60da      	str	r2, [r3, #12]
      break;
 80031aa:	e000      	b.n	80031ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80031ac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2201      	movs	r2, #1
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fe98 	bl	8003eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a13      	ldr	r2, [pc, #76]	; (8003210 <HAL_TIM_PWM_Start_DMA+0x208>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d107      	bne.n	80031d6 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b06      	cmp	r3, #6
 80031e6:	d007      	beq.n	80031f8 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	0800390d 	.word	0x0800390d
 8003208:	0800397d 	.word	0x0800397d
 800320c:	080038e9 	.word	0x080038e9
 8003210:	40012c00 	.word	0x40012c00

08003214 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d855      	bhi.n	80032d0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003224:	a201      	add	r2, pc, #4	; (adr r2, 800322c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	08003261 	.word	0x08003261
 8003230:	080032d1 	.word	0x080032d1
 8003234:	080032d1 	.word	0x080032d1
 8003238:	080032d1 	.word	0x080032d1
 800323c:	0800327d 	.word	0x0800327d
 8003240:	080032d1 	.word	0x080032d1
 8003244:	080032d1 	.word	0x080032d1
 8003248:	080032d1 	.word	0x080032d1
 800324c:	08003299 	.word	0x08003299
 8003250:	080032d1 	.word	0x080032d1
 8003254:	080032d1 	.word	0x080032d1
 8003258:	080032d1 	.word	0x080032d1
 800325c:	080032b5 	.word	0x080032b5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800326e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe feb1 	bl	8001fdc <HAL_DMA_Abort_IT>
      break;
 800327a:	e02a      	b.n	80032d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fea3 	bl	8001fdc <HAL_DMA_Abort_IT>
      break;
 8003296:	e01c      	b.n	80032d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe fe95 	bl	8001fdc <HAL_DMA_Abort_IT>
      break;
 80032b2:	e00e      	b.n	80032d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fe87 	bl	8001fdc <HAL_DMA_Abort_IT>
      break;
 80032ce:	e000      	b.n	80032d2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80032d0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fe06 	bl	8003eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <HAL_TIM_PWM_Stop_DMA+0x148>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d117      	bne.n	800331a <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1a      	ldr	r2, [r3, #32]
 80032f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_TIM_PWM_Stop_DMA+0x106>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	f240 4344 	movw	r3, #1092	; 0x444
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_TIM_PWM_Stop_DMA+0x106>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a1a      	ldr	r2, [r3, #32]
 8003320:	f241 1311 	movw	r3, #4369	; 0x1111
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <HAL_TIM_PWM_Stop_DMA+0x136>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6a1a      	ldr	r2, [r3, #32]
 8003330:	f240 4344 	movw	r3, #1092	; 0x444
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_TIM_PWM_Stop_DMA+0x136>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40012c00 	.word	0x40012c00

08003360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d122      	bne.n	80033bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d11b      	bne.n	80033bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0202 	mvn.w	r2, #2
 800338c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa73 	bl	800388e <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa66 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fa75 	bl	80038a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d122      	bne.n	8003410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d11b      	bne.n	8003410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0204 	mvn.w	r2, #4
 80033e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa49 	bl	800388e <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fa3c 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fa4b 	bl	80038a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b08      	cmp	r3, #8
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0208 	mvn.w	r2, #8
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2204      	movs	r2, #4
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa1f 	bl	800388e <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa12 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fa21 	bl	80038a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b10      	cmp	r3, #16
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b10      	cmp	r3, #16
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0210 	mvn.w	r2, #16
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2208      	movs	r2, #8
 800348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f9f5 	bl	800388e <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f9e8 	bl	800387c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f9f7 	bl	80038a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d10e      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0201 	mvn.w	r2, #1
 80034dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9c3 	bl	800386a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fd5f 	bl	8003fce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d10e      	bne.n	800353c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d107      	bne.n	800353c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9c4 	bl	80038c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b20      	cmp	r3, #32
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b20      	cmp	r3, #32
 8003556:	d107      	bne.n	8003568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0220 	mvn.w	r2, #32
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fd2a 	bl	8003fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003586:	2302      	movs	r3, #2
 8003588:	e0b4      	b.n	80036f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b0c      	cmp	r3, #12
 800359e:	f200 809f 	bhi.w	80036e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80035a2:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	080035dd 	.word	0x080035dd
 80035ac:	080036e1 	.word	0x080036e1
 80035b0:	080036e1 	.word	0x080036e1
 80035b4:	080036e1 	.word	0x080036e1
 80035b8:	0800361d 	.word	0x0800361d
 80035bc:	080036e1 	.word	0x080036e1
 80035c0:	080036e1 	.word	0x080036e1
 80035c4:	080036e1 	.word	0x080036e1
 80035c8:	0800365f 	.word	0x0800365f
 80035cc:	080036e1 	.word	0x080036e1
 80035d0:	080036e1 	.word	0x080036e1
 80035d4:	080036e1 	.word	0x080036e1
 80035d8:	0800369f 	.word	0x0800369f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fa64 	bl	8003ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0208 	orr.w	r2, r2, #8
 80035f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6999      	ldr	r1, [r3, #24]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	619a      	str	r2, [r3, #24]
      break;
 800361a:	e062      	b.n	80036e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 faaa 	bl	8003b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6999      	ldr	r1, [r3, #24]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	021a      	lsls	r2, r3, #8
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	619a      	str	r2, [r3, #24]
      break;
 800365c:	e041      	b.n	80036e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 faf3 	bl	8003c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0208 	orr.w	r2, r2, #8
 8003678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0204 	bic.w	r2, r2, #4
 8003688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69d9      	ldr	r1, [r3, #28]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	61da      	str	r2, [r3, #28]
      break;
 800369c:	e021      	b.n	80036e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fb3d 	bl	8003d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69d9      	ldr	r1, [r3, #28]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	021a      	lsls	r2, r3, #8
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	61da      	str	r2, [r3, #28]
      break;
 80036de:	e000      	b.n	80036e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80036e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_TIM_ConfigClockSource+0x18>
 8003710:	2302      	movs	r3, #2
 8003712:	e0a6      	b.n	8003862 <HAL_TIM_ConfigClockSource+0x166>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800373a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d067      	beq.n	800381c <HAL_TIM_ConfigClockSource+0x120>
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d80b      	bhi.n	8003768 <HAL_TIM_ConfigClockSource+0x6c>
 8003750:	2b10      	cmp	r3, #16
 8003752:	d073      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x140>
 8003754:	2b10      	cmp	r3, #16
 8003756:	d802      	bhi.n	800375e <HAL_TIM_ConfigClockSource+0x62>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d06f      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800375c:	e078      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800375e:	2b20      	cmp	r3, #32
 8003760:	d06c      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x140>
 8003762:	2b30      	cmp	r3, #48	; 0x30
 8003764:	d06a      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003766:	e073      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003768:	2b70      	cmp	r3, #112	; 0x70
 800376a:	d00d      	beq.n	8003788 <HAL_TIM_ConfigClockSource+0x8c>
 800376c:	2b70      	cmp	r3, #112	; 0x70
 800376e:	d804      	bhi.n	800377a <HAL_TIM_ConfigClockSource+0x7e>
 8003770:	2b50      	cmp	r3, #80	; 0x50
 8003772:	d033      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0xe0>
 8003774:	2b60      	cmp	r3, #96	; 0x60
 8003776:	d041      	beq.n	80037fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003778:	e06a      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800377a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377e:	d066      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x152>
 8003780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003784:	d017      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003786:	e063      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	6899      	ldr	r1, [r3, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f000 fb89 	bl	8003eae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
      break;
 80037b4:	e04c      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6899      	ldr	r1, [r3, #8]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f000 fb72 	bl	8003eae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037d8:	609a      	str	r2, [r3, #8]
      break;
 80037da:	e039      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	461a      	mov	r2, r3
 80037ea:	f000 fae9 	bl	8003dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2150      	movs	r1, #80	; 0x50
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fb40 	bl	8003e7a <TIM_ITRx_SetConfig>
      break;
 80037fa:	e029      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	461a      	mov	r2, r3
 800380a:	f000 fb07 	bl	8003e1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2160      	movs	r1, #96	; 0x60
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fb30 	bl	8003e7a <TIM_ITRx_SetConfig>
      break;
 800381a:	e019      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	461a      	mov	r2, r3
 800382a:	f000 fac9 	bl	8003dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2140      	movs	r1, #64	; 0x40
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fb20 	bl	8003e7a <TIM_ITRx_SetConfig>
      break;
 800383a:	e009      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f000 fb17 	bl	8003e7a <TIM_ITRx_SetConfig>
      break;
 800384c:	e000      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800384e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f7ff ffe9 	bl	80038d6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d103      	bne.n	8003934 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	771a      	strb	r2, [r3, #28]
 8003932:	e019      	b.n	8003968 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	d103      	bne.n	8003946 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2202      	movs	r2, #2
 8003942:	771a      	strb	r2, [r3, #28]
 8003944:	e010      	b.n	8003968 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	d103      	bne.n	8003958 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2204      	movs	r2, #4
 8003954:	771a      	strb	r2, [r3, #28]
 8003956:	e007      	b.n	8003968 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	429a      	cmp	r2, r3
 8003960:	d102      	bne.n	8003968 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2208      	movs	r2, #8
 8003966:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7ff ff99 	bl	80038a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	d103      	bne.n	80039a4 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	771a      	strb	r2, [r3, #28]
 80039a2:	e019      	b.n	80039d8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d103      	bne.n	80039b6 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2202      	movs	r2, #2
 80039b2:	771a      	strb	r2, [r3, #28]
 80039b4:	e010      	b.n	80039d8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d103      	bne.n	80039c8 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2204      	movs	r2, #4
 80039c4:	771a      	strb	r2, [r3, #28]
 80039c6:	e007      	b.n	80039d8 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d102      	bne.n	80039d8 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2208      	movs	r2, #8
 80039d6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff ff6a 	bl	80038b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <TIM_Base_SetConfig+0xb8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <TIM_Base_SetConfig+0x30>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0a:	d007      	beq.n	8003a1c <TIM_Base_SetConfig+0x30>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a26      	ldr	r2, [pc, #152]	; (8003aa8 <TIM_Base_SetConfig+0xbc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_Base_SetConfig+0x30>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a25      	ldr	r2, [pc, #148]	; (8003aac <TIM_Base_SetConfig+0xc0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d108      	bne.n	8003a2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <TIM_Base_SetConfig+0xb8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00b      	beq.n	8003a4e <TIM_Base_SetConfig+0x62>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d007      	beq.n	8003a4e <TIM_Base_SetConfig+0x62>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <TIM_Base_SetConfig+0xbc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d003      	beq.n	8003a4e <TIM_Base_SetConfig+0x62>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a18      	ldr	r2, [pc, #96]	; (8003aac <TIM_Base_SetConfig+0xc0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d108      	bne.n	8003a60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <TIM_Base_SetConfig+0xb8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d103      	bne.n	8003a94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	615a      	str	r2, [r3, #20]
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800

08003ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f023 0201 	bic.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f023 0302 	bic.w	r3, r3, #2
 8003af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <TIM_OC1_SetConfig+0xc8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10c      	bne.n	8003b26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0308 	bic.w	r3, r3, #8
 8003b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <TIM_OC1_SetConfig+0xc8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40012c00 	.word	0x40012c00

08003b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f023 0210 	bic.w	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0320 	bic.w	r3, r3, #32
 8003bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <TIM_OC2_SetConfig+0xd0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10d      	bne.n	8003bf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <TIM_OC2_SetConfig+0xd0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d113      	bne.n	8003c28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	40012c00 	.word	0x40012c00

08003c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <TIM_OC3_SetConfig+0xd0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10d      	bne.n	8003cca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a14      	ldr	r2, [pc, #80]	; (8003d20 <TIM_OC3_SetConfig+0xd0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d113      	bne.n	8003cfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40012c00 	.word	0x40012c00

08003d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	031b      	lsls	r3, r3, #12
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a0f      	ldr	r2, [pc, #60]	; (8003dbc <TIM_OC4_SetConfig+0x98>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d109      	bne.n	8003d98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	019b      	lsls	r3, r3, #6
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	40012c00 	.word	0x40012c00

08003dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f023 0201 	bic.w	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f023 030a 	bic.w	r3, r3, #10
 8003dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	621a      	str	r2, [r3, #32]
}
 8003e12:	bf00      	nop
 8003e14:	371c      	adds	r7, #28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f023 0210 	bic.w	r2, r3, #16
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	031b      	lsls	r3, r3, #12
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	621a      	str	r2, [r3, #32]
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f043 0307 	orr.w	r3, r3, #7
 8003e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b087      	sub	sp, #28
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	021a      	lsls	r2, r3, #8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	609a      	str	r2, [r3, #8]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	2201      	movs	r2, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1a      	ldr	r2, [r3, #32]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	401a      	ands	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	fa01 f303 	lsl.w	r3, r1, r3
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e032      	b.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f84:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e03f      	b.n	8004072 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fd fad6 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2224      	movs	r2, #36	; 0x24
 8004010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fb8d 	bl	8004744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b088      	sub	sp, #32
 800407e:	af02      	add	r7, sp, #8
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b20      	cmp	r3, #32
 8004098:	f040 8083 	bne.w	80041a2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_UART_Transmit+0x2e>
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e07b      	b.n	80041a4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Transmit+0x40>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e074      	b.n	80041a4 <HAL_UART_Transmit+0x12a>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2221      	movs	r2, #33	; 0x21
 80040cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80040d0:	f7fd fd90 	bl	8001bf4 <HAL_GetTick>
 80040d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	88fa      	ldrh	r2, [r7, #6]
 80040da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040e2:	e042      	b.n	800416a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fa:	d122      	bne.n	8004142 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2200      	movs	r2, #0
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f9b2 	bl	8004470 <UART_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e046      	b.n	80041a4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004128:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	3302      	adds	r3, #2
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	e017      	b.n	800416a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	3301      	adds	r3, #1
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	e013      	b.n	800416a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	2180      	movs	r1, #128	; 0x80
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f98f 	bl	8004470 <UART_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e023      	b.n	80041a4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	60ba      	str	r2, [r7, #8]
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1b7      	bne.n	80040e4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2200      	movs	r2, #0
 800417c:	2140      	movs	r1, #64	; 0x40
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f976 	bl	8004470 <UART_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e00a      	b.n	80041a4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e000      	b.n	80041a4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	4613      	mov	r3, r2
 80041b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d140      	bne.n	8004248 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_UART_Receive_IT+0x26>
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e039      	b.n	800424a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_UART_Receive_IT+0x38>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e032      	b.n	800424a <HAL_UART_Receive_IT+0x9e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	88fa      	ldrh	r2, [r7, #6]
 80041fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2222      	movs	r2, #34	; 0x22
 8004208:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004222:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0220 	orr.w	r2, r2, #32
 8004242:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	e000      	b.n	800424a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004248:	2302      	movs	r3, #2
  }
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004278:	2300      	movs	r3, #0
 800427a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10d      	bne.n	80042a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_UART_IRQHandler+0x52>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f9ce 	bl	8004640 <UART_Receive_IT>
      return;
 80042a4:	e0cc      	b.n	8004440 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80ab 	beq.w	8004404 <HAL_UART_IRQHandler+0x1b0>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_UART_IRQHandler+0x70>
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80a0 	beq.w	8004404 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <HAL_UART_IRQHandler+0x90>
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042dc:	f043 0201 	orr.w	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_UART_IRQHandler+0xb0>
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fc:	f043 0202 	orr.w	r2, r3, #2
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_UART_IRQHandler+0xd0>
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	f043 0204 	orr.w	r2, r3, #4
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_UART_IRQHandler+0xf0>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	f043 0208 	orr.w	r2, r3, #8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d078      	beq.n	800443e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <HAL_UART_IRQHandler+0x112>
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f96d 	bl	8004640 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf14      	ite	ne
 8004374:	2301      	movne	r3, #1
 8004376:	2300      	moveq	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <HAL_UART_IRQHandler+0x13a>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d031      	beq.n	80043f2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8b8 	bl	8004504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d023      	beq.n	80043ea <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d013      	beq.n	80043e2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043be:	4a22      	ldr	r2, [pc, #136]	; (8004448 <HAL_UART_IRQHandler+0x1f4>)
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd fe08 	bl	8001fdc <HAL_DMA_Abort_IT>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d016      	beq.n	8004400 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043dc:	4610      	mov	r0, r2
 80043de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e0:	e00e      	b.n	8004400 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f83b 	bl	800445e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	e00a      	b.n	8004400 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f837 	bl	800445e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	e006      	b.n	8004400 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f833 	bl	800445e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80043fe:	e01e      	b.n	800443e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	bf00      	nop
    return;
 8004402:	e01c      	b.n	800443e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_UART_IRQHandler+0x1cc>
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f8a4 	bl	8004566 <UART_Transmit_IT>
    return;
 800441e:	e00f      	b.n	8004440 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_UART_IRQHandler+0x1ec>
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f8eb 	bl	8004610 <UART_EndTransmit_IT>
    return;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_UART_IRQHandler+0x1ec>
    return;
 800443e:	bf00      	nop
  }
}
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	0800453f 	.word	0x0800453f

0800444c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004480:	e02c      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d028      	beq.n	80044dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004490:	f7fd fbb0 	bl	8001bf4 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	429a      	cmp	r2, r3
 800449e:	d21d      	bcs.n	80044dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e00f      	b.n	80044fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4013      	ands	r3, r2
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d0c3      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800451a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695a      	ldr	r2, [r3, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff ff80 	bl	800445e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b21      	cmp	r3, #33	; 0x21
 8004578:	d144      	bne.n	8004604 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004582:	d11a      	bne.n	80045ba <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004598:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d105      	bne.n	80045ae <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	1c9a      	adds	r2, r3, #2
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	621a      	str	r2, [r3, #32]
 80045ac:	e00e      	b.n	80045cc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	621a      	str	r2, [r3, #32]
 80045b8:	e008      	b.n	80045cc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6211      	str	r1, [r2, #32]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4619      	mov	r1, r3
 80045da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10f      	bne.n	8004600 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	e000      	b.n	8004606 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004604:	2302      	movs	r3, #2
  }
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004626:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff0b 	bl	800444c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b22      	cmp	r3, #34	; 0x22
 8004652:	d171      	bne.n	8004738 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465c:	d123      	bne.n	80046a6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10e      	bne.n	800468a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
 8004688:	e029      	b.n	80046de <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	b29b      	uxth	r3, r3
 8004692:	b2db      	uxtb	r3, r3
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28
 80046a4:	e01b      	b.n	80046de <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6858      	ldr	r0, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	1c59      	adds	r1, r3, #1
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6291      	str	r1, [r2, #40]	; 0x28
 80046be:	b2c2      	uxtb	r2, r0
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e00c      	b.n	80046de <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	1c58      	adds	r0, r3, #1
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	6288      	str	r0, [r1, #40]	; 0x28
 80046d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4619      	mov	r1, r3
 80046ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d120      	bne.n	8004734 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0220 	bic.w	r2, r2, #32
 8004700:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004710:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0201 	bic.w	r2, r2, #1
 8004720:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fc f9f2 	bl	8000b14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e002      	b.n	800473a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800477e:	f023 030c 	bic.w	r3, r3, #12
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	430b      	orrs	r3, r1
 800478a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a52      	ldr	r2, [pc, #328]	; (80048f0 <UART_SetConfig+0x1ac>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d14e      	bne.n	800484a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047ac:	f7fe fb1c 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 80047b0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009a      	lsls	r2, r3, #2
 80047bc:	441a      	add	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	4a4a      	ldr	r2, [pc, #296]	; (80048f4 <UART_SetConfig+0x1b0>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	0119      	lsls	r1, r3, #4
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009a      	lsls	r2, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047e8:	4b42      	ldr	r3, [pc, #264]	; (80048f4 <UART_SetConfig+0x1b0>)
 80047ea:	fba3 0302 	umull	r0, r3, r3, r2
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2064      	movs	r0, #100	; 0x64
 80047f2:	fb00 f303 	mul.w	r3, r0, r3
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	3332      	adds	r3, #50	; 0x32
 80047fc:	4a3d      	ldr	r2, [pc, #244]	; (80048f4 <UART_SetConfig+0x1b0>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004808:	4419      	add	r1, r3
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009a      	lsls	r2, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004820:	4b34      	ldr	r3, [pc, #208]	; (80048f4 <UART_SetConfig+0x1b0>)
 8004822:	fba3 0302 	umull	r0, r3, r3, r2
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	2064      	movs	r0, #100	; 0x64
 800482a:	fb00 f303 	mul.w	r3, r0, r3
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	3332      	adds	r3, #50	; 0x32
 8004834:	4a2f      	ldr	r2, [pc, #188]	; (80048f4 <UART_SetConfig+0x1b0>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	f003 020f 	and.w	r2, r3, #15
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	440a      	add	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004848:	e04d      	b.n	80048e6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800484a:	f7fe fab9 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 800484e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	009a      	lsls	r2, r3, #2
 800485a:	441a      	add	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <UART_SetConfig+0x1b0>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	0119      	lsls	r1, r3, #4
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009a      	lsls	r2, r3, #2
 800487a:	441a      	add	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	fbb2 f2f3 	udiv	r2, r2, r3
 8004886:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <UART_SetConfig+0x1b0>)
 8004888:	fba3 0302 	umull	r0, r3, r3, r2
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	2064      	movs	r0, #100	; 0x64
 8004890:	fb00 f303 	mul.w	r3, r0, r3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	3332      	adds	r3, #50	; 0x32
 800489a:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <UART_SetConfig+0x1b0>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a6:	4419      	add	r1, r3
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	009a      	lsls	r2, r3, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <UART_SetConfig+0x1b0>)
 80048c0:	fba3 0302 	umull	r0, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	2064      	movs	r0, #100	; 0x64
 80048c8:	fb00 f303 	mul.w	r3, r0, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	3332      	adds	r3, #50	; 0x32
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <UART_SetConfig+0x1b0>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	f003 020f 	and.w	r2, r3, #15
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	440a      	add	r2, r1
 80048e4:	609a      	str	r2, [r3, #8]
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40013800 	.word	0x40013800
 80048f4:	51eb851f 	.word	0x51eb851f

080048f8 <__errno>:
 80048f8:	4b01      	ldr	r3, [pc, #4]	; (8004900 <__errno+0x8>)
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000554 	.word	0x20000554

08004904 <__libc_init_array>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	2500      	movs	r5, #0
 8004908:	4e0c      	ldr	r6, [pc, #48]	; (800493c <__libc_init_array+0x38>)
 800490a:	4c0d      	ldr	r4, [pc, #52]	; (8004940 <__libc_init_array+0x3c>)
 800490c:	1ba4      	subs	r4, r4, r6
 800490e:	10a4      	asrs	r4, r4, #2
 8004910:	42a5      	cmp	r5, r4
 8004912:	d109      	bne.n	8004928 <__libc_init_array+0x24>
 8004914:	f001 f852 	bl	80059bc <_init>
 8004918:	2500      	movs	r5, #0
 800491a:	4e0a      	ldr	r6, [pc, #40]	; (8004944 <__libc_init_array+0x40>)
 800491c:	4c0a      	ldr	r4, [pc, #40]	; (8004948 <__libc_init_array+0x44>)
 800491e:	1ba4      	subs	r4, r4, r6
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	42a5      	cmp	r5, r4
 8004924:	d105      	bne.n	8004932 <__libc_init_array+0x2e>
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800492c:	4798      	blx	r3
 800492e:	3501      	adds	r5, #1
 8004930:	e7ee      	b.n	8004910 <__libc_init_array+0xc>
 8004932:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004936:	4798      	blx	r3
 8004938:	3501      	adds	r5, #1
 800493a:	e7f2      	b.n	8004922 <__libc_init_array+0x1e>
 800493c:	08005b80 	.word	0x08005b80
 8004940:	08005b80 	.word	0x08005b80
 8004944:	08005b80 	.word	0x08005b80
 8004948:	08005b84 	.word	0x08005b84

0800494c <memcmp>:
 800494c:	b530      	push	{r4, r5, lr}
 800494e:	2400      	movs	r4, #0
 8004950:	42a2      	cmp	r2, r4
 8004952:	d101      	bne.n	8004958 <memcmp+0xc>
 8004954:	2000      	movs	r0, #0
 8004956:	e007      	b.n	8004968 <memcmp+0x1c>
 8004958:	5d03      	ldrb	r3, [r0, r4]
 800495a:	3401      	adds	r4, #1
 800495c:	190d      	adds	r5, r1, r4
 800495e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004962:	42ab      	cmp	r3, r5
 8004964:	d0f4      	beq.n	8004950 <memcmp+0x4>
 8004966:	1b58      	subs	r0, r3, r5
 8004968:	bd30      	pop	{r4, r5, pc}

0800496a <memcpy>:
 800496a:	b510      	push	{r4, lr}
 800496c:	1e43      	subs	r3, r0, #1
 800496e:	440a      	add	r2, r1
 8004970:	4291      	cmp	r1, r2
 8004972:	d100      	bne.n	8004976 <memcpy+0xc>
 8004974:	bd10      	pop	{r4, pc}
 8004976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800497a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800497e:	e7f7      	b.n	8004970 <memcpy+0x6>

08004980 <memset>:
 8004980:	4603      	mov	r3, r0
 8004982:	4402      	add	r2, r0
 8004984:	4293      	cmp	r3, r2
 8004986:	d100      	bne.n	800498a <memset+0xa>
 8004988:	4770      	bx	lr
 800498a:	f803 1b01 	strb.w	r1, [r3], #1
 800498e:	e7f9      	b.n	8004984 <memset+0x4>

08004990 <iprintf>:
 8004990:	b40f      	push	{r0, r1, r2, r3}
 8004992:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <iprintf+0x2c>)
 8004994:	b513      	push	{r0, r1, r4, lr}
 8004996:	681c      	ldr	r4, [r3, #0]
 8004998:	b124      	cbz	r4, 80049a4 <iprintf+0x14>
 800499a:	69a3      	ldr	r3, [r4, #24]
 800499c:	b913      	cbnz	r3, 80049a4 <iprintf+0x14>
 800499e:	4620      	mov	r0, r4
 80049a0:	f000 fade 	bl	8004f60 <__sinit>
 80049a4:	ab05      	add	r3, sp, #20
 80049a6:	9a04      	ldr	r2, [sp, #16]
 80049a8:	68a1      	ldr	r1, [r4, #8]
 80049aa:	4620      	mov	r0, r4
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	f000 fc9b 	bl	80052e8 <_vfiprintf_r>
 80049b2:	b002      	add	sp, #8
 80049b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b8:	b004      	add	sp, #16
 80049ba:	4770      	bx	lr
 80049bc:	20000554 	.word	0x20000554

080049c0 <_puts_r>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	460e      	mov	r6, r1
 80049c4:	4605      	mov	r5, r0
 80049c6:	b118      	cbz	r0, 80049d0 <_puts_r+0x10>
 80049c8:	6983      	ldr	r3, [r0, #24]
 80049ca:	b90b      	cbnz	r3, 80049d0 <_puts_r+0x10>
 80049cc:	f000 fac8 	bl	8004f60 <__sinit>
 80049d0:	69ab      	ldr	r3, [r5, #24]
 80049d2:	68ac      	ldr	r4, [r5, #8]
 80049d4:	b913      	cbnz	r3, 80049dc <_puts_r+0x1c>
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 fac2 	bl	8004f60 <__sinit>
 80049dc:	4b23      	ldr	r3, [pc, #140]	; (8004a6c <_puts_r+0xac>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d117      	bne.n	8004a12 <_puts_r+0x52>
 80049e2:	686c      	ldr	r4, [r5, #4]
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	071b      	lsls	r3, r3, #28
 80049e8:	d51d      	bpl.n	8004a26 <_puts_r+0x66>
 80049ea:	6923      	ldr	r3, [r4, #16]
 80049ec:	b1db      	cbz	r3, 8004a26 <_puts_r+0x66>
 80049ee:	3e01      	subs	r6, #1
 80049f0:	68a3      	ldr	r3, [r4, #8]
 80049f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049f6:	3b01      	subs	r3, #1
 80049f8:	60a3      	str	r3, [r4, #8]
 80049fa:	b9e9      	cbnz	r1, 8004a38 <_puts_r+0x78>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	da2e      	bge.n	8004a5e <_puts_r+0x9e>
 8004a00:	4622      	mov	r2, r4
 8004a02:	210a      	movs	r1, #10
 8004a04:	4628      	mov	r0, r5
 8004a06:	f000 f8fb 	bl	8004c00 <__swbuf_r>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d011      	beq.n	8004a32 <_puts_r+0x72>
 8004a0e:	200a      	movs	r0, #10
 8004a10:	e011      	b.n	8004a36 <_puts_r+0x76>
 8004a12:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <_puts_r+0xb0>)
 8004a14:	429c      	cmp	r4, r3
 8004a16:	d101      	bne.n	8004a1c <_puts_r+0x5c>
 8004a18:	68ac      	ldr	r4, [r5, #8]
 8004a1a:	e7e3      	b.n	80049e4 <_puts_r+0x24>
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <_puts_r+0xb4>)
 8004a1e:	429c      	cmp	r4, r3
 8004a20:	bf08      	it	eq
 8004a22:	68ec      	ldreq	r4, [r5, #12]
 8004a24:	e7de      	b.n	80049e4 <_puts_r+0x24>
 8004a26:	4621      	mov	r1, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f000 f93b 	bl	8004ca4 <__swsetup_r>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d0dd      	beq.n	80049ee <_puts_r+0x2e>
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	da04      	bge.n	8004a46 <_puts_r+0x86>
 8004a3c:	69a2      	ldr	r2, [r4, #24]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	dc06      	bgt.n	8004a50 <_puts_r+0x90>
 8004a42:	290a      	cmp	r1, #10
 8004a44:	d004      	beq.n	8004a50 <_puts_r+0x90>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	6022      	str	r2, [r4, #0]
 8004a4c:	7019      	strb	r1, [r3, #0]
 8004a4e:	e7cf      	b.n	80049f0 <_puts_r+0x30>
 8004a50:	4622      	mov	r2, r4
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f8d4 	bl	8004c00 <__swbuf_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d1c9      	bne.n	80049f0 <_puts_r+0x30>
 8004a5c:	e7e9      	b.n	8004a32 <_puts_r+0x72>
 8004a5e:	200a      	movs	r0, #10
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	6022      	str	r2, [r4, #0]
 8004a66:	7018      	strb	r0, [r3, #0]
 8004a68:	e7e5      	b.n	8004a36 <_puts_r+0x76>
 8004a6a:	bf00      	nop
 8004a6c:	08005b0c 	.word	0x08005b0c
 8004a70:	08005b2c 	.word	0x08005b2c
 8004a74:	08005aec 	.word	0x08005aec

08004a78 <puts>:
 8004a78:	4b02      	ldr	r3, [pc, #8]	; (8004a84 <puts+0xc>)
 8004a7a:	4601      	mov	r1, r0
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	f7ff bf9f 	b.w	80049c0 <_puts_r>
 8004a82:	bf00      	nop
 8004a84:	20000554 	.word	0x20000554

08004a88 <setvbuf>:
 8004a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a8c:	461d      	mov	r5, r3
 8004a8e:	4b51      	ldr	r3, [pc, #324]	; (8004bd4 <setvbuf+0x14c>)
 8004a90:	4604      	mov	r4, r0
 8004a92:	681e      	ldr	r6, [r3, #0]
 8004a94:	460f      	mov	r7, r1
 8004a96:	4690      	mov	r8, r2
 8004a98:	b126      	cbz	r6, 8004aa4 <setvbuf+0x1c>
 8004a9a:	69b3      	ldr	r3, [r6, #24]
 8004a9c:	b913      	cbnz	r3, 8004aa4 <setvbuf+0x1c>
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f000 fa5e 	bl	8004f60 <__sinit>
 8004aa4:	4b4c      	ldr	r3, [pc, #304]	; (8004bd8 <setvbuf+0x150>)
 8004aa6:	429c      	cmp	r4, r3
 8004aa8:	d152      	bne.n	8004b50 <setvbuf+0xc8>
 8004aaa:	6874      	ldr	r4, [r6, #4]
 8004aac:	f1b8 0f02 	cmp.w	r8, #2
 8004ab0:	d006      	beq.n	8004ac0 <setvbuf+0x38>
 8004ab2:	f1b8 0f01 	cmp.w	r8, #1
 8004ab6:	f200 8089 	bhi.w	8004bcc <setvbuf+0x144>
 8004aba:	2d00      	cmp	r5, #0
 8004abc:	f2c0 8086 	blt.w	8004bcc <setvbuf+0x144>
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f000 f9e2 	bl	8004e8c <_fflush_r>
 8004ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aca:	b141      	cbz	r1, 8004ade <setvbuf+0x56>
 8004acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ad0:	4299      	cmp	r1, r3
 8004ad2:	d002      	beq.n	8004ada <setvbuf+0x52>
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f000 fb39 	bl	800514c <_free_r>
 8004ada:	2300      	movs	r3, #0
 8004adc:	6363      	str	r3, [r4, #52]	; 0x34
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61a3      	str	r3, [r4, #24]
 8004ae2:	6063      	str	r3, [r4, #4]
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	d503      	bpl.n	8004af2 <setvbuf+0x6a>
 8004aea:	6921      	ldr	r1, [r4, #16]
 8004aec:	4630      	mov	r0, r6
 8004aee:	f000 fb2d 	bl	800514c <_free_r>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	f1b8 0f02 	cmp.w	r8, #2
 8004af8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004afc:	f023 0303 	bic.w	r3, r3, #3
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	d05d      	beq.n	8004bc0 <setvbuf+0x138>
 8004b04:	ab01      	add	r3, sp, #4
 8004b06:	466a      	mov	r2, sp
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f000 fab2 	bl	8005074 <__swhatbuf_r>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	4318      	orrs	r0, r3
 8004b14:	81a0      	strh	r0, [r4, #12]
 8004b16:	bb2d      	cbnz	r5, 8004b64 <setvbuf+0xdc>
 8004b18:	9d00      	ldr	r5, [sp, #0]
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f000 fb0e 	bl	800513c <malloc>
 8004b20:	4607      	mov	r7, r0
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d14e      	bne.n	8004bc4 <setvbuf+0x13c>
 8004b26:	f8dd 9000 	ldr.w	r9, [sp]
 8004b2a:	45a9      	cmp	r9, r5
 8004b2c:	d13c      	bne.n	8004ba8 <setvbuf+0x120>
 8004b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	f043 0302 	orr.w	r3, r3, #2
 8004b38:	81a3      	strh	r3, [r4, #12]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	6123      	str	r3, [r4, #16]
 8004b46:	2301      	movs	r3, #1
 8004b48:	6163      	str	r3, [r4, #20]
 8004b4a:	b003      	add	sp, #12
 8004b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b50:	4b22      	ldr	r3, [pc, #136]	; (8004bdc <setvbuf+0x154>)
 8004b52:	429c      	cmp	r4, r3
 8004b54:	d101      	bne.n	8004b5a <setvbuf+0xd2>
 8004b56:	68b4      	ldr	r4, [r6, #8]
 8004b58:	e7a8      	b.n	8004aac <setvbuf+0x24>
 8004b5a:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <setvbuf+0x158>)
 8004b5c:	429c      	cmp	r4, r3
 8004b5e:	bf08      	it	eq
 8004b60:	68f4      	ldreq	r4, [r6, #12]
 8004b62:	e7a3      	b.n	8004aac <setvbuf+0x24>
 8004b64:	2f00      	cmp	r7, #0
 8004b66:	d0d8      	beq.n	8004b1a <setvbuf+0x92>
 8004b68:	69b3      	ldr	r3, [r6, #24]
 8004b6a:	b913      	cbnz	r3, 8004b72 <setvbuf+0xea>
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	f000 f9f7 	bl	8004f60 <__sinit>
 8004b72:	f1b8 0f01 	cmp.w	r8, #1
 8004b76:	bf08      	it	eq
 8004b78:	89a3      	ldrheq	r3, [r4, #12]
 8004b7a:	6027      	str	r7, [r4, #0]
 8004b7c:	bf04      	itt	eq
 8004b7e:	f043 0301 	orreq.w	r3, r3, #1
 8004b82:	81a3      	strheq	r3, [r4, #12]
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004b8a:	f013 0008 	ands.w	r0, r3, #8
 8004b8e:	d01b      	beq.n	8004bc8 <setvbuf+0x140>
 8004b90:	f013 0001 	ands.w	r0, r3, #1
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	bf1f      	itttt	ne
 8004b9a:	426d      	negne	r5, r5
 8004b9c:	60a3      	strne	r3, [r4, #8]
 8004b9e:	61a5      	strne	r5, [r4, #24]
 8004ba0:	4618      	movne	r0, r3
 8004ba2:	bf08      	it	eq
 8004ba4:	60a5      	streq	r5, [r4, #8]
 8004ba6:	e7d0      	b.n	8004b4a <setvbuf+0xc2>
 8004ba8:	4648      	mov	r0, r9
 8004baa:	f000 fac7 	bl	800513c <malloc>
 8004bae:	4607      	mov	r7, r0
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	d0bc      	beq.n	8004b2e <setvbuf+0xa6>
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	464d      	mov	r5, r9
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbc:	81a3      	strh	r3, [r4, #12]
 8004bbe:	e7d3      	b.n	8004b68 <setvbuf+0xe0>
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	e7b6      	b.n	8004b32 <setvbuf+0xaa>
 8004bc4:	46a9      	mov	r9, r5
 8004bc6:	e7f5      	b.n	8004bb4 <setvbuf+0x12c>
 8004bc8:	60a0      	str	r0, [r4, #8]
 8004bca:	e7be      	b.n	8004b4a <setvbuf+0xc2>
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd0:	e7bb      	b.n	8004b4a <setvbuf+0xc2>
 8004bd2:	bf00      	nop
 8004bd4:	20000554 	.word	0x20000554
 8004bd8:	08005b0c 	.word	0x08005b0c
 8004bdc:	08005b2c 	.word	0x08005b2c
 8004be0:	08005aec 	.word	0x08005aec

08004be4 <strchr>:
 8004be4:	b2c9      	uxtb	r1, r1
 8004be6:	4603      	mov	r3, r0
 8004be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bec:	b11a      	cbz	r2, 8004bf6 <strchr+0x12>
 8004bee:	428a      	cmp	r2, r1
 8004bf0:	d1f9      	bne.n	8004be6 <strchr+0x2>
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	4770      	bx	lr
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	bf18      	it	ne
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	e7f9      	b.n	8004bf2 <strchr+0xe>
	...

08004c00 <__swbuf_r>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	460e      	mov	r6, r1
 8004c04:	4614      	mov	r4, r2
 8004c06:	4605      	mov	r5, r0
 8004c08:	b118      	cbz	r0, 8004c12 <__swbuf_r+0x12>
 8004c0a:	6983      	ldr	r3, [r0, #24]
 8004c0c:	b90b      	cbnz	r3, 8004c12 <__swbuf_r+0x12>
 8004c0e:	f000 f9a7 	bl	8004f60 <__sinit>
 8004c12:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <__swbuf_r+0x98>)
 8004c14:	429c      	cmp	r4, r3
 8004c16:	d12a      	bne.n	8004c6e <__swbuf_r+0x6e>
 8004c18:	686c      	ldr	r4, [r5, #4]
 8004c1a:	69a3      	ldr	r3, [r4, #24]
 8004c1c:	60a3      	str	r3, [r4, #8]
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	071a      	lsls	r2, r3, #28
 8004c22:	d52e      	bpl.n	8004c82 <__swbuf_r+0x82>
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	b363      	cbz	r3, 8004c82 <__swbuf_r+0x82>
 8004c28:	6923      	ldr	r3, [r4, #16]
 8004c2a:	6820      	ldr	r0, [r4, #0]
 8004c2c:	b2f6      	uxtb	r6, r6
 8004c2e:	1ac0      	subs	r0, r0, r3
 8004c30:	6963      	ldr	r3, [r4, #20]
 8004c32:	4637      	mov	r7, r6
 8004c34:	4283      	cmp	r3, r0
 8004c36:	dc04      	bgt.n	8004c42 <__swbuf_r+0x42>
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f000 f926 	bl	8004e8c <_fflush_r>
 8004c40:	bb28      	cbnz	r0, 8004c8e <__swbuf_r+0x8e>
 8004c42:	68a3      	ldr	r3, [r4, #8]
 8004c44:	3001      	adds	r0, #1
 8004c46:	3b01      	subs	r3, #1
 8004c48:	60a3      	str	r3, [r4, #8]
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	6022      	str	r2, [r4, #0]
 8004c50:	701e      	strb	r6, [r3, #0]
 8004c52:	6963      	ldr	r3, [r4, #20]
 8004c54:	4283      	cmp	r3, r0
 8004c56:	d004      	beq.n	8004c62 <__swbuf_r+0x62>
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	07db      	lsls	r3, r3, #31
 8004c5c:	d519      	bpl.n	8004c92 <__swbuf_r+0x92>
 8004c5e:	2e0a      	cmp	r6, #10
 8004c60:	d117      	bne.n	8004c92 <__swbuf_r+0x92>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f911 	bl	8004e8c <_fflush_r>
 8004c6a:	b190      	cbz	r0, 8004c92 <__swbuf_r+0x92>
 8004c6c:	e00f      	b.n	8004c8e <__swbuf_r+0x8e>
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <__swbuf_r+0x9c>)
 8004c70:	429c      	cmp	r4, r3
 8004c72:	d101      	bne.n	8004c78 <__swbuf_r+0x78>
 8004c74:	68ac      	ldr	r4, [r5, #8]
 8004c76:	e7d0      	b.n	8004c1a <__swbuf_r+0x1a>
 8004c78:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <__swbuf_r+0xa0>)
 8004c7a:	429c      	cmp	r4, r3
 8004c7c:	bf08      	it	eq
 8004c7e:	68ec      	ldreq	r4, [r5, #12]
 8004c80:	e7cb      	b.n	8004c1a <__swbuf_r+0x1a>
 8004c82:	4621      	mov	r1, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 f80d 	bl	8004ca4 <__swsetup_r>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d0cc      	beq.n	8004c28 <__swbuf_r+0x28>
 8004c8e:	f04f 37ff 	mov.w	r7, #4294967295
 8004c92:	4638      	mov	r0, r7
 8004c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c96:	bf00      	nop
 8004c98:	08005b0c 	.word	0x08005b0c
 8004c9c:	08005b2c 	.word	0x08005b2c
 8004ca0:	08005aec 	.word	0x08005aec

08004ca4 <__swsetup_r>:
 8004ca4:	4b32      	ldr	r3, [pc, #200]	; (8004d70 <__swsetup_r+0xcc>)
 8004ca6:	b570      	push	{r4, r5, r6, lr}
 8004ca8:	681d      	ldr	r5, [r3, #0]
 8004caa:	4606      	mov	r6, r0
 8004cac:	460c      	mov	r4, r1
 8004cae:	b125      	cbz	r5, 8004cba <__swsetup_r+0x16>
 8004cb0:	69ab      	ldr	r3, [r5, #24]
 8004cb2:	b913      	cbnz	r3, 8004cba <__swsetup_r+0x16>
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 f953 	bl	8004f60 <__sinit>
 8004cba:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <__swsetup_r+0xd0>)
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	d10f      	bne.n	8004ce0 <__swsetup_r+0x3c>
 8004cc0:	686c      	ldr	r4, [r5, #4]
 8004cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	0715      	lsls	r5, r2, #28
 8004cca:	d42c      	bmi.n	8004d26 <__swsetup_r+0x82>
 8004ccc:	06d0      	lsls	r0, r2, #27
 8004cce:	d411      	bmi.n	8004cf4 <__swsetup_r+0x50>
 8004cd0:	2209      	movs	r2, #9
 8004cd2:	6032      	str	r2, [r6, #0]
 8004cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	e03e      	b.n	8004d5e <__swsetup_r+0xba>
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <__swsetup_r+0xd4>)
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d101      	bne.n	8004cea <__swsetup_r+0x46>
 8004ce6:	68ac      	ldr	r4, [r5, #8]
 8004ce8:	e7eb      	b.n	8004cc2 <__swsetup_r+0x1e>
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <__swsetup_r+0xd8>)
 8004cec:	429c      	cmp	r4, r3
 8004cee:	bf08      	it	eq
 8004cf0:	68ec      	ldreq	r4, [r5, #12]
 8004cf2:	e7e6      	b.n	8004cc2 <__swsetup_r+0x1e>
 8004cf4:	0751      	lsls	r1, r2, #29
 8004cf6:	d512      	bpl.n	8004d1e <__swsetup_r+0x7a>
 8004cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cfa:	b141      	cbz	r1, 8004d0e <__swsetup_r+0x6a>
 8004cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d00:	4299      	cmp	r1, r3
 8004d02:	d002      	beq.n	8004d0a <__swsetup_r+0x66>
 8004d04:	4630      	mov	r0, r6
 8004d06:	f000 fa21 	bl	800514c <_free_r>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	2300      	movs	r3, #0
 8004d18:	6063      	str	r3, [r4, #4]
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	f043 0308 	orr.w	r3, r3, #8
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	b94b      	cbnz	r3, 8004d3e <__swsetup_r+0x9a>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d34:	d003      	beq.n	8004d3e <__swsetup_r+0x9a>
 8004d36:	4621      	mov	r1, r4
 8004d38:	4630      	mov	r0, r6
 8004d3a:	f000 f9bf 	bl	80050bc <__smakebuf_r>
 8004d3e:	89a2      	ldrh	r2, [r4, #12]
 8004d40:	f012 0301 	ands.w	r3, r2, #1
 8004d44:	d00c      	beq.n	8004d60 <__swsetup_r+0xbc>
 8004d46:	2300      	movs	r3, #0
 8004d48:	60a3      	str	r3, [r4, #8]
 8004d4a:	6963      	ldr	r3, [r4, #20]
 8004d4c:	425b      	negs	r3, r3
 8004d4e:	61a3      	str	r3, [r4, #24]
 8004d50:	6923      	ldr	r3, [r4, #16]
 8004d52:	b953      	cbnz	r3, 8004d6a <__swsetup_r+0xc6>
 8004d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d58:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004d5c:	d1ba      	bne.n	8004cd4 <__swsetup_r+0x30>
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	0792      	lsls	r2, r2, #30
 8004d62:	bf58      	it	pl
 8004d64:	6963      	ldrpl	r3, [r4, #20]
 8004d66:	60a3      	str	r3, [r4, #8]
 8004d68:	e7f2      	b.n	8004d50 <__swsetup_r+0xac>
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e7f7      	b.n	8004d5e <__swsetup_r+0xba>
 8004d6e:	bf00      	nop
 8004d70:	20000554 	.word	0x20000554
 8004d74:	08005b0c 	.word	0x08005b0c
 8004d78:	08005b2c 	.word	0x08005b2c
 8004d7c:	08005aec 	.word	0x08005aec

08004d80 <__sflush_r>:
 8004d80:	898a      	ldrh	r2, [r1, #12]
 8004d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d86:	4605      	mov	r5, r0
 8004d88:	0710      	lsls	r0, r2, #28
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	d458      	bmi.n	8004e40 <__sflush_r+0xc0>
 8004d8e:	684b      	ldr	r3, [r1, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	dc05      	bgt.n	8004da0 <__sflush_r+0x20>
 8004d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	dc02      	bgt.n	8004da0 <__sflush_r+0x20>
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004da2:	2e00      	cmp	r6, #0
 8004da4:	d0f9      	beq.n	8004d9a <__sflush_r+0x1a>
 8004da6:	2300      	movs	r3, #0
 8004da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004dac:	682f      	ldr	r7, [r5, #0]
 8004dae:	6a21      	ldr	r1, [r4, #32]
 8004db0:	602b      	str	r3, [r5, #0]
 8004db2:	d032      	beq.n	8004e1a <__sflush_r+0x9a>
 8004db4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	075a      	lsls	r2, r3, #29
 8004dba:	d505      	bpl.n	8004dc8 <__sflush_r+0x48>
 8004dbc:	6863      	ldr	r3, [r4, #4]
 8004dbe:	1ac0      	subs	r0, r0, r3
 8004dc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dc2:	b10b      	cbz	r3, 8004dc8 <__sflush_r+0x48>
 8004dc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dc6:	1ac0      	subs	r0, r0, r3
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dce:	6a21      	ldr	r1, [r4, #32]
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b0      	blx	r6
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	d106      	bne.n	8004de8 <__sflush_r+0x68>
 8004dda:	6829      	ldr	r1, [r5, #0]
 8004ddc:	291d      	cmp	r1, #29
 8004dde:	d848      	bhi.n	8004e72 <__sflush_r+0xf2>
 8004de0:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <__sflush_r+0x108>)
 8004de2:	40ca      	lsrs	r2, r1
 8004de4:	07d6      	lsls	r6, r2, #31
 8004de6:	d544      	bpl.n	8004e72 <__sflush_r+0xf2>
 8004de8:	2200      	movs	r2, #0
 8004dea:	6062      	str	r2, [r4, #4]
 8004dec:	6922      	ldr	r2, [r4, #16]
 8004dee:	04d9      	lsls	r1, r3, #19
 8004df0:	6022      	str	r2, [r4, #0]
 8004df2:	d504      	bpl.n	8004dfe <__sflush_r+0x7e>
 8004df4:	1c42      	adds	r2, r0, #1
 8004df6:	d101      	bne.n	8004dfc <__sflush_r+0x7c>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	b903      	cbnz	r3, 8004dfe <__sflush_r+0x7e>
 8004dfc:	6560      	str	r0, [r4, #84]	; 0x54
 8004dfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e00:	602f      	str	r7, [r5, #0]
 8004e02:	2900      	cmp	r1, #0
 8004e04:	d0c9      	beq.n	8004d9a <__sflush_r+0x1a>
 8004e06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	d002      	beq.n	8004e14 <__sflush_r+0x94>
 8004e0e:	4628      	mov	r0, r5
 8004e10:	f000 f99c 	bl	800514c <_free_r>
 8004e14:	2000      	movs	r0, #0
 8004e16:	6360      	str	r0, [r4, #52]	; 0x34
 8004e18:	e7c0      	b.n	8004d9c <__sflush_r+0x1c>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b0      	blx	r6
 8004e20:	1c41      	adds	r1, r0, #1
 8004e22:	d1c8      	bne.n	8004db6 <__sflush_r+0x36>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0c5      	beq.n	8004db6 <__sflush_r+0x36>
 8004e2a:	2b1d      	cmp	r3, #29
 8004e2c:	d001      	beq.n	8004e32 <__sflush_r+0xb2>
 8004e2e:	2b16      	cmp	r3, #22
 8004e30:	d101      	bne.n	8004e36 <__sflush_r+0xb6>
 8004e32:	602f      	str	r7, [r5, #0]
 8004e34:	e7b1      	b.n	8004d9a <__sflush_r+0x1a>
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3c:	81a3      	strh	r3, [r4, #12]
 8004e3e:	e7ad      	b.n	8004d9c <__sflush_r+0x1c>
 8004e40:	690f      	ldr	r7, [r1, #16]
 8004e42:	2f00      	cmp	r7, #0
 8004e44:	d0a9      	beq.n	8004d9a <__sflush_r+0x1a>
 8004e46:	0793      	lsls	r3, r2, #30
 8004e48:	bf18      	it	ne
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	680e      	ldr	r6, [r1, #0]
 8004e4e:	bf08      	it	eq
 8004e50:	694b      	ldreq	r3, [r1, #20]
 8004e52:	eba6 0807 	sub.w	r8, r6, r7
 8004e56:	600f      	str	r7, [r1, #0]
 8004e58:	608b      	str	r3, [r1, #8]
 8004e5a:	f1b8 0f00 	cmp.w	r8, #0
 8004e5e:	dd9c      	ble.n	8004d9a <__sflush_r+0x1a>
 8004e60:	4643      	mov	r3, r8
 8004e62:	463a      	mov	r2, r7
 8004e64:	6a21      	ldr	r1, [r4, #32]
 8004e66:	4628      	mov	r0, r5
 8004e68:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e6a:	47b0      	blx	r6
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	dc06      	bgt.n	8004e7e <__sflush_r+0xfe>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	e78e      	b.n	8004d9c <__sflush_r+0x1c>
 8004e7e:	4407      	add	r7, r0
 8004e80:	eba8 0800 	sub.w	r8, r8, r0
 8004e84:	e7e9      	b.n	8004e5a <__sflush_r+0xda>
 8004e86:	bf00      	nop
 8004e88:	20400001 	.word	0x20400001

08004e8c <_fflush_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	4605      	mov	r5, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	b1db      	cbz	r3, 8004ece <_fflush_r+0x42>
 8004e96:	b118      	cbz	r0, 8004ea0 <_fflush_r+0x14>
 8004e98:	6983      	ldr	r3, [r0, #24]
 8004e9a:	b90b      	cbnz	r3, 8004ea0 <_fflush_r+0x14>
 8004e9c:	f000 f860 	bl	8004f60 <__sinit>
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <_fflush_r+0x48>)
 8004ea2:	429c      	cmp	r4, r3
 8004ea4:	d109      	bne.n	8004eba <_fflush_r+0x2e>
 8004ea6:	686c      	ldr	r4, [r5, #4]
 8004ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eac:	b17b      	cbz	r3, 8004ece <_fflush_r+0x42>
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eb6:	f7ff bf63 	b.w	8004d80 <__sflush_r>
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <_fflush_r+0x4c>)
 8004ebc:	429c      	cmp	r4, r3
 8004ebe:	d101      	bne.n	8004ec4 <_fflush_r+0x38>
 8004ec0:	68ac      	ldr	r4, [r5, #8]
 8004ec2:	e7f1      	b.n	8004ea8 <_fflush_r+0x1c>
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <_fflush_r+0x50>)
 8004ec6:	429c      	cmp	r4, r3
 8004ec8:	bf08      	it	eq
 8004eca:	68ec      	ldreq	r4, [r5, #12]
 8004ecc:	e7ec      	b.n	8004ea8 <_fflush_r+0x1c>
 8004ece:	2000      	movs	r0, #0
 8004ed0:	bd38      	pop	{r3, r4, r5, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08005b0c 	.word	0x08005b0c
 8004ed8:	08005b2c 	.word	0x08005b2c
 8004edc:	08005aec 	.word	0x08005aec

08004ee0 <std>:
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	b510      	push	{r4, lr}
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8004eea:	6083      	str	r3, [r0, #8]
 8004eec:	8181      	strh	r1, [r0, #12]
 8004eee:	6643      	str	r3, [r0, #100]	; 0x64
 8004ef0:	81c2      	strh	r2, [r0, #14]
 8004ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ef6:	6183      	str	r3, [r0, #24]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	2208      	movs	r2, #8
 8004efc:	305c      	adds	r0, #92	; 0x5c
 8004efe:	f7ff fd3f 	bl	8004980 <memset>
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <std+0x38>)
 8004f04:	6224      	str	r4, [r4, #32]
 8004f06:	6263      	str	r3, [r4, #36]	; 0x24
 8004f08:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <std+0x3c>)
 8004f0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <std+0x40>)
 8004f0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <std+0x44>)
 8004f12:	6323      	str	r3, [r4, #48]	; 0x30
 8004f14:	bd10      	pop	{r4, pc}
 8004f16:	bf00      	nop
 8004f18:	08005845 	.word	0x08005845
 8004f1c:	08005867 	.word	0x08005867
 8004f20:	0800589f 	.word	0x0800589f
 8004f24:	080058c3 	.word	0x080058c3

08004f28 <_cleanup_r>:
 8004f28:	4901      	ldr	r1, [pc, #4]	; (8004f30 <_cleanup_r+0x8>)
 8004f2a:	f000 b885 	b.w	8005038 <_fwalk_reent>
 8004f2e:	bf00      	nop
 8004f30:	08004e8d 	.word	0x08004e8d

08004f34 <__sfmoreglue>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	2568      	movs	r5, #104	; 0x68
 8004f38:	1e4a      	subs	r2, r1, #1
 8004f3a:	4355      	muls	r5, r2
 8004f3c:	460e      	mov	r6, r1
 8004f3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f42:	f000 f94f 	bl	80051e4 <_malloc_r>
 8004f46:	4604      	mov	r4, r0
 8004f48:	b140      	cbz	r0, 8004f5c <__sfmoreglue+0x28>
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	e9c0 1600 	strd	r1, r6, [r0]
 8004f50:	300c      	adds	r0, #12
 8004f52:	60a0      	str	r0, [r4, #8]
 8004f54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f58:	f7ff fd12 	bl	8004980 <memset>
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}

08004f60 <__sinit>:
 8004f60:	6983      	ldr	r3, [r0, #24]
 8004f62:	b510      	push	{r4, lr}
 8004f64:	4604      	mov	r4, r0
 8004f66:	bb33      	cbnz	r3, 8004fb6 <__sinit+0x56>
 8004f68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004f6c:	6503      	str	r3, [r0, #80]	; 0x50
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <__sinit+0x58>)
 8004f70:	4a12      	ldr	r2, [pc, #72]	; (8004fbc <__sinit+0x5c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6282      	str	r2, [r0, #40]	; 0x28
 8004f76:	4298      	cmp	r0, r3
 8004f78:	bf04      	itt	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	6183      	streq	r3, [r0, #24]
 8004f7e:	f000 f81f 	bl	8004fc0 <__sfp>
 8004f82:	6060      	str	r0, [r4, #4]
 8004f84:	4620      	mov	r0, r4
 8004f86:	f000 f81b 	bl	8004fc0 <__sfp>
 8004f8a:	60a0      	str	r0, [r4, #8]
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f000 f817 	bl	8004fc0 <__sfp>
 8004f92:	2200      	movs	r2, #0
 8004f94:	60e0      	str	r0, [r4, #12]
 8004f96:	2104      	movs	r1, #4
 8004f98:	6860      	ldr	r0, [r4, #4]
 8004f9a:	f7ff ffa1 	bl	8004ee0 <std>
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	2109      	movs	r1, #9
 8004fa2:	68a0      	ldr	r0, [r4, #8]
 8004fa4:	f7ff ff9c 	bl	8004ee0 <std>
 8004fa8:	2202      	movs	r2, #2
 8004faa:	2112      	movs	r1, #18
 8004fac:	68e0      	ldr	r0, [r4, #12]
 8004fae:	f7ff ff97 	bl	8004ee0 <std>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	61a3      	str	r3, [r4, #24]
 8004fb6:	bd10      	pop	{r4, pc}
 8004fb8:	08005ae8 	.word	0x08005ae8
 8004fbc:	08004f29 	.word	0x08004f29

08004fc0 <__sfp>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <__sfp+0x70>)
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	681e      	ldr	r6, [r3, #0]
 8004fc8:	69b3      	ldr	r3, [r6, #24]
 8004fca:	b913      	cbnz	r3, 8004fd2 <__sfp+0x12>
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f7ff ffc7 	bl	8004f60 <__sinit>
 8004fd2:	3648      	adds	r6, #72	; 0x48
 8004fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	d503      	bpl.n	8004fe4 <__sfp+0x24>
 8004fdc:	6833      	ldr	r3, [r6, #0]
 8004fde:	b133      	cbz	r3, 8004fee <__sfp+0x2e>
 8004fe0:	6836      	ldr	r6, [r6, #0]
 8004fe2:	e7f7      	b.n	8004fd4 <__sfp+0x14>
 8004fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004fe8:	b16d      	cbz	r5, 8005006 <__sfp+0x46>
 8004fea:	3468      	adds	r4, #104	; 0x68
 8004fec:	e7f4      	b.n	8004fd8 <__sfp+0x18>
 8004fee:	2104      	movs	r1, #4
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f7ff ff9f 	bl	8004f34 <__sfmoreglue>
 8004ff6:	6030      	str	r0, [r6, #0]
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d1f1      	bne.n	8004fe0 <__sfp+0x20>
 8004ffc:	230c      	movs	r3, #12
 8004ffe:	4604      	mov	r4, r0
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	4620      	mov	r0, r4
 8005004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005006:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <__sfp+0x74>)
 8005008:	6665      	str	r5, [r4, #100]	; 0x64
 800500a:	e9c4 5500 	strd	r5, r5, [r4]
 800500e:	60a5      	str	r5, [r4, #8]
 8005010:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005014:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005018:	2208      	movs	r2, #8
 800501a:	4629      	mov	r1, r5
 800501c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005020:	f7ff fcae 	bl	8004980 <memset>
 8005024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800502c:	e7e9      	b.n	8005002 <__sfp+0x42>
 800502e:	bf00      	nop
 8005030:	08005ae8 	.word	0x08005ae8
 8005034:	ffff0001 	.word	0xffff0001

08005038 <_fwalk_reent>:
 8005038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800503c:	4680      	mov	r8, r0
 800503e:	4689      	mov	r9, r1
 8005040:	2600      	movs	r6, #0
 8005042:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005046:	b914      	cbnz	r4, 800504e <_fwalk_reent+0x16>
 8005048:	4630      	mov	r0, r6
 800504a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800504e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005052:	3f01      	subs	r7, #1
 8005054:	d501      	bpl.n	800505a <_fwalk_reent+0x22>
 8005056:	6824      	ldr	r4, [r4, #0]
 8005058:	e7f5      	b.n	8005046 <_fwalk_reent+0xe>
 800505a:	89ab      	ldrh	r3, [r5, #12]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d907      	bls.n	8005070 <_fwalk_reent+0x38>
 8005060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005064:	3301      	adds	r3, #1
 8005066:	d003      	beq.n	8005070 <_fwalk_reent+0x38>
 8005068:	4629      	mov	r1, r5
 800506a:	4640      	mov	r0, r8
 800506c:	47c8      	blx	r9
 800506e:	4306      	orrs	r6, r0
 8005070:	3568      	adds	r5, #104	; 0x68
 8005072:	e7ee      	b.n	8005052 <_fwalk_reent+0x1a>

08005074 <__swhatbuf_r>:
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	460e      	mov	r6, r1
 8005078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507c:	b096      	sub	sp, #88	; 0x58
 800507e:	2900      	cmp	r1, #0
 8005080:	4614      	mov	r4, r2
 8005082:	461d      	mov	r5, r3
 8005084:	da07      	bge.n	8005096 <__swhatbuf_r+0x22>
 8005086:	2300      	movs	r3, #0
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	89b3      	ldrh	r3, [r6, #12]
 800508c:	061a      	lsls	r2, r3, #24
 800508e:	d410      	bmi.n	80050b2 <__swhatbuf_r+0x3e>
 8005090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005094:	e00e      	b.n	80050b4 <__swhatbuf_r+0x40>
 8005096:	466a      	mov	r2, sp
 8005098:	f000 fc3a 	bl	8005910 <_fstat_r>
 800509c:	2800      	cmp	r0, #0
 800509e:	dbf2      	blt.n	8005086 <__swhatbuf_r+0x12>
 80050a0:	9a01      	ldr	r2, [sp, #4]
 80050a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050aa:	425a      	negs	r2, r3
 80050ac:	415a      	adcs	r2, r3
 80050ae:	602a      	str	r2, [r5, #0]
 80050b0:	e7ee      	b.n	8005090 <__swhatbuf_r+0x1c>
 80050b2:	2340      	movs	r3, #64	; 0x40
 80050b4:	2000      	movs	r0, #0
 80050b6:	6023      	str	r3, [r4, #0]
 80050b8:	b016      	add	sp, #88	; 0x58
 80050ba:	bd70      	pop	{r4, r5, r6, pc}

080050bc <__smakebuf_r>:
 80050bc:	898b      	ldrh	r3, [r1, #12]
 80050be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050c0:	079d      	lsls	r5, r3, #30
 80050c2:	4606      	mov	r6, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	d507      	bpl.n	80050d8 <__smakebuf_r+0x1c>
 80050c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	6123      	str	r3, [r4, #16]
 80050d0:	2301      	movs	r3, #1
 80050d2:	6163      	str	r3, [r4, #20]
 80050d4:	b002      	add	sp, #8
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	ab01      	add	r3, sp, #4
 80050da:	466a      	mov	r2, sp
 80050dc:	f7ff ffca 	bl	8005074 <__swhatbuf_r>
 80050e0:	9900      	ldr	r1, [sp, #0]
 80050e2:	4605      	mov	r5, r0
 80050e4:	4630      	mov	r0, r6
 80050e6:	f000 f87d 	bl	80051e4 <_malloc_r>
 80050ea:	b948      	cbnz	r0, 8005100 <__smakebuf_r+0x44>
 80050ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f0:	059a      	lsls	r2, r3, #22
 80050f2:	d4ef      	bmi.n	80050d4 <__smakebuf_r+0x18>
 80050f4:	f023 0303 	bic.w	r3, r3, #3
 80050f8:	f043 0302 	orr.w	r3, r3, #2
 80050fc:	81a3      	strh	r3, [r4, #12]
 80050fe:	e7e3      	b.n	80050c8 <__smakebuf_r+0xc>
 8005100:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <__smakebuf_r+0x7c>)
 8005102:	62b3      	str	r3, [r6, #40]	; 0x28
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	6020      	str	r0, [r4, #0]
 8005108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510c:	81a3      	strh	r3, [r4, #12]
 800510e:	9b00      	ldr	r3, [sp, #0]
 8005110:	6120      	str	r0, [r4, #16]
 8005112:	6163      	str	r3, [r4, #20]
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	b15b      	cbz	r3, 8005130 <__smakebuf_r+0x74>
 8005118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800511c:	4630      	mov	r0, r6
 800511e:	f000 fc09 	bl	8005934 <_isatty_r>
 8005122:	b128      	cbz	r0, 8005130 <__smakebuf_r+0x74>
 8005124:	89a3      	ldrh	r3, [r4, #12]
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	81a3      	strh	r3, [r4, #12]
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	431d      	orrs	r5, r3
 8005134:	81a5      	strh	r5, [r4, #12]
 8005136:	e7cd      	b.n	80050d4 <__smakebuf_r+0x18>
 8005138:	08004f29 	.word	0x08004f29

0800513c <malloc>:
 800513c:	4b02      	ldr	r3, [pc, #8]	; (8005148 <malloc+0xc>)
 800513e:	4601      	mov	r1, r0
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	f000 b84f 	b.w	80051e4 <_malloc_r>
 8005146:	bf00      	nop
 8005148:	20000554 	.word	0x20000554

0800514c <_free_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4605      	mov	r5, r0
 8005150:	2900      	cmp	r1, #0
 8005152:	d043      	beq.n	80051dc <_free_r+0x90>
 8005154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005158:	1f0c      	subs	r4, r1, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfb8      	it	lt
 800515e:	18e4      	addlt	r4, r4, r3
 8005160:	f000 fc18 	bl	8005994 <__malloc_lock>
 8005164:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <_free_r+0x94>)
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	4610      	mov	r0, r2
 800516a:	b933      	cbnz	r3, 800517a <_free_r+0x2e>
 800516c:	6063      	str	r3, [r4, #4]
 800516e:	6014      	str	r4, [r2, #0]
 8005170:	4628      	mov	r0, r5
 8005172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005176:	f000 bc0e 	b.w	8005996 <__malloc_unlock>
 800517a:	42a3      	cmp	r3, r4
 800517c:	d90b      	bls.n	8005196 <_free_r+0x4a>
 800517e:	6821      	ldr	r1, [r4, #0]
 8005180:	1862      	adds	r2, r4, r1
 8005182:	4293      	cmp	r3, r2
 8005184:	bf01      	itttt	eq
 8005186:	681a      	ldreq	r2, [r3, #0]
 8005188:	685b      	ldreq	r3, [r3, #4]
 800518a:	1852      	addeq	r2, r2, r1
 800518c:	6022      	streq	r2, [r4, #0]
 800518e:	6063      	str	r3, [r4, #4]
 8005190:	6004      	str	r4, [r0, #0]
 8005192:	e7ed      	b.n	8005170 <_free_r+0x24>
 8005194:	4613      	mov	r3, r2
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	b10a      	cbz	r2, 800519e <_free_r+0x52>
 800519a:	42a2      	cmp	r2, r4
 800519c:	d9fa      	bls.n	8005194 <_free_r+0x48>
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	1858      	adds	r0, r3, r1
 80051a2:	42a0      	cmp	r0, r4
 80051a4:	d10b      	bne.n	80051be <_free_r+0x72>
 80051a6:	6820      	ldr	r0, [r4, #0]
 80051a8:	4401      	add	r1, r0
 80051aa:	1858      	adds	r0, r3, r1
 80051ac:	4282      	cmp	r2, r0
 80051ae:	6019      	str	r1, [r3, #0]
 80051b0:	d1de      	bne.n	8005170 <_free_r+0x24>
 80051b2:	6810      	ldr	r0, [r2, #0]
 80051b4:	6852      	ldr	r2, [r2, #4]
 80051b6:	4401      	add	r1, r0
 80051b8:	6019      	str	r1, [r3, #0]
 80051ba:	605a      	str	r2, [r3, #4]
 80051bc:	e7d8      	b.n	8005170 <_free_r+0x24>
 80051be:	d902      	bls.n	80051c6 <_free_r+0x7a>
 80051c0:	230c      	movs	r3, #12
 80051c2:	602b      	str	r3, [r5, #0]
 80051c4:	e7d4      	b.n	8005170 <_free_r+0x24>
 80051c6:	6820      	ldr	r0, [r4, #0]
 80051c8:	1821      	adds	r1, r4, r0
 80051ca:	428a      	cmp	r2, r1
 80051cc:	bf01      	itttt	eq
 80051ce:	6811      	ldreq	r1, [r2, #0]
 80051d0:	6852      	ldreq	r2, [r2, #4]
 80051d2:	1809      	addeq	r1, r1, r0
 80051d4:	6021      	streq	r1, [r4, #0]
 80051d6:	6062      	str	r2, [r4, #4]
 80051d8:	605c      	str	r4, [r3, #4]
 80051da:	e7c9      	b.n	8005170 <_free_r+0x24>
 80051dc:	bd38      	pop	{r3, r4, r5, pc}
 80051de:	bf00      	nop
 80051e0:	200005d8 	.word	0x200005d8

080051e4 <_malloc_r>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	1ccd      	adds	r5, r1, #3
 80051e8:	f025 0503 	bic.w	r5, r5, #3
 80051ec:	3508      	adds	r5, #8
 80051ee:	2d0c      	cmp	r5, #12
 80051f0:	bf38      	it	cc
 80051f2:	250c      	movcc	r5, #12
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	4606      	mov	r6, r0
 80051f8:	db01      	blt.n	80051fe <_malloc_r+0x1a>
 80051fa:	42a9      	cmp	r1, r5
 80051fc:	d903      	bls.n	8005206 <_malloc_r+0x22>
 80051fe:	230c      	movs	r3, #12
 8005200:	6033      	str	r3, [r6, #0]
 8005202:	2000      	movs	r0, #0
 8005204:	bd70      	pop	{r4, r5, r6, pc}
 8005206:	f000 fbc5 	bl	8005994 <__malloc_lock>
 800520a:	4a21      	ldr	r2, [pc, #132]	; (8005290 <_malloc_r+0xac>)
 800520c:	6814      	ldr	r4, [r2, #0]
 800520e:	4621      	mov	r1, r4
 8005210:	b991      	cbnz	r1, 8005238 <_malloc_r+0x54>
 8005212:	4c20      	ldr	r4, [pc, #128]	; (8005294 <_malloc_r+0xb0>)
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	b91b      	cbnz	r3, 8005220 <_malloc_r+0x3c>
 8005218:	4630      	mov	r0, r6
 800521a:	f000 fb03 	bl	8005824 <_sbrk_r>
 800521e:	6020      	str	r0, [r4, #0]
 8005220:	4629      	mov	r1, r5
 8005222:	4630      	mov	r0, r6
 8005224:	f000 fafe 	bl	8005824 <_sbrk_r>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d124      	bne.n	8005276 <_malloc_r+0x92>
 800522c:	230c      	movs	r3, #12
 800522e:	4630      	mov	r0, r6
 8005230:	6033      	str	r3, [r6, #0]
 8005232:	f000 fbb0 	bl	8005996 <__malloc_unlock>
 8005236:	e7e4      	b.n	8005202 <_malloc_r+0x1e>
 8005238:	680b      	ldr	r3, [r1, #0]
 800523a:	1b5b      	subs	r3, r3, r5
 800523c:	d418      	bmi.n	8005270 <_malloc_r+0x8c>
 800523e:	2b0b      	cmp	r3, #11
 8005240:	d90f      	bls.n	8005262 <_malloc_r+0x7e>
 8005242:	600b      	str	r3, [r1, #0]
 8005244:	18cc      	adds	r4, r1, r3
 8005246:	50cd      	str	r5, [r1, r3]
 8005248:	4630      	mov	r0, r6
 800524a:	f000 fba4 	bl	8005996 <__malloc_unlock>
 800524e:	f104 000b 	add.w	r0, r4, #11
 8005252:	1d23      	adds	r3, r4, #4
 8005254:	f020 0007 	bic.w	r0, r0, #7
 8005258:	1ac3      	subs	r3, r0, r3
 800525a:	d0d3      	beq.n	8005204 <_malloc_r+0x20>
 800525c:	425a      	negs	r2, r3
 800525e:	50e2      	str	r2, [r4, r3]
 8005260:	e7d0      	b.n	8005204 <_malloc_r+0x20>
 8005262:	684b      	ldr	r3, [r1, #4]
 8005264:	428c      	cmp	r4, r1
 8005266:	bf16      	itet	ne
 8005268:	6063      	strne	r3, [r4, #4]
 800526a:	6013      	streq	r3, [r2, #0]
 800526c:	460c      	movne	r4, r1
 800526e:	e7eb      	b.n	8005248 <_malloc_r+0x64>
 8005270:	460c      	mov	r4, r1
 8005272:	6849      	ldr	r1, [r1, #4]
 8005274:	e7cc      	b.n	8005210 <_malloc_r+0x2c>
 8005276:	1cc4      	adds	r4, r0, #3
 8005278:	f024 0403 	bic.w	r4, r4, #3
 800527c:	42a0      	cmp	r0, r4
 800527e:	d005      	beq.n	800528c <_malloc_r+0xa8>
 8005280:	1a21      	subs	r1, r4, r0
 8005282:	4630      	mov	r0, r6
 8005284:	f000 face 	bl	8005824 <_sbrk_r>
 8005288:	3001      	adds	r0, #1
 800528a:	d0cf      	beq.n	800522c <_malloc_r+0x48>
 800528c:	6025      	str	r5, [r4, #0]
 800528e:	e7db      	b.n	8005248 <_malloc_r+0x64>
 8005290:	200005d8 	.word	0x200005d8
 8005294:	200005dc 	.word	0x200005dc

08005298 <__sfputc_r>:
 8005298:	6893      	ldr	r3, [r2, #8]
 800529a:	b410      	push	{r4}
 800529c:	3b01      	subs	r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	6093      	str	r3, [r2, #8]
 80052a2:	da07      	bge.n	80052b4 <__sfputc_r+0x1c>
 80052a4:	6994      	ldr	r4, [r2, #24]
 80052a6:	42a3      	cmp	r3, r4
 80052a8:	db01      	blt.n	80052ae <__sfputc_r+0x16>
 80052aa:	290a      	cmp	r1, #10
 80052ac:	d102      	bne.n	80052b4 <__sfputc_r+0x1c>
 80052ae:	bc10      	pop	{r4}
 80052b0:	f7ff bca6 	b.w	8004c00 <__swbuf_r>
 80052b4:	6813      	ldr	r3, [r2, #0]
 80052b6:	1c58      	adds	r0, r3, #1
 80052b8:	6010      	str	r0, [r2, #0]
 80052ba:	7019      	strb	r1, [r3, #0]
 80052bc:	4608      	mov	r0, r1
 80052be:	bc10      	pop	{r4}
 80052c0:	4770      	bx	lr

080052c2 <__sfputs_r>:
 80052c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c4:	4606      	mov	r6, r0
 80052c6:	460f      	mov	r7, r1
 80052c8:	4614      	mov	r4, r2
 80052ca:	18d5      	adds	r5, r2, r3
 80052cc:	42ac      	cmp	r4, r5
 80052ce:	d101      	bne.n	80052d4 <__sfputs_r+0x12>
 80052d0:	2000      	movs	r0, #0
 80052d2:	e007      	b.n	80052e4 <__sfputs_r+0x22>
 80052d4:	463a      	mov	r2, r7
 80052d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052da:	4630      	mov	r0, r6
 80052dc:	f7ff ffdc 	bl	8005298 <__sfputc_r>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d1f3      	bne.n	80052cc <__sfputs_r+0xa>
 80052e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052e8 <_vfiprintf_r>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	460c      	mov	r4, r1
 80052ee:	b09d      	sub	sp, #116	; 0x74
 80052f0:	4617      	mov	r7, r2
 80052f2:	461d      	mov	r5, r3
 80052f4:	4606      	mov	r6, r0
 80052f6:	b118      	cbz	r0, 8005300 <_vfiprintf_r+0x18>
 80052f8:	6983      	ldr	r3, [r0, #24]
 80052fa:	b90b      	cbnz	r3, 8005300 <_vfiprintf_r+0x18>
 80052fc:	f7ff fe30 	bl	8004f60 <__sinit>
 8005300:	4b7c      	ldr	r3, [pc, #496]	; (80054f4 <_vfiprintf_r+0x20c>)
 8005302:	429c      	cmp	r4, r3
 8005304:	d158      	bne.n	80053b8 <_vfiprintf_r+0xd0>
 8005306:	6874      	ldr	r4, [r6, #4]
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	0718      	lsls	r0, r3, #28
 800530c:	d55e      	bpl.n	80053cc <_vfiprintf_r+0xe4>
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d05b      	beq.n	80053cc <_vfiprintf_r+0xe4>
 8005314:	2300      	movs	r3, #0
 8005316:	9309      	str	r3, [sp, #36]	; 0x24
 8005318:	2320      	movs	r3, #32
 800531a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800531e:	2330      	movs	r3, #48	; 0x30
 8005320:	f04f 0b01 	mov.w	fp, #1
 8005324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005328:	9503      	str	r5, [sp, #12]
 800532a:	46b8      	mov	r8, r7
 800532c:	4645      	mov	r5, r8
 800532e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005332:	b10b      	cbz	r3, 8005338 <_vfiprintf_r+0x50>
 8005334:	2b25      	cmp	r3, #37	; 0x25
 8005336:	d154      	bne.n	80053e2 <_vfiprintf_r+0xfa>
 8005338:	ebb8 0a07 	subs.w	sl, r8, r7
 800533c:	d00b      	beq.n	8005356 <_vfiprintf_r+0x6e>
 800533e:	4653      	mov	r3, sl
 8005340:	463a      	mov	r2, r7
 8005342:	4621      	mov	r1, r4
 8005344:	4630      	mov	r0, r6
 8005346:	f7ff ffbc 	bl	80052c2 <__sfputs_r>
 800534a:	3001      	adds	r0, #1
 800534c:	f000 80c2 	beq.w	80054d4 <_vfiprintf_r+0x1ec>
 8005350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005352:	4453      	add	r3, sl
 8005354:	9309      	str	r3, [sp, #36]	; 0x24
 8005356:	f898 3000 	ldrb.w	r3, [r8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80ba 	beq.w	80054d4 <_vfiprintf_r+0x1ec>
 8005360:	2300      	movs	r3, #0
 8005362:	f04f 32ff 	mov.w	r2, #4294967295
 8005366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	9307      	str	r3, [sp, #28]
 800536e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005372:	931a      	str	r3, [sp, #104]	; 0x68
 8005374:	46a8      	mov	r8, r5
 8005376:	2205      	movs	r2, #5
 8005378:	f818 1b01 	ldrb.w	r1, [r8], #1
 800537c:	485e      	ldr	r0, [pc, #376]	; (80054f8 <_vfiprintf_r+0x210>)
 800537e:	f000 fafb 	bl	8005978 <memchr>
 8005382:	9b04      	ldr	r3, [sp, #16]
 8005384:	bb78      	cbnz	r0, 80053e6 <_vfiprintf_r+0xfe>
 8005386:	06d9      	lsls	r1, r3, #27
 8005388:	bf44      	itt	mi
 800538a:	2220      	movmi	r2, #32
 800538c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005390:	071a      	lsls	r2, r3, #28
 8005392:	bf44      	itt	mi
 8005394:	222b      	movmi	r2, #43	; 0x2b
 8005396:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800539a:	782a      	ldrb	r2, [r5, #0]
 800539c:	2a2a      	cmp	r2, #42	; 0x2a
 800539e:	d02a      	beq.n	80053f6 <_vfiprintf_r+0x10e>
 80053a0:	46a8      	mov	r8, r5
 80053a2:	2000      	movs	r0, #0
 80053a4:	250a      	movs	r5, #10
 80053a6:	9a07      	ldr	r2, [sp, #28]
 80053a8:	4641      	mov	r1, r8
 80053aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ae:	3b30      	subs	r3, #48	; 0x30
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	d969      	bls.n	8005488 <_vfiprintf_r+0x1a0>
 80053b4:	b360      	cbz	r0, 8005410 <_vfiprintf_r+0x128>
 80053b6:	e024      	b.n	8005402 <_vfiprintf_r+0x11a>
 80053b8:	4b50      	ldr	r3, [pc, #320]	; (80054fc <_vfiprintf_r+0x214>)
 80053ba:	429c      	cmp	r4, r3
 80053bc:	d101      	bne.n	80053c2 <_vfiprintf_r+0xda>
 80053be:	68b4      	ldr	r4, [r6, #8]
 80053c0:	e7a2      	b.n	8005308 <_vfiprintf_r+0x20>
 80053c2:	4b4f      	ldr	r3, [pc, #316]	; (8005500 <_vfiprintf_r+0x218>)
 80053c4:	429c      	cmp	r4, r3
 80053c6:	bf08      	it	eq
 80053c8:	68f4      	ldreq	r4, [r6, #12]
 80053ca:	e79d      	b.n	8005308 <_vfiprintf_r+0x20>
 80053cc:	4621      	mov	r1, r4
 80053ce:	4630      	mov	r0, r6
 80053d0:	f7ff fc68 	bl	8004ca4 <__swsetup_r>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d09d      	beq.n	8005314 <_vfiprintf_r+0x2c>
 80053d8:	f04f 30ff 	mov.w	r0, #4294967295
 80053dc:	b01d      	add	sp, #116	; 0x74
 80053de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e2:	46a8      	mov	r8, r5
 80053e4:	e7a2      	b.n	800532c <_vfiprintf_r+0x44>
 80053e6:	4a44      	ldr	r2, [pc, #272]	; (80054f8 <_vfiprintf_r+0x210>)
 80053e8:	4645      	mov	r5, r8
 80053ea:	1a80      	subs	r0, r0, r2
 80053ec:	fa0b f000 	lsl.w	r0, fp, r0
 80053f0:	4318      	orrs	r0, r3
 80053f2:	9004      	str	r0, [sp, #16]
 80053f4:	e7be      	b.n	8005374 <_vfiprintf_r+0x8c>
 80053f6:	9a03      	ldr	r2, [sp, #12]
 80053f8:	1d11      	adds	r1, r2, #4
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	9103      	str	r1, [sp, #12]
 80053fe:	2a00      	cmp	r2, #0
 8005400:	db01      	blt.n	8005406 <_vfiprintf_r+0x11e>
 8005402:	9207      	str	r2, [sp, #28]
 8005404:	e004      	b.n	8005410 <_vfiprintf_r+0x128>
 8005406:	4252      	negs	r2, r2
 8005408:	f043 0302 	orr.w	r3, r3, #2
 800540c:	9207      	str	r2, [sp, #28]
 800540e:	9304      	str	r3, [sp, #16]
 8005410:	f898 3000 	ldrb.w	r3, [r8]
 8005414:	2b2e      	cmp	r3, #46	; 0x2e
 8005416:	d10e      	bne.n	8005436 <_vfiprintf_r+0x14e>
 8005418:	f898 3001 	ldrb.w	r3, [r8, #1]
 800541c:	2b2a      	cmp	r3, #42	; 0x2a
 800541e:	d138      	bne.n	8005492 <_vfiprintf_r+0x1aa>
 8005420:	9b03      	ldr	r3, [sp, #12]
 8005422:	f108 0802 	add.w	r8, r8, #2
 8005426:	1d1a      	adds	r2, r3, #4
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	9203      	str	r2, [sp, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	bfb8      	it	lt
 8005430:	f04f 33ff 	movlt.w	r3, #4294967295
 8005434:	9305      	str	r3, [sp, #20]
 8005436:	4d33      	ldr	r5, [pc, #204]	; (8005504 <_vfiprintf_r+0x21c>)
 8005438:	2203      	movs	r2, #3
 800543a:	f898 1000 	ldrb.w	r1, [r8]
 800543e:	4628      	mov	r0, r5
 8005440:	f000 fa9a 	bl	8005978 <memchr>
 8005444:	b140      	cbz	r0, 8005458 <_vfiprintf_r+0x170>
 8005446:	2340      	movs	r3, #64	; 0x40
 8005448:	1b40      	subs	r0, r0, r5
 800544a:	fa03 f000 	lsl.w	r0, r3, r0
 800544e:	9b04      	ldr	r3, [sp, #16]
 8005450:	f108 0801 	add.w	r8, r8, #1
 8005454:	4303      	orrs	r3, r0
 8005456:	9304      	str	r3, [sp, #16]
 8005458:	f898 1000 	ldrb.w	r1, [r8]
 800545c:	2206      	movs	r2, #6
 800545e:	482a      	ldr	r0, [pc, #168]	; (8005508 <_vfiprintf_r+0x220>)
 8005460:	f108 0701 	add.w	r7, r8, #1
 8005464:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005468:	f000 fa86 	bl	8005978 <memchr>
 800546c:	2800      	cmp	r0, #0
 800546e:	d037      	beq.n	80054e0 <_vfiprintf_r+0x1f8>
 8005470:	4b26      	ldr	r3, [pc, #152]	; (800550c <_vfiprintf_r+0x224>)
 8005472:	bb1b      	cbnz	r3, 80054bc <_vfiprintf_r+0x1d4>
 8005474:	9b03      	ldr	r3, [sp, #12]
 8005476:	3307      	adds	r3, #7
 8005478:	f023 0307 	bic.w	r3, r3, #7
 800547c:	3308      	adds	r3, #8
 800547e:	9303      	str	r3, [sp, #12]
 8005480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005482:	444b      	add	r3, r9
 8005484:	9309      	str	r3, [sp, #36]	; 0x24
 8005486:	e750      	b.n	800532a <_vfiprintf_r+0x42>
 8005488:	fb05 3202 	mla	r2, r5, r2, r3
 800548c:	2001      	movs	r0, #1
 800548e:	4688      	mov	r8, r1
 8005490:	e78a      	b.n	80053a8 <_vfiprintf_r+0xc0>
 8005492:	2300      	movs	r3, #0
 8005494:	250a      	movs	r5, #10
 8005496:	4619      	mov	r1, r3
 8005498:	f108 0801 	add.w	r8, r8, #1
 800549c:	9305      	str	r3, [sp, #20]
 800549e:	4640      	mov	r0, r8
 80054a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054a4:	3a30      	subs	r2, #48	; 0x30
 80054a6:	2a09      	cmp	r2, #9
 80054a8:	d903      	bls.n	80054b2 <_vfiprintf_r+0x1ca>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0c3      	beq.n	8005436 <_vfiprintf_r+0x14e>
 80054ae:	9105      	str	r1, [sp, #20]
 80054b0:	e7c1      	b.n	8005436 <_vfiprintf_r+0x14e>
 80054b2:	fb05 2101 	mla	r1, r5, r1, r2
 80054b6:	2301      	movs	r3, #1
 80054b8:	4680      	mov	r8, r0
 80054ba:	e7f0      	b.n	800549e <_vfiprintf_r+0x1b6>
 80054bc:	ab03      	add	r3, sp, #12
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	4622      	mov	r2, r4
 80054c2:	4b13      	ldr	r3, [pc, #76]	; (8005510 <_vfiprintf_r+0x228>)
 80054c4:	a904      	add	r1, sp, #16
 80054c6:	4630      	mov	r0, r6
 80054c8:	f3af 8000 	nop.w
 80054cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80054d0:	4681      	mov	r9, r0
 80054d2:	d1d5      	bne.n	8005480 <_vfiprintf_r+0x198>
 80054d4:	89a3      	ldrh	r3, [r4, #12]
 80054d6:	065b      	lsls	r3, r3, #25
 80054d8:	f53f af7e 	bmi.w	80053d8 <_vfiprintf_r+0xf0>
 80054dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054de:	e77d      	b.n	80053dc <_vfiprintf_r+0xf4>
 80054e0:	ab03      	add	r3, sp, #12
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	4622      	mov	r2, r4
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <_vfiprintf_r+0x228>)
 80054e8:	a904      	add	r1, sp, #16
 80054ea:	4630      	mov	r0, r6
 80054ec:	f000 f888 	bl	8005600 <_printf_i>
 80054f0:	e7ec      	b.n	80054cc <_vfiprintf_r+0x1e4>
 80054f2:	bf00      	nop
 80054f4:	08005b0c 	.word	0x08005b0c
 80054f8:	08005b4c 	.word	0x08005b4c
 80054fc:	08005b2c 	.word	0x08005b2c
 8005500:	08005aec 	.word	0x08005aec
 8005504:	08005b52 	.word	0x08005b52
 8005508:	08005b56 	.word	0x08005b56
 800550c:	00000000 	.word	0x00000000
 8005510:	080052c3 	.word	0x080052c3

08005514 <_printf_common>:
 8005514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005518:	4691      	mov	r9, r2
 800551a:	461f      	mov	r7, r3
 800551c:	688a      	ldr	r2, [r1, #8]
 800551e:	690b      	ldr	r3, [r1, #16]
 8005520:	4606      	mov	r6, r0
 8005522:	4293      	cmp	r3, r2
 8005524:	bfb8      	it	lt
 8005526:	4613      	movlt	r3, r2
 8005528:	f8c9 3000 	str.w	r3, [r9]
 800552c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005530:	460c      	mov	r4, r1
 8005532:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005536:	b112      	cbz	r2, 800553e <_printf_common+0x2a>
 8005538:	3301      	adds	r3, #1
 800553a:	f8c9 3000 	str.w	r3, [r9]
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	0699      	lsls	r1, r3, #26
 8005542:	bf42      	ittt	mi
 8005544:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005548:	3302      	addmi	r3, #2
 800554a:	f8c9 3000 	strmi.w	r3, [r9]
 800554e:	6825      	ldr	r5, [r4, #0]
 8005550:	f015 0506 	ands.w	r5, r5, #6
 8005554:	d107      	bne.n	8005566 <_printf_common+0x52>
 8005556:	f104 0a19 	add.w	sl, r4, #25
 800555a:	68e3      	ldr	r3, [r4, #12]
 800555c:	f8d9 2000 	ldr.w	r2, [r9]
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	42ab      	cmp	r3, r5
 8005564:	dc29      	bgt.n	80055ba <_printf_common+0xa6>
 8005566:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	3300      	adds	r3, #0
 800556e:	bf18      	it	ne
 8005570:	2301      	movne	r3, #1
 8005572:	0692      	lsls	r2, r2, #26
 8005574:	d42e      	bmi.n	80055d4 <_printf_common+0xc0>
 8005576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800557a:	4639      	mov	r1, r7
 800557c:	4630      	mov	r0, r6
 800557e:	47c0      	blx	r8
 8005580:	3001      	adds	r0, #1
 8005582:	d021      	beq.n	80055c8 <_printf_common+0xb4>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	68e5      	ldr	r5, [r4, #12]
 8005588:	f003 0306 	and.w	r3, r3, #6
 800558c:	2b04      	cmp	r3, #4
 800558e:	bf18      	it	ne
 8005590:	2500      	movne	r5, #0
 8005592:	f8d9 2000 	ldr.w	r2, [r9]
 8005596:	f04f 0900 	mov.w	r9, #0
 800559a:	bf08      	it	eq
 800559c:	1aad      	subeq	r5, r5, r2
 800559e:	68a3      	ldr	r3, [r4, #8]
 80055a0:	6922      	ldr	r2, [r4, #16]
 80055a2:	bf08      	it	eq
 80055a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055a8:	4293      	cmp	r3, r2
 80055aa:	bfc4      	itt	gt
 80055ac:	1a9b      	subgt	r3, r3, r2
 80055ae:	18ed      	addgt	r5, r5, r3
 80055b0:	341a      	adds	r4, #26
 80055b2:	454d      	cmp	r5, r9
 80055b4:	d11a      	bne.n	80055ec <_printf_common+0xd8>
 80055b6:	2000      	movs	r0, #0
 80055b8:	e008      	b.n	80055cc <_printf_common+0xb8>
 80055ba:	2301      	movs	r3, #1
 80055bc:	4652      	mov	r2, sl
 80055be:	4639      	mov	r1, r7
 80055c0:	4630      	mov	r0, r6
 80055c2:	47c0      	blx	r8
 80055c4:	3001      	adds	r0, #1
 80055c6:	d103      	bne.n	80055d0 <_printf_common+0xbc>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d0:	3501      	adds	r5, #1
 80055d2:	e7c2      	b.n	800555a <_printf_common+0x46>
 80055d4:	2030      	movs	r0, #48	; 0x30
 80055d6:	18e1      	adds	r1, r4, r3
 80055d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055e2:	4422      	add	r2, r4
 80055e4:	3302      	adds	r3, #2
 80055e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055ea:	e7c4      	b.n	8005576 <_printf_common+0x62>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4622      	mov	r2, r4
 80055f0:	4639      	mov	r1, r7
 80055f2:	4630      	mov	r0, r6
 80055f4:	47c0      	blx	r8
 80055f6:	3001      	adds	r0, #1
 80055f8:	d0e6      	beq.n	80055c8 <_printf_common+0xb4>
 80055fa:	f109 0901 	add.w	r9, r9, #1
 80055fe:	e7d8      	b.n	80055b2 <_printf_common+0x9e>

08005600 <_printf_i>:
 8005600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005604:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005608:	460c      	mov	r4, r1
 800560a:	7e09      	ldrb	r1, [r1, #24]
 800560c:	b085      	sub	sp, #20
 800560e:	296e      	cmp	r1, #110	; 0x6e
 8005610:	4617      	mov	r7, r2
 8005612:	4606      	mov	r6, r0
 8005614:	4698      	mov	r8, r3
 8005616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005618:	f000 80b3 	beq.w	8005782 <_printf_i+0x182>
 800561c:	d822      	bhi.n	8005664 <_printf_i+0x64>
 800561e:	2963      	cmp	r1, #99	; 0x63
 8005620:	d036      	beq.n	8005690 <_printf_i+0x90>
 8005622:	d80a      	bhi.n	800563a <_printf_i+0x3a>
 8005624:	2900      	cmp	r1, #0
 8005626:	f000 80b9 	beq.w	800579c <_printf_i+0x19c>
 800562a:	2958      	cmp	r1, #88	; 0x58
 800562c:	f000 8083 	beq.w	8005736 <_printf_i+0x136>
 8005630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005634:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005638:	e032      	b.n	80056a0 <_printf_i+0xa0>
 800563a:	2964      	cmp	r1, #100	; 0x64
 800563c:	d001      	beq.n	8005642 <_printf_i+0x42>
 800563e:	2969      	cmp	r1, #105	; 0x69
 8005640:	d1f6      	bne.n	8005630 <_printf_i+0x30>
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	6813      	ldr	r3, [r2, #0]
 8005646:	0605      	lsls	r5, r0, #24
 8005648:	f103 0104 	add.w	r1, r3, #4
 800564c:	d52a      	bpl.n	80056a4 <_printf_i+0xa4>
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6011      	str	r1, [r2, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	da03      	bge.n	800565e <_printf_i+0x5e>
 8005656:	222d      	movs	r2, #45	; 0x2d
 8005658:	425b      	negs	r3, r3
 800565a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800565e:	486f      	ldr	r0, [pc, #444]	; (800581c <_printf_i+0x21c>)
 8005660:	220a      	movs	r2, #10
 8005662:	e039      	b.n	80056d8 <_printf_i+0xd8>
 8005664:	2973      	cmp	r1, #115	; 0x73
 8005666:	f000 809d 	beq.w	80057a4 <_printf_i+0x1a4>
 800566a:	d808      	bhi.n	800567e <_printf_i+0x7e>
 800566c:	296f      	cmp	r1, #111	; 0x6f
 800566e:	d020      	beq.n	80056b2 <_printf_i+0xb2>
 8005670:	2970      	cmp	r1, #112	; 0x70
 8005672:	d1dd      	bne.n	8005630 <_printf_i+0x30>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	f043 0320 	orr.w	r3, r3, #32
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	e003      	b.n	8005686 <_printf_i+0x86>
 800567e:	2975      	cmp	r1, #117	; 0x75
 8005680:	d017      	beq.n	80056b2 <_printf_i+0xb2>
 8005682:	2978      	cmp	r1, #120	; 0x78
 8005684:	d1d4      	bne.n	8005630 <_printf_i+0x30>
 8005686:	2378      	movs	r3, #120	; 0x78
 8005688:	4865      	ldr	r0, [pc, #404]	; (8005820 <_printf_i+0x220>)
 800568a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800568e:	e055      	b.n	800573c <_printf_i+0x13c>
 8005690:	6813      	ldr	r3, [r2, #0]
 8005692:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005696:	1d19      	adds	r1, r3, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6011      	str	r1, [r2, #0]
 800569c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056a0:	2301      	movs	r3, #1
 80056a2:	e08c      	b.n	80057be <_printf_i+0x1be>
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056aa:	6011      	str	r1, [r2, #0]
 80056ac:	bf18      	it	ne
 80056ae:	b21b      	sxthne	r3, r3
 80056b0:	e7cf      	b.n	8005652 <_printf_i+0x52>
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	6825      	ldr	r5, [r4, #0]
 80056b6:	1d18      	adds	r0, r3, #4
 80056b8:	6010      	str	r0, [r2, #0]
 80056ba:	0628      	lsls	r0, r5, #24
 80056bc:	d501      	bpl.n	80056c2 <_printf_i+0xc2>
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	e002      	b.n	80056c8 <_printf_i+0xc8>
 80056c2:	0668      	lsls	r0, r5, #25
 80056c4:	d5fb      	bpl.n	80056be <_printf_i+0xbe>
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	296f      	cmp	r1, #111	; 0x6f
 80056ca:	bf14      	ite	ne
 80056cc:	220a      	movne	r2, #10
 80056ce:	2208      	moveq	r2, #8
 80056d0:	4852      	ldr	r0, [pc, #328]	; (800581c <_printf_i+0x21c>)
 80056d2:	2100      	movs	r1, #0
 80056d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056d8:	6865      	ldr	r5, [r4, #4]
 80056da:	2d00      	cmp	r5, #0
 80056dc:	60a5      	str	r5, [r4, #8]
 80056de:	f2c0 8095 	blt.w	800580c <_printf_i+0x20c>
 80056e2:	6821      	ldr	r1, [r4, #0]
 80056e4:	f021 0104 	bic.w	r1, r1, #4
 80056e8:	6021      	str	r1, [r4, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d13d      	bne.n	800576a <_printf_i+0x16a>
 80056ee:	2d00      	cmp	r5, #0
 80056f0:	f040 808e 	bne.w	8005810 <_printf_i+0x210>
 80056f4:	4665      	mov	r5, ip
 80056f6:	2a08      	cmp	r2, #8
 80056f8:	d10b      	bne.n	8005712 <_printf_i+0x112>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	07db      	lsls	r3, r3, #31
 80056fe:	d508      	bpl.n	8005712 <_printf_i+0x112>
 8005700:	6923      	ldr	r3, [r4, #16]
 8005702:	6862      	ldr	r2, [r4, #4]
 8005704:	429a      	cmp	r2, r3
 8005706:	bfde      	ittt	le
 8005708:	2330      	movle	r3, #48	; 0x30
 800570a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800570e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005712:	ebac 0305 	sub.w	r3, ip, r5
 8005716:	6123      	str	r3, [r4, #16]
 8005718:	f8cd 8000 	str.w	r8, [sp]
 800571c:	463b      	mov	r3, r7
 800571e:	aa03      	add	r2, sp, #12
 8005720:	4621      	mov	r1, r4
 8005722:	4630      	mov	r0, r6
 8005724:	f7ff fef6 	bl	8005514 <_printf_common>
 8005728:	3001      	adds	r0, #1
 800572a:	d14d      	bne.n	80057c8 <_printf_i+0x1c8>
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	b005      	add	sp, #20
 8005732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005736:	4839      	ldr	r0, [pc, #228]	; (800581c <_printf_i+0x21c>)
 8005738:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800573c:	6813      	ldr	r3, [r2, #0]
 800573e:	6821      	ldr	r1, [r4, #0]
 8005740:	1d1d      	adds	r5, r3, #4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6015      	str	r5, [r2, #0]
 8005746:	060a      	lsls	r2, r1, #24
 8005748:	d50b      	bpl.n	8005762 <_printf_i+0x162>
 800574a:	07ca      	lsls	r2, r1, #31
 800574c:	bf44      	itt	mi
 800574e:	f041 0120 	orrmi.w	r1, r1, #32
 8005752:	6021      	strmi	r1, [r4, #0]
 8005754:	b91b      	cbnz	r3, 800575e <_printf_i+0x15e>
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	f022 0220 	bic.w	r2, r2, #32
 800575c:	6022      	str	r2, [r4, #0]
 800575e:	2210      	movs	r2, #16
 8005760:	e7b7      	b.n	80056d2 <_printf_i+0xd2>
 8005762:	064d      	lsls	r5, r1, #25
 8005764:	bf48      	it	mi
 8005766:	b29b      	uxthmi	r3, r3
 8005768:	e7ef      	b.n	800574a <_printf_i+0x14a>
 800576a:	4665      	mov	r5, ip
 800576c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005770:	fb02 3311 	mls	r3, r2, r1, r3
 8005774:	5cc3      	ldrb	r3, [r0, r3]
 8005776:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800577a:	460b      	mov	r3, r1
 800577c:	2900      	cmp	r1, #0
 800577e:	d1f5      	bne.n	800576c <_printf_i+0x16c>
 8005780:	e7b9      	b.n	80056f6 <_printf_i+0xf6>
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	6825      	ldr	r5, [r4, #0]
 8005786:	1d18      	adds	r0, r3, #4
 8005788:	6961      	ldr	r1, [r4, #20]
 800578a:	6010      	str	r0, [r2, #0]
 800578c:	0628      	lsls	r0, r5, #24
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	d501      	bpl.n	8005796 <_printf_i+0x196>
 8005792:	6019      	str	r1, [r3, #0]
 8005794:	e002      	b.n	800579c <_printf_i+0x19c>
 8005796:	066a      	lsls	r2, r5, #25
 8005798:	d5fb      	bpl.n	8005792 <_printf_i+0x192>
 800579a:	8019      	strh	r1, [r3, #0]
 800579c:	2300      	movs	r3, #0
 800579e:	4665      	mov	r5, ip
 80057a0:	6123      	str	r3, [r4, #16]
 80057a2:	e7b9      	b.n	8005718 <_printf_i+0x118>
 80057a4:	6813      	ldr	r3, [r2, #0]
 80057a6:	1d19      	adds	r1, r3, #4
 80057a8:	6011      	str	r1, [r2, #0]
 80057aa:	681d      	ldr	r5, [r3, #0]
 80057ac:	6862      	ldr	r2, [r4, #4]
 80057ae:	2100      	movs	r1, #0
 80057b0:	4628      	mov	r0, r5
 80057b2:	f000 f8e1 	bl	8005978 <memchr>
 80057b6:	b108      	cbz	r0, 80057bc <_printf_i+0x1bc>
 80057b8:	1b40      	subs	r0, r0, r5
 80057ba:	6060      	str	r0, [r4, #4]
 80057bc:	6863      	ldr	r3, [r4, #4]
 80057be:	6123      	str	r3, [r4, #16]
 80057c0:	2300      	movs	r3, #0
 80057c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c6:	e7a7      	b.n	8005718 <_printf_i+0x118>
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	462a      	mov	r2, r5
 80057cc:	4639      	mov	r1, r7
 80057ce:	4630      	mov	r0, r6
 80057d0:	47c0      	blx	r8
 80057d2:	3001      	adds	r0, #1
 80057d4:	d0aa      	beq.n	800572c <_printf_i+0x12c>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	079b      	lsls	r3, r3, #30
 80057da:	d413      	bmi.n	8005804 <_printf_i+0x204>
 80057dc:	68e0      	ldr	r0, [r4, #12]
 80057de:	9b03      	ldr	r3, [sp, #12]
 80057e0:	4298      	cmp	r0, r3
 80057e2:	bfb8      	it	lt
 80057e4:	4618      	movlt	r0, r3
 80057e6:	e7a3      	b.n	8005730 <_printf_i+0x130>
 80057e8:	2301      	movs	r3, #1
 80057ea:	464a      	mov	r2, r9
 80057ec:	4639      	mov	r1, r7
 80057ee:	4630      	mov	r0, r6
 80057f0:	47c0      	blx	r8
 80057f2:	3001      	adds	r0, #1
 80057f4:	d09a      	beq.n	800572c <_printf_i+0x12c>
 80057f6:	3501      	adds	r5, #1
 80057f8:	68e3      	ldr	r3, [r4, #12]
 80057fa:	9a03      	ldr	r2, [sp, #12]
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	42ab      	cmp	r3, r5
 8005800:	dcf2      	bgt.n	80057e8 <_printf_i+0x1e8>
 8005802:	e7eb      	b.n	80057dc <_printf_i+0x1dc>
 8005804:	2500      	movs	r5, #0
 8005806:	f104 0919 	add.w	r9, r4, #25
 800580a:	e7f5      	b.n	80057f8 <_printf_i+0x1f8>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1ac      	bne.n	800576a <_printf_i+0x16a>
 8005810:	7803      	ldrb	r3, [r0, #0]
 8005812:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005816:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800581a:	e76c      	b.n	80056f6 <_printf_i+0xf6>
 800581c:	08005b5d 	.word	0x08005b5d
 8005820:	08005b6e 	.word	0x08005b6e

08005824 <_sbrk_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	2300      	movs	r3, #0
 8005828:	4c05      	ldr	r4, [pc, #20]	; (8005840 <_sbrk_r+0x1c>)
 800582a:	4605      	mov	r5, r0
 800582c:	4608      	mov	r0, r1
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	f7fb ffc2 	bl	80017b8 <_sbrk>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_sbrk_r+0x1a>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	b103      	cbz	r3, 800583e <_sbrk_r+0x1a>
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	20000790 	.word	0x20000790

08005844 <__sread>:
 8005844:	b510      	push	{r4, lr}
 8005846:	460c      	mov	r4, r1
 8005848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584c:	f000 f8a4 	bl	8005998 <_read_r>
 8005850:	2800      	cmp	r0, #0
 8005852:	bfab      	itete	ge
 8005854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005856:	89a3      	ldrhlt	r3, [r4, #12]
 8005858:	181b      	addge	r3, r3, r0
 800585a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800585e:	bfac      	ite	ge
 8005860:	6563      	strge	r3, [r4, #84]	; 0x54
 8005862:	81a3      	strhlt	r3, [r4, #12]
 8005864:	bd10      	pop	{r4, pc}

08005866 <__swrite>:
 8005866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800586a:	461f      	mov	r7, r3
 800586c:	898b      	ldrh	r3, [r1, #12]
 800586e:	4605      	mov	r5, r0
 8005870:	05db      	lsls	r3, r3, #23
 8005872:	460c      	mov	r4, r1
 8005874:	4616      	mov	r6, r2
 8005876:	d505      	bpl.n	8005884 <__swrite+0x1e>
 8005878:	2302      	movs	r3, #2
 800587a:	2200      	movs	r2, #0
 800587c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005880:	f000 f868 	bl	8005954 <_lseek_r>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	4632      	mov	r2, r6
 8005888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005892:	463b      	mov	r3, r7
 8005894:	4628      	mov	r0, r5
 8005896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800589a:	f000 b817 	b.w	80058cc <_write_r>

0800589e <__sseek>:
 800589e:	b510      	push	{r4, lr}
 80058a0:	460c      	mov	r4, r1
 80058a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a6:	f000 f855 	bl	8005954 <_lseek_r>
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	bf15      	itete	ne
 80058b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80058b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058ba:	81a3      	strheq	r3, [r4, #12]
 80058bc:	bf18      	it	ne
 80058be:	81a3      	strhne	r3, [r4, #12]
 80058c0:	bd10      	pop	{r4, pc}

080058c2 <__sclose>:
 80058c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c6:	f000 b813 	b.w	80058f0 <_close_r>
	...

080058cc <_write_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4605      	mov	r5, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	4611      	mov	r1, r2
 80058d4:	2200      	movs	r2, #0
 80058d6:	4c05      	ldr	r4, [pc, #20]	; (80058ec <_write_r+0x20>)
 80058d8:	6022      	str	r2, [r4, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	f7fb ff26 	bl	800172c <_write>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d102      	bne.n	80058ea <_write_r+0x1e>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	b103      	cbz	r3, 80058ea <_write_r+0x1e>
 80058e8:	602b      	str	r3, [r5, #0]
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	20000790 	.word	0x20000790

080058f0 <_close_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	2300      	movs	r3, #0
 80058f4:	4c05      	ldr	r4, [pc, #20]	; (800590c <_close_r+0x1c>)
 80058f6:	4605      	mov	r5, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	f7fb ff2c 	bl	8001758 <_close>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_close_r+0x1a>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	b103      	cbz	r3, 800590a <_close_r+0x1a>
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	20000790 	.word	0x20000790

08005910 <_fstat_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	2300      	movs	r3, #0
 8005914:	4c06      	ldr	r4, [pc, #24]	; (8005930 <_fstat_r+0x20>)
 8005916:	4605      	mov	r5, r0
 8005918:	4608      	mov	r0, r1
 800591a:	4611      	mov	r1, r2
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	f7fb ff26 	bl	800176e <_fstat>
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	d102      	bne.n	800592c <_fstat_r+0x1c>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	b103      	cbz	r3, 800592c <_fstat_r+0x1c>
 800592a:	602b      	str	r3, [r5, #0]
 800592c:	bd38      	pop	{r3, r4, r5, pc}
 800592e:	bf00      	nop
 8005930:	20000790 	.word	0x20000790

08005934 <_isatty_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	2300      	movs	r3, #0
 8005938:	4c05      	ldr	r4, [pc, #20]	; (8005950 <_isatty_r+0x1c>)
 800593a:	4605      	mov	r5, r0
 800593c:	4608      	mov	r0, r1
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	f7fb ff24 	bl	800178c <_isatty>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d102      	bne.n	800594e <_isatty_r+0x1a>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	b103      	cbz	r3, 800594e <_isatty_r+0x1a>
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	bd38      	pop	{r3, r4, r5, pc}
 8005950:	20000790 	.word	0x20000790

08005954 <_lseek_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4605      	mov	r5, r0
 8005958:	4608      	mov	r0, r1
 800595a:	4611      	mov	r1, r2
 800595c:	2200      	movs	r2, #0
 800595e:	4c05      	ldr	r4, [pc, #20]	; (8005974 <_lseek_r+0x20>)
 8005960:	6022      	str	r2, [r4, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	f7fb ff1c 	bl	80017a0 <_lseek>
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d102      	bne.n	8005972 <_lseek_r+0x1e>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	b103      	cbz	r3, 8005972 <_lseek_r+0x1e>
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	bd38      	pop	{r3, r4, r5, pc}
 8005974:	20000790 	.word	0x20000790

08005978 <memchr>:
 8005978:	b510      	push	{r4, lr}
 800597a:	b2c9      	uxtb	r1, r1
 800597c:	4402      	add	r2, r0
 800597e:	4290      	cmp	r0, r2
 8005980:	4603      	mov	r3, r0
 8005982:	d101      	bne.n	8005988 <memchr+0x10>
 8005984:	2300      	movs	r3, #0
 8005986:	e003      	b.n	8005990 <memchr+0x18>
 8005988:	781c      	ldrb	r4, [r3, #0]
 800598a:	3001      	adds	r0, #1
 800598c:	428c      	cmp	r4, r1
 800598e:	d1f6      	bne.n	800597e <memchr+0x6>
 8005990:	4618      	mov	r0, r3
 8005992:	bd10      	pop	{r4, pc}

08005994 <__malloc_lock>:
 8005994:	4770      	bx	lr

08005996 <__malloc_unlock>:
 8005996:	4770      	bx	lr

08005998 <_read_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4605      	mov	r5, r0
 800599c:	4608      	mov	r0, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	2200      	movs	r2, #0
 80059a2:	4c05      	ldr	r4, [pc, #20]	; (80059b8 <_read_r+0x20>)
 80059a4:	6022      	str	r2, [r4, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f7fb fea2 	bl	80016f0 <_read>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_read_r+0x1e>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_read_r+0x1e>
 80059b4:	602b      	str	r3, [r5, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	20000790 	.word	0x20000790

080059bc <_init>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr

080059c8 <_fini>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr
