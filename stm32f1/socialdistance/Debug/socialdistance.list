
socialdistance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000324c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800335c  0800335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003388  08003388  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003388  08003388  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003388  08003388  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  0800339c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800339c  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d4a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017aa  00000000  00000000  00029d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002b530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  0002c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b43  00000000  00000000  0002cba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d2f  00000000  00000000  000436eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085f16  00000000  00000000  0004c41a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2330  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c0  00000000  00000000  000d23ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003344 	.word	0x08003344

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003344 	.word	0x08003344

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr
 800092c:	0000      	movs	r0, r0
	...

08000930 <HAL_TIM_IC_CaptureCallback>:

volatile uint32_t cpp4_T1 = 0;
volatile uint32_t cpp4_T2 = 0;
volatile uint32_t tick_difference = 0;
volatile uint32_t distance;
void  HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

	if(cpp4_state == CPP_IDLE)
 8000938:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d117      	bne.n	8000972 <HAL_TIM_IC_CaptureCallback+0x42>
	{
		cpp4_T1 = TIM1->CCR4;
 8000942:	4b38      	ldr	r3, [pc, #224]	; (8000a24 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a38      	ldr	r2, [pc, #224]	; (8000a28 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000948:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	6a1a      	ldr	r2, [r3, #32]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000958:	621a      	str	r2, [r3, #32]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6a1a      	ldr	r2, [r3, #32]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000968:	621a      	str	r2, [r3, #32]

	//	gu16_TIM1_OVC = 0;
		cpp4_state = CPP_CAPTURED;
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
		// }
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
		//__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		cpp4_state = CPP_IDLE;
	}
}
 8000970:	e04d      	b.n	8000a0e <HAL_TIM_IC_CaptureCallback+0xde>
	else if(cpp4_state == CPP_CAPTURED)
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b01      	cmp	r3, #1
 800097a:	d148      	bne.n	8000a0e <HAL_TIM_IC_CaptureCallback+0xde>
		cpp4_T2 = TIM1->CCR4;
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	4a2a      	ldr	r2, [pc, #168]	; (8000a2c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000982:	6013      	str	r3, [r2, #0]
		if (cpp4_T2 < cpp4_T1){
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d209      	bcs.n	80009a4 <HAL_TIM_IC_CaptureCallback+0x74>
			tick_difference = ((0xffff-cpp4_T1)+cpp4_T2) +1;
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800099e:	4a24      	ldr	r2, [pc, #144]	; (8000a30 <HAL_TIM_IC_CaptureCallback+0x100>)
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	e006      	b.n	80009b2 <HAL_TIM_IC_CaptureCallback+0x82>
			tick_difference = cpp4_T2-cpp4_T1;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <HAL_TIM_IC_CaptureCallback+0xfc>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	4a20      	ldr	r2, [pc, #128]	; (8000a30 <HAL_TIM_IC_CaptureCallback+0x100>)
 80009b0:	6013      	str	r3, [r2, #0]
		distance = tick_difference * .034/2;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <HAL_TIM_IC_CaptureCallback+0x100>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fd0c 	bl	80003d4 <__aeabi_ui2d>
 80009bc:	a316      	add	r3, pc, #88	; (adr r3, 8000a18 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80009be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c2:	f7ff fd81 	bl	80004c8 <__aeabi_dmul>
 80009c6:	4603      	mov	r3, r0
 80009c8:	460c      	mov	r4, r1
 80009ca:	4618      	mov	r0, r3
 80009cc:	4621      	mov	r1, r4
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d6:	f7ff fea1 	bl	800071c <__aeabi_ddiv>
 80009da:	4603      	mov	r3, r0
 80009dc:	460c      	mov	r4, r1
 80009de:	4618      	mov	r0, r3
 80009e0:	4621      	mov	r1, r4
 80009e2:	f7ff ff83 	bl	80008ec <__aeabi_d2uiz>
 80009e6:	4602      	mov	r2, r0
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_TIM_IC_CaptureCallback+0x104>)
 80009ea:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6a1a      	ldr	r2, [r3, #32]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80009fa:	621a      	str	r2, [r3, #32]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6a12      	ldr	r2, [r2, #32]
 8000a06:	621a      	str	r2, [r3, #32]
		cpp4_state = CPP_IDLE;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	bf00      	nop
 8000a18:	b020c49c 	.word	0xb020c49c
 8000a1c:	3fa16872 	.word	0x3fa16872
 8000a20:	20000028 	.word	0x20000028
 8000a24:	40012c00 	.word	0x40012c00
 8000a28:	2000002c 	.word	0x2000002c
 8000a2c:	20000030 	.word	0x20000030
 8000a30:	20000034 	.word	0x20000034
 8000a34:	20000038 	.word	0x20000038

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3e:	f000 faef 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a42:	f000 f851 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a46:	f000 f929 	bl	8000c9c <MX_GPIO_Init>
  GPIOA->BSRR = GPIO_PIN_4;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <main+0x9c>)
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	611a      	str	r2, [r3, #16]
  	GPIOC->BSRR = GPIO_PIN_13;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <main+0xa0>)
 8000a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a56:	611a      	str	r2, [r3, #16]
  MX_USART1_UART_Init();
 8000a58:	f000 f8f6 	bl	8000c48 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000a5c:	f000 f880 	bl	8000b60 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t high_echo_time = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000a64:	210c      	movs	r1, #12
 8000a66:	481d      	ldr	r0, [pc, #116]	; (8000adc <main+0xa4>)
 8000a68:	f001 fb18 	bl	800209c <HAL_TIM_IC_Start_IT>

    GPIOB->BSRR = GPIO_PIN_0;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <main+0xa8>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	611a      	str	r2, [r3, #16]
    	HAL_Delay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 fb36 	bl	80010e4 <HAL_Delay>
    	GPIOB->BRR = GPIO_PIN_0;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <main+0xa8>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	615a      	str	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1500);
 8000a7e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a82:	f000 fb2f 	bl	80010e4 <HAL_Delay>
  //  while (cpp4_state == CPP_IDLE);
	GPIOB->BSRR = GPIO_PIN_0;
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <main+0xa8>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	611a      	str	r2, [r3, #16]
	HAL_Delay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f000 fb29 	bl	80010e4 <HAL_Delay>
	GPIOB->BRR = GPIO_PIN_0;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <main+0xa8>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	615a      	str	r2, [r3, #20]
//	high_echo_time = HAL_GetTick();
//	while((GPIOA->IDR & GPIO_PIN_11) == 1);
//	high_echo_time = HAL_GetTick() - high_echo_time;
	//distance = high_echo_time * 340 / 2;

	GPIOA->BSRR = GPIO_PIN_4;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <main+0x9c>)
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR = GPIO_PIN_13;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <main+0xa0>)
 8000aa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa4:	611a      	str	r2, [r3, #16]
	
	if (distance < 120){
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <main+0xac>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b77      	cmp	r3, #119	; 0x77
 8000aac:	d8e7      	bhi.n	8000a7e <main+0x46>
		GPIOA->BRR = GPIO_PIN_4;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <main+0x9c>)
 8000ab0:	2210      	movs	r2, #16
 8000ab2:	615a      	str	r2, [r3, #20]
		GPIOC->BRR = GPIO_PIN_13;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <main+0xa0>)
 8000ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aba:	615a      	str	r2, [r3, #20]
		HAL_Delay(200);
 8000abc:	20c8      	movs	r0, #200	; 0xc8
 8000abe:	f000 fb11 	bl	80010e4 <HAL_Delay>

		GPIOA->BSRR = GPIO_PIN_4;
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <main+0x9c>)
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	611a      	str	r2, [r3, #16]
		GPIOC->BSRR = GPIO_PIN_13;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <main+0xa0>)
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	611a      	str	r2, [r3, #16]
    HAL_Delay(1500);
 8000ad0:	e7d5      	b.n	8000a7e <main+0x46>
 8000ad2:	bf00      	nop
 8000ad4:	40010800 	.word	0x40010800
 8000ad8:	40011000 	.word	0x40011000
 8000adc:	2000007c 	.word	0x2000007c
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	20000038 	.word	0x20000038

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b090      	sub	sp, #64	; 0x40
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0318 	add.w	r3, r7, #24
 8000af2:	2228      	movs	r2, #40	; 0x28
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fc1c 	bl	8003334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b12:	2310      	movs	r3, #16
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fdf8 	bl	8001714 <HAL_RCC_OscConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b2a:	f000 f93b 	bl	8000da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2e:	230f      	movs	r3, #15
 8000b30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000b3e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f863 	bl	8001c14 <HAL_RCC_ClockConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000b54:	f000 f926 	bl	8000da4 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3740      	adds	r7, #64	; 0x40
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0318 	add.w	r3, r7, #24
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000b8c:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <MX_TIM1_Init+0xe4>)
 8000b8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000b9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ba2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb6:	4822      	ldr	r0, [pc, #136]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000bb8:	f001 f9c8 	bl	8001f4c <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000bc2:	f000 f8ef 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0318 	add.w	r3, r7, #24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481b      	ldr	r0, [pc, #108]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000bd4:	f001 fd04 	bl	80025e0 <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000bde:	f000 f8e1 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000be2:	4817      	ldr	r0, [pc, #92]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000be4:	f001 fa01 	bl	8001fea <HAL_TIM_IC_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000bee:	f000 f8d9 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480f      	ldr	r0, [pc, #60]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000c02:	f001 fff3 	bl	8002bec <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000c0c:	f000 f8ca 	bl	8000da4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c14:	2301      	movs	r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	220c      	movs	r2, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_TIM1_Init+0xe0>)
 8000c28:	f001 fc46 	bl	80024b8 <HAL_TIM_IC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000c32:	f000 f8b7 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3728      	adds	r7, #40	; 0x28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000007c 	.word	0x2000007c
 8000c44:	40012c00 	.word	0x40012c00

08000c48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <MX_USART1_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c80:	f002 f824 	bl	8002ccc <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f000 f88b 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000003c 	.word	0x2000003c
 8000c98:	40013800 	.word	0x40013800

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a37      	ldr	r2, [pc, #220]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0310 	and.w	r3, r3, #16
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a31      	ldr	r2, [pc, #196]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_GPIO_Init+0xf8>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	4826      	ldr	r0, [pc, #152]	; (8000d98 <MX_GPIO_Init+0xfc>)
 8000d00:	f000 fcf0 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, relay_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2190      	movs	r1, #144	; 0x90
 8000d08:	4824      	ldr	r0, [pc, #144]	; (8000d9c <MX_GPIO_Init+0x100>)
 8000d0a:	f000 fceb 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2101      	movs	r1, #1
 8000d12:	4823      	ldr	r0, [pc, #140]	; (8000da0 <MX_GPIO_Init+0x104>)
 8000d14:	f000 fce6 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4819      	ldr	r0, [pc, #100]	; (8000d98 <MX_GPIO_Init+0xfc>)
 8000d32:	f000 fb7d 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : relay_Pin */
  GPIO_InitStruct.Pin = relay_Pin;
 8000d36:	2310      	movs	r3, #16
 8000d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(relay_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4813      	ldr	r0, [pc, #76]	; (8000d9c <MX_GPIO_Init+0x100>)
 8000d4e:	f000 fb6f 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4619      	mov	r1, r3
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_GPIO_Init+0x100>)
 8000d6a:	f000 fb61 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4619      	mov	r1, r3
 8000d84:	4806      	ldr	r0, [pc, #24]	; (8000da0 <MX_GPIO_Init+0x104>)
 8000d86:	f000 fb53 	bl	8001430 <HAL_GPIO_Init>

}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40011000 	.word	0x40011000
 8000d9c:	40010800 	.word	0x40010800
 8000da0:	40010c00 	.word	0x40010c00

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_MspInit+0x5c>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_MspInit+0x5c>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_MspInit+0x60>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_MspInit+0x60>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <HAL_TIM_Base_MspInit+0x84>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d12c      	bne.n	8000e8e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_TIM_Base_MspInit+0x88>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <HAL_TIM_Base_MspInit+0x8c>)
 8000e7a:	f000 fad9 	bl	8001430 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	201b      	movs	r0, #27
 8000e84:	f000 fa27 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e88:	201b      	movs	r0, #27
 8000e8a:	f000 fa40 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40012c00 	.word	0x40012c00
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010800 	.word	0x40010800

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <HAL_UART_MspInit+0x9c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d139      	bne.n	8000f38 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	480f      	ldr	r0, [pc, #60]	; (8000f48 <HAL_UART_MspInit+0xa4>)
 8000f0a:	f000 fa91 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4809      	ldr	r0, [pc, #36]	; (8000f48 <HAL_UART_MspInit+0xa4>)
 8000f24:	f000 fa84 	bl	8001430 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2025      	movs	r0, #37	; 0x25
 8000f2e:	f000 f9d2 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f32:	2025      	movs	r0, #37	; 0x25
 8000f34:	f000 f9eb 	bl	800130e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40013800 	.word	0x40013800
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010800 	.word	0x40010800

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <HardFault_Handler+0x4>

08000f5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <UsageFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f888 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <TIM1_CC_IRQHandler+0x10>)
 8000fa6:	f001 f97f 	bl	80022a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000007c 	.word	0x2000007c

08000fb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <USART1_IRQHandler+0x10>)
 8000fba:	f001 fed5 	bl	8002d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000003c 	.word	0x2000003c

08000fc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fd6:	e003      	b.n	8000fe0 <LoopCopyDataInit>

08000fd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fde:	3104      	adds	r1, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fe4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fe8:	d3f6      	bcc.n	8000fd8 <CopyDataInit>
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fec:	e002      	b.n	8000ff4 <LoopFillZerobss>

08000fee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ff0:	f842 3b04 	str.w	r3, [r2], #4

08000ff4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ff6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ff8:	d3f9      	bcc.n	8000fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ffa:	f7ff ffe5 	bl	8000fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f002 f975 	bl	80032ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001002:	f7ff fd19 	bl	8000a38 <main>
  bx lr
 8001006:	4770      	bx	lr
  ldr r3, =_sidata
 8001008:	08003390 	.word	0x08003390
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001010:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001014:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001018:	200000c8 	.word	0x200000c8

0800101c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC1_2_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_Init+0x28>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_Init+0x28>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f945 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff feb8 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40022000 	.word	0x40022000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f95d 	bl	800132a <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f925 	bl	80012d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_IncTick+0x1c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_IncTick+0x20>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a03      	ldr	r2, [pc, #12]	; (80010cc <HAL_IncTick+0x20>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000008 	.word	0x20000008
 80010cc:	200000c4 	.word	0x200000c4

080010d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <HAL_GetTick+0x10>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	200000c4 	.word	0x200000c4

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff fff0 	bl	80010d0 <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_Delay+0x40>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ffe0 	bl	80010d0 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000008 	.word	0x20000008

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115a:	4a04      	ldr	r2, [pc, #16]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4906      	ldr	r1, [pc, #24]	; (80011c0 <__NVIC_EnableIRQ+0x34>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff90 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff2d 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff42 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff90 	bl	8001218 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5f 	bl	80011c4 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff35 	bl	800118c <__NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa2 	bl	800127c <SysTick_Config>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001356:	2b02      	cmp	r3, #2
 8001358:	d005      	beq.n	8001366 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2204      	movs	r2, #4
 800135e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e051      	b.n	800140a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 020e 	bic.w	r2, r2, #14
 8001374:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0201 	bic.w	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a22      	ldr	r2, [pc, #136]	; (8001414 <HAL_DMA_Abort_IT+0xd0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d029      	beq.n	80013e4 <HAL_DMA_Abort_IT+0xa0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <HAL_DMA_Abort_IT+0xd4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d022      	beq.n	80013e0 <HAL_DMA_Abort_IT+0x9c>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1f      	ldr	r2, [pc, #124]	; (800141c <HAL_DMA_Abort_IT+0xd8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d01a      	beq.n	80013da <HAL_DMA_Abort_IT+0x96>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_DMA_Abort_IT+0xdc>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d012      	beq.n	80013d4 <HAL_DMA_Abort_IT+0x90>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <HAL_DMA_Abort_IT+0xe0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d00a      	beq.n	80013ce <HAL_DMA_Abort_IT+0x8a>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <HAL_DMA_Abort_IT+0xe4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d102      	bne.n	80013c8 <HAL_DMA_Abort_IT+0x84>
 80013c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013c6:	e00e      	b.n	80013e6 <HAL_DMA_Abort_IT+0xa2>
 80013c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013cc:	e00b      	b.n	80013e6 <HAL_DMA_Abort_IT+0xa2>
 80013ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d2:	e008      	b.n	80013e6 <HAL_DMA_Abort_IT+0xa2>
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	e005      	b.n	80013e6 <HAL_DMA_Abort_IT+0xa2>
 80013da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013de:	e002      	b.n	80013e6 <HAL_DMA_Abort_IT+0xa2>
 80013e0:	2310      	movs	r3, #16
 80013e2:	e000      	b.n	80013e6 <HAL_DMA_Abort_IT+0xa2>
 80013e4:	2301      	movs	r3, #1
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_DMA_Abort_IT+0xe8>)
 80013e8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
    } 
  }
  return status;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40020008 	.word	0x40020008
 8001418:	4002001c 	.word	0x4002001c
 800141c:	40020030 	.word	0x40020030
 8001420:	40020044 	.word	0x40020044
 8001424:	40020058 	.word	0x40020058
 8001428:	4002006c 	.word	0x4002006c
 800142c:	40020000 	.word	0x40020000

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b08b      	sub	sp, #44	; 0x2c
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	e127      	b.n	8001694 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001444:	2201      	movs	r2, #1
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	429a      	cmp	r2, r3
 800145e:	f040 8116 	bne.w	800168e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b12      	cmp	r3, #18
 8001468:	d034      	beq.n	80014d4 <HAL_GPIO_Init+0xa4>
 800146a:	2b12      	cmp	r3, #18
 800146c:	d80d      	bhi.n	800148a <HAL_GPIO_Init+0x5a>
 800146e:	2b02      	cmp	r3, #2
 8001470:	d02b      	beq.n	80014ca <HAL_GPIO_Init+0x9a>
 8001472:	2b02      	cmp	r3, #2
 8001474:	d804      	bhi.n	8001480 <HAL_GPIO_Init+0x50>
 8001476:	2b00      	cmp	r3, #0
 8001478:	d031      	beq.n	80014de <HAL_GPIO_Init+0xae>
 800147a:	2b01      	cmp	r3, #1
 800147c:	d01c      	beq.n	80014b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800147e:	e048      	b.n	8001512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001480:	2b03      	cmp	r3, #3
 8001482:	d043      	beq.n	800150c <HAL_GPIO_Init+0xdc>
 8001484:	2b11      	cmp	r3, #17
 8001486:	d01b      	beq.n	80014c0 <HAL_GPIO_Init+0x90>
          break;
 8001488:	e043      	b.n	8001512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800148a:	4a89      	ldr	r2, [pc, #548]	; (80016b0 <HAL_GPIO_Init+0x280>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d026      	beq.n	80014de <HAL_GPIO_Init+0xae>
 8001490:	4a87      	ldr	r2, [pc, #540]	; (80016b0 <HAL_GPIO_Init+0x280>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d806      	bhi.n	80014a4 <HAL_GPIO_Init+0x74>
 8001496:	4a87      	ldr	r2, [pc, #540]	; (80016b4 <HAL_GPIO_Init+0x284>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d020      	beq.n	80014de <HAL_GPIO_Init+0xae>
 800149c:	4a86      	ldr	r2, [pc, #536]	; (80016b8 <HAL_GPIO_Init+0x288>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01d      	beq.n	80014de <HAL_GPIO_Init+0xae>
          break;
 80014a2:	e036      	b.n	8001512 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014a4:	4a85      	ldr	r2, [pc, #532]	; (80016bc <HAL_GPIO_Init+0x28c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0xae>
 80014aa:	4a85      	ldr	r2, [pc, #532]	; (80016c0 <HAL_GPIO_Init+0x290>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d016      	beq.n	80014de <HAL_GPIO_Init+0xae>
 80014b0:	4a84      	ldr	r2, [pc, #528]	; (80016c4 <HAL_GPIO_Init+0x294>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0xae>
          break;
 80014b6:	e02c      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e028      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	3304      	adds	r3, #4
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e023      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	3308      	adds	r3, #8
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e01e      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	330c      	adds	r3, #12
 80014da:	623b      	str	r3, [r7, #32]
          break;
 80014dc:	e019      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014e6:	2304      	movs	r3, #4
 80014e8:	623b      	str	r3, [r7, #32]
          break;
 80014ea:	e012      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d105      	bne.n	8001500 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f4:	2308      	movs	r3, #8
 80014f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	611a      	str	r2, [r3, #16]
          break;
 80014fe:	e008      	b.n	8001512 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001500:	2308      	movs	r3, #8
 8001502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	615a      	str	r2, [r3, #20]
          break;
 800150a:	e002      	b.n	8001512 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
          break;
 8001510:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2bff      	cmp	r3, #255	; 0xff
 8001516:	d801      	bhi.n	800151c <HAL_GPIO_Init+0xec>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	e001      	b.n	8001520 <HAL_GPIO_Init+0xf0>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2bff      	cmp	r3, #255	; 0xff
 8001526:	d802      	bhi.n	800152e <HAL_GPIO_Init+0xfe>
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x104>
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	3b08      	subs	r3, #8
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	210f      	movs	r1, #15
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	401a      	ands	r2, r3
 8001546:	6a39      	ldr	r1, [r7, #32]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	431a      	orrs	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 8096 	beq.w	800168e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001562:	4b59      	ldr	r3, [pc, #356]	; (80016c8 <HAL_GPIO_Init+0x298>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a58      	ldr	r2, [pc, #352]	; (80016c8 <HAL_GPIO_Init+0x298>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	4b56      	ldr	r3, [pc, #344]	; (80016c8 <HAL_GPIO_Init+0x298>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800157a:	4a54      	ldr	r2, [pc, #336]	; (80016cc <HAL_GPIO_Init+0x29c>)
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	3302      	adds	r3, #2
 8001582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001586:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4b      	ldr	r2, [pc, #300]	; (80016d0 <HAL_GPIO_Init+0x2a0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x19e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <HAL_GPIO_Init+0x2a4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x19a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a49      	ldr	r2, [pc, #292]	; (80016d8 <HAL_GPIO_Init+0x2a8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x196>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a48      	ldr	r2, [pc, #288]	; (80016dc <HAL_GPIO_Init+0x2ac>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x192>
 80015be:	2303      	movs	r3, #3
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x1a0>
 80015c2:	2304      	movs	r3, #4
 80015c4:	e004      	b.n	80015d0 <HAL_GPIO_Init+0x1a0>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_Init+0x1a0>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x1a0>
 80015ce:	2300      	movs	r3, #0
 80015d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4093      	lsls	r3, r2
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e0:	493a      	ldr	r1, [pc, #232]	; (80016cc <HAL_GPIO_Init+0x29c>)
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4938      	ldr	r1, [pc, #224]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001608:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	43db      	mvns	r3, r3
 8001610:	4933      	ldr	r1, [pc, #204]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001612:	4013      	ands	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001622:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	492e      	ldr	r1, [pc, #184]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
 800162e:	e006      	b.n	800163e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	43db      	mvns	r3, r3
 8001638:	4929      	ldr	r1, [pc, #164]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800163a:	4013      	ands	r3, r2
 800163c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	4924      	ldr	r1, [pc, #144]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
 8001656:	e006      	b.n	8001666 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001658:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	43db      	mvns	r3, r3
 8001660:	491f      	ldr	r1, [pc, #124]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001662:	4013      	ands	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	491a      	ldr	r1, [pc, #104]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	60cb      	str	r3, [r1, #12]
 800167e:	e006      	b.n	800168e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	43db      	mvns	r3, r3
 8001688:	4915      	ldr	r1, [pc, #84]	; (80016e0 <HAL_GPIO_Init+0x2b0>)
 800168a:	4013      	ands	r3, r2
 800168c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f47f aed0 	bne.w	8001444 <HAL_GPIO_Init+0x14>
  }
}
 80016a4:	bf00      	nop
 80016a6:	372c      	adds	r7, #44	; 0x2c
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	10210000 	.word	0x10210000
 80016b4:	10110000 	.word	0x10110000
 80016b8:	10120000 	.word	0x10120000
 80016bc:	10310000 	.word	0x10310000
 80016c0:	10320000 	.word	0x10320000
 80016c4:	10220000 	.word	0x10220000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	40010800 	.word	0x40010800
 80016d4:	40010c00 	.word	0x40010c00
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40011400 	.word	0x40011400
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e26c      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8087 	beq.w	8001842 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001734:	4b92      	ldr	r3, [pc, #584]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b04      	cmp	r3, #4
 800173e:	d00c      	beq.n	800175a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001740:	4b8f      	ldr	r3, [pc, #572]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d112      	bne.n	8001772 <HAL_RCC_OscConfig+0x5e>
 800174c:	4b8c      	ldr	r3, [pc, #560]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d10b      	bne.n	8001772 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175a:	4b89      	ldr	r3, [pc, #548]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d06c      	beq.n	8001840 <HAL_RCC_OscConfig+0x12c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d168      	bne.n	8001840 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e246      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x76>
 800177c:	4b80      	ldr	r3, [pc, #512]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a7f      	ldr	r2, [pc, #508]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e02e      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x98>
 8001792:	4b7b      	ldr	r3, [pc, #492]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a7a      	ldr	r2, [pc, #488]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b78      	ldr	r3, [pc, #480]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a77      	ldr	r2, [pc, #476]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e01d      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0xbc>
 80017b6:	4b72      	ldr	r3, [pc, #456]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a71      	ldr	r2, [pc, #452]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b6f      	ldr	r3, [pc, #444]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6e      	ldr	r2, [pc, #440]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 80017d0:	4b6b      	ldr	r3, [pc, #428]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6a      	ldr	r2, [pc, #424]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a67      	ldr	r2, [pc, #412]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fc6e 	bl	80010d0 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fc6a 	bl	80010d0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1fa      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0xe4>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fc5a 	bl	80010d0 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fc56 	bl	80010d0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1e6      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x10c>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d063      	beq.n	8001916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800185a:	4b49      	ldr	r3, [pc, #292]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b08      	cmp	r3, #8
 8001864:	d11c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x18c>
 8001866:	4b46      	ldr	r3, [pc, #280]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d116      	bne.n	80018a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	4b43      	ldr	r3, [pc, #268]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x176>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e1ba      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4939      	ldr	r1, [pc, #228]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	e03a      	b.n	8001916 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a8:	4b36      	ldr	r3, [pc, #216]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fc0f 	bl	80010d0 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b6:	f7ff fc0b 	bl	80010d0 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e19b      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d4:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4927      	ldr	r1, [pc, #156]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e015      	b.n	8001916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fbee 	bl	80010d0 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff fbea 	bl	80010d0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e17a      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d03a      	beq.n	8001998 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d019      	beq.n	800195e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff fbce 	bl	80010d0 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff fbca 	bl	80010d0 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e15a      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001956:	2001      	movs	r0, #1
 8001958:	f000 fada 	bl	8001f10 <RCC_Delay>
 800195c:	e01c      	b.n	8001998 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fbb4 	bl	80010d0 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196a:	e00f      	b.n	800198c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff fbb0 	bl	80010d0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d908      	bls.n	800198c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e140      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	42420000 	.word	0x42420000
 8001988:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	4b9e      	ldr	r3, [pc, #632]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e9      	bne.n	800196c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a6 	beq.w	8001af2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b97      	ldr	r3, [pc, #604]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10d      	bne.n	80019d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b94      	ldr	r3, [pc, #592]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a93      	ldr	r2, [pc, #588]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b91      	ldr	r3, [pc, #580]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ce:	2301      	movs	r3, #1
 80019d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	4b8e      	ldr	r3, [pc, #568]	; (8001c0c <HAL_RCC_OscConfig+0x4f8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d118      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019de:	4b8b      	ldr	r3, [pc, #556]	; (8001c0c <HAL_RCC_OscConfig+0x4f8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a8a      	ldr	r2, [pc, #552]	; (8001c0c <HAL_RCC_OscConfig+0x4f8>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ea:	f7ff fb71 	bl	80010d0 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f2:	f7ff fb6d 	bl	80010d0 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b64      	cmp	r3, #100	; 0x64
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0fd      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	4b81      	ldr	r3, [pc, #516]	; (8001c0c <HAL_RCC_OscConfig+0x4f8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x312>
 8001a18:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a7a      	ldr	r2, [pc, #488]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e02d      	b.n	8001a82 <HAL_RCC_OscConfig+0x36e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x334>
 8001a2e:	4b76      	ldr	r3, [pc, #472]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a75      	ldr	r2, [pc, #468]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	4b73      	ldr	r3, [pc, #460]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a72      	ldr	r2, [pc, #456]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	e01c      	b.n	8001a82 <HAL_RCC_OscConfig+0x36e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d10c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x356>
 8001a50:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a6c      	ldr	r2, [pc, #432]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6213      	str	r3, [r2, #32]
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0x36e>
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a66      	ldr	r2, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	4b64      	ldr	r3, [pc, #400]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4a63      	ldr	r2, [pc, #396]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d015      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fb21 	bl	80010d0 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff fb1d 	bl	80010d0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0ab      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa8:	4b57      	ldr	r3, [pc, #348]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ee      	beq.n	8001a92 <HAL_RCC_OscConfig+0x37e>
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fb0b 	bl	80010d0 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff fb07 	bl	80010d0 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e095      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad4:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ee      	bne.n	8001abe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae6:	4b48      	ldr	r3, [pc, #288]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8081 	beq.w	8001bfe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d061      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d146      	bne.n	8001b9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_RCC_OscConfig+0x4fc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fadb 	bl	80010d0 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff fad7 	bl	80010d0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e067      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d108      	bne.n	8001b58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b46:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	492d      	ldr	r1, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a19      	ldr	r1, [r3, #32]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	4927      	ldr	r1, [pc, #156]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_RCC_OscConfig+0x4fc>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff faab 	bl	80010d0 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff faa7 	bl	80010d0 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e037      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x46a>
 8001b9c:	e02f      	b.n	8001bfe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_RCC_OscConfig+0x4fc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fa94 	bl	80010d0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff fa90 	bl	80010d0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e020      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x498>
 8001bca:	e018      	b.n	8001bfe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e013      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	42420060 	.word	0x42420060

08001c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0d0      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d910      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c36:	4b67      	ldr	r3, [pc, #412]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 0207 	bic.w	r2, r3, #7
 8001c3e:	4965      	ldr	r1, [pc, #404]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0b8      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c70:	4b59      	ldr	r3, [pc, #356]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a58      	ldr	r2, [pc, #352]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c88:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4a52      	ldr	r2, [pc, #328]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c94:	4b50      	ldr	r3, [pc, #320]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	494d      	ldr	r1, [pc, #308]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d040      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d115      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e07f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e073      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e06b      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf2:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f023 0203 	bic.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4936      	ldr	r1, [pc, #216]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7ff f9e4 	bl	80010d0 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0c:	f7ff f9e0 	bl	80010d0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e053      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 020c 	and.w	r2, r3, #12
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1eb      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d210      	bcs.n	8001d64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	4922      	ldr	r1, [pc, #136]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e032      	b.n	8001dca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4916      	ldr	r1, [pc, #88]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	490e      	ldr	r1, [pc, #56]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da2:	f000 f821 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001da6:	4601      	mov	r1, r0
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_RCC_ClockConfig+0x1c8>)
 8001db4:	5cd3      	ldrb	r3, [r2, r3]
 8001db6:	fa21 f303 	lsr.w	r3, r1, r3
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_RCC_ClockConfig+0x1cc>)
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1d0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f942 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40022000 	.word	0x40022000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08003370 	.word	0x08003370
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	b490      	push	{r4, r7}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001df0:	1d3c      	adds	r4, r7, #4
 8001df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	2300      	movs	r3, #0
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d002      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x40>
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x46>
 8001e26:	e02d      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e2a:	623b      	str	r3, [r7, #32]
      break;
 8001e2c:	e02d      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e4c:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	0c5b      	lsrs	r3, r3, #17
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e66:	fb02 f203 	mul.w	r2, r2, r3
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
 8001e72:	e004      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	623b      	str	r3, [r7, #32]
      break;
 8001e82:	e002      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e86:	623b      	str	r3, [r7, #32]
      break;
 8001e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3728      	adds	r7, #40	; 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc90      	pop	{r4, r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	0800335c 	.word	0x0800335c
 8001e9c:	0800336c 	.word	0x0800336c
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	007a1200 	.word	0x007a1200
 8001ea8:	003d0900 	.word	0x003d0900

08001eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	20000000 	.word	0x20000000

08001ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ec4:	f7ff fff2 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ec8:	4601      	mov	r1, r0
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4a03      	ldr	r2, [pc, #12]	; (8001ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08003380 	.word	0x08003380

08001ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eec:	f7ff ffde 	bl	8001eac <HAL_RCC_GetHCLKFreq>
 8001ef0:	4601      	mov	r1, r0
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	0adb      	lsrs	r3, r3, #11
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	4a03      	ldr	r2, [pc, #12]	; (8001f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001efe:	5cd3      	ldrb	r3, [r2, r3]
 8001f00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08003380 	.word	0x08003380

08001f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <RCC_Delay+0x34>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <RCC_Delay+0x38>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	0a5b      	lsrs	r3, r3, #9
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f2c:	bf00      	nop
  }
  while (Delay --);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1e5a      	subs	r2, r3, #1
 8001f32:	60fa      	str	r2, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f9      	bne.n	8001f2c <RCC_Delay+0x1c>
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000
 8001f48:	10624dd3 	.word	0x10624dd3

08001f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e041      	b.n	8001fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe ff4e 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 fc04 	bl	8002798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e041      	b.n	8002080 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d106      	bne.n	8002016 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f839 	bl	8002088 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f000 fbb5 	bl	8002798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
	...

0800209c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d104      	bne.n	80020b6 <HAL_TIM_IC_Start_IT+0x1a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	e013      	b.n	80020de <HAL_TIM_IC_Start_IT+0x42>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_IC_Start_IT+0x2a>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	e00b      	b.n	80020de <HAL_TIM_IC_Start_IT+0x42>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_IC_Start_IT+0x3a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	e003      	b.n	80020de <HAL_TIM_IC_Start_IT+0x42>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d104      	bne.n	80020f0 <HAL_TIM_IC_Start_IT+0x54>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e013      	b.n	8002118 <HAL_TIM_IC_Start_IT+0x7c>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d104      	bne.n	8002100 <HAL_TIM_IC_Start_IT+0x64>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e00b      	b.n	8002118 <HAL_TIM_IC_Start_IT+0x7c>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b08      	cmp	r3, #8
 8002104:	d104      	bne.n	8002110 <HAL_TIM_IC_Start_IT+0x74>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e003      	b.n	8002118 <HAL_TIM_IC_Start_IT+0x7c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002116:	b2db      	uxtb	r3, r3
 8002118:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d102      	bne.n	8002126 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d001      	beq.n	800212a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0b3      	b.n	8002292 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d104      	bne.n	800213a <HAL_TIM_IC_Start_IT+0x9e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002138:	e013      	b.n	8002162 <HAL_TIM_IC_Start_IT+0xc6>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d104      	bne.n	800214a <HAL_TIM_IC_Start_IT+0xae>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002148:	e00b      	b.n	8002162 <HAL_TIM_IC_Start_IT+0xc6>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d104      	bne.n	800215a <HAL_TIM_IC_Start_IT+0xbe>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002158:	e003      	b.n	8002162 <HAL_TIM_IC_Start_IT+0xc6>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <HAL_TIM_IC_Start_IT+0xd6>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002170:	e013      	b.n	800219a <HAL_TIM_IC_Start_IT+0xfe>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d104      	bne.n	8002182 <HAL_TIM_IC_Start_IT+0xe6>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002180:	e00b      	b.n	800219a <HAL_TIM_IC_Start_IT+0xfe>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d104      	bne.n	8002192 <HAL_TIM_IC_Start_IT+0xf6>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002190:	e003      	b.n	800219a <HAL_TIM_IC_Start_IT+0xfe>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d841      	bhi.n	8002224 <HAL_TIM_IC_Start_IT+0x188>
 80021a0:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_TIM_IC_Start_IT+0x10c>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021dd 	.word	0x080021dd
 80021ac:	08002225 	.word	0x08002225
 80021b0:	08002225 	.word	0x08002225
 80021b4:	08002225 	.word	0x08002225
 80021b8:	080021ef 	.word	0x080021ef
 80021bc:	08002225 	.word	0x08002225
 80021c0:	08002225 	.word	0x08002225
 80021c4:	08002225 	.word	0x08002225
 80021c8:	08002201 	.word	0x08002201
 80021cc:	08002225 	.word	0x08002225
 80021d0:	08002225 	.word	0x08002225
 80021d4:	08002225 	.word	0x08002225
 80021d8:	08002213 	.word	0x08002213
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0202 	orr.w	r2, r2, #2
 80021ea:	60da      	str	r2, [r3, #12]
      break;
 80021ec:	e01b      	b.n	8002226 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0204 	orr.w	r2, r2, #4
 80021fc:	60da      	str	r2, [r3, #12]
      break;
 80021fe:	e012      	b.n	8002226 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0208 	orr.w	r2, r2, #8
 800220e:	60da      	str	r2, [r3, #12]
      break;
 8002210:	e009      	b.n	8002226 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0210 	orr.w	r2, r2, #16
 8002220:	60da      	str	r2, [r3, #12]
      break;
 8002222:	e000      	b.n	8002226 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002224:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fcb7 	bl	8002ba2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a18      	ldr	r2, [pc, #96]	; (800229c <HAL_TIM_IC_Start_IT+0x200>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00e      	beq.n	800225c <HAL_TIM_IC_Start_IT+0x1c0>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002246:	d009      	beq.n	800225c <HAL_TIM_IC_Start_IT+0x1c0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_TIM_IC_Start_IT+0x204>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_TIM_IC_Start_IT+0x1c0>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_TIM_IC_Start_IT+0x208>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d111      	bne.n	8002280 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b06      	cmp	r3, #6
 800226c:	d010      	beq.n	8002290 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227e:	e007      	b.n	8002290 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40012c00 	.word	0x40012c00
 80022a0:	40000400 	.word	0x40000400
 80022a4:	40000800 	.word	0x40000800

080022a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d122      	bne.n	8002304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d11b      	bne.n	8002304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0202 	mvn.w	r2, #2
 80022d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fb20 	bl	8000930 <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fa34 	bl	8002760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fa3a 	bl	8002772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b04      	cmp	r3, #4
 8002310:	d122      	bne.n	8002358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b04      	cmp	r3, #4
 800231e:	d11b      	bne.n	8002358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0204 	mvn.w	r2, #4
 8002328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fe faf6 	bl	8000930 <HAL_TIM_IC_CaptureCallback>
 8002344:	e005      	b.n	8002352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa0a 	bl	8002760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fa10 	bl	8002772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	d122      	bne.n	80023ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b08      	cmp	r3, #8
 8002372:	d11b      	bne.n	80023ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0208 	mvn.w	r2, #8
 800237c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2204      	movs	r2, #4
 8002382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe facc 	bl	8000930 <HAL_TIM_IC_CaptureCallback>
 8002398:	e005      	b.n	80023a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f9e0 	bl	8002760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f9e6 	bl	8002772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d122      	bne.n	8002400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d11b      	bne.n	8002400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0210 	mvn.w	r2, #16
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2208      	movs	r2, #8
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe faa2 	bl	8000930 <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f9b6 	bl	8002760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f9bc 	bl	8002772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10e      	bne.n	800242c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	d107      	bne.n	800242c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0201 	mvn.w	r2, #1
 8002424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f991 	bl	800274e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b80      	cmp	r3, #128	; 0x80
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	2b80      	cmp	r3, #128	; 0x80
 8002446:	d107      	bne.n	8002458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fc31 	bl	8002cba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d10e      	bne.n	8002484 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d107      	bne.n	8002484 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f980 	bl	8002784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b20      	cmp	r3, #32
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b20      	cmp	r3, #32
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0220 	mvn.w	r2, #32
 80024a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fbfc 	bl	8002ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e082      	b.n	80025d8 <HAL_TIM_IC_ConfigChannel+0x120>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6819      	ldr	r1, [r3, #0]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f000 f9b4 	bl	800285c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 020c 	bic.w	r2, r2, #12
 8002502:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6999      	ldr	r1, [r3, #24]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	619a      	str	r2, [r3, #24]
 8002516:	e05a      	b.n	80025ce <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d11c      	bne.n	8002558 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6819      	ldr	r1, [r3, #0]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f000 fa1d 	bl	800296c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002540:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6999      	ldr	r1, [r3, #24]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	021a      	lsls	r2, r3, #8
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	e03a      	b.n	80025ce <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b08      	cmp	r3, #8
 800255c:	d11b      	bne.n	8002596 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f000 fa68 	bl	8002a42 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 020c 	bic.w	r2, r2, #12
 8002580:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69d9      	ldr	r1, [r3, #28]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	61da      	str	r2, [r3, #28]
 8002594:	e01b      	b.n	80025ce <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f000 fa87 	bl	8002ab8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69d9      	ldr	r1, [r3, #28]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	021a      	lsls	r2, r3, #8
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_TIM_ConfigClockSource+0x18>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e0a6      	b.n	8002746 <HAL_TIM_ConfigClockSource+0x166>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800261e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d067      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0x120>
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d80b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x6c>
 8002634:	2b10      	cmp	r3, #16
 8002636:	d073      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x140>
 8002638:	2b10      	cmp	r3, #16
 800263a:	d802      	bhi.n	8002642 <HAL_TIM_ConfigClockSource+0x62>
 800263c:	2b00      	cmp	r3, #0
 800263e:	d06f      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002640:	e078      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002642:	2b20      	cmp	r3, #32
 8002644:	d06c      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x140>
 8002646:	2b30      	cmp	r3, #48	; 0x30
 8002648:	d06a      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800264a:	e073      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800264c:	2b70      	cmp	r3, #112	; 0x70
 800264e:	d00d      	beq.n	800266c <HAL_TIM_ConfigClockSource+0x8c>
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d804      	bhi.n	800265e <HAL_TIM_ConfigClockSource+0x7e>
 8002654:	2b50      	cmp	r3, #80	; 0x50
 8002656:	d033      	beq.n	80026c0 <HAL_TIM_ConfigClockSource+0xe0>
 8002658:	2b60      	cmp	r3, #96	; 0x60
 800265a:	d041      	beq.n	80026e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800265c:	e06a      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002662:	d066      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0x152>
 8002664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002668:	d017      	beq.n	800269a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800266a:	e063      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f000 fa72 	bl	8002b64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800268e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]
      break;
 8002698:	e04c      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f000 fa5b 	bl	8002b64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026bc:	609a      	str	r2, [r3, #8]
      break;
 80026be:	e039      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f000 f91f 	bl	8002910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2150      	movs	r1, #80	; 0x50
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fa29 	bl	8002b30 <TIM_ITRx_SetConfig>
      break;
 80026de:	e029      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	461a      	mov	r2, r3
 80026ee:	f000 f979 	bl	80029e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2160      	movs	r1, #96	; 0x60
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fa19 	bl	8002b30 <TIM_ITRx_SetConfig>
      break;
 80026fe:	e019      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	461a      	mov	r2, r3
 800270e:	f000 f8ff 	bl	8002910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2140      	movs	r1, #64	; 0x40
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fa09 	bl	8002b30 <TIM_ITRx_SetConfig>
      break;
 800271e:	e009      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f000 fa00 	bl	8002b30 <TIM_ITRx_SetConfig>
        break;
 8002730:	e000      	b.n	8002734 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
	...

08002798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a29      	ldr	r2, [pc, #164]	; (8002850 <TIM_Base_SetConfig+0xb8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00b      	beq.n	80027c8 <TIM_Base_SetConfig+0x30>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b6:	d007      	beq.n	80027c8 <TIM_Base_SetConfig+0x30>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a26      	ldr	r2, [pc, #152]	; (8002854 <TIM_Base_SetConfig+0xbc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d003      	beq.n	80027c8 <TIM_Base_SetConfig+0x30>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a25      	ldr	r2, [pc, #148]	; (8002858 <TIM_Base_SetConfig+0xc0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d108      	bne.n	80027da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <TIM_Base_SetConfig+0xb8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00b      	beq.n	80027fa <TIM_Base_SetConfig+0x62>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e8:	d007      	beq.n	80027fa <TIM_Base_SetConfig+0x62>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a19      	ldr	r2, [pc, #100]	; (8002854 <TIM_Base_SetConfig+0xbc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d003      	beq.n	80027fa <TIM_Base_SetConfig+0x62>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <TIM_Base_SetConfig+0xc0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d108      	bne.n	800280c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a07      	ldr	r2, [pc, #28]	; (8002850 <TIM_Base_SetConfig+0xb8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d103      	bne.n	8002840 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	615a      	str	r2, [r3, #20]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40000400 	.word	0x40000400
 8002858:	40000800 	.word	0x40000800

0800285c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0201 	bic.w	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <TIM_TI1_SetConfig+0xa8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00b      	beq.n	80028a2 <TIM_TI1_SetConfig+0x46>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002890:	d007      	beq.n	80028a2 <TIM_TI1_SetConfig+0x46>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <TIM_TI1_SetConfig+0xac>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d003      	beq.n	80028a2 <TIM_TI1_SetConfig+0x46>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4a1b      	ldr	r2, [pc, #108]	; (800290c <TIM_TI1_SetConfig+0xb0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <TIM_TI1_SetConfig+0x4a>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <TIM_TI1_SetConfig+0x4c>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f023 0303 	bic.w	r3, r3, #3
 80028b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e003      	b.n	80028c6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f023 030a 	bic.w	r3, r3, #10
 80028e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f003 030a 	and.w	r3, r3, #10
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	621a      	str	r2, [r3, #32]
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40000400 	.word	0x40000400
 800290c:	40000800 	.word	0x40000800

08002910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800293a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f023 030a 	bic.w	r3, r3, #10
 800294c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	621a      	str	r2, [r3, #32]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f023 0210 	bic.w	r2, r3, #16
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	031b      	lsls	r3, r3, #12
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f023 0210 	bic.w	r2, r3, #16
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	031b      	lsls	r3, r3, #12
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	621a      	str	r2, [r3, #32]
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b087      	sub	sp, #28
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f023 0303 	bic.w	r3, r3, #3
 8002a6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	621a      	str	r2, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002af6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	031b      	lsls	r3, r3, #12
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	031b      	lsls	r3, r3, #12
 8002b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f043 0307 	orr.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	021a      	lsls	r2, r3, #8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b087      	sub	sp, #28
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a1a      	ldr	r2, [r3, #32]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	621a      	str	r2, [r3, #32]
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e046      	b.n	8002c92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00e      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d009      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10c      	bne.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	40012c00 	.word	0x40012c00
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40000800 	.word	0x40000800

08002ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e03f      	b.n	8002d5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe f8d6 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2224      	movs	r2, #36	; 0x24
 8002cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fa5d 	bl	80031d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_UART_IRQHandler+0x52>
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f98b 	bl	80030ce <UART_Receive_IT>
      return;
 8002db8:	e0d1      	b.n	8002f5e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80b0 	beq.w	8002f22 <HAL_UART_IRQHandler+0x1ba>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x70>
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80a5 	beq.w	8002f22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_UART_IRQHandler+0x90>
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_UART_IRQHandler+0xb0>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	f043 0202 	orr.w	r2, r3, #2
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_UART_IRQHandler+0xd0>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	f043 0204 	orr.w	r2, r3, #4
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00f      	beq.n	8002e62 <HAL_UART_IRQHandler+0xfa>
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d104      	bne.n	8002e56 <HAL_UART_IRQHandler+0xee>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	f043 0208 	orr.w	r2, r3, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d078      	beq.n	8002f5c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_UART_IRQHandler+0x11c>
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f925 	bl	80030ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf14      	ite	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	2300      	moveq	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_UART_IRQHandler+0x144>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d031      	beq.n	8002f10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f876 	bl	8002f9e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d023      	beq.n	8002f08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ece:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <HAL_UART_IRQHandler+0x1fc>)
 8002ede:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fa2d 	bl	8001344 <HAL_DMA_Abort_IT>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d016      	beq.n	8002f1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002efa:	4610      	mov	r0, r2
 8002efc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efe:	e00e      	b.n	8002f1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f843 	bl	8002f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f06:	e00a      	b.n	8002f1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f83f 	bl	8002f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0e:	e006      	b.n	8002f1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f83b 	bl	8002f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f1c:	e01e      	b.n	8002f5c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f1e:	bf00      	nop
    return;
 8002f20:	e01c      	b.n	8002f5c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_UART_IRQHandler+0x1d6>
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f862 	bl	8003000 <UART_Transmit_IT>
    return;
 8002f3c:	e00f      	b.n	8002f5e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_UART_IRQHandler+0x1f6>
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8a3 	bl	800309e <UART_EndTransmit_IT>
    return;
 8002f58:	bf00      	nop
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002f5c:	bf00      	nop
  }
}
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	08002fd9 	.word	0x08002fd9

08002f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fb4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff ffca 	bl	8002f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b21      	cmp	r3, #33	; 0x21
 8003012:	d13e      	bne.n	8003092 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301c:	d114      	bne.n	8003048 <UART_Transmit_IT+0x48>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d110      	bne.n	8003048 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	1c9a      	adds	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]
 8003046:	e008      	b.n	800305a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	1c59      	adds	r1, r3, #1
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6211      	str	r1, [r2, #32]
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29b      	uxth	r3, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4619      	mov	r1, r3
 8003068:	84d1      	strh	r1, [r2, #38]	; 0x26
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800307c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800308c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ff52 	bl	8002f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b22      	cmp	r3, #34	; 0x22
 80030e0:	d170      	bne.n	80031c4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ea:	d117      	bne.n	800311c <UART_Receive_IT+0x4e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d113      	bne.n	800311c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	b29b      	uxth	r3, r3
 8003106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310a:	b29a      	uxth	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	1c9a      	adds	r2, r3, #2
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
 800311a:	e026      	b.n	800316a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312e:	d007      	beq.n	8003140 <UART_Receive_IT+0x72>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <UART_Receive_IT+0x80>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	e008      	b.n	8003160 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29b      	uxth	r3, r3
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4619      	mov	r1, r3
 8003178:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800317a:	2b00      	cmp	r3, #0
 800317c:	d120      	bne.n	80031c0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0220 	bic.w	r2, r2, #32
 800318c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800319c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fedf 	bl	8002f7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e002      	b.n	80031c6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800320a:	f023 030c 	bic.w	r3, r3, #12
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	430b      	orrs	r3, r1
 8003216:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2c      	ldr	r2, [pc, #176]	; (80032e4 <UART_SetConfig+0x114>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d103      	bne.n	8003240 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003238:	f7fe fe56 	bl	8001ee8 <HAL_RCC_GetPCLK2Freq>
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	e002      	b.n	8003246 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003240:	f7fe fe3e 	bl	8001ec0 <HAL_RCC_GetPCLK1Freq>
 8003244:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009a      	lsls	r2, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <UART_SetConfig+0x118>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	0119      	lsls	r1, r3, #4
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009a      	lsls	r2, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fbb2 f2f3 	udiv	r2, r2, r3
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <UART_SetConfig+0x118>)
 800327e:	fba3 0302 	umull	r0, r3, r3, r2
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2064      	movs	r0, #100	; 0x64
 8003286:	fb00 f303 	mul.w	r3, r0, r3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	3332      	adds	r3, #50	; 0x32
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <UART_SetConfig+0x118>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329c:	4419      	add	r1, r3
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <UART_SetConfig+0x118>)
 80032b6:	fba3 0302 	umull	r0, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2064      	movs	r0, #100	; 0x64
 80032be:	fb00 f303 	mul.w	r3, r0, r3
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	3332      	adds	r3, #50	; 0x32
 80032c8:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <UART_SetConfig+0x118>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	440a      	add	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40013800 	.word	0x40013800
 80032e8:	51eb851f 	.word	0x51eb851f

080032ec <__libc_init_array>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	2500      	movs	r5, #0
 80032f0:	4e0c      	ldr	r6, [pc, #48]	; (8003324 <__libc_init_array+0x38>)
 80032f2:	4c0d      	ldr	r4, [pc, #52]	; (8003328 <__libc_init_array+0x3c>)
 80032f4:	1ba4      	subs	r4, r4, r6
 80032f6:	10a4      	asrs	r4, r4, #2
 80032f8:	42a5      	cmp	r5, r4
 80032fa:	d109      	bne.n	8003310 <__libc_init_array+0x24>
 80032fc:	f000 f822 	bl	8003344 <_init>
 8003300:	2500      	movs	r5, #0
 8003302:	4e0a      	ldr	r6, [pc, #40]	; (800332c <__libc_init_array+0x40>)
 8003304:	4c0a      	ldr	r4, [pc, #40]	; (8003330 <__libc_init_array+0x44>)
 8003306:	1ba4      	subs	r4, r4, r6
 8003308:	10a4      	asrs	r4, r4, #2
 800330a:	42a5      	cmp	r5, r4
 800330c:	d105      	bne.n	800331a <__libc_init_array+0x2e>
 800330e:	bd70      	pop	{r4, r5, r6, pc}
 8003310:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003314:	4798      	blx	r3
 8003316:	3501      	adds	r5, #1
 8003318:	e7ee      	b.n	80032f8 <__libc_init_array+0xc>
 800331a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800331e:	4798      	blx	r3
 8003320:	3501      	adds	r5, #1
 8003322:	e7f2      	b.n	800330a <__libc_init_array+0x1e>
 8003324:	08003388 	.word	0x08003388
 8003328:	08003388 	.word	0x08003388
 800332c:	08003388 	.word	0x08003388
 8003330:	0800338c 	.word	0x0800338c

08003334 <memset>:
 8003334:	4603      	mov	r3, r0
 8003336:	4402      	add	r2, r0
 8003338:	4293      	cmp	r3, r2
 800333a:	d100      	bne.n	800333e <memset+0xa>
 800333c:	4770      	bx	lr
 800333e:	f803 1b01 	strb.w	r1, [r3], #1
 8003342:	e7f9      	b.n	8003338 <memset+0x4>

08003344 <_init>:
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003346:	bf00      	nop
 8003348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334a:	bc08      	pop	{r3}
 800334c:	469e      	mov	lr, r3
 800334e:	4770      	bx	lr

08003350 <_fini>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	bf00      	nop
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr
