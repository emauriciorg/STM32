
blue_pill_test_ID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f94  08004f94  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004f94  08004f94  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f94  08004f94  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000074  08005010  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08005010  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df40  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021f8  00000000  00000000  0002dfdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e18  00000000  00000000  000301d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  00030ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000161cc  00000000  00000000  00031cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ac8d  00000000  00000000  00047ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077f0c  00000000  00000000  00052b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000caa55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d0  00000000  00000000  000caad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e50 	.word	0x08004e50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004e50 	.word	0x08004e50

0800014c <cmd_parse_command>:


void sample_chanel(void);

void cmd_parse_command(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (!rx_flag)  return;
 8000150:	4b43      	ldr	r3, [pc, #268]	; (8000260 <cmd_parse_command+0x114>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	b2db      	uxtb	r3, r3
 8000156:	2b00      	cmp	r3, #0
 8000158:	d07d      	beq.n	8000256 <cmd_parse_command+0x10a>
	rx_flag = 0;
 800015a:	4b41      	ldr	r3, [pc, #260]	; (8000260 <cmd_parse_command+0x114>)
 800015c:	2200      	movs	r2, #0
 800015e:	701a      	strb	r2, [r3, #0]
	switch(recieved_cmd){
 8000160:	4b40      	ldr	r3, [pc, #256]	; (8000264 <cmd_parse_command+0x118>)
 8000162:	781b      	ldrb	r3, [r3, #0]
 8000164:	b2db      	uxtb	r3, r3
 8000166:	3b2b      	subs	r3, #43	; 0x2b
 8000168:	2b1a      	cmp	r3, #26
 800016a:	d876      	bhi.n	800025a <cmd_parse_command+0x10e>
 800016c:	a201      	add	r2, pc, #4	; (adr r2, 8000174 <cmd_parse_command+0x28>)
 800016e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000172:	bf00      	nop
 8000174:	080001ef 	.word	0x080001ef
 8000178:	0800025b 	.word	0x0800025b
 800017c:	08000225 	.word	0x08000225
 8000180:	0800025b 	.word	0x0800025b
 8000184:	0800025b 	.word	0x0800025b
 8000188:	0800025b 	.word	0x0800025b
 800018c:	0800025b 	.word	0x0800025b
 8000190:	0800025b 	.word	0x0800025b
 8000194:	0800025b 	.word	0x0800025b
 8000198:	0800025b 	.word	0x0800025b
 800019c:	0800025b 	.word	0x0800025b
 80001a0:	0800025b 	.word	0x0800025b
 80001a4:	0800025b 	.word	0x0800025b
 80001a8:	0800025b 	.word	0x0800025b
 80001ac:	0800025b 	.word	0x0800025b
 80001b0:	0800025b 	.word	0x0800025b
 80001b4:	0800025b 	.word	0x0800025b
 80001b8:	0800025b 	.word	0x0800025b
 80001bc:	0800025b 	.word	0x0800025b
 80001c0:	0800025b 	.word	0x0800025b
 80001c4:	0800025b 	.word	0x0800025b
 80001c8:	0800025b 	.word	0x0800025b
 80001cc:	080001e1 	.word	0x080001e1
 80001d0:	0800025b 	.word	0x0800025b
 80001d4:	0800025b 	.word	0x0800025b
 80001d8:	0800025b 	.word	0x0800025b
 80001dc:	080001e7 	.word	0x080001e7
	case CMD_READ_ADC :
				sample_chanel();
 80001e0:	f000 f8b6 	bl	8000350 <sample_chanel>
				break;
 80001e4:	e03a      	b.n	800025c <cmd_parse_command+0x110>
	case CMD_ECHO :
				printf("echo \r\n");
 80001e6:	4820      	ldr	r0, [pc, #128]	; (8000268 <cmd_parse_command+0x11c>)
 80001e8:	f003 fe9e 	bl	8003f28 <puts>
				break;
 80001ec:	e036      	b.n	800025c <cmd_parse_command+0x110>
	case CMD_PWM_PLUS :

				if ((pwm +1000) <= TIMER_PERIOD)
 80001ee:	4b1f      	ldr	r3, [pc, #124]	; (800026c <cmd_parse_command+0x120>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80001f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80001fa:	4293      	cmp	r3, r2
 80001fc:	dc06      	bgt.n	800020c <cmd_parse_command+0xc0>
					pwm+=1000;
 80001fe:	4b1b      	ldr	r3, [pc, #108]	; (800026c <cmd_parse_command+0x120>)
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <cmd_parse_command+0x120>)
 800020a:	801a      	strh	r2, [r3, #0]
				printf("PWM is [%d] \r\n", pwm);
 800020c:	4b17      	ldr	r3, [pc, #92]	; (800026c <cmd_parse_command+0x120>)
 800020e:	881b      	ldrh	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	4817      	ldr	r0, [pc, #92]	; (8000270 <cmd_parse_command+0x124>)
 8000214:	f003 fe14 	bl	8003e40 <iprintf>
				htim3.Instance->CCR4 = pwm;
 8000218:	4b14      	ldr	r3, [pc, #80]	; (800026c <cmd_parse_command+0x120>)
 800021a:	881a      	ldrh	r2, [r3, #0]
 800021c:	4b15      	ldr	r3, [pc, #84]	; (8000274 <cmd_parse_command+0x128>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000222:	e01b      	b.n	800025c <cmd_parse_command+0x110>
	case CMD_PWM_MINUS :
				if ((pwm - 1000) >= 0)
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <cmd_parse_command+0x120>)
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800022c:	2b00      	cmp	r3, #0
 800022e:	db06      	blt.n	800023e <cmd_parse_command+0xf2>
					pwm-=1000;
 8000230:	4b0e      	ldr	r3, [pc, #56]	; (800026c <cmd_parse_command+0x120>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000238:	b29a      	uxth	r2, r3
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <cmd_parse_command+0x120>)
 800023c:	801a      	strh	r2, [r3, #0]
				printf("PWM is [%d] \r\n", pwm);
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <cmd_parse_command+0x120>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	4619      	mov	r1, r3
 8000244:	480a      	ldr	r0, [pc, #40]	; (8000270 <cmd_parse_command+0x124>)
 8000246:	f003 fdfb 	bl	8003e40 <iprintf>

				htim3.Instance->CCR4 = pwm;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <cmd_parse_command+0x120>)
 800024c:	881a      	ldrh	r2, [r3, #0]
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <cmd_parse_command+0x128>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000254:	e002      	b.n	800025c <cmd_parse_command+0x110>
	if (!rx_flag)  return;
 8000256:	bf00      	nop
 8000258:	e000      	b.n	800025c <cmd_parse_command+0x110>

	default: break;
 800025a:	bf00      	nop
	}


}
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000095 	.word	0x20000095
 8000264:	20000096 	.word	0x20000096
 8000268:	08004e68 	.word	0x08004e68
 800026c:	20000090 	.word	0x20000090
 8000270:	08004e70 	.word	0x08004e70
 8000274:	200000a4 	.word	0x200000a4

08000278 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	if (huart->Instance  ==  USART1)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <HAL_UART_RxCpltCallback+0x60>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d121      	bne.n	80002ce <HAL_UART_RxCpltCallback+0x56>
	{
		__HAL_UART_CLEAR_OREFLAG(huart);
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
		if ((rx_temp[0] != '\r'  && rx_temp[0] != '\n')){
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <HAL_UART_RxCpltCallback+0x64>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2b0d      	cmp	r3, #13
 80002a8:	d00c      	beq.n	80002c4 <HAL_UART_RxCpltCallback+0x4c>
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <HAL_UART_RxCpltCallback+0x64>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	2b0a      	cmp	r3, #10
 80002b2:	d007      	beq.n	80002c4 <HAL_UART_RxCpltCallback+0x4c>
			rx_flag = 1;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <HAL_UART_RxCpltCallback+0x68>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
			recieved_cmd = rx_temp[0];
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <HAL_UART_RxCpltCallback+0x64>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <HAL_UART_RxCpltCallback+0x6c>)
 80002c2:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(huart, (uint8_t *)rx_temp, 1);
 80002c4:	2201      	movs	r2, #1
 80002c6:	4905      	ldr	r1, [pc, #20]	; (80002dc <HAL_UART_RxCpltCallback+0x64>)
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	f003 f9e1 	bl	8003690 <HAL_UART_Receive_IT>
	}
}
 80002ce:	bf00      	nop
 80002d0:	3710      	adds	r7, #16
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40013800 	.word	0x40013800
 80002dc:	20000094 	.word	0x20000094
 80002e0:	20000095 	.word	0x20000095
 80002e4:	20000096 	.word	0x20000096

080002e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d115      	bne.n	8000326 <HAL_TIM_PeriodElapsedCallback+0x3e>
		if (counter)counter--;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d004      	beq.n	800030c <HAL_TIM_PeriodElapsedCallback+0x24>
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800030a:	6013      	str	r3, [r2, #0]

		if (counter == 0) {
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d108      	bne.n	8000326 <HAL_TIM_PeriodElapsedCallback+0x3e>
			counter = BLINK_TIMER;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000316:	2264      	movs	r2, #100	; 0x64
 8000318:	601a      	str	r2, [r3, #0]
			 GPIOC->ODR ^= GPIO_PIN_13;
 800031a:	4b07      	ldr	r3, [pc, #28]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	4a06      	ldr	r2, [pc, #24]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000320:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000324:	60d3      	str	r3, [r2, #12]
		}
	}
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40000400 	.word	0x40000400
 8000334:	20000000 	.word	0x20000000
 8000338:	40011000 	.word	0x40011000

0800033c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12){

	}
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <sample_chanel>:

void sample_chanel(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
	// sConfig.Channel = ADC_CHANNEL_0;
	// sConfig.Rank = ADC_REGULAR_RANK_1;
	// sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
	// if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)

	HAL_ADC_Start(&hadc1);
 8000356:	480b      	ldr	r0, [pc, #44]	; (8000384 <sample_chanel+0x34>)
 8000358:	f000 fd7c 	bl	8000e54 <HAL_ADC_Start>
	//HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC)
	HAL_ADC_PollForConversion(&hadc1, 200);
 800035c:	21c8      	movs	r1, #200	; 0xc8
 800035e:	4809      	ldr	r0, [pc, #36]	; (8000384 <sample_chanel+0x34>)
 8000360:	f000 fe52 	bl	8001008 <HAL_ADC_PollForConversion>
	uint32_t adc_value= HAL_ADC_GetValue(&hadc1);
 8000364:	4807      	ldr	r0, [pc, #28]	; (8000384 <sample_chanel+0x34>)
 8000366:	f000 ff49 	bl	80011fc <HAL_ADC_GetValue>
 800036a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 800036c:	4805      	ldr	r0, [pc, #20]	; (8000384 <sample_chanel+0x34>)
 800036e:	f000 fe1f 	bl	8000fb0 <HAL_ADC_Stop>

	printf("adc value is  [%4lx]\r\n",adc_value);
 8000372:	6879      	ldr	r1, [r7, #4]
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <sample_chanel+0x38>)
 8000376:	f003 fd63 	bl	8003e40 <iprintf>

}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200000e4 	.word	0x200000e4
 8000388:	08004e80 	.word	0x08004e80

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdout,0, _IOLBF, 0);
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <main+0x54>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	6898      	ldr	r0, [r3, #8]
 8000396:	2300      	movs	r3, #0
 8000398:	2201      	movs	r2, #1
 800039a:	2100      	movs	r1, #0
 800039c:	f003 fdcc 	bl	8003f38 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a0:	f000 fc1e 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a4:	f000 f828 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a8:	f000 f954 	bl	8000654 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003ac:	f000 f874 	bl	8000498 <MX_ADC1_Init>
  MX_TIM3_Init();
 80003b0:	f000 f8b0 	bl	8000514 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80003b4:	f000 f924 	bl	8000600 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 80003b8:	480a      	ldr	r0, [pc, #40]	; (80003e4 <main+0x58>)
 80003ba:	f002 fa56 	bl	800286a <HAL_TIM_Base_Start_IT>
	printf("Program start [%s]\r\n", __DATE__);
 80003be:	490a      	ldr	r1, [pc, #40]	; (80003e8 <main+0x5c>)
 80003c0:	480a      	ldr	r0, [pc, #40]	; (80003ec <main+0x60>)
 80003c2:	f003 fd3d 	bl	8003e40 <iprintf>

	//uint32_t loop_counter = 1000;
	HAL_UART_Receive_IT(&huart1, (uint8_t * )rx_temp, 1);
 80003c6:	2201      	movs	r2, #1
 80003c8:	4909      	ldr	r1, [pc, #36]	; (80003f0 <main+0x64>)
 80003ca:	480a      	ldr	r0, [pc, #40]	; (80003f4 <main+0x68>)
 80003cc:	f003 f960 	bl	8003690 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80003d0:	210c      	movs	r1, #12
 80003d2:	4804      	ldr	r0, [pc, #16]	; (80003e4 <main+0x58>)
 80003d4:	f002 faa0 	bl	8002918 <HAL_TIM_PWM_Start>
	if (HAL_GetTick() > loop_counter){
		loop_counter = HAL_GetTick() + 1000;
		sample_chanel();
	}
#endif
	cmd_parse_command();
 80003d8:	f7ff feb8 	bl	800014c <cmd_parse_command>
 80003dc:	e7fc      	b.n	80003d8 <main+0x4c>
 80003de:	bf00      	nop
 80003e0:	20000010 	.word	0x20000010
 80003e4:	200000a4 	.word	0x200000a4
 80003e8:	08004e98 	.word	0x08004e98
 80003ec:	08004ea4 	.word	0x08004ea4
 80003f0:	20000094 	.word	0x20000094
 80003f4:	20000114 	.word	0x20000114

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b094      	sub	sp, #80	; 0x50
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f003 fd12 	bl	8003e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000428:	2302      	movs	r3, #2
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	2301      	movs	r3, #1
 800042e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000430:	2310      	movs	r3, #16
 8000432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000434:	2300      	movs	r3, #0
 8000436:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800043c:	4618      	mov	r0, r3
 800043e:	f001 fc5b 	bl	8001cf8 <HAL_RCC_OscConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000448:	f000 f968 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044c:	230f      	movs	r3, #15
 800044e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f001 fec6 	bl	80021f8 <HAL_RCC_ClockConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000472:	f000 f953 	bl	800071c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000476:	2302      	movs	r3, #2
 8000478:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	4618      	mov	r0, r3
 8000482:	f002 f855 	bl	8002530 <HAL_RCCEx_PeriphCLKConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800048c:	f000 f946 	bl	800071c <Error_Handler>
  }
}
 8000490:	bf00      	nop
 8000492:	3750      	adds	r7, #80	; 0x50
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_ADC1_Init+0x74>)
 80004aa:	4a19      	ldr	r2, [pc, #100]	; (8000510 <MX_ADC1_Init+0x78>)
 80004ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <MX_ADC1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <MX_ADC1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ba:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_ADC1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_ADC1_Init+0x74>)
 80004c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <MX_ADC1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_ADC1_Init+0x74>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <MX_ADC1_Init+0x74>)
 80004d6:	f000 fbe5 	bl	8000ca4 <HAL_ADC_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004e0:	f000 f91c 	bl	800071c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_ADC1_Init+0x74>)
 80004f6:	f000 ff63 	bl	80013c0 <HAL_ADC_ConfigChannel>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000500:	f000 f90c 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200000e4 	.word	0x200000e4
 8000510:	40012400 	.word	0x40012400

08000514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08e      	sub	sp, #56	; 0x38
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000528:	f107 0320 	add.w	r3, r7, #32
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
 8000540:	615a      	str	r2, [r3, #20]
 8000542:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000544:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <MX_TIM3_Init+0xe4>)
 8000546:	4a2d      	ldr	r2, [pc, #180]	; (80005fc <MX_TIM3_Init+0xe8>)
 8000548:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 800054a:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <MX_TIM3_Init+0xe4>)
 800054c:	2208      	movs	r2, #8
 800054e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <MX_TIM3_Init+0xe4>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000556:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <MX_TIM3_Init+0xe4>)
 8000558:	f242 7210 	movw	r2, #10000	; 0x2710
 800055c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800055e:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <MX_TIM3_Init+0xe4>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <MX_TIM3_Init+0xe4>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800056a:	4823      	ldr	r0, [pc, #140]	; (80005f8 <MX_TIM3_Init+0xe4>)
 800056c:	f002 f952 	bl	8002814 <HAL_TIM_Base_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000576:	f000 f8d1 	bl	800071c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800057a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000584:	4619      	mov	r1, r3
 8000586:	481c      	ldr	r0, [pc, #112]	; (80005f8 <MX_TIM3_Init+0xe4>)
 8000588:	f002 fbc6 	bl	8002d18 <HAL_TIM_ConfigClockSource>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000592:	f000 f8c3 	bl	800071c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000596:	4818      	ldr	r0, [pc, #96]	; (80005f8 <MX_TIM3_Init+0xe4>)
 8000598:	f002 f98a 	bl	80028b0 <HAL_TIM_PWM_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80005a2:	f000 f8bb 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a6:	2300      	movs	r3, #0
 80005a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4619      	mov	r1, r3
 80005b4:	4810      	ldr	r0, [pc, #64]	; (80005f8 <MX_TIM3_Init+0xe4>)
 80005b6:	f002 ff2f 	bl	8003418 <HAL_TIMEx_MasterConfigSynchronization>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80005c0:	f000 f8ac 	bl	800071c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005c4:	2360      	movs	r3, #96	; 0x60
 80005c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = PWD_PERIOD;
 80005c8:	2332      	movs	r3, #50	; 0x32
 80005ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80005d0:	2304      	movs	r3, #4
 80005d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	220c      	movs	r2, #12
 80005d8:	4619      	mov	r1, r3
 80005da:	4807      	ldr	r0, [pc, #28]	; (80005f8 <MX_TIM3_Init+0xe4>)
 80005dc:	f002 fad6 	bl	8002b8c <HAL_TIM_PWM_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80005e6:	f000 f899 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <MX_TIM3_Init+0xe4>)
 80005ec:	f000 f938 	bl	8000860 <HAL_TIM_MspPostInit>

}
 80005f0:	bf00      	nop
 80005f2:	3738      	adds	r7, #56	; 0x38
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000a4 	.word	0x200000a4
 80005fc:	40000400 	.word	0x40000400

08000600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_USART1_UART_Init+0x50>)
 8000608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_USART1_UART_Init+0x4c>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART1_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000638:	f002 ff44 	bl	80034c4 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000642:	f000 f86b 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000114 	.word	0x20000114
 8000650:	40013800 	.word	0x40013800

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <MX_GPIO_Init+0xb8>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <MX_GPIO_Init+0xb8>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <MX_GPIO_Init+0xb8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0310 	and.w	r3, r3, #16
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <MX_GPIO_Init+0xb8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <MX_GPIO_Init+0xb8>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_GPIO_Init+0xb8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_GPIO_Init+0xb8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <MX_GPIO_Init+0xb8>)
 800069e:	f043 0308 	orr.w	r3, r3, #8
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_GPIO_Init+0xb8>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0308 	and.w	r3, r3, #8
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4816      	ldr	r0, [pc, #88]	; (8000710 <MX_GPIO_Init+0xbc>)
 80006b8:	f001 faee 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_GPIO_Init+0xbc>)
 80006d6:	f001 f985 	bl	80019e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006da:	2301      	movs	r3, #1
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_GPIO_Init+0xc0>)
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <MX_GPIO_Init+0xc4>)
 80006ee:	f001 f979 	bl	80019e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2006      	movs	r0, #6
 80006f8:	f001 f8c7 	bl	800188a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006fc:	2006      	movs	r0, #6
 80006fe:	f001 f8e0 	bl	80018c2 <HAL_NVIC_EnableIRQ>

}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40021000 	.word	0x40021000
 8000710:	40011000 	.word	0x40011000
 8000714:	10110000 	.word	0x10110000
 8000718:	40010c00 	.word	0x40010c00

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_MspInit+0x5c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <HAL_MspInit+0x5c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_MspInit+0x5c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x5c>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x5c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x5c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_MspInit+0x60>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_MspInit+0x60>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000
 8000788:	40010000 	.word	0x40010000

0800078c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <HAL_ADC_MspInit+0x7c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d129      	bne.n	8000800 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <HAL_ADC_MspInit+0x80>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a16      	ldr	r2, [pc, #88]	; (800080c <HAL_ADC_MspInit+0x80>)
 80007b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_ADC_MspInit+0x80>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_ADC_MspInit+0x80>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a10      	ldr	r2, [pc, #64]	; (800080c <HAL_ADC_MspInit+0x80>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_ADC_MspInit+0x80>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80007dc:	2307      	movs	r3, #7
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e0:	2303      	movs	r3, #3
 80007e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <HAL_ADC_MspInit+0x84>)
 80007ec:	f001 f8fa 	bl	80019e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2012      	movs	r0, #18
 80007f6:	f001 f848 	bl	800188a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007fa:	2012      	movs	r0, #18
 80007fc:	f001 f861 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40012400 	.word	0x40012400
 800080c:	40021000 	.word	0x40021000
 8000810:	40010800 	.word	0x40010800

08000814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <HAL_TIM_Base_MspInit+0x44>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d113      	bne.n	800084e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_TIM_Base_MspInit+0x48>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a0c      	ldr	r2, [pc, #48]	; (800085c <HAL_TIM_Base_MspInit+0x48>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <HAL_TIM_Base_MspInit+0x48>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	201d      	movs	r0, #29
 8000844:	f001 f821 	bl	800188a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000848:	201d      	movs	r0, #29
 800084a:	f001 f83a 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40000400 	.word	0x40000400
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <HAL_TIM_MspPostInit+0x58>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d117      	bne.n	80008b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_TIM_MspPostInit+0x5c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <HAL_TIM_MspPostInit+0x5c>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_TIM_MspPostInit+0x5c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_TIM_MspPostInit+0x60>)
 80008ac:	f001 f89a 	bl	80019e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008b0:	bf00      	nop
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40000400 	.word	0x40000400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a20      	ldr	r2, [pc, #128]	; (8000960 <HAL_UART_MspInit+0x9c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d139      	bne.n	8000958 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <HAL_UART_MspInit+0xa0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <HAL_UART_MspInit+0xa0>)
 80008ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <HAL_UART_MspInit+0xa0>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <HAL_UART_MspInit+0xa0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a18      	ldr	r2, [pc, #96]	; (8000964 <HAL_UART_MspInit+0xa0>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <HAL_UART_MspInit+0xa0>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	4619      	mov	r1, r3
 8000928:	480f      	ldr	r0, [pc, #60]	; (8000968 <HAL_UART_MspInit+0xa4>)
 800092a:	f001 f85b 	bl	80019e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <HAL_UART_MspInit+0xa4>)
 8000944:	f001 f84e 	bl	80019e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	2025      	movs	r0, #37	; 0x25
 800094e:	f000 ff9c 	bl	800188a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000952:	2025      	movs	r0, #37	; 0x25
 8000954:	f000 ffb5 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000958:	bf00      	nop
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40013800 	.word	0x40013800
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <HardFault_Handler+0x4>

0800097e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <BusFault_Handler+0x4>

0800098a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f958 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f001 f97f 	bl	8001cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <ADC1_2_IRQHandler+0x10>)
 80009d6:	f000 fc1d 	bl	8001214 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000e4 	.word	0x200000e4

080009e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <TIM3_IRQHandler+0x10>)
 80009ea:	f001 ffc7 	bl	800297c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000a4 	.word	0x200000a4

080009f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <USART1_IRQHandler+0x10>)
 80009fe:	f002 fe9b 	bl	8003738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000114 	.word	0x20000114

08000a0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
	}

return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]

	UNUSED(file);
	UNUSED(len);
	HAL_UART_Transmit( &huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <_write+0x28>)
 8000a60:	f002 fd7d 	bl	800355e <HAL_UART_Transmit>

	return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000114 	.word	0x20000114

08000a74 <_close>:

int _close(int file)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	return -1;
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <_isatty>:

int _isatty(int file)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	return 1;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <_sbrk+0x50>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x16>
		heap_end = &end;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <_sbrk+0x50>)
 8000ae6:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <_sbrk+0x54>)
 8000ae8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <_sbrk+0x50>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <_sbrk+0x50>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	466a      	mov	r2, sp
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d907      	bls.n	8000b0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000afe:	f003 f96d 	bl	8003ddc <__errno>
 8000b02:	4602      	mov	r2, r0
 8000b04:	230c      	movs	r3, #12
 8000b06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	e006      	b.n	8000b1c <_sbrk+0x48>
	}

	heap_end += incr;
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <_sbrk+0x50>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <_sbrk+0x50>)
 8000b18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000098 	.word	0x20000098
 8000b28:	20000160 	.word	0x20000160

08000b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <SystemInit+0x5c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <SystemInit+0x5c>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <SystemInit+0x5c>)
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	4911      	ldr	r1, [pc, #68]	; (8000b88 <SystemInit+0x5c>)
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <SystemInit+0x60>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <SystemInit+0x5c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <SystemInit+0x5c>)
 8000b4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <SystemInit+0x5c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SystemInit+0x5c>)
 8000b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <SystemInit+0x5c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <SystemInit+0x5c>)
 8000b6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b6e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SystemInit+0x5c>)
 8000b72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b76:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SystemInit+0x64>)
 8000b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b7e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	f8ff0000 	.word	0xf8ff0000
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b96:	e003      	b.n	8000ba0 <LoopCopyDataInit>

08000b98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b9e:	3104      	adds	r1, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ba0:	480a      	ldr	r0, [pc, #40]	; (8000bcc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ba4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ba6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ba8:	d3f6      	bcc.n	8000b98 <CopyDataInit>
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bac:	e002      	b.n	8000bb4 <LoopFillZerobss>

08000bae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bb0:	f842 3b04 	str.w	r3, [r2], #4

08000bb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bb8:	d3f9      	bcc.n	8000bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bba:	f7ff ffb7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f003 f913 	bl	8003de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fbe3 	bl	800038c <main>
  bx lr
 8000bc6:	4770      	bx	lr
  ldr r3, =_sidata
 8000bc8:	08004f9c 	.word	0x08004f9c
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bd0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000bd4:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000bd8:	2000015c 	.word	0x2000015c

08000bdc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <CAN1_RX1_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 fe3f 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fd94 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fe57 	bl	80018de <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 fe1f 	bl	800188a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000004 	.word	0x20000004
 8000c64:	2000000c 	.word	0x2000000c
 8000c68:	20000008 	.word	0x20000008

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	2000000c 	.word	0x2000000c
 8000c8c:	20000154 	.word	0x20000154

08000c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000154 	.word	0x20000154

08000ca4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e0be      	b.n	8000e44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d109      	bne.n	8000ce8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fd52 	bl	800078c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f000 fcb3 	bl	8001654 <ADC_ConversionStop_Disable>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 8099 	bne.w	8000e32 <HAL_ADC_Init+0x18e>
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8095 	bne.w	8000e32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d10:	f023 0302 	bic.w	r3, r3, #2
 8000d14:	f043 0202 	orr.w	r2, r3, #2
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7b1b      	ldrb	r3, [r3, #12]
 8000d2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d3c:	d003      	beq.n	8000d46 <HAL_ADC_Init+0xa2>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d102      	bne.n	8000d4c <HAL_ADC_Init+0xa8>
 8000d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4a:	e000      	b.n	8000d4e <HAL_ADC_Init+0xaa>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7d1b      	ldrb	r3, [r3, #20]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d119      	bne.n	8000d90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7b1b      	ldrb	r3, [r3, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d109      	bne.n	8000d78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	035a      	lsls	r2, r3, #13
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e00b      	b.n	8000d90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7c:	f043 0220 	orr.w	r2, r3, #32
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	f043 0201 	orr.w	r2, r3, #1
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <HAL_ADC_Init+0x1a8>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6812      	ldr	r2, [r2, #0]
 8000db2:	68b9      	ldr	r1, [r7, #8]
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dc0:	d003      	beq.n	8000dca <HAL_ADC_Init+0x126>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d104      	bne.n	8000dd4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	051b      	lsls	r3, r3, #20
 8000dd2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_ADC_Init+0x1ac>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d10b      	bne.n	8000e10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e02:	f023 0303 	bic.w	r3, r3, #3
 8000e06:	f043 0201 	orr.w	r2, r3, #1
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e0e:	e018      	b.n	8000e42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	f023 0312 	bic.w	r3, r3, #18
 8000e18:	f043 0210 	orr.w	r2, r3, #16
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	f043 0201 	orr.w	r2, r3, #1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e30:	e007      	b.n	8000e42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e36:	f043 0210 	orr.w	r2, r3, #16
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	ffe1f7fd 	.word	0xffe1f7fd
 8000e50:	ff1f0efe 	.word	0xff1f0efe

08000e54 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_ADC_Start+0x1a>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e098      	b.n	8000fa0 <HAL_ADC_Start+0x14c>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fb9a 	bl	80015b0 <ADC_Enable>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8087 	bne.w	8000f96 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a41      	ldr	r2, [pc, #260]	; (8000fa8 <HAL_ADC_Start+0x154>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d105      	bne.n	8000eb2 <HAL_ADC_Start+0x5e>
 8000ea6:	4b41      	ldr	r3, [pc, #260]	; (8000fac <HAL_ADC_Start+0x158>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d115      	bne.n	8000ede <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d026      	beq.n	8000f1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ed4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000edc:	e01d      	b.n	8000f1a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <HAL_ADC_Start+0x158>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d004      	beq.n	8000efe <HAL_ADC_Start+0xaa>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a2b      	ldr	r2, [pc, #172]	; (8000fa8 <HAL_ADC_Start+0x154>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10d      	bne.n	8000f1a <HAL_ADC_Start+0xc6>
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <HAL_ADC_Start+0x158>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d007      	beq.n	8000f1a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d006      	beq.n	8000f34 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2a:	f023 0206 	bic.w	r2, r3, #6
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f32:	e002      	b.n	8000f3a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f06f 0202 	mvn.w	r2, #2
 8000f4a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f5a:	d113      	bne.n	8000f84 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f60:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <HAL_ADC_Start+0x154>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d105      	bne.n	8000f72 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_ADC_Start+0x158>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d108      	bne.n	8000f84 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	e00c      	b.n	8000f9e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	e003      	b.n	8000f9e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40012800 	.word	0x40012800
 8000fac:	40012400 	.word	0x40012400

08000fb0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_Stop+0x1a>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e01a      	b.n	8001000 <HAL_ADC_Stop+0x50>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fb3e 	bl	8001654 <ADC_ConversionStop_Disable>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fea:	f023 0301 	bic.w	r3, r3, #1
 8000fee:	f043 0201 	orr.w	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800101e:	f7ff fe37 	bl	8000c90 <HAL_GetTick>
 8001022:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00b      	beq.n	800104a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	f043 0220 	orr.w	r2, r3, #32
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0c8      	b.n	80011dc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001054:	2b00      	cmp	r3, #0
 8001056:	d12a      	bne.n	80010ae <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001062:	2b00      	cmp	r3, #0
 8001064:	d123      	bne.n	80010ae <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001066:	e01a      	b.n	800109e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800106e:	d016      	beq.n	800109e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <HAL_ADC_PollForConversion+0x7e>
 8001076:	f7ff fe0b 	bl	8000c90 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d20b      	bcs.n	800109e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	f043 0204 	orr.w	r2, r3, #4
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e09e      	b.n	80011dc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0dd      	beq.n	8001068 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010ac:	e06c      	b.n	8001188 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80010ae:	4b4d      	ldr	r3, [pc, #308]	; (80011e4 <HAL_ADC_PollForConversion+0x1dc>)
 80010b0:	681c      	ldr	r4, [r3, #0]
 80010b2:	2002      	movs	r0, #2
 80010b4:	f001 faf2 	bl	800269c <HAL_RCCEx_GetPeriphCLKFreq>
 80010b8:	4603      	mov	r3, r0
 80010ba:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6919      	ldr	r1, [r3, #16]
 80010c4:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <HAL_ADC_PollForConversion+0x1e0>)
 80010c6:	400b      	ands	r3, r1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d118      	bne.n	80010fe <HAL_ADC_PollForConversion+0xf6>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68d9      	ldr	r1, [r3, #12]
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <HAL_ADC_PollForConversion+0x1e4>)
 80010d4:	400b      	ands	r3, r1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d111      	bne.n	80010fe <HAL_ADC_PollForConversion+0xf6>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6919      	ldr	r1, [r3, #16]
 80010e0:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <HAL_ADC_PollForConversion+0x1e8>)
 80010e2:	400b      	ands	r3, r1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d108      	bne.n	80010fa <HAL_ADC_PollForConversion+0xf2>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68d9      	ldr	r1, [r3, #12]
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_ADC_PollForConversion+0x1ec>)
 80010f0:	400b      	ands	r3, r1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_PollForConversion+0xf2>
 80010f6:	2314      	movs	r3, #20
 80010f8:	e020      	b.n	800113c <HAL_ADC_PollForConversion+0x134>
 80010fa:	2329      	movs	r3, #41	; 0x29
 80010fc:	e01e      	b.n	800113c <HAL_ADC_PollForConversion+0x134>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6919      	ldr	r1, [r3, #16]
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <HAL_ADC_PollForConversion+0x1e8>)
 8001106:	400b      	ands	r3, r1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d106      	bne.n	800111a <HAL_ADC_PollForConversion+0x112>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68d9      	ldr	r1, [r3, #12]
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <HAL_ADC_PollForConversion+0x1ec>)
 8001114:	400b      	ands	r3, r1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00d      	beq.n	8001136 <HAL_ADC_PollForConversion+0x12e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6919      	ldr	r1, [r3, #16]
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <HAL_ADC_PollForConversion+0x1f0>)
 8001122:	400b      	ands	r3, r1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d108      	bne.n	800113a <HAL_ADC_PollForConversion+0x132>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68d9      	ldr	r1, [r3, #12]
 800112e:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <HAL_ADC_PollForConversion+0x1f0>)
 8001130:	400b      	ands	r3, r1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_ADC_PollForConversion+0x132>
 8001136:	2354      	movs	r3, #84	; 0x54
 8001138:	e000      	b.n	800113c <HAL_ADC_PollForConversion+0x134>
 800113a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001142:	e01d      	b.n	8001180 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114a:	d016      	beq.n	800117a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <HAL_ADC_PollForConversion+0x15a>
 8001152:	f7ff fd9d 	bl	8000c90 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d20b      	bcs.n	800117a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	f043 0204 	orr.w	r2, r3, #4
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e030      	b.n	80011dc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8dd      	bhi.n	8001144 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f06f 0212 	mvn.w	r2, #18
 8001190:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011ac:	d115      	bne.n	80011da <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d111      	bne.n	80011da <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d105      	bne.n	80011da <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	f043 0201 	orr.w	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	20000004 	.word	0x20000004
 80011e8:	24924924 	.word	0x24924924
 80011ec:	00924924 	.word	0x00924924
 80011f0:	12492492 	.word	0x12492492
 80011f4:	00492492 	.word	0x00492492
 80011f8:	00249249 	.word	0x00249249

080011fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b20      	cmp	r3, #32
 8001228:	d140      	bne.n	80012ac <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b02      	cmp	r3, #2
 8001236:	d139      	bne.n	80012ac <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800125a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800125e:	d11d      	bne.n	800129c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001264:	2b00      	cmp	r3, #0
 8001266:	d119      	bne.n	800129c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0220 	bic.w	r2, r2, #32
 8001276:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f043 0201 	orr.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f87c 	bl	800139a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f06f 0212 	mvn.w	r2, #18
 80012aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	2b80      	cmp	r3, #128	; 0x80
 80012b8:	d14f      	bne.n	800135a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d148      	bne.n	800135a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	f003 0310 	and.w	r3, r3, #16
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d105      	bne.n	80012e0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80012ea:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80012ee:	d012      	beq.n	8001316 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d125      	bne.n	800134a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001308:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800130c:	d11d      	bne.n	800134a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001312:	2b00      	cmp	r3, #0
 8001314:	d119      	bne.n	800134a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001324:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	f043 0201 	orr.w	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f9bc 	bl	80016c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f06f 020c 	mvn.w	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001364:	2b40      	cmp	r3, #64	; 0x40
 8001366:	d114      	bne.n	8001392 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10d      	bne.n	8001392 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f812 	bl	80013ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0201 	mvn.w	r2, #1
 8001390:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x20>
 80013dc:	2302      	movs	r3, #2
 80013de:	e0dc      	b.n	800159a <HAL_ADC_ConfigChannel+0x1da>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b06      	cmp	r3, #6
 80013ee:	d81c      	bhi.n	800142a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b05      	subs	r3, #5
 8001402:	221f      	movs	r2, #31
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	4019      	ands	r1, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	3b05      	subs	r3, #5
 800141c:	fa00 f203 	lsl.w	r2, r0, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
 8001428:	e03c      	b.n	80014a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b0c      	cmp	r3, #12
 8001430:	d81c      	bhi.n	800146c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	3b23      	subs	r3, #35	; 0x23
 8001444:	221f      	movs	r2, #31
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	4019      	ands	r1, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	3b23      	subs	r3, #35	; 0x23
 800145e:	fa00 f203 	lsl.w	r2, r0, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
 800146a:	e01b      	b.n	80014a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	3b41      	subs	r3, #65	; 0x41
 800147e:	221f      	movs	r2, #31
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	4019      	ands	r1, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	3b41      	subs	r3, #65	; 0x41
 8001498:	fa00 f203 	lsl.w	r2, r0, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b09      	cmp	r3, #9
 80014aa:	d91c      	bls.n	80014e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68d9      	ldr	r1, [r3, #12]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	3b1e      	subs	r3, #30
 80014be:	2207      	movs	r2, #7
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	4019      	ands	r1, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6898      	ldr	r0, [r3, #8]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	3b1e      	subs	r3, #30
 80014d8:	fa00 f203 	lsl.w	r2, r0, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	e019      	b.n	800151a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6919      	ldr	r1, [r3, #16]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	2207      	movs	r2, #7
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4019      	ands	r1, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6898      	ldr	r0, [r3, #8]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	fa00 f203 	lsl.w	r2, r0, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b10      	cmp	r3, #16
 8001520:	d003      	beq.n	800152a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001526:	2b11      	cmp	r3, #17
 8001528:	d132      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d125      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d126      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001550:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b10      	cmp	r3, #16
 8001558:	d11a      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <HAL_ADC_ConfigChannel+0x1ec>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	0c9a      	lsrs	r2, r3, #18
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001570:	e002      	b.n	8001578 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3b01      	subs	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f9      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x1b2>
 800157e:	e007      	b.n	8001590 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	f043 0220 	orr.w	r2, r3, #32
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	40012400 	.word	0x40012400
 80015a8:	20000004 	.word	0x20000004
 80015ac:	431bde83 	.word	0x431bde83

080015b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d039      	beq.n	8001642 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <ADC_Enable+0x9c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <ADC_Enable+0xa0>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015ec:	e002      	b.n	80015f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f9      	bne.n	80015ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015fa:	f7ff fb49 	bl	8000c90 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001600:	e018      	b.n	8001634 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001602:	f7ff fb45 	bl	8000c90 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d911      	bls.n	8001634 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	f043 0210 	orr.w	r2, r3, #16
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e007      	b.n	8001644 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b01      	cmp	r3, #1
 8001640:	d1df      	bne.n	8001602 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000004 	.word	0x20000004
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b01      	cmp	r3, #1
 800166c:	d127      	bne.n	80016be <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0201 	bic.w	r2, r2, #1
 800167c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800167e:	f7ff fb07 	bl	8000c90 <HAL_GetTick>
 8001682:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001684:	e014      	b.n	80016b0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001686:	f7ff fb03 	bl	8000c90 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d90d      	bls.n	80016b0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f043 0210 	orr.w	r2, r3, #16
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e007      	b.n	80016c0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d0e3      	beq.n	8001686 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
	...

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4906      	ldr	r1, [pc, #24]	; (8001774 <__NVIC_EnableIRQ+0x34>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	; (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001840:	d301      	bcc.n	8001846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2301      	movs	r3, #1
 8001844:	e00f      	b.n	8001866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <SysTick_Config+0x40>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184e:	210f      	movs	r1, #15
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f7ff ff90 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <SysTick_Config+0x40>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SysTick_Config+0x40>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff2d 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff42 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff90 	bl	80017cc <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5f 	bl	8001778 <__NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff35 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffa2 	bl	8001830 <SysTick_Config>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800190a:	2b02      	cmp	r3, #2
 800190c:	d005      	beq.n	800191a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2204      	movs	r2, #4
 8001912:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e051      	b.n	80019be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 020e 	bic.w	r2, r2, #14
 8001928:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_DMA_Abort_IT+0xd0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d029      	beq.n	8001998 <HAL_DMA_Abort_IT+0xa0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a20      	ldr	r2, [pc, #128]	; (80019cc <HAL_DMA_Abort_IT+0xd4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d022      	beq.n	8001994 <HAL_DMA_Abort_IT+0x9c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <HAL_DMA_Abort_IT+0xd8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d01a      	beq.n	800198e <HAL_DMA_Abort_IT+0x96>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_DMA_Abort_IT+0xdc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d012      	beq.n	8001988 <HAL_DMA_Abort_IT+0x90>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_DMA_Abort_IT+0xe0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00a      	beq.n	8001982 <HAL_DMA_Abort_IT+0x8a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1a      	ldr	r2, [pc, #104]	; (80019dc <HAL_DMA_Abort_IT+0xe4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d102      	bne.n	800197c <HAL_DMA_Abort_IT+0x84>
 8001976:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800197a:	e00e      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 800197c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001980:	e00b      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 8001982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001986:	e008      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 8001988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198c:	e005      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 800198e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001992:	e002      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 8001994:	2310      	movs	r3, #16
 8001996:	e000      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 8001998:	2301      	movs	r3, #1
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <HAL_DMA_Abort_IT+0xe8>)
 800199c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
    } 
  }
  return status;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020008 	.word	0x40020008
 80019cc:	4002001c 	.word	0x4002001c
 80019d0:	40020030 	.word	0x40020030
 80019d4:	40020044 	.word	0x40020044
 80019d8:	40020058 	.word	0x40020058
 80019dc:	4002006c 	.word	0x4002006c
 80019e0:	40020000 	.word	0x40020000

080019e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b08b      	sub	sp, #44	; 0x2c
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e127      	b.n	8001c48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019f8:	2201      	movs	r2, #1
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8116 	bne.w	8001c42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d034      	beq.n	8001a88 <HAL_GPIO_Init+0xa4>
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d80d      	bhi.n	8001a3e <HAL_GPIO_Init+0x5a>
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d02b      	beq.n	8001a7e <HAL_GPIO_Init+0x9a>
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d804      	bhi.n	8001a34 <HAL_GPIO_Init+0x50>
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d031      	beq.n	8001a92 <HAL_GPIO_Init+0xae>
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d01c      	beq.n	8001a6c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a32:	e048      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d043      	beq.n	8001ac0 <HAL_GPIO_Init+0xdc>
 8001a38:	2b11      	cmp	r3, #17
 8001a3a:	d01b      	beq.n	8001a74 <HAL_GPIO_Init+0x90>
          break;
 8001a3c:	e043      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a3e:	4a89      	ldr	r2, [pc, #548]	; (8001c64 <HAL_GPIO_Init+0x280>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d026      	beq.n	8001a92 <HAL_GPIO_Init+0xae>
 8001a44:	4a87      	ldr	r2, [pc, #540]	; (8001c64 <HAL_GPIO_Init+0x280>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d806      	bhi.n	8001a58 <HAL_GPIO_Init+0x74>
 8001a4a:	4a87      	ldr	r2, [pc, #540]	; (8001c68 <HAL_GPIO_Init+0x284>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d020      	beq.n	8001a92 <HAL_GPIO_Init+0xae>
 8001a50:	4a86      	ldr	r2, [pc, #536]	; (8001c6c <HAL_GPIO_Init+0x288>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01d      	beq.n	8001a92 <HAL_GPIO_Init+0xae>
          break;
 8001a56:	e036      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a58:	4a85      	ldr	r2, [pc, #532]	; (8001c70 <HAL_GPIO_Init+0x28c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0xae>
 8001a5e:	4a85      	ldr	r2, [pc, #532]	; (8001c74 <HAL_GPIO_Init+0x290>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d016      	beq.n	8001a92 <HAL_GPIO_Init+0xae>
 8001a64:	4a84      	ldr	r2, [pc, #528]	; (8001c78 <HAL_GPIO_Init+0x294>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_GPIO_Init+0xae>
          break;
 8001a6a:	e02c      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	623b      	str	r3, [r7, #32]
          break;
 8001a72:	e028      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	e023      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	3308      	adds	r3, #8
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e01e      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	330c      	adds	r3, #12
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e019      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	623b      	str	r3, [r7, #32]
          break;
 8001a9e:	e012      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa8:	2308      	movs	r3, #8
 8001aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	611a      	str	r2, [r3, #16]
          break;
 8001ab2:	e008      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	615a      	str	r2, [r3, #20]
          break;
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
          break;
 8001ac4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2bff      	cmp	r3, #255	; 0xff
 8001aca:	d801      	bhi.n	8001ad0 <HAL_GPIO_Init+0xec>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	e001      	b.n	8001ad4 <HAL_GPIO_Init+0xf0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2bff      	cmp	r3, #255	; 0xff
 8001ada:	d802      	bhi.n	8001ae2 <HAL_GPIO_Init+0xfe>
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x104>
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	3b08      	subs	r3, #8
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	210f      	movs	r1, #15
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	401a      	ands	r2, r3
 8001afa:	6a39      	ldr	r1, [r7, #32]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	431a      	orrs	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 8096 	beq.w	8001c42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b16:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <HAL_GPIO_Init+0x298>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <HAL_GPIO_Init+0x298>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6193      	str	r3, [r2, #24]
 8001b22:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <HAL_GPIO_Init+0x298>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b2e:	4a54      	ldr	r2, [pc, #336]	; (8001c80 <HAL_GPIO_Init+0x29c>)
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	3302      	adds	r3, #2
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <HAL_GPIO_Init+0x2a0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_GPIO_Init+0x19e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4a      	ldr	r2, [pc, #296]	; (8001c88 <HAL_GPIO_Init+0x2a4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00d      	beq.n	8001b7e <HAL_GPIO_Init+0x19a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a49      	ldr	r2, [pc, #292]	; (8001c8c <HAL_GPIO_Init+0x2a8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d007      	beq.n	8001b7a <HAL_GPIO_Init+0x196>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a48      	ldr	r2, [pc, #288]	; (8001c90 <HAL_GPIO_Init+0x2ac>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_GPIO_Init+0x192>
 8001b72:	2303      	movs	r3, #3
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x1a0>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e004      	b.n	8001b84 <HAL_GPIO_Init+0x1a0>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e002      	b.n	8001b84 <HAL_GPIO_Init+0x1a0>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <HAL_GPIO_Init+0x1a0>
 8001b82:	2300      	movs	r3, #0
 8001b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b86:	f002 0203 	and.w	r2, r2, #3
 8001b8a:	0092      	lsls	r2, r2, #2
 8001b8c:	4093      	lsls	r3, r2
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b94:	493a      	ldr	r1, [pc, #232]	; (8001c80 <HAL_GPIO_Init+0x29c>)
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4938      	ldr	r1, [pc, #224]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
 8001bba:	e006      	b.n	8001bca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	4933      	ldr	r1, [pc, #204]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bd6:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	492e      	ldr	r1, [pc, #184]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
 8001be2:	e006      	b.n	8001bf2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4929      	ldr	r1, [pc, #164]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	4924      	ldr	r1, [pc, #144]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
 8001c0a:	e006      	b.n	8001c1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	491f      	ldr	r1, [pc, #124]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	491a      	ldr	r1, [pc, #104]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60cb      	str	r3, [r1, #12]
 8001c32:	e006      	b.n	8001c42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	4915      	ldr	r1, [pc, #84]	; (8001c94 <HAL_GPIO_Init+0x2b0>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f47f aed0 	bne.w	80019f8 <HAL_GPIO_Init+0x14>
  }
}
 8001c58:	bf00      	nop
 8001c5a:	372c      	adds	r7, #44	; 0x2c
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	10210000 	.word	0x10210000
 8001c68:	10110000 	.word	0x10110000
 8001c6c:	10120000 	.word	0x10120000
 8001c70:	10310000 	.word	0x10310000
 8001c74:	10320000 	.word	0x10320000
 8001c78:	10220000 	.word	0x10220000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40010800 	.word	0x40010800
 8001c88:	40010c00 	.word	0x40010c00
 8001c8c:	40011000 	.word	0x40011000
 8001c90:	40011400 	.word	0x40011400
 8001c94:	40010400 	.word	0x40010400

08001c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cb4:	e003      	b.n	8001cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cde:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fb28 	bl	800033c <HAL_GPIO_EXTI_Callback>
  }
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e26c      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8087 	beq.w	8001e26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d18:	4b92      	ldr	r3, [pc, #584]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d00c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d24:	4b8f      	ldr	r3, [pc, #572]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d112      	bne.n	8001d56 <HAL_RCC_OscConfig+0x5e>
 8001d30:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d10b      	bne.n	8001d56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3e:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d06c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x12c>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d168      	bne.n	8001e24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e246      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x76>
 8001d60:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a7f      	ldr	r2, [pc, #508]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e02e      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x98>
 8001d76:	4b7b      	ldr	r3, [pc, #492]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b78      	ldr	r3, [pc, #480]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a77      	ldr	r2, [pc, #476]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e01d      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0xbc>
 8001d9a:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a71      	ldr	r2, [pc, #452]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6e      	ldr	r2, [pc, #440]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001db4:	4b6b      	ldr	r3, [pc, #428]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a6a      	ldr	r2, [pc, #424]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a67      	ldr	r2, [pc, #412]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe ff5c 	bl	8000c90 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7fe ff58 	bl	8000c90 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1fa      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe4>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7fe ff48 	bl	8000c90 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7fe ff44 	bl	8000c90 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e1e6      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x10c>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d063      	beq.n	8001efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e32:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e3e:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d11c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x18c>
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d116      	bne.n	8001e84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x176>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e1ba      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	e03a      	b.n	8001efa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e92:	f7fe fefd 	bl	8000c90 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7fe fef9 	bl	8000c90 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e19b      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4927      	ldr	r1, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
 8001ecc:	e015      	b.n	8001efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fedc 	bl	8000c90 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001edc:	f7fe fed8 	bl	8000c90 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e17a      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d03a      	beq.n	8001f7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d019      	beq.n	8001f42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_RCC_OscConfig+0x274>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f14:	f7fe febc 	bl	8000c90 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7fe feb8 	bl	8000c90 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e15a      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f000 fada 	bl	80024f4 <RCC_Delay>
 8001f40:	e01c      	b.n	8001f7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_RCC_OscConfig+0x274>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7fe fea2 	bl	8000c90 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4e:	e00f      	b.n	8001f70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7fe fe9e 	bl	8000c90 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d908      	bls.n	8001f70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e140      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	42420000 	.word	0x42420000
 8001f6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	4b9e      	ldr	r3, [pc, #632]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e9      	bne.n	8001f50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80a6 	beq.w	80020d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	4b97      	ldr	r3, [pc, #604]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b94      	ldr	r3, [pc, #592]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a93      	ldr	r2, [pc, #588]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b91      	ldr	r3, [pc, #580]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b8e      	ldr	r3, [pc, #568]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc2:	4b8b      	ldr	r3, [pc, #556]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a8a      	ldr	r2, [pc, #552]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7fe fe5f 	bl	8000c90 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7fe fe5b 	bl	8000c90 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b64      	cmp	r3, #100	; 0x64
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0fd      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b81      	ldr	r3, [pc, #516]	; (80021f0 <HAL_RCC_OscConfig+0x4f8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x312>
 8001ffc:	4b7b      	ldr	r3, [pc, #492]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a7a      	ldr	r2, [pc, #488]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	e02d      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x334>
 8002012:	4b76      	ldr	r3, [pc, #472]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a75      	ldr	r2, [pc, #468]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6213      	str	r3, [r2, #32]
 800201e:	4b73      	ldr	r3, [pc, #460]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a72      	ldr	r2, [pc, #456]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	e01c      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b05      	cmp	r3, #5
 8002032:	d10c      	bne.n	800204e <HAL_RCC_OscConfig+0x356>
 8002034:	4b6d      	ldr	r3, [pc, #436]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a6c      	ldr	r2, [pc, #432]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6213      	str	r3, [r2, #32]
 8002040:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a69      	ldr	r2, [pc, #420]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0x36e>
 800204e:	4b67      	ldr	r3, [pc, #412]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a66      	ldr	r2, [pc, #408]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6213      	str	r3, [r2, #32]
 800205a:	4b64      	ldr	r3, [pc, #400]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a63      	ldr	r2, [pc, #396]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7fe fe0f 	bl	8000c90 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe fe0b 	bl	8000c90 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0ab      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ee      	beq.n	8002076 <HAL_RCC_OscConfig+0x37e>
 8002098:	e014      	b.n	80020c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209a:	f7fe fdf9 	bl	8000c90 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7fe fdf5 	bl	8000c90 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e095      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1ee      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4b48      	ldr	r3, [pc, #288]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a47      	ldr	r2, [pc, #284]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8081 	beq.w	80021e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e0:	4b42      	ldr	r3, [pc, #264]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d061      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d146      	bne.n	8002182 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f4:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_RCC_OscConfig+0x4fc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7fe fdc9 	bl	8000c90 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7fe fdc5 	bl	8000c90 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e067      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002114:	4b35      	ldr	r3, [pc, #212]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d108      	bne.n	800213c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	492d      	ldr	r1, [pc, #180]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a19      	ldr	r1, [r3, #32]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	430b      	orrs	r3, r1
 800214e:	4927      	ldr	r1, [pc, #156]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x4fc>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7fe fd99 	bl	8000c90 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7fe fd95 	bl	8000c90 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e037      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x46a>
 8002180:	e02f      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_RCC_OscConfig+0x4fc>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe fd82 	bl	8000c90 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe fd7e 	bl	8000c90 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e020      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x498>
 80021ae:	e018      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e013      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_OscConfig+0x4f4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40007000 	.word	0x40007000
 80021f4:	42420060 	.word	0x42420060

080021f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0d0      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d910      	bls.n	800223c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b67      	ldr	r3, [pc, #412]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4965      	ldr	r1, [pc, #404]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b8      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800225e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002276:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	494d      	ldr	r1, [pc, #308]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d040      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d115      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e073      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e06b      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4936      	ldr	r1, [pc, #216]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fcd2 	bl	8000c90 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7fe fcce 	bl	8000c90 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e053      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d210      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 0207 	bic.w	r2, r3, #7
 800232e:	4922      	ldr	r1, [pc, #136]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e032      	b.n	80023ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4916      	ldr	r1, [pc, #88]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002386:	f000 f821 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 800238a:	4601      	mov	r1, r0
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	fa21 f303 	lsr.w	r3, r1, r3
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1cc>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1d0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fc30 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40022000 	.word	0x40022000
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08004ee4 	.word	0x08004ee4
 80023c4:	20000004 	.word	0x20000004
 80023c8:	20000008 	.word	0x20000008

080023cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	b490      	push	{r4, r7}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_RCC_GetSysClockFreq+0xb0>)
 80023d4:	1d3c      	adds	r4, r7, #4
 80023d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023dc:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b04      	cmp	r3, #4
 8002404:	d002      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x40>
 8002406:	2b08      	cmp	r3, #8
 8002408:	d003      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0x46>
 800240a:	e02d      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_RCC_GetSysClockFreq+0xbc>)
 800240e:	623b      	str	r3, [r7, #32]
      break;
 8002410:	e02d      	b.n	800246e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	0c9b      	lsrs	r3, r3, #18
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800241e:	4413      	add	r3, r2
 8002420:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002424:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	0c5b      	lsrs	r3, r3, #17
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800243e:	4413      	add	r3, r2
 8002440:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002444:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_RCC_GetSysClockFreq+0xbc>)
 800244a:	fb02 f203 	mul.w	r2, r2, r3
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	e004      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_RCC_GetSysClockFreq+0xc0>)
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	623b      	str	r3, [r7, #32]
      break;
 8002466:	e002      	b.n	800246e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_RCC_GetSysClockFreq+0xbc>)
 800246a:	623b      	str	r3, [r7, #32]
      break;
 800246c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246e:	6a3b      	ldr	r3, [r7, #32]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bc90      	pop	{r4, r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	08004ebc 	.word	0x08004ebc
 8002480:	08004ecc 	.word	0x08004ecc
 8002484:	40021000 	.word	0x40021000
 8002488:	007a1200 	.word	0x007a1200
 800248c:	003d0900 	.word	0x003d0900

08002490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002494:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	20000004 	.word	0x20000004

080024a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024a8:	f7ff fff2 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024ac:	4601      	mov	r1, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08004ef4 	.word	0x08004ef4

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d0:	f7ff ffde 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024d4:	4601      	mov	r1, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	0adb      	lsrs	r3, r3, #11
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4a03      	ldr	r2, [pc, #12]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	08004ef4 	.word	0x08004ef4

080024f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <RCC_Delay+0x34>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <RCC_Delay+0x38>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	0a5b      	lsrs	r3, r3, #9
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002510:	bf00      	nop
  }
  while (Delay --);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1e5a      	subs	r2, r3, #1
 8002516:	60fa      	str	r2, [r7, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f9      	bne.n	8002510 <RCC_Delay+0x1c>
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000004 	.word	0x20000004
 800252c:	10624dd3 	.word	0x10624dd3

08002530 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d07d      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002550:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10d      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255c:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	4a4b      	ldr	r2, [pc, #300]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002566:	61d3      	str	r3, [r2, #28]
 8002568:	4b49      	ldr	r3, [pc, #292]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002574:	2301      	movs	r3, #1
 8002576:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	4b46      	ldr	r3, [pc, #280]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d118      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002584:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a42      	ldr	r2, [pc, #264]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800258a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002590:	f7fe fb7e 	bl	8000c90 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	e008      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002598:	f7fe fb7a 	bl	8000c90 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e06d      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	4b3a      	ldr	r3, [pc, #232]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025b6:	4b36      	ldr	r3, [pc, #216]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d02e      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d027      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025d4:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025de:	4b2e      	ldr	r3, [pc, #184]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025e4:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025ea:	4a29      	ldr	r2, [pc, #164]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d014      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fb49 	bl	8000c90 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe fb45 	bl	8000c90 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e036      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0ee      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4917      	ldr	r1, [pc, #92]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002632:	4313      	orrs	r3, r2
 8002634:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	4a13      	ldr	r2, [pc, #76]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002646:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	490b      	ldr	r1, [pc, #44]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
 8002698:	42420440 	.word	0x42420440

0800269c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b08d      	sub	sp, #52	; 0x34
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026a4:	4b55      	ldr	r3, [pc, #340]	; (80027fc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80026a6:	f107 040c 	add.w	r4, r7, #12
 80026aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026b0:	4b53      	ldr	r3, [pc, #332]	; (8002800 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	2300      	movs	r3, #0
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	2300      	movs	r3, #0
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d07f      	beq.n	80027d0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d002      	beq.n	80026da <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d048      	beq.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80026d8:	e08b      	b.n	80027f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80026da:	4b4a      	ldr	r3, [pc, #296]	; (8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80026e0:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d07f      	beq.n	80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	0c9b      	lsrs	r3, r3, #18
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80026f8:	4413      	add	r3, r2
 80026fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026fe:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d018      	beq.n	800273c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800270a:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0c5b      	lsrs	r3, r3, #17
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002718:	4413      	add	r3, r2
 800271a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273a:	e004      	b.n	8002746 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	4a33      	ldr	r2, [pc, #204]	; (800280c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002746:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002752:	d102      	bne.n	800275a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002758:	e048      	b.n	80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002760:	fba2 2303 	umull	r2, r3, r2, r3
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002768:	e040      	b.n	80027ec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277a:	d108      	bne.n	800278e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
 800278c:	e01f      	b.n	80027ce <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002798:	d109      	bne.n	80027ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80027a6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ac:	e00f      	b.n	80027ce <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027b8:	d11a      	bne.n	80027f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d014      	beq.n	80027f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80027c6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80027cc:	e010      	b.n	80027f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80027ce:	e00f      	b.n	80027f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80027d0:	f7ff fe7c 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0b9b      	lsrs	r3, r3, #14
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	3301      	adds	r3, #1
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80027ec:	bf00      	nop
 80027ee:	e000      	b.n	80027f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80027f0:	bf00      	nop
    }
  }
  return (frequency);
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3734      	adds	r7, #52	; 0x34
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd90      	pop	{r4, r7, pc}
 80027fc:	08004ed0 	.word	0x08004ed0
 8002800:	08004ee0 	.word	0x08004ee0
 8002804:	40021000 	.word	0x40021000
 8002808:	007a1200 	.word	0x007a1200
 800280c:	003d0900 	.word	0x003d0900
 8002810:	aaaaaaab 	.word	0xaaaaaaab

08002814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e01d      	b.n	8002862 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fd ffea 	bl	8000814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f000 fb3c 	bl	8002ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b06      	cmp	r3, #6
 8002892:	d007      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e01d      	b.n	80028fe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f815 	bl	8002906 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f000 faee 	bl	8002ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2201      	movs	r2, #1
 8002928:	6839      	ldr	r1, [r7, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fd50 	bl	80033d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_TIM_PWM_Start+0x60>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d107      	bne.n	800294a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b06      	cmp	r3, #6
 800295a:	d007      	beq.n	800296c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40012c00 	.word	0x40012c00

0800297c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d122      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b02      	cmp	r3, #2
 800299e:	d11b      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0202 	mvn.w	r2, #2
 80029a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa6a 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa5d 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fa6c 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d122      	bne.n	8002a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0204 	mvn.w	r2, #4
 80029fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa40 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa33 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fa42 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d122      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0208 	mvn.w	r2, #8
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2204      	movs	r2, #4
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa16 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fa09 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fa18 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d122      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0210 	mvn.w	r2, #16
 8002aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f9ec 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f9df 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f9ee 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10e      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0201 	mvn.w	r2, #1
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fd fbf4 	bl	80002e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fcc3 	bl	80034b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f9b2 	bl	8002ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d10e      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d107      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0220 	mvn.w	r2, #32
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fc8e 	bl	80034a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0b4      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	f200 809f 	bhi.w	8002cfc <HAL_TIM_PWM_ConfigChannel+0x170>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bf9 	.word	0x08002bf9
 8002bc8:	08002cfd 	.word	0x08002cfd
 8002bcc:	08002cfd 	.word	0x08002cfd
 8002bd0:	08002cfd 	.word	0x08002cfd
 8002bd4:	08002c39 	.word	0x08002c39
 8002bd8:	08002cfd 	.word	0x08002cfd
 8002bdc:	08002cfd 	.word	0x08002cfd
 8002be0:	08002cfd 	.word	0x08002cfd
 8002be4:	08002c7b 	.word	0x08002c7b
 8002be8:	08002cfd 	.word	0x08002cfd
 8002bec:	08002cfd 	.word	0x08002cfd
 8002bf0:	08002cfd 	.word	0x08002cfd
 8002bf4:	08002cbb 	.word	0x08002cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f9c8 	bl	8002f94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0208 	orr.w	r2, r2, #8
 8002c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0204 	bic.w	r2, r2, #4
 8002c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6999      	ldr	r1, [r3, #24]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	619a      	str	r2, [r3, #24]
      break;
 8002c36:	e062      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fa0e 	bl	8003060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6999      	ldr	r1, [r3, #24]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	021a      	lsls	r2, r3, #8
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]
      break;
 8002c78:	e041      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fa57 	bl	8003134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0208 	orr.w	r2, r2, #8
 8002c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0204 	bic.w	r2, r2, #4
 8002ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	61da      	str	r2, [r3, #28]
      break;
 8002cb8:	e021      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 faa1 	bl	8003208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69d9      	ldr	r1, [r3, #28]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	021a      	lsls	r2, r3, #8
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	61da      	str	r2, [r3, #28]
      break;
 8002cfa:	e000      	b.n	8002cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002cfc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_TIM_ConfigClockSource+0x18>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e0a6      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x166>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d067      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0x120>
 8002d68:	2b40      	cmp	r3, #64	; 0x40
 8002d6a:	d80b      	bhi.n	8002d84 <HAL_TIM_ConfigClockSource+0x6c>
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d073      	beq.n	8002e58 <HAL_TIM_ConfigClockSource+0x140>
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d802      	bhi.n	8002d7a <HAL_TIM_ConfigClockSource+0x62>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d06f      	beq.n	8002e58 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d78:	e078      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d06c      	beq.n	8002e58 <HAL_TIM_ConfigClockSource+0x140>
 8002d7e:	2b30      	cmp	r3, #48	; 0x30
 8002d80:	d06a      	beq.n	8002e58 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d82:	e073      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d84:	2b70      	cmp	r3, #112	; 0x70
 8002d86:	d00d      	beq.n	8002da4 <HAL_TIM_ConfigClockSource+0x8c>
 8002d88:	2b70      	cmp	r3, #112	; 0x70
 8002d8a:	d804      	bhi.n	8002d96 <HAL_TIM_ConfigClockSource+0x7e>
 8002d8c:	2b50      	cmp	r3, #80	; 0x50
 8002d8e:	d033      	beq.n	8002df8 <HAL_TIM_ConfigClockSource+0xe0>
 8002d90:	2b60      	cmp	r3, #96	; 0x60
 8002d92:	d041      	beq.n	8002e18 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d94:	e06a      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9a:	d066      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x152>
 8002d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da0:	d017      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002da2:	e063      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6899      	ldr	r1, [r3, #8]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f000 faed 	bl	8003392 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dc6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]
      break;
 8002dd0:	e04c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6899      	ldr	r1, [r3, #8]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f000 fad6 	bl	8003392 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df4:	609a      	str	r2, [r3, #8]
      break;
 8002df6:	e039      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	461a      	mov	r2, r3
 8002e06:	f000 fa4d 	bl	80032a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2150      	movs	r1, #80	; 0x50
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 faa4 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 8002e16:	e029      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f000 fa6b 	bl	8003300 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2160      	movs	r1, #96	; 0x60
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fa94 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 8002e36:	e019      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	461a      	mov	r2, r3
 8002e46:	f000 fa2d 	bl	80032a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2140      	movs	r1, #64	; 0x40
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fa84 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 8002e56:	e009      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4619      	mov	r1, r3
 8002e62:	4610      	mov	r0, r2
 8002e64:	f000 fa7b 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 8002e68:	e000      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <TIM_Base_SetConfig+0xb8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00b      	beq.n	8002f00 <TIM_Base_SetConfig+0x30>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d007      	beq.n	8002f00 <TIM_Base_SetConfig+0x30>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <TIM_Base_SetConfig+0xbc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <TIM_Base_SetConfig+0x30>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <TIM_Base_SetConfig+0xc0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d108      	bne.n	8002f12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <TIM_Base_SetConfig+0xb8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <TIM_Base_SetConfig+0x62>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d007      	beq.n	8002f32 <TIM_Base_SetConfig+0x62>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a19      	ldr	r2, [pc, #100]	; (8002f8c <TIM_Base_SetConfig+0xbc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d003      	beq.n	8002f32 <TIM_Base_SetConfig+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <TIM_Base_SetConfig+0xc0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d108      	bne.n	8002f44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <TIM_Base_SetConfig+0xb8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d103      	bne.n	8002f78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	615a      	str	r2, [r3, #20]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800

08002f94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0201 	bic.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f023 0302 	bic.w	r3, r3, #2
 8002fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <TIM_OC1_SetConfig+0xc8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d10c      	bne.n	800300a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0308 	bic.w	r3, r3, #8
 8002ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f023 0304 	bic.w	r3, r3, #4
 8003008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a13      	ldr	r2, [pc, #76]	; (800305c <TIM_OC1_SetConfig+0xc8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d111      	bne.n	8003036 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	621a      	str	r2, [r3, #32]
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00

08003060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0210 	bic.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800308e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0320 	bic.w	r3, r3, #32
 80030aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <TIM_OC2_SetConfig+0xd0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d10d      	bne.n	80030dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a14      	ldr	r2, [pc, #80]	; (8003130 <TIM_OC2_SetConfig+0xd0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d113      	bne.n	800310c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	40012c00 	.word	0x40012c00

08003134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800317c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <TIM_OC3_SetConfig+0xd0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d10d      	bne.n	80031ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a14      	ldr	r2, [pc, #80]	; (8003204 <TIM_OC3_SetConfig+0xd0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d113      	bne.n	80031de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	621a      	str	r2, [r3, #32]
}
 80031f8:	bf00      	nop
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40012c00 	.word	0x40012c00

08003208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	031b      	lsls	r3, r3, #12
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <TIM_OC4_SetConfig+0x98>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d109      	bne.n	800327c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800326e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	019b      	lsls	r3, r3, #6
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	621a      	str	r2, [r3, #32]
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f023 0201 	bic.w	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f023 030a 	bic.w	r3, r3, #10
 80032e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	621a      	str	r2, [r3, #32]
}
 80032f6:	bf00      	nop
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f023 0210 	bic.w	r2, r3, #16
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800332a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	031b      	lsls	r3, r3, #12
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800333c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	621a      	str	r2, [r3, #32]
}
 8003354:	bf00      	nop
 8003356:	371c      	adds	r7, #28
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	f043 0307 	orr.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003392:	b480      	push	{r7}
 8003394:	b087      	sub	sp, #28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	021a      	lsls	r2, r3, #8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	609a      	str	r2, [r3, #8]
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2201      	movs	r2, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a1a      	ldr	r2, [r3, #32]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	401a      	ands	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a1a      	ldr	r2, [r3, #32]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	431a      	orrs	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	bf00      	nop
 8003410:	371c      	adds	r7, #28
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800342c:	2302      	movs	r3, #2
 800342e:	e032      	b.n	8003496 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003468:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e03f      	b.n	8003556 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd f9ea 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	; 0x24
 80034f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fb8d 	bl	8003c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b088      	sub	sp, #32
 8003562:	af02      	add	r7, sp, #8
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b20      	cmp	r3, #32
 800357c:	f040 8083 	bne.w	8003686 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_UART_Transmit+0x2e>
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e07b      	b.n	8003688 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_UART_Transmit+0x40>
 800359a:	2302      	movs	r3, #2
 800359c:	e074      	b.n	8003688 <HAL_UART_Transmit+0x12a>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2221      	movs	r2, #33	; 0x21
 80035b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035b4:	f7fd fb6c 	bl	8000c90 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035c6:	e042      	b.n	800364e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035de:	d122      	bne.n	8003626 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2200      	movs	r2, #0
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f9b2 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e046      	b.n	8003688 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800360c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3302      	adds	r3, #2
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	e017      	b.n	800364e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3301      	adds	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	e013      	b.n	800364e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f98f 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e023      	b.n	8003688 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	60ba      	str	r2, [r7, #8]
 8003646:	781a      	ldrb	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1b7      	bne.n	80035c8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2200      	movs	r2, #0
 8003660:	2140      	movs	r1, #64	; 0x40
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f976 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e00a      	b.n	8003688 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d140      	bne.n	800372c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_UART_Receive_IT+0x26>
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e039      	b.n	800372e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_UART_Receive_IT+0x38>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e032      	b.n	800372e <HAL_UART_Receive_IT+0x9e>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2222      	movs	r2, #34	; 0x22
 80036ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003706:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0220 	orr.w	r2, r2, #32
 8003726:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10d      	bne.n	800378a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_UART_IRQHandler+0x52>
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9ce 	bl	8003b24 <UART_Receive_IT>
      return;
 8003788:	e0cc      	b.n	8003924 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80ab 	beq.w	80038e8 <HAL_UART_IRQHandler+0x1b0>
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d105      	bne.n	80037a8 <HAL_UART_IRQHandler+0x70>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80a0 	beq.w	80038e8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_UART_IRQHandler+0x90>
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_UART_IRQHandler+0xb0>
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	f043 0202 	orr.w	r2, r3, #2
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_UART_IRQHandler+0xd0>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	f043 0204 	orr.w	r2, r3, #4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_UART_IRQHandler+0xf0>
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	f043 0208 	orr.w	r2, r3, #8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d078      	beq.n	8003922 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_UART_IRQHandler+0x112>
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f003 0320 	and.w	r3, r3, #32
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f96d 	bl	8003b24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf14      	ite	ne
 8003858:	2301      	movne	r3, #1
 800385a:	2300      	moveq	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <HAL_UART_IRQHandler+0x13a>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d031      	beq.n	80038d6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8b8 	bl	80039e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d023      	beq.n	80038ce <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003894:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	2b00      	cmp	r3, #0
 800389c:	d013      	beq.n	80038c6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	4a22      	ldr	r2, [pc, #136]	; (800392c <HAL_UART_IRQHandler+0x1f4>)
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe f824 	bl	80018f8 <HAL_DMA_Abort_IT>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038c0:	4610      	mov	r0, r2
 80038c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c4:	e00e      	b.n	80038e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f83b 	bl	8003942 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038cc:	e00a      	b.n	80038e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f837 	bl	8003942 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	e006      	b.n	80038e4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f833 	bl	8003942 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80038e2:	e01e      	b.n	8003922 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	bf00      	nop
    return;
 80038e6:	e01c      	b.n	8003922 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_UART_IRQHandler+0x1cc>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f8a4 	bl	8003a4a <UART_Transmit_IT>
    return;
 8003902:	e00f      	b.n	8003924 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_UART_IRQHandler+0x1ec>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8eb 	bl	8003af4 <UART_EndTransmit_IT>
    return;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003922:	bf00      	nop
  }
}
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	08003a23 	.word	0x08003a23

08003930 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003964:	e02c      	b.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d028      	beq.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <UART_WaitOnFlagUntilTimeout+0x30>
 8003974:	f7fd f98c 	bl	8000c90 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	429a      	cmp	r2, r3
 8003982:	d21d      	bcs.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003992:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e00f      	b.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4013      	ands	r3, r2
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d0c3      	beq.n	8003966 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7ff ff80 	bl	8003942 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a42:	bf00      	nop
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b21      	cmp	r3, #33	; 0x21
 8003a5c:	d144      	bne.n	8003ae8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a66:	d11a      	bne.n	8003a9e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a7c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d105      	bne.n	8003a92 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	1c9a      	adds	r2, r3, #2
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	621a      	str	r2, [r3, #32]
 8003a90:	e00e      	b.n	8003ab0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	621a      	str	r2, [r3, #32]
 8003a9c:	e008      	b.n	8003ab0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	1c59      	adds	r1, r3, #1
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6211      	str	r1, [r2, #32]
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4619      	mov	r1, r3
 8003abe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10f      	bne.n	8003ae4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ad2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e000      	b.n	8003aea <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff0b 	bl	8003930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b22      	cmp	r3, #34	; 0x22
 8003b36:	d171      	bne.n	8003c1c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b40:	d123      	bne.n	8003b8a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10e      	bne.n	8003b6e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	1c9a      	adds	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b6c:	e029      	b.n	8003bc2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
 8003b88:	e01b      	b.n	8003bc2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6858      	ldr	r0, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	1c59      	adds	r1, r3, #1
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6291      	str	r1, [r2, #40]	; 0x28
 8003ba2:	b2c2      	uxtb	r2, r0
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e00c      	b.n	8003bc2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	1c58      	adds	r0, r3, #1
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	6288      	str	r0, [r1, #40]	; 0x28
 8003bba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d120      	bne.n	8003c18 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0220 	bic.w	r2, r2, #32
 8003be4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fc fb32 	bl	8000278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e002      	b.n	8003c1e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e000      	b.n	8003c1e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c62:	f023 030c 	bic.w	r3, r3, #12
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a52      	ldr	r2, [pc, #328]	; (8003dd4 <UART_SetConfig+0x1ac>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d14e      	bne.n	8003d2e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c90:	f7fe fc1c 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8003c94:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009a      	lsls	r2, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cac:	4a4a      	ldr	r2, [pc, #296]	; (8003dd8 <UART_SetConfig+0x1b0>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	0119      	lsls	r1, r3, #4
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009a      	lsls	r2, r3, #2
 8003cc0:	441a      	add	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ccc:	4b42      	ldr	r3, [pc, #264]	; (8003dd8 <UART_SetConfig+0x1b0>)
 8003cce:	fba3 0302 	umull	r0, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2064      	movs	r0, #100	; 0x64
 8003cd6:	fb00 f303 	mul.w	r3, r0, r3
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	3332      	adds	r3, #50	; 0x32
 8003ce0:	4a3d      	ldr	r2, [pc, #244]	; (8003dd8 <UART_SetConfig+0x1b0>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cec:	4419      	add	r1, r3
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009a      	lsls	r2, r3, #2
 8003cf8:	441a      	add	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d04:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <UART_SetConfig+0x1b0>)
 8003d06:	fba3 0302 	umull	r0, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2064      	movs	r0, #100	; 0x64
 8003d0e:	fb00 f303 	mul.w	r3, r0, r3
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	3332      	adds	r3, #50	; 0x32
 8003d18:	4a2f      	ldr	r2, [pc, #188]	; (8003dd8 <UART_SetConfig+0x1b0>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	f003 020f 	and.w	r2, r3, #15
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	440a      	add	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003d2c:	e04d      	b.n	8003dca <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d2e:	f7fe fbb9 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 8003d32:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009a      	lsls	r2, r3, #2
 8003d3e:	441a      	add	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4a:	4a23      	ldr	r2, [pc, #140]	; (8003dd8 <UART_SetConfig+0x1b0>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	0119      	lsls	r1, r3, #4
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009a      	lsls	r2, r3, #2
 8003d5e:	441a      	add	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <UART_SetConfig+0x1b0>)
 8003d6c:	fba3 0302 	umull	r0, r3, r3, r2
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	2064      	movs	r0, #100	; 0x64
 8003d74:	fb00 f303 	mul.w	r3, r0, r3
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	3332      	adds	r3, #50	; 0x32
 8003d7e:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <UART_SetConfig+0x1b0>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d8a:	4419      	add	r1, r3
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009a      	lsls	r2, r3, #2
 8003d96:	441a      	add	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <UART_SetConfig+0x1b0>)
 8003da4:	fba3 0302 	umull	r0, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	2064      	movs	r0, #100	; 0x64
 8003dac:	fb00 f303 	mul.w	r3, r0, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	3332      	adds	r3, #50	; 0x32
 8003db6:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <UART_SetConfig+0x1b0>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	f003 020f 	and.w	r2, r3, #15
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	609a      	str	r2, [r3, #8]
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40013800 	.word	0x40013800
 8003dd8:	51eb851f 	.word	0x51eb851f

08003ddc <__errno>:
 8003ddc:	4b01      	ldr	r3, [pc, #4]	; (8003de4 <__errno+0x8>)
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000010 	.word	0x20000010

08003de8 <__libc_init_array>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	2500      	movs	r5, #0
 8003dec:	4e0c      	ldr	r6, [pc, #48]	; (8003e20 <__libc_init_array+0x38>)
 8003dee:	4c0d      	ldr	r4, [pc, #52]	; (8003e24 <__libc_init_array+0x3c>)
 8003df0:	1ba4      	subs	r4, r4, r6
 8003df2:	10a4      	asrs	r4, r4, #2
 8003df4:	42a5      	cmp	r5, r4
 8003df6:	d109      	bne.n	8003e0c <__libc_init_array+0x24>
 8003df8:	f001 f82a 	bl	8004e50 <_init>
 8003dfc:	2500      	movs	r5, #0
 8003dfe:	4e0a      	ldr	r6, [pc, #40]	; (8003e28 <__libc_init_array+0x40>)
 8003e00:	4c0a      	ldr	r4, [pc, #40]	; (8003e2c <__libc_init_array+0x44>)
 8003e02:	1ba4      	subs	r4, r4, r6
 8003e04:	10a4      	asrs	r4, r4, #2
 8003e06:	42a5      	cmp	r5, r4
 8003e08:	d105      	bne.n	8003e16 <__libc_init_array+0x2e>
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e10:	4798      	blx	r3
 8003e12:	3501      	adds	r5, #1
 8003e14:	e7ee      	b.n	8003df4 <__libc_init_array+0xc>
 8003e16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e1a:	4798      	blx	r3
 8003e1c:	3501      	adds	r5, #1
 8003e1e:	e7f2      	b.n	8003e06 <__libc_init_array+0x1e>
 8003e20:	08004f94 	.word	0x08004f94
 8003e24:	08004f94 	.word	0x08004f94
 8003e28:	08004f94 	.word	0x08004f94
 8003e2c:	08004f98 	.word	0x08004f98

08003e30 <memset>:
 8003e30:	4603      	mov	r3, r0
 8003e32:	4402      	add	r2, r0
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d100      	bne.n	8003e3a <memset+0xa>
 8003e38:	4770      	bx	lr
 8003e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3e:	e7f9      	b.n	8003e34 <memset+0x4>

08003e40 <iprintf>:
 8003e40:	b40f      	push	{r0, r1, r2, r3}
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <iprintf+0x2c>)
 8003e44:	b513      	push	{r0, r1, r4, lr}
 8003e46:	681c      	ldr	r4, [r3, #0]
 8003e48:	b124      	cbz	r4, 8003e54 <iprintf+0x14>
 8003e4a:	69a3      	ldr	r3, [r4, #24]
 8003e4c:	b913      	cbnz	r3, 8003e54 <iprintf+0x14>
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f000 fad0 	bl	80043f4 <__sinit>
 8003e54:	ab05      	add	r3, sp, #20
 8003e56:	9a04      	ldr	r2, [sp, #16]
 8003e58:	68a1      	ldr	r1, [r4, #8]
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	f000 fc8d 	bl	800477c <_vfiprintf_r>
 8003e62:	b002      	add	sp, #8
 8003e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e68:	b004      	add	sp, #16
 8003e6a:	4770      	bx	lr
 8003e6c:	20000010 	.word	0x20000010

08003e70 <_puts_r>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	460e      	mov	r6, r1
 8003e74:	4605      	mov	r5, r0
 8003e76:	b118      	cbz	r0, 8003e80 <_puts_r+0x10>
 8003e78:	6983      	ldr	r3, [r0, #24]
 8003e7a:	b90b      	cbnz	r3, 8003e80 <_puts_r+0x10>
 8003e7c:	f000 faba 	bl	80043f4 <__sinit>
 8003e80:	69ab      	ldr	r3, [r5, #24]
 8003e82:	68ac      	ldr	r4, [r5, #8]
 8003e84:	b913      	cbnz	r3, 8003e8c <_puts_r+0x1c>
 8003e86:	4628      	mov	r0, r5
 8003e88:	f000 fab4 	bl	80043f4 <__sinit>
 8003e8c:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <_puts_r+0xac>)
 8003e8e:	429c      	cmp	r4, r3
 8003e90:	d117      	bne.n	8003ec2 <_puts_r+0x52>
 8003e92:	686c      	ldr	r4, [r5, #4]
 8003e94:	89a3      	ldrh	r3, [r4, #12]
 8003e96:	071b      	lsls	r3, r3, #28
 8003e98:	d51d      	bpl.n	8003ed6 <_puts_r+0x66>
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	b1db      	cbz	r3, 8003ed6 <_puts_r+0x66>
 8003e9e:	3e01      	subs	r6, #1
 8003ea0:	68a3      	ldr	r3, [r4, #8]
 8003ea2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	60a3      	str	r3, [r4, #8]
 8003eaa:	b9e9      	cbnz	r1, 8003ee8 <_puts_r+0x78>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	da2e      	bge.n	8003f0e <_puts_r+0x9e>
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	210a      	movs	r1, #10
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f000 f8ed 	bl	8004094 <__swbuf_r>
 8003eba:	3001      	adds	r0, #1
 8003ebc:	d011      	beq.n	8003ee2 <_puts_r+0x72>
 8003ebe:	200a      	movs	r0, #10
 8003ec0:	e011      	b.n	8003ee6 <_puts_r+0x76>
 8003ec2:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <_puts_r+0xb0>)
 8003ec4:	429c      	cmp	r4, r3
 8003ec6:	d101      	bne.n	8003ecc <_puts_r+0x5c>
 8003ec8:	68ac      	ldr	r4, [r5, #8]
 8003eca:	e7e3      	b.n	8003e94 <_puts_r+0x24>
 8003ecc:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <_puts_r+0xb4>)
 8003ece:	429c      	cmp	r4, r3
 8003ed0:	bf08      	it	eq
 8003ed2:	68ec      	ldreq	r4, [r5, #12]
 8003ed4:	e7de      	b.n	8003e94 <_puts_r+0x24>
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f000 f92d 	bl	8004138 <__swsetup_r>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d0dd      	beq.n	8003e9e <_puts_r+0x2e>
 8003ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	da04      	bge.n	8003ef6 <_puts_r+0x86>
 8003eec:	69a2      	ldr	r2, [r4, #24]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	dc06      	bgt.n	8003f00 <_puts_r+0x90>
 8003ef2:	290a      	cmp	r1, #10
 8003ef4:	d004      	beq.n	8003f00 <_puts_r+0x90>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	6022      	str	r2, [r4, #0]
 8003efc:	7019      	strb	r1, [r3, #0]
 8003efe:	e7cf      	b.n	8003ea0 <_puts_r+0x30>
 8003f00:	4622      	mov	r2, r4
 8003f02:	4628      	mov	r0, r5
 8003f04:	f000 f8c6 	bl	8004094 <__swbuf_r>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d1c9      	bne.n	8003ea0 <_puts_r+0x30>
 8003f0c:	e7e9      	b.n	8003ee2 <_puts_r+0x72>
 8003f0e:	200a      	movs	r0, #10
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	6022      	str	r2, [r4, #0]
 8003f16:	7018      	strb	r0, [r3, #0]
 8003f18:	e7e5      	b.n	8003ee6 <_puts_r+0x76>
 8003f1a:	bf00      	nop
 8003f1c:	08004f20 	.word	0x08004f20
 8003f20:	08004f40 	.word	0x08004f40
 8003f24:	08004f00 	.word	0x08004f00

08003f28 <puts>:
 8003f28:	4b02      	ldr	r3, [pc, #8]	; (8003f34 <puts+0xc>)
 8003f2a:	4601      	mov	r1, r0
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	f7ff bf9f 	b.w	8003e70 <_puts_r>
 8003f32:	bf00      	nop
 8003f34:	20000010 	.word	0x20000010

08003f38 <setvbuf>:
 8003f38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003f3c:	461d      	mov	r5, r3
 8003f3e:	4b51      	ldr	r3, [pc, #324]	; (8004084 <setvbuf+0x14c>)
 8003f40:	4604      	mov	r4, r0
 8003f42:	681e      	ldr	r6, [r3, #0]
 8003f44:	460f      	mov	r7, r1
 8003f46:	4690      	mov	r8, r2
 8003f48:	b126      	cbz	r6, 8003f54 <setvbuf+0x1c>
 8003f4a:	69b3      	ldr	r3, [r6, #24]
 8003f4c:	b913      	cbnz	r3, 8003f54 <setvbuf+0x1c>
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f000 fa50 	bl	80043f4 <__sinit>
 8003f54:	4b4c      	ldr	r3, [pc, #304]	; (8004088 <setvbuf+0x150>)
 8003f56:	429c      	cmp	r4, r3
 8003f58:	d152      	bne.n	8004000 <setvbuf+0xc8>
 8003f5a:	6874      	ldr	r4, [r6, #4]
 8003f5c:	f1b8 0f02 	cmp.w	r8, #2
 8003f60:	d006      	beq.n	8003f70 <setvbuf+0x38>
 8003f62:	f1b8 0f01 	cmp.w	r8, #1
 8003f66:	f200 8089 	bhi.w	800407c <setvbuf+0x144>
 8003f6a:	2d00      	cmp	r5, #0
 8003f6c:	f2c0 8086 	blt.w	800407c <setvbuf+0x144>
 8003f70:	4621      	mov	r1, r4
 8003f72:	4630      	mov	r0, r6
 8003f74:	f000 f9d4 	bl	8004320 <_fflush_r>
 8003f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f7a:	b141      	cbz	r1, 8003f8e <setvbuf+0x56>
 8003f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f80:	4299      	cmp	r1, r3
 8003f82:	d002      	beq.n	8003f8a <setvbuf+0x52>
 8003f84:	4630      	mov	r0, r6
 8003f86:	f000 fb2b 	bl	80045e0 <_free_r>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61a3      	str	r3, [r4, #24]
 8003f92:	6063      	str	r3, [r4, #4]
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	061b      	lsls	r3, r3, #24
 8003f98:	d503      	bpl.n	8003fa2 <setvbuf+0x6a>
 8003f9a:	6921      	ldr	r1, [r4, #16]
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	f000 fb1f 	bl	80045e0 <_free_r>
 8003fa2:	89a3      	ldrh	r3, [r4, #12]
 8003fa4:	f1b8 0f02 	cmp.w	r8, #2
 8003fa8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003fac:	f023 0303 	bic.w	r3, r3, #3
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	d05d      	beq.n	8004070 <setvbuf+0x138>
 8003fb4:	ab01      	add	r3, sp, #4
 8003fb6:	466a      	mov	r2, sp
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4630      	mov	r0, r6
 8003fbc:	f000 faa4 	bl	8004508 <__swhatbuf_r>
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	4318      	orrs	r0, r3
 8003fc4:	81a0      	strh	r0, [r4, #12]
 8003fc6:	bb2d      	cbnz	r5, 8004014 <setvbuf+0xdc>
 8003fc8:	9d00      	ldr	r5, [sp, #0]
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f000 fb00 	bl	80045d0 <malloc>
 8003fd0:	4607      	mov	r7, r0
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d14e      	bne.n	8004074 <setvbuf+0x13c>
 8003fd6:	f8dd 9000 	ldr.w	r9, [sp]
 8003fda:	45a9      	cmp	r9, r5
 8003fdc:	d13c      	bne.n	8004058 <setvbuf+0x120>
 8003fde:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	2300      	movs	r3, #0
 8003fec:	60a3      	str	r3, [r4, #8]
 8003fee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	6123      	str	r3, [r4, #16]
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	6163      	str	r3, [r4, #20]
 8003ffa:	b003      	add	sp, #12
 8003ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004000:	4b22      	ldr	r3, [pc, #136]	; (800408c <setvbuf+0x154>)
 8004002:	429c      	cmp	r4, r3
 8004004:	d101      	bne.n	800400a <setvbuf+0xd2>
 8004006:	68b4      	ldr	r4, [r6, #8]
 8004008:	e7a8      	b.n	8003f5c <setvbuf+0x24>
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <setvbuf+0x158>)
 800400c:	429c      	cmp	r4, r3
 800400e:	bf08      	it	eq
 8004010:	68f4      	ldreq	r4, [r6, #12]
 8004012:	e7a3      	b.n	8003f5c <setvbuf+0x24>
 8004014:	2f00      	cmp	r7, #0
 8004016:	d0d8      	beq.n	8003fca <setvbuf+0x92>
 8004018:	69b3      	ldr	r3, [r6, #24]
 800401a:	b913      	cbnz	r3, 8004022 <setvbuf+0xea>
 800401c:	4630      	mov	r0, r6
 800401e:	f000 f9e9 	bl	80043f4 <__sinit>
 8004022:	f1b8 0f01 	cmp.w	r8, #1
 8004026:	bf08      	it	eq
 8004028:	89a3      	ldrheq	r3, [r4, #12]
 800402a:	6027      	str	r7, [r4, #0]
 800402c:	bf04      	itt	eq
 800402e:	f043 0301 	orreq.w	r3, r3, #1
 8004032:	81a3      	strheq	r3, [r4, #12]
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800403a:	f013 0008 	ands.w	r0, r3, #8
 800403e:	d01b      	beq.n	8004078 <setvbuf+0x140>
 8004040:	f013 0001 	ands.w	r0, r3, #1
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	bf1f      	itttt	ne
 800404a:	426d      	negne	r5, r5
 800404c:	60a3      	strne	r3, [r4, #8]
 800404e:	61a5      	strne	r5, [r4, #24]
 8004050:	4618      	movne	r0, r3
 8004052:	bf08      	it	eq
 8004054:	60a5      	streq	r5, [r4, #8]
 8004056:	e7d0      	b.n	8003ffa <setvbuf+0xc2>
 8004058:	4648      	mov	r0, r9
 800405a:	f000 fab9 	bl	80045d0 <malloc>
 800405e:	4607      	mov	r7, r0
 8004060:	2800      	cmp	r0, #0
 8004062:	d0bc      	beq.n	8003fde <setvbuf+0xa6>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	464d      	mov	r5, r9
 8004068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406c:	81a3      	strh	r3, [r4, #12]
 800406e:	e7d3      	b.n	8004018 <setvbuf+0xe0>
 8004070:	2000      	movs	r0, #0
 8004072:	e7b6      	b.n	8003fe2 <setvbuf+0xaa>
 8004074:	46a9      	mov	r9, r5
 8004076:	e7f5      	b.n	8004064 <setvbuf+0x12c>
 8004078:	60a0      	str	r0, [r4, #8]
 800407a:	e7be      	b.n	8003ffa <setvbuf+0xc2>
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	e7bb      	b.n	8003ffa <setvbuf+0xc2>
 8004082:	bf00      	nop
 8004084:	20000010 	.word	0x20000010
 8004088:	08004f20 	.word	0x08004f20
 800408c:	08004f40 	.word	0x08004f40
 8004090:	08004f00 	.word	0x08004f00

08004094 <__swbuf_r>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	460e      	mov	r6, r1
 8004098:	4614      	mov	r4, r2
 800409a:	4605      	mov	r5, r0
 800409c:	b118      	cbz	r0, 80040a6 <__swbuf_r+0x12>
 800409e:	6983      	ldr	r3, [r0, #24]
 80040a0:	b90b      	cbnz	r3, 80040a6 <__swbuf_r+0x12>
 80040a2:	f000 f9a7 	bl	80043f4 <__sinit>
 80040a6:	4b21      	ldr	r3, [pc, #132]	; (800412c <__swbuf_r+0x98>)
 80040a8:	429c      	cmp	r4, r3
 80040aa:	d12a      	bne.n	8004102 <__swbuf_r+0x6e>
 80040ac:	686c      	ldr	r4, [r5, #4]
 80040ae:	69a3      	ldr	r3, [r4, #24]
 80040b0:	60a3      	str	r3, [r4, #8]
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	071a      	lsls	r2, r3, #28
 80040b6:	d52e      	bpl.n	8004116 <__swbuf_r+0x82>
 80040b8:	6923      	ldr	r3, [r4, #16]
 80040ba:	b363      	cbz	r3, 8004116 <__swbuf_r+0x82>
 80040bc:	6923      	ldr	r3, [r4, #16]
 80040be:	6820      	ldr	r0, [r4, #0]
 80040c0:	b2f6      	uxtb	r6, r6
 80040c2:	1ac0      	subs	r0, r0, r3
 80040c4:	6963      	ldr	r3, [r4, #20]
 80040c6:	4637      	mov	r7, r6
 80040c8:	4283      	cmp	r3, r0
 80040ca:	dc04      	bgt.n	80040d6 <__swbuf_r+0x42>
 80040cc:	4621      	mov	r1, r4
 80040ce:	4628      	mov	r0, r5
 80040d0:	f000 f926 	bl	8004320 <_fflush_r>
 80040d4:	bb28      	cbnz	r0, 8004122 <__swbuf_r+0x8e>
 80040d6:	68a3      	ldr	r3, [r4, #8]
 80040d8:	3001      	adds	r0, #1
 80040da:	3b01      	subs	r3, #1
 80040dc:	60a3      	str	r3, [r4, #8]
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	6022      	str	r2, [r4, #0]
 80040e4:	701e      	strb	r6, [r3, #0]
 80040e6:	6963      	ldr	r3, [r4, #20]
 80040e8:	4283      	cmp	r3, r0
 80040ea:	d004      	beq.n	80040f6 <__swbuf_r+0x62>
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	07db      	lsls	r3, r3, #31
 80040f0:	d519      	bpl.n	8004126 <__swbuf_r+0x92>
 80040f2:	2e0a      	cmp	r6, #10
 80040f4:	d117      	bne.n	8004126 <__swbuf_r+0x92>
 80040f6:	4621      	mov	r1, r4
 80040f8:	4628      	mov	r0, r5
 80040fa:	f000 f911 	bl	8004320 <_fflush_r>
 80040fe:	b190      	cbz	r0, 8004126 <__swbuf_r+0x92>
 8004100:	e00f      	b.n	8004122 <__swbuf_r+0x8e>
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <__swbuf_r+0x9c>)
 8004104:	429c      	cmp	r4, r3
 8004106:	d101      	bne.n	800410c <__swbuf_r+0x78>
 8004108:	68ac      	ldr	r4, [r5, #8]
 800410a:	e7d0      	b.n	80040ae <__swbuf_r+0x1a>
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <__swbuf_r+0xa0>)
 800410e:	429c      	cmp	r4, r3
 8004110:	bf08      	it	eq
 8004112:	68ec      	ldreq	r4, [r5, #12]
 8004114:	e7cb      	b.n	80040ae <__swbuf_r+0x1a>
 8004116:	4621      	mov	r1, r4
 8004118:	4628      	mov	r0, r5
 800411a:	f000 f80d 	bl	8004138 <__swsetup_r>
 800411e:	2800      	cmp	r0, #0
 8004120:	d0cc      	beq.n	80040bc <__swbuf_r+0x28>
 8004122:	f04f 37ff 	mov.w	r7, #4294967295
 8004126:	4638      	mov	r0, r7
 8004128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800412a:	bf00      	nop
 800412c:	08004f20 	.word	0x08004f20
 8004130:	08004f40 	.word	0x08004f40
 8004134:	08004f00 	.word	0x08004f00

08004138 <__swsetup_r>:
 8004138:	4b32      	ldr	r3, [pc, #200]	; (8004204 <__swsetup_r+0xcc>)
 800413a:	b570      	push	{r4, r5, r6, lr}
 800413c:	681d      	ldr	r5, [r3, #0]
 800413e:	4606      	mov	r6, r0
 8004140:	460c      	mov	r4, r1
 8004142:	b125      	cbz	r5, 800414e <__swsetup_r+0x16>
 8004144:	69ab      	ldr	r3, [r5, #24]
 8004146:	b913      	cbnz	r3, 800414e <__swsetup_r+0x16>
 8004148:	4628      	mov	r0, r5
 800414a:	f000 f953 	bl	80043f4 <__sinit>
 800414e:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <__swsetup_r+0xd0>)
 8004150:	429c      	cmp	r4, r3
 8004152:	d10f      	bne.n	8004174 <__swsetup_r+0x3c>
 8004154:	686c      	ldr	r4, [r5, #4]
 8004156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800415a:	b29a      	uxth	r2, r3
 800415c:	0715      	lsls	r5, r2, #28
 800415e:	d42c      	bmi.n	80041ba <__swsetup_r+0x82>
 8004160:	06d0      	lsls	r0, r2, #27
 8004162:	d411      	bmi.n	8004188 <__swsetup_r+0x50>
 8004164:	2209      	movs	r2, #9
 8004166:	6032      	str	r2, [r6, #0]
 8004168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800416c:	81a3      	strh	r3, [r4, #12]
 800416e:	f04f 30ff 	mov.w	r0, #4294967295
 8004172:	e03e      	b.n	80041f2 <__swsetup_r+0xba>
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <__swsetup_r+0xd4>)
 8004176:	429c      	cmp	r4, r3
 8004178:	d101      	bne.n	800417e <__swsetup_r+0x46>
 800417a:	68ac      	ldr	r4, [r5, #8]
 800417c:	e7eb      	b.n	8004156 <__swsetup_r+0x1e>
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <__swsetup_r+0xd8>)
 8004180:	429c      	cmp	r4, r3
 8004182:	bf08      	it	eq
 8004184:	68ec      	ldreq	r4, [r5, #12]
 8004186:	e7e6      	b.n	8004156 <__swsetup_r+0x1e>
 8004188:	0751      	lsls	r1, r2, #29
 800418a:	d512      	bpl.n	80041b2 <__swsetup_r+0x7a>
 800418c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800418e:	b141      	cbz	r1, 80041a2 <__swsetup_r+0x6a>
 8004190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004194:	4299      	cmp	r1, r3
 8004196:	d002      	beq.n	800419e <__swsetup_r+0x66>
 8004198:	4630      	mov	r0, r6
 800419a:	f000 fa21 	bl	80045e0 <_free_r>
 800419e:	2300      	movs	r3, #0
 80041a0:	6363      	str	r3, [r4, #52]	; 0x34
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041a8:	81a3      	strh	r3, [r4, #12]
 80041aa:	2300      	movs	r3, #0
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	f043 0308 	orr.w	r3, r3, #8
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	b94b      	cbnz	r3, 80041d2 <__swsetup_r+0x9a>
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c8:	d003      	beq.n	80041d2 <__swsetup_r+0x9a>
 80041ca:	4621      	mov	r1, r4
 80041cc:	4630      	mov	r0, r6
 80041ce:	f000 f9bf 	bl	8004550 <__smakebuf_r>
 80041d2:	89a2      	ldrh	r2, [r4, #12]
 80041d4:	f012 0301 	ands.w	r3, r2, #1
 80041d8:	d00c      	beq.n	80041f4 <__swsetup_r+0xbc>
 80041da:	2300      	movs	r3, #0
 80041dc:	60a3      	str	r3, [r4, #8]
 80041de:	6963      	ldr	r3, [r4, #20]
 80041e0:	425b      	negs	r3, r3
 80041e2:	61a3      	str	r3, [r4, #24]
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	b953      	cbnz	r3, 80041fe <__swsetup_r+0xc6>
 80041e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80041f0:	d1ba      	bne.n	8004168 <__swsetup_r+0x30>
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	0792      	lsls	r2, r2, #30
 80041f6:	bf58      	it	pl
 80041f8:	6963      	ldrpl	r3, [r4, #20]
 80041fa:	60a3      	str	r3, [r4, #8]
 80041fc:	e7f2      	b.n	80041e4 <__swsetup_r+0xac>
 80041fe:	2000      	movs	r0, #0
 8004200:	e7f7      	b.n	80041f2 <__swsetup_r+0xba>
 8004202:	bf00      	nop
 8004204:	20000010 	.word	0x20000010
 8004208:	08004f20 	.word	0x08004f20
 800420c:	08004f40 	.word	0x08004f40
 8004210:	08004f00 	.word	0x08004f00

08004214 <__sflush_r>:
 8004214:	898a      	ldrh	r2, [r1, #12]
 8004216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800421a:	4605      	mov	r5, r0
 800421c:	0710      	lsls	r0, r2, #28
 800421e:	460c      	mov	r4, r1
 8004220:	d458      	bmi.n	80042d4 <__sflush_r+0xc0>
 8004222:	684b      	ldr	r3, [r1, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	dc05      	bgt.n	8004234 <__sflush_r+0x20>
 8004228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	dc02      	bgt.n	8004234 <__sflush_r+0x20>
 800422e:	2000      	movs	r0, #0
 8004230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004236:	2e00      	cmp	r6, #0
 8004238:	d0f9      	beq.n	800422e <__sflush_r+0x1a>
 800423a:	2300      	movs	r3, #0
 800423c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004240:	682f      	ldr	r7, [r5, #0]
 8004242:	6a21      	ldr	r1, [r4, #32]
 8004244:	602b      	str	r3, [r5, #0]
 8004246:	d032      	beq.n	80042ae <__sflush_r+0x9a>
 8004248:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800424a:	89a3      	ldrh	r3, [r4, #12]
 800424c:	075a      	lsls	r2, r3, #29
 800424e:	d505      	bpl.n	800425c <__sflush_r+0x48>
 8004250:	6863      	ldr	r3, [r4, #4]
 8004252:	1ac0      	subs	r0, r0, r3
 8004254:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004256:	b10b      	cbz	r3, 800425c <__sflush_r+0x48>
 8004258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800425a:	1ac0      	subs	r0, r0, r3
 800425c:	2300      	movs	r3, #0
 800425e:	4602      	mov	r2, r0
 8004260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004262:	6a21      	ldr	r1, [r4, #32]
 8004264:	4628      	mov	r0, r5
 8004266:	47b0      	blx	r6
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	d106      	bne.n	800427c <__sflush_r+0x68>
 800426e:	6829      	ldr	r1, [r5, #0]
 8004270:	291d      	cmp	r1, #29
 8004272:	d848      	bhi.n	8004306 <__sflush_r+0xf2>
 8004274:	4a29      	ldr	r2, [pc, #164]	; (800431c <__sflush_r+0x108>)
 8004276:	40ca      	lsrs	r2, r1
 8004278:	07d6      	lsls	r6, r2, #31
 800427a:	d544      	bpl.n	8004306 <__sflush_r+0xf2>
 800427c:	2200      	movs	r2, #0
 800427e:	6062      	str	r2, [r4, #4]
 8004280:	6922      	ldr	r2, [r4, #16]
 8004282:	04d9      	lsls	r1, r3, #19
 8004284:	6022      	str	r2, [r4, #0]
 8004286:	d504      	bpl.n	8004292 <__sflush_r+0x7e>
 8004288:	1c42      	adds	r2, r0, #1
 800428a:	d101      	bne.n	8004290 <__sflush_r+0x7c>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	b903      	cbnz	r3, 8004292 <__sflush_r+0x7e>
 8004290:	6560      	str	r0, [r4, #84]	; 0x54
 8004292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004294:	602f      	str	r7, [r5, #0]
 8004296:	2900      	cmp	r1, #0
 8004298:	d0c9      	beq.n	800422e <__sflush_r+0x1a>
 800429a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800429e:	4299      	cmp	r1, r3
 80042a0:	d002      	beq.n	80042a8 <__sflush_r+0x94>
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 f99c 	bl	80045e0 <_free_r>
 80042a8:	2000      	movs	r0, #0
 80042aa:	6360      	str	r0, [r4, #52]	; 0x34
 80042ac:	e7c0      	b.n	8004230 <__sflush_r+0x1c>
 80042ae:	2301      	movs	r3, #1
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b0      	blx	r6
 80042b4:	1c41      	adds	r1, r0, #1
 80042b6:	d1c8      	bne.n	800424a <__sflush_r+0x36>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0c5      	beq.n	800424a <__sflush_r+0x36>
 80042be:	2b1d      	cmp	r3, #29
 80042c0:	d001      	beq.n	80042c6 <__sflush_r+0xb2>
 80042c2:	2b16      	cmp	r3, #22
 80042c4:	d101      	bne.n	80042ca <__sflush_r+0xb6>
 80042c6:	602f      	str	r7, [r5, #0]
 80042c8:	e7b1      	b.n	800422e <__sflush_r+0x1a>
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	e7ad      	b.n	8004230 <__sflush_r+0x1c>
 80042d4:	690f      	ldr	r7, [r1, #16]
 80042d6:	2f00      	cmp	r7, #0
 80042d8:	d0a9      	beq.n	800422e <__sflush_r+0x1a>
 80042da:	0793      	lsls	r3, r2, #30
 80042dc:	bf18      	it	ne
 80042de:	2300      	movne	r3, #0
 80042e0:	680e      	ldr	r6, [r1, #0]
 80042e2:	bf08      	it	eq
 80042e4:	694b      	ldreq	r3, [r1, #20]
 80042e6:	eba6 0807 	sub.w	r8, r6, r7
 80042ea:	600f      	str	r7, [r1, #0]
 80042ec:	608b      	str	r3, [r1, #8]
 80042ee:	f1b8 0f00 	cmp.w	r8, #0
 80042f2:	dd9c      	ble.n	800422e <__sflush_r+0x1a>
 80042f4:	4643      	mov	r3, r8
 80042f6:	463a      	mov	r2, r7
 80042f8:	6a21      	ldr	r1, [r4, #32]
 80042fa:	4628      	mov	r0, r5
 80042fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042fe:	47b0      	blx	r6
 8004300:	2800      	cmp	r0, #0
 8004302:	dc06      	bgt.n	8004312 <__sflush_r+0xfe>
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	e78e      	b.n	8004230 <__sflush_r+0x1c>
 8004312:	4407      	add	r7, r0
 8004314:	eba8 0800 	sub.w	r8, r8, r0
 8004318:	e7e9      	b.n	80042ee <__sflush_r+0xda>
 800431a:	bf00      	nop
 800431c:	20400001 	.word	0x20400001

08004320 <_fflush_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	690b      	ldr	r3, [r1, #16]
 8004324:	4605      	mov	r5, r0
 8004326:	460c      	mov	r4, r1
 8004328:	b1db      	cbz	r3, 8004362 <_fflush_r+0x42>
 800432a:	b118      	cbz	r0, 8004334 <_fflush_r+0x14>
 800432c:	6983      	ldr	r3, [r0, #24]
 800432e:	b90b      	cbnz	r3, 8004334 <_fflush_r+0x14>
 8004330:	f000 f860 	bl	80043f4 <__sinit>
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <_fflush_r+0x48>)
 8004336:	429c      	cmp	r4, r3
 8004338:	d109      	bne.n	800434e <_fflush_r+0x2e>
 800433a:	686c      	ldr	r4, [r5, #4]
 800433c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004340:	b17b      	cbz	r3, 8004362 <_fflush_r+0x42>
 8004342:	4621      	mov	r1, r4
 8004344:	4628      	mov	r0, r5
 8004346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800434a:	f7ff bf63 	b.w	8004214 <__sflush_r>
 800434e:	4b07      	ldr	r3, [pc, #28]	; (800436c <_fflush_r+0x4c>)
 8004350:	429c      	cmp	r4, r3
 8004352:	d101      	bne.n	8004358 <_fflush_r+0x38>
 8004354:	68ac      	ldr	r4, [r5, #8]
 8004356:	e7f1      	b.n	800433c <_fflush_r+0x1c>
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <_fflush_r+0x50>)
 800435a:	429c      	cmp	r4, r3
 800435c:	bf08      	it	eq
 800435e:	68ec      	ldreq	r4, [r5, #12]
 8004360:	e7ec      	b.n	800433c <_fflush_r+0x1c>
 8004362:	2000      	movs	r0, #0
 8004364:	bd38      	pop	{r3, r4, r5, pc}
 8004366:	bf00      	nop
 8004368:	08004f20 	.word	0x08004f20
 800436c:	08004f40 	.word	0x08004f40
 8004370:	08004f00 	.word	0x08004f00

08004374 <std>:
 8004374:	2300      	movs	r3, #0
 8004376:	b510      	push	{r4, lr}
 8004378:	4604      	mov	r4, r0
 800437a:	e9c0 3300 	strd	r3, r3, [r0]
 800437e:	6083      	str	r3, [r0, #8]
 8004380:	8181      	strh	r1, [r0, #12]
 8004382:	6643      	str	r3, [r0, #100]	; 0x64
 8004384:	81c2      	strh	r2, [r0, #14]
 8004386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800438a:	6183      	str	r3, [r0, #24]
 800438c:	4619      	mov	r1, r3
 800438e:	2208      	movs	r2, #8
 8004390:	305c      	adds	r0, #92	; 0x5c
 8004392:	f7ff fd4d 	bl	8003e30 <memset>
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <std+0x38>)
 8004398:	6224      	str	r4, [r4, #32]
 800439a:	6263      	str	r3, [r4, #36]	; 0x24
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <std+0x3c>)
 800439e:	62a3      	str	r3, [r4, #40]	; 0x28
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <std+0x40>)
 80043a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <std+0x44>)
 80043a6:	6323      	str	r3, [r4, #48]	; 0x30
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	bf00      	nop
 80043ac:	08004cd9 	.word	0x08004cd9
 80043b0:	08004cfb 	.word	0x08004cfb
 80043b4:	08004d33 	.word	0x08004d33
 80043b8:	08004d57 	.word	0x08004d57

080043bc <_cleanup_r>:
 80043bc:	4901      	ldr	r1, [pc, #4]	; (80043c4 <_cleanup_r+0x8>)
 80043be:	f000 b885 	b.w	80044cc <_fwalk_reent>
 80043c2:	bf00      	nop
 80043c4:	08004321 	.word	0x08004321

080043c8 <__sfmoreglue>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	2568      	movs	r5, #104	; 0x68
 80043cc:	1e4a      	subs	r2, r1, #1
 80043ce:	4355      	muls	r5, r2
 80043d0:	460e      	mov	r6, r1
 80043d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043d6:	f000 f94f 	bl	8004678 <_malloc_r>
 80043da:	4604      	mov	r4, r0
 80043dc:	b140      	cbz	r0, 80043f0 <__sfmoreglue+0x28>
 80043de:	2100      	movs	r1, #0
 80043e0:	e9c0 1600 	strd	r1, r6, [r0]
 80043e4:	300c      	adds	r0, #12
 80043e6:	60a0      	str	r0, [r4, #8]
 80043e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043ec:	f7ff fd20 	bl	8003e30 <memset>
 80043f0:	4620      	mov	r0, r4
 80043f2:	bd70      	pop	{r4, r5, r6, pc}

080043f4 <__sinit>:
 80043f4:	6983      	ldr	r3, [r0, #24]
 80043f6:	b510      	push	{r4, lr}
 80043f8:	4604      	mov	r4, r0
 80043fa:	bb33      	cbnz	r3, 800444a <__sinit+0x56>
 80043fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004400:	6503      	str	r3, [r0, #80]	; 0x50
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <__sinit+0x58>)
 8004404:	4a12      	ldr	r2, [pc, #72]	; (8004450 <__sinit+0x5c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6282      	str	r2, [r0, #40]	; 0x28
 800440a:	4298      	cmp	r0, r3
 800440c:	bf04      	itt	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	6183      	streq	r3, [r0, #24]
 8004412:	f000 f81f 	bl	8004454 <__sfp>
 8004416:	6060      	str	r0, [r4, #4]
 8004418:	4620      	mov	r0, r4
 800441a:	f000 f81b 	bl	8004454 <__sfp>
 800441e:	60a0      	str	r0, [r4, #8]
 8004420:	4620      	mov	r0, r4
 8004422:	f000 f817 	bl	8004454 <__sfp>
 8004426:	2200      	movs	r2, #0
 8004428:	60e0      	str	r0, [r4, #12]
 800442a:	2104      	movs	r1, #4
 800442c:	6860      	ldr	r0, [r4, #4]
 800442e:	f7ff ffa1 	bl	8004374 <std>
 8004432:	2201      	movs	r2, #1
 8004434:	2109      	movs	r1, #9
 8004436:	68a0      	ldr	r0, [r4, #8]
 8004438:	f7ff ff9c 	bl	8004374 <std>
 800443c:	2202      	movs	r2, #2
 800443e:	2112      	movs	r1, #18
 8004440:	68e0      	ldr	r0, [r4, #12]
 8004442:	f7ff ff97 	bl	8004374 <std>
 8004446:	2301      	movs	r3, #1
 8004448:	61a3      	str	r3, [r4, #24]
 800444a:	bd10      	pop	{r4, pc}
 800444c:	08004efc 	.word	0x08004efc
 8004450:	080043bd 	.word	0x080043bd

08004454 <__sfp>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <__sfp+0x70>)
 8004458:	4607      	mov	r7, r0
 800445a:	681e      	ldr	r6, [r3, #0]
 800445c:	69b3      	ldr	r3, [r6, #24]
 800445e:	b913      	cbnz	r3, 8004466 <__sfp+0x12>
 8004460:	4630      	mov	r0, r6
 8004462:	f7ff ffc7 	bl	80043f4 <__sinit>
 8004466:	3648      	adds	r6, #72	; 0x48
 8004468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800446c:	3b01      	subs	r3, #1
 800446e:	d503      	bpl.n	8004478 <__sfp+0x24>
 8004470:	6833      	ldr	r3, [r6, #0]
 8004472:	b133      	cbz	r3, 8004482 <__sfp+0x2e>
 8004474:	6836      	ldr	r6, [r6, #0]
 8004476:	e7f7      	b.n	8004468 <__sfp+0x14>
 8004478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800447c:	b16d      	cbz	r5, 800449a <__sfp+0x46>
 800447e:	3468      	adds	r4, #104	; 0x68
 8004480:	e7f4      	b.n	800446c <__sfp+0x18>
 8004482:	2104      	movs	r1, #4
 8004484:	4638      	mov	r0, r7
 8004486:	f7ff ff9f 	bl	80043c8 <__sfmoreglue>
 800448a:	6030      	str	r0, [r6, #0]
 800448c:	2800      	cmp	r0, #0
 800448e:	d1f1      	bne.n	8004474 <__sfp+0x20>
 8004490:	230c      	movs	r3, #12
 8004492:	4604      	mov	r4, r0
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	4620      	mov	r0, r4
 8004498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <__sfp+0x74>)
 800449c:	6665      	str	r5, [r4, #100]	; 0x64
 800449e:	e9c4 5500 	strd	r5, r5, [r4]
 80044a2:	60a5      	str	r5, [r4, #8]
 80044a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80044a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80044ac:	2208      	movs	r2, #8
 80044ae:	4629      	mov	r1, r5
 80044b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044b4:	f7ff fcbc 	bl	8003e30 <memset>
 80044b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044c0:	e7e9      	b.n	8004496 <__sfp+0x42>
 80044c2:	bf00      	nop
 80044c4:	08004efc 	.word	0x08004efc
 80044c8:	ffff0001 	.word	0xffff0001

080044cc <_fwalk_reent>:
 80044cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044d0:	4680      	mov	r8, r0
 80044d2:	4689      	mov	r9, r1
 80044d4:	2600      	movs	r6, #0
 80044d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044da:	b914      	cbnz	r4, 80044e2 <_fwalk_reent+0x16>
 80044dc:	4630      	mov	r0, r6
 80044de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80044e6:	3f01      	subs	r7, #1
 80044e8:	d501      	bpl.n	80044ee <_fwalk_reent+0x22>
 80044ea:	6824      	ldr	r4, [r4, #0]
 80044ec:	e7f5      	b.n	80044da <_fwalk_reent+0xe>
 80044ee:	89ab      	ldrh	r3, [r5, #12]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d907      	bls.n	8004504 <_fwalk_reent+0x38>
 80044f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044f8:	3301      	adds	r3, #1
 80044fa:	d003      	beq.n	8004504 <_fwalk_reent+0x38>
 80044fc:	4629      	mov	r1, r5
 80044fe:	4640      	mov	r0, r8
 8004500:	47c8      	blx	r9
 8004502:	4306      	orrs	r6, r0
 8004504:	3568      	adds	r5, #104	; 0x68
 8004506:	e7ee      	b.n	80044e6 <_fwalk_reent+0x1a>

08004508 <__swhatbuf_r>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	460e      	mov	r6, r1
 800450c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004510:	b096      	sub	sp, #88	; 0x58
 8004512:	2900      	cmp	r1, #0
 8004514:	4614      	mov	r4, r2
 8004516:	461d      	mov	r5, r3
 8004518:	da07      	bge.n	800452a <__swhatbuf_r+0x22>
 800451a:	2300      	movs	r3, #0
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	89b3      	ldrh	r3, [r6, #12]
 8004520:	061a      	lsls	r2, r3, #24
 8004522:	d410      	bmi.n	8004546 <__swhatbuf_r+0x3e>
 8004524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004528:	e00e      	b.n	8004548 <__swhatbuf_r+0x40>
 800452a:	466a      	mov	r2, sp
 800452c:	f000 fc3a 	bl	8004da4 <_fstat_r>
 8004530:	2800      	cmp	r0, #0
 8004532:	dbf2      	blt.n	800451a <__swhatbuf_r+0x12>
 8004534:	9a01      	ldr	r2, [sp, #4]
 8004536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800453a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800453e:	425a      	negs	r2, r3
 8004540:	415a      	adcs	r2, r3
 8004542:	602a      	str	r2, [r5, #0]
 8004544:	e7ee      	b.n	8004524 <__swhatbuf_r+0x1c>
 8004546:	2340      	movs	r3, #64	; 0x40
 8004548:	2000      	movs	r0, #0
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	b016      	add	sp, #88	; 0x58
 800454e:	bd70      	pop	{r4, r5, r6, pc}

08004550 <__smakebuf_r>:
 8004550:	898b      	ldrh	r3, [r1, #12]
 8004552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004554:	079d      	lsls	r5, r3, #30
 8004556:	4606      	mov	r6, r0
 8004558:	460c      	mov	r4, r1
 800455a:	d507      	bpl.n	800456c <__smakebuf_r+0x1c>
 800455c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	6123      	str	r3, [r4, #16]
 8004564:	2301      	movs	r3, #1
 8004566:	6163      	str	r3, [r4, #20]
 8004568:	b002      	add	sp, #8
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	ab01      	add	r3, sp, #4
 800456e:	466a      	mov	r2, sp
 8004570:	f7ff ffca 	bl	8004508 <__swhatbuf_r>
 8004574:	9900      	ldr	r1, [sp, #0]
 8004576:	4605      	mov	r5, r0
 8004578:	4630      	mov	r0, r6
 800457a:	f000 f87d 	bl	8004678 <_malloc_r>
 800457e:	b948      	cbnz	r0, 8004594 <__smakebuf_r+0x44>
 8004580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004584:	059a      	lsls	r2, r3, #22
 8004586:	d4ef      	bmi.n	8004568 <__smakebuf_r+0x18>
 8004588:	f023 0303 	bic.w	r3, r3, #3
 800458c:	f043 0302 	orr.w	r3, r3, #2
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	e7e3      	b.n	800455c <__smakebuf_r+0xc>
 8004594:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <__smakebuf_r+0x7c>)
 8004596:	62b3      	str	r3, [r6, #40]	; 0x28
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	6020      	str	r0, [r4, #0]
 800459c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	9b00      	ldr	r3, [sp, #0]
 80045a4:	6120      	str	r0, [r4, #16]
 80045a6:	6163      	str	r3, [r4, #20]
 80045a8:	9b01      	ldr	r3, [sp, #4]
 80045aa:	b15b      	cbz	r3, 80045c4 <__smakebuf_r+0x74>
 80045ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 fc09 	bl	8004dc8 <_isatty_r>
 80045b6:	b128      	cbz	r0, 80045c4 <__smakebuf_r+0x74>
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	f023 0303 	bic.w	r3, r3, #3
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	81a3      	strh	r3, [r4, #12]
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	431d      	orrs	r5, r3
 80045c8:	81a5      	strh	r5, [r4, #12]
 80045ca:	e7cd      	b.n	8004568 <__smakebuf_r+0x18>
 80045cc:	080043bd 	.word	0x080043bd

080045d0 <malloc>:
 80045d0:	4b02      	ldr	r3, [pc, #8]	; (80045dc <malloc+0xc>)
 80045d2:	4601      	mov	r1, r0
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	f000 b84f 	b.w	8004678 <_malloc_r>
 80045da:	bf00      	nop
 80045dc:	20000010 	.word	0x20000010

080045e0 <_free_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4605      	mov	r5, r0
 80045e4:	2900      	cmp	r1, #0
 80045e6:	d043      	beq.n	8004670 <_free_r+0x90>
 80045e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ec:	1f0c      	subs	r4, r1, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfb8      	it	lt
 80045f2:	18e4      	addlt	r4, r4, r3
 80045f4:	f000 fc18 	bl	8004e28 <__malloc_lock>
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <_free_r+0x94>)
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	4610      	mov	r0, r2
 80045fe:	b933      	cbnz	r3, 800460e <_free_r+0x2e>
 8004600:	6063      	str	r3, [r4, #4]
 8004602:	6014      	str	r4, [r2, #0]
 8004604:	4628      	mov	r0, r5
 8004606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800460a:	f000 bc0e 	b.w	8004e2a <__malloc_unlock>
 800460e:	42a3      	cmp	r3, r4
 8004610:	d90b      	bls.n	800462a <_free_r+0x4a>
 8004612:	6821      	ldr	r1, [r4, #0]
 8004614:	1862      	adds	r2, r4, r1
 8004616:	4293      	cmp	r3, r2
 8004618:	bf01      	itttt	eq
 800461a:	681a      	ldreq	r2, [r3, #0]
 800461c:	685b      	ldreq	r3, [r3, #4]
 800461e:	1852      	addeq	r2, r2, r1
 8004620:	6022      	streq	r2, [r4, #0]
 8004622:	6063      	str	r3, [r4, #4]
 8004624:	6004      	str	r4, [r0, #0]
 8004626:	e7ed      	b.n	8004604 <_free_r+0x24>
 8004628:	4613      	mov	r3, r2
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	b10a      	cbz	r2, 8004632 <_free_r+0x52>
 800462e:	42a2      	cmp	r2, r4
 8004630:	d9fa      	bls.n	8004628 <_free_r+0x48>
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	1858      	adds	r0, r3, r1
 8004636:	42a0      	cmp	r0, r4
 8004638:	d10b      	bne.n	8004652 <_free_r+0x72>
 800463a:	6820      	ldr	r0, [r4, #0]
 800463c:	4401      	add	r1, r0
 800463e:	1858      	adds	r0, r3, r1
 8004640:	4282      	cmp	r2, r0
 8004642:	6019      	str	r1, [r3, #0]
 8004644:	d1de      	bne.n	8004604 <_free_r+0x24>
 8004646:	6810      	ldr	r0, [r2, #0]
 8004648:	6852      	ldr	r2, [r2, #4]
 800464a:	4401      	add	r1, r0
 800464c:	6019      	str	r1, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	e7d8      	b.n	8004604 <_free_r+0x24>
 8004652:	d902      	bls.n	800465a <_free_r+0x7a>
 8004654:	230c      	movs	r3, #12
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	e7d4      	b.n	8004604 <_free_r+0x24>
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	1821      	adds	r1, r4, r0
 800465e:	428a      	cmp	r2, r1
 8004660:	bf01      	itttt	eq
 8004662:	6811      	ldreq	r1, [r2, #0]
 8004664:	6852      	ldreq	r2, [r2, #4]
 8004666:	1809      	addeq	r1, r1, r0
 8004668:	6021      	streq	r1, [r4, #0]
 800466a:	6062      	str	r2, [r4, #4]
 800466c:	605c      	str	r4, [r3, #4]
 800466e:	e7c9      	b.n	8004604 <_free_r+0x24>
 8004670:	bd38      	pop	{r3, r4, r5, pc}
 8004672:	bf00      	nop
 8004674:	2000009c 	.word	0x2000009c

08004678 <_malloc_r>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	1ccd      	adds	r5, r1, #3
 800467c:	f025 0503 	bic.w	r5, r5, #3
 8004680:	3508      	adds	r5, #8
 8004682:	2d0c      	cmp	r5, #12
 8004684:	bf38      	it	cc
 8004686:	250c      	movcc	r5, #12
 8004688:	2d00      	cmp	r5, #0
 800468a:	4606      	mov	r6, r0
 800468c:	db01      	blt.n	8004692 <_malloc_r+0x1a>
 800468e:	42a9      	cmp	r1, r5
 8004690:	d903      	bls.n	800469a <_malloc_r+0x22>
 8004692:	230c      	movs	r3, #12
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	2000      	movs	r0, #0
 8004698:	bd70      	pop	{r4, r5, r6, pc}
 800469a:	f000 fbc5 	bl	8004e28 <__malloc_lock>
 800469e:	4a21      	ldr	r2, [pc, #132]	; (8004724 <_malloc_r+0xac>)
 80046a0:	6814      	ldr	r4, [r2, #0]
 80046a2:	4621      	mov	r1, r4
 80046a4:	b991      	cbnz	r1, 80046cc <_malloc_r+0x54>
 80046a6:	4c20      	ldr	r4, [pc, #128]	; (8004728 <_malloc_r+0xb0>)
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	b91b      	cbnz	r3, 80046b4 <_malloc_r+0x3c>
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 fb03 	bl	8004cb8 <_sbrk_r>
 80046b2:	6020      	str	r0, [r4, #0]
 80046b4:	4629      	mov	r1, r5
 80046b6:	4630      	mov	r0, r6
 80046b8:	f000 fafe 	bl	8004cb8 <_sbrk_r>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d124      	bne.n	800470a <_malloc_r+0x92>
 80046c0:	230c      	movs	r3, #12
 80046c2:	4630      	mov	r0, r6
 80046c4:	6033      	str	r3, [r6, #0]
 80046c6:	f000 fbb0 	bl	8004e2a <__malloc_unlock>
 80046ca:	e7e4      	b.n	8004696 <_malloc_r+0x1e>
 80046cc:	680b      	ldr	r3, [r1, #0]
 80046ce:	1b5b      	subs	r3, r3, r5
 80046d0:	d418      	bmi.n	8004704 <_malloc_r+0x8c>
 80046d2:	2b0b      	cmp	r3, #11
 80046d4:	d90f      	bls.n	80046f6 <_malloc_r+0x7e>
 80046d6:	600b      	str	r3, [r1, #0]
 80046d8:	18cc      	adds	r4, r1, r3
 80046da:	50cd      	str	r5, [r1, r3]
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 fba4 	bl	8004e2a <__malloc_unlock>
 80046e2:	f104 000b 	add.w	r0, r4, #11
 80046e6:	1d23      	adds	r3, r4, #4
 80046e8:	f020 0007 	bic.w	r0, r0, #7
 80046ec:	1ac3      	subs	r3, r0, r3
 80046ee:	d0d3      	beq.n	8004698 <_malloc_r+0x20>
 80046f0:	425a      	negs	r2, r3
 80046f2:	50e2      	str	r2, [r4, r3]
 80046f4:	e7d0      	b.n	8004698 <_malloc_r+0x20>
 80046f6:	684b      	ldr	r3, [r1, #4]
 80046f8:	428c      	cmp	r4, r1
 80046fa:	bf16      	itet	ne
 80046fc:	6063      	strne	r3, [r4, #4]
 80046fe:	6013      	streq	r3, [r2, #0]
 8004700:	460c      	movne	r4, r1
 8004702:	e7eb      	b.n	80046dc <_malloc_r+0x64>
 8004704:	460c      	mov	r4, r1
 8004706:	6849      	ldr	r1, [r1, #4]
 8004708:	e7cc      	b.n	80046a4 <_malloc_r+0x2c>
 800470a:	1cc4      	adds	r4, r0, #3
 800470c:	f024 0403 	bic.w	r4, r4, #3
 8004710:	42a0      	cmp	r0, r4
 8004712:	d005      	beq.n	8004720 <_malloc_r+0xa8>
 8004714:	1a21      	subs	r1, r4, r0
 8004716:	4630      	mov	r0, r6
 8004718:	f000 face 	bl	8004cb8 <_sbrk_r>
 800471c:	3001      	adds	r0, #1
 800471e:	d0cf      	beq.n	80046c0 <_malloc_r+0x48>
 8004720:	6025      	str	r5, [r4, #0]
 8004722:	e7db      	b.n	80046dc <_malloc_r+0x64>
 8004724:	2000009c 	.word	0x2000009c
 8004728:	200000a0 	.word	0x200000a0

0800472c <__sfputc_r>:
 800472c:	6893      	ldr	r3, [r2, #8]
 800472e:	b410      	push	{r4}
 8004730:	3b01      	subs	r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	6093      	str	r3, [r2, #8]
 8004736:	da07      	bge.n	8004748 <__sfputc_r+0x1c>
 8004738:	6994      	ldr	r4, [r2, #24]
 800473a:	42a3      	cmp	r3, r4
 800473c:	db01      	blt.n	8004742 <__sfputc_r+0x16>
 800473e:	290a      	cmp	r1, #10
 8004740:	d102      	bne.n	8004748 <__sfputc_r+0x1c>
 8004742:	bc10      	pop	{r4}
 8004744:	f7ff bca6 	b.w	8004094 <__swbuf_r>
 8004748:	6813      	ldr	r3, [r2, #0]
 800474a:	1c58      	adds	r0, r3, #1
 800474c:	6010      	str	r0, [r2, #0]
 800474e:	7019      	strb	r1, [r3, #0]
 8004750:	4608      	mov	r0, r1
 8004752:	bc10      	pop	{r4}
 8004754:	4770      	bx	lr

08004756 <__sfputs_r>:
 8004756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004758:	4606      	mov	r6, r0
 800475a:	460f      	mov	r7, r1
 800475c:	4614      	mov	r4, r2
 800475e:	18d5      	adds	r5, r2, r3
 8004760:	42ac      	cmp	r4, r5
 8004762:	d101      	bne.n	8004768 <__sfputs_r+0x12>
 8004764:	2000      	movs	r0, #0
 8004766:	e007      	b.n	8004778 <__sfputs_r+0x22>
 8004768:	463a      	mov	r2, r7
 800476a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800476e:	4630      	mov	r0, r6
 8004770:	f7ff ffdc 	bl	800472c <__sfputc_r>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d1f3      	bne.n	8004760 <__sfputs_r+0xa>
 8004778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800477c <_vfiprintf_r>:
 800477c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004780:	460c      	mov	r4, r1
 8004782:	b09d      	sub	sp, #116	; 0x74
 8004784:	4617      	mov	r7, r2
 8004786:	461d      	mov	r5, r3
 8004788:	4606      	mov	r6, r0
 800478a:	b118      	cbz	r0, 8004794 <_vfiprintf_r+0x18>
 800478c:	6983      	ldr	r3, [r0, #24]
 800478e:	b90b      	cbnz	r3, 8004794 <_vfiprintf_r+0x18>
 8004790:	f7ff fe30 	bl	80043f4 <__sinit>
 8004794:	4b7c      	ldr	r3, [pc, #496]	; (8004988 <_vfiprintf_r+0x20c>)
 8004796:	429c      	cmp	r4, r3
 8004798:	d158      	bne.n	800484c <_vfiprintf_r+0xd0>
 800479a:	6874      	ldr	r4, [r6, #4]
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	0718      	lsls	r0, r3, #28
 80047a0:	d55e      	bpl.n	8004860 <_vfiprintf_r+0xe4>
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05b      	beq.n	8004860 <_vfiprintf_r+0xe4>
 80047a8:	2300      	movs	r3, #0
 80047aa:	9309      	str	r3, [sp, #36]	; 0x24
 80047ac:	2320      	movs	r3, #32
 80047ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047b2:	2330      	movs	r3, #48	; 0x30
 80047b4:	f04f 0b01 	mov.w	fp, #1
 80047b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047bc:	9503      	str	r5, [sp, #12]
 80047be:	46b8      	mov	r8, r7
 80047c0:	4645      	mov	r5, r8
 80047c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80047c6:	b10b      	cbz	r3, 80047cc <_vfiprintf_r+0x50>
 80047c8:	2b25      	cmp	r3, #37	; 0x25
 80047ca:	d154      	bne.n	8004876 <_vfiprintf_r+0xfa>
 80047cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80047d0:	d00b      	beq.n	80047ea <_vfiprintf_r+0x6e>
 80047d2:	4653      	mov	r3, sl
 80047d4:	463a      	mov	r2, r7
 80047d6:	4621      	mov	r1, r4
 80047d8:	4630      	mov	r0, r6
 80047da:	f7ff ffbc 	bl	8004756 <__sfputs_r>
 80047de:	3001      	adds	r0, #1
 80047e0:	f000 80c2 	beq.w	8004968 <_vfiprintf_r+0x1ec>
 80047e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e6:	4453      	add	r3, sl
 80047e8:	9309      	str	r3, [sp, #36]	; 0x24
 80047ea:	f898 3000 	ldrb.w	r3, [r8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80ba 	beq.w	8004968 <_vfiprintf_r+0x1ec>
 80047f4:	2300      	movs	r3, #0
 80047f6:	f04f 32ff 	mov.w	r2, #4294967295
 80047fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047fe:	9304      	str	r3, [sp, #16]
 8004800:	9307      	str	r3, [sp, #28]
 8004802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004806:	931a      	str	r3, [sp, #104]	; 0x68
 8004808:	46a8      	mov	r8, r5
 800480a:	2205      	movs	r2, #5
 800480c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004810:	485e      	ldr	r0, [pc, #376]	; (800498c <_vfiprintf_r+0x210>)
 8004812:	f000 fafb 	bl	8004e0c <memchr>
 8004816:	9b04      	ldr	r3, [sp, #16]
 8004818:	bb78      	cbnz	r0, 800487a <_vfiprintf_r+0xfe>
 800481a:	06d9      	lsls	r1, r3, #27
 800481c:	bf44      	itt	mi
 800481e:	2220      	movmi	r2, #32
 8004820:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004824:	071a      	lsls	r2, r3, #28
 8004826:	bf44      	itt	mi
 8004828:	222b      	movmi	r2, #43	; 0x2b
 800482a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800482e:	782a      	ldrb	r2, [r5, #0]
 8004830:	2a2a      	cmp	r2, #42	; 0x2a
 8004832:	d02a      	beq.n	800488a <_vfiprintf_r+0x10e>
 8004834:	46a8      	mov	r8, r5
 8004836:	2000      	movs	r0, #0
 8004838:	250a      	movs	r5, #10
 800483a:	9a07      	ldr	r2, [sp, #28]
 800483c:	4641      	mov	r1, r8
 800483e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004842:	3b30      	subs	r3, #48	; 0x30
 8004844:	2b09      	cmp	r3, #9
 8004846:	d969      	bls.n	800491c <_vfiprintf_r+0x1a0>
 8004848:	b360      	cbz	r0, 80048a4 <_vfiprintf_r+0x128>
 800484a:	e024      	b.n	8004896 <_vfiprintf_r+0x11a>
 800484c:	4b50      	ldr	r3, [pc, #320]	; (8004990 <_vfiprintf_r+0x214>)
 800484e:	429c      	cmp	r4, r3
 8004850:	d101      	bne.n	8004856 <_vfiprintf_r+0xda>
 8004852:	68b4      	ldr	r4, [r6, #8]
 8004854:	e7a2      	b.n	800479c <_vfiprintf_r+0x20>
 8004856:	4b4f      	ldr	r3, [pc, #316]	; (8004994 <_vfiprintf_r+0x218>)
 8004858:	429c      	cmp	r4, r3
 800485a:	bf08      	it	eq
 800485c:	68f4      	ldreq	r4, [r6, #12]
 800485e:	e79d      	b.n	800479c <_vfiprintf_r+0x20>
 8004860:	4621      	mov	r1, r4
 8004862:	4630      	mov	r0, r6
 8004864:	f7ff fc68 	bl	8004138 <__swsetup_r>
 8004868:	2800      	cmp	r0, #0
 800486a:	d09d      	beq.n	80047a8 <_vfiprintf_r+0x2c>
 800486c:	f04f 30ff 	mov.w	r0, #4294967295
 8004870:	b01d      	add	sp, #116	; 0x74
 8004872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004876:	46a8      	mov	r8, r5
 8004878:	e7a2      	b.n	80047c0 <_vfiprintf_r+0x44>
 800487a:	4a44      	ldr	r2, [pc, #272]	; (800498c <_vfiprintf_r+0x210>)
 800487c:	4645      	mov	r5, r8
 800487e:	1a80      	subs	r0, r0, r2
 8004880:	fa0b f000 	lsl.w	r0, fp, r0
 8004884:	4318      	orrs	r0, r3
 8004886:	9004      	str	r0, [sp, #16]
 8004888:	e7be      	b.n	8004808 <_vfiprintf_r+0x8c>
 800488a:	9a03      	ldr	r2, [sp, #12]
 800488c:	1d11      	adds	r1, r2, #4
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	9103      	str	r1, [sp, #12]
 8004892:	2a00      	cmp	r2, #0
 8004894:	db01      	blt.n	800489a <_vfiprintf_r+0x11e>
 8004896:	9207      	str	r2, [sp, #28]
 8004898:	e004      	b.n	80048a4 <_vfiprintf_r+0x128>
 800489a:	4252      	negs	r2, r2
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	9207      	str	r2, [sp, #28]
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	f898 3000 	ldrb.w	r3, [r8]
 80048a8:	2b2e      	cmp	r3, #46	; 0x2e
 80048aa:	d10e      	bne.n	80048ca <_vfiprintf_r+0x14e>
 80048ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80048b0:	2b2a      	cmp	r3, #42	; 0x2a
 80048b2:	d138      	bne.n	8004926 <_vfiprintf_r+0x1aa>
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	f108 0802 	add.w	r8, r8, #2
 80048ba:	1d1a      	adds	r2, r3, #4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	9203      	str	r2, [sp, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bfb8      	it	lt
 80048c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80048c8:	9305      	str	r3, [sp, #20]
 80048ca:	4d33      	ldr	r5, [pc, #204]	; (8004998 <_vfiprintf_r+0x21c>)
 80048cc:	2203      	movs	r2, #3
 80048ce:	f898 1000 	ldrb.w	r1, [r8]
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 fa9a 	bl	8004e0c <memchr>
 80048d8:	b140      	cbz	r0, 80048ec <_vfiprintf_r+0x170>
 80048da:	2340      	movs	r3, #64	; 0x40
 80048dc:	1b40      	subs	r0, r0, r5
 80048de:	fa03 f000 	lsl.w	r0, r3, r0
 80048e2:	9b04      	ldr	r3, [sp, #16]
 80048e4:	f108 0801 	add.w	r8, r8, #1
 80048e8:	4303      	orrs	r3, r0
 80048ea:	9304      	str	r3, [sp, #16]
 80048ec:	f898 1000 	ldrb.w	r1, [r8]
 80048f0:	2206      	movs	r2, #6
 80048f2:	482a      	ldr	r0, [pc, #168]	; (800499c <_vfiprintf_r+0x220>)
 80048f4:	f108 0701 	add.w	r7, r8, #1
 80048f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048fc:	f000 fa86 	bl	8004e0c <memchr>
 8004900:	2800      	cmp	r0, #0
 8004902:	d037      	beq.n	8004974 <_vfiprintf_r+0x1f8>
 8004904:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <_vfiprintf_r+0x224>)
 8004906:	bb1b      	cbnz	r3, 8004950 <_vfiprintf_r+0x1d4>
 8004908:	9b03      	ldr	r3, [sp, #12]
 800490a:	3307      	adds	r3, #7
 800490c:	f023 0307 	bic.w	r3, r3, #7
 8004910:	3308      	adds	r3, #8
 8004912:	9303      	str	r3, [sp, #12]
 8004914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004916:	444b      	add	r3, r9
 8004918:	9309      	str	r3, [sp, #36]	; 0x24
 800491a:	e750      	b.n	80047be <_vfiprintf_r+0x42>
 800491c:	fb05 3202 	mla	r2, r5, r2, r3
 8004920:	2001      	movs	r0, #1
 8004922:	4688      	mov	r8, r1
 8004924:	e78a      	b.n	800483c <_vfiprintf_r+0xc0>
 8004926:	2300      	movs	r3, #0
 8004928:	250a      	movs	r5, #10
 800492a:	4619      	mov	r1, r3
 800492c:	f108 0801 	add.w	r8, r8, #1
 8004930:	9305      	str	r3, [sp, #20]
 8004932:	4640      	mov	r0, r8
 8004934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004938:	3a30      	subs	r2, #48	; 0x30
 800493a:	2a09      	cmp	r2, #9
 800493c:	d903      	bls.n	8004946 <_vfiprintf_r+0x1ca>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0c3      	beq.n	80048ca <_vfiprintf_r+0x14e>
 8004942:	9105      	str	r1, [sp, #20]
 8004944:	e7c1      	b.n	80048ca <_vfiprintf_r+0x14e>
 8004946:	fb05 2101 	mla	r1, r5, r1, r2
 800494a:	2301      	movs	r3, #1
 800494c:	4680      	mov	r8, r0
 800494e:	e7f0      	b.n	8004932 <_vfiprintf_r+0x1b6>
 8004950:	ab03      	add	r3, sp, #12
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	4622      	mov	r2, r4
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <_vfiprintf_r+0x228>)
 8004958:	a904      	add	r1, sp, #16
 800495a:	4630      	mov	r0, r6
 800495c:	f3af 8000 	nop.w
 8004960:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004964:	4681      	mov	r9, r0
 8004966:	d1d5      	bne.n	8004914 <_vfiprintf_r+0x198>
 8004968:	89a3      	ldrh	r3, [r4, #12]
 800496a:	065b      	lsls	r3, r3, #25
 800496c:	f53f af7e 	bmi.w	800486c <_vfiprintf_r+0xf0>
 8004970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004972:	e77d      	b.n	8004870 <_vfiprintf_r+0xf4>
 8004974:	ab03      	add	r3, sp, #12
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	4622      	mov	r2, r4
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <_vfiprintf_r+0x228>)
 800497c:	a904      	add	r1, sp, #16
 800497e:	4630      	mov	r0, r6
 8004980:	f000 f888 	bl	8004a94 <_printf_i>
 8004984:	e7ec      	b.n	8004960 <_vfiprintf_r+0x1e4>
 8004986:	bf00      	nop
 8004988:	08004f20 	.word	0x08004f20
 800498c:	08004f60 	.word	0x08004f60
 8004990:	08004f40 	.word	0x08004f40
 8004994:	08004f00 	.word	0x08004f00
 8004998:	08004f66 	.word	0x08004f66
 800499c:	08004f6a 	.word	0x08004f6a
 80049a0:	00000000 	.word	0x00000000
 80049a4:	08004757 	.word	0x08004757

080049a8 <_printf_common>:
 80049a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	4691      	mov	r9, r2
 80049ae:	461f      	mov	r7, r3
 80049b0:	688a      	ldr	r2, [r1, #8]
 80049b2:	690b      	ldr	r3, [r1, #16]
 80049b4:	4606      	mov	r6, r0
 80049b6:	4293      	cmp	r3, r2
 80049b8:	bfb8      	it	lt
 80049ba:	4613      	movlt	r3, r2
 80049bc:	f8c9 3000 	str.w	r3, [r9]
 80049c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049c4:	460c      	mov	r4, r1
 80049c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049ca:	b112      	cbz	r2, 80049d2 <_printf_common+0x2a>
 80049cc:	3301      	adds	r3, #1
 80049ce:	f8c9 3000 	str.w	r3, [r9]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	0699      	lsls	r1, r3, #26
 80049d6:	bf42      	ittt	mi
 80049d8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049dc:	3302      	addmi	r3, #2
 80049de:	f8c9 3000 	strmi.w	r3, [r9]
 80049e2:	6825      	ldr	r5, [r4, #0]
 80049e4:	f015 0506 	ands.w	r5, r5, #6
 80049e8:	d107      	bne.n	80049fa <_printf_common+0x52>
 80049ea:	f104 0a19 	add.w	sl, r4, #25
 80049ee:	68e3      	ldr	r3, [r4, #12]
 80049f0:	f8d9 2000 	ldr.w	r2, [r9]
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	42ab      	cmp	r3, r5
 80049f8:	dc29      	bgt.n	8004a4e <_printf_common+0xa6>
 80049fa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	3300      	adds	r3, #0
 8004a02:	bf18      	it	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	0692      	lsls	r2, r2, #26
 8004a08:	d42e      	bmi.n	8004a68 <_printf_common+0xc0>
 8004a0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a0e:	4639      	mov	r1, r7
 8004a10:	4630      	mov	r0, r6
 8004a12:	47c0      	blx	r8
 8004a14:	3001      	adds	r0, #1
 8004a16:	d021      	beq.n	8004a5c <_printf_common+0xb4>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	68e5      	ldr	r5, [r4, #12]
 8004a1c:	f003 0306 	and.w	r3, r3, #6
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	bf18      	it	ne
 8004a24:	2500      	movne	r5, #0
 8004a26:	f8d9 2000 	ldr.w	r2, [r9]
 8004a2a:	f04f 0900 	mov.w	r9, #0
 8004a2e:	bf08      	it	eq
 8004a30:	1aad      	subeq	r5, r5, r2
 8004a32:	68a3      	ldr	r3, [r4, #8]
 8004a34:	6922      	ldr	r2, [r4, #16]
 8004a36:	bf08      	it	eq
 8004a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	bfc4      	itt	gt
 8004a40:	1a9b      	subgt	r3, r3, r2
 8004a42:	18ed      	addgt	r5, r5, r3
 8004a44:	341a      	adds	r4, #26
 8004a46:	454d      	cmp	r5, r9
 8004a48:	d11a      	bne.n	8004a80 <_printf_common+0xd8>
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	e008      	b.n	8004a60 <_printf_common+0xb8>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4652      	mov	r2, sl
 8004a52:	4639      	mov	r1, r7
 8004a54:	4630      	mov	r0, r6
 8004a56:	47c0      	blx	r8
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d103      	bne.n	8004a64 <_printf_common+0xbc>
 8004a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a64:	3501      	adds	r5, #1
 8004a66:	e7c2      	b.n	80049ee <_printf_common+0x46>
 8004a68:	2030      	movs	r0, #48	; 0x30
 8004a6a:	18e1      	adds	r1, r4, r3
 8004a6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a76:	4422      	add	r2, r4
 8004a78:	3302      	adds	r3, #2
 8004a7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a7e:	e7c4      	b.n	8004a0a <_printf_common+0x62>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4622      	mov	r2, r4
 8004a84:	4639      	mov	r1, r7
 8004a86:	4630      	mov	r0, r6
 8004a88:	47c0      	blx	r8
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d0e6      	beq.n	8004a5c <_printf_common+0xb4>
 8004a8e:	f109 0901 	add.w	r9, r9, #1
 8004a92:	e7d8      	b.n	8004a46 <_printf_common+0x9e>

08004a94 <_printf_i>:
 8004a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	7e09      	ldrb	r1, [r1, #24]
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	296e      	cmp	r1, #110	; 0x6e
 8004aa4:	4617      	mov	r7, r2
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	4698      	mov	r8, r3
 8004aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004aac:	f000 80b3 	beq.w	8004c16 <_printf_i+0x182>
 8004ab0:	d822      	bhi.n	8004af8 <_printf_i+0x64>
 8004ab2:	2963      	cmp	r1, #99	; 0x63
 8004ab4:	d036      	beq.n	8004b24 <_printf_i+0x90>
 8004ab6:	d80a      	bhi.n	8004ace <_printf_i+0x3a>
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	f000 80b9 	beq.w	8004c30 <_printf_i+0x19c>
 8004abe:	2958      	cmp	r1, #88	; 0x58
 8004ac0:	f000 8083 	beq.w	8004bca <_printf_i+0x136>
 8004ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ac8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004acc:	e032      	b.n	8004b34 <_printf_i+0xa0>
 8004ace:	2964      	cmp	r1, #100	; 0x64
 8004ad0:	d001      	beq.n	8004ad6 <_printf_i+0x42>
 8004ad2:	2969      	cmp	r1, #105	; 0x69
 8004ad4:	d1f6      	bne.n	8004ac4 <_printf_i+0x30>
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	6813      	ldr	r3, [r2, #0]
 8004ada:	0605      	lsls	r5, r0, #24
 8004adc:	f103 0104 	add.w	r1, r3, #4
 8004ae0:	d52a      	bpl.n	8004b38 <_printf_i+0xa4>
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6011      	str	r1, [r2, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da03      	bge.n	8004af2 <_printf_i+0x5e>
 8004aea:	222d      	movs	r2, #45	; 0x2d
 8004aec:	425b      	negs	r3, r3
 8004aee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004af2:	486f      	ldr	r0, [pc, #444]	; (8004cb0 <_printf_i+0x21c>)
 8004af4:	220a      	movs	r2, #10
 8004af6:	e039      	b.n	8004b6c <_printf_i+0xd8>
 8004af8:	2973      	cmp	r1, #115	; 0x73
 8004afa:	f000 809d 	beq.w	8004c38 <_printf_i+0x1a4>
 8004afe:	d808      	bhi.n	8004b12 <_printf_i+0x7e>
 8004b00:	296f      	cmp	r1, #111	; 0x6f
 8004b02:	d020      	beq.n	8004b46 <_printf_i+0xb2>
 8004b04:	2970      	cmp	r1, #112	; 0x70
 8004b06:	d1dd      	bne.n	8004ac4 <_printf_i+0x30>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	f043 0320 	orr.w	r3, r3, #32
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	e003      	b.n	8004b1a <_printf_i+0x86>
 8004b12:	2975      	cmp	r1, #117	; 0x75
 8004b14:	d017      	beq.n	8004b46 <_printf_i+0xb2>
 8004b16:	2978      	cmp	r1, #120	; 0x78
 8004b18:	d1d4      	bne.n	8004ac4 <_printf_i+0x30>
 8004b1a:	2378      	movs	r3, #120	; 0x78
 8004b1c:	4865      	ldr	r0, [pc, #404]	; (8004cb4 <_printf_i+0x220>)
 8004b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b22:	e055      	b.n	8004bd0 <_printf_i+0x13c>
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b2a:	1d19      	adds	r1, r3, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6011      	str	r1, [r2, #0]
 8004b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b34:	2301      	movs	r3, #1
 8004b36:	e08c      	b.n	8004c52 <_printf_i+0x1be>
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b3e:	6011      	str	r1, [r2, #0]
 8004b40:	bf18      	it	ne
 8004b42:	b21b      	sxthne	r3, r3
 8004b44:	e7cf      	b.n	8004ae6 <_printf_i+0x52>
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	6825      	ldr	r5, [r4, #0]
 8004b4a:	1d18      	adds	r0, r3, #4
 8004b4c:	6010      	str	r0, [r2, #0]
 8004b4e:	0628      	lsls	r0, r5, #24
 8004b50:	d501      	bpl.n	8004b56 <_printf_i+0xc2>
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	e002      	b.n	8004b5c <_printf_i+0xc8>
 8004b56:	0668      	lsls	r0, r5, #25
 8004b58:	d5fb      	bpl.n	8004b52 <_printf_i+0xbe>
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	296f      	cmp	r1, #111	; 0x6f
 8004b5e:	bf14      	ite	ne
 8004b60:	220a      	movne	r2, #10
 8004b62:	2208      	moveq	r2, #8
 8004b64:	4852      	ldr	r0, [pc, #328]	; (8004cb0 <_printf_i+0x21c>)
 8004b66:	2100      	movs	r1, #0
 8004b68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b6c:	6865      	ldr	r5, [r4, #4]
 8004b6e:	2d00      	cmp	r5, #0
 8004b70:	60a5      	str	r5, [r4, #8]
 8004b72:	f2c0 8095 	blt.w	8004ca0 <_printf_i+0x20c>
 8004b76:	6821      	ldr	r1, [r4, #0]
 8004b78:	f021 0104 	bic.w	r1, r1, #4
 8004b7c:	6021      	str	r1, [r4, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d13d      	bne.n	8004bfe <_printf_i+0x16a>
 8004b82:	2d00      	cmp	r5, #0
 8004b84:	f040 808e 	bne.w	8004ca4 <_printf_i+0x210>
 8004b88:	4665      	mov	r5, ip
 8004b8a:	2a08      	cmp	r2, #8
 8004b8c:	d10b      	bne.n	8004ba6 <_printf_i+0x112>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	07db      	lsls	r3, r3, #31
 8004b92:	d508      	bpl.n	8004ba6 <_printf_i+0x112>
 8004b94:	6923      	ldr	r3, [r4, #16]
 8004b96:	6862      	ldr	r2, [r4, #4]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	bfde      	ittt	le
 8004b9c:	2330      	movle	r3, #48	; 0x30
 8004b9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ba2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ba6:	ebac 0305 	sub.w	r3, ip, r5
 8004baa:	6123      	str	r3, [r4, #16]
 8004bac:	f8cd 8000 	str.w	r8, [sp]
 8004bb0:	463b      	mov	r3, r7
 8004bb2:	aa03      	add	r2, sp, #12
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f7ff fef6 	bl	80049a8 <_printf_common>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d14d      	bne.n	8004c5c <_printf_i+0x1c8>
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc4:	b005      	add	sp, #20
 8004bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bca:	4839      	ldr	r0, [pc, #228]	; (8004cb0 <_printf_i+0x21c>)
 8004bcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004bd0:	6813      	ldr	r3, [r2, #0]
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	1d1d      	adds	r5, r3, #4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6015      	str	r5, [r2, #0]
 8004bda:	060a      	lsls	r2, r1, #24
 8004bdc:	d50b      	bpl.n	8004bf6 <_printf_i+0x162>
 8004bde:	07ca      	lsls	r2, r1, #31
 8004be0:	bf44      	itt	mi
 8004be2:	f041 0120 	orrmi.w	r1, r1, #32
 8004be6:	6021      	strmi	r1, [r4, #0]
 8004be8:	b91b      	cbnz	r3, 8004bf2 <_printf_i+0x15e>
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	f022 0220 	bic.w	r2, r2, #32
 8004bf0:	6022      	str	r2, [r4, #0]
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	e7b7      	b.n	8004b66 <_printf_i+0xd2>
 8004bf6:	064d      	lsls	r5, r1, #25
 8004bf8:	bf48      	it	mi
 8004bfa:	b29b      	uxthmi	r3, r3
 8004bfc:	e7ef      	b.n	8004bde <_printf_i+0x14a>
 8004bfe:	4665      	mov	r5, ip
 8004c00:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c04:	fb02 3311 	mls	r3, r2, r1, r3
 8004c08:	5cc3      	ldrb	r3, [r0, r3]
 8004c0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c0e:	460b      	mov	r3, r1
 8004c10:	2900      	cmp	r1, #0
 8004c12:	d1f5      	bne.n	8004c00 <_printf_i+0x16c>
 8004c14:	e7b9      	b.n	8004b8a <_printf_i+0xf6>
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	6825      	ldr	r5, [r4, #0]
 8004c1a:	1d18      	adds	r0, r3, #4
 8004c1c:	6961      	ldr	r1, [r4, #20]
 8004c1e:	6010      	str	r0, [r2, #0]
 8004c20:	0628      	lsls	r0, r5, #24
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	d501      	bpl.n	8004c2a <_printf_i+0x196>
 8004c26:	6019      	str	r1, [r3, #0]
 8004c28:	e002      	b.n	8004c30 <_printf_i+0x19c>
 8004c2a:	066a      	lsls	r2, r5, #25
 8004c2c:	d5fb      	bpl.n	8004c26 <_printf_i+0x192>
 8004c2e:	8019      	strh	r1, [r3, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	4665      	mov	r5, ip
 8004c34:	6123      	str	r3, [r4, #16]
 8004c36:	e7b9      	b.n	8004bac <_printf_i+0x118>
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	1d19      	adds	r1, r3, #4
 8004c3c:	6011      	str	r1, [r2, #0]
 8004c3e:	681d      	ldr	r5, [r3, #0]
 8004c40:	6862      	ldr	r2, [r4, #4]
 8004c42:	2100      	movs	r1, #0
 8004c44:	4628      	mov	r0, r5
 8004c46:	f000 f8e1 	bl	8004e0c <memchr>
 8004c4a:	b108      	cbz	r0, 8004c50 <_printf_i+0x1bc>
 8004c4c:	1b40      	subs	r0, r0, r5
 8004c4e:	6060      	str	r0, [r4, #4]
 8004c50:	6863      	ldr	r3, [r4, #4]
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	2300      	movs	r3, #0
 8004c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c5a:	e7a7      	b.n	8004bac <_printf_i+0x118>
 8004c5c:	6923      	ldr	r3, [r4, #16]
 8004c5e:	462a      	mov	r2, r5
 8004c60:	4639      	mov	r1, r7
 8004c62:	4630      	mov	r0, r6
 8004c64:	47c0      	blx	r8
 8004c66:	3001      	adds	r0, #1
 8004c68:	d0aa      	beq.n	8004bc0 <_printf_i+0x12c>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	079b      	lsls	r3, r3, #30
 8004c6e:	d413      	bmi.n	8004c98 <_printf_i+0x204>
 8004c70:	68e0      	ldr	r0, [r4, #12]
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	4298      	cmp	r0, r3
 8004c76:	bfb8      	it	lt
 8004c78:	4618      	movlt	r0, r3
 8004c7a:	e7a3      	b.n	8004bc4 <_printf_i+0x130>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	464a      	mov	r2, r9
 8004c80:	4639      	mov	r1, r7
 8004c82:	4630      	mov	r0, r6
 8004c84:	47c0      	blx	r8
 8004c86:	3001      	adds	r0, #1
 8004c88:	d09a      	beq.n	8004bc0 <_printf_i+0x12c>
 8004c8a:	3501      	adds	r5, #1
 8004c8c:	68e3      	ldr	r3, [r4, #12]
 8004c8e:	9a03      	ldr	r2, [sp, #12]
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	42ab      	cmp	r3, r5
 8004c94:	dcf2      	bgt.n	8004c7c <_printf_i+0x1e8>
 8004c96:	e7eb      	b.n	8004c70 <_printf_i+0x1dc>
 8004c98:	2500      	movs	r5, #0
 8004c9a:	f104 0919 	add.w	r9, r4, #25
 8004c9e:	e7f5      	b.n	8004c8c <_printf_i+0x1f8>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ac      	bne.n	8004bfe <_printf_i+0x16a>
 8004ca4:	7803      	ldrb	r3, [r0, #0]
 8004ca6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004caa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cae:	e76c      	b.n	8004b8a <_printf_i+0xf6>
 8004cb0:	08004f71 	.word	0x08004f71
 8004cb4:	08004f82 	.word	0x08004f82

08004cb8 <_sbrk_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	2300      	movs	r3, #0
 8004cbc:	4c05      	ldr	r4, [pc, #20]	; (8004cd4 <_sbrk_r+0x1c>)
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	f7fb ff06 	bl	8000ad4 <_sbrk>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_sbrk_r+0x1a>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_sbrk_r+0x1a>
 8004cd0:	602b      	str	r3, [r5, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	20000158 	.word	0x20000158

08004cd8 <__sread>:
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	460c      	mov	r4, r1
 8004cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce0:	f000 f8a4 	bl	8004e2c <_read_r>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	bfab      	itete	ge
 8004ce8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cea:	89a3      	ldrhlt	r3, [r4, #12]
 8004cec:	181b      	addge	r3, r3, r0
 8004cee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cf2:	bfac      	ite	ge
 8004cf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cf6:	81a3      	strhlt	r3, [r4, #12]
 8004cf8:	bd10      	pop	{r4, pc}

08004cfa <__swrite>:
 8004cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfe:	461f      	mov	r7, r3
 8004d00:	898b      	ldrh	r3, [r1, #12]
 8004d02:	4605      	mov	r5, r0
 8004d04:	05db      	lsls	r3, r3, #23
 8004d06:	460c      	mov	r4, r1
 8004d08:	4616      	mov	r6, r2
 8004d0a:	d505      	bpl.n	8004d18 <__swrite+0x1e>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d14:	f000 f868 	bl	8004de8 <_lseek_r>
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	4632      	mov	r2, r6
 8004d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d26:	463b      	mov	r3, r7
 8004d28:	4628      	mov	r0, r5
 8004d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2e:	f000 b817 	b.w	8004d60 <_write_r>

08004d32 <__sseek>:
 8004d32:	b510      	push	{r4, lr}
 8004d34:	460c      	mov	r4, r1
 8004d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3a:	f000 f855 	bl	8004de8 <_lseek_r>
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	bf15      	itete	ne
 8004d44:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d4e:	81a3      	strheq	r3, [r4, #12]
 8004d50:	bf18      	it	ne
 8004d52:	81a3      	strhne	r3, [r4, #12]
 8004d54:	bd10      	pop	{r4, pc}

08004d56 <__sclose>:
 8004d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d5a:	f000 b813 	b.w	8004d84 <_close_r>
	...

08004d60 <_write_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4605      	mov	r5, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4c05      	ldr	r4, [pc, #20]	; (8004d80 <_write_r+0x20>)
 8004d6c:	6022      	str	r2, [r4, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f7fb fe6a 	bl	8000a48 <_write>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d102      	bne.n	8004d7e <_write_r+0x1e>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	b103      	cbz	r3, 8004d7e <_write_r+0x1e>
 8004d7c:	602b      	str	r3, [r5, #0]
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	20000158 	.word	0x20000158

08004d84 <_close_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	2300      	movs	r3, #0
 8004d88:	4c05      	ldr	r4, [pc, #20]	; (8004da0 <_close_r+0x1c>)
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	f7fb fe70 	bl	8000a74 <_close>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_close_r+0x1a>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_close_r+0x1a>
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	20000158 	.word	0x20000158

08004da4 <_fstat_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	2300      	movs	r3, #0
 8004da8:	4c06      	ldr	r4, [pc, #24]	; (8004dc4 <_fstat_r+0x20>)
 8004daa:	4605      	mov	r5, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	f7fb fe6a 	bl	8000a8a <_fstat>
 8004db6:	1c43      	adds	r3, r0, #1
 8004db8:	d102      	bne.n	8004dc0 <_fstat_r+0x1c>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	b103      	cbz	r3, 8004dc0 <_fstat_r+0x1c>
 8004dbe:	602b      	str	r3, [r5, #0]
 8004dc0:	bd38      	pop	{r3, r4, r5, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000158 	.word	0x20000158

08004dc8 <_isatty_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	2300      	movs	r3, #0
 8004dcc:	4c05      	ldr	r4, [pc, #20]	; (8004de4 <_isatty_r+0x1c>)
 8004dce:	4605      	mov	r5, r0
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	6023      	str	r3, [r4, #0]
 8004dd4:	f7fb fe68 	bl	8000aa8 <_isatty>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d102      	bne.n	8004de2 <_isatty_r+0x1a>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	b103      	cbz	r3, 8004de2 <_isatty_r+0x1a>
 8004de0:	602b      	str	r3, [r5, #0]
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	20000158 	.word	0x20000158

08004de8 <_lseek_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4605      	mov	r5, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	2200      	movs	r2, #0
 8004df2:	4c05      	ldr	r4, [pc, #20]	; (8004e08 <_lseek_r+0x20>)
 8004df4:	6022      	str	r2, [r4, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f7fb fe60 	bl	8000abc <_lseek>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d102      	bne.n	8004e06 <_lseek_r+0x1e>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	b103      	cbz	r3, 8004e06 <_lseek_r+0x1e>
 8004e04:	602b      	str	r3, [r5, #0]
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	20000158 	.word	0x20000158

08004e0c <memchr>:
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	b2c9      	uxtb	r1, r1
 8004e10:	4402      	add	r2, r0
 8004e12:	4290      	cmp	r0, r2
 8004e14:	4603      	mov	r3, r0
 8004e16:	d101      	bne.n	8004e1c <memchr+0x10>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e003      	b.n	8004e24 <memchr+0x18>
 8004e1c:	781c      	ldrb	r4, [r3, #0]
 8004e1e:	3001      	adds	r0, #1
 8004e20:	428c      	cmp	r4, r1
 8004e22:	d1f6      	bne.n	8004e12 <memchr+0x6>
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd10      	pop	{r4, pc}

08004e28 <__malloc_lock>:
 8004e28:	4770      	bx	lr

08004e2a <__malloc_unlock>:
 8004e2a:	4770      	bx	lr

08004e2c <_read_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4605      	mov	r5, r0
 8004e30:	4608      	mov	r0, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	2200      	movs	r2, #0
 8004e36:	4c05      	ldr	r4, [pc, #20]	; (8004e4c <_read_r+0x20>)
 8004e38:	6022      	str	r2, [r4, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f7fb fde6 	bl	8000a0c <_read>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d102      	bne.n	8004e4a <_read_r+0x1e>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	b103      	cbz	r3, 8004e4a <_read_r+0x1e>
 8004e48:	602b      	str	r3, [r5, #0]
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	20000158 	.word	0x20000158

08004e50 <_init>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr

08004e5c <_fini>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr
