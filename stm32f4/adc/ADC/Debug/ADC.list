
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080047a0  080047a0  000147a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  080047b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          000010c0  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001138  20001138  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010a5b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002212  00000000  00000000  00030b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000948  00000000  00000000  00032d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000860  00000000  00000000  00033660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000048c3  00000000  00000000  00033ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003171  00000000  00000000  00038783  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003b8f4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c9c  00000000  00000000  0003b970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004674 	.word	0x08004674

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08004674 	.word	0x08004674

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 fe33 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f002 fde8 	bl	80031a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fe4b 	bl	800129e <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 fe13 	bl	800124a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000010 	.word	0x20000010
 800063c:	20000004 	.word	0x20000004
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004
 8000668:	20001048 	.word	0x20001048

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20001048 	.word	0x20001048

08000684 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d101      	bne.n	800069a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	e033      	b.n	8000702 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d109      	bne.n	80006b6 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f002 fdcb 	bl	800324c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d118      	bne.n	80006f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ca:	f023 0302 	bic.w	r3, r3, #2
 80006ce:	f043 0202 	orr.w	r2, r3, #2
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 fb66 	bl	8000da8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	f023 0303 	bic.w	r3, r3, #3
 80006ea:	f043 0201 	orr.w	r2, r3, #1
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	641a      	str	r2, [r3, #64]	; 0x40
 80006f2:	e001      	b.n	80006f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000700:	7bfb      	ldrb	r3, [r7, #15]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b084      	sub	sp, #16
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	2b02      	cmp	r3, #2
 8000726:	bf0c      	ite	eq
 8000728:	2301      	moveq	r3, #1
 800072a:	2300      	movne	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f003 0320 	and.w	r3, r3, #32
 800073a:	2b20      	cmp	r3, #32
 800073c:	bf0c      	ite	eq
 800073e:	2301      	moveq	r3, #1
 8000740:	2300      	movne	r3, #0
 8000742:	b2db      	uxtb	r3, r3
 8000744:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d049      	beq.n	80007e0 <HAL_ADC_IRQHandler+0xd6>
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d046      	beq.n	80007e0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	2b00      	cmp	r3, #0
 800075c:	d105      	bne.n	800076a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000774:	2b00      	cmp	r3, #0
 8000776:	d12b      	bne.n	80007d0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800077c:	2b00      	cmp	r3, #0
 800077e:	d127      	bne.n	80007d0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000786:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800078a:	2b00      	cmp	r3, #0
 800078c:	d006      	beq.n	800079c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000798:	2b00      	cmp	r3, #0
 800079a:	d119      	bne.n	80007d0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	6812      	ldr	r2, [r2, #0]
 80007a4:	6852      	ldr	r2, [r2, #4]
 80007a6:	f022 0220 	bic.w	r2, r2, #32
 80007aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d105      	bne.n	80007d0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f043 0201 	orr.w	r2, r3, #1
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */ 
    HAL_ADC_ConvCpltCallback(hadc);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f002 fab3 	bl	8002d3c <HAL_ADC_ConvCpltCallback>
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f06f 0212 	mvn.w	r2, #18
 80007de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf0c      	ite	eq
 80007ee:	2301      	moveq	r3, #1
 80007f0:	2300      	movne	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000800:	2b80      	cmp	r3, #128	; 0x80
 8000802:	bf0c      	ite	eq
 8000804:	2301      	moveq	r3, #1
 8000806:	2300      	movne	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d057      	beq.n	80008c2 <HAL_ADC_IRQHandler+0x1b8>
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d054      	beq.n	80008c2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 0310 	and.w	r3, r3, #16
 8000820:	2b00      	cmp	r3, #0
 8000822:	d105      	bne.n	8000830 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d139      	bne.n	80008b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000844:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000848:	2b00      	cmp	r3, #0
 800084a:	d006      	beq.n	800085a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000856:	2b00      	cmp	r3, #0
 8000858:	d12b      	bne.n	80008b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000864:	2b00      	cmp	r3, #0
 8000866:	d124      	bne.n	80008b2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000872:	2b00      	cmp	r3, #0
 8000874:	d11d      	bne.n	80008b2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800087a:	2b00      	cmp	r3, #0
 800087c:	d119      	bne.n	80008b2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	6852      	ldr	r2, [r2, #4]
 8000888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800088c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d105      	bne.n	80008b2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f043 0201 	orr.w	r2, r3, #1
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Conversion complete callback */ 
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 fbea 	bl	800108c <HAL_ADCEx_InjectedConvCpltCallback>
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f06f 020c 	mvn.w	r2, #12
 80008c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e2:	2b40      	cmp	r3, #64	; 0x40
 80008e4:	bf0c      	ite	eq
 80008e6:	2301      	moveq	r3, #1
 80008e8:	2300      	movne	r3, #0
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d017      	beq.n	8000924 <HAL_ADC_IRQHandler+0x21a>
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d014      	beq.n	8000924 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	2b01      	cmp	r3, #1
 8000906:	d10d      	bne.n	8000924 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f000 f90b 	bl	8000b30 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f06f 0201 	mvn.w	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	2b20      	cmp	r3, #32
 8000930:	bf0c      	ite	eq
 8000932:	2301      	moveq	r3, #1
 8000934:	2300      	movne	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000948:	bf0c      	ite	eq
 800094a:	2301      	moveq	r3, #1
 800094c:	2300      	movne	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d015      	beq.n	8000984 <HAL_ADC_IRQHandler+0x27a>
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d012      	beq.n	8000984 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f043 0202 	orr.w	r2, r3, #2
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f06f 0220 	mvn.w	r2, #32
 8000972:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f000 f8e5 	bl	8000b44 <HAL_ADC_ErrorCallback>
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f06f 0220 	mvn.w	r2, #32
 8000982:	601a      	str	r2, [r3, #0]
  }
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d101      	bne.n	80009aa <HAL_ADC_Start_DMA+0x1e>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e0b0      	b.n	8000b0c <HAL_ADC_Start_DMA+0x180>
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2201      	movs	r2, #1
 80009ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d018      	beq.n	80009f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	6892      	ldr	r2, [r2, #8]
 80009ca:	f042 0201 	orr.w	r2, r2, #1
 80009ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009d0:	4b50      	ldr	r3, [pc, #320]	; (8000b14 <HAL_ADC_Start_DMA+0x188>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a50      	ldr	r2, [pc, #320]	; (8000b18 <HAL_ADC_Start_DMA+0x18c>)
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	0c9a      	lsrs	r2, r3, #18
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80009e4:	e002      	b.n	80009ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1f9      	bne.n	80009e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 8084 	beq.w	8000b0a <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d007      	beq.n	8000a34 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d006      	beq.n	8000a4e <HAL_ADC_Start_DMA+0xc2>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	f023 0206 	bic.w	r2, r3, #6
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	645a      	str	r2, [r3, #68]	; 0x44
 8000a4c:	e002      	b.n	8000a54 <HAL_ADC_Start_DMA+0xc8>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2200      	movs	r2, #0
 8000a52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <HAL_ADC_Start_DMA+0x190>)
 8000a5e:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a64:	4a2e      	ldr	r2, [pc, #184]	; (8000b20 <HAL_ADC_Start_DMA+0x194>)
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <HAL_ADC_Start_DMA+0x198>)
 8000a6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a74:	4a2c      	ldr	r2, [pc, #176]	; (8000b28 <HAL_ADC_Start_DMA+0x19c>)
 8000a76:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000a80:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	6812      	ldr	r2, [r2, #0]
 8000a8a:	6852      	ldr	r2, [r2, #4]
 8000a8c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000a90:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	6892      	ldr	r2, [r2, #8]
 8000a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000aa0:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	334c      	adds	r3, #76	; 0x4c
 8000aac:	4619      	mov	r1, r3
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f000 fcd9 	bl	8001468 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 031f 	and.w	r3, r3, #31
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10f      	bne.n	8000ae2 <HAL_ADC_Start_DMA+0x156>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d11c      	bne.n	8000b0a <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	6892      	ldr	r2, [r2, #8]
 8000ada:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	e013      	b.n	8000b0a <HAL_ADC_Start_DMA+0x17e>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a11      	ldr	r2, [pc, #68]	; (8000b2c <HAL_ADC_Start_DMA+0x1a0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d10e      	bne.n	8000b0a <HAL_ADC_Start_DMA+0x17e>
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d107      	bne.n	8000b0a <HAL_ADC_Start_DMA+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	6892      	ldr	r2, [r2, #8]
 8000b04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000b08:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000010 	.word	0x20000010
 8000b18:	431bde83 	.word	0x431bde83
 8000b1c:	40012300 	.word	0x40012300
 8000b20:	08000f9d 	.word	0x08000f9d
 8000b24:	08001043 	.word	0x08001043
 8000b28:	0800105f 	.word	0x0800105f
 8000b2c:	40012000 	.word	0x40012000

08000b30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b58:	b490      	push	{r4, r7}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d101      	bne.n	8000b74 <HAL_ADC_ConfigChannel+0x1c>
 8000b70:	2302      	movs	r3, #2
 8000b72:	e109      	b.n	8000d88 <HAL_ADC_ConfigChannel+0x230>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2201      	movs	r2, #1
 8000b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b09      	cmp	r3, #9
 8000b82:	d926      	bls.n	8000bd2 <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68d9      	ldr	r1, [r3, #12]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	4603      	mov	r3, r0
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4403      	add	r3, r0
 8000b9c:	3b1e      	subs	r3, #30
 8000b9e:	2007      	movs	r0, #7
 8000ba0:	fa00 f303 	lsl.w	r3, r0, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	400b      	ands	r3, r1
 8000ba8:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68d9      	ldr	r1, [r3, #12]
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	6898      	ldr	r0, [r3, #8]
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	461c      	mov	r4, r3
 8000bc0:	4623      	mov	r3, r4
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4423      	add	r3, r4
 8000bc6:	3b1e      	subs	r3, #30
 8000bc8:	fa00 f303 	lsl.w	r3, r0, r3
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	60d3      	str	r3, [r2, #12]
 8000bd0:	e023      	b.n	8000c1a <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6919      	ldr	r1, [r3, #16]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	4603      	mov	r3, r0
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4403      	add	r3, r0
 8000bea:	2007      	movs	r0, #7
 8000bec:	fa00 f303 	lsl.w	r3, r0, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	400b      	ands	r3, r1
 8000bf4:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6919      	ldr	r1, [r3, #16]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	6898      	ldr	r0, [r3, #8]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	461c      	mov	r4, r3
 8000c0c:	4623      	mov	r3, r4
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4423      	add	r3, r4
 8000c12:	fa00 f303 	lsl.w	r3, r0, r3
 8000c16:	430b      	orrs	r3, r1
 8000c18:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d824      	bhi.n	8000c6c <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6819      	ldr	r1, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	3b05      	subs	r3, #5
 8000c38:	221f      	movs	r2, #31
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	4003      	ands	r3, r0
 8000c42:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461c      	mov	r4, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	3b05      	subs	r3, #5
 8000c62:	fa04 f303 	lsl.w	r3, r4, r3
 8000c66:	4303      	orrs	r3, r0
 8000c68:	634b      	str	r3, [r1, #52]	; 0x34
 8000c6a:	e04c      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b0c      	cmp	r3, #12
 8000c72:	d824      	bhi.n	8000cbe <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6819      	ldr	r1, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	3b23      	subs	r3, #35	; 0x23
 8000c8a:	221f      	movs	r2, #31
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	4003      	ands	r3, r0
 8000c94:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6819      	ldr	r1, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	461c      	mov	r4, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	3b23      	subs	r3, #35	; 0x23
 8000cb4:	fa04 f303 	lsl.w	r3, r4, r3
 8000cb8:	4303      	orrs	r3, r0
 8000cba:	630b      	str	r3, [r1, #48]	; 0x30
 8000cbc:	e023      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3b41      	subs	r3, #65	; 0x41
 8000cd4:	221f      	movs	r2, #31
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	4003      	ands	r3, r0
 8000cde:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6819      	ldr	r1, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	461c      	mov	r4, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3b41      	subs	r3, #65	; 0x41
 8000cfe:	fa04 f303 	lsl.w	r3, r4, r3
 8000d02:	4303      	orrs	r3, r0
 8000d04:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d06:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <HAL_ADC_ConfigChannel+0x23c>)
 8000d08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <HAL_ADC_ConfigChannel+0x240>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d109      	bne.n	8000d28 <HAL_ADC_ConfigChannel+0x1d0>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b12      	cmp	r3, #18
 8000d1a:	d105      	bne.n	8000d28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1a      	ldr	r2, [pc, #104]	; (8000d98 <HAL_ADC_ConfigChannel+0x240>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d125      	bne.n	8000d7e <HAL_ADC_ConfigChannel+0x226>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_ADC_ConfigChannel+0x244>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d003      	beq.n	8000d44 <HAL_ADC_ConfigChannel+0x1ec>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b11      	cmp	r3, #17
 8000d42:	d11c      	bne.n	8000d7e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <HAL_ADC_ConfigChannel+0x244>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d111      	bne.n	8000d7e <HAL_ADC_ConfigChannel+0x226>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_ADC_ConfigChannel+0x248>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <HAL_ADC_ConfigChannel+0x24c>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	0c9a      	lsrs	r2, r3, #18
 8000d66:	4613      	mov	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d70:	e002      	b.n	8000d78 <HAL_ADC_ConfigChannel+0x220>
      {
        counter--;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f9      	bne.n	8000d72 <HAL_ADC_ConfigChannel+0x21a>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc90      	pop	{r4, r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40012300 	.word	0x40012300
 8000d98:	40012000 	.word	0x40012000
 8000d9c:	10000012 	.word	0x10000012
 8000da0:	20000010 	.word	0x20000010
 8000da4:	431bde83 	.word	0x431bde83

08000da8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000db0:	4b78      	ldr	r3, [pc, #480]	; (8000f94 <ADC_Init+0x1ec>)
 8000db2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	6852      	ldr	r2, [r2, #4]
 8000dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ddc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	6851      	ldr	r1, [r2, #4]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6912      	ldr	r2, [r2, #16]
 8000dec:	0212      	lsls	r2, r2, #8
 8000dee:	430a      	orrs	r2, r1
 8000df0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	6852      	ldr	r2, [r2, #4]
 8000dfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	6851      	ldr	r1, [r2, #4]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	6892      	ldr	r2, [r2, #8]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	6892      	ldr	r2, [r2, #8]
 8000e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6812      	ldr	r2, [r2, #0]
 8000e2c:	6891      	ldr	r1, [r2, #8]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68d2      	ldr	r2, [r2, #12]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	4a57      	ldr	r2, [pc, #348]	; (8000f98 <ADC_Init+0x1f0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d022      	beq.n	8000e86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	6812      	ldr	r2, [r2, #0]
 8000e48:	6892      	ldr	r2, [r2, #8]
 8000e4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	6891      	ldr	r1, [r2, #8]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	6892      	ldr	r2, [r2, #8]
 8000e6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	6891      	ldr	r1, [r2, #8]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e80:	430a      	orrs	r2, r1
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	e00f      	b.n	8000ea6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	6892      	ldr	r2, [r2, #8]
 8000e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	6892      	ldr	r2, [r2, #8]
 8000ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ea4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	6892      	ldr	r2, [r2, #8]
 8000eb0:	f022 0202 	bic.w	r2, r2, #2
 8000eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	6891      	ldr	r1, [r2, #8]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6992      	ldr	r2, [r2, #24]
 8000ec4:	0052      	lsls	r2, r2, #1
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d01b      	beq.n	8000f0a <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	6812      	ldr	r2, [r2, #0]
 8000eda:	6852      	ldr	r2, [r2, #4]
 8000edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ee0:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	6812      	ldr	r2, [r2, #0]
 8000eea:	6852      	ldr	r2, [r2, #4]
 8000eec:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000ef0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	6851      	ldr	r1, [r2, #4]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f00:	3a01      	subs	r2, #1
 8000f02:	0352      	lsls	r2, r2, #13
 8000f04:	430a      	orrs	r2, r1
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	e007      	b.n	8000f1a <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6812      	ldr	r2, [r2, #0]
 8000f12:	6852      	ldr	r2, [r2, #4]
 8000f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f18:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000f24:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	69d2      	ldr	r2, [r2, #28]
 8000f38:	3a01      	subs	r2, #1
 8000f3a:	0512      	lsls	r2, r2, #20
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6812      	ldr	r2, [r2, #0]
 8000f48:	6892      	ldr	r2, [r2, #8]
 8000f4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6812      	ldr	r2, [r2, #0]
 8000f58:	6891      	ldr	r1, [r2, #8]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f5e:	0252      	lsls	r2, r2, #9
 8000f60:	430a      	orrs	r2, r1
 8000f62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	6892      	ldr	r2, [r2, #8]
 8000f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	6891      	ldr	r1, [r2, #8]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6952      	ldr	r2, [r2, #20]
 8000f82:	0292      	lsls	r2, r2, #10
 8000f84:	430a      	orrs	r2, r1
 8000f86:	609a      	str	r2, [r3, #8]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	40012300 	.word	0x40012300
 8000f98:	0f000001 	.word	0x0f000001

08000f9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d13c      	bne.n	8001030 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d12b      	bne.n	8001028 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d127      	bne.n	8001028 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d119      	bne.n	8001028 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	6852      	ldr	r2, [r2, #4]
 8000ffe:	f022 0220 	bic.w	r2, r2, #32
 8001002:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d105      	bne.n	8001028 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f043 0201 	orr.w	r2, r3, #1
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f001 fe87 	bl	8002d3c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800102e:	e004      	b.n	800103a <ADC_DMAConvCplt+0x9e>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	4798      	blx	r3
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800104e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f001 fe8b 	bl	8002d6c <HAL_ADC_ConvHalfCpltCallback>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f043 0204 	orr.w	r2, r3, #4
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f7ff fd60 	bl	8000b44 <HAL_ADC_ErrorCallback>
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800110e:	4909      	ldr	r1, [pc, #36]	; (8001134 <NVIC_EnableIRQ+0x30>)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	095b      	lsrs	r3, r3, #5
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	f002 021f 	and.w	r2, r2, #31
 800111c:	2001      	movs	r0, #1
 800111e:	fa00 f202 	lsl.w	r2, r0, r2
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100

08001138 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	da0b      	bge.n	8001164 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	490d      	ldr	r1, [pc, #52]	; (8001184 <NVIC_SetPriority+0x4c>)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	3b04      	subs	r3, #4
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001162:	e009      	b.n	8001178 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	4908      	ldr	r1, [pc, #32]	; (8001188 <NVIC_SetPriority+0x50>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00
 8001188:	e000e100 	.word	0xe000e100

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	2201      	movs	r2, #1
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	401a      	ands	r2, r3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d2:	2101      	movs	r1, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	1e59      	subs	r1, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff90 	bl	8001138 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff2f 	bl	80010a0 <NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff44 	bl	80010e8 <NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff90 	bl	800118c <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5f 	bl	8001138 <NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff37 	bl	8001104 <NVIC_EnableIRQ>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffa2 	bl	80011f0 <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d106      	bne.n	80012d4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80012d2:	e005      	b.n	80012e0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80012d4:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 0304 	bic.w	r3, r3, #4
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80012f4:	f000 f802 	bl	80012fc <HAL_SYSTICK_Callback>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff f9a8 	bl	800066c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e099      	b.n	800145c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	f022 0201 	bic.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001348:	e00f      	b.n	800136a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800134a:	f7ff f98f 	bl	800066c <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b05      	cmp	r3, #5
 8001356:	d908      	bls.n	800136a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2220      	movs	r2, #32
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e078      	b.n	800145c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1e8      	bne.n	800134a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <HAL_DMA_Init+0x158>)
 8001384:	4013      	ands	r3, r2
 8001386:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d107      	bne.n	80013d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	4313      	orrs	r3, r2
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f023 0307 	bic.w	r3, r3, #7
 80013ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	d117      	bne.n	800142e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4313      	orrs	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00e      	beq.n	800142e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 fa77 	bl	8001904 <DMA_CheckFifoParam>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2240      	movs	r2, #64	; 0x40
 8001420:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800142a:	2301      	movs	r3, #1
 800142c:	e016      	b.n	800145c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 fa2e 	bl	8001898 <DMA_CalcBaseAndBitshift>
 800143c:	4603      	mov	r3, r0
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001444:	223f      	movs	r2, #63	; 0x3f
 8001446:	409a      	lsls	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	f010803f 	.word	0xf010803f

08001468 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_DMA_Start_IT+0x26>
 800148a:	2302      	movs	r3, #2
 800148c:	e048      	b.n	8001520 <HAL_DMA_Start_IT+0xb8>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d137      	bne.n	8001512 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2202      	movs	r2, #2
 80014a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 f9c0 	bl	800183c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c0:	223f      	movs	r2, #63	; 0x3f
 80014c2:	409a      	lsls	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	f042 0216 	orr.w	r2, r2, #22
 80014d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	6952      	ldr	r2, [r2, #20]
 80014e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	f042 0208 	orr.w	r2, r2, #8
 80014fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e005      	b.n	800151e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800151a:	2302      	movs	r3, #2
 800151c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800151e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001534:	4b92      	ldr	r3, [pc, #584]	; (8001780 <HAL_DMA_IRQHandler+0x258>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a92      	ldr	r2, [pc, #584]	; (8001784 <HAL_DMA_IRQHandler+0x25c>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	0a9b      	lsrs	r3, r3, #10
 8001540:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	2208      	movs	r2, #8
 8001554:	409a      	lsls	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d01a      	beq.n	8001594 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	f022 0204 	bic.w	r2, r2, #4
 800157a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	2208      	movs	r2, #8
 8001582:	409a      	lsls	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001598:	2201      	movs	r2, #1
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d012      	beq.n	80015ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	2201      	movs	r2, #1
 80015b8:	409a      	lsls	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c2:	f043 0202 	orr.w	r2, r3, #2
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ce:	2204      	movs	r2, #4
 80015d0:	409a      	lsls	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d012      	beq.n	8001600 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00b      	beq.n	8001600 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	2204      	movs	r2, #4
 80015ee:	409a      	lsls	r2, r3
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f8:	f043 0204 	orr.w	r2, r3, #4
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	2210      	movs	r2, #16
 8001606:	409a      	lsls	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d043      	beq.n	8001698 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d03c      	beq.n	8001698 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2210      	movs	r2, #16
 8001624:	409a      	lsls	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d018      	beq.n	800166a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d108      	bne.n	8001658 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	2b00      	cmp	r3, #0
 800164c:	d024      	beq.n	8001698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
 8001656:	e01f      	b.n	8001698 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01b      	beq.n	8001698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	4798      	blx	r3
 8001668:	e016      	b.n	8001698 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d107      	bne.n	8001688 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	f022 0208 	bic.w	r2, r2, #8
 8001686:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169c:	2220      	movs	r2, #32
 800169e:	409a      	lsls	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 808e 	beq.w	80017c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8086 	beq.w	80017c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2220      	movs	r2, #32
 80016c0:	409a      	lsls	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d136      	bne.n	8001740 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	f022 0216 	bic.w	r2, r2, #22
 80016e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	6952      	ldr	r2, [r2, #20]
 80016ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d103      	bne.n	8001702 <HAL_DMA_IRQHandler+0x1da>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	f022 0208 	bic.w	r2, r2, #8
 8001710:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	223f      	movs	r2, #63	; 0x3f
 8001718:	409a      	lsls	r2, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001732:	2b00      	cmp	r3, #0
 8001734:	d07d      	beq.n	8001832 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4798      	blx	r3
        }
        return;
 800173e:	e078      	b.n	8001832 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d01c      	beq.n	8001788 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d108      	bne.n	800176e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	2b00      	cmp	r3, #0
 8001762:	d030      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	4798      	blx	r3
 800176c:	e02b      	b.n	80017c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001772:	2b00      	cmp	r3, #0
 8001774:	d027      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4798      	blx	r3
 800177e:	e022      	b.n	80017c6 <HAL_DMA_IRQHandler+0x29e>
 8001780:	20000010 	.word	0x20000010
 8001784:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	f022 0210 	bic.w	r2, r2, #16
 80017a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d032      	beq.n	8001834 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d022      	beq.n	8001820 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2205      	movs	r2, #5
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d807      	bhi.n	800180e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f2      	bne.n	80017f2 <HAL_DMA_IRQHandler+0x2ca>
 800180c:	e000      	b.n	8001810 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800180e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4798      	blx	r3
 8001830:	e000      	b.n	8001834 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001832:	bf00      	nop
    }
  }
}
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop

0800183c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001858:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b40      	cmp	r3, #64	; 0x40
 8001868:	d108      	bne.n	800187c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800187a:	e007      	b.n	800188c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3b10      	subs	r3, #16
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <DMA_CalcBaseAndBitshift+0x64>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <DMA_CalcBaseAndBitshift+0x68>)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d909      	bls.n	80018da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018ce:	f023 0303 	bic.w	r3, r3, #3
 80018d2:	1d1a      	adds	r2, r3, #4
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	659a      	str	r2, [r3, #88]	; 0x58
 80018d8:	e007      	b.n	80018ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018e2:	f023 0303 	bic.w	r3, r3, #3
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	aaaaaaab 	.word	0xaaaaaaab
 8001900:	080046e8 	.word	0x080046e8

08001904 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d11f      	bne.n	800195e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d855      	bhi.n	80019d0 <DMA_CheckFifoParam+0xcc>
 8001924:	a201      	add	r2, pc, #4	; (adr r2, 800192c <DMA_CheckFifoParam+0x28>)
 8001926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192a:	bf00      	nop
 800192c:	0800193d 	.word	0x0800193d
 8001930:	0800194f 	.word	0x0800194f
 8001934:	0800193d 	.word	0x0800193d
 8001938:	080019d1 	.word	0x080019d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d045      	beq.n	80019d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800194c:	e042      	b.n	80019d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001956:	d13f      	bne.n	80019d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800195c:	e03c      	b.n	80019d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001966:	d121      	bne.n	80019ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d836      	bhi.n	80019dc <DMA_CheckFifoParam+0xd8>
 800196e:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <DMA_CheckFifoParam+0x70>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	08001985 	.word	0x08001985
 8001978:	0800198b 	.word	0x0800198b
 800197c:	08001985 	.word	0x08001985
 8001980:	0800199d 	.word	0x0800199d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      break;
 8001988:	e02f      	b.n	80019ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d024      	beq.n	80019e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800199a:	e021      	b.n	80019e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019a4:	d11e      	bne.n	80019e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019aa:	e01b      	b.n	80019e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d902      	bls.n	80019b8 <DMA_CheckFifoParam+0xb4>
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d003      	beq.n	80019be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019b6:	e018      	b.n	80019ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
      break;
 80019bc:	e015      	b.n	80019ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00e      	beq.n	80019e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
      break;
 80019ce:	e00b      	b.n	80019e8 <DMA_CheckFifoParam+0xe4>
      break;
 80019d0:	bf00      	nop
 80019d2:	e00a      	b.n	80019ea <DMA_CheckFifoParam+0xe6>
      break;
 80019d4:	bf00      	nop
 80019d6:	e008      	b.n	80019ea <DMA_CheckFifoParam+0xe6>
      break;
 80019d8:	bf00      	nop
 80019da:	e006      	b.n	80019ea <DMA_CheckFifoParam+0xe6>
      break;
 80019dc:	bf00      	nop
 80019de:	e004      	b.n	80019ea <DMA_CheckFifoParam+0xe6>
      break;
 80019e0:	bf00      	nop
 80019e2:	e002      	b.n	80019ea <DMA_CheckFifoParam+0xe6>
      break;   
 80019e4:	bf00      	nop
 80019e6:	e000      	b.n	80019ea <DMA_CheckFifoParam+0xe6>
      break;
 80019e8:	bf00      	nop
    }
  } 
  
  return status; 
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e177      	b.n	8001d04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8166 	bne.w	8001cfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x4a>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d123      	bne.n	8001a8a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	69b9      	ldr	r1, [r7, #24]
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0203 	and.w	r2, r3, #3
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d00b      	beq.n	8001ade <HAL_GPIO_Init+0xe6>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad2:	2b11      	cmp	r3, #17
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b12      	cmp	r3, #18
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80c0 	beq.w	8001cfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4a65      	ldr	r2, [pc, #404]	; (8001d18 <HAL_GPIO_Init+0x320>)
 8001b84:	4b64      	ldr	r3, [pc, #400]	; (8001d18 <HAL_GPIO_Init+0x320>)
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b62      	ldr	r3, [pc, #392]	; (8001d18 <HAL_GPIO_Init+0x320>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9a:	4a60      	ldr	r2, [pc, #384]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a57      	ldr	r2, [pc, #348]	; (8001d20 <HAL_GPIO_Init+0x328>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d037      	beq.n	8001c36 <HAL_GPIO_Init+0x23e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a56      	ldr	r2, [pc, #344]	; (8001d24 <HAL_GPIO_Init+0x32c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d031      	beq.n	8001c32 <HAL_GPIO_Init+0x23a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a55      	ldr	r2, [pc, #340]	; (8001d28 <HAL_GPIO_Init+0x330>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d02b      	beq.n	8001c2e <HAL_GPIO_Init+0x236>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a54      	ldr	r2, [pc, #336]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d025      	beq.n	8001c2a <HAL_GPIO_Init+0x232>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a53      	ldr	r2, [pc, #332]	; (8001d30 <HAL_GPIO_Init+0x338>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01f      	beq.n	8001c26 <HAL_GPIO_Init+0x22e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <HAL_GPIO_Init+0x33c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x22a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a51      	ldr	r2, [pc, #324]	; (8001d38 <HAL_GPIO_Init+0x340>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x226>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a50      	ldr	r2, [pc, #320]	; (8001d3c <HAL_GPIO_Init+0x344>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x222>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4f      	ldr	r2, [pc, #316]	; (8001d40 <HAL_GPIO_Init+0x348>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x21e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4e      	ldr	r2, [pc, #312]	; (8001d44 <HAL_GPIO_Init+0x34c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x21a>
 8001c0e:	2309      	movs	r3, #9
 8001c10:	e012      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c12:	230a      	movs	r3, #10
 8001c14:	e010      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c16:	2308      	movs	r3, #8
 8001c18:	e00e      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e00c      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c1e:	2306      	movs	r3, #6
 8001c20:	e00a      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c22:	2305      	movs	r3, #5
 8001c24:	e008      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c26:	2304      	movs	r3, #4
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e004      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c36:	2300      	movs	r3, #0
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f002 0203 	and.w	r2, r2, #3
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c48:	4934      	ldr	r1, [pc, #208]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c56:	4b3c      	ldr	r3, [pc, #240]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c7a:	4a33      	ldr	r2, [pc, #204]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c80:	4b31      	ldr	r3, [pc, #196]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca4:	4a28      	ldr	r2, [pc, #160]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cce:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf8:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3301      	adds	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b0f      	cmp	r3, #15
 8001d08:	f67f ae84 	bls.w	8001a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3724      	adds	r7, #36	; 0x24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40021c00 	.word	0x40021c00
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40022400 	.word	0x40022400
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d68:	e003      	b.n	8001d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6a:	887b      	ldrh	r3, [r7, #2]
 8001d6c:	041a      	lsls	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	619a      	str	r2, [r3, #24]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	405a      	eors	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	615a      	str	r2, [r3, #20]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <HAL_PWREx_EnableOverDrive+0x90>)
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_PWREx_EnableOverDrive+0x90>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_PWREx_EnableOverDrive+0x90>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_PWREx_EnableOverDrive+0x94>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd0:	f7fe fc4c 	bl	800066c <HAL_GetTick>
 8001dd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dd6:	e009      	b.n	8001dec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dd8:	f7fe fc48 	bl	800066c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de6:	d901      	bls.n	8001dec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e01f      	b.n	8001e2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e00:	f7fe fc34 	bl	800066c <HAL_GetTick>
 8001e04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e06:	e009      	b.n	8001e1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e08:	f7fe fc30 	bl	800066c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e16:	d901      	bls.n	8001e1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e007      	b.n	8001e2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e28:	d1ee      	bne.n	8001e08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	420e0040 	.word	0x420e0040
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	420e0044 	.word	0x420e0044

08001e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e22d      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d075      	beq.n	8001f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e62:	4ba3      	ldr	r3, [pc, #652]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d00c      	beq.n	8001e88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6e:	4ba0      	ldr	r3, [pc, #640]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d112      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7a:	4b9d      	ldr	r3, [pc, #628]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e86:	d10b      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	4b99      	ldr	r3, [pc, #612]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d05b      	beq.n	8001f4c <HAL_RCC_OscConfig+0x108>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d157      	bne.n	8001f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e208      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d106      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x74>
 8001eaa:	4a91      	ldr	r2, [pc, #580]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	4b90      	ldr	r3, [pc, #576]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xb0>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x98>
 8001ec2:	4a8b      	ldr	r2, [pc, #556]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	4b8a      	ldr	r3, [pc, #552]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4a88      	ldr	r2, [pc, #544]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	4b87      	ldr	r3, [pc, #540]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xb0>
 8001edc:	4a84      	ldr	r2, [pc, #528]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	4b84      	ldr	r3, [pc, #528]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4a81      	ldr	r2, [pc, #516]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001eea:	4b81      	ldr	r3, [pc, #516]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fbb6 	bl	800066c <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f04:	f7fe fbb2 	bl	800066c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1cd      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xc0>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe fba2 	bl	800066c <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7fe fb9e 	bl	800066c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1b9      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b6c      	ldr	r3, [pc, #432]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0xe8>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d063      	beq.n	8002022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f5a:	4b65      	ldr	r3, [pc, #404]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f66:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11c      	bne.n	8001fac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f72:	4b5f      	ldr	r3, [pc, #380]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	4b5c      	ldr	r3, [pc, #368]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x152>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e18d      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4956      	ldr	r1, [pc, #344]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	4b55      	ldr	r3, [pc, #340]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	e03a      	b.n	8002022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <HAL_RCC_OscConfig+0x2b0>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7fe fb57 	bl	800066c <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7fe fb53 	bl	800066c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e16e      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4943      	ldr	r1, [pc, #268]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <HAL_RCC_OscConfig+0x2b0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fb36 	bl	800066c <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002004:	f7fe fb32 	bl	800066c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e14d      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d030      	beq.n	8002090 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d016      	beq.n	8002064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203c:	f7fe fb16 	bl	800066c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe fb12 	bl	800066c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e12d      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x200>
 8002062:	e015      	b.n	8002090 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <HAL_RCC_OscConfig+0x2b4>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7fe faff 	bl	800066c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002072:	f7fe fafb 	bl	800066c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e116      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 8002086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a0 	beq.w	80021de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10f      	bne.n	80020ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4a0f      	ldr	r2, [pc, #60]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_OscConfig+0x2b8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d121      	bne.n	800211e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020da:	4a08      	ldr	r2, [pc, #32]	; (80020fc <HAL_RCC_OscConfig+0x2b8>)
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_RCC_OscConfig+0x2b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e6:	f7fe fac1 	bl	800066c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	e011      	b.n	8002112 <HAL_RCC_OscConfig+0x2ce>
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800
 80020f4:	42470000 	.word	0x42470000
 80020f8:	42470e80 	.word	0x42470e80
 80020fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7fe fab4 	bl	800066c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0cf      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x478>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d106      	bne.n	8002134 <HAL_RCC_OscConfig+0x2f0>
 8002126:	4a66      	ldr	r2, [pc, #408]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 8002128:	4b65      	ldr	r3, [pc, #404]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
 8002132:	e01c      	b.n	800216e <HAL_RCC_OscConfig+0x32a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b05      	cmp	r3, #5
 800213a:	d10c      	bne.n	8002156 <HAL_RCC_OscConfig+0x312>
 800213c:	4a60      	ldr	r2, [pc, #384]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 800213e:	4b60      	ldr	r3, [pc, #384]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 800214a:	4b5d      	ldr	r3, [pc, #372]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6713      	str	r3, [r2, #112]	; 0x70
 8002154:	e00b      	b.n	800216e <HAL_RCC_OscConfig+0x32a>
 8002156:	4a5a      	ldr	r2, [pc, #360]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 8002158:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	4a57      	ldr	r2, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 8002164:	4b56      	ldr	r3, [pc, #344]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d015      	beq.n	80021a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002176:	f7fe fa79 	bl	800066c <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe fa75 	bl	800066c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e08e      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	4b4a      	ldr	r3, [pc, #296]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ee      	beq.n	800217e <HAL_RCC_OscConfig+0x33a>
 80021a0:	e014      	b.n	80021cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7fe fa63 	bl	800066c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7fe fa5f 	bl	800066c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e078      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c0:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ee      	bne.n	80021aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4a3b      	ldr	r2, [pc, #236]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 80021d4:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d064      	beq.n	80022b0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d05c      	beq.n	80022ac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d141      	bne.n	800227e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_RCC_OscConfig+0x480>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe fa34 	bl	800066c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fa30 	bl	800066c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e04b      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002226:	4926      	ldr	r1, [pc, #152]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	019b      	lsls	r3, r3, #6
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	085b      	lsrs	r3, r3, #1
 8002240:	3b01      	subs	r3, #1
 8002242:	041b      	lsls	r3, r3, #16
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	061b      	lsls	r3, r3, #24
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <HAL_RCC_OscConfig+0x480>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe fa09 	bl	800066c <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225e:	f7fe fa05 	bl	800066c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e020      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x41a>
 800227c:	e018      	b.n	80022b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_OscConfig+0x480>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7fe f9f2 	bl	800066c <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe f9ee 	bl	800066c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e009      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_RCC_OscConfig+0x47c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x448>
 80022aa:	e001      	b.n	80022b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40007000 	.word	0x40007000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	42470060 	.word	0x42470060

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0ca      	b.n	8002472 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b67      	ldr	r3, [pc, #412]	; (800247c <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 020f 	and.w	r2, r3, #15
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d20c      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b64      	ldr	r3, [pc, #400]	; (800247c <HAL_RCC_ClockConfig+0x1b4>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b62      	ldr	r3, [pc, #392]	; (800247c <HAL_RCC_ClockConfig+0x1b4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 020f 	and.w	r2, r3, #15
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b6      	b.n	8002472 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4a58      	ldr	r2, [pc, #352]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 800231e:	4b58      	ldr	r3, [pc, #352]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4a52      	ldr	r2, [pc, #328]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002336:	4b52      	ldr	r3, [pc, #328]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800233e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	494f      	ldr	r1, [pc, #316]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002342:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d044      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07d      	b.n	8002472 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d003      	beq.n	8002386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	2b03      	cmp	r3, #3
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	4b3e      	ldr	r3, [pc, #248]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e06d      	b.n	8002472 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	4b3a      	ldr	r3, [pc, #232]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e065      	b.n	8002472 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4936      	ldr	r1, [pc, #216]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	4b35      	ldr	r3, [pc, #212]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 0203 	bic.w	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b8:	f7fe f958 	bl	800066c <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7fe f954 	bl	800066c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e04d      	b.n	8002472 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_ClockConfig+0x1b4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 020f 	and.w	r2, r3, #15
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d90c      	bls.n	8002410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <HAL_RCC_ClockConfig+0x1b4>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b1f      	ldr	r3, [pc, #124]	; (800247c <HAL_RCC_ClockConfig+0x1b4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 020f 	and.w	r2, r3, #15
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e030      	b.n	8002472 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4918      	ldr	r1, [pc, #96]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243a:	4911      	ldr	r1, [pc, #68]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f81d 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8002452:	4601      	mov	r1, r0
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	5cd3      	ldrb	r3, [r2, r3]
 8002462:	fa21 f303 	lsr.w	r3, r1, r3
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800246a:	2000      	movs	r0, #0
 800246c:	f7fe f8ba 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023c00 	.word	0x40023c00
 8002480:	40023800 	.word	0x40023800
 8002484:	080046f0 	.word	0x080046f0
 8002488:	20000010 	.word	0x20000010

0800248c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002490:	b08f      	sub	sp, #60	; 0x3c
 8002492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002498:	2300      	movs	r3, #0
 800249a:	637b      	str	r3, [r7, #52]	; 0x34
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a4:	4b62      	ldr	r3, [pc, #392]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d007      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x34>
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 80b2 	bne.w	800261e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024ba:	4b5e      	ldr	r3, [pc, #376]	; (8002634 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80024be:	e0b1      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024c0:	4b5d      	ldr	r3, [pc, #372]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024c4:	e0ae      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c6:	4b5a      	ldr	r3, [pc, #360]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d0:	4b57      	ldr	r3, [pc, #348]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d04e      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024dc:	4b54      	ldr	r3, [pc, #336]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	f04f 0400 	mov.w	r4, #0
 80024e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	ea01 0103 	and.w	r1, r1, r3
 80024f2:	ea02 0204 	and.w	r2, r2, r4
 80024f6:	460b      	mov	r3, r1
 80024f8:	4614      	mov	r4, r2
 80024fa:	0160      	lsls	r0, r4, #5
 80024fc:	6278      	str	r0, [r7, #36]	; 0x24
 80024fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002500:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002504:	6278      	str	r0, [r7, #36]	; 0x24
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	623b      	str	r3, [r7, #32]
 800250a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800250e:	1a5b      	subs	r3, r3, r1
 8002510:	eb64 0402 	sbc.w	r4, r4, r2
 8002514:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002518:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800251c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002520:	ebb8 0803 	subs.w	r8, r8, r3
 8002524:	eb69 0904 	sbc.w	r9, r9, r4
 8002528:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002540:	eb18 0801 	adds.w	r8, r8, r1
 8002544:	eb49 0902 	adc.w	r9, r9, r2
 8002548:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002560:	4640      	mov	r0, r8
 8002562:	4649      	mov	r1, r9
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	f04f 0400 	mov.w	r4, #0
 800256a:	461a      	mov	r2, r3
 800256c:	4623      	mov	r3, r4
 800256e:	f7fd fe8f 	bl	8000290 <__aeabi_uldivmod>
 8002572:	4603      	mov	r3, r0
 8002574:	460c      	mov	r4, r1
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
 8002578:	e043      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	f04f 0400 	mov.w	r4, #0
 8002584:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	ea01 0103 	and.w	r1, r1, r3
 8002590:	ea02 0204 	and.w	r2, r2, r4
 8002594:	460b      	mov	r3, r1
 8002596:	4614      	mov	r4, r2
 8002598:	0160      	lsls	r0, r4, #5
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	015b      	lsls	r3, r3, #5
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80025ac:	1a5b      	subs	r3, r3, r1
 80025ae:	eb64 0402 	sbc.w	r4, r4, r2
 80025b2:	01a6      	lsls	r6, r4, #6
 80025b4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80025b8:	019d      	lsls	r5, r3, #6
 80025ba:	1aed      	subs	r5, r5, r3
 80025bc:	eb66 0604 	sbc.w	r6, r6, r4
 80025c0:	00f3      	lsls	r3, r6, #3
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	00eb      	lsls	r3, r5, #3
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80025d4:	186d      	adds	r5, r5, r1
 80025d6:	eb46 0602 	adc.w	r6, r6, r2
 80025da:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80025de:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80025e2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80025e6:	4655      	mov	r5, sl
 80025e8:	465e      	mov	r6, fp
 80025ea:	4628      	mov	r0, r5
 80025ec:	4631      	mov	r1, r6
 80025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f0:	f04f 0400 	mov.w	r4, #0
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	f7fd fe4a 	bl	8000290 <__aeabi_uldivmod>
 80025fc:	4603      	mov	r3, r0
 80025fe:	460c      	mov	r4, r1
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	0c1b      	lsrs	r3, r3, #16
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	3301      	adds	r3, #1
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800261c:	e002      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002626:	4618      	mov	r0, r3
 8002628:	373c      	adds	r7, #60	; 0x3c
 800262a:	46bd      	mov	sp, r7
 800262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	00f42400 	.word	0x00f42400
 8002638:	007a1200 	.word	0x007a1200

0800263c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <HAL_RCC_GetHCLKFreq+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000010 	.word	0x20000010

08002654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002658:	f7ff fff0 	bl	800263c <HAL_RCC_GetHCLKFreq>
 800265c:	4601      	mov	r1, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0a9b      	lsrs	r3, r3, #10
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4a03      	ldr	r2, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	08004700 	.word	0x08004700

0800267c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002680:	f7ff ffdc 	bl	800263c <HAL_RCC_GetHCLKFreq>
 8002684:	4601      	mov	r1, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0b5b      	lsrs	r3, r3, #13
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	08004700 	.word	0x08004700

080026a4 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e03f      	b.n	8002736 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fe2c 	bl	8003328 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2224      	movs	r2, #36	; 0x24
 80026d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026e6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f90b 	bl	8002904 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	6912      	ldr	r2, [r2, #16]
 80026f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	6952      	ldr	r2, [r2, #20]
 8002708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800270c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	68d2      	ldr	r2, [r2, #12]
 8002718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800271c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b088      	sub	sp, #32
 8002742:	af02      	add	r7, sp, #8
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	4613      	mov	r3, r2
 800274c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b20      	cmp	r3, #32
 800275c:	f040 8082 	bne.w	8002864 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_UART_Transmit+0x2e>
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e07a      	b.n	8002866 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_UART_Transmit+0x40>
 800277a:	2302      	movs	r3, #2
 800277c:	e073      	b.n	8002866 <HAL_UART_Transmit+0x128>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2221      	movs	r2, #33	; 0x21
 8002790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002794:	f7fd ff6a 	bl	800066c <HAL_GetTick>
 8002798:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	88fa      	ldrh	r2, [r7, #6]
 800279e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	88fa      	ldrh	r2, [r7, #6]
 80027a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80027a6:	e041      	b.n	800282c <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	d121      	bne.n	8002804 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f84f 	bl	800286e <UART_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e045      	b.n	8002866 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	8812      	ldrh	r2, [r2, #0]
 80027e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ea:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3302      	adds	r3, #2
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	e017      	b.n	800282c <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	3301      	adds	r3, #1
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	e013      	b.n	800282c <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2200      	movs	r2, #0
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f82d 	bl	800286e <UART_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e023      	b.n	8002866 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1c59      	adds	r1, r3, #1
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1b8      	bne.n	80027a8 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2200      	movs	r2, #0
 800283e:	2140      	movs	r1, #64	; 0x40
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f814 	bl	800286e <UART_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e00a      	b.n	8002866 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	4613      	mov	r3, r2
 800287c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800287e:	e02c      	b.n	80028da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d028      	beq.n	80028da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <UART_WaitOnFlagUntilTimeout+0x30>
 800288e:	f7fd feed 	bl	800066c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	1ad2      	subs	r2, r2, r3
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	429a      	cmp	r2, r3
 800289c:	d91d      	bls.n	80028da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	68d2      	ldr	r2, [r2, #12]
 80028a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	6952      	ldr	r2, [r2, #20]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e00f      	b.n	80028fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	401a      	ands	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d0c3      	beq.n	8002880 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800291e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002940:	f023 030c 	bic.w	r3, r3, #12
 8002944:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4313      	orrs	r3, r2
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002978:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002994:	f040 80e4 	bne.w	8002b60 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4aab      	ldr	r2, [pc, #684]	; (8002c4c <UART_SetConfig+0x348>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <UART_SetConfig+0xa8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4aaa      	ldr	r2, [pc, #680]	; (8002c50 <UART_SetConfig+0x34c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d16c      	bne.n	8002a86 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681c      	ldr	r4, [r3, #0]
 80029b0:	f7ff fe64 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009a      	lsls	r2, r3, #2
 80029be:	441a      	add	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4aa2      	ldr	r2, [pc, #648]	; (8002c54 <UART_SetConfig+0x350>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	011d      	lsls	r5, r3, #4
 80029d4:	f7ff fe52 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009a      	lsls	r2, r3, #2
 80029e2:	441a      	add	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80029ee:	f7ff fe45 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	4a92      	ldr	r2, [pc, #584]	; (8002c54 <UART_SetConfig+0x350>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2264      	movs	r2, #100	; 0x64
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	1af3      	subs	r3, r6, r3
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	3332      	adds	r3, #50	; 0x32
 8002a1c:	4a8d      	ldr	r2, [pc, #564]	; (8002c54 <UART_SetConfig+0x350>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a2a:	441d      	add	r5, r3
 8002a2c:	f7ff fe26 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	009a      	lsls	r2, r3, #2
 8002a3a:	441a      	add	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a46:	f7ff fe19 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	009a      	lsls	r2, r3, #2
 8002a54:	441a      	add	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	4a7c      	ldr	r2, [pc, #496]	; (8002c54 <UART_SetConfig+0x350>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2264      	movs	r2, #100	; 0x64
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	1af3      	subs	r3, r6, r3
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	3332      	adds	r3, #50	; 0x32
 8002a74:	4a77      	ldr	r2, [pc, #476]	; (8002c54 <UART_SetConfig+0x350>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	442b      	add	r3, r5
 8002a82:	60a3      	str	r3, [r4, #8]
 8002a84:	e154      	b.n	8002d30 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681c      	ldr	r4, [r3, #0]
 8002a8a:	f7ff fde3 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	4a6b      	ldr	r2, [pc, #428]	; (8002c54 <UART_SetConfig+0x350>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	011d      	lsls	r5, r3, #4
 8002aae:	f7ff fdd1 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009a      	lsls	r2, r3, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002ac8:	f7ff fdc4 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009a      	lsls	r2, r3, #2
 8002ad6:	441a      	add	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	4a5c      	ldr	r2, [pc, #368]	; (8002c54 <UART_SetConfig+0x350>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	2264      	movs	r2, #100	; 0x64
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	1af3      	subs	r3, r6, r3
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	3332      	adds	r3, #50	; 0x32
 8002af6:	4a57      	ldr	r2, [pc, #348]	; (8002c54 <UART_SetConfig+0x350>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b04:	441d      	add	r5, r3
 8002b06:	f7ff fda5 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	009a      	lsls	r2, r3, #2
 8002b14:	441a      	add	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b20:	f7ff fd98 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009a      	lsls	r2, r3, #2
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	4a46      	ldr	r2, [pc, #280]	; (8002c54 <UART_SetConfig+0x350>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	2264      	movs	r2, #100	; 0x64
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	1af3      	subs	r3, r6, r3
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	3332      	adds	r3, #50	; 0x32
 8002b4e:	4a41      	ldr	r2, [pc, #260]	; (8002c54 <UART_SetConfig+0x350>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	442b      	add	r3, r5
 8002b5c:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002b5e:	e0e7      	b.n	8002d30 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a39      	ldr	r2, [pc, #228]	; (8002c4c <UART_SetConfig+0x348>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <UART_SetConfig+0x270>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a38      	ldr	r2, [pc, #224]	; (8002c50 <UART_SetConfig+0x34c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d171      	bne.n	8002c58 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681c      	ldr	r4, [r3, #0]
 8002b78:	f7ff fd80 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009a      	lsls	r2, r3, #2
 8002b86:	441a      	add	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	4a30      	ldr	r2, [pc, #192]	; (8002c54 <UART_SetConfig+0x350>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	011d      	lsls	r5, r3, #4
 8002b9c:	f7ff fd6e 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009a      	lsls	r2, r3, #2
 8002baa:	441a      	add	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8002bb6:	f7ff fd61 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	4a20      	ldr	r2, [pc, #128]	; (8002c54 <UART_SetConfig+0x350>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	2264      	movs	r2, #100	; 0x64
 8002bda:	fb02 f303 	mul.w	r3, r2, r3
 8002bde:	1af3      	subs	r3, r6, r3
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	3332      	adds	r3, #50	; 0x32
 8002be4:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <UART_SetConfig+0x350>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf0:	441d      	add	r5, r3
 8002bf2:	f7ff fd43 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009a      	lsls	r2, r3, #2
 8002c00:	441a      	add	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c0c:	f7ff fd36 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	009a      	lsls	r2, r3, #2
 8002c1a:	441a      	add	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <UART_SetConfig+0x350>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	2264      	movs	r2, #100	; 0x64
 8002c30:	fb02 f303 	mul.w	r3, r2, r3
 8002c34:	1af3      	subs	r3, r6, r3
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	3332      	adds	r3, #50	; 0x32
 8002c3a:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <UART_SetConfig+0x350>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	442b      	add	r3, r5
 8002c48:	60a3      	str	r3, [r4, #8]
 8002c4a:	e071      	b.n	8002d30 <UART_SetConfig+0x42c>
 8002c4c:	40011000 	.word	0x40011000
 8002c50:	40011400 	.word	0x40011400
 8002c54:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681c      	ldr	r4, [r3, #0]
 8002c5c:	f7ff fcfa 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009a      	lsls	r2, r3, #2
 8002c6a:	441a      	add	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	4a30      	ldr	r2, [pc, #192]	; (8002d38 <UART_SetConfig+0x434>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	011d      	lsls	r5, r3, #4
 8002c80:	f7ff fce8 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002c84:	4602      	mov	r2, r0
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009a      	lsls	r2, r3, #2
 8002c8e:	441a      	add	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c9a:	f7ff fcdb 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009a      	lsls	r2, r3, #2
 8002ca8:	441a      	add	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	4a20      	ldr	r2, [pc, #128]	; (8002d38 <UART_SetConfig+0x434>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2264      	movs	r2, #100	; 0x64
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	1af3      	subs	r3, r6, r3
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	3332      	adds	r3, #50	; 0x32
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <UART_SetConfig+0x434>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd4:	441d      	add	r5, r3
 8002cd6:	f7ff fcbd 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fbb2 f6f3 	udiv	r6, r2, r3
 8002cf0:	f7ff fcb0 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	441a      	add	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <UART_SetConfig+0x434>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	2264      	movs	r2, #100	; 0x64
 8002d14:	fb02 f303 	mul.w	r3, r2, r3
 8002d18:	1af3      	subs	r3, r6, r3
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	3332      	adds	r3, #50	; 0x32
 8002d1e:	4a06      	ldr	r2, [pc, #24]	; (8002d38 <UART_SetConfig+0x434>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	442b      	add	r3, r5
 8002d2c:	60a3      	str	r3, [r4, #8]
}
 8002d2e:	e7ff      	b.n	8002d30 <UART_SetConfig+0x42c>
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	51eb851f 	.word	0x51eb851f

08002d3c <HAL_ADC_ConvCpltCallback>:
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);

#if (ADC_RUNNING_MODE == ADC_INTERRUPT_MODE) || (ADC_RUNNING_MODE == ADC_DMA_MODE)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
#	if ADC_RUNNING_MODE == ADC_INTERRUPT_MODE
	adc_read_value = HAL_ADC_GetValue(hadc);
	measurements_count++;
#	elif ADC_RUNNING_MODE == ADC_DMA_MODE
	measurements_count += ADC_DMA_HALF_BUFF_SIZE;
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_ADC_ConvCpltCallback+0x28>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002d4c:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <HAL_ADC_ConvCpltCallback+0x28>)
 8002d4e:	6013      	str	r3, [r2, #0]
#	endif

	conversion_cplt_f = 1;
 8002d50:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000094 	.word	0x20000094
 8002d68:	20000098 	.word	0x20000098

08002d6c <HAL_ADC_ConvHalfCpltCallback>:
#endif

#if ADC_RUNNING_MODE == ADC_DMA_MODE
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	measurements_count += ADC_DMA_HALF_BUFF_SIZE;
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002d7c:	4a05      	ldr	r2, [pc, #20]	; (8002d94 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8002d7e:	6013      	str	r3, [r2, #0]

	half_conversion_cplt_f = 1;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000094 	.word	0x20000094
 8002d98:	20000099 	.word	0x20000099

08002d9c <main>:
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
	/* Disable buffering for stdout */
	setvbuf(stdout, NULL, _IONBF, 0);
 8002da2:	4b3f      	ldr	r3, [pc, #252]	; (8002ea0 <main+0x104>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6898      	ldr	r0, [r3, #8]
 8002da8:	2300      	movs	r3, #0
 8002daa:	2202      	movs	r2, #2
 8002dac:	2100      	movs	r1, #0
 8002dae:	f000 fcc3 	bl	8003738 <setvbuf>

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002db2:	f7fd fbf5 	bl	80005a0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002db6:	f000 f889 	bl	8002ecc <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002dba:	f000 f9a5 	bl	8003108 <MX_GPIO_Init>
	MX_DMA_Init();
 8002dbe:	f000 f983 	bl	80030c8 <MX_DMA_Init>
	MX_ADC1_Init();
 8002dc2:	f000 f901 	bl	8002fc8 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8002dc6:	f000 f951 	bl	800306c <MX_USART1_UART_Init>

	/* Initial debug message */
	printf("STM32F4 ADC\r\n");
 8002dca:	4836      	ldr	r0, [pc, #216]	; (8002ea4 <main+0x108>)
 8002dcc:	f000 fcac 	bl	8003728 <puts>
#if ADC_RUNNING_MODE == ADC_BLOCKING_MODE
	HAL_ADC_Start(&hadc1);
#elif ADC_RUNNING_MODE == ADC_INTERRUPT_MODE
	HAL_ADC_Start_IT(&hadc1);
#elif ADC_RUNNING_MODE == ADC_DMA_MODE
	HAL_ADC_Start_DMA(&hadc1, &adc_read_buff[0], ADC_DMA_BUFF_SIZE);
 8002dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dd4:	4934      	ldr	r1, [pc, #208]	; (8002ea8 <main+0x10c>)
 8002dd6:	4835      	ldr	r0, [pc, #212]	; (8002eac <main+0x110>)
 8002dd8:	f7fd fdd8 	bl	800098c <HAL_ADC_Start_DMA>
#endif

	/* Initial output status for LED's in DISC0 board */
	/* NOTE: you can move the initial status to MX_GPIO_Init */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002de2:	4833      	ldr	r0, [pc, #204]	; (8002eb0 <main+0x114>)
 8002de4:	f7fe ffb2 	bl	8001d4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8002de8:	2200      	movs	r2, #0
 8002dea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dee:	4830      	ldr	r0, [pc, #192]	; (8002eb0 <main+0x114>)
 8002df0:	f7fe ffac 	bl	8001d4c <HAL_GPIO_WritePin>

	/* Create and initialize program variables */
	uint32_t heartbeat_timer = HAL_GetTick();
 8002df4:	f7fd fc3a 	bl	800066c <HAL_GetTick>
 8002df8:	6078      	str	r0, [r7, #4]

#if ADC_RUNNING_MODE == ADC_DMA_MODE
	int adc_value_idx = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	603b      	str	r3, [r7, #0]
#endif

	/* Infinite loop */
	while (1)
	{
		if ((HAL_GetTick() - heartbeat_timer) >= HEARTBEAT_PERIOD)
 8002dfe:	f7fd fc35 	bl	800066c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e0c:	d30c      	bcc.n	8002e28 <main+0x8c>
		{
			heartbeat_timer = HAL_GetTick();
 8002e0e:	f7fd fc2d 	bl	800066c <HAL_GetTick>
 8002e12:	6078      	str	r0, [r7, #4]

			HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002e14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e18:	4825      	ldr	r0, [pc, #148]	; (8002eb0 <main+0x114>)
 8002e1a:	f7fe ffb0 	bl	8001d7e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002e1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e22:	4823      	ldr	r0, [pc, #140]	; (8002eb0 <main+0x114>)
 8002e24:	f7fe ffab 	bl	8001d7e <HAL_GPIO_TogglePin>
		{
			conversion_cplt_f = 0;
			printf("ADC measure #%010lu: %04lu\r", measurements_count, adc_read_value);
		}
#elif ADC_RUNNING_MODE == ADC_DMA_MODE
		if (half_conversion_cplt_f != 0)
 8002e28:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <main+0x118>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d019      	beq.n	8002e64 <main+0xc8>
		{
			half_conversion_cplt_f = 0;
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <main+0x118>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
			for (adc_value_idx = 0; adc_value_idx < ADC_DMA_HALF_BUFF_SIZE; ++adc_value_idx)
 8002e36:	2300      	movs	r3, #0
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	e00e      	b.n	8002e5a <main+0xbe>
			{
				printf("ADC measures #%010lu: %04lu\r", measurements_count, adc_read_first_half_buff[adc_value_idx]);
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <main+0x11c>)
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <main+0x120>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	481c      	ldr	r0, [pc, #112]	; (8002ec0 <main+0x124>)
 8002e50:	f000 fbf6 	bl	8003640 <iprintf>
			for (adc_value_idx = 0; adc_value_idx < ADC_DMA_HALF_BUFF_SIZE; ++adc_value_idx)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e60:	dbec      	blt.n	8002e3c <main+0xa0>
 8002e62:	e7cc      	b.n	8002dfe <main+0x62>
			}
		}
		else if (conversion_cplt_f != 0)
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <main+0x128>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0c8      	beq.n	8002dfe <main+0x62>
		{
			conversion_cplt_f = 0;
 8002e6c:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <main+0x128>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
			for (adc_value_idx = 0; adc_value_idx < ADC_DMA_HALF_BUFF_SIZE; ++adc_value_idx)
 8002e72:	2300      	movs	r3, #0
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	e00e      	b.n	8002e96 <main+0xfa>
			{
				printf("ADC measures #%010lu: %04lu\r", measurements_count, adc_read_second_half_buff[adc_value_idx]);
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <main+0x11c>)
 8002e7a:	6819      	ldr	r1, [r3, #0]
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <main+0x12c>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	480d      	ldr	r0, [pc, #52]	; (8002ec0 <main+0x124>)
 8002e8c:	f000 fbd8 	bl	8003640 <iprintf>
			for (adc_value_idx = 0; adc_value_idx < ADC_DMA_HALF_BUFF_SIZE; ++adc_value_idx)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e9c:	dbec      	blt.n	8002e78 <main+0xdc>
		if ((HAL_GetTick() - heartbeat_timer) >= HEARTBEAT_PERIOD)
 8002e9e:	e7ae      	b.n	8002dfe <main+0x62>
 8002ea0:	20000014 	.word	0x20000014
 8002ea4:	0800468c 	.word	0x0800468c
 8002ea8:	2000009c 	.word	0x2000009c
 8002eac:	2000104c 	.word	0x2000104c
 8002eb0:	40021800 	.word	0x40021800
 8002eb4:	20000099 	.word	0x20000099
 8002eb8:	20000094 	.word	0x20000094
 8002ebc:	20000008 	.word	0x20000008
 8002ec0:	0800469c 	.word	0x0800469c
 8002ec4:	20000098 	.word	0x20000098
 8002ec8:	2000000c 	.word	0x2000000c

08002ecc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b094      	sub	sp, #80	; 0x50
 8002ed0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4a38      	ldr	r2, [pc, #224]	; (8002fb8 <SystemClock_Config+0xec>)
 8002ed8:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <SystemClock_Config+0xec>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <SystemClock_Config+0xec>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	4a32      	ldr	r2, [pc, #200]	; (8002fbc <SystemClock_Config+0xf0>)
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <SystemClock_Config+0xf0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <SystemClock_Config+0xf0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f14:	2302      	movs	r3, #2
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002f1e:	2304      	movs	r3, #4
 8002f20:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002f22:	23b4      	movs	r3, #180	; 0xb4
 8002f24:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f26:	2302      	movs	r3, #2
 8002f28:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f2e:	f107 0320 	add.w	r3, r7, #32
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe ff86 	bl	8001e44 <HAL_RCC_OscConfig>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <SystemClock_Config+0x7a>
	{
		_Error_Handler(__FILE__, __LINE__);
 8002f3e:	21e9      	movs	r1, #233	; 0xe9
 8002f40:	481f      	ldr	r0, [pc, #124]	; (8002fc0 <SystemClock_Config+0xf4>)
 8002f42:	f000 f92b 	bl	800319c <_Error_Handler>
	}

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f46:	f7fe ff2d 	bl	8001da4 <HAL_PWREx_EnableOverDrive>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <SystemClock_Config+0x8c>
	{
		_Error_Handler(__FILE__, __LINE__);
 8002f50:	21f0      	movs	r1, #240	; 0xf0
 8002f52:	481b      	ldr	r0, [pc, #108]	; (8002fc0 <SystemClock_Config+0xf4>)
 8002f54:	f000 f922 	bl	800319c <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f58:	230f      	movs	r3, #15
 8002f5a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f68:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	2105      	movs	r1, #5
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f9a6 	bl	80022c8 <HAL_RCC_ClockConfig>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <SystemClock_Config+0xbe>
	{
		_Error_Handler(__FILE__, __LINE__);
 8002f82:	21fe      	movs	r1, #254	; 0xfe
 8002f84:	480e      	ldr	r0, [pc, #56]	; (8002fc0 <SystemClock_Config+0xf4>)
 8002f86:	f000 f909 	bl	800319c <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002f8a:	f7ff fb57 	bl	800263c <HAL_RCC_GetHCLKFreq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <SystemClock_Config+0xf8>)
 8002f92:	fba3 2302 	umull	r2, r3, r3, r2
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe f980 	bl	800129e <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002f9e:	2004      	movs	r0, #4
 8002fa0:	f7fe f98a 	bl	80012b8 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fac:	f7fe f94d 	bl	800124a <HAL_NVIC_SetPriority>
}
 8002fb0:	bf00      	nop
 8002fb2:	3750      	adds	r7, #80	; 0x50
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	080046bc 	.word	0x080046bc
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig;

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002fce:	4b23      	ldr	r3, [pc, #140]	; (800305c <MX_ADC1_Init+0x94>)
 8002fd0:	4a23      	ldr	r2, [pc, #140]	; (8003060 <MX_ADC1_Init+0x98>)
 8002fd2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fd4:	4b21      	ldr	r3, [pc, #132]	; (800305c <MX_ADC1_Init+0x94>)
 8002fd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fda:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	; (800305c <MX_ADC1_Init+0x94>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	; (800305c <MX_ADC1_Init+0x94>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	; (800305c <MX_ADC1_Init+0x94>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <MX_ADC1_Init+0x94>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	621a      	str	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <MX_ADC1_Init+0x94>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <MX_ADC1_Init+0x94>)
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <MX_ADC1_Init+0x9c>)
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003000:	4b16      	ldr	r3, [pc, #88]	; (800305c <MX_ADC1_Init+0x94>)
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <MX_ADC1_Init+0x94>)
 8003008:	2201      	movs	r2, #1
 800300a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <MX_ADC1_Init+0x94>)
 800300e:	2201      	movs	r2, #1
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <MX_ADC1_Init+0x94>)
 8003014:	2200      	movs	r2, #0
 8003016:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003018:	4810      	ldr	r0, [pc, #64]	; (800305c <MX_ADC1_Init+0x94>)
 800301a:	f7fd fb33 	bl	8000684 <HAL_ADC_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <MX_ADC1_Init+0x66>
	{
		_Error_Handler(__FILE__, __LINE__);
 8003024:	f240 1123 	movw	r1, #291	; 0x123
 8003028:	480f      	ldr	r0, [pc, #60]	; (8003068 <MX_ADC1_Init+0xa0>)
 800302a:	f000 f8b7 	bl	800319c <_Error_Handler>
	}

	/**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800302e:	2305      	movs	r3, #5
 8003030:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8003032:	2301      	movs	r3, #1
 8003034:	607b      	str	r3, [r7, #4]
#if ADC_RUNNING_MODE == ADC_BLOCKING_MODE
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
#else
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003036:	2307      	movs	r3, #7
 8003038:	60bb      	str	r3, [r7, #8]
#endif
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800303a:	463b      	mov	r3, r7
 800303c:	4619      	mov	r1, r3
 800303e:	4807      	ldr	r0, [pc, #28]	; (800305c <MX_ADC1_Init+0x94>)
 8003040:	f7fd fd8a 	bl	8000b58 <HAL_ADC_ConfigChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d004      	beq.n	8003054 <MX_ADC1_Init+0x8c>
	{
		_Error_Handler(__FILE__, __LINE__);
 800304a:	f240 1131 	movw	r1, #305	; 0x131
 800304e:	4806      	ldr	r0, [pc, #24]	; (8003068 <MX_ADC1_Init+0xa0>)
 8003050:	f000 f8a4 	bl	800319c <_Error_Handler>
	}

}
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	2000104c 	.word	0x2000104c
 8003060:	40012000 	.word	0x40012000
 8003064:	0f000001 	.word	0x0f000001
 8003068:	080046bc 	.word	0x080046bc

0800306c <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <MX_USART1_UART_Init+0x50>)
 8003072:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <MX_USART1_UART_Init+0x54>)
 8003074:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <MX_USART1_UART_Init+0x50>)
 8003078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800307c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <MX_USART1_UART_Init+0x50>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <MX_USART1_UART_Init+0x50>)
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800308a:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <MX_USART1_UART_Init+0x50>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <MX_USART1_UART_Init+0x50>)
 8003092:	220c      	movs	r2, #12
 8003094:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <MX_USART1_UART_Init+0x50>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800309c:	4b07      	ldr	r3, [pc, #28]	; (80030bc <MX_USART1_UART_Init+0x50>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80030a2:	4806      	ldr	r0, [pc, #24]	; (80030bc <MX_USART1_UART_Init+0x50>)
 80030a4:	f7ff fafe 	bl	80026a4 <HAL_UART_Init>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <MX_USART1_UART_Init+0x4c>
	{
		_Error_Handler(__FILE__, __LINE__);
 80030ae:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80030b2:	4804      	ldr	r0, [pc, #16]	; (80030c4 <MX_USART1_UART_Init+0x58>)
 80030b4:	f000 f872 	bl	800319c <_Error_Handler>
	}

}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20001094 	.word	0x20001094
 80030c0:	40011000 	.word	0x40011000
 80030c4:	080046bc 	.word	0x080046bc

080030c8 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) 
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <MX_DMA_Init+0x3c>)
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <MX_DMA_Init+0x3c>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <MX_DMA_Init+0x3c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	2038      	movs	r0, #56	; 0x38
 80030f0:	f7fe f8ab 	bl	800124a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80030f4:	2038      	movs	r0, #56	; 0x38
 80030f6:	f7fe f8c4 	bl	8001282 <HAL_NVIC_EnableIRQ>

}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800

08003108 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
static void MX_GPIO_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	4a20      	ldr	r2, [pc, #128]	; (8003194 <MX_GPIO_Init+0x8c>)
 8003114:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <MX_GPIO_Init+0x8c>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <MX_GPIO_Init+0x8c>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	4a19      	ldr	r2, [pc, #100]	; (8003194 <MX_GPIO_Init+0x8c>)
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <MX_GPIO_Init+0x8c>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b16      	ldr	r3, [pc, #88]	; (8003194 <MX_GPIO_Init+0x8c>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	4a12      	ldr	r2, [pc, #72]	; (8003194 <MX_GPIO_Init+0x8c>)
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <MX_GPIO_Init+0x8c>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <MX_GPIO_Init+0x8c>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8003162:	2200      	movs	r2, #0
 8003164:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003168:	480b      	ldr	r0, [pc, #44]	; (8003198 <MX_GPIO_Init+0x90>)
 800316a:	f7fe fdef 	bl	8001d4c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED3_Pin LED4_Pin */
	GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 800316e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003172:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003174:	2301      	movs	r3, #1
 8003176:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	4619      	mov	r1, r3
 8003186:	4804      	ldr	r0, [pc, #16]	; (8003198 <MX_GPIO_Init+0x90>)
 8003188:	f7fe fc36 	bl	80019f8 <HAL_GPIO_Init>

}
 800318c:	bf00      	nop
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40023800 	.word	0x40023800
 8003198:	40021800 	.word	0x40021800

0800319c <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 80031a6:	e7fe      	b.n	80031a6 <_Error_Handler+0xa>

080031a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	4a25      	ldr	r2, [pc, #148]	; (8003248 <HAL_MspInit+0xa0>)
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_MspInit+0xa0>)
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_MspInit+0xa0>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_MspInit+0xa0>)
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_MspInit+0xa0>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6413      	str	r3, [r2, #64]	; 0x40
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_MspInit+0xa0>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e6:	2003      	movs	r0, #3
 80031e8:	f7fe f824 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80031ec:	2200      	movs	r2, #0
 80031ee:	2100      	movs	r1, #0
 80031f0:	f06f 000b 	mvn.w	r0, #11
 80031f4:	f7fe f829 	bl	800124a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80031f8:	2200      	movs	r2, #0
 80031fa:	2100      	movs	r1, #0
 80031fc:	f06f 000a 	mvn.w	r0, #10
 8003200:	f7fe f823 	bl	800124a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	f06f 0009 	mvn.w	r0, #9
 800320c:	f7fe f81d 	bl	800124a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2100      	movs	r1, #0
 8003214:	f06f 0004 	mvn.w	r0, #4
 8003218:	f7fe f817 	bl	800124a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800321c:	2200      	movs	r2, #0
 800321e:	2100      	movs	r1, #0
 8003220:	f06f 0003 	mvn.w	r0, #3
 8003224:	f7fe f811 	bl	800124a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003228:	2200      	movs	r2, #0
 800322a:	2100      	movs	r1, #0
 800322c:	f06f 0001 	mvn.w	r0, #1
 8003230:	f7fe f80b 	bl	800124a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003234:	2200      	movs	r2, #0
 8003236:	2100      	movs	r1, #0
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	f7fe f805 	bl	800124a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40023800 	.word	0x40023800

0800324c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <HAL_ADC_MspInit+0xc4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d153      	bne.n	8003306 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <HAL_ADC_MspInit+0xc8>)
 8003264:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_ADC_MspInit+0xc8>)
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	6453      	str	r3, [r2, #68]	; 0x44
 800326e:	4b29      	ldr	r3, [pc, #164]	; (8003314 <HAL_ADC_MspInit+0xc8>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800327a:	2320      	movs	r3, #32
 800327c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800327e:	2303      	movs	r3, #3
 8003280:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003286:	f107 030c 	add.w	r3, r7, #12
 800328a:	4619      	mov	r1, r3
 800328c:	4822      	ldr	r0, [pc, #136]	; (8003318 <HAL_ADC_MspInit+0xcc>)
 800328e:	f7fe fbb3 	bl	80019f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_ADC_MspInit+0xd0>)
 8003294:	4a22      	ldr	r2, [pc, #136]	; (8003320 <HAL_ADC_MspInit+0xd4>)
 8003296:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003298:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_ADC_MspInit+0xd0>)
 800329a:	2200      	movs	r2, #0
 800329c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800329e:	4b1f      	ldr	r3, [pc, #124]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032ba:	4b18      	ldr	r3, [pc, #96]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032c2:	4b16      	ldr	r3, [pc, #88]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032ca:	4b14      	ldr	r3, [pc, #80]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032d6:	4811      	ldr	r0, [pc, #68]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032d8:	f7fe f818 	bl	800130c <HAL_DMA_Init>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_ADC_MspInit+0x9e>
    {
      _Error_Handler(__FILE__, __LINE__);
 80032e2:	2175      	movs	r1, #117	; 0x75
 80032e4:	480f      	ldr	r0, [pc, #60]	; (8003324 <HAL_ADC_MspInit+0xd8>)
 80032e6:	f7ff ff59 	bl	800319c <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a0b      	ldr	r2, [pc, #44]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032ee:	639a      	str	r2, [r3, #56]	; 0x38
 80032f0:	4a0a      	ldr	r2, [pc, #40]	; (800331c <HAL_ADC_MspInit+0xd0>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	2012      	movs	r0, #18
 80032fc:	f7fd ffa5 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003300:	2012      	movs	r0, #18
 8003302:	f7fd ffbe 	bl	8001282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003306:	bf00      	nop
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40012000 	.word	0x40012000
 8003314:	40023800 	.word	0x40023800
 8003318:	40020000 	.word	0x40020000
 800331c:	200010d4 	.word	0x200010d4
 8003320:	40026410 	.word	0x40026410
 8003324:	080046cc 	.word	0x080046cc

08003328 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a12      	ldr	r2, [pc, #72]	; (8003380 <HAL_UART_MspInit+0x58>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d11e      	bne.n	8003378 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4a11      	ldr	r2, [pc, #68]	; (8003384 <HAL_UART_MspInit+0x5c>)
 8003340:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_UART_MspInit+0x5c>)
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	f043 0310 	orr.w	r3, r3, #16
 8003348:	6453      	str	r3, [r2, #68]	; 0x44
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <HAL_UART_MspInit+0x5c>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003356:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800335a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003360:	2301      	movs	r3, #1
 8003362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003368:	2307      	movs	r3, #7
 800336a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	4619      	mov	r1, r3
 8003372:	4805      	ldr	r0, [pc, #20]	; (8003388 <HAL_UART_MspInit+0x60>)
 8003374:	f7fe fb40 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003378:	bf00      	nop
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40011000 	.word	0x40011000
 8003384:	40023800 	.word	0x40023800
 8003388:	40020000 	.word	0x40020000

0800338c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <HardFault_Handler+0x4>

080033a0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <MemManage_Handler+0x4>

080033a6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033aa:	e7fe      	b.n	80033aa <BusFault_Handler+0x4>

080033ac <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <UsageFault_Handler+0x4>

080033b2 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e0:	f7fd f930 	bl	8000644 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80033e4:	f7fd ff84 	bl	80012f0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80033e8:	bf00      	nop
 80033ea:	bd80      	pop	{r7, pc}

080033ec <ADC_IRQHandler>:

/**
* @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
*/
void ADC_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80033f0:	4802      	ldr	r0, [pc, #8]	; (80033fc <ADC_IRQHandler+0x10>)
 80033f2:	f7fd f98a 	bl	800070a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000104c 	.word	0x2000104c

08003400 <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <DMA2_Stream0_IRQHandler+0x10>)
 8003406:	f7fe f88f 	bl	8001528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200010d4 	.word	0x200010d4

08003414 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	b29a      	uxth	r2, r3
 8003424:	f04f 33ff 	mov.w	r3, #4294967295
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	4804      	ldr	r0, [pc, #16]	; (800343c <_write+0x28>)
 800342c:	f7ff f987 	bl	800273e <HAL_UART_Transmit>

	return len;
 8003430:	687b      	ldr	r3, [r7, #4]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20001094 	.word	0x20001094

08003440 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <_sbrk+0x38>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <_sbrk+0x16>
		heap_end = & end;
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <_sbrk+0x38>)
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <_sbrk+0x3c>)
 8003454:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <_sbrk+0x38>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <_sbrk+0x38>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <_sbrk+0x38>)
 8003466:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003468:	68fb      	ldr	r3, [r7, #12]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000103c 	.word	0x2000103c
 800347c:	20001138 	.word	0x20001138

08003480 <_close>:

int _close(int32_t file)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <_close+0x20>)
 800348a:	2258      	movs	r2, #88	; 0x58
 800348c:	601a      	str	r2, [r3, #0]
	return -1;
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20001134 	.word	0x20001134

080034a4 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <_fstat+0x20>)
 80034b0:	2258      	movs	r2, #88	; 0x58
 80034b2:	601a      	str	r2, [r3, #0]
	return -1;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	20001134 	.word	0x20001134

080034c8 <_isatty>:

int _isatty(int32_t file)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <_isatty+0x1c>)
 80034d2:	2258      	movs	r2, #88	; 0x58
 80034d4:	601a      	str	r2, [r3, #0]
	return 0;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	20001134 	.word	0x20001134

080034e8 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <_lseek+0x24>)
 80034f6:	2258      	movs	r2, #88	; 0x58
 80034f8:	601a      	str	r2, [r3, #0]
	return -1;
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20001134 	.word	0x20001134

08003510 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <_read+0x24>)
 800351e:	2258      	movs	r2, #88	; 0x58
 8003520:	601a      	str	r2, [r3, #0]
	return -1;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20001134 	.word	0x20001134

08003538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800353c:	4a16      	ldr	r2, [pc, #88]	; (8003598 <SystemInit+0x60>)
 800353e:	4b16      	ldr	r3, [pc, #88]	; (8003598 <SystemInit+0x60>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800354c:	4a13      	ldr	r2, [pc, #76]	; (800359c <SystemInit+0x64>)
 800354e:	4b13      	ldr	r3, [pc, #76]	; (800359c <SystemInit+0x64>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003558:	4b10      	ldr	r3, [pc, #64]	; (800359c <SystemInit+0x64>)
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <SystemInit+0x64>)
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <SystemInit+0x64>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <SystemInit+0x64>)
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <SystemInit+0x68>)
 8003572:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003574:	4a09      	ldr	r2, [pc, #36]	; (800359c <SystemInit+0x64>)
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <SystemInit+0x64>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <SystemInit+0x64>)
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003586:	4b04      	ldr	r3, [pc, #16]	; (8003598 <SystemInit+0x60>)
 8003588:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800358c:	609a      	str	r2, [r3, #8]
#endif
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00
 800359c:	40023800 	.word	0x40023800
 80035a0:	24003010 	.word	0x24003010

080035a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80035a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035dc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035aa:	e003      	b.n	80035b4 <LoopCopyDataInit>

080035ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035b2:	3104      	adds	r1, #4

080035b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035b4:	480b      	ldr	r0, [pc, #44]	; (80035e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035bc:	d3f6      	bcc.n	80035ac <CopyDataInit>
  ldr  r2, =_sbss
 80035be:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035c0:	e002      	b.n	80035c8 <LoopFillZerobss>

080035c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035c4:	f842 3b04 	str.w	r3, [r2], #4

080035c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035cc:	d3f9      	bcc.n	80035c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035ce:	f7ff ffb3 	bl	8003538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035d2:	f000 f811 	bl	80035f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035d6:	f7ff fbe1 	bl	8002d9c <main>
  bx  lr    
 80035da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80035dc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80035e0:	080047b0 	.word	0x080047b0
  ldr  r0, =_sdata
 80035e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035e8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80035ec:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80035f0:	20001138 	.word	0x20001138

080035f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f4:	e7fe      	b.n	80035f4 <CAN1_RX0_IRQHandler>
	...

080035f8 <__libc_init_array>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	4e0d      	ldr	r6, [pc, #52]	; (8003630 <__libc_init_array+0x38>)
 80035fc:	4c0d      	ldr	r4, [pc, #52]	; (8003634 <__libc_init_array+0x3c>)
 80035fe:	1ba4      	subs	r4, r4, r6
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	2500      	movs	r5, #0
 8003604:	42a5      	cmp	r5, r4
 8003606:	d109      	bne.n	800361c <__libc_init_array+0x24>
 8003608:	4e0b      	ldr	r6, [pc, #44]	; (8003638 <__libc_init_array+0x40>)
 800360a:	4c0c      	ldr	r4, [pc, #48]	; (800363c <__libc_init_array+0x44>)
 800360c:	f001 f832 	bl	8004674 <_init>
 8003610:	1ba4      	subs	r4, r4, r6
 8003612:	10a4      	asrs	r4, r4, #2
 8003614:	2500      	movs	r5, #0
 8003616:	42a5      	cmp	r5, r4
 8003618:	d105      	bne.n	8003626 <__libc_init_array+0x2e>
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003620:	4798      	blx	r3
 8003622:	3501      	adds	r5, #1
 8003624:	e7ee      	b.n	8003604 <__libc_init_array+0xc>
 8003626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800362a:	4798      	blx	r3
 800362c:	3501      	adds	r5, #1
 800362e:	e7f2      	b.n	8003616 <__libc_init_array+0x1e>
 8003630:	080047a8 	.word	0x080047a8
 8003634:	080047a8 	.word	0x080047a8
 8003638:	080047a8 	.word	0x080047a8
 800363c:	080047ac 	.word	0x080047ac

08003640 <iprintf>:
 8003640:	b40f      	push	{r0, r1, r2, r3}
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <iprintf+0x2c>)
 8003644:	b513      	push	{r0, r1, r4, lr}
 8003646:	681c      	ldr	r4, [r3, #0]
 8003648:	b124      	cbz	r4, 8003654 <iprintf+0x14>
 800364a:	69a3      	ldr	r3, [r4, #24]
 800364c:	b913      	cbnz	r3, 8003654 <iprintf+0x14>
 800364e:	4620      	mov	r0, r4
 8003650:	f000 fad2 	bl	8003bf8 <__sinit>
 8003654:	ab05      	add	r3, sp, #20
 8003656:	9a04      	ldr	r2, [sp, #16]
 8003658:	68a1      	ldr	r1, [r4, #8]
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	4620      	mov	r0, r4
 800365e:	f000 fc9f 	bl	8003fa0 <_vfiprintf_r>
 8003662:	b002      	add	sp, #8
 8003664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003668:	b004      	add	sp, #16
 800366a:	4770      	bx	lr
 800366c:	20000014 	.word	0x20000014

08003670 <_puts_r>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	460e      	mov	r6, r1
 8003674:	4605      	mov	r5, r0
 8003676:	b118      	cbz	r0, 8003680 <_puts_r+0x10>
 8003678:	6983      	ldr	r3, [r0, #24]
 800367a:	b90b      	cbnz	r3, 8003680 <_puts_r+0x10>
 800367c:	f000 fabc 	bl	8003bf8 <__sinit>
 8003680:	69ab      	ldr	r3, [r5, #24]
 8003682:	68ac      	ldr	r4, [r5, #8]
 8003684:	b913      	cbnz	r3, 800368c <_puts_r+0x1c>
 8003686:	4628      	mov	r0, r5
 8003688:	f000 fab6 	bl	8003bf8 <__sinit>
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <_puts_r+0xac>)
 800368e:	429c      	cmp	r4, r3
 8003690:	d117      	bne.n	80036c2 <_puts_r+0x52>
 8003692:	686c      	ldr	r4, [r5, #4]
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	071b      	lsls	r3, r3, #28
 8003698:	d51d      	bpl.n	80036d6 <_puts_r+0x66>
 800369a:	6923      	ldr	r3, [r4, #16]
 800369c:	b1db      	cbz	r3, 80036d6 <_puts_r+0x66>
 800369e:	3e01      	subs	r6, #1
 80036a0:	68a3      	ldr	r3, [r4, #8]
 80036a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036a6:	3b01      	subs	r3, #1
 80036a8:	60a3      	str	r3, [r4, #8]
 80036aa:	b9e9      	cbnz	r1, 80036e8 <_puts_r+0x78>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	da2e      	bge.n	800370e <_puts_r+0x9e>
 80036b0:	4622      	mov	r2, r4
 80036b2:	210a      	movs	r1, #10
 80036b4:	4628      	mov	r0, r5
 80036b6:	f000 f8ed 	bl	8003894 <__swbuf_r>
 80036ba:	3001      	adds	r0, #1
 80036bc:	d011      	beq.n	80036e2 <_puts_r+0x72>
 80036be:	200a      	movs	r0, #10
 80036c0:	bd70      	pop	{r4, r5, r6, pc}
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <_puts_r+0xb0>)
 80036c4:	429c      	cmp	r4, r3
 80036c6:	d101      	bne.n	80036cc <_puts_r+0x5c>
 80036c8:	68ac      	ldr	r4, [r5, #8]
 80036ca:	e7e3      	b.n	8003694 <_puts_r+0x24>
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <_puts_r+0xb4>)
 80036ce:	429c      	cmp	r4, r3
 80036d0:	bf08      	it	eq
 80036d2:	68ec      	ldreq	r4, [r5, #12]
 80036d4:	e7de      	b.n	8003694 <_puts_r+0x24>
 80036d6:	4621      	mov	r1, r4
 80036d8:	4628      	mov	r0, r5
 80036da:	f000 f92d 	bl	8003938 <__swsetup_r>
 80036de:	2800      	cmp	r0, #0
 80036e0:	d0dd      	beq.n	800369e <_puts_r+0x2e>
 80036e2:	f04f 30ff 	mov.w	r0, #4294967295
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	da04      	bge.n	80036f6 <_puts_r+0x86>
 80036ec:	69a2      	ldr	r2, [r4, #24]
 80036ee:	4293      	cmp	r3, r2
 80036f0:	db06      	blt.n	8003700 <_puts_r+0x90>
 80036f2:	290a      	cmp	r1, #10
 80036f4:	d004      	beq.n	8003700 <_puts_r+0x90>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	6022      	str	r2, [r4, #0]
 80036fc:	7019      	strb	r1, [r3, #0]
 80036fe:	e7cf      	b.n	80036a0 <_puts_r+0x30>
 8003700:	4622      	mov	r2, r4
 8003702:	4628      	mov	r0, r5
 8003704:	f000 f8c6 	bl	8003894 <__swbuf_r>
 8003708:	3001      	adds	r0, #1
 800370a:	d1c9      	bne.n	80036a0 <_puts_r+0x30>
 800370c:	e7e9      	b.n	80036e2 <_puts_r+0x72>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	200a      	movs	r0, #10
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	6022      	str	r2, [r4, #0]
 8003716:	7018      	strb	r0, [r3, #0]
 8003718:	bd70      	pop	{r4, r5, r6, pc}
 800371a:	bf00      	nop
 800371c:	0800472c 	.word	0x0800472c
 8003720:	0800474c 	.word	0x0800474c
 8003724:	0800470c 	.word	0x0800470c

08003728 <puts>:
 8003728:	4b02      	ldr	r3, [pc, #8]	; (8003734 <puts+0xc>)
 800372a:	4601      	mov	r1, r0
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	f7ff bf9f 	b.w	8003670 <_puts_r>
 8003732:	bf00      	nop
 8003734:	20000014 	.word	0x20000014

08003738 <setvbuf>:
 8003738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800373c:	461d      	mov	r5, r3
 800373e:	4b51      	ldr	r3, [pc, #324]	; (8003884 <setvbuf+0x14c>)
 8003740:	681e      	ldr	r6, [r3, #0]
 8003742:	4604      	mov	r4, r0
 8003744:	460f      	mov	r7, r1
 8003746:	4690      	mov	r8, r2
 8003748:	b126      	cbz	r6, 8003754 <setvbuf+0x1c>
 800374a:	69b3      	ldr	r3, [r6, #24]
 800374c:	b913      	cbnz	r3, 8003754 <setvbuf+0x1c>
 800374e:	4630      	mov	r0, r6
 8003750:	f000 fa52 	bl	8003bf8 <__sinit>
 8003754:	4b4c      	ldr	r3, [pc, #304]	; (8003888 <setvbuf+0x150>)
 8003756:	429c      	cmp	r4, r3
 8003758:	d152      	bne.n	8003800 <setvbuf+0xc8>
 800375a:	6874      	ldr	r4, [r6, #4]
 800375c:	f1b8 0f02 	cmp.w	r8, #2
 8003760:	d006      	beq.n	8003770 <setvbuf+0x38>
 8003762:	f1b8 0f01 	cmp.w	r8, #1
 8003766:	f200 8089 	bhi.w	800387c <setvbuf+0x144>
 800376a:	2d00      	cmp	r5, #0
 800376c:	f2c0 8086 	blt.w	800387c <setvbuf+0x144>
 8003770:	4621      	mov	r1, r4
 8003772:	4630      	mov	r0, r6
 8003774:	f000 f9d6 	bl	8003b24 <_fflush_r>
 8003778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800377a:	b141      	cbz	r1, 800378e <setvbuf+0x56>
 800377c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003780:	4299      	cmp	r1, r3
 8003782:	d002      	beq.n	800378a <setvbuf+0x52>
 8003784:	4630      	mov	r0, r6
 8003786:	f000 fb35 	bl	8003df4 <_free_r>
 800378a:	2300      	movs	r3, #0
 800378c:	6363      	str	r3, [r4, #52]	; 0x34
 800378e:	2300      	movs	r3, #0
 8003790:	61a3      	str	r3, [r4, #24]
 8003792:	6063      	str	r3, [r4, #4]
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	061b      	lsls	r3, r3, #24
 8003798:	d503      	bpl.n	80037a2 <setvbuf+0x6a>
 800379a:	6921      	ldr	r1, [r4, #16]
 800379c:	4630      	mov	r0, r6
 800379e:	f000 fb29 	bl	8003df4 <_free_r>
 80037a2:	89a3      	ldrh	r3, [r4, #12]
 80037a4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80037a8:	f023 0303 	bic.w	r3, r3, #3
 80037ac:	f1b8 0f02 	cmp.w	r8, #2
 80037b0:	81a3      	strh	r3, [r4, #12]
 80037b2:	d05d      	beq.n	8003870 <setvbuf+0x138>
 80037b4:	ab01      	add	r3, sp, #4
 80037b6:	466a      	mov	r2, sp
 80037b8:	4621      	mov	r1, r4
 80037ba:	4630      	mov	r0, r6
 80037bc:	f000 faa6 	bl	8003d0c <__swhatbuf_r>
 80037c0:	89a3      	ldrh	r3, [r4, #12]
 80037c2:	4318      	orrs	r0, r3
 80037c4:	81a0      	strh	r0, [r4, #12]
 80037c6:	bb2d      	cbnz	r5, 8003814 <setvbuf+0xdc>
 80037c8:	9d00      	ldr	r5, [sp, #0]
 80037ca:	4628      	mov	r0, r5
 80037cc:	f000 fb02 	bl	8003dd4 <malloc>
 80037d0:	4607      	mov	r7, r0
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d14e      	bne.n	8003874 <setvbuf+0x13c>
 80037d6:	f8dd 9000 	ldr.w	r9, [sp]
 80037da:	45a9      	cmp	r9, r5
 80037dc:	d13c      	bne.n	8003858 <setvbuf+0x120>
 80037de:	f04f 30ff 	mov.w	r0, #4294967295
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	81a3      	strh	r3, [r4, #12]
 80037ea:	2300      	movs	r3, #0
 80037ec:	60a3      	str	r3, [r4, #8]
 80037ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037f2:	6023      	str	r3, [r4, #0]
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	2301      	movs	r3, #1
 80037f8:	6163      	str	r3, [r4, #20]
 80037fa:	b003      	add	sp, #12
 80037fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003800:	4b22      	ldr	r3, [pc, #136]	; (800388c <setvbuf+0x154>)
 8003802:	429c      	cmp	r4, r3
 8003804:	d101      	bne.n	800380a <setvbuf+0xd2>
 8003806:	68b4      	ldr	r4, [r6, #8]
 8003808:	e7a8      	b.n	800375c <setvbuf+0x24>
 800380a:	4b21      	ldr	r3, [pc, #132]	; (8003890 <setvbuf+0x158>)
 800380c:	429c      	cmp	r4, r3
 800380e:	bf08      	it	eq
 8003810:	68f4      	ldreq	r4, [r6, #12]
 8003812:	e7a3      	b.n	800375c <setvbuf+0x24>
 8003814:	2f00      	cmp	r7, #0
 8003816:	d0d8      	beq.n	80037ca <setvbuf+0x92>
 8003818:	69b3      	ldr	r3, [r6, #24]
 800381a:	b913      	cbnz	r3, 8003822 <setvbuf+0xea>
 800381c:	4630      	mov	r0, r6
 800381e:	f000 f9eb 	bl	8003bf8 <__sinit>
 8003822:	f1b8 0f01 	cmp.w	r8, #1
 8003826:	bf08      	it	eq
 8003828:	89a3      	ldrheq	r3, [r4, #12]
 800382a:	6027      	str	r7, [r4, #0]
 800382c:	bf04      	itt	eq
 800382e:	f043 0301 	orreq.w	r3, r3, #1
 8003832:	81a3      	strheq	r3, [r4, #12]
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	6127      	str	r7, [r4, #16]
 8003838:	f013 0008 	ands.w	r0, r3, #8
 800383c:	6165      	str	r5, [r4, #20]
 800383e:	d01b      	beq.n	8003878 <setvbuf+0x140>
 8003840:	f013 0001 	ands.w	r0, r3, #1
 8003844:	bf18      	it	ne
 8003846:	426d      	negne	r5, r5
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	bf1d      	ittte	ne
 800384e:	60a3      	strne	r3, [r4, #8]
 8003850:	61a5      	strne	r5, [r4, #24]
 8003852:	4618      	movne	r0, r3
 8003854:	60a5      	streq	r5, [r4, #8]
 8003856:	e7d0      	b.n	80037fa <setvbuf+0xc2>
 8003858:	4648      	mov	r0, r9
 800385a:	f000 fabb 	bl	8003dd4 <malloc>
 800385e:	4607      	mov	r7, r0
 8003860:	2800      	cmp	r0, #0
 8003862:	d0bc      	beq.n	80037de <setvbuf+0xa6>
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386a:	81a3      	strh	r3, [r4, #12]
 800386c:	464d      	mov	r5, r9
 800386e:	e7d3      	b.n	8003818 <setvbuf+0xe0>
 8003870:	2000      	movs	r0, #0
 8003872:	e7b6      	b.n	80037e2 <setvbuf+0xaa>
 8003874:	46a9      	mov	r9, r5
 8003876:	e7f5      	b.n	8003864 <setvbuf+0x12c>
 8003878:	60a0      	str	r0, [r4, #8]
 800387a:	e7be      	b.n	80037fa <setvbuf+0xc2>
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	e7bb      	b.n	80037fa <setvbuf+0xc2>
 8003882:	bf00      	nop
 8003884:	20000014 	.word	0x20000014
 8003888:	0800472c 	.word	0x0800472c
 800388c:	0800474c 	.word	0x0800474c
 8003890:	0800470c 	.word	0x0800470c

08003894 <__swbuf_r>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	460e      	mov	r6, r1
 8003898:	4614      	mov	r4, r2
 800389a:	4605      	mov	r5, r0
 800389c:	b118      	cbz	r0, 80038a6 <__swbuf_r+0x12>
 800389e:	6983      	ldr	r3, [r0, #24]
 80038a0:	b90b      	cbnz	r3, 80038a6 <__swbuf_r+0x12>
 80038a2:	f000 f9a9 	bl	8003bf8 <__sinit>
 80038a6:	4b21      	ldr	r3, [pc, #132]	; (800392c <__swbuf_r+0x98>)
 80038a8:	429c      	cmp	r4, r3
 80038aa:	d12a      	bne.n	8003902 <__swbuf_r+0x6e>
 80038ac:	686c      	ldr	r4, [r5, #4]
 80038ae:	69a3      	ldr	r3, [r4, #24]
 80038b0:	60a3      	str	r3, [r4, #8]
 80038b2:	89a3      	ldrh	r3, [r4, #12]
 80038b4:	071a      	lsls	r2, r3, #28
 80038b6:	d52e      	bpl.n	8003916 <__swbuf_r+0x82>
 80038b8:	6923      	ldr	r3, [r4, #16]
 80038ba:	b363      	cbz	r3, 8003916 <__swbuf_r+0x82>
 80038bc:	6923      	ldr	r3, [r4, #16]
 80038be:	6820      	ldr	r0, [r4, #0]
 80038c0:	1ac0      	subs	r0, r0, r3
 80038c2:	6963      	ldr	r3, [r4, #20]
 80038c4:	b2f6      	uxtb	r6, r6
 80038c6:	4298      	cmp	r0, r3
 80038c8:	4637      	mov	r7, r6
 80038ca:	db04      	blt.n	80038d6 <__swbuf_r+0x42>
 80038cc:	4621      	mov	r1, r4
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 f928 	bl	8003b24 <_fflush_r>
 80038d4:	bb28      	cbnz	r0, 8003922 <__swbuf_r+0x8e>
 80038d6:	68a3      	ldr	r3, [r4, #8]
 80038d8:	3b01      	subs	r3, #1
 80038da:	60a3      	str	r3, [r4, #8]
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	6022      	str	r2, [r4, #0]
 80038e2:	701e      	strb	r6, [r3, #0]
 80038e4:	6963      	ldr	r3, [r4, #20]
 80038e6:	3001      	adds	r0, #1
 80038e8:	4298      	cmp	r0, r3
 80038ea:	d004      	beq.n	80038f6 <__swbuf_r+0x62>
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	07db      	lsls	r3, r3, #31
 80038f0:	d519      	bpl.n	8003926 <__swbuf_r+0x92>
 80038f2:	2e0a      	cmp	r6, #10
 80038f4:	d117      	bne.n	8003926 <__swbuf_r+0x92>
 80038f6:	4621      	mov	r1, r4
 80038f8:	4628      	mov	r0, r5
 80038fa:	f000 f913 	bl	8003b24 <_fflush_r>
 80038fe:	b190      	cbz	r0, 8003926 <__swbuf_r+0x92>
 8003900:	e00f      	b.n	8003922 <__swbuf_r+0x8e>
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <__swbuf_r+0x9c>)
 8003904:	429c      	cmp	r4, r3
 8003906:	d101      	bne.n	800390c <__swbuf_r+0x78>
 8003908:	68ac      	ldr	r4, [r5, #8]
 800390a:	e7d0      	b.n	80038ae <__swbuf_r+0x1a>
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <__swbuf_r+0xa0>)
 800390e:	429c      	cmp	r4, r3
 8003910:	bf08      	it	eq
 8003912:	68ec      	ldreq	r4, [r5, #12]
 8003914:	e7cb      	b.n	80038ae <__swbuf_r+0x1a>
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f000 f80d 	bl	8003938 <__swsetup_r>
 800391e:	2800      	cmp	r0, #0
 8003920:	d0cc      	beq.n	80038bc <__swbuf_r+0x28>
 8003922:	f04f 37ff 	mov.w	r7, #4294967295
 8003926:	4638      	mov	r0, r7
 8003928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800392a:	bf00      	nop
 800392c:	0800472c 	.word	0x0800472c
 8003930:	0800474c 	.word	0x0800474c
 8003934:	0800470c 	.word	0x0800470c

08003938 <__swsetup_r>:
 8003938:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <__swsetup_r+0xcc>)
 800393a:	b570      	push	{r4, r5, r6, lr}
 800393c:	681d      	ldr	r5, [r3, #0]
 800393e:	4606      	mov	r6, r0
 8003940:	460c      	mov	r4, r1
 8003942:	b125      	cbz	r5, 800394e <__swsetup_r+0x16>
 8003944:	69ab      	ldr	r3, [r5, #24]
 8003946:	b913      	cbnz	r3, 800394e <__swsetup_r+0x16>
 8003948:	4628      	mov	r0, r5
 800394a:	f000 f955 	bl	8003bf8 <__sinit>
 800394e:	4b2e      	ldr	r3, [pc, #184]	; (8003a08 <__swsetup_r+0xd0>)
 8003950:	429c      	cmp	r4, r3
 8003952:	d10f      	bne.n	8003974 <__swsetup_r+0x3c>
 8003954:	686c      	ldr	r4, [r5, #4]
 8003956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800395a:	b29a      	uxth	r2, r3
 800395c:	0715      	lsls	r5, r2, #28
 800395e:	d42c      	bmi.n	80039ba <__swsetup_r+0x82>
 8003960:	06d0      	lsls	r0, r2, #27
 8003962:	d411      	bmi.n	8003988 <__swsetup_r+0x50>
 8003964:	2209      	movs	r2, #9
 8003966:	6032      	str	r2, [r6, #0]
 8003968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800396c:	81a3      	strh	r3, [r4, #12]
 800396e:	f04f 30ff 	mov.w	r0, #4294967295
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <__swsetup_r+0xd4>)
 8003976:	429c      	cmp	r4, r3
 8003978:	d101      	bne.n	800397e <__swsetup_r+0x46>
 800397a:	68ac      	ldr	r4, [r5, #8]
 800397c:	e7eb      	b.n	8003956 <__swsetup_r+0x1e>
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <__swsetup_r+0xd8>)
 8003980:	429c      	cmp	r4, r3
 8003982:	bf08      	it	eq
 8003984:	68ec      	ldreq	r4, [r5, #12]
 8003986:	e7e6      	b.n	8003956 <__swsetup_r+0x1e>
 8003988:	0751      	lsls	r1, r2, #29
 800398a:	d512      	bpl.n	80039b2 <__swsetup_r+0x7a>
 800398c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800398e:	b141      	cbz	r1, 80039a2 <__swsetup_r+0x6a>
 8003990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003994:	4299      	cmp	r1, r3
 8003996:	d002      	beq.n	800399e <__swsetup_r+0x66>
 8003998:	4630      	mov	r0, r6
 800399a:	f000 fa2b 	bl	8003df4 <_free_r>
 800399e:	2300      	movs	r3, #0
 80039a0:	6363      	str	r3, [r4, #52]	; 0x34
 80039a2:	89a3      	ldrh	r3, [r4, #12]
 80039a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80039a8:	81a3      	strh	r3, [r4, #12]
 80039aa:	2300      	movs	r3, #0
 80039ac:	6063      	str	r3, [r4, #4]
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	6023      	str	r3, [r4, #0]
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	6923      	ldr	r3, [r4, #16]
 80039bc:	b94b      	cbnz	r3, 80039d2 <__swsetup_r+0x9a>
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c8:	d003      	beq.n	80039d2 <__swsetup_r+0x9a>
 80039ca:	4621      	mov	r1, r4
 80039cc:	4630      	mov	r0, r6
 80039ce:	f000 f9c1 	bl	8003d54 <__smakebuf_r>
 80039d2:	89a2      	ldrh	r2, [r4, #12]
 80039d4:	f012 0301 	ands.w	r3, r2, #1
 80039d8:	d00c      	beq.n	80039f4 <__swsetup_r+0xbc>
 80039da:	2300      	movs	r3, #0
 80039dc:	60a3      	str	r3, [r4, #8]
 80039de:	6963      	ldr	r3, [r4, #20]
 80039e0:	425b      	negs	r3, r3
 80039e2:	61a3      	str	r3, [r4, #24]
 80039e4:	6923      	ldr	r3, [r4, #16]
 80039e6:	b953      	cbnz	r3, 80039fe <__swsetup_r+0xc6>
 80039e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80039f0:	d1ba      	bne.n	8003968 <__swsetup_r+0x30>
 80039f2:	bd70      	pop	{r4, r5, r6, pc}
 80039f4:	0792      	lsls	r2, r2, #30
 80039f6:	bf58      	it	pl
 80039f8:	6963      	ldrpl	r3, [r4, #20]
 80039fa:	60a3      	str	r3, [r4, #8]
 80039fc:	e7f2      	b.n	80039e4 <__swsetup_r+0xac>
 80039fe:	2000      	movs	r0, #0
 8003a00:	e7f7      	b.n	80039f2 <__swsetup_r+0xba>
 8003a02:	bf00      	nop
 8003a04:	20000014 	.word	0x20000014
 8003a08:	0800472c 	.word	0x0800472c
 8003a0c:	0800474c 	.word	0x0800474c
 8003a10:	0800470c 	.word	0x0800470c

08003a14 <__sflush_r>:
 8003a14:	898a      	ldrh	r2, [r1, #12]
 8003a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	0710      	lsls	r0, r2, #28
 8003a1e:	460c      	mov	r4, r1
 8003a20:	d45a      	bmi.n	8003ad8 <__sflush_r+0xc4>
 8003a22:	684b      	ldr	r3, [r1, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	dc05      	bgt.n	8003a34 <__sflush_r+0x20>
 8003a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	dc02      	bgt.n	8003a34 <__sflush_r+0x20>
 8003a2e:	2000      	movs	r0, #0
 8003a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a36:	2e00      	cmp	r6, #0
 8003a38:	d0f9      	beq.n	8003a2e <__sflush_r+0x1a>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a40:	682f      	ldr	r7, [r5, #0]
 8003a42:	602b      	str	r3, [r5, #0]
 8003a44:	d033      	beq.n	8003aae <__sflush_r+0x9a>
 8003a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	075a      	lsls	r2, r3, #29
 8003a4c:	d505      	bpl.n	8003a5a <__sflush_r+0x46>
 8003a4e:	6863      	ldr	r3, [r4, #4]
 8003a50:	1ac0      	subs	r0, r0, r3
 8003a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a54:	b10b      	cbz	r3, 8003a5a <__sflush_r+0x46>
 8003a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a58:	1ac0      	subs	r0, r0, r3
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a60:	6a21      	ldr	r1, [r4, #32]
 8003a62:	4628      	mov	r0, r5
 8003a64:	47b0      	blx	r6
 8003a66:	1c43      	adds	r3, r0, #1
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	d106      	bne.n	8003a7a <__sflush_r+0x66>
 8003a6c:	6829      	ldr	r1, [r5, #0]
 8003a6e:	291d      	cmp	r1, #29
 8003a70:	d84b      	bhi.n	8003b0a <__sflush_r+0xf6>
 8003a72:	4a2b      	ldr	r2, [pc, #172]	; (8003b20 <__sflush_r+0x10c>)
 8003a74:	40ca      	lsrs	r2, r1
 8003a76:	07d6      	lsls	r6, r2, #31
 8003a78:	d547      	bpl.n	8003b0a <__sflush_r+0xf6>
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	6062      	str	r2, [r4, #4]
 8003a7e:	04d9      	lsls	r1, r3, #19
 8003a80:	6922      	ldr	r2, [r4, #16]
 8003a82:	6022      	str	r2, [r4, #0]
 8003a84:	d504      	bpl.n	8003a90 <__sflush_r+0x7c>
 8003a86:	1c42      	adds	r2, r0, #1
 8003a88:	d101      	bne.n	8003a8e <__sflush_r+0x7a>
 8003a8a:	682b      	ldr	r3, [r5, #0]
 8003a8c:	b903      	cbnz	r3, 8003a90 <__sflush_r+0x7c>
 8003a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8003a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a92:	602f      	str	r7, [r5, #0]
 8003a94:	2900      	cmp	r1, #0
 8003a96:	d0ca      	beq.n	8003a2e <__sflush_r+0x1a>
 8003a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a9c:	4299      	cmp	r1, r3
 8003a9e:	d002      	beq.n	8003aa6 <__sflush_r+0x92>
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f000 f9a7 	bl	8003df4 <_free_r>
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8003aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aae:	6a21      	ldr	r1, [r4, #32]
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	47b0      	blx	r6
 8003ab6:	1c41      	adds	r1, r0, #1
 8003ab8:	d1c6      	bne.n	8003a48 <__sflush_r+0x34>
 8003aba:	682b      	ldr	r3, [r5, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0c3      	beq.n	8003a48 <__sflush_r+0x34>
 8003ac0:	2b1d      	cmp	r3, #29
 8003ac2:	d001      	beq.n	8003ac8 <__sflush_r+0xb4>
 8003ac4:	2b16      	cmp	r3, #22
 8003ac6:	d101      	bne.n	8003acc <__sflush_r+0xb8>
 8003ac8:	602f      	str	r7, [r5, #0]
 8003aca:	e7b0      	b.n	8003a2e <__sflush_r+0x1a>
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad8:	690f      	ldr	r7, [r1, #16]
 8003ada:	2f00      	cmp	r7, #0
 8003adc:	d0a7      	beq.n	8003a2e <__sflush_r+0x1a>
 8003ade:	0793      	lsls	r3, r2, #30
 8003ae0:	680e      	ldr	r6, [r1, #0]
 8003ae2:	bf08      	it	eq
 8003ae4:	694b      	ldreq	r3, [r1, #20]
 8003ae6:	600f      	str	r7, [r1, #0]
 8003ae8:	bf18      	it	ne
 8003aea:	2300      	movne	r3, #0
 8003aec:	eba6 0807 	sub.w	r8, r6, r7
 8003af0:	608b      	str	r3, [r1, #8]
 8003af2:	f1b8 0f00 	cmp.w	r8, #0
 8003af6:	dd9a      	ble.n	8003a2e <__sflush_r+0x1a>
 8003af8:	4643      	mov	r3, r8
 8003afa:	463a      	mov	r2, r7
 8003afc:	6a21      	ldr	r1, [r4, #32]
 8003afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b00:	4628      	mov	r0, r5
 8003b02:	47b0      	blx	r6
 8003b04:	2800      	cmp	r0, #0
 8003b06:	dc07      	bgt.n	8003b18 <__sflush_r+0x104>
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0e:	81a3      	strh	r3, [r4, #12]
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b18:	4407      	add	r7, r0
 8003b1a:	eba8 0800 	sub.w	r8, r8, r0
 8003b1e:	e7e8      	b.n	8003af2 <__sflush_r+0xde>
 8003b20:	20400001 	.word	0x20400001

08003b24 <_fflush_r>:
 8003b24:	b538      	push	{r3, r4, r5, lr}
 8003b26:	690b      	ldr	r3, [r1, #16]
 8003b28:	4605      	mov	r5, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	b1db      	cbz	r3, 8003b66 <_fflush_r+0x42>
 8003b2e:	b118      	cbz	r0, 8003b38 <_fflush_r+0x14>
 8003b30:	6983      	ldr	r3, [r0, #24]
 8003b32:	b90b      	cbnz	r3, 8003b38 <_fflush_r+0x14>
 8003b34:	f000 f860 	bl	8003bf8 <__sinit>
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <_fflush_r+0x48>)
 8003b3a:	429c      	cmp	r4, r3
 8003b3c:	d109      	bne.n	8003b52 <_fflush_r+0x2e>
 8003b3e:	686c      	ldr	r4, [r5, #4]
 8003b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b44:	b17b      	cbz	r3, 8003b66 <_fflush_r+0x42>
 8003b46:	4621      	mov	r1, r4
 8003b48:	4628      	mov	r0, r5
 8003b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b4e:	f7ff bf61 	b.w	8003a14 <__sflush_r>
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <_fflush_r+0x4c>)
 8003b54:	429c      	cmp	r4, r3
 8003b56:	d101      	bne.n	8003b5c <_fflush_r+0x38>
 8003b58:	68ac      	ldr	r4, [r5, #8]
 8003b5a:	e7f1      	b.n	8003b40 <_fflush_r+0x1c>
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <_fflush_r+0x50>)
 8003b5e:	429c      	cmp	r4, r3
 8003b60:	bf08      	it	eq
 8003b62:	68ec      	ldreq	r4, [r5, #12]
 8003b64:	e7ec      	b.n	8003b40 <_fflush_r+0x1c>
 8003b66:	2000      	movs	r0, #0
 8003b68:	bd38      	pop	{r3, r4, r5, pc}
 8003b6a:	bf00      	nop
 8003b6c:	0800472c 	.word	0x0800472c
 8003b70:	0800474c 	.word	0x0800474c
 8003b74:	0800470c 	.word	0x0800470c

08003b78 <_cleanup_r>:
 8003b78:	4901      	ldr	r1, [pc, #4]	; (8003b80 <_cleanup_r+0x8>)
 8003b7a:	f000 b8a9 	b.w	8003cd0 <_fwalk_reent>
 8003b7e:	bf00      	nop
 8003b80:	08003b25 	.word	0x08003b25

08003b84 <std.isra.0>:
 8003b84:	2300      	movs	r3, #0
 8003b86:	b510      	push	{r4, lr}
 8003b88:	4604      	mov	r4, r0
 8003b8a:	6003      	str	r3, [r0, #0]
 8003b8c:	6043      	str	r3, [r0, #4]
 8003b8e:	6083      	str	r3, [r0, #8]
 8003b90:	8181      	strh	r1, [r0, #12]
 8003b92:	6643      	str	r3, [r0, #100]	; 0x64
 8003b94:	81c2      	strh	r2, [r0, #14]
 8003b96:	6103      	str	r3, [r0, #16]
 8003b98:	6143      	str	r3, [r0, #20]
 8003b9a:	6183      	str	r3, [r0, #24]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	305c      	adds	r0, #92	; 0x5c
 8003ba2:	f000 f91f 	bl	8003de4 <memset>
 8003ba6:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <std.isra.0+0x38>)
 8003ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <std.isra.0+0x3c>)
 8003bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <std.isra.0+0x40>)
 8003bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <std.isra.0+0x44>)
 8003bb4:	6224      	str	r4, [r4, #32]
 8003bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8003bb8:	bd10      	pop	{r4, pc}
 8003bba:	bf00      	nop
 8003bbc:	08004519 	.word	0x08004519
 8003bc0:	0800453b 	.word	0x0800453b
 8003bc4:	08004573 	.word	0x08004573
 8003bc8:	08004597 	.word	0x08004597

08003bcc <__sfmoreglue>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	1e4a      	subs	r2, r1, #1
 8003bd0:	2568      	movs	r5, #104	; 0x68
 8003bd2:	4355      	muls	r5, r2
 8003bd4:	460e      	mov	r6, r1
 8003bd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bda:	f000 f959 	bl	8003e90 <_malloc_r>
 8003bde:	4604      	mov	r4, r0
 8003be0:	b140      	cbz	r0, 8003bf4 <__sfmoreglue+0x28>
 8003be2:	2100      	movs	r1, #0
 8003be4:	e880 0042 	stmia.w	r0, {r1, r6}
 8003be8:	300c      	adds	r0, #12
 8003bea:	60a0      	str	r0, [r4, #8]
 8003bec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bf0:	f000 f8f8 	bl	8003de4 <memset>
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}

08003bf8 <__sinit>:
 8003bf8:	6983      	ldr	r3, [r0, #24]
 8003bfa:	b510      	push	{r4, lr}
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	bb33      	cbnz	r3, 8003c4e <__sinit+0x56>
 8003c00:	6483      	str	r3, [r0, #72]	; 0x48
 8003c02:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003c04:	6503      	str	r3, [r0, #80]	; 0x50
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <__sinit+0x58>)
 8003c08:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <__sinit+0x5c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6282      	str	r2, [r0, #40]	; 0x28
 8003c0e:	4298      	cmp	r0, r3
 8003c10:	bf04      	itt	eq
 8003c12:	2301      	moveq	r3, #1
 8003c14:	6183      	streq	r3, [r0, #24]
 8003c16:	f000 f81f 	bl	8003c58 <__sfp>
 8003c1a:	6060      	str	r0, [r4, #4]
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f000 f81b 	bl	8003c58 <__sfp>
 8003c22:	60a0      	str	r0, [r4, #8]
 8003c24:	4620      	mov	r0, r4
 8003c26:	f000 f817 	bl	8003c58 <__sfp>
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	60e0      	str	r0, [r4, #12]
 8003c2e:	2104      	movs	r1, #4
 8003c30:	6860      	ldr	r0, [r4, #4]
 8003c32:	f7ff ffa7 	bl	8003b84 <std.isra.0>
 8003c36:	2201      	movs	r2, #1
 8003c38:	2109      	movs	r1, #9
 8003c3a:	68a0      	ldr	r0, [r4, #8]
 8003c3c:	f7ff ffa2 	bl	8003b84 <std.isra.0>
 8003c40:	2202      	movs	r2, #2
 8003c42:	2112      	movs	r1, #18
 8003c44:	68e0      	ldr	r0, [r4, #12]
 8003c46:	f7ff ff9d 	bl	8003b84 <std.isra.0>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	61a3      	str	r3, [r4, #24]
 8003c4e:	bd10      	pop	{r4, pc}
 8003c50:	08004708 	.word	0x08004708
 8003c54:	08003b79 	.word	0x08003b79

08003c58 <__sfp>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <__sfp+0x74>)
 8003c5c:	681e      	ldr	r6, [r3, #0]
 8003c5e:	69b3      	ldr	r3, [r6, #24]
 8003c60:	4607      	mov	r7, r0
 8003c62:	b913      	cbnz	r3, 8003c6a <__sfp+0x12>
 8003c64:	4630      	mov	r0, r6
 8003c66:	f7ff ffc7 	bl	8003bf8 <__sinit>
 8003c6a:	3648      	adds	r6, #72	; 0x48
 8003c6c:	68b4      	ldr	r4, [r6, #8]
 8003c6e:	6873      	ldr	r3, [r6, #4]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	d503      	bpl.n	8003c7c <__sfp+0x24>
 8003c74:	6833      	ldr	r3, [r6, #0]
 8003c76:	b133      	cbz	r3, 8003c86 <__sfp+0x2e>
 8003c78:	6836      	ldr	r6, [r6, #0]
 8003c7a:	e7f7      	b.n	8003c6c <__sfp+0x14>
 8003c7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c80:	b16d      	cbz	r5, 8003c9e <__sfp+0x46>
 8003c82:	3468      	adds	r4, #104	; 0x68
 8003c84:	e7f4      	b.n	8003c70 <__sfp+0x18>
 8003c86:	2104      	movs	r1, #4
 8003c88:	4638      	mov	r0, r7
 8003c8a:	f7ff ff9f 	bl	8003bcc <__sfmoreglue>
 8003c8e:	6030      	str	r0, [r6, #0]
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d1f1      	bne.n	8003c78 <__sfp+0x20>
 8003c94:	230c      	movs	r3, #12
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	4604      	mov	r4, r0
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ca2:	81e3      	strh	r3, [r4, #14]
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	6665      	str	r5, [r4, #100]	; 0x64
 8003caa:	6025      	str	r5, [r4, #0]
 8003cac:	60a5      	str	r5, [r4, #8]
 8003cae:	6065      	str	r5, [r4, #4]
 8003cb0:	6125      	str	r5, [r4, #16]
 8003cb2:	6165      	str	r5, [r4, #20]
 8003cb4:	61a5      	str	r5, [r4, #24]
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	4629      	mov	r1, r5
 8003cba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003cbe:	f000 f891 	bl	8003de4 <memset>
 8003cc2:	6365      	str	r5, [r4, #52]	; 0x34
 8003cc4:	63a5      	str	r5, [r4, #56]	; 0x38
 8003cc6:	64a5      	str	r5, [r4, #72]	; 0x48
 8003cc8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003cca:	e7e6      	b.n	8003c9a <__sfp+0x42>
 8003ccc:	08004708 	.word	0x08004708

08003cd0 <_fwalk_reent>:
 8003cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	4689      	mov	r9, r1
 8003cd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cdc:	2600      	movs	r6, #0
 8003cde:	b914      	cbnz	r4, 8003ce6 <_fwalk_reent+0x16>
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce6:	68a5      	ldr	r5, [r4, #8]
 8003ce8:	6867      	ldr	r7, [r4, #4]
 8003cea:	3f01      	subs	r7, #1
 8003cec:	d501      	bpl.n	8003cf2 <_fwalk_reent+0x22>
 8003cee:	6824      	ldr	r4, [r4, #0]
 8003cf0:	e7f5      	b.n	8003cde <_fwalk_reent+0xe>
 8003cf2:	89ab      	ldrh	r3, [r5, #12]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d907      	bls.n	8003d08 <_fwalk_reent+0x38>
 8003cf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	d003      	beq.n	8003d08 <_fwalk_reent+0x38>
 8003d00:	4629      	mov	r1, r5
 8003d02:	4640      	mov	r0, r8
 8003d04:	47c8      	blx	r9
 8003d06:	4306      	orrs	r6, r0
 8003d08:	3568      	adds	r5, #104	; 0x68
 8003d0a:	e7ee      	b.n	8003cea <_fwalk_reent+0x1a>

08003d0c <__swhatbuf_r>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	460e      	mov	r6, r1
 8003d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d14:	2900      	cmp	r1, #0
 8003d16:	b090      	sub	sp, #64	; 0x40
 8003d18:	4614      	mov	r4, r2
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	da07      	bge.n	8003d2e <__swhatbuf_r+0x22>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	602b      	str	r3, [r5, #0]
 8003d22:	89b3      	ldrh	r3, [r6, #12]
 8003d24:	061a      	lsls	r2, r3, #24
 8003d26:	d410      	bmi.n	8003d4a <__swhatbuf_r+0x3e>
 8003d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d2c:	e00e      	b.n	8003d4c <__swhatbuf_r+0x40>
 8003d2e:	aa01      	add	r2, sp, #4
 8003d30:	f000 fc58 	bl	80045e4 <_fstat_r>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	dbf2      	blt.n	8003d1e <__swhatbuf_r+0x12>
 8003d38:	9a02      	ldr	r2, [sp, #8]
 8003d3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d42:	425a      	negs	r2, r3
 8003d44:	415a      	adcs	r2, r3
 8003d46:	602a      	str	r2, [r5, #0]
 8003d48:	e7ee      	b.n	8003d28 <__swhatbuf_r+0x1c>
 8003d4a:	2340      	movs	r3, #64	; 0x40
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	6023      	str	r3, [r4, #0]
 8003d50:	b010      	add	sp, #64	; 0x40
 8003d52:	bd70      	pop	{r4, r5, r6, pc}

08003d54 <__smakebuf_r>:
 8003d54:	898b      	ldrh	r3, [r1, #12]
 8003d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d58:	079d      	lsls	r5, r3, #30
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	d507      	bpl.n	8003d70 <__smakebuf_r+0x1c>
 8003d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	6123      	str	r3, [r4, #16]
 8003d68:	2301      	movs	r3, #1
 8003d6a:	6163      	str	r3, [r4, #20]
 8003d6c:	b002      	add	sp, #8
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	ab01      	add	r3, sp, #4
 8003d72:	466a      	mov	r2, sp
 8003d74:	f7ff ffca 	bl	8003d0c <__swhatbuf_r>
 8003d78:	9900      	ldr	r1, [sp, #0]
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	f000 f887 	bl	8003e90 <_malloc_r>
 8003d82:	b948      	cbnz	r0, 8003d98 <__smakebuf_r+0x44>
 8003d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d88:	059a      	lsls	r2, r3, #22
 8003d8a:	d4ef      	bmi.n	8003d6c <__smakebuf_r+0x18>
 8003d8c:	f023 0303 	bic.w	r3, r3, #3
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	e7e3      	b.n	8003d60 <__smakebuf_r+0xc>
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <__smakebuf_r+0x7c>)
 8003d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	6020      	str	r0, [r4, #0]
 8003da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da4:	81a3      	strh	r3, [r4, #12]
 8003da6:	9b00      	ldr	r3, [sp, #0]
 8003da8:	6163      	str	r3, [r4, #20]
 8003daa:	9b01      	ldr	r3, [sp, #4]
 8003dac:	6120      	str	r0, [r4, #16]
 8003dae:	b15b      	cbz	r3, 8003dc8 <__smakebuf_r+0x74>
 8003db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003db4:	4630      	mov	r0, r6
 8003db6:	f000 fc27 	bl	8004608 <_isatty_r>
 8003dba:	b128      	cbz	r0, 8003dc8 <__smakebuf_r+0x74>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	89a3      	ldrh	r3, [r4, #12]
 8003dca:	431d      	orrs	r5, r3
 8003dcc:	81a5      	strh	r5, [r4, #12]
 8003dce:	e7cd      	b.n	8003d6c <__smakebuf_r+0x18>
 8003dd0:	08003b79 	.word	0x08003b79

08003dd4 <malloc>:
 8003dd4:	4b02      	ldr	r3, [pc, #8]	; (8003de0 <malloc+0xc>)
 8003dd6:	4601      	mov	r1, r0
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	f000 b859 	b.w	8003e90 <_malloc_r>
 8003dde:	bf00      	nop
 8003de0:	20000014 	.word	0x20000014

08003de4 <memset>:
 8003de4:	4402      	add	r2, r0
 8003de6:	4603      	mov	r3, r0
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d100      	bne.n	8003dee <memset+0xa>
 8003dec:	4770      	bx	lr
 8003dee:	f803 1b01 	strb.w	r1, [r3], #1
 8003df2:	e7f9      	b.n	8003de8 <memset+0x4>

08003df4 <_free_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4605      	mov	r5, r0
 8003df8:	2900      	cmp	r1, #0
 8003dfa:	d045      	beq.n	8003e88 <_free_r+0x94>
 8003dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e00:	1f0c      	subs	r4, r1, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bfb8      	it	lt
 8003e06:	18e4      	addlt	r4, r4, r3
 8003e08:	f000 fc20 	bl	800464c <__malloc_lock>
 8003e0c:	4a1f      	ldr	r2, [pc, #124]	; (8003e8c <_free_r+0x98>)
 8003e0e:	6813      	ldr	r3, [r2, #0]
 8003e10:	4610      	mov	r0, r2
 8003e12:	b933      	cbnz	r3, 8003e22 <_free_r+0x2e>
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	6014      	str	r4, [r2, #0]
 8003e18:	4628      	mov	r0, r5
 8003e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e1e:	f000 bc16 	b.w	800464e <__malloc_unlock>
 8003e22:	42a3      	cmp	r3, r4
 8003e24:	d90c      	bls.n	8003e40 <_free_r+0x4c>
 8003e26:	6821      	ldr	r1, [r4, #0]
 8003e28:	1862      	adds	r2, r4, r1
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	bf04      	itt	eq
 8003e2e:	681a      	ldreq	r2, [r3, #0]
 8003e30:	685b      	ldreq	r3, [r3, #4]
 8003e32:	6063      	str	r3, [r4, #4]
 8003e34:	bf04      	itt	eq
 8003e36:	1852      	addeq	r2, r2, r1
 8003e38:	6022      	streq	r2, [r4, #0]
 8003e3a:	6004      	str	r4, [r0, #0]
 8003e3c:	e7ec      	b.n	8003e18 <_free_r+0x24>
 8003e3e:	4613      	mov	r3, r2
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	b10a      	cbz	r2, 8003e48 <_free_r+0x54>
 8003e44:	42a2      	cmp	r2, r4
 8003e46:	d9fa      	bls.n	8003e3e <_free_r+0x4a>
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	1858      	adds	r0, r3, r1
 8003e4c:	42a0      	cmp	r0, r4
 8003e4e:	d10b      	bne.n	8003e68 <_free_r+0x74>
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	4401      	add	r1, r0
 8003e54:	1858      	adds	r0, r3, r1
 8003e56:	4282      	cmp	r2, r0
 8003e58:	6019      	str	r1, [r3, #0]
 8003e5a:	d1dd      	bne.n	8003e18 <_free_r+0x24>
 8003e5c:	6810      	ldr	r0, [r2, #0]
 8003e5e:	6852      	ldr	r2, [r2, #4]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	4401      	add	r1, r0
 8003e64:	6019      	str	r1, [r3, #0]
 8003e66:	e7d7      	b.n	8003e18 <_free_r+0x24>
 8003e68:	d902      	bls.n	8003e70 <_free_r+0x7c>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	e7d3      	b.n	8003e18 <_free_r+0x24>
 8003e70:	6820      	ldr	r0, [r4, #0]
 8003e72:	1821      	adds	r1, r4, r0
 8003e74:	428a      	cmp	r2, r1
 8003e76:	bf04      	itt	eq
 8003e78:	6811      	ldreq	r1, [r2, #0]
 8003e7a:	6852      	ldreq	r2, [r2, #4]
 8003e7c:	6062      	str	r2, [r4, #4]
 8003e7e:	bf04      	itt	eq
 8003e80:	1809      	addeq	r1, r1, r0
 8003e82:	6021      	streq	r1, [r4, #0]
 8003e84:	605c      	str	r4, [r3, #4]
 8003e86:	e7c7      	b.n	8003e18 <_free_r+0x24>
 8003e88:	bd38      	pop	{r3, r4, r5, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20001040 	.word	0x20001040

08003e90 <_malloc_r>:
 8003e90:	b570      	push	{r4, r5, r6, lr}
 8003e92:	1ccd      	adds	r5, r1, #3
 8003e94:	f025 0503 	bic.w	r5, r5, #3
 8003e98:	3508      	adds	r5, #8
 8003e9a:	2d0c      	cmp	r5, #12
 8003e9c:	bf38      	it	cc
 8003e9e:	250c      	movcc	r5, #12
 8003ea0:	2d00      	cmp	r5, #0
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	db01      	blt.n	8003eaa <_malloc_r+0x1a>
 8003ea6:	42a9      	cmp	r1, r5
 8003ea8:	d903      	bls.n	8003eb2 <_malloc_r+0x22>
 8003eaa:	230c      	movs	r3, #12
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	2000      	movs	r0, #0
 8003eb0:	bd70      	pop	{r4, r5, r6, pc}
 8003eb2:	f000 fbcb 	bl	800464c <__malloc_lock>
 8003eb6:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <_malloc_r+0xb4>)
 8003eb8:	6814      	ldr	r4, [r2, #0]
 8003eba:	4621      	mov	r1, r4
 8003ebc:	b991      	cbnz	r1, 8003ee4 <_malloc_r+0x54>
 8003ebe:	4c22      	ldr	r4, [pc, #136]	; (8003f48 <_malloc_r+0xb8>)
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	b91b      	cbnz	r3, 8003ecc <_malloc_r+0x3c>
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f000 fb17 	bl	80044f8 <_sbrk_r>
 8003eca:	6020      	str	r0, [r4, #0]
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4630      	mov	r0, r6
 8003ed0:	f000 fb12 	bl	80044f8 <_sbrk_r>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d126      	bne.n	8003f26 <_malloc_r+0x96>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	6033      	str	r3, [r6, #0]
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 fbb6 	bl	800464e <__malloc_unlock>
 8003ee2:	e7e4      	b.n	8003eae <_malloc_r+0x1e>
 8003ee4:	680b      	ldr	r3, [r1, #0]
 8003ee6:	1b5b      	subs	r3, r3, r5
 8003ee8:	d41a      	bmi.n	8003f20 <_malloc_r+0x90>
 8003eea:	2b0b      	cmp	r3, #11
 8003eec:	d90f      	bls.n	8003f0e <_malloc_r+0x7e>
 8003eee:	600b      	str	r3, [r1, #0]
 8003ef0:	50cd      	str	r5, [r1, r3]
 8003ef2:	18cc      	adds	r4, r1, r3
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 fbaa 	bl	800464e <__malloc_unlock>
 8003efa:	f104 000b 	add.w	r0, r4, #11
 8003efe:	1d23      	adds	r3, r4, #4
 8003f00:	f020 0007 	bic.w	r0, r0, #7
 8003f04:	1ac3      	subs	r3, r0, r3
 8003f06:	d01b      	beq.n	8003f40 <_malloc_r+0xb0>
 8003f08:	425a      	negs	r2, r3
 8003f0a:	50e2      	str	r2, [r4, r3]
 8003f0c:	bd70      	pop	{r4, r5, r6, pc}
 8003f0e:	428c      	cmp	r4, r1
 8003f10:	bf0d      	iteet	eq
 8003f12:	6863      	ldreq	r3, [r4, #4]
 8003f14:	684b      	ldrne	r3, [r1, #4]
 8003f16:	6063      	strne	r3, [r4, #4]
 8003f18:	6013      	streq	r3, [r2, #0]
 8003f1a:	bf18      	it	ne
 8003f1c:	460c      	movne	r4, r1
 8003f1e:	e7e9      	b.n	8003ef4 <_malloc_r+0x64>
 8003f20:	460c      	mov	r4, r1
 8003f22:	6849      	ldr	r1, [r1, #4]
 8003f24:	e7ca      	b.n	8003ebc <_malloc_r+0x2c>
 8003f26:	1cc4      	adds	r4, r0, #3
 8003f28:	f024 0403 	bic.w	r4, r4, #3
 8003f2c:	42a0      	cmp	r0, r4
 8003f2e:	d005      	beq.n	8003f3c <_malloc_r+0xac>
 8003f30:	1a21      	subs	r1, r4, r0
 8003f32:	4630      	mov	r0, r6
 8003f34:	f000 fae0 	bl	80044f8 <_sbrk_r>
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d0cd      	beq.n	8003ed8 <_malloc_r+0x48>
 8003f3c:	6025      	str	r5, [r4, #0]
 8003f3e:	e7d9      	b.n	8003ef4 <_malloc_r+0x64>
 8003f40:	bd70      	pop	{r4, r5, r6, pc}
 8003f42:	bf00      	nop
 8003f44:	20001040 	.word	0x20001040
 8003f48:	20001044 	.word	0x20001044

08003f4c <__sfputc_r>:
 8003f4c:	6893      	ldr	r3, [r2, #8]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	b410      	push	{r4}
 8003f54:	6093      	str	r3, [r2, #8]
 8003f56:	da09      	bge.n	8003f6c <__sfputc_r+0x20>
 8003f58:	6994      	ldr	r4, [r2, #24]
 8003f5a:	42a3      	cmp	r3, r4
 8003f5c:	db02      	blt.n	8003f64 <__sfputc_r+0x18>
 8003f5e:	b2cb      	uxtb	r3, r1
 8003f60:	2b0a      	cmp	r3, #10
 8003f62:	d103      	bne.n	8003f6c <__sfputc_r+0x20>
 8003f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f68:	f7ff bc94 	b.w	8003894 <__swbuf_r>
 8003f6c:	6813      	ldr	r3, [r2, #0]
 8003f6e:	1c58      	adds	r0, r3, #1
 8003f70:	6010      	str	r0, [r2, #0]
 8003f72:	7019      	strb	r1, [r3, #0]
 8003f74:	b2c8      	uxtb	r0, r1
 8003f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <__sfputs_r>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460f      	mov	r7, r1
 8003f82:	4614      	mov	r4, r2
 8003f84:	18d5      	adds	r5, r2, r3
 8003f86:	42ac      	cmp	r4, r5
 8003f88:	d101      	bne.n	8003f8e <__sfputs_r+0x12>
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	e007      	b.n	8003f9e <__sfputs_r+0x22>
 8003f8e:	463a      	mov	r2, r7
 8003f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f94:	4630      	mov	r0, r6
 8003f96:	f7ff ffd9 	bl	8003f4c <__sfputc_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	d1f3      	bne.n	8003f86 <__sfputs_r+0xa>
 8003f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fa0 <_vfiprintf_r>:
 8003fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa4:	b09d      	sub	sp, #116	; 0x74
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	4617      	mov	r7, r2
 8003faa:	9303      	str	r3, [sp, #12]
 8003fac:	4606      	mov	r6, r0
 8003fae:	b118      	cbz	r0, 8003fb8 <_vfiprintf_r+0x18>
 8003fb0:	6983      	ldr	r3, [r0, #24]
 8003fb2:	b90b      	cbnz	r3, 8003fb8 <_vfiprintf_r+0x18>
 8003fb4:	f7ff fe20 	bl	8003bf8 <__sinit>
 8003fb8:	4b7c      	ldr	r3, [pc, #496]	; (80041ac <_vfiprintf_r+0x20c>)
 8003fba:	429c      	cmp	r4, r3
 8003fbc:	d157      	bne.n	800406e <_vfiprintf_r+0xce>
 8003fbe:	6874      	ldr	r4, [r6, #4]
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	0718      	lsls	r0, r3, #28
 8003fc4:	d55d      	bpl.n	8004082 <_vfiprintf_r+0xe2>
 8003fc6:	6923      	ldr	r3, [r4, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d05a      	beq.n	8004082 <_vfiprintf_r+0xe2>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fd6:	2330      	movs	r3, #48	; 0x30
 8003fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fdc:	f04f 0b01 	mov.w	fp, #1
 8003fe0:	46b8      	mov	r8, r7
 8003fe2:	4645      	mov	r5, r8
 8003fe4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d155      	bne.n	8004098 <_vfiprintf_r+0xf8>
 8003fec:	ebb8 0a07 	subs.w	sl, r8, r7
 8003ff0:	d00b      	beq.n	800400a <_vfiprintf_r+0x6a>
 8003ff2:	4653      	mov	r3, sl
 8003ff4:	463a      	mov	r2, r7
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f7ff ffbf 	bl	8003f7c <__sfputs_r>
 8003ffe:	3001      	adds	r0, #1
 8004000:	f000 80c4 	beq.w	800418c <_vfiprintf_r+0x1ec>
 8004004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004006:	4453      	add	r3, sl
 8004008:	9309      	str	r3, [sp, #36]	; 0x24
 800400a:	f898 3000 	ldrb.w	r3, [r8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80bc 	beq.w	800418c <_vfiprintf_r+0x1ec>
 8004014:	2300      	movs	r3, #0
 8004016:	f04f 32ff 	mov.w	r2, #4294967295
 800401a:	9304      	str	r3, [sp, #16]
 800401c:	9307      	str	r3, [sp, #28]
 800401e:	9205      	str	r2, [sp, #20]
 8004020:	9306      	str	r3, [sp, #24]
 8004022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004026:	931a      	str	r3, [sp, #104]	; 0x68
 8004028:	2205      	movs	r2, #5
 800402a:	7829      	ldrb	r1, [r5, #0]
 800402c:	4860      	ldr	r0, [pc, #384]	; (80041b0 <_vfiprintf_r+0x210>)
 800402e:	f7fc f8df 	bl	80001f0 <memchr>
 8004032:	f105 0801 	add.w	r8, r5, #1
 8004036:	9b04      	ldr	r3, [sp, #16]
 8004038:	2800      	cmp	r0, #0
 800403a:	d131      	bne.n	80040a0 <_vfiprintf_r+0x100>
 800403c:	06d9      	lsls	r1, r3, #27
 800403e:	bf44      	itt	mi
 8004040:	2220      	movmi	r2, #32
 8004042:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004046:	071a      	lsls	r2, r3, #28
 8004048:	bf44      	itt	mi
 800404a:	222b      	movmi	r2, #43	; 0x2b
 800404c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004050:	782a      	ldrb	r2, [r5, #0]
 8004052:	2a2a      	cmp	r2, #42	; 0x2a
 8004054:	d02c      	beq.n	80040b0 <_vfiprintf_r+0x110>
 8004056:	9a07      	ldr	r2, [sp, #28]
 8004058:	2100      	movs	r1, #0
 800405a:	200a      	movs	r0, #10
 800405c:	46a8      	mov	r8, r5
 800405e:	3501      	adds	r5, #1
 8004060:	f898 3000 	ldrb.w	r3, [r8]
 8004064:	3b30      	subs	r3, #48	; 0x30
 8004066:	2b09      	cmp	r3, #9
 8004068:	d96d      	bls.n	8004146 <_vfiprintf_r+0x1a6>
 800406a:	b371      	cbz	r1, 80040ca <_vfiprintf_r+0x12a>
 800406c:	e026      	b.n	80040bc <_vfiprintf_r+0x11c>
 800406e:	4b51      	ldr	r3, [pc, #324]	; (80041b4 <_vfiprintf_r+0x214>)
 8004070:	429c      	cmp	r4, r3
 8004072:	d101      	bne.n	8004078 <_vfiprintf_r+0xd8>
 8004074:	68b4      	ldr	r4, [r6, #8]
 8004076:	e7a3      	b.n	8003fc0 <_vfiprintf_r+0x20>
 8004078:	4b4f      	ldr	r3, [pc, #316]	; (80041b8 <_vfiprintf_r+0x218>)
 800407a:	429c      	cmp	r4, r3
 800407c:	bf08      	it	eq
 800407e:	68f4      	ldreq	r4, [r6, #12]
 8004080:	e79e      	b.n	8003fc0 <_vfiprintf_r+0x20>
 8004082:	4621      	mov	r1, r4
 8004084:	4630      	mov	r0, r6
 8004086:	f7ff fc57 	bl	8003938 <__swsetup_r>
 800408a:	2800      	cmp	r0, #0
 800408c:	d09e      	beq.n	8003fcc <_vfiprintf_r+0x2c>
 800408e:	f04f 30ff 	mov.w	r0, #4294967295
 8004092:	b01d      	add	sp, #116	; 0x74
 8004094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004098:	2b25      	cmp	r3, #37	; 0x25
 800409a:	d0a7      	beq.n	8003fec <_vfiprintf_r+0x4c>
 800409c:	46a8      	mov	r8, r5
 800409e:	e7a0      	b.n	8003fe2 <_vfiprintf_r+0x42>
 80040a0:	4a43      	ldr	r2, [pc, #268]	; (80041b0 <_vfiprintf_r+0x210>)
 80040a2:	1a80      	subs	r0, r0, r2
 80040a4:	fa0b f000 	lsl.w	r0, fp, r0
 80040a8:	4318      	orrs	r0, r3
 80040aa:	9004      	str	r0, [sp, #16]
 80040ac:	4645      	mov	r5, r8
 80040ae:	e7bb      	b.n	8004028 <_vfiprintf_r+0x88>
 80040b0:	9a03      	ldr	r2, [sp, #12]
 80040b2:	1d11      	adds	r1, r2, #4
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	9103      	str	r1, [sp, #12]
 80040b8:	2a00      	cmp	r2, #0
 80040ba:	db01      	blt.n	80040c0 <_vfiprintf_r+0x120>
 80040bc:	9207      	str	r2, [sp, #28]
 80040be:	e004      	b.n	80040ca <_vfiprintf_r+0x12a>
 80040c0:	4252      	negs	r2, r2
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	9207      	str	r2, [sp, #28]
 80040c8:	9304      	str	r3, [sp, #16]
 80040ca:	f898 3000 	ldrb.w	r3, [r8]
 80040ce:	2b2e      	cmp	r3, #46	; 0x2e
 80040d0:	d110      	bne.n	80040f4 <_vfiprintf_r+0x154>
 80040d2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80040d6:	2b2a      	cmp	r3, #42	; 0x2a
 80040d8:	f108 0101 	add.w	r1, r8, #1
 80040dc:	d137      	bne.n	800414e <_vfiprintf_r+0x1ae>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	1d1a      	adds	r2, r3, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	9203      	str	r2, [sp, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfb8      	it	lt
 80040ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ee:	f108 0802 	add.w	r8, r8, #2
 80040f2:	9305      	str	r3, [sp, #20]
 80040f4:	4d31      	ldr	r5, [pc, #196]	; (80041bc <_vfiprintf_r+0x21c>)
 80040f6:	f898 1000 	ldrb.w	r1, [r8]
 80040fa:	2203      	movs	r2, #3
 80040fc:	4628      	mov	r0, r5
 80040fe:	f7fc f877 	bl	80001f0 <memchr>
 8004102:	b140      	cbz	r0, 8004116 <_vfiprintf_r+0x176>
 8004104:	2340      	movs	r3, #64	; 0x40
 8004106:	1b40      	subs	r0, r0, r5
 8004108:	fa03 f000 	lsl.w	r0, r3, r0
 800410c:	9b04      	ldr	r3, [sp, #16]
 800410e:	4303      	orrs	r3, r0
 8004110:	9304      	str	r3, [sp, #16]
 8004112:	f108 0801 	add.w	r8, r8, #1
 8004116:	f898 1000 	ldrb.w	r1, [r8]
 800411a:	4829      	ldr	r0, [pc, #164]	; (80041c0 <_vfiprintf_r+0x220>)
 800411c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004120:	2206      	movs	r2, #6
 8004122:	f108 0701 	add.w	r7, r8, #1
 8004126:	f7fc f863 	bl	80001f0 <memchr>
 800412a:	2800      	cmp	r0, #0
 800412c:	d034      	beq.n	8004198 <_vfiprintf_r+0x1f8>
 800412e:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <_vfiprintf_r+0x224>)
 8004130:	bb03      	cbnz	r3, 8004174 <_vfiprintf_r+0x1d4>
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	3307      	adds	r3, #7
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	3308      	adds	r3, #8
 800413c:	9303      	str	r3, [sp, #12]
 800413e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004140:	444b      	add	r3, r9
 8004142:	9309      	str	r3, [sp, #36]	; 0x24
 8004144:	e74c      	b.n	8003fe0 <_vfiprintf_r+0x40>
 8004146:	fb00 3202 	mla	r2, r0, r2, r3
 800414a:	2101      	movs	r1, #1
 800414c:	e786      	b.n	800405c <_vfiprintf_r+0xbc>
 800414e:	2300      	movs	r3, #0
 8004150:	9305      	str	r3, [sp, #20]
 8004152:	4618      	mov	r0, r3
 8004154:	250a      	movs	r5, #10
 8004156:	4688      	mov	r8, r1
 8004158:	3101      	adds	r1, #1
 800415a:	f898 2000 	ldrb.w	r2, [r8]
 800415e:	3a30      	subs	r2, #48	; 0x30
 8004160:	2a09      	cmp	r2, #9
 8004162:	d903      	bls.n	800416c <_vfiprintf_r+0x1cc>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0c5      	beq.n	80040f4 <_vfiprintf_r+0x154>
 8004168:	9005      	str	r0, [sp, #20]
 800416a:	e7c3      	b.n	80040f4 <_vfiprintf_r+0x154>
 800416c:	fb05 2000 	mla	r0, r5, r0, r2
 8004170:	2301      	movs	r3, #1
 8004172:	e7f0      	b.n	8004156 <_vfiprintf_r+0x1b6>
 8004174:	ab03      	add	r3, sp, #12
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	4622      	mov	r2, r4
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <_vfiprintf_r+0x228>)
 800417c:	a904      	add	r1, sp, #16
 800417e:	4630      	mov	r0, r6
 8004180:	f3af 8000 	nop.w
 8004184:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004188:	4681      	mov	r9, r0
 800418a:	d1d8      	bne.n	800413e <_vfiprintf_r+0x19e>
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	065b      	lsls	r3, r3, #25
 8004190:	f53f af7d 	bmi.w	800408e <_vfiprintf_r+0xee>
 8004194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004196:	e77c      	b.n	8004092 <_vfiprintf_r+0xf2>
 8004198:	ab03      	add	r3, sp, #12
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	4622      	mov	r2, r4
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <_vfiprintf_r+0x228>)
 80041a0:	a904      	add	r1, sp, #16
 80041a2:	4630      	mov	r0, r6
 80041a4:	f000 f888 	bl	80042b8 <_printf_i>
 80041a8:	e7ec      	b.n	8004184 <_vfiprintf_r+0x1e4>
 80041aa:	bf00      	nop
 80041ac:	0800472c 	.word	0x0800472c
 80041b0:	0800476c 	.word	0x0800476c
 80041b4:	0800474c 	.word	0x0800474c
 80041b8:	0800470c 	.word	0x0800470c
 80041bc:	08004772 	.word	0x08004772
 80041c0:	08004776 	.word	0x08004776
 80041c4:	00000000 	.word	0x00000000
 80041c8:	08003f7d 	.word	0x08003f7d

080041cc <_printf_common>:
 80041cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041d0:	4691      	mov	r9, r2
 80041d2:	461f      	mov	r7, r3
 80041d4:	688a      	ldr	r2, [r1, #8]
 80041d6:	690b      	ldr	r3, [r1, #16]
 80041d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041dc:	4293      	cmp	r3, r2
 80041de:	bfb8      	it	lt
 80041e0:	4613      	movlt	r3, r2
 80041e2:	f8c9 3000 	str.w	r3, [r9]
 80041e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ea:	4606      	mov	r6, r0
 80041ec:	460c      	mov	r4, r1
 80041ee:	b112      	cbz	r2, 80041f6 <_printf_common+0x2a>
 80041f0:	3301      	adds	r3, #1
 80041f2:	f8c9 3000 	str.w	r3, [r9]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	0699      	lsls	r1, r3, #26
 80041fa:	bf42      	ittt	mi
 80041fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004200:	3302      	addmi	r3, #2
 8004202:	f8c9 3000 	strmi.w	r3, [r9]
 8004206:	6825      	ldr	r5, [r4, #0]
 8004208:	f015 0506 	ands.w	r5, r5, #6
 800420c:	d107      	bne.n	800421e <_printf_common+0x52>
 800420e:	f104 0a19 	add.w	sl, r4, #25
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	f8d9 2000 	ldr.w	r2, [r9]
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	429d      	cmp	r5, r3
 800421c:	db29      	blt.n	8004272 <_printf_common+0xa6>
 800421e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004222:	6822      	ldr	r2, [r4, #0]
 8004224:	3300      	adds	r3, #0
 8004226:	bf18      	it	ne
 8004228:	2301      	movne	r3, #1
 800422a:	0692      	lsls	r2, r2, #26
 800422c:	d42e      	bmi.n	800428c <_printf_common+0xc0>
 800422e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004232:	4639      	mov	r1, r7
 8004234:	4630      	mov	r0, r6
 8004236:	47c0      	blx	r8
 8004238:	3001      	adds	r0, #1
 800423a:	d021      	beq.n	8004280 <_printf_common+0xb4>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	68e5      	ldr	r5, [r4, #12]
 8004240:	f8d9 2000 	ldr.w	r2, [r9]
 8004244:	f003 0306 	and.w	r3, r3, #6
 8004248:	2b04      	cmp	r3, #4
 800424a:	bf08      	it	eq
 800424c:	1aad      	subeq	r5, r5, r2
 800424e:	68a3      	ldr	r3, [r4, #8]
 8004250:	6922      	ldr	r2, [r4, #16]
 8004252:	bf0c      	ite	eq
 8004254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004258:	2500      	movne	r5, #0
 800425a:	4293      	cmp	r3, r2
 800425c:	bfc4      	itt	gt
 800425e:	1a9b      	subgt	r3, r3, r2
 8004260:	18ed      	addgt	r5, r5, r3
 8004262:	f04f 0900 	mov.w	r9, #0
 8004266:	341a      	adds	r4, #26
 8004268:	454d      	cmp	r5, r9
 800426a:	d11b      	bne.n	80042a4 <_printf_common+0xd8>
 800426c:	2000      	movs	r0, #0
 800426e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004272:	2301      	movs	r3, #1
 8004274:	4652      	mov	r2, sl
 8004276:	4639      	mov	r1, r7
 8004278:	4630      	mov	r0, r6
 800427a:	47c0      	blx	r8
 800427c:	3001      	adds	r0, #1
 800427e:	d103      	bne.n	8004288 <_printf_common+0xbc>
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004288:	3501      	adds	r5, #1
 800428a:	e7c2      	b.n	8004212 <_printf_common+0x46>
 800428c:	18e1      	adds	r1, r4, r3
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	2030      	movs	r0, #48	; 0x30
 8004292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004296:	4422      	add	r2, r4
 8004298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800429c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042a0:	3302      	adds	r3, #2
 80042a2:	e7c4      	b.n	800422e <_printf_common+0x62>
 80042a4:	2301      	movs	r3, #1
 80042a6:	4622      	mov	r2, r4
 80042a8:	4639      	mov	r1, r7
 80042aa:	4630      	mov	r0, r6
 80042ac:	47c0      	blx	r8
 80042ae:	3001      	adds	r0, #1
 80042b0:	d0e6      	beq.n	8004280 <_printf_common+0xb4>
 80042b2:	f109 0901 	add.w	r9, r9, #1
 80042b6:	e7d7      	b.n	8004268 <_printf_common+0x9c>

080042b8 <_printf_i>:
 80042b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042bc:	4617      	mov	r7, r2
 80042be:	7e0a      	ldrb	r2, [r1, #24]
 80042c0:	b085      	sub	sp, #20
 80042c2:	2a6e      	cmp	r2, #110	; 0x6e
 80042c4:	4698      	mov	r8, r3
 80042c6:	4606      	mov	r6, r0
 80042c8:	460c      	mov	r4, r1
 80042ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042cc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80042d0:	f000 80bc 	beq.w	800444c <_printf_i+0x194>
 80042d4:	d81a      	bhi.n	800430c <_printf_i+0x54>
 80042d6:	2a63      	cmp	r2, #99	; 0x63
 80042d8:	d02e      	beq.n	8004338 <_printf_i+0x80>
 80042da:	d80a      	bhi.n	80042f2 <_printf_i+0x3a>
 80042dc:	2a00      	cmp	r2, #0
 80042de:	f000 80c8 	beq.w	8004472 <_printf_i+0x1ba>
 80042e2:	2a58      	cmp	r2, #88	; 0x58
 80042e4:	f000 808a 	beq.w	80043fc <_printf_i+0x144>
 80042e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042ec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80042f0:	e02a      	b.n	8004348 <_printf_i+0x90>
 80042f2:	2a64      	cmp	r2, #100	; 0x64
 80042f4:	d001      	beq.n	80042fa <_printf_i+0x42>
 80042f6:	2a69      	cmp	r2, #105	; 0x69
 80042f8:	d1f6      	bne.n	80042e8 <_printf_i+0x30>
 80042fa:	6821      	ldr	r1, [r4, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004302:	d023      	beq.n	800434c <_printf_i+0x94>
 8004304:	1d11      	adds	r1, r2, #4
 8004306:	6019      	str	r1, [r3, #0]
 8004308:	6813      	ldr	r3, [r2, #0]
 800430a:	e027      	b.n	800435c <_printf_i+0xa4>
 800430c:	2a73      	cmp	r2, #115	; 0x73
 800430e:	f000 80b4 	beq.w	800447a <_printf_i+0x1c2>
 8004312:	d808      	bhi.n	8004326 <_printf_i+0x6e>
 8004314:	2a6f      	cmp	r2, #111	; 0x6f
 8004316:	d02a      	beq.n	800436e <_printf_i+0xb6>
 8004318:	2a70      	cmp	r2, #112	; 0x70
 800431a:	d1e5      	bne.n	80042e8 <_printf_i+0x30>
 800431c:	680a      	ldr	r2, [r1, #0]
 800431e:	f042 0220 	orr.w	r2, r2, #32
 8004322:	600a      	str	r2, [r1, #0]
 8004324:	e003      	b.n	800432e <_printf_i+0x76>
 8004326:	2a75      	cmp	r2, #117	; 0x75
 8004328:	d021      	beq.n	800436e <_printf_i+0xb6>
 800432a:	2a78      	cmp	r2, #120	; 0x78
 800432c:	d1dc      	bne.n	80042e8 <_printf_i+0x30>
 800432e:	2278      	movs	r2, #120	; 0x78
 8004330:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004334:	496e      	ldr	r1, [pc, #440]	; (80044f0 <_printf_i+0x238>)
 8004336:	e064      	b.n	8004402 <_printf_i+0x14a>
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800433e:	1d11      	adds	r1, r2, #4
 8004340:	6019      	str	r1, [r3, #0]
 8004342:	6813      	ldr	r3, [r2, #0]
 8004344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004348:	2301      	movs	r3, #1
 800434a:	e0a3      	b.n	8004494 <_printf_i+0x1dc>
 800434c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004350:	f102 0104 	add.w	r1, r2, #4
 8004354:	6019      	str	r1, [r3, #0]
 8004356:	d0d7      	beq.n	8004308 <_printf_i+0x50>
 8004358:	f9b2 3000 	ldrsh.w	r3, [r2]
 800435c:	2b00      	cmp	r3, #0
 800435e:	da03      	bge.n	8004368 <_printf_i+0xb0>
 8004360:	222d      	movs	r2, #45	; 0x2d
 8004362:	425b      	negs	r3, r3
 8004364:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004368:	4962      	ldr	r1, [pc, #392]	; (80044f4 <_printf_i+0x23c>)
 800436a:	220a      	movs	r2, #10
 800436c:	e017      	b.n	800439e <_printf_i+0xe6>
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004376:	d003      	beq.n	8004380 <_printf_i+0xc8>
 8004378:	1d08      	adds	r0, r1, #4
 800437a:	6018      	str	r0, [r3, #0]
 800437c:	680b      	ldr	r3, [r1, #0]
 800437e:	e006      	b.n	800438e <_printf_i+0xd6>
 8004380:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004384:	f101 0004 	add.w	r0, r1, #4
 8004388:	6018      	str	r0, [r3, #0]
 800438a:	d0f7      	beq.n	800437c <_printf_i+0xc4>
 800438c:	880b      	ldrh	r3, [r1, #0]
 800438e:	4959      	ldr	r1, [pc, #356]	; (80044f4 <_printf_i+0x23c>)
 8004390:	2a6f      	cmp	r2, #111	; 0x6f
 8004392:	bf14      	ite	ne
 8004394:	220a      	movne	r2, #10
 8004396:	2208      	moveq	r2, #8
 8004398:	2000      	movs	r0, #0
 800439a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800439e:	6865      	ldr	r5, [r4, #4]
 80043a0:	60a5      	str	r5, [r4, #8]
 80043a2:	2d00      	cmp	r5, #0
 80043a4:	f2c0 809c 	blt.w	80044e0 <_printf_i+0x228>
 80043a8:	6820      	ldr	r0, [r4, #0]
 80043aa:	f020 0004 	bic.w	r0, r0, #4
 80043ae:	6020      	str	r0, [r4, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d13f      	bne.n	8004434 <_printf_i+0x17c>
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	f040 8095 	bne.w	80044e4 <_printf_i+0x22c>
 80043ba:	4675      	mov	r5, lr
 80043bc:	2a08      	cmp	r2, #8
 80043be:	d10b      	bne.n	80043d8 <_printf_i+0x120>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	07da      	lsls	r2, r3, #31
 80043c4:	d508      	bpl.n	80043d8 <_printf_i+0x120>
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	6862      	ldr	r2, [r4, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	bfde      	ittt	le
 80043ce:	2330      	movle	r3, #48	; 0x30
 80043d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043d8:	ebae 0305 	sub.w	r3, lr, r5
 80043dc:	6123      	str	r3, [r4, #16]
 80043de:	f8cd 8000 	str.w	r8, [sp]
 80043e2:	463b      	mov	r3, r7
 80043e4:	aa03      	add	r2, sp, #12
 80043e6:	4621      	mov	r1, r4
 80043e8:	4630      	mov	r0, r6
 80043ea:	f7ff feef 	bl	80041cc <_printf_common>
 80043ee:	3001      	adds	r0, #1
 80043f0:	d155      	bne.n	800449e <_printf_i+0x1e6>
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295
 80043f6:	b005      	add	sp, #20
 80043f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043fc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004400:	493c      	ldr	r1, [pc, #240]	; (80044f4 <_printf_i+0x23c>)
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	f012 0f80 	tst.w	r2, #128	; 0x80
 800440a:	f100 0504 	add.w	r5, r0, #4
 800440e:	601d      	str	r5, [r3, #0]
 8004410:	d001      	beq.n	8004416 <_printf_i+0x15e>
 8004412:	6803      	ldr	r3, [r0, #0]
 8004414:	e002      	b.n	800441c <_printf_i+0x164>
 8004416:	0655      	lsls	r5, r2, #25
 8004418:	d5fb      	bpl.n	8004412 <_printf_i+0x15a>
 800441a:	8803      	ldrh	r3, [r0, #0]
 800441c:	07d0      	lsls	r0, r2, #31
 800441e:	bf44      	itt	mi
 8004420:	f042 0220 	orrmi.w	r2, r2, #32
 8004424:	6022      	strmi	r2, [r4, #0]
 8004426:	b91b      	cbnz	r3, 8004430 <_printf_i+0x178>
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	f022 0220 	bic.w	r2, r2, #32
 800442e:	6022      	str	r2, [r4, #0]
 8004430:	2210      	movs	r2, #16
 8004432:	e7b1      	b.n	8004398 <_printf_i+0xe0>
 8004434:	4675      	mov	r5, lr
 8004436:	fbb3 f0f2 	udiv	r0, r3, r2
 800443a:	fb02 3310 	mls	r3, r2, r0, r3
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004444:	4603      	mov	r3, r0
 8004446:	2800      	cmp	r0, #0
 8004448:	d1f5      	bne.n	8004436 <_printf_i+0x17e>
 800444a:	e7b7      	b.n	80043bc <_printf_i+0x104>
 800444c:	6808      	ldr	r0, [r1, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	6949      	ldr	r1, [r1, #20]
 8004452:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004456:	d004      	beq.n	8004462 <_printf_i+0x1aa>
 8004458:	1d10      	adds	r0, r2, #4
 800445a:	6018      	str	r0, [r3, #0]
 800445c:	6813      	ldr	r3, [r2, #0]
 800445e:	6019      	str	r1, [r3, #0]
 8004460:	e007      	b.n	8004472 <_printf_i+0x1ba>
 8004462:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004466:	f102 0004 	add.w	r0, r2, #4
 800446a:	6018      	str	r0, [r3, #0]
 800446c:	6813      	ldr	r3, [r2, #0]
 800446e:	d0f6      	beq.n	800445e <_printf_i+0x1a6>
 8004470:	8019      	strh	r1, [r3, #0]
 8004472:	2300      	movs	r3, #0
 8004474:	6123      	str	r3, [r4, #16]
 8004476:	4675      	mov	r5, lr
 8004478:	e7b1      	b.n	80043de <_printf_i+0x126>
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	1d11      	adds	r1, r2, #4
 800447e:	6019      	str	r1, [r3, #0]
 8004480:	6815      	ldr	r5, [r2, #0]
 8004482:	6862      	ldr	r2, [r4, #4]
 8004484:	2100      	movs	r1, #0
 8004486:	4628      	mov	r0, r5
 8004488:	f7fb feb2 	bl	80001f0 <memchr>
 800448c:	b108      	cbz	r0, 8004492 <_printf_i+0x1da>
 800448e:	1b40      	subs	r0, r0, r5
 8004490:	6060      	str	r0, [r4, #4]
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	6123      	str	r3, [r4, #16]
 8004496:	2300      	movs	r3, #0
 8004498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800449c:	e79f      	b.n	80043de <_printf_i+0x126>
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	462a      	mov	r2, r5
 80044a2:	4639      	mov	r1, r7
 80044a4:	4630      	mov	r0, r6
 80044a6:	47c0      	blx	r8
 80044a8:	3001      	adds	r0, #1
 80044aa:	d0a2      	beq.n	80043f2 <_printf_i+0x13a>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	079b      	lsls	r3, r3, #30
 80044b0:	d507      	bpl.n	80044c2 <_printf_i+0x20a>
 80044b2:	2500      	movs	r5, #0
 80044b4:	f104 0919 	add.w	r9, r4, #25
 80044b8:	68e3      	ldr	r3, [r4, #12]
 80044ba:	9a03      	ldr	r2, [sp, #12]
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	429d      	cmp	r5, r3
 80044c0:	db05      	blt.n	80044ce <_printf_i+0x216>
 80044c2:	68e0      	ldr	r0, [r4, #12]
 80044c4:	9b03      	ldr	r3, [sp, #12]
 80044c6:	4298      	cmp	r0, r3
 80044c8:	bfb8      	it	lt
 80044ca:	4618      	movlt	r0, r3
 80044cc:	e793      	b.n	80043f6 <_printf_i+0x13e>
 80044ce:	2301      	movs	r3, #1
 80044d0:	464a      	mov	r2, r9
 80044d2:	4639      	mov	r1, r7
 80044d4:	4630      	mov	r0, r6
 80044d6:	47c0      	blx	r8
 80044d8:	3001      	adds	r0, #1
 80044da:	d08a      	beq.n	80043f2 <_printf_i+0x13a>
 80044dc:	3501      	adds	r5, #1
 80044de:	e7eb      	b.n	80044b8 <_printf_i+0x200>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1a7      	bne.n	8004434 <_printf_i+0x17c>
 80044e4:	780b      	ldrb	r3, [r1, #0]
 80044e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044ee:	e765      	b.n	80043bc <_printf_i+0x104>
 80044f0:	0800478e 	.word	0x0800478e
 80044f4:	0800477d 	.word	0x0800477d

080044f8 <_sbrk_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4c06      	ldr	r4, [pc, #24]	; (8004514 <_sbrk_r+0x1c>)
 80044fc:	2300      	movs	r3, #0
 80044fe:	4605      	mov	r5, r0
 8004500:	4608      	mov	r0, r1
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	f7fe ff9c 	bl	8003440 <_sbrk>
 8004508:	1c43      	adds	r3, r0, #1
 800450a:	d102      	bne.n	8004512 <_sbrk_r+0x1a>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	b103      	cbz	r3, 8004512 <_sbrk_r+0x1a>
 8004510:	602b      	str	r3, [r5, #0]
 8004512:	bd38      	pop	{r3, r4, r5, pc}
 8004514:	20001134 	.word	0x20001134

08004518 <__sread>:
 8004518:	b510      	push	{r4, lr}
 800451a:	460c      	mov	r4, r1
 800451c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004520:	f000 f896 	bl	8004650 <_read_r>
 8004524:	2800      	cmp	r0, #0
 8004526:	bfab      	itete	ge
 8004528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800452a:	89a3      	ldrhlt	r3, [r4, #12]
 800452c:	181b      	addge	r3, r3, r0
 800452e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004532:	bfac      	ite	ge
 8004534:	6563      	strge	r3, [r4, #84]	; 0x54
 8004536:	81a3      	strhlt	r3, [r4, #12]
 8004538:	bd10      	pop	{r4, pc}

0800453a <__swrite>:
 800453a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800453e:	461f      	mov	r7, r3
 8004540:	898b      	ldrh	r3, [r1, #12]
 8004542:	05db      	lsls	r3, r3, #23
 8004544:	4605      	mov	r5, r0
 8004546:	460c      	mov	r4, r1
 8004548:	4616      	mov	r6, r2
 800454a:	d505      	bpl.n	8004558 <__swrite+0x1e>
 800454c:	2302      	movs	r3, #2
 800454e:	2200      	movs	r2, #0
 8004550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004554:	f000 f868 	bl	8004628 <_lseek_r>
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800455e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004562:	81a3      	strh	r3, [r4, #12]
 8004564:	4632      	mov	r2, r6
 8004566:	463b      	mov	r3, r7
 8004568:	4628      	mov	r0, r5
 800456a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800456e:	f000 b817 	b.w	80045a0 <_write_r>

08004572 <__sseek>:
 8004572:	b510      	push	{r4, lr}
 8004574:	460c      	mov	r4, r1
 8004576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457a:	f000 f855 	bl	8004628 <_lseek_r>
 800457e:	1c43      	adds	r3, r0, #1
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	bf15      	itete	ne
 8004584:	6560      	strne	r0, [r4, #84]	; 0x54
 8004586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800458a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800458e:	81a3      	strheq	r3, [r4, #12]
 8004590:	bf18      	it	ne
 8004592:	81a3      	strhne	r3, [r4, #12]
 8004594:	bd10      	pop	{r4, pc}

08004596 <__sclose>:
 8004596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459a:	f000 b813 	b.w	80045c4 <_close_r>
	...

080045a0 <_write_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4c07      	ldr	r4, [pc, #28]	; (80045c0 <_write_r+0x20>)
 80045a4:	4605      	mov	r5, r0
 80045a6:	4608      	mov	r0, r1
 80045a8:	4611      	mov	r1, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7fe ff30 	bl	8003414 <_write>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_write_r+0x1e>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	b103      	cbz	r3, 80045be <_write_r+0x1e>
 80045bc:	602b      	str	r3, [r5, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	20001134 	.word	0x20001134

080045c4 <_close_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4c06      	ldr	r4, [pc, #24]	; (80045e0 <_close_r+0x1c>)
 80045c8:	2300      	movs	r3, #0
 80045ca:	4605      	mov	r5, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	f7fe ff56 	bl	8003480 <_close>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_close_r+0x1a>
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	b103      	cbz	r3, 80045de <_close_r+0x1a>
 80045dc:	602b      	str	r3, [r5, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	20001134 	.word	0x20001134

080045e4 <_fstat_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4c07      	ldr	r4, [pc, #28]	; (8004604 <_fstat_r+0x20>)
 80045e8:	2300      	movs	r3, #0
 80045ea:	4605      	mov	r5, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	f7fe ff57 	bl	80034a4 <_fstat>
 80045f6:	1c43      	adds	r3, r0, #1
 80045f8:	d102      	bne.n	8004600 <_fstat_r+0x1c>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	b103      	cbz	r3, 8004600 <_fstat_r+0x1c>
 80045fe:	602b      	str	r3, [r5, #0]
 8004600:	bd38      	pop	{r3, r4, r5, pc}
 8004602:	bf00      	nop
 8004604:	20001134 	.word	0x20001134

08004608 <_isatty_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4c06      	ldr	r4, [pc, #24]	; (8004624 <_isatty_r+0x1c>)
 800460c:	2300      	movs	r3, #0
 800460e:	4605      	mov	r5, r0
 8004610:	4608      	mov	r0, r1
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	f7fe ff58 	bl	80034c8 <_isatty>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_isatty_r+0x1a>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	b103      	cbz	r3, 8004622 <_isatty_r+0x1a>
 8004620:	602b      	str	r3, [r5, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	20001134 	.word	0x20001134

08004628 <_lseek_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4c07      	ldr	r4, [pc, #28]	; (8004648 <_lseek_r+0x20>)
 800462c:	4605      	mov	r5, r0
 800462e:	4608      	mov	r0, r1
 8004630:	4611      	mov	r1, r2
 8004632:	2200      	movs	r2, #0
 8004634:	6022      	str	r2, [r4, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	f7fe ff56 	bl	80034e8 <_lseek>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d102      	bne.n	8004646 <_lseek_r+0x1e>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	b103      	cbz	r3, 8004646 <_lseek_r+0x1e>
 8004644:	602b      	str	r3, [r5, #0]
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20001134 	.word	0x20001134

0800464c <__malloc_lock>:
 800464c:	4770      	bx	lr

0800464e <__malloc_unlock>:
 800464e:	4770      	bx	lr

08004650 <_read_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4c07      	ldr	r4, [pc, #28]	; (8004670 <_read_r+0x20>)
 8004654:	4605      	mov	r5, r0
 8004656:	4608      	mov	r0, r1
 8004658:	4611      	mov	r1, r2
 800465a:	2200      	movs	r2, #0
 800465c:	6022      	str	r2, [r4, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	f7fe ff56 	bl	8003510 <_read>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_read_r+0x1e>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	b103      	cbz	r3, 800466e <_read_r+0x1e>
 800466c:	602b      	str	r3, [r5, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	20001134 	.word	0x20001134

08004674 <_init>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	bf00      	nop
 8004678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467a:	bc08      	pop	{r3}
 800467c:	469e      	mov	lr, r3
 800467e:	4770      	bx	lr

08004680 <_fini>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr
