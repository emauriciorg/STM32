
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f1c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004194  08004194  00014194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800419c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000124  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000194  20000194  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010c25  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000221b  00000000  00000000  00030cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000958  00000000  00000000  00032ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000870  00000000  00000000  00033838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000459e  00000000  00000000  000340a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000312c  00000000  00000000  00038646  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003b772  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002b4c  00000000  00000000  0003b7f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080040b0 	.word	0x080040b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	080040b0 	.word	0x080040b0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 fcf3 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f002 fe34 	bl	800319c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fd0b 	bl	8000f7a <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 fcd3 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000008 	.word	0x20000008
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000098 	.word	0x20000098

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000098 	.word	0x20000098

080005e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e033      	b.n	800065e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d109      	bne.n	8000612 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f002 fe17 	bl	8003240 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	2b00      	cmp	r3, #0
 800061c:	d118      	bne.n	8000650 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000626:	f023 0302 	bic.w	r3, r3, #2
 800062a:	f043 0202 	orr.w	r2, r3, #2
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 fa9e 	bl	8000b74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	f023 0303 	bic.w	r3, r3, #3
 8000646:	f043 0201 	orr.w	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
 800064e:	e001      	b.n	8000654 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000650:	2301      	movs	r3, #1
 8000652:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800065c:	7bfb      	ldrb	r3, [r7, #15]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	2b02      	cmp	r3, #2
 8000682:	bf0c      	ite	eq
 8000684:	2301      	moveq	r3, #1
 8000686:	2300      	movne	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f003 0320 	and.w	r3, r3, #32
 8000696:	2b20      	cmp	r3, #32
 8000698:	bf0c      	ite	eq
 800069a:	2301      	moveq	r3, #1
 800069c:	2300      	movne	r3, #0
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d049      	beq.n	800073c <HAL_ADC_IRQHandler+0xd6>
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d046      	beq.n	800073c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f003 0310 	and.w	r3, r3, #16
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d105      	bne.n	80006c6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d12b      	bne.n	800072c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d127      	bne.n	800072c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d119      	bne.n	800072c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	6812      	ldr	r2, [r2, #0]
 8000700:	6852      	ldr	r2, [r2, #4]
 8000702:	f022 0220 	bic.w	r2, r2, #32
 8000706:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d105      	bne.n	800072c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f043 0201 	orr.w	r2, r3, #1
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */ 
    HAL_ADC_ConvCpltCallback(hadc);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f8db 	bl	80008e8 <HAL_ADC_ConvCpltCallback>
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f06f 0212 	mvn.w	r2, #18
 800073a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf0c      	ite	eq
 800074a:	2301      	moveq	r3, #1
 800074c:	2300      	movne	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075c:	2b80      	cmp	r3, #128	; 0x80
 800075e:	bf0c      	ite	eq
 8000760:	2301      	moveq	r3, #1
 8000762:	2300      	movne	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d057      	beq.n	800081e <HAL_ADC_IRQHandler+0x1b8>
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d054      	beq.n	800081e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 0310 	and.w	r3, r3, #16
 800077c:	2b00      	cmp	r3, #0
 800077e:	d105      	bne.n	800078c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d139      	bne.n	800080e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d006      	beq.n	80007b6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d12b      	bne.n	800080e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d124      	bne.n	800080e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d11d      	bne.n	800080e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d119      	bne.n	800080e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	6852      	ldr	r2, [r2, #4]
 80007e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007e8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d105      	bne.n	800080e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f043 0201 	orr.w	r2, r3, #1
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Conversion complete callback */ 
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 faaa 	bl	8000d68 <HAL_ADCEx_InjectedConvCpltCallback>
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f06f 020c 	mvn.w	r2, #12
 800081c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	2b01      	cmp	r3, #1
 800082a:	bf0c      	ite	eq
 800082c:	2301      	moveq	r3, #1
 800082e:	2300      	movne	r3, #0
 8000830:	b2db      	uxtb	r3, r3
 8000832:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083e:	2b40      	cmp	r3, #64	; 0x40
 8000840:	bf0c      	ite	eq
 8000842:	2301      	moveq	r3, #1
 8000844:	2300      	movne	r3, #0
 8000846:	b2db      	uxtb	r3, r3
 8000848:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d017      	beq.n	8000880 <HAL_ADC_IRQHandler+0x21a>
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d014      	beq.n	8000880 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	2b01      	cmp	r3, #1
 8000862:	d10d      	bne.n	8000880 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f843 	bl	80008fc <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f06f 0201 	mvn.w	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f003 0320 	and.w	r3, r3, #32
 800088a:	2b20      	cmp	r3, #32
 800088c:	bf0c      	ite	eq
 800088e:	2301      	moveq	r3, #1
 8000890:	2300      	movne	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008a4:	bf0c      	ite	eq
 80008a6:	2301      	moveq	r3, #1
 80008a8:	2300      	movne	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d015      	beq.n	80008e0 <HAL_ADC_IRQHandler+0x27a>
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d012      	beq.n	80008e0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f043 0202 	orr.w	r2, r3, #2
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f06f 0220 	mvn.w	r2, #32
 80008ce:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADC_ErrorCallback(hadc);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 f81d 	bl	8000910 <HAL_ADC_ErrorCallback>
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f06f 0220 	mvn.w	r2, #32
 80008de:	601a      	str	r2, [r3, #0]
  }
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000924:	b490      	push	{r4, r7}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000938:	2b01      	cmp	r3, #1
 800093a:	d101      	bne.n	8000940 <HAL_ADC_ConfigChannel+0x1c>
 800093c:	2302      	movs	r3, #2
 800093e:	e109      	b.n	8000b54 <HAL_ADC_ConfigChannel+0x230>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2201      	movs	r2, #1
 8000944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b09      	cmp	r3, #9
 800094e:	d926      	bls.n	800099e <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	68d9      	ldr	r1, [r3, #12]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	b29b      	uxth	r3, r3
 8000960:	4618      	mov	r0, r3
 8000962:	4603      	mov	r3, r0
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4403      	add	r3, r0
 8000968:	3b1e      	subs	r3, #30
 800096a:	2007      	movs	r0, #7
 800096c:	fa00 f303 	lsl.w	r3, r0, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	400b      	ands	r3, r1
 8000974:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68d9      	ldr	r1, [r3, #12]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	6898      	ldr	r0, [r3, #8]
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	b29b      	uxth	r3, r3
 800098a:	461c      	mov	r4, r3
 800098c:	4623      	mov	r3, r4
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4423      	add	r3, r4
 8000992:	3b1e      	subs	r3, #30
 8000994:	fa00 f303 	lsl.w	r3, r0, r3
 8000998:	430b      	orrs	r3, r1
 800099a:	60d3      	str	r3, [r2, #12]
 800099c:	e023      	b.n	80009e6 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6919      	ldr	r1, [r3, #16]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	4603      	mov	r3, r0
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4403      	add	r3, r0
 80009b6:	2007      	movs	r0, #7
 80009b8:	fa00 f303 	lsl.w	r3, r0, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	400b      	ands	r3, r1
 80009c0:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6919      	ldr	r1, [r3, #16]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	6898      	ldr	r0, [r3, #8]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	461c      	mov	r4, r3
 80009d8:	4623      	mov	r3, r4
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4423      	add	r3, r4
 80009de:	fa00 f303 	lsl.w	r3, r0, r3
 80009e2:	430b      	orrs	r3, r1
 80009e4:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d824      	bhi.n	8000a38 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6819      	ldr	r1, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	4613      	mov	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	3b05      	subs	r3, #5
 8000a04:	221f      	movs	r2, #31
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	4003      	ands	r3, r0
 8000a0e:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6819      	ldr	r1, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	461c      	mov	r4, r3
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	4613      	mov	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	3b05      	subs	r3, #5
 8000a2e:	fa04 f303 	lsl.w	r3, r4, r3
 8000a32:	4303      	orrs	r3, r0
 8000a34:	634b      	str	r3, [r1, #52]	; 0x34
 8000a36:	e04c      	b.n	8000ad2 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b0c      	cmp	r3, #12
 8000a3e:	d824      	bhi.n	8000a8a <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6819      	ldr	r1, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	3b23      	subs	r3, #35	; 0x23
 8000a56:	221f      	movs	r2, #31
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4003      	ands	r3, r0
 8000a60:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6819      	ldr	r1, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	461c      	mov	r4, r3
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	3b23      	subs	r3, #35	; 0x23
 8000a80:	fa04 f303 	lsl.w	r3, r4, r3
 8000a84:	4303      	orrs	r3, r0
 8000a86:	630b      	str	r3, [r1, #48]	; 0x30
 8000a88:	e023      	b.n	8000ad2 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6819      	ldr	r1, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3b41      	subs	r3, #65	; 0x41
 8000aa0:	221f      	movs	r2, #31
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4003      	ands	r3, r0
 8000aaa:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6819      	ldr	r1, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	461c      	mov	r4, r3
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	3b41      	subs	r3, #65	; 0x41
 8000aca:	fa04 f303 	lsl.w	r3, r4, r3
 8000ace:	4303      	orrs	r3, r0
 8000ad0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <HAL_ADC_ConfigChannel+0x23c>)
 8000ad4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a22      	ldr	r2, [pc, #136]	; (8000b64 <HAL_ADC_ConfigChannel+0x240>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d109      	bne.n	8000af4 <HAL_ADC_ConfigChannel+0x1d0>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b12      	cmp	r3, #18
 8000ae6:	d105      	bne.n	8000af4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1a      	ldr	r2, [pc, #104]	; (8000b64 <HAL_ADC_ConfigChannel+0x240>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d125      	bne.n	8000b4a <HAL_ADC_ConfigChannel+0x226>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <HAL_ADC_ConfigChannel+0x244>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d003      	beq.n	8000b10 <HAL_ADC_ConfigChannel+0x1ec>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b11      	cmp	r3, #17
 8000b0e:	d11c      	bne.n	8000b4a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <HAL_ADC_ConfigChannel+0x244>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d111      	bne.n	8000b4a <HAL_ADC_ConfigChannel+0x226>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_ADC_ConfigChannel+0x248>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <HAL_ADC_ConfigChannel+0x24c>)
 8000b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b30:	0c9a      	lsrs	r2, r3, #18
 8000b32:	4613      	mov	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	4413      	add	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b3c:	e002      	b.n	8000b44 <HAL_ADC_ConfigChannel+0x220>
      {
        counter--;
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1f9      	bne.n	8000b3e <HAL_ADC_ConfigChannel+0x21a>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc90      	pop	{r4, r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40012300 	.word	0x40012300
 8000b64:	40012000 	.word	0x40012000
 8000b68:	10000012 	.word	0x10000012
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	431bde83 	.word	0x431bde83

08000b74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b7c:	4b78      	ldr	r3, [pc, #480]	; (8000d60 <ADC_Init+0x1ec>)
 8000b7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	431a      	orrs	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6812      	ldr	r2, [r2, #0]
 8000ba2:	6852      	ldr	r2, [r2, #4]
 8000ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	6812      	ldr	r2, [r2, #0]
 8000bb2:	6851      	ldr	r1, [r2, #4]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	6912      	ldr	r2, [r2, #16]
 8000bb8:	0212      	lsls	r2, r2, #8
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	6812      	ldr	r2, [r2, #0]
 8000bc6:	6852      	ldr	r2, [r2, #4]
 8000bc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	6851      	ldr	r1, [r2, #4]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	6892      	ldr	r2, [r2, #8]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	6812      	ldr	r2, [r2, #0]
 8000be8:	6892      	ldr	r2, [r2, #8]
 8000bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	6812      	ldr	r2, [r2, #0]
 8000bf8:	6891      	ldr	r1, [r2, #8]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68d2      	ldr	r2, [r2, #12]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c06:	4a57      	ldr	r2, [pc, #348]	; (8000d64 <ADC_Init+0x1f0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d022      	beq.n	8000c52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	6812      	ldr	r2, [r2, #0]
 8000c14:	6892      	ldr	r2, [r2, #8]
 8000c16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	6891      	ldr	r1, [r2, #8]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	6892      	ldr	r2, [r2, #8]
 8000c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	6812      	ldr	r2, [r2, #0]
 8000c46:	6891      	ldr	r1, [r2, #8]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	e00f      	b.n	8000c72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	6892      	ldr	r2, [r2, #8]
 8000c5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	6892      	ldr	r2, [r2, #8]
 8000c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	6892      	ldr	r2, [r2, #8]
 8000c7c:	f022 0202 	bic.w	r2, r2, #2
 8000c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	6891      	ldr	r1, [r2, #8]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	6992      	ldr	r2, [r2, #24]
 8000c90:	0052      	lsls	r2, r2, #1
 8000c92:	430a      	orrs	r2, r1
 8000c94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a1b      	ldr	r3, [r3, #32]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d01b      	beq.n	8000cd6 <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	6852      	ldr	r2, [r2, #4]
 8000ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cac:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6812      	ldr	r2, [r2, #0]
 8000cb6:	6852      	ldr	r2, [r2, #4]
 8000cb8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000cbc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	6812      	ldr	r2, [r2, #0]
 8000cc6:	6851      	ldr	r1, [r2, #4]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ccc:	3a01      	subs	r2, #1
 8000cce:	0352      	lsls	r2, r2, #13
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	e007      	b.n	8000ce6 <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	6852      	ldr	r2, [r2, #4]
 8000ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ce4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000cf0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	69d2      	ldr	r2, [r2, #28]
 8000d04:	3a01      	subs	r2, #1
 8000d06:	0512      	lsls	r2, r2, #20
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	6892      	ldr	r2, [r2, #8]
 8000d16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	6891      	ldr	r1, [r2, #8]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d2a:	0252      	lsls	r2, r2, #9
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	6892      	ldr	r2, [r2, #8]
 8000d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6812      	ldr	r2, [r2, #0]
 8000d48:	6891      	ldr	r1, [r2, #8]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6952      	ldr	r2, [r2, #20]
 8000d4e:	0292      	lsls	r2, r2, #10
 8000d50:	430a      	orrs	r2, r1
 8000d52:	609a      	str	r2, [r3, #8]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	40012300 	.word	0x40012300
 8000d64:	0f000001 	.word	0x0f000001

08000d68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000dea:	4909      	ldr	r1, [pc, #36]	; (8000e10 <NVIC_EnableIRQ+0x30>)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	095b      	lsrs	r3, r3, #5
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	f002 021f 	and.w	r2, r2, #31
 8000df8:	2001      	movs	r0, #1
 8000dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da0b      	bge.n	8000e40 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	490d      	ldr	r1, [pc, #52]	; (8000e60 <NVIC_SetPriority+0x4c>)
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 030f 	and.w	r3, r3, #15
 8000e30:	3b04      	subs	r3, #4
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3e:	e009      	b.n	8000e54 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	4908      	ldr	r1, [pc, #32]	; (8000e64 <NVIC_SetPriority+0x50>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	1e5a      	subs	r2, r3, #1
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eae:	2101      	movs	r1, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	1e59      	subs	r1, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff90 	bl	8000e14 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff2f 	bl	8000d7c <NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff44 	bl	8000dc4 <NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff90 	bl	8000e68 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5f 	bl	8000e14 <NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff37 	bl	8000de0 <NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d106      	bne.n	8000fb0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000fae:	e005      	b.n	8000fbc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 0304 	bic.w	r3, r3, #4
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000fd0:	f000 f802 	bl	8000fd8 <HAL_SYSTICK_Callback>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff fae8 	bl	80005c8 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e099      	b.n	8001138 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001024:	e00f      	b.n	8001046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001026:	f7ff facf 	bl	80005c8 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b05      	cmp	r3, #5
 8001032:	d908      	bls.n	8001046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2220      	movs	r2, #32
 8001038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2203      	movs	r2, #3
 800103e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e078      	b.n	8001138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e8      	bne.n	8001026 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	4b38      	ldr	r3, [pc, #224]	; (8001140 <HAL_DMA_Init+0x158>)
 8001060:	4013      	ands	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800108a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4313      	orrs	r3, r2
 8001096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	2b04      	cmp	r3, #4
 800109e:	d107      	bne.n	80010b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4313      	orrs	r3, r2
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f023 0307 	bic.w	r3, r3, #7
 80010c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d117      	bne.n	800110a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00e      	beq.n	800110a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fa0b 	bl	8001508 <DMA_CheckFifoParam>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2240      	movs	r2, #64	; 0x40
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001106:	2301      	movs	r3, #1
 8001108:	e016      	b.n	8001138 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f9c2 	bl	800149c <DMA_CalcBaseAndBitshift>
 8001118:	4603      	mov	r3, r0
 800111a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	223f      	movs	r2, #63	; 0x3f
 8001122:	409a      	lsls	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	f010803f 	.word	0xf010803f

08001144 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d004      	beq.n	8001162 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00c      	b.n	800117c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2205      	movs	r2, #5
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	f022 0201 	bic.w	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001194:	4b92      	ldr	r3, [pc, #584]	; (80013e0 <HAL_DMA_IRQHandler+0x258>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a92      	ldr	r2, [pc, #584]	; (80013e4 <HAL_DMA_IRQHandler+0x25c>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0a9b      	lsrs	r3, r3, #10
 80011a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b2:	2208      	movs	r2, #8
 80011b4:	409a      	lsls	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d01a      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	f022 0204 	bic.w	r2, r2, #4
 80011da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	2208      	movs	r2, #8
 80011e2:	409a      	lsls	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ec:	f043 0201 	orr.w	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	2201      	movs	r2, #1
 80011fa:	409a      	lsls	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d012      	beq.n	800122a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	2201      	movs	r2, #1
 8001218:	409a      	lsls	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001222:	f043 0202 	orr.w	r2, r3, #2
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122e:	2204      	movs	r2, #4
 8001230:	409a      	lsls	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d012      	beq.n	8001260 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124c:	2204      	movs	r2, #4
 800124e:	409a      	lsls	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001258:	f043 0204 	orr.w	r2, r3, #4
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	2210      	movs	r2, #16
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d043      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03c      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001282:	2210      	movs	r2, #16
 8001284:	409a      	lsls	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d018      	beq.n	80012ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d108      	bne.n	80012b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d024      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
 80012b6:	e01f      	b.n	80012f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d01b      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	4798      	blx	r3
 80012c8:	e016      	b.n	80012f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d107      	bne.n	80012e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6812      	ldr	r2, [r2, #0]
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	f022 0208 	bic.w	r2, r2, #8
 80012e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	2220      	movs	r2, #32
 80012fe:	409a      	lsls	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 808e 	beq.w	8001426 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 8086 	beq.w	8001426 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131e:	2220      	movs	r2, #32
 8001320:	409a      	lsls	r2, r3
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b05      	cmp	r3, #5
 8001330:	d136      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	f022 0216 	bic.w	r2, r2, #22
 8001340:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	6952      	ldr	r2, [r2, #20]
 800134c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001350:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	2b00      	cmp	r3, #0
 8001358:	d103      	bne.n	8001362 <HAL_DMA_IRQHandler+0x1da>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	f022 0208 	bic.w	r2, r2, #8
 8001370:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001376:	223f      	movs	r2, #63	; 0x3f
 8001378:	409a      	lsls	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001392:	2b00      	cmp	r3, #0
 8001394:	d07d      	beq.n	8001492 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	4798      	blx	r3
        }
        return;
 800139e:	e078      	b.n	8001492 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d01c      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d108      	bne.n	80013ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d030      	beq.n	8001426 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	4798      	blx	r3
 80013cc:	e02b      	b.n	8001426 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d027      	beq.n	8001426 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	4798      	blx	r3
 80013de:	e022      	b.n	8001426 <HAL_DMA_IRQHandler+0x29e>
 80013e0:	20000008 	.word	0x20000008
 80013e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10f      	bne.n	8001416 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	f022 0210 	bic.w	r2, r2, #16
 8001404:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	2b00      	cmp	r3, #0
 800142c:	d032      	beq.n	8001494 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d022      	beq.n	8001480 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2205      	movs	r2, #5
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	3301      	adds	r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	4293      	cmp	r3, r2
 800145c:	d807      	bhi.n	800146e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f2      	bne.n	8001452 <HAL_DMA_IRQHandler+0x2ca>
 800146c:	e000      	b.n	8001470 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800146e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	4798      	blx	r3
 8001490:	e000      	b.n	8001494 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001492:	bf00      	nop
    }
  }
}
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop

0800149c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	3b10      	subs	r3, #16
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <DMA_CalcBaseAndBitshift+0x64>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014b6:	4a13      	ldr	r2, [pc, #76]	; (8001504 <DMA_CalcBaseAndBitshift+0x68>)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d909      	bls.n	80014de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	1d1a      	adds	r2, r3, #4
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	659a      	str	r2, [r3, #88]	; 0x58
 80014dc:	e007      	b.n	80014ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014e6:	f023 0303 	bic.w	r3, r3, #3
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	aaaaaaab 	.word	0xaaaaaaab
 8001504:	08004108 	.word	0x08004108

08001508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d11f      	bne.n	8001562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d855      	bhi.n	80015d4 <DMA_CheckFifoParam+0xcc>
 8001528:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <DMA_CheckFifoParam+0x28>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001541 	.word	0x08001541
 8001534:	08001553 	.word	0x08001553
 8001538:	08001541 	.word	0x08001541
 800153c:	080015d5 	.word	0x080015d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d045      	beq.n	80015d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001550:	e042      	b.n	80015d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800155a:	d13f      	bne.n	80015dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001560:	e03c      	b.n	80015dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800156a:	d121      	bne.n	80015b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d836      	bhi.n	80015e0 <DMA_CheckFifoParam+0xd8>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <DMA_CheckFifoParam+0x70>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	0800158f 	.word	0x0800158f
 8001580:	08001589 	.word	0x08001589
 8001584:	080015a1 	.word	0x080015a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
      break;
 800158c:	e02f      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d024      	beq.n	80015e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800159e:	e021      	b.n	80015e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015a8:	d11e      	bne.n	80015e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015ae:	e01b      	b.n	80015e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d902      	bls.n	80015bc <DMA_CheckFifoParam+0xb4>
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d003      	beq.n	80015c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015ba:	e018      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
      break;
 80015c0:	e015      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00e      	beq.n	80015ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
      break;
 80015d2:	e00b      	b.n	80015ec <DMA_CheckFifoParam+0xe4>
      break;
 80015d4:	bf00      	nop
 80015d6:	e00a      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015d8:	bf00      	nop
 80015da:	e008      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015dc:	bf00      	nop
 80015de:	e006      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015e0:	bf00      	nop
 80015e2:	e004      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015e4:	bf00      	nop
 80015e6:	e002      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;   
 80015e8:	bf00      	nop
 80015ea:	e000      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015ec:	bf00      	nop
    }
  } 
  
  return status; 
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e177      	b.n	8001908 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	f040 8166 	bne.w	8001902 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x4a>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b12      	cmp	r3, #18
 8001644:	d123      	bne.n	800168e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	691a      	ldr	r2, [r3, #16]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	69b9      	ldr	r1, [r7, #24]
 800168a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0203 	and.w	r2, r3, #3
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d00b      	beq.n	80016e2 <HAL_GPIO_Init+0xe6>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d6:	2b11      	cmp	r3, #17
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d130      	bne.n	8001744 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 0201 	and.w	r2, r3, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80c0 	beq.w	8001902 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4a65      	ldr	r2, [pc, #404]	; (800191c <HAL_GPIO_Init+0x320>)
 8001788:	4b64      	ldr	r3, [pc, #400]	; (800191c <HAL_GPIO_Init+0x320>)
 800178a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_GPIO_Init+0x320>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800179e:	4a60      	ldr	r2, [pc, #384]	; (8001920 <HAL_GPIO_Init+0x324>)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a57      	ldr	r2, [pc, #348]	; (8001924 <HAL_GPIO_Init+0x328>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d037      	beq.n	800183a <HAL_GPIO_Init+0x23e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a56      	ldr	r2, [pc, #344]	; (8001928 <HAL_GPIO_Init+0x32c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d031      	beq.n	8001836 <HAL_GPIO_Init+0x23a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a55      	ldr	r2, [pc, #340]	; (800192c <HAL_GPIO_Init+0x330>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d02b      	beq.n	8001832 <HAL_GPIO_Init+0x236>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a54      	ldr	r2, [pc, #336]	; (8001930 <HAL_GPIO_Init+0x334>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d025      	beq.n	800182e <HAL_GPIO_Init+0x232>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a53      	ldr	r2, [pc, #332]	; (8001934 <HAL_GPIO_Init+0x338>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d01f      	beq.n	800182a <HAL_GPIO_Init+0x22e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a52      	ldr	r2, [pc, #328]	; (8001938 <HAL_GPIO_Init+0x33c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d019      	beq.n	8001826 <HAL_GPIO_Init+0x22a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a51      	ldr	r2, [pc, #324]	; (800193c <HAL_GPIO_Init+0x340>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0x226>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a50      	ldr	r2, [pc, #320]	; (8001940 <HAL_GPIO_Init+0x344>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00d      	beq.n	800181e <HAL_GPIO_Init+0x222>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4f      	ldr	r2, [pc, #316]	; (8001944 <HAL_GPIO_Init+0x348>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d007      	beq.n	800181a <HAL_GPIO_Init+0x21e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4e      	ldr	r2, [pc, #312]	; (8001948 <HAL_GPIO_Init+0x34c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_GPIO_Init+0x21a>
 8001812:	2309      	movs	r3, #9
 8001814:	e012      	b.n	800183c <HAL_GPIO_Init+0x240>
 8001816:	230a      	movs	r3, #10
 8001818:	e010      	b.n	800183c <HAL_GPIO_Init+0x240>
 800181a:	2308      	movs	r3, #8
 800181c:	e00e      	b.n	800183c <HAL_GPIO_Init+0x240>
 800181e:	2307      	movs	r3, #7
 8001820:	e00c      	b.n	800183c <HAL_GPIO_Init+0x240>
 8001822:	2306      	movs	r3, #6
 8001824:	e00a      	b.n	800183c <HAL_GPIO_Init+0x240>
 8001826:	2305      	movs	r3, #5
 8001828:	e008      	b.n	800183c <HAL_GPIO_Init+0x240>
 800182a:	2304      	movs	r3, #4
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x240>
 800182e:	2303      	movs	r3, #3
 8001830:	e004      	b.n	800183c <HAL_GPIO_Init+0x240>
 8001832:	2302      	movs	r3, #2
 8001834:	e002      	b.n	800183c <HAL_GPIO_Init+0x240>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x240>
 800183a:	2300      	movs	r3, #0
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	f002 0203 	and.w	r2, r2, #3
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	4093      	lsls	r3, r2
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800184c:	4934      	ldr	r1, [pc, #208]	; (8001920 <HAL_GPIO_Init+0x324>)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185a:	4b3c      	ldr	r3, [pc, #240]	; (800194c <HAL_GPIO_Init+0x350>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800187e:	4a33      	ldr	r2, [pc, #204]	; (800194c <HAL_GPIO_Init+0x350>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001884:	4b31      	ldr	r3, [pc, #196]	; (800194c <HAL_GPIO_Init+0x350>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a8:	4a28      	ldr	r2, [pc, #160]	; (800194c <HAL_GPIO_Init+0x350>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ae:	4b27      	ldr	r3, [pc, #156]	; (800194c <HAL_GPIO_Init+0x350>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d2:	4a1e      	ldr	r2, [pc, #120]	; (800194c <HAL_GPIO_Init+0x350>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_GPIO_Init+0x350>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018fc:	4a13      	ldr	r2, [pc, #76]	; (800194c <HAL_GPIO_Init+0x350>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3301      	adds	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b0f      	cmp	r3, #15
 800190c:	f67f ae84 	bls.w	8001618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001910:	bf00      	nop
 8001912:	3724      	adds	r7, #36	; 0x24
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40023800 	.word	0x40023800
 8001920:	40013800 	.word	0x40013800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400
 800192c:	40020800 	.word	0x40020800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40021000 	.word	0x40021000
 8001938:	40021400 	.word	0x40021400
 800193c:	40021800 	.word	0x40021800
 8001940:	40021c00 	.word	0x40021c00
 8001944:	40022000 	.word	0x40022000
 8001948:	40022400 	.word	0x40022400
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4a20      	ldr	r2, [pc, #128]	; (8001a14 <HAL_PWREx_EnableOverDrive+0x90>)
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <HAL_PWREx_EnableOverDrive+0x90>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <HAL_PWREx_EnableOverDrive+0x90>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_PWREx_EnableOverDrive+0x94>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b0:	f7fe fe0a 	bl	80005c8 <HAL_GetTick>
 80019b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019b6:	e009      	b.n	80019cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019b8:	f7fe fe06 	bl	80005c8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019c6:	d901      	bls.n	80019cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e01f      	b.n	8001a0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <HAL_PWREx_EnableOverDrive+0x98>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d1ee      	bne.n	80019b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019e0:	f7fe fdf2 	bl	80005c8 <HAL_GetTick>
 80019e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019e6:	e009      	b.n	80019fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019e8:	f7fe fdee 	bl	80005c8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f6:	d901      	bls.n	80019fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e007      	b.n	8001a0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_PWREx_EnableOverDrive+0x98>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a08:	d1ee      	bne.n	80019e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	420e0040 	.word	0x420e0040
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	420e0044 	.word	0x420e0044

08001a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e22d      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d075      	beq.n	8001b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a42:	4ba3      	ldr	r3, [pc, #652]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d00c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4e:	4ba0      	ldr	r3, [pc, #640]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d112      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5a:	4b9d      	ldr	r3, [pc, #628]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a66:	d10b      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	4b99      	ldr	r3, [pc, #612]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d05b      	beq.n	8001b2c <HAL_RCC_OscConfig+0x108>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d157      	bne.n	8001b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e208      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d106      	bne.n	8001a98 <HAL_RCC_OscConfig+0x74>
 8001a8a:	4a91      	ldr	r2, [pc, #580]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	4b90      	ldr	r3, [pc, #576]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0xb0>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x98>
 8001aa2:	4a8b      	ldr	r2, [pc, #556]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	4b8a      	ldr	r3, [pc, #552]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4a88      	ldr	r2, [pc, #544]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xb0>
 8001abc:	4a84      	ldr	r2, [pc, #528]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001abe:	4b84      	ldr	r3, [pc, #528]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4a81      	ldr	r2, [pc, #516]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001aca:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7fe fd74 	bl	80005c8 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7fe fd70 	bl	80005c8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1cd      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xc0>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7fe fd60 	bl	80005c8 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7fe fd5c 	bl	80005c8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1b9      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	4b6c      	ldr	r3, [pc, #432]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0xe8>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b3a:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b46:	4b62      	ldr	r3, [pc, #392]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d11c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b52:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d116      	bne.n	8001b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_RCC_OscConfig+0x152>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d001      	beq.n	8001b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e18d      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	4956      	ldr	r1, [pc, #344]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	4b55      	ldr	r3, [pc, #340]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	e03a      	b.n	8001c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b94:	4b4f      	ldr	r3, [pc, #316]	; (8001cd4 <HAL_RCC_OscConfig+0x2b0>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7fe fd15 	bl	80005c8 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7fe fd11 	bl	80005c8 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e16e      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	4943      	ldr	r1, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
 8001bd4:	e015      	b.n	8001c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_OscConfig+0x2b0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7fe fcf4 	bl	80005c8 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be4:	f7fe fcf0 	bl	80005c8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e14d      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d030      	beq.n	8001c70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d016      	beq.n	8001c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_RCC_OscConfig+0x2b4>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7fe fcd4 	bl	80005c8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c24:	f7fe fcd0 	bl	80005c8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e12d      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x200>
 8001c42:	e015      	b.n	8001c70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_RCC_OscConfig+0x2b4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7fe fcbd 	bl	80005c8 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c52:	f7fe fcb9 	bl	80005c8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e116      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80a0 	beq.w	8001dbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10f      	bne.n	8001cae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001caa:	2301      	movs	r3, #1
 8001cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_OscConfig+0x2b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d121      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_RCC_OscConfig+0x2b8>)
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <HAL_RCC_OscConfig+0x2b8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc6:	f7fe fc7f 	bl	80005c8 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ccc:	e011      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2ce>
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	42470000 	.word	0x42470000
 8001cd8:	42470e80 	.word	0x42470e80
 8001cdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce0:	f7fe fc72 	bl	80005c8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0cf      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b6a      	ldr	r3, [pc, #424]	; (8001e9c <HAL_RCC_OscConfig+0x478>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d106      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2f0>
 8001d06:	4a66      	ldr	r2, [pc, #408]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d08:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e01c      	b.n	8001d4e <HAL_RCC_OscConfig+0x32a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x312>
 8001d1c:	4a60      	ldr	r2, [pc, #384]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d1e:	4b60      	ldr	r3, [pc, #384]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
 8001d28:	4a5d      	ldr	r2, [pc, #372]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	e00b      	b.n	8001d4e <HAL_RCC_OscConfig+0x32a>
 8001d36:	4a5a      	ldr	r2, [pc, #360]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d38:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	4a57      	ldr	r2, [pc, #348]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d44:	4b56      	ldr	r3, [pc, #344]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d015      	beq.n	8001d82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d56:	f7fe fc37 	bl	80005c8 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe fc33 	bl	80005c8 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e08e      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ee      	beq.n	8001d5e <HAL_RCC_OscConfig+0x33a>
 8001d80:	e014      	b.n	8001dac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7fe fc21 	bl	80005c8 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7fe fc1d 	bl	80005c8 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e078      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001db4:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d064      	beq.n	8001e90 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc6:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d05c      	beq.n	8001e8c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d141      	bne.n	8001e5e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <HAL_RCC_OscConfig+0x480>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe fbf2 	bl	80005c8 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de8:	f7fe fbee 	bl	80005c8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e04b      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e06:	4926      	ldr	r1, [pc, #152]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	019b      	lsls	r3, r3, #6
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	3b01      	subs	r3, #1
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	061b      	lsls	r3, r3, #24
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <HAL_RCC_OscConfig+0x480>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe fbc7 	bl	80005c8 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe fbc3 	bl	80005c8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e020      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x41a>
 8001e5c:	e018      	b.n	8001e90 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_RCC_OscConfig+0x480>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe fbb0 	bl	80005c8 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe fbac 	bl	80005c8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_RCC_OscConfig+0x47c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x448>
 8001e8a:	e001      	b.n	8001e90 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470060 	.word	0x42470060

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0ca      	b.n	8002052 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b67      	ldr	r3, [pc, #412]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d20c      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b64      	ldr	r3, [pc, #400]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b62      	ldr	r3, [pc, #392]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 020f 	and.w	r2, r3, #15
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0b6      	b.n	8002052 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001f16:	4b52      	ldr	r3, [pc, #328]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	494f      	ldr	r1, [pc, #316]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001f22:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d044      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d119      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e07d      	b.n	8002052 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e06d      	b.n	8002052 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e065      	b.n	8002052 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4936      	ldr	r1, [pc, #216]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	4b35      	ldr	r3, [pc, #212]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 0203 	bic.w	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fb16 	bl	80005c8 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe fb12 	bl	80005c8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e04d      	b.n	8002052 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 020f 	and.w	r2, r3, #15
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d90c      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b1f      	ldr	r3, [pc, #124]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e030      	b.n	8002052 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4918      	ldr	r1, [pc, #96]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201a:	4911      	ldr	r1, [pc, #68]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800202e:	f000 f81d 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002032:	4601      	mov	r1, r0
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	fa21 f303 	lsr.w	r3, r1, r3
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800204a:	2000      	movs	r0, #0
 800204c:	f7fe fa78 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023c00 	.word	0x40023c00
 8002060:	40023800 	.word	0x40023800
 8002064:	08004110 	.word	0x08004110
 8002068:	20000008 	.word	0x20000008

0800206c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002070:	b08f      	sub	sp, #60	; 0x3c
 8002072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002078:	2300      	movs	r3, #0
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002084:	4b62      	ldr	r3, [pc, #392]	; (8002210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b04      	cmp	r3, #4
 800208e:	d007      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002090:	2b08      	cmp	r3, #8
 8002092:	d008      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 80b2 	bne.w	80021fe <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800209a:	4b5e      	ldr	r3, [pc, #376]	; (8002214 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800209e:	e0b1      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020a0:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020a4:	e0ae      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a6:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020b0:	4b57      	ldr	r3, [pc, #348]	; (8002210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d04e      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020bc:	4b54      	ldr	r3, [pc, #336]	; (8002210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	f04f 0400 	mov.w	r4, #0
 80020c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	ea01 0103 	and.w	r1, r1, r3
 80020d2:	ea02 0204 	and.w	r2, r2, r4
 80020d6:	460b      	mov	r3, r1
 80020d8:	4614      	mov	r4, r2
 80020da:	0160      	lsls	r0, r4, #5
 80020dc:	6278      	str	r0, [r7, #36]	; 0x24
 80020de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020e0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80020e4:	6278      	str	r0, [r7, #36]	; 0x24
 80020e6:	015b      	lsls	r3, r3, #5
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80020ee:	1a5b      	subs	r3, r3, r1
 80020f0:	eb64 0402 	sbc.w	r4, r4, r2
 80020f4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80020f8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80020fc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002100:	ebb8 0803 	subs.w	r8, r8, r3
 8002104:	eb69 0904 	sbc.w	r9, r9, r4
 8002108:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002120:	eb18 0801 	adds.w	r8, r8, r1
 8002124:	eb49 0902 	adc.w	r9, r9, r2
 8002128:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002140:	4640      	mov	r0, r8
 8002142:	4649      	mov	r1, r9
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002146:	f04f 0400 	mov.w	r4, #0
 800214a:	461a      	mov	r2, r3
 800214c:	4623      	mov	r3, r4
 800214e:	f7fe f84d 	bl	80001ec <__aeabi_uldivmod>
 8002152:	4603      	mov	r3, r0
 8002154:	460c      	mov	r4, r1
 8002156:	637b      	str	r3, [r7, #52]	; 0x34
 8002158:	e043      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	099b      	lsrs	r3, r3, #6
 8002160:	f04f 0400 	mov.w	r4, #0
 8002164:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	ea01 0103 	and.w	r1, r1, r3
 8002170:	ea02 0204 	and.w	r2, r2, r4
 8002174:	460b      	mov	r3, r1
 8002176:	4614      	mov	r4, r2
 8002178:	0160      	lsls	r0, r4, #5
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	015b      	lsls	r3, r3, #5
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800218c:	1a5b      	subs	r3, r3, r1
 800218e:	eb64 0402 	sbc.w	r4, r4, r2
 8002192:	01a6      	lsls	r6, r4, #6
 8002194:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002198:	019d      	lsls	r5, r3, #6
 800219a:	1aed      	subs	r5, r5, r3
 800219c:	eb66 0604 	sbc.w	r6, r6, r4
 80021a0:	00f3      	lsls	r3, r6, #3
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	00eb      	lsls	r3, r5, #3
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80021b4:	186d      	adds	r5, r5, r1
 80021b6:	eb46 0602 	adc.w	r6, r6, r2
 80021ba:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80021be:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80021c2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80021c6:	4655      	mov	r5, sl
 80021c8:	465e      	mov	r6, fp
 80021ca:	4628      	mov	r0, r5
 80021cc:	4631      	mov	r1, r6
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	461a      	mov	r2, r3
 80021d6:	4623      	mov	r3, r4
 80021d8:	f7fe f808 	bl	80001ec <__aeabi_uldivmod>
 80021dc:	4603      	mov	r3, r0
 80021de:	460c      	mov	r4, r1
 80021e0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	3301      	adds	r3, #1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80021f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021fc:	e002      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002202:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002206:	4618      	mov	r0, r3
 8002208:	373c      	adds	r7, #60	; 0x3c
 800220a:	46bd      	mov	sp, r7
 800220c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002210:	40023800 	.word	0x40023800
 8002214:	00f42400 	.word	0x00f42400
 8002218:	007a1200 	.word	0x007a1200

0800221c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_RCC_GetHCLKFreq+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000008 	.word	0x20000008

08002234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002238:	f7ff fff0 	bl	800221c <HAL_RCC_GetHCLKFreq>
 800223c:	4601      	mov	r1, r0
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	0a9b      	lsrs	r3, r3, #10
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	4a03      	ldr	r2, [pc, #12]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40023800 	.word	0x40023800
 8002258:	08004120 	.word	0x08004120

0800225c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002260:	f7ff ffdc 	bl	800221c <HAL_RCC_GetHCLKFreq>
 8002264:	4601      	mov	r1, r0
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0b5b      	lsrs	r3, r3, #13
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4a03      	ldr	r2, [pc, #12]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	08004120 	.word	0x08004120

08002284 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e03f      	b.n	8002316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f001 f836 	bl	800331c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	; 0x24
 80022b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	68d2      	ldr	r2, [r2, #12]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb75 	bl	80029b8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	6912      	ldr	r2, [r2, #16]
 80022d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	6952      	ldr	r2, [r2, #20]
 80022e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ec:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	68d2      	ldr	r2, [r2, #12]
 80022f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022fc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b088      	sub	sp, #32
 8002322:	af02      	add	r7, sp, #8
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	f040 8082 	bne.w	8002444 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_UART_Transmit+0x2e>
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e07a      	b.n	8002446 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_UART_Transmit+0x40>
 800235a:	2302      	movs	r3, #2
 800235c:	e073      	b.n	8002446 <HAL_UART_Transmit+0x128>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2221      	movs	r2, #33	; 0x21
 8002370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002374:	f7fe f928 	bl	80005c8 <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	88fa      	ldrh	r2, [r7, #6]
 800237e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002386:	e041      	b.n	800240c <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239e:	d121      	bne.n	80023e4 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f9a2 	bl	80026f4 <UART_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e045      	b.n	8002446 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	8812      	ldrh	r2, [r2, #0]
 80023c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ca:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3302      	adds	r3, #2
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	e017      	b.n	800240c <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3301      	adds	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	e013      	b.n	800240c <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2200      	movs	r2, #0
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f980 	bl	80026f4 <UART_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e023      	b.n	8002446 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1c59      	adds	r1, r3, #1
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1b8      	bne.n	8002388 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2200      	movs	r2, #0
 800241e:	2140      	movs	r1, #64	; 0x40
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f967 	bl	80026f4 <UART_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e00a      	b.n	8002446 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002444:	2302      	movs	r3, #2
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	4613      	mov	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b20      	cmp	r3, #32
 8002466:	d138      	bne.n	80024da <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_UART_Receive_IT+0x26>
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e031      	b.n	80024dc <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_UART_Receive_IT+0x38>
 8002482:	2302      	movs	r3, #2
 8002484:	e02a      	b.n	80024dc <HAL_UART_Receive_IT+0x8e>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	88fa      	ldrh	r2, [r7, #6]
 800249e:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2222      	movs	r2, #34	; 0x22
 80024aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	6952      	ldr	r2, [r2, #20]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	68d2      	ldr	r2, [r2, #12]
 80024d0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80024d4:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 80024da:	2302      	movs	r3, #2
  }
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_UART_IRQHandler+0x52>
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f9c7 	bl	80028c6 <UART_Receive_IT>
      return;
 8002538:	e0cc      	b.n	80026d4 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80ab 	beq.w	8002698 <HAL_UART_IRQHandler+0x1b0>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <HAL_UART_IRQHandler+0x70>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80a0 	beq.w	8002698 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_UART_IRQHandler+0x90>
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_UART_IRQHandler+0xb0>
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	f043 0202 	orr.w	r2, r3, #2
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_UART_IRQHandler+0xd0>
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b0:	f043 0204 	orr.w	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_UART_IRQHandler+0xf0>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	f043 0208 	orr.w	r2, r3, #8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d078      	beq.n	80026d2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_UART_IRQHandler+0x112>
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f966 	bl	80028c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf14      	ite	ne
 8002608:	2301      	movne	r3, #1
 800260a:	2300      	moveq	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <HAL_UART_IRQHandler+0x13a>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d031      	beq.n	8002686 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8b0 	bl	8002788 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d023      	beq.n	800267e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	6952      	ldr	r2, [r2, #20]
 8002640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002644:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	2b00      	cmp	r3, #0
 800264c:	d013      	beq.n	8002676 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	4a22      	ldr	r2, [pc, #136]	; (80026dc <HAL_UART_IRQHandler+0x1f4>)
 8002654:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd72 	bl	8001144 <HAL_DMA_Abort_IT>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002670:	4610      	mov	r0, r2
 8002672:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002674:	e00e      	b.n	8002694 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fc08 	bl	8002e8c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267c:	e00a      	b.n	8002694 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fc04 	bl	8002e8c <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	e006      	b.n	8002694 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fc00 	bl	8002e8c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002692:	e01e      	b.n	80026d2 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002694:	bf00      	nop
    return;
 8002696:	e01c      	b.n	80026d2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_UART_IRQHandler+0x1cc>
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f89d 	bl	80027ec <UART_Transmit_IT>
    return;
 80026b2:	e00f      	b.n	80026d4 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_UART_IRQHandler+0x1ec>
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f8e4 	bl	8002896 <UART_EndTransmit_IT>
    return;
 80026ce:	bf00      	nop
 80026d0:	e000      	b.n	80026d4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80026d2:	bf00      	nop
  }
}
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	080027c5 	.word	0x080027c5

080026e0 <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002704:	e02c      	b.n	8002760 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d028      	beq.n	8002760 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <UART_WaitOnFlagUntilTimeout+0x30>
 8002714:	f7fd ff58 	bl	80005c8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	1ad2      	subs	r2, r2, r3
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	429a      	cmp	r2, r3
 8002722:	d91d      	bls.n	8002760 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002732:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	6952      	ldr	r2, [r2, #20]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e00f      	b.n	8002780 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	401a      	ands	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	429a      	cmp	r2, r3
 800277c:	d0c3      	beq.n	8002706 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800279e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	6952      	ldr	r2, [r2, #20]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fb54 	bl	8002e8c <HAL_UART_ErrorCallback>
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b21      	cmp	r3, #33	; 0x21
 80027fe:	d143      	bne.n	8002888 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002808:	d119      	bne.n	800283e <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	8812      	ldrh	r2, [r2, #0]
 8002818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800281c:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	1c9a      	adds	r2, r3, #2
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	621a      	str	r2, [r3, #32]
 8002830:	e00e      	b.n	8002850 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	621a      	str	r2, [r3, #32]
 800283c:	e008      	b.n	8002850 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	1c58      	adds	r0, r3, #1
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	6208      	str	r0, [r1, #32]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4619      	mov	r1, r3
 800285e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10f      	bne.n	8002884 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	68d2      	ldr	r2, [r2, #12]
 800286e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002872:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	68d2      	ldr	r2, [r2, #12]
 800287e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002882:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e000      	b.n	800288a <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002888:	2302      	movs	r3, #2
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	68d2      	ldr	r2, [r2, #12]
 80028a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ac:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff12 	bl	80026e0 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b22      	cmp	r3, #34	; 0x22
 80028d8:	d169      	bne.n	80029ae <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e2:	d123      	bne.n	800292c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10e      	bne.n	8002910 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	1c9a      	adds	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
 800290e:	e029      	b.n	8002964 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	b29b      	uxth	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
 800292a:	e01b      	b.n	8002964 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	1c59      	adds	r1, r3, #1
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6291      	str	r1, [r2, #40]	; 0x28
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	6852      	ldr	r2, [r2, #4]
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e00c      	b.n	8002964 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	1c59      	adds	r1, r3, #1
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6291      	str	r1, [r2, #40]	; 0x28
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	6852      	ldr	r2, [r2, #4]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29b      	uxth	r3, r3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4619      	mov	r1, r3
 8002972:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002974:	2b00      	cmp	r3, #0
 8002976:	d118      	bne.n	80029aa <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	68d2      	ldr	r2, [r2, #12]
 8002982:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	6952      	ldr	r2, [r2, #20]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa25 	bl	8002df0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e002      	b.n	80029b0 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
  }
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029f4:	f023 030c 	bic.w	r3, r3, #12
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a48:	f040 80e4 	bne.w	8002c14 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4aab      	ldr	r2, [pc, #684]	; (8002d00 <UART_SetConfig+0x348>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <UART_SetConfig+0xa8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4aaa      	ldr	r2, [pc, #680]	; (8002d04 <UART_SetConfig+0x34c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d16c      	bne.n	8002b3a <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681c      	ldr	r4, [r3, #0]
 8002a64:	f7ff fbfa 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	009a      	lsls	r2, r3, #2
 8002a72:	441a      	add	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	4aa2      	ldr	r2, [pc, #648]	; (8002d08 <UART_SetConfig+0x350>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	011d      	lsls	r5, r3, #4
 8002a88:	f7ff fbe8 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009a      	lsls	r2, r3, #2
 8002a96:	441a      	add	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002aa2:	f7ff fbdb 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	4a92      	ldr	r2, [pc, #584]	; (8002d08 <UART_SetConfig+0x350>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2264      	movs	r2, #100	; 0x64
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	1af3      	subs	r3, r6, r3
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	3332      	adds	r3, #50	; 0x32
 8002ad0:	4a8d      	ldr	r2, [pc, #564]	; (8002d08 <UART_SetConfig+0x350>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ade:	441d      	add	r5, r3
 8002ae0:	f7ff fbbc 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009a      	lsls	r2, r3, #2
 8002aee:	441a      	add	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fbb2 f6f3 	udiv	r6, r2, r3
 8002afa:	f7ff fbaf 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009a      	lsls	r2, r3, #2
 8002b08:	441a      	add	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	4a7c      	ldr	r2, [pc, #496]	; (8002d08 <UART_SetConfig+0x350>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2264      	movs	r2, #100	; 0x64
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	1af3      	subs	r3, r6, r3
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	3332      	adds	r3, #50	; 0x32
 8002b28:	4a77      	ldr	r2, [pc, #476]	; (8002d08 <UART_SetConfig+0x350>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	442b      	add	r3, r5
 8002b36:	60a3      	str	r3, [r4, #8]
 8002b38:	e154      	b.n	8002de4 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681c      	ldr	r4, [r3, #0]
 8002b3e:	f7ff fb79 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	009a      	lsls	r2, r3, #2
 8002b4c:	441a      	add	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	4a6b      	ldr	r2, [pc, #428]	; (8002d08 <UART_SetConfig+0x350>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	011d      	lsls	r5, r3, #4
 8002b62:	f7ff fb67 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009a      	lsls	r2, r3, #2
 8002b70:	441a      	add	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b7c:	f7ff fb5a 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	009a      	lsls	r2, r3, #2
 8002b8a:	441a      	add	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	4a5c      	ldr	r2, [pc, #368]	; (8002d08 <UART_SetConfig+0x350>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	2264      	movs	r2, #100	; 0x64
 8002ba0:	fb02 f303 	mul.w	r3, r2, r3
 8002ba4:	1af3      	subs	r3, r6, r3
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	3332      	adds	r3, #50	; 0x32
 8002baa:	4a57      	ldr	r2, [pc, #348]	; (8002d08 <UART_SetConfig+0x350>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bb8:	441d      	add	r5, r3
 8002bba:	f7ff fb3b 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009a      	lsls	r2, r3, #2
 8002bc8:	441a      	add	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002bd4:	f7ff fb2e 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009a      	lsls	r2, r3, #2
 8002be2:	441a      	add	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	4a46      	ldr	r2, [pc, #280]	; (8002d08 <UART_SetConfig+0x350>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2264      	movs	r2, #100	; 0x64
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	1af3      	subs	r3, r6, r3
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	3332      	adds	r3, #50	; 0x32
 8002c02:	4a41      	ldr	r2, [pc, #260]	; (8002d08 <UART_SetConfig+0x350>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	442b      	add	r3, r5
 8002c10:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002c12:	e0e7      	b.n	8002de4 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a39      	ldr	r2, [pc, #228]	; (8002d00 <UART_SetConfig+0x348>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <UART_SetConfig+0x270>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <UART_SetConfig+0x34c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d171      	bne.n	8002d0c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681c      	ldr	r4, [r3, #0]
 8002c2c:	f7ff fb16 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009a      	lsls	r2, r3, #2
 8002c3a:	441a      	add	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	4a30      	ldr	r2, [pc, #192]	; (8002d08 <UART_SetConfig+0x350>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	011d      	lsls	r5, r3, #4
 8002c50:	f7ff fb04 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002c54:	4602      	mov	r2, r0
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	441a      	add	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c6a:	f7ff faf7 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009a      	lsls	r2, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <UART_SetConfig+0x350>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2264      	movs	r2, #100	; 0x64
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	1af3      	subs	r3, r6, r3
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	3332      	adds	r3, #50	; 0x32
 8002c98:	4a1b      	ldr	r2, [pc, #108]	; (8002d08 <UART_SetConfig+0x350>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ca4:	441d      	add	r5, r3
 8002ca6:	f7ff fad9 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002caa:	4602      	mov	r2, r0
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8002cc0:	f7ff facc 	bl	800225c <HAL_RCC_GetPCLK2Freq>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	009a      	lsls	r2, r3, #2
 8002cce:	441a      	add	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <UART_SetConfig+0x350>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	2264      	movs	r2, #100	; 0x64
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	1af3      	subs	r3, r6, r3
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	3332      	adds	r3, #50	; 0x32
 8002cee:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <UART_SetConfig+0x350>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	442b      	add	r3, r5
 8002cfc:	60a3      	str	r3, [r4, #8]
 8002cfe:	e071      	b.n	8002de4 <UART_SetConfig+0x42c>
 8002d00:	40011000 	.word	0x40011000
 8002d04:	40011400 	.word	0x40011400
 8002d08:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681c      	ldr	r4, [r3, #0]
 8002d10:	f7ff fa90 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009a      	lsls	r2, r3, #2
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	4a30      	ldr	r2, [pc, #192]	; (8002dec <UART_SetConfig+0x434>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	011d      	lsls	r5, r3, #4
 8002d34:	f7ff fa7e 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009a      	lsls	r2, r3, #2
 8002d42:	441a      	add	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d4e:	f7ff fa71 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002d52:	4602      	mov	r2, r0
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009a      	lsls	r2, r3, #2
 8002d5c:	441a      	add	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	4a20      	ldr	r2, [pc, #128]	; (8002dec <UART_SetConfig+0x434>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2264      	movs	r2, #100	; 0x64
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	1af3      	subs	r3, r6, r3
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	3332      	adds	r3, #50	; 0x32
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <UART_SetConfig+0x434>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d88:	441d      	add	r5, r3
 8002d8a:	f7ff fa53 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009a      	lsls	r2, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002da4:	f7ff fa46 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	009a      	lsls	r2, r3, #2
 8002db2:	441a      	add	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <UART_SetConfig+0x434>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	2264      	movs	r2, #100	; 0x64
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	1af3      	subs	r3, r6, r3
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	3332      	adds	r3, #50	; 0x32
 8002dd2:	4a06      	ldr	r2, [pc, #24]	; (8002dec <UART_SetConfig+0x434>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	442b      	add	r3, r5
 8002de0:	60a3      	str	r3, [r4, #8]
}
 8002de2:	e7ff      	b.n	8002de4 <UART_SetConfig+0x42c>
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dec:	51eb851f 	.word	0x51eb851f

08002df0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 0 */
uint8_t message_complete;
uint8_t received_data[5];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <HAL_UART_RxCpltCallback+0x2c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d107      	bne.n	8002e12 <HAL_UART_RxCpltCallback+0x22>


		message_complete =1;
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <HAL_UART_RxCpltCallback+0x30>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
		 HAL_UART_Receive_IT(huart,received_data, 1);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4906      	ldr	r1, [pc, #24]	; (8002e24 <HAL_UART_RxCpltCallback+0x34>)
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff fb1e 	bl	800244e <HAL_UART_Receive_IT>

	}



}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40011000 	.word	0x40011000
 8002e20:	2000009c 	.word	0x2000009c
 8002e24:	200000e8 	.word	0x200000e8

08002e28 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setvbuf(stdout, NULL, _IONBF, 0);
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <main+0x50>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6898      	ldr	r0, [r3, #8]
 8002e32:	2300      	movs	r3, #0
 8002e34:	2202      	movs	r2, #2
 8002e36:	2100      	movs	r1, #0
 8002e38:	f000 fc72 	bl	8003720 <setvbuf>
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e3c:	f7fd fb5e 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e40:	f000 f838 	bl	8002eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e44:	f000 f95a 	bl	80030fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002e48:	f000 f938 	bl	80030bc <MX_DMA_Init>
  MX_ADC1_Init();
 8002e4c:	f000 f8b0 	bl	8002fb0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002e50:	f000 f906 	bl	8003060 <MX_USART1_UART_Init>
  MX_GFXSIMULATOR_Init();
 8002e54:	f000 f8fc 	bl	8003050 <MX_GFXSIMULATOR_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,received_data,1);
 8002e58:	2201      	movs	r2, #1
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <main+0x54>)
 8002e5c:	4808      	ldr	r0, [pc, #32]	; (8002e80 <main+0x58>)
 8002e5e:	f7ff faf6 	bl	800244e <HAL_UART_Receive_IT>
  {

  /* USER CODE END WHILE */
	 /* USER CODE BEGIN 3 */

	  if (		message_complete ){
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <main+0x5c>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0fb      	beq.n	8002e62 <main+0x3a>
			  message_complete = 0;
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <main+0x5c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
			  printf("message recieve \r\n");
 8002e70:	4805      	ldr	r0, [pc, #20]	; (8002e88 <main+0x60>)
 8002e72:	f000 fc4d 	bl	8003710 <puts>
	  if (		message_complete ){
 8002e76:	e7f4      	b.n	8002e62 <main+0x3a>
 8002e78:	2000000c 	.word	0x2000000c
 8002e7c:	200000e8 	.word	0x200000e8
 8002e80:	200000f0 	.word	0x200000f0
 8002e84:	2000009c 	.word	0x2000009c
 8002e88:	080040c8 	.word	0x080040c8

08002e8c <HAL_UART_ErrorCallback>:

  }
  /* USER CODE END 3 */

}
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
	if(huart->ErrorCode == HAL_UART_ERROR_ORE){
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d104      	bne.n	8002ea6 <HAL_UART_ErrorCallback+0x1a>
		HAL_UART_Receive_IT(huart, received_data, 1);
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <HAL_UART_ErrorCallback+0x24>)
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fad4 	bl	800244e <HAL_UART_Receive_IT>
	}
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200000e8 	.word	0x200000e8

08002eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b094      	sub	sp, #80	; 0x50
 8002eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	4a38      	ldr	r2, [pc, #224]	; (8002fa0 <SystemClock_Config+0xec>)
 8002ec0:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <SystemClock_Config+0xec>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <SystemClock_Config+0xec>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	4a32      	ldr	r2, [pc, #200]	; (8002fa4 <SystemClock_Config+0xf0>)
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <SystemClock_Config+0xf0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <SystemClock_Config+0xf0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002efc:	2302      	movs	r3, #2
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f06:	2304      	movs	r3, #4
 8002f08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002f0a:	23b4      	movs	r3, #180	; 0xb4
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f12:	2304      	movs	r3, #4
 8002f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f16:	f107 0320 	add.w	r3, r7, #32
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fd82 	bl	8001a24 <HAL_RCC_OscConfig>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <SystemClock_Config+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f26:	21b4      	movs	r1, #180	; 0xb4
 8002f28:	481f      	ldr	r0, [pc, #124]	; (8002fa8 <SystemClock_Config+0xf4>)
 8002f2a:	f000 f931 	bl	8003190 <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f2e:	f7fe fd29 	bl	8001984 <HAL_PWREx_EnableOverDrive>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <SystemClock_Config+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f38:	21bb      	movs	r1, #187	; 0xbb
 8002f3a:	481b      	ldr	r0, [pc, #108]	; (8002fa8 <SystemClock_Config+0xf4>)
 8002f3c:	f000 f928 	bl	8003190 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f40:	230f      	movs	r3, #15
 8002f42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f44:	2302      	movs	r3, #2
 8002f46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	2105      	movs	r1, #5
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe ffa2 	bl	8001ea8 <HAL_RCC_ClockConfig>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <SystemClock_Config+0xbe>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f6a:	21c9      	movs	r1, #201	; 0xc9
 8002f6c:	480e      	ldr	r0, [pc, #56]	; (8002fa8 <SystemClock_Config+0xf4>)
 8002f6e:	f000 f90f 	bl	8003190 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002f72:	f7ff f953 	bl	800221c <HAL_RCC_GetHCLKFreq>
 8002f76:	4602      	mov	r2, r0
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <SystemClock_Config+0xf8>)
 8002f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd fffa 	bl	8000f7a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002f86:	2004      	movs	r0, #4
 8002f88:	f7fe f804 	bl	8000f94 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	f7fd ffc7 	bl	8000f26 <HAL_NVIC_SetPriority>
}
 8002f98:	bf00      	nop
 8002f9a:	3750      	adds	r7, #80	; 0x50
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	080040dc 	.word	0x080040dc
 8002fac:	10624dd3 	.word	0x10624dd3

08002fb0 <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <MX_ADC1_Init+0x90>)
 8002fb8:	4a22      	ldr	r2, [pc, #136]	; (8003044 <MX_ADC1_Init+0x94>)
 8002fba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <MX_ADC1_Init+0x90>)
 8002fbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fc4:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <MX_ADC1_Init+0x90>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <MX_ADC1_Init+0x90>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <MX_ADC1_Init+0x90>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <MX_ADC1_Init+0x90>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <MX_ADC1_Init+0x90>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <MX_ADC1_Init+0x90>)
 8002fe4:	4a18      	ldr	r2, [pc, #96]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <MX_ADC1_Init+0x90>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <MX_ADC1_Init+0x90>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <MX_ADC1_Init+0x90>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <MX_ADC1_Init+0x90>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003000:	480f      	ldr	r0, [pc, #60]	; (8003040 <MX_ADC1_Init+0x90>)
 8003002:	f7fd faed 	bl	80005e0 <HAL_ADC_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <MX_ADC1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 800300c:	21ee      	movs	r1, #238	; 0xee
 800300e:	480f      	ldr	r0, [pc, #60]	; (800304c <MX_ADC1_Init+0x9c>)
 8003010:	f000 f8be 	bl	8003190 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 8003014:	2305      	movs	r3, #5
 8003016:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003018:	2301      	movs	r3, #1
 800301a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003020:	463b      	mov	r3, r7
 8003022:	4619      	mov	r1, r3
 8003024:	4806      	ldr	r0, [pc, #24]	; (8003040 <MX_ADC1_Init+0x90>)
 8003026:	f7fd fc7d 	bl	8000924 <HAL_ADC_ConfigChannel>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <MX_ADC1_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003030:	21f8      	movs	r1, #248	; 0xf8
 8003032:	4806      	ldr	r0, [pc, #24]	; (800304c <MX_ADC1_Init+0x9c>)
 8003034:	f000 f8ac 	bl	8003190 <_Error_Handler>
  }

}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	200000a0 	.word	0x200000a0
 8003044:	40012000 	.word	0x40012000
 8003048:	0f000001 	.word	0x0f000001
 800304c:	080040dc 	.word	0x080040dc

08003050 <MX_GFXSIMULATOR_Init>:

/* GFXSIMULATOR init function */
static void MX_GFXSIMULATOR_Init(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <MX_USART1_UART_Init+0x50>)
 8003066:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <MX_USART1_UART_Init+0x54>)
 8003068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <MX_USART1_UART_Init+0x50>)
 800306c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <MX_USART1_UART_Init+0x50>)
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <MX_USART1_UART_Init+0x50>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800307e:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <MX_USART1_UART_Init+0x50>)
 8003080:	2200      	movs	r2, #0
 8003082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <MX_USART1_UART_Init+0x50>)
 8003086:	220c      	movs	r2, #12
 8003088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <MX_USART1_UART_Init+0x50>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <MX_USART1_UART_Init+0x50>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003096:	4806      	ldr	r0, [pc, #24]	; (80030b0 <MX_USART1_UART_Init+0x50>)
 8003098:	f7ff f8f4 	bl	8002284 <HAL_UART_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d004      	beq.n	80030ac <MX_USART1_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030a2:	f240 1111 	movw	r1, #273	; 0x111
 80030a6:	4804      	ldr	r0, [pc, #16]	; (80030b8 <MX_USART1_UART_Init+0x58>)
 80030a8:	f000 f872 	bl	8003190 <_Error_Handler>
  }

}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200000f0 	.word	0x200000f0
 80030b4:	40011000 	.word	0x40011000
 80030b8:	080040dc 	.word	0x080040dc

080030bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	4a0c      	ldr	r2, [pc, #48]	; (80030f8 <MX_DMA_Init+0x3c>)
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <MX_DMA_Init+0x3c>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <MX_DMA_Init+0x3c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	607b      	str	r3, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	2038      	movs	r0, #56	; 0x38
 80030e4:	f7fd ff1f 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80030e8:	2038      	movs	r0, #56	; 0x38
 80030ea:	f7fd ff38 	bl	8000f5e <HAL_NVIC_EnableIRQ>

}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800

080030fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	4a20      	ldr	r2, [pc, #128]	; (8003188 <MX_GPIO_Init+0x8c>)
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <MX_GPIO_Init+0x8c>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <MX_GPIO_Init+0x8c>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	4a19      	ldr	r2, [pc, #100]	; (8003188 <MX_GPIO_Init+0x8c>)
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <MX_GPIO_Init+0x8c>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b16      	ldr	r3, [pc, #88]	; (8003188 <MX_GPIO_Init+0x8c>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4a12      	ldr	r2, [pc, #72]	; (8003188 <MX_GPIO_Init+0x8c>)
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <MX_GPIO_Init+0x8c>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <MX_GPIO_Init+0x8c>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8003156:	2200      	movs	r2, #0
 8003158:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800315c:	480b      	ldr	r0, [pc, #44]	; (800318c <MX_GPIO_Init+0x90>)
 800315e:	f7fe fbf7 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8003162:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003168:	2301      	movs	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003174:	f107 030c 	add.w	r3, r7, #12
 8003178:	4619      	mov	r1, r3
 800317a:	4804      	ldr	r0, [pc, #16]	; (800318c <MX_GPIO_Init+0x90>)
 800317c:	f7fe fa3e 	bl	80015fc <HAL_GPIO_Init>

}
 8003180:	bf00      	nop
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	40021800 	.word	0x40021800

08003190 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 800319a:	e7fe      	b.n	800319a <_Error_Handler+0xa>

0800319c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	4a25      	ldr	r2, [pc, #148]	; (800323c <HAL_MspInit+0xa0>)
 80031a8:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_MspInit+0xa0>)
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b0:	6453      	str	r3, [r2, #68]	; 0x44
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_MspInit+0xa0>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4a1e      	ldr	r2, [pc, #120]	; (800323c <HAL_MspInit+0xa0>)
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_MspInit+0xa0>)
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b1b      	ldr	r3, [pc, #108]	; (800323c <HAL_MspInit+0xa0>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031da:	2003      	movs	r0, #3
 80031dc:	f7fd fe98 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2100      	movs	r1, #0
 80031e4:	f06f 000b 	mvn.w	r0, #11
 80031e8:	f7fd fe9d 	bl	8000f26 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80031ec:	2200      	movs	r2, #0
 80031ee:	2100      	movs	r1, #0
 80031f0:	f06f 000a 	mvn.w	r0, #10
 80031f4:	f7fd fe97 	bl	8000f26 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80031f8:	2200      	movs	r2, #0
 80031fa:	2100      	movs	r1, #0
 80031fc:	f06f 0009 	mvn.w	r0, #9
 8003200:	f7fd fe91 	bl	8000f26 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	f06f 0004 	mvn.w	r0, #4
 800320c:	f7fd fe8b 	bl	8000f26 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2100      	movs	r1, #0
 8003214:	f06f 0003 	mvn.w	r0, #3
 8003218:	f7fd fe85 	bl	8000f26 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800321c:	2200      	movs	r2, #0
 800321e:	2100      	movs	r1, #0
 8003220:	f06f 0001 	mvn.w	r0, #1
 8003224:	f7fd fe7f 	bl	8000f26 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003228:	2200      	movs	r2, #0
 800322a:	2100      	movs	r1, #0
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	f7fd fe79 	bl	8000f26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800

08003240 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2d      	ldr	r2, [pc, #180]	; (8003304 <HAL_ADC_MspInit+0xc4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d153      	bne.n	80032fa <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	4a2c      	ldr	r2, [pc, #176]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 800325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	6453      	str	r3, [r2, #68]	; 0x44
 8003262:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_ADC_MspInit+0xc8>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800326e:	2320      	movs	r3, #32
 8003270:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003272:	2303      	movs	r3, #3
 8003274:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327a:	f107 030c 	add.w	r3, r7, #12
 800327e:	4619      	mov	r1, r3
 8003280:	4822      	ldr	r0, [pc, #136]	; (800330c <HAL_ADC_MspInit+0xcc>)
 8003282:	f7fe f9bb 	bl	80015fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <HAL_ADC_MspInit+0xd4>)
 800328a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800328c:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 800328e:	2200      	movs	r2, #0
 8003290:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003292:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800329e:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 80032a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 80032a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 80032b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 80032b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032ca:	4811      	ldr	r0, [pc, #68]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 80032cc:	f7fd fe8c 	bl	8000fe8 <HAL_DMA_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_ADC_MspInit+0x9e>
    {
      _Error_Handler(__FILE__, __LINE__);
 80032d6:	2175      	movs	r1, #117	; 0x75
 80032d8:	480f      	ldr	r0, [pc, #60]	; (8003318 <HAL_ADC_MspInit+0xd8>)
 80032da:	f7ff ff59 	bl	8003190 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
 80032e4:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <HAL_ADC_MspInit+0xd0>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2100      	movs	r1, #0
 80032ee:	2012      	movs	r0, #18
 80032f0:	f7fd fe19 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80032f4:	2012      	movs	r0, #18
 80032f6:	f7fd fe32 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032fa:	bf00      	nop
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40012000 	.word	0x40012000
 8003308:	40023800 	.word	0x40023800
 800330c:	40020000 	.word	0x40020000
 8003310:	20000130 	.word	0x20000130
 8003314:	40026410 	.word	0x40026410
 8003318:	080040ec 	.word	0x080040ec

0800331c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a16      	ldr	r2, [pc, #88]	; (8003384 <HAL_UART_MspInit+0x68>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d126      	bne.n	800337c <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	4a15      	ldr	r2, [pc, #84]	; (8003388 <HAL_UART_MspInit+0x6c>)
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_UART_MspInit+0x6c>)
 8003336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003338:	f043 0310 	orr.w	r3, r3, #16
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_UART_MspInit+0x6c>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800334a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800334e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003354:	2301      	movs	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800335c:	2307      	movs	r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003360:	f107 030c 	add.w	r3, r7, #12
 8003364:	4619      	mov	r1, r3
 8003366:	4809      	ldr	r0, [pc, #36]	; (800338c <HAL_UART_MspInit+0x70>)
 8003368:	f7fe f948 	bl	80015fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800336c:	2200      	movs	r2, #0
 800336e:	2100      	movs	r1, #0
 8003370:	2025      	movs	r0, #37	; 0x25
 8003372:	f7fd fdd8 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003376:	2025      	movs	r0, #37	; 0x25
 8003378:	f7fd fdf1 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800337c:	bf00      	nop
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40011000 	.word	0x40011000
 8003388:	40023800 	.word	0x40023800
 800338c:	40020000 	.word	0x40020000

08003390 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <HardFault_Handler+0x4>

080033a4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a8:	e7fe      	b.n	80033a8 <MemManage_Handler+0x4>

080033aa <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ae:	e7fe      	b.n	80033ae <BusFault_Handler+0x4>

080033b0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <UsageFault_Handler+0x4>

080033b6 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e4:	f7fd f8dc 	bl	80005a0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80033e8:	f7fd fdf0 	bl	8000fcc <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <ADC_IRQHandler>:

/**
* @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
*/
void ADC_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80033f4:	4802      	ldr	r0, [pc, #8]	; (8003400 <ADC_IRQHandler+0x10>)
 80033f6:	f7fd f936 	bl	8000666 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200000a0 	.word	0x200000a0

08003404 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003408:	4802      	ldr	r0, [pc, #8]	; (8003414 <USART1_IRQHandler+0x10>)
 800340a:	f7ff f86d 	bl	80024e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200000f0 	.word	0x200000f0

08003418 <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800341c:	4802      	ldr	r0, [pc, #8]	; (8003428 <DMA2_Stream0_IRQHandler+0x10>)
 800341e:	f7fd feb3 	bl	8001188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000130 	.word	0x20000130

0800342c <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	b29a      	uxth	r2, r3
 800343c:	f04f 33ff 	mov.w	r3, #4294967295
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	4804      	ldr	r0, [pc, #16]	; (8003454 <_write+0x28>)
 8003444:	f7fe ff6b 	bl	800231e <HAL_UART_Transmit>

	return len;
 8003448:	687b      	ldr	r3, [r7, #4]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200000f0 	.word	0x200000f0

08003458 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <_sbrk+0x38>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <_sbrk+0x16>
		heap_end = & end;
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <_sbrk+0x38>)
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <_sbrk+0x3c>)
 800346c:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <_sbrk+0x38>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <_sbrk+0x38>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <_sbrk+0x38>)
 800347e:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003480:	68fb      	ldr	r3, [r7, #12]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	2000008c 	.word	0x2000008c
 8003494:	20000194 	.word	0x20000194

08003498 <_close>:

int _close(int32_t file)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <_close+0x20>)
 80034a2:	2258      	movs	r2, #88	; 0x58
 80034a4:	601a      	str	r2, [r3, #0]
	return -1;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000190 	.word	0x20000190

080034bc <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <_fstat+0x20>)
 80034c8:	2258      	movs	r2, #88	; 0x58
 80034ca:	601a      	str	r2, [r3, #0]
	return -1;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	20000190 	.word	0x20000190

080034e0 <_isatty>:

int _isatty(int32_t file)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <_isatty+0x1c>)
 80034ea:	2258      	movs	r2, #88	; 0x58
 80034ec:	601a      	str	r2, [r3, #0]
	return 0;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	20000190 	.word	0x20000190

08003500 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <_lseek+0x24>)
 800350e:	2258      	movs	r2, #88	; 0x58
 8003510:	601a      	str	r2, [r3, #0]
	return -1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000190 	.word	0x20000190

08003528 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <_read+0x24>)
 8003536:	2258      	movs	r2, #88	; 0x58
 8003538:	601a      	str	r2, [r3, #0]
	return -1;
 800353a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000190 	.word	0x20000190

08003550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003554:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <SystemInit+0x60>)
 8003556:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <SystemInit+0x60>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003564:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <SystemInit+0x64>)
 8003566:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <SystemInit+0x64>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003570:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <SystemInit+0x64>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003576:	4a0f      	ldr	r2, [pc, #60]	; (80035b4 <SystemInit+0x64>)
 8003578:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <SystemInit+0x64>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <SystemInit+0x64>)
 8003588:	4a0b      	ldr	r2, [pc, #44]	; (80035b8 <SystemInit+0x68>)
 800358a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800358c:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <SystemInit+0x64>)
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <SystemInit+0x64>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <SystemInit+0x64>)
 800359a:	2200      	movs	r2, #0
 800359c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800359e:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <SystemInit+0x60>)
 80035a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035a4:	609a      	str	r2, [r3, #8]
#endif
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00
 80035b4:	40023800 	.word	0x40023800
 80035b8:	24003010 	.word	0x24003010

080035bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80035bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035c2:	e003      	b.n	80035cc <LoopCopyDataInit>

080035c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035ca:	3104      	adds	r1, #4

080035cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035cc:	480b      	ldr	r0, [pc, #44]	; (80035fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035d4:	d3f6      	bcc.n	80035c4 <CopyDataInit>
  ldr  r2, =_sbss
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035d8:	e002      	b.n	80035e0 <LoopFillZerobss>

080035da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035dc:	f842 3b04 	str.w	r3, [r2], #4

080035e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035e4:	d3f9      	bcc.n	80035da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035e6:	f7ff ffb3 	bl	8003550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ea:	f000 f811 	bl	8003610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ee:	f7ff fc1b 	bl	8002e28 <main>
  bx  lr    
 80035f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80035f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80035f8:	0800419c 	.word	0x0800419c
  ldr  r0, =_sdata
 80035fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003600:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003604:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003608:	20000194 	.word	0x20000194

0800360c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800360c:	e7fe      	b.n	800360c <CAN1_RX0_IRQHandler>
	...

08003610 <__libc_init_array>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	4e0d      	ldr	r6, [pc, #52]	; (8003648 <__libc_init_array+0x38>)
 8003614:	4c0d      	ldr	r4, [pc, #52]	; (800364c <__libc_init_array+0x3c>)
 8003616:	1ba4      	subs	r4, r4, r6
 8003618:	10a4      	asrs	r4, r4, #2
 800361a:	2500      	movs	r5, #0
 800361c:	42a5      	cmp	r5, r4
 800361e:	d109      	bne.n	8003634 <__libc_init_array+0x24>
 8003620:	4e0b      	ldr	r6, [pc, #44]	; (8003650 <__libc_init_array+0x40>)
 8003622:	4c0c      	ldr	r4, [pc, #48]	; (8003654 <__libc_init_array+0x44>)
 8003624:	f000 fd44 	bl	80040b0 <_init>
 8003628:	1ba4      	subs	r4, r4, r6
 800362a:	10a4      	asrs	r4, r4, #2
 800362c:	2500      	movs	r5, #0
 800362e:	42a5      	cmp	r5, r4
 8003630:	d105      	bne.n	800363e <__libc_init_array+0x2e>
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003638:	4798      	blx	r3
 800363a:	3501      	adds	r5, #1
 800363c:	e7ee      	b.n	800361c <__libc_init_array+0xc>
 800363e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003642:	4798      	blx	r3
 8003644:	3501      	adds	r5, #1
 8003646:	e7f2      	b.n	800362e <__libc_init_array+0x1e>
 8003648:	08004194 	.word	0x08004194
 800364c:	08004194 	.word	0x08004194
 8003650:	08004194 	.word	0x08004194
 8003654:	08004198 	.word	0x08004198

08003658 <_puts_r>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	460e      	mov	r6, r1
 800365c:	4605      	mov	r5, r0
 800365e:	b118      	cbz	r0, 8003668 <_puts_r+0x10>
 8003660:	6983      	ldr	r3, [r0, #24]
 8003662:	b90b      	cbnz	r3, 8003668 <_puts_r+0x10>
 8003664:	f000 fabc 	bl	8003be0 <__sinit>
 8003668:	69ab      	ldr	r3, [r5, #24]
 800366a:	68ac      	ldr	r4, [r5, #8]
 800366c:	b913      	cbnz	r3, 8003674 <_puts_r+0x1c>
 800366e:	4628      	mov	r0, r5
 8003670:	f000 fab6 	bl	8003be0 <__sinit>
 8003674:	4b23      	ldr	r3, [pc, #140]	; (8003704 <_puts_r+0xac>)
 8003676:	429c      	cmp	r4, r3
 8003678:	d117      	bne.n	80036aa <_puts_r+0x52>
 800367a:	686c      	ldr	r4, [r5, #4]
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	071b      	lsls	r3, r3, #28
 8003680:	d51d      	bpl.n	80036be <_puts_r+0x66>
 8003682:	6923      	ldr	r3, [r4, #16]
 8003684:	b1db      	cbz	r3, 80036be <_puts_r+0x66>
 8003686:	3e01      	subs	r6, #1
 8003688:	68a3      	ldr	r3, [r4, #8]
 800368a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800368e:	3b01      	subs	r3, #1
 8003690:	60a3      	str	r3, [r4, #8]
 8003692:	b9e9      	cbnz	r1, 80036d0 <_puts_r+0x78>
 8003694:	2b00      	cmp	r3, #0
 8003696:	da2e      	bge.n	80036f6 <_puts_r+0x9e>
 8003698:	4622      	mov	r2, r4
 800369a:	210a      	movs	r1, #10
 800369c:	4628      	mov	r0, r5
 800369e:	f000 f8ed 	bl	800387c <__swbuf_r>
 80036a2:	3001      	adds	r0, #1
 80036a4:	d011      	beq.n	80036ca <_puts_r+0x72>
 80036a6:	200a      	movs	r0, #10
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
 80036aa:	4b17      	ldr	r3, [pc, #92]	; (8003708 <_puts_r+0xb0>)
 80036ac:	429c      	cmp	r4, r3
 80036ae:	d101      	bne.n	80036b4 <_puts_r+0x5c>
 80036b0:	68ac      	ldr	r4, [r5, #8]
 80036b2:	e7e3      	b.n	800367c <_puts_r+0x24>
 80036b4:	4b15      	ldr	r3, [pc, #84]	; (800370c <_puts_r+0xb4>)
 80036b6:	429c      	cmp	r4, r3
 80036b8:	bf08      	it	eq
 80036ba:	68ec      	ldreq	r4, [r5, #12]
 80036bc:	e7de      	b.n	800367c <_puts_r+0x24>
 80036be:	4621      	mov	r1, r4
 80036c0:	4628      	mov	r0, r5
 80036c2:	f000 f92d 	bl	8003920 <__swsetup_r>
 80036c6:	2800      	cmp	r0, #0
 80036c8:	d0dd      	beq.n	8003686 <_puts_r+0x2e>
 80036ca:	f04f 30ff 	mov.w	r0, #4294967295
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	da04      	bge.n	80036de <_puts_r+0x86>
 80036d4:	69a2      	ldr	r2, [r4, #24]
 80036d6:	4293      	cmp	r3, r2
 80036d8:	db06      	blt.n	80036e8 <_puts_r+0x90>
 80036da:	290a      	cmp	r1, #10
 80036dc:	d004      	beq.n	80036e8 <_puts_r+0x90>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	6022      	str	r2, [r4, #0]
 80036e4:	7019      	strb	r1, [r3, #0]
 80036e6:	e7cf      	b.n	8003688 <_puts_r+0x30>
 80036e8:	4622      	mov	r2, r4
 80036ea:	4628      	mov	r0, r5
 80036ec:	f000 f8c6 	bl	800387c <__swbuf_r>
 80036f0:	3001      	adds	r0, #1
 80036f2:	d1c9      	bne.n	8003688 <_puts_r+0x30>
 80036f4:	e7e9      	b.n	80036ca <_puts_r+0x72>
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	200a      	movs	r0, #10
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	6022      	str	r2, [r4, #0]
 80036fe:	7018      	strb	r0, [r3, #0]
 8003700:	bd70      	pop	{r4, r5, r6, pc}
 8003702:	bf00      	nop
 8003704:	0800414c 	.word	0x0800414c
 8003708:	0800416c 	.word	0x0800416c
 800370c:	0800412c 	.word	0x0800412c

08003710 <puts>:
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <puts+0xc>)
 8003712:	4601      	mov	r1, r0
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	f7ff bf9f 	b.w	8003658 <_puts_r>
 800371a:	bf00      	nop
 800371c:	2000000c 	.word	0x2000000c

08003720 <setvbuf>:
 8003720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003724:	461d      	mov	r5, r3
 8003726:	4b51      	ldr	r3, [pc, #324]	; (800386c <setvbuf+0x14c>)
 8003728:	681e      	ldr	r6, [r3, #0]
 800372a:	4604      	mov	r4, r0
 800372c:	460f      	mov	r7, r1
 800372e:	4690      	mov	r8, r2
 8003730:	b126      	cbz	r6, 800373c <setvbuf+0x1c>
 8003732:	69b3      	ldr	r3, [r6, #24]
 8003734:	b913      	cbnz	r3, 800373c <setvbuf+0x1c>
 8003736:	4630      	mov	r0, r6
 8003738:	f000 fa52 	bl	8003be0 <__sinit>
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <setvbuf+0x150>)
 800373e:	429c      	cmp	r4, r3
 8003740:	d152      	bne.n	80037e8 <setvbuf+0xc8>
 8003742:	6874      	ldr	r4, [r6, #4]
 8003744:	f1b8 0f02 	cmp.w	r8, #2
 8003748:	d006      	beq.n	8003758 <setvbuf+0x38>
 800374a:	f1b8 0f01 	cmp.w	r8, #1
 800374e:	f200 8089 	bhi.w	8003864 <setvbuf+0x144>
 8003752:	2d00      	cmp	r5, #0
 8003754:	f2c0 8086 	blt.w	8003864 <setvbuf+0x144>
 8003758:	4621      	mov	r1, r4
 800375a:	4630      	mov	r0, r6
 800375c:	f000 f9d6 	bl	8003b0c <_fflush_r>
 8003760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003762:	b141      	cbz	r1, 8003776 <setvbuf+0x56>
 8003764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003768:	4299      	cmp	r1, r3
 800376a:	d002      	beq.n	8003772 <setvbuf+0x52>
 800376c:	4630      	mov	r0, r6
 800376e:	f000 fb35 	bl	8003ddc <_free_r>
 8003772:	2300      	movs	r3, #0
 8003774:	6363      	str	r3, [r4, #52]	; 0x34
 8003776:	2300      	movs	r3, #0
 8003778:	61a3      	str	r3, [r4, #24]
 800377a:	6063      	str	r3, [r4, #4]
 800377c:	89a3      	ldrh	r3, [r4, #12]
 800377e:	061b      	lsls	r3, r3, #24
 8003780:	d503      	bpl.n	800378a <setvbuf+0x6a>
 8003782:	6921      	ldr	r1, [r4, #16]
 8003784:	4630      	mov	r0, r6
 8003786:	f000 fb29 	bl	8003ddc <_free_r>
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003790:	f023 0303 	bic.w	r3, r3, #3
 8003794:	f1b8 0f02 	cmp.w	r8, #2
 8003798:	81a3      	strh	r3, [r4, #12]
 800379a:	d05d      	beq.n	8003858 <setvbuf+0x138>
 800379c:	ab01      	add	r3, sp, #4
 800379e:	466a      	mov	r2, sp
 80037a0:	4621      	mov	r1, r4
 80037a2:	4630      	mov	r0, r6
 80037a4:	f000 faa6 	bl	8003cf4 <__swhatbuf_r>
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	4318      	orrs	r0, r3
 80037ac:	81a0      	strh	r0, [r4, #12]
 80037ae:	bb2d      	cbnz	r5, 80037fc <setvbuf+0xdc>
 80037b0:	9d00      	ldr	r5, [sp, #0]
 80037b2:	4628      	mov	r0, r5
 80037b4:	f000 fb02 	bl	8003dbc <malloc>
 80037b8:	4607      	mov	r7, r0
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d14e      	bne.n	800385c <setvbuf+0x13c>
 80037be:	f8dd 9000 	ldr.w	r9, [sp]
 80037c2:	45a9      	cmp	r9, r5
 80037c4:	d13c      	bne.n	8003840 <setvbuf+0x120>
 80037c6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	2300      	movs	r3, #0
 80037d4:	60a3      	str	r3, [r4, #8]
 80037d6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	6123      	str	r3, [r4, #16]
 80037de:	2301      	movs	r3, #1
 80037e0:	6163      	str	r3, [r4, #20]
 80037e2:	b003      	add	sp, #12
 80037e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037e8:	4b22      	ldr	r3, [pc, #136]	; (8003874 <setvbuf+0x154>)
 80037ea:	429c      	cmp	r4, r3
 80037ec:	d101      	bne.n	80037f2 <setvbuf+0xd2>
 80037ee:	68b4      	ldr	r4, [r6, #8]
 80037f0:	e7a8      	b.n	8003744 <setvbuf+0x24>
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <setvbuf+0x158>)
 80037f4:	429c      	cmp	r4, r3
 80037f6:	bf08      	it	eq
 80037f8:	68f4      	ldreq	r4, [r6, #12]
 80037fa:	e7a3      	b.n	8003744 <setvbuf+0x24>
 80037fc:	2f00      	cmp	r7, #0
 80037fe:	d0d8      	beq.n	80037b2 <setvbuf+0x92>
 8003800:	69b3      	ldr	r3, [r6, #24]
 8003802:	b913      	cbnz	r3, 800380a <setvbuf+0xea>
 8003804:	4630      	mov	r0, r6
 8003806:	f000 f9eb 	bl	8003be0 <__sinit>
 800380a:	f1b8 0f01 	cmp.w	r8, #1
 800380e:	bf08      	it	eq
 8003810:	89a3      	ldrheq	r3, [r4, #12]
 8003812:	6027      	str	r7, [r4, #0]
 8003814:	bf04      	itt	eq
 8003816:	f043 0301 	orreq.w	r3, r3, #1
 800381a:	81a3      	strheq	r3, [r4, #12]
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	6127      	str	r7, [r4, #16]
 8003820:	f013 0008 	ands.w	r0, r3, #8
 8003824:	6165      	str	r5, [r4, #20]
 8003826:	d01b      	beq.n	8003860 <setvbuf+0x140>
 8003828:	f013 0001 	ands.w	r0, r3, #1
 800382c:	bf18      	it	ne
 800382e:	426d      	negne	r5, r5
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	bf1d      	ittte	ne
 8003836:	60a3      	strne	r3, [r4, #8]
 8003838:	61a5      	strne	r5, [r4, #24]
 800383a:	4618      	movne	r0, r3
 800383c:	60a5      	streq	r5, [r4, #8]
 800383e:	e7d0      	b.n	80037e2 <setvbuf+0xc2>
 8003840:	4648      	mov	r0, r9
 8003842:	f000 fabb 	bl	8003dbc <malloc>
 8003846:	4607      	mov	r7, r0
 8003848:	2800      	cmp	r0, #0
 800384a:	d0bc      	beq.n	80037c6 <setvbuf+0xa6>
 800384c:	89a3      	ldrh	r3, [r4, #12]
 800384e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	464d      	mov	r5, r9
 8003856:	e7d3      	b.n	8003800 <setvbuf+0xe0>
 8003858:	2000      	movs	r0, #0
 800385a:	e7b6      	b.n	80037ca <setvbuf+0xaa>
 800385c:	46a9      	mov	r9, r5
 800385e:	e7f5      	b.n	800384c <setvbuf+0x12c>
 8003860:	60a0      	str	r0, [r4, #8]
 8003862:	e7be      	b.n	80037e2 <setvbuf+0xc2>
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	e7bb      	b.n	80037e2 <setvbuf+0xc2>
 800386a:	bf00      	nop
 800386c:	2000000c 	.word	0x2000000c
 8003870:	0800414c 	.word	0x0800414c
 8003874:	0800416c 	.word	0x0800416c
 8003878:	0800412c 	.word	0x0800412c

0800387c <__swbuf_r>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	460e      	mov	r6, r1
 8003880:	4614      	mov	r4, r2
 8003882:	4605      	mov	r5, r0
 8003884:	b118      	cbz	r0, 800388e <__swbuf_r+0x12>
 8003886:	6983      	ldr	r3, [r0, #24]
 8003888:	b90b      	cbnz	r3, 800388e <__swbuf_r+0x12>
 800388a:	f000 f9a9 	bl	8003be0 <__sinit>
 800388e:	4b21      	ldr	r3, [pc, #132]	; (8003914 <__swbuf_r+0x98>)
 8003890:	429c      	cmp	r4, r3
 8003892:	d12a      	bne.n	80038ea <__swbuf_r+0x6e>
 8003894:	686c      	ldr	r4, [r5, #4]
 8003896:	69a3      	ldr	r3, [r4, #24]
 8003898:	60a3      	str	r3, [r4, #8]
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	071a      	lsls	r2, r3, #28
 800389e:	d52e      	bpl.n	80038fe <__swbuf_r+0x82>
 80038a0:	6923      	ldr	r3, [r4, #16]
 80038a2:	b363      	cbz	r3, 80038fe <__swbuf_r+0x82>
 80038a4:	6923      	ldr	r3, [r4, #16]
 80038a6:	6820      	ldr	r0, [r4, #0]
 80038a8:	1ac0      	subs	r0, r0, r3
 80038aa:	6963      	ldr	r3, [r4, #20]
 80038ac:	b2f6      	uxtb	r6, r6
 80038ae:	4298      	cmp	r0, r3
 80038b0:	4637      	mov	r7, r6
 80038b2:	db04      	blt.n	80038be <__swbuf_r+0x42>
 80038b4:	4621      	mov	r1, r4
 80038b6:	4628      	mov	r0, r5
 80038b8:	f000 f928 	bl	8003b0c <_fflush_r>
 80038bc:	bb28      	cbnz	r0, 800390a <__swbuf_r+0x8e>
 80038be:	68a3      	ldr	r3, [r4, #8]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	60a3      	str	r3, [r4, #8]
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	6022      	str	r2, [r4, #0]
 80038ca:	701e      	strb	r6, [r3, #0]
 80038cc:	6963      	ldr	r3, [r4, #20]
 80038ce:	3001      	adds	r0, #1
 80038d0:	4298      	cmp	r0, r3
 80038d2:	d004      	beq.n	80038de <__swbuf_r+0x62>
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	07db      	lsls	r3, r3, #31
 80038d8:	d519      	bpl.n	800390e <__swbuf_r+0x92>
 80038da:	2e0a      	cmp	r6, #10
 80038dc:	d117      	bne.n	800390e <__swbuf_r+0x92>
 80038de:	4621      	mov	r1, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f913 	bl	8003b0c <_fflush_r>
 80038e6:	b190      	cbz	r0, 800390e <__swbuf_r+0x92>
 80038e8:	e00f      	b.n	800390a <__swbuf_r+0x8e>
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <__swbuf_r+0x9c>)
 80038ec:	429c      	cmp	r4, r3
 80038ee:	d101      	bne.n	80038f4 <__swbuf_r+0x78>
 80038f0:	68ac      	ldr	r4, [r5, #8]
 80038f2:	e7d0      	b.n	8003896 <__swbuf_r+0x1a>
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <__swbuf_r+0xa0>)
 80038f6:	429c      	cmp	r4, r3
 80038f8:	bf08      	it	eq
 80038fa:	68ec      	ldreq	r4, [r5, #12]
 80038fc:	e7cb      	b.n	8003896 <__swbuf_r+0x1a>
 80038fe:	4621      	mov	r1, r4
 8003900:	4628      	mov	r0, r5
 8003902:	f000 f80d 	bl	8003920 <__swsetup_r>
 8003906:	2800      	cmp	r0, #0
 8003908:	d0cc      	beq.n	80038a4 <__swbuf_r+0x28>
 800390a:	f04f 37ff 	mov.w	r7, #4294967295
 800390e:	4638      	mov	r0, r7
 8003910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003912:	bf00      	nop
 8003914:	0800414c 	.word	0x0800414c
 8003918:	0800416c 	.word	0x0800416c
 800391c:	0800412c 	.word	0x0800412c

08003920 <__swsetup_r>:
 8003920:	4b32      	ldr	r3, [pc, #200]	; (80039ec <__swsetup_r+0xcc>)
 8003922:	b570      	push	{r4, r5, r6, lr}
 8003924:	681d      	ldr	r5, [r3, #0]
 8003926:	4606      	mov	r6, r0
 8003928:	460c      	mov	r4, r1
 800392a:	b125      	cbz	r5, 8003936 <__swsetup_r+0x16>
 800392c:	69ab      	ldr	r3, [r5, #24]
 800392e:	b913      	cbnz	r3, 8003936 <__swsetup_r+0x16>
 8003930:	4628      	mov	r0, r5
 8003932:	f000 f955 	bl	8003be0 <__sinit>
 8003936:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <__swsetup_r+0xd0>)
 8003938:	429c      	cmp	r4, r3
 800393a:	d10f      	bne.n	800395c <__swsetup_r+0x3c>
 800393c:	686c      	ldr	r4, [r5, #4]
 800393e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003942:	b29a      	uxth	r2, r3
 8003944:	0715      	lsls	r5, r2, #28
 8003946:	d42c      	bmi.n	80039a2 <__swsetup_r+0x82>
 8003948:	06d0      	lsls	r0, r2, #27
 800394a:	d411      	bmi.n	8003970 <__swsetup_r+0x50>
 800394c:	2209      	movs	r2, #9
 800394e:	6032      	str	r2, [r6, #0]
 8003950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	f04f 30ff 	mov.w	r0, #4294967295
 800395a:	bd70      	pop	{r4, r5, r6, pc}
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <__swsetup_r+0xd4>)
 800395e:	429c      	cmp	r4, r3
 8003960:	d101      	bne.n	8003966 <__swsetup_r+0x46>
 8003962:	68ac      	ldr	r4, [r5, #8]
 8003964:	e7eb      	b.n	800393e <__swsetup_r+0x1e>
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <__swsetup_r+0xd8>)
 8003968:	429c      	cmp	r4, r3
 800396a:	bf08      	it	eq
 800396c:	68ec      	ldreq	r4, [r5, #12]
 800396e:	e7e6      	b.n	800393e <__swsetup_r+0x1e>
 8003970:	0751      	lsls	r1, r2, #29
 8003972:	d512      	bpl.n	800399a <__swsetup_r+0x7a>
 8003974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003976:	b141      	cbz	r1, 800398a <__swsetup_r+0x6a>
 8003978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800397c:	4299      	cmp	r1, r3
 800397e:	d002      	beq.n	8003986 <__swsetup_r+0x66>
 8003980:	4630      	mov	r0, r6
 8003982:	f000 fa2b 	bl	8003ddc <_free_r>
 8003986:	2300      	movs	r3, #0
 8003988:	6363      	str	r3, [r4, #52]	; 0x34
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003990:	81a3      	strh	r3, [r4, #12]
 8003992:	2300      	movs	r3, #0
 8003994:	6063      	str	r3, [r4, #4]
 8003996:	6923      	ldr	r3, [r4, #16]
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	89a3      	ldrh	r3, [r4, #12]
 800399c:	f043 0308 	orr.w	r3, r3, #8
 80039a0:	81a3      	strh	r3, [r4, #12]
 80039a2:	6923      	ldr	r3, [r4, #16]
 80039a4:	b94b      	cbnz	r3, 80039ba <__swsetup_r+0x9a>
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80039ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b0:	d003      	beq.n	80039ba <__swsetup_r+0x9a>
 80039b2:	4621      	mov	r1, r4
 80039b4:	4630      	mov	r0, r6
 80039b6:	f000 f9c1 	bl	8003d3c <__smakebuf_r>
 80039ba:	89a2      	ldrh	r2, [r4, #12]
 80039bc:	f012 0301 	ands.w	r3, r2, #1
 80039c0:	d00c      	beq.n	80039dc <__swsetup_r+0xbc>
 80039c2:	2300      	movs	r3, #0
 80039c4:	60a3      	str	r3, [r4, #8]
 80039c6:	6963      	ldr	r3, [r4, #20]
 80039c8:	425b      	negs	r3, r3
 80039ca:	61a3      	str	r3, [r4, #24]
 80039cc:	6923      	ldr	r3, [r4, #16]
 80039ce:	b953      	cbnz	r3, 80039e6 <__swsetup_r+0xc6>
 80039d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80039d8:	d1ba      	bne.n	8003950 <__swsetup_r+0x30>
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	0792      	lsls	r2, r2, #30
 80039de:	bf58      	it	pl
 80039e0:	6963      	ldrpl	r3, [r4, #20]
 80039e2:	60a3      	str	r3, [r4, #8]
 80039e4:	e7f2      	b.n	80039cc <__swsetup_r+0xac>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e7f7      	b.n	80039da <__swsetup_r+0xba>
 80039ea:	bf00      	nop
 80039ec:	2000000c 	.word	0x2000000c
 80039f0:	0800414c 	.word	0x0800414c
 80039f4:	0800416c 	.word	0x0800416c
 80039f8:	0800412c 	.word	0x0800412c

080039fc <__sflush_r>:
 80039fc:	898a      	ldrh	r2, [r1, #12]
 80039fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a02:	4605      	mov	r5, r0
 8003a04:	0710      	lsls	r0, r2, #28
 8003a06:	460c      	mov	r4, r1
 8003a08:	d45a      	bmi.n	8003ac0 <__sflush_r+0xc4>
 8003a0a:	684b      	ldr	r3, [r1, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	dc05      	bgt.n	8003a1c <__sflush_r+0x20>
 8003a10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	dc02      	bgt.n	8003a1c <__sflush_r+0x20>
 8003a16:	2000      	movs	r0, #0
 8003a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a1e:	2e00      	cmp	r6, #0
 8003a20:	d0f9      	beq.n	8003a16 <__sflush_r+0x1a>
 8003a22:	2300      	movs	r3, #0
 8003a24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a28:	682f      	ldr	r7, [r5, #0]
 8003a2a:	602b      	str	r3, [r5, #0]
 8003a2c:	d033      	beq.n	8003a96 <__sflush_r+0x9a>
 8003a2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	075a      	lsls	r2, r3, #29
 8003a34:	d505      	bpl.n	8003a42 <__sflush_r+0x46>
 8003a36:	6863      	ldr	r3, [r4, #4]
 8003a38:	1ac0      	subs	r0, r0, r3
 8003a3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a3c:	b10b      	cbz	r3, 8003a42 <__sflush_r+0x46>
 8003a3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a40:	1ac0      	subs	r0, r0, r3
 8003a42:	2300      	movs	r3, #0
 8003a44:	4602      	mov	r2, r0
 8003a46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a48:	6a21      	ldr	r1, [r4, #32]
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	47b0      	blx	r6
 8003a4e:	1c43      	adds	r3, r0, #1
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	d106      	bne.n	8003a62 <__sflush_r+0x66>
 8003a54:	6829      	ldr	r1, [r5, #0]
 8003a56:	291d      	cmp	r1, #29
 8003a58:	d84b      	bhi.n	8003af2 <__sflush_r+0xf6>
 8003a5a:	4a2b      	ldr	r2, [pc, #172]	; (8003b08 <__sflush_r+0x10c>)
 8003a5c:	40ca      	lsrs	r2, r1
 8003a5e:	07d6      	lsls	r6, r2, #31
 8003a60:	d547      	bpl.n	8003af2 <__sflush_r+0xf6>
 8003a62:	2200      	movs	r2, #0
 8003a64:	6062      	str	r2, [r4, #4]
 8003a66:	04d9      	lsls	r1, r3, #19
 8003a68:	6922      	ldr	r2, [r4, #16]
 8003a6a:	6022      	str	r2, [r4, #0]
 8003a6c:	d504      	bpl.n	8003a78 <__sflush_r+0x7c>
 8003a6e:	1c42      	adds	r2, r0, #1
 8003a70:	d101      	bne.n	8003a76 <__sflush_r+0x7a>
 8003a72:	682b      	ldr	r3, [r5, #0]
 8003a74:	b903      	cbnz	r3, 8003a78 <__sflush_r+0x7c>
 8003a76:	6560      	str	r0, [r4, #84]	; 0x54
 8003a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a7a:	602f      	str	r7, [r5, #0]
 8003a7c:	2900      	cmp	r1, #0
 8003a7e:	d0ca      	beq.n	8003a16 <__sflush_r+0x1a>
 8003a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a84:	4299      	cmp	r1, r3
 8003a86:	d002      	beq.n	8003a8e <__sflush_r+0x92>
 8003a88:	4628      	mov	r0, r5
 8003a8a:	f000 f9a7 	bl	8003ddc <_free_r>
 8003a8e:	2000      	movs	r0, #0
 8003a90:	6360      	str	r0, [r4, #52]	; 0x34
 8003a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a96:	6a21      	ldr	r1, [r4, #32]
 8003a98:	2301      	movs	r3, #1
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	47b0      	blx	r6
 8003a9e:	1c41      	adds	r1, r0, #1
 8003aa0:	d1c6      	bne.n	8003a30 <__sflush_r+0x34>
 8003aa2:	682b      	ldr	r3, [r5, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0c3      	beq.n	8003a30 <__sflush_r+0x34>
 8003aa8:	2b1d      	cmp	r3, #29
 8003aaa:	d001      	beq.n	8003ab0 <__sflush_r+0xb4>
 8003aac:	2b16      	cmp	r3, #22
 8003aae:	d101      	bne.n	8003ab4 <__sflush_r+0xb8>
 8003ab0:	602f      	str	r7, [r5, #0]
 8003ab2:	e7b0      	b.n	8003a16 <__sflush_r+0x1a>
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aba:	81a3      	strh	r3, [r4, #12]
 8003abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac0:	690f      	ldr	r7, [r1, #16]
 8003ac2:	2f00      	cmp	r7, #0
 8003ac4:	d0a7      	beq.n	8003a16 <__sflush_r+0x1a>
 8003ac6:	0793      	lsls	r3, r2, #30
 8003ac8:	680e      	ldr	r6, [r1, #0]
 8003aca:	bf08      	it	eq
 8003acc:	694b      	ldreq	r3, [r1, #20]
 8003ace:	600f      	str	r7, [r1, #0]
 8003ad0:	bf18      	it	ne
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	eba6 0807 	sub.w	r8, r6, r7
 8003ad8:	608b      	str	r3, [r1, #8]
 8003ada:	f1b8 0f00 	cmp.w	r8, #0
 8003ade:	dd9a      	ble.n	8003a16 <__sflush_r+0x1a>
 8003ae0:	4643      	mov	r3, r8
 8003ae2:	463a      	mov	r2, r7
 8003ae4:	6a21      	ldr	r1, [r4, #32]
 8003ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ae8:	4628      	mov	r0, r5
 8003aea:	47b0      	blx	r6
 8003aec:	2800      	cmp	r0, #0
 8003aee:	dc07      	bgt.n	8003b00 <__sflush_r+0x104>
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af6:	81a3      	strh	r3, [r4, #12]
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295
 8003afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b00:	4407      	add	r7, r0
 8003b02:	eba8 0800 	sub.w	r8, r8, r0
 8003b06:	e7e8      	b.n	8003ada <__sflush_r+0xde>
 8003b08:	20400001 	.word	0x20400001

08003b0c <_fflush_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	690b      	ldr	r3, [r1, #16]
 8003b10:	4605      	mov	r5, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	b1db      	cbz	r3, 8003b4e <_fflush_r+0x42>
 8003b16:	b118      	cbz	r0, 8003b20 <_fflush_r+0x14>
 8003b18:	6983      	ldr	r3, [r0, #24]
 8003b1a:	b90b      	cbnz	r3, 8003b20 <_fflush_r+0x14>
 8003b1c:	f000 f860 	bl	8003be0 <__sinit>
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <_fflush_r+0x48>)
 8003b22:	429c      	cmp	r4, r3
 8003b24:	d109      	bne.n	8003b3a <_fflush_r+0x2e>
 8003b26:	686c      	ldr	r4, [r5, #4]
 8003b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b2c:	b17b      	cbz	r3, 8003b4e <_fflush_r+0x42>
 8003b2e:	4621      	mov	r1, r4
 8003b30:	4628      	mov	r0, r5
 8003b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b36:	f7ff bf61 	b.w	80039fc <__sflush_r>
 8003b3a:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <_fflush_r+0x4c>)
 8003b3c:	429c      	cmp	r4, r3
 8003b3e:	d101      	bne.n	8003b44 <_fflush_r+0x38>
 8003b40:	68ac      	ldr	r4, [r5, #8]
 8003b42:	e7f1      	b.n	8003b28 <_fflush_r+0x1c>
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <_fflush_r+0x50>)
 8003b46:	429c      	cmp	r4, r3
 8003b48:	bf08      	it	eq
 8003b4a:	68ec      	ldreq	r4, [r5, #12]
 8003b4c:	e7ec      	b.n	8003b28 <_fflush_r+0x1c>
 8003b4e:	2000      	movs	r0, #0
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
 8003b52:	bf00      	nop
 8003b54:	0800414c 	.word	0x0800414c
 8003b58:	0800416c 	.word	0x0800416c
 8003b5c:	0800412c 	.word	0x0800412c

08003b60 <_cleanup_r>:
 8003b60:	4901      	ldr	r1, [pc, #4]	; (8003b68 <_cleanup_r+0x8>)
 8003b62:	f000 b8a9 	b.w	8003cb8 <_fwalk_reent>
 8003b66:	bf00      	nop
 8003b68:	08003b0d 	.word	0x08003b0d

08003b6c <std.isra.0>:
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	b510      	push	{r4, lr}
 8003b70:	4604      	mov	r4, r0
 8003b72:	6003      	str	r3, [r0, #0]
 8003b74:	6043      	str	r3, [r0, #4]
 8003b76:	6083      	str	r3, [r0, #8]
 8003b78:	8181      	strh	r1, [r0, #12]
 8003b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8003b7c:	81c2      	strh	r2, [r0, #14]
 8003b7e:	6103      	str	r3, [r0, #16]
 8003b80:	6143      	str	r3, [r0, #20]
 8003b82:	6183      	str	r3, [r0, #24]
 8003b84:	4619      	mov	r1, r3
 8003b86:	2208      	movs	r2, #8
 8003b88:	305c      	adds	r0, #92	; 0x5c
 8003b8a:	f000 f91f 	bl	8003dcc <memset>
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <std.isra.0+0x38>)
 8003b90:	6263      	str	r3, [r4, #36]	; 0x24
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <std.isra.0+0x3c>)
 8003b94:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <std.isra.0+0x40>)
 8003b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <std.isra.0+0x44>)
 8003b9c:	6224      	str	r4, [r4, #32]
 8003b9e:	6323      	str	r3, [r4, #48]	; 0x30
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	bf00      	nop
 8003ba4:	08003f55 	.word	0x08003f55
 8003ba8:	08003f77 	.word	0x08003f77
 8003bac:	08003faf 	.word	0x08003faf
 8003bb0:	08003fd3 	.word	0x08003fd3

08003bb4 <__sfmoreglue>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	1e4a      	subs	r2, r1, #1
 8003bb8:	2568      	movs	r5, #104	; 0x68
 8003bba:	4355      	muls	r5, r2
 8003bbc:	460e      	mov	r6, r1
 8003bbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003bc2:	f000 f959 	bl	8003e78 <_malloc_r>
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	b140      	cbz	r0, 8003bdc <__sfmoreglue+0x28>
 8003bca:	2100      	movs	r1, #0
 8003bcc:	e880 0042 	stmia.w	r0, {r1, r6}
 8003bd0:	300c      	adds	r0, #12
 8003bd2:	60a0      	str	r0, [r4, #8]
 8003bd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003bd8:	f000 f8f8 	bl	8003dcc <memset>
 8003bdc:	4620      	mov	r0, r4
 8003bde:	bd70      	pop	{r4, r5, r6, pc}

08003be0 <__sinit>:
 8003be0:	6983      	ldr	r3, [r0, #24]
 8003be2:	b510      	push	{r4, lr}
 8003be4:	4604      	mov	r4, r0
 8003be6:	bb33      	cbnz	r3, 8003c36 <__sinit+0x56>
 8003be8:	6483      	str	r3, [r0, #72]	; 0x48
 8003bea:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003bec:	6503      	str	r3, [r0, #80]	; 0x50
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <__sinit+0x58>)
 8003bf0:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <__sinit+0x5c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6282      	str	r2, [r0, #40]	; 0x28
 8003bf6:	4298      	cmp	r0, r3
 8003bf8:	bf04      	itt	eq
 8003bfa:	2301      	moveq	r3, #1
 8003bfc:	6183      	streq	r3, [r0, #24]
 8003bfe:	f000 f81f 	bl	8003c40 <__sfp>
 8003c02:	6060      	str	r0, [r4, #4]
 8003c04:	4620      	mov	r0, r4
 8003c06:	f000 f81b 	bl	8003c40 <__sfp>
 8003c0a:	60a0      	str	r0, [r4, #8]
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f000 f817 	bl	8003c40 <__sfp>
 8003c12:	2200      	movs	r2, #0
 8003c14:	60e0      	str	r0, [r4, #12]
 8003c16:	2104      	movs	r1, #4
 8003c18:	6860      	ldr	r0, [r4, #4]
 8003c1a:	f7ff ffa7 	bl	8003b6c <std.isra.0>
 8003c1e:	2201      	movs	r2, #1
 8003c20:	2109      	movs	r1, #9
 8003c22:	68a0      	ldr	r0, [r4, #8]
 8003c24:	f7ff ffa2 	bl	8003b6c <std.isra.0>
 8003c28:	2202      	movs	r2, #2
 8003c2a:	2112      	movs	r1, #18
 8003c2c:	68e0      	ldr	r0, [r4, #12]
 8003c2e:	f7ff ff9d 	bl	8003b6c <std.isra.0>
 8003c32:	2301      	movs	r3, #1
 8003c34:	61a3      	str	r3, [r4, #24]
 8003c36:	bd10      	pop	{r4, pc}
 8003c38:	08004128 	.word	0x08004128
 8003c3c:	08003b61 	.word	0x08003b61

08003c40 <__sfp>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <__sfp+0x74>)
 8003c44:	681e      	ldr	r6, [r3, #0]
 8003c46:	69b3      	ldr	r3, [r6, #24]
 8003c48:	4607      	mov	r7, r0
 8003c4a:	b913      	cbnz	r3, 8003c52 <__sfp+0x12>
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f7ff ffc7 	bl	8003be0 <__sinit>
 8003c52:	3648      	adds	r6, #72	; 0x48
 8003c54:	68b4      	ldr	r4, [r6, #8]
 8003c56:	6873      	ldr	r3, [r6, #4]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	d503      	bpl.n	8003c64 <__sfp+0x24>
 8003c5c:	6833      	ldr	r3, [r6, #0]
 8003c5e:	b133      	cbz	r3, 8003c6e <__sfp+0x2e>
 8003c60:	6836      	ldr	r6, [r6, #0]
 8003c62:	e7f7      	b.n	8003c54 <__sfp+0x14>
 8003c64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c68:	b16d      	cbz	r5, 8003c86 <__sfp+0x46>
 8003c6a:	3468      	adds	r4, #104	; 0x68
 8003c6c:	e7f4      	b.n	8003c58 <__sfp+0x18>
 8003c6e:	2104      	movs	r1, #4
 8003c70:	4638      	mov	r0, r7
 8003c72:	f7ff ff9f 	bl	8003bb4 <__sfmoreglue>
 8003c76:	6030      	str	r0, [r6, #0]
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d1f1      	bne.n	8003c60 <__sfp+0x20>
 8003c7c:	230c      	movs	r3, #12
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4604      	mov	r4, r0
 8003c82:	4620      	mov	r0, r4
 8003c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c8a:	81e3      	strh	r3, [r4, #14]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	6665      	str	r5, [r4, #100]	; 0x64
 8003c92:	6025      	str	r5, [r4, #0]
 8003c94:	60a5      	str	r5, [r4, #8]
 8003c96:	6065      	str	r5, [r4, #4]
 8003c98:	6125      	str	r5, [r4, #16]
 8003c9a:	6165      	str	r5, [r4, #20]
 8003c9c:	61a5      	str	r5, [r4, #24]
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ca6:	f000 f891 	bl	8003dcc <memset>
 8003caa:	6365      	str	r5, [r4, #52]	; 0x34
 8003cac:	63a5      	str	r5, [r4, #56]	; 0x38
 8003cae:	64a5      	str	r5, [r4, #72]	; 0x48
 8003cb0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003cb2:	e7e6      	b.n	8003c82 <__sfp+0x42>
 8003cb4:	08004128 	.word	0x08004128

08003cb8 <_fwalk_reent>:
 8003cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cbc:	4680      	mov	r8, r0
 8003cbe:	4689      	mov	r9, r1
 8003cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003cc4:	2600      	movs	r6, #0
 8003cc6:	b914      	cbnz	r4, 8003cce <_fwalk_reent+0x16>
 8003cc8:	4630      	mov	r0, r6
 8003cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cce:	68a5      	ldr	r5, [r4, #8]
 8003cd0:	6867      	ldr	r7, [r4, #4]
 8003cd2:	3f01      	subs	r7, #1
 8003cd4:	d501      	bpl.n	8003cda <_fwalk_reent+0x22>
 8003cd6:	6824      	ldr	r4, [r4, #0]
 8003cd8:	e7f5      	b.n	8003cc6 <_fwalk_reent+0xe>
 8003cda:	89ab      	ldrh	r3, [r5, #12]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d907      	bls.n	8003cf0 <_fwalk_reent+0x38>
 8003ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	d003      	beq.n	8003cf0 <_fwalk_reent+0x38>
 8003ce8:	4629      	mov	r1, r5
 8003cea:	4640      	mov	r0, r8
 8003cec:	47c8      	blx	r9
 8003cee:	4306      	orrs	r6, r0
 8003cf0:	3568      	adds	r5, #104	; 0x68
 8003cf2:	e7ee      	b.n	8003cd2 <_fwalk_reent+0x1a>

08003cf4 <__swhatbuf_r>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	460e      	mov	r6, r1
 8003cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfc:	2900      	cmp	r1, #0
 8003cfe:	b090      	sub	sp, #64	; 0x40
 8003d00:	4614      	mov	r4, r2
 8003d02:	461d      	mov	r5, r3
 8003d04:	da07      	bge.n	8003d16 <__swhatbuf_r+0x22>
 8003d06:	2300      	movs	r3, #0
 8003d08:	602b      	str	r3, [r5, #0]
 8003d0a:	89b3      	ldrh	r3, [r6, #12]
 8003d0c:	061a      	lsls	r2, r3, #24
 8003d0e:	d410      	bmi.n	8003d32 <__swhatbuf_r+0x3e>
 8003d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d14:	e00e      	b.n	8003d34 <__swhatbuf_r+0x40>
 8003d16:	aa01      	add	r2, sp, #4
 8003d18:	f000 f982 	bl	8004020 <_fstat_r>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	dbf2      	blt.n	8003d06 <__swhatbuf_r+0x12>
 8003d20:	9a02      	ldr	r2, [sp, #8]
 8003d22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d2a:	425a      	negs	r2, r3
 8003d2c:	415a      	adcs	r2, r3
 8003d2e:	602a      	str	r2, [r5, #0]
 8003d30:	e7ee      	b.n	8003d10 <__swhatbuf_r+0x1c>
 8003d32:	2340      	movs	r3, #64	; 0x40
 8003d34:	2000      	movs	r0, #0
 8003d36:	6023      	str	r3, [r4, #0]
 8003d38:	b010      	add	sp, #64	; 0x40
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}

08003d3c <__smakebuf_r>:
 8003d3c:	898b      	ldrh	r3, [r1, #12]
 8003d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d40:	079d      	lsls	r5, r3, #30
 8003d42:	4606      	mov	r6, r0
 8003d44:	460c      	mov	r4, r1
 8003d46:	d507      	bpl.n	8003d58 <__smakebuf_r+0x1c>
 8003d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	6123      	str	r3, [r4, #16]
 8003d50:	2301      	movs	r3, #1
 8003d52:	6163      	str	r3, [r4, #20]
 8003d54:	b002      	add	sp, #8
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	ab01      	add	r3, sp, #4
 8003d5a:	466a      	mov	r2, sp
 8003d5c:	f7ff ffca 	bl	8003cf4 <__swhatbuf_r>
 8003d60:	9900      	ldr	r1, [sp, #0]
 8003d62:	4605      	mov	r5, r0
 8003d64:	4630      	mov	r0, r6
 8003d66:	f000 f887 	bl	8003e78 <_malloc_r>
 8003d6a:	b948      	cbnz	r0, 8003d80 <__smakebuf_r+0x44>
 8003d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d70:	059a      	lsls	r2, r3, #22
 8003d72:	d4ef      	bmi.n	8003d54 <__smakebuf_r+0x18>
 8003d74:	f023 0303 	bic.w	r3, r3, #3
 8003d78:	f043 0302 	orr.w	r3, r3, #2
 8003d7c:	81a3      	strh	r3, [r4, #12]
 8003d7e:	e7e3      	b.n	8003d48 <__smakebuf_r+0xc>
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <__smakebuf_r+0x7c>)
 8003d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	6020      	str	r0, [r4, #0]
 8003d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8c:	81a3      	strh	r3, [r4, #12]
 8003d8e:	9b00      	ldr	r3, [sp, #0]
 8003d90:	6163      	str	r3, [r4, #20]
 8003d92:	9b01      	ldr	r3, [sp, #4]
 8003d94:	6120      	str	r0, [r4, #16]
 8003d96:	b15b      	cbz	r3, 8003db0 <__smakebuf_r+0x74>
 8003d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 f951 	bl	8004044 <_isatty_r>
 8003da2:	b128      	cbz	r0, 8003db0 <__smakebuf_r+0x74>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	431d      	orrs	r5, r3
 8003db4:	81a5      	strh	r5, [r4, #12]
 8003db6:	e7cd      	b.n	8003d54 <__smakebuf_r+0x18>
 8003db8:	08003b61 	.word	0x08003b61

08003dbc <malloc>:
 8003dbc:	4b02      	ldr	r3, [pc, #8]	; (8003dc8 <malloc+0xc>)
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	f000 b859 	b.w	8003e78 <_malloc_r>
 8003dc6:	bf00      	nop
 8003dc8:	2000000c 	.word	0x2000000c

08003dcc <memset>:
 8003dcc:	4402      	add	r2, r0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d100      	bne.n	8003dd6 <memset+0xa>
 8003dd4:	4770      	bx	lr
 8003dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dda:	e7f9      	b.n	8003dd0 <memset+0x4>

08003ddc <_free_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4605      	mov	r5, r0
 8003de0:	2900      	cmp	r1, #0
 8003de2:	d045      	beq.n	8003e70 <_free_r+0x94>
 8003de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003de8:	1f0c      	subs	r4, r1, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfb8      	it	lt
 8003dee:	18e4      	addlt	r4, r4, r3
 8003df0:	f000 f94a 	bl	8004088 <__malloc_lock>
 8003df4:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <_free_r+0x98>)
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	4610      	mov	r0, r2
 8003dfa:	b933      	cbnz	r3, 8003e0a <_free_r+0x2e>
 8003dfc:	6063      	str	r3, [r4, #4]
 8003dfe:	6014      	str	r4, [r2, #0]
 8003e00:	4628      	mov	r0, r5
 8003e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e06:	f000 b940 	b.w	800408a <__malloc_unlock>
 8003e0a:	42a3      	cmp	r3, r4
 8003e0c:	d90c      	bls.n	8003e28 <_free_r+0x4c>
 8003e0e:	6821      	ldr	r1, [r4, #0]
 8003e10:	1862      	adds	r2, r4, r1
 8003e12:	4293      	cmp	r3, r2
 8003e14:	bf04      	itt	eq
 8003e16:	681a      	ldreq	r2, [r3, #0]
 8003e18:	685b      	ldreq	r3, [r3, #4]
 8003e1a:	6063      	str	r3, [r4, #4]
 8003e1c:	bf04      	itt	eq
 8003e1e:	1852      	addeq	r2, r2, r1
 8003e20:	6022      	streq	r2, [r4, #0]
 8003e22:	6004      	str	r4, [r0, #0]
 8003e24:	e7ec      	b.n	8003e00 <_free_r+0x24>
 8003e26:	4613      	mov	r3, r2
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	b10a      	cbz	r2, 8003e30 <_free_r+0x54>
 8003e2c:	42a2      	cmp	r2, r4
 8003e2e:	d9fa      	bls.n	8003e26 <_free_r+0x4a>
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	1858      	adds	r0, r3, r1
 8003e34:	42a0      	cmp	r0, r4
 8003e36:	d10b      	bne.n	8003e50 <_free_r+0x74>
 8003e38:	6820      	ldr	r0, [r4, #0]
 8003e3a:	4401      	add	r1, r0
 8003e3c:	1858      	adds	r0, r3, r1
 8003e3e:	4282      	cmp	r2, r0
 8003e40:	6019      	str	r1, [r3, #0]
 8003e42:	d1dd      	bne.n	8003e00 <_free_r+0x24>
 8003e44:	6810      	ldr	r0, [r2, #0]
 8003e46:	6852      	ldr	r2, [r2, #4]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	4401      	add	r1, r0
 8003e4c:	6019      	str	r1, [r3, #0]
 8003e4e:	e7d7      	b.n	8003e00 <_free_r+0x24>
 8003e50:	d902      	bls.n	8003e58 <_free_r+0x7c>
 8003e52:	230c      	movs	r3, #12
 8003e54:	602b      	str	r3, [r5, #0]
 8003e56:	e7d3      	b.n	8003e00 <_free_r+0x24>
 8003e58:	6820      	ldr	r0, [r4, #0]
 8003e5a:	1821      	adds	r1, r4, r0
 8003e5c:	428a      	cmp	r2, r1
 8003e5e:	bf04      	itt	eq
 8003e60:	6811      	ldreq	r1, [r2, #0]
 8003e62:	6852      	ldreq	r2, [r2, #4]
 8003e64:	6062      	str	r2, [r4, #4]
 8003e66:	bf04      	itt	eq
 8003e68:	1809      	addeq	r1, r1, r0
 8003e6a:	6021      	streq	r1, [r4, #0]
 8003e6c:	605c      	str	r4, [r3, #4]
 8003e6e:	e7c7      	b.n	8003e00 <_free_r+0x24>
 8003e70:	bd38      	pop	{r3, r4, r5, pc}
 8003e72:	bf00      	nop
 8003e74:	20000090 	.word	0x20000090

08003e78 <_malloc_r>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	1ccd      	adds	r5, r1, #3
 8003e7c:	f025 0503 	bic.w	r5, r5, #3
 8003e80:	3508      	adds	r5, #8
 8003e82:	2d0c      	cmp	r5, #12
 8003e84:	bf38      	it	cc
 8003e86:	250c      	movcc	r5, #12
 8003e88:	2d00      	cmp	r5, #0
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	db01      	blt.n	8003e92 <_malloc_r+0x1a>
 8003e8e:	42a9      	cmp	r1, r5
 8003e90:	d903      	bls.n	8003e9a <_malloc_r+0x22>
 8003e92:	230c      	movs	r3, #12
 8003e94:	6033      	str	r3, [r6, #0]
 8003e96:	2000      	movs	r0, #0
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
 8003e9a:	f000 f8f5 	bl	8004088 <__malloc_lock>
 8003e9e:	4a23      	ldr	r2, [pc, #140]	; (8003f2c <_malloc_r+0xb4>)
 8003ea0:	6814      	ldr	r4, [r2, #0]
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	b991      	cbnz	r1, 8003ecc <_malloc_r+0x54>
 8003ea6:	4c22      	ldr	r4, [pc, #136]	; (8003f30 <_malloc_r+0xb8>)
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	b91b      	cbnz	r3, 8003eb4 <_malloc_r+0x3c>
 8003eac:	4630      	mov	r0, r6
 8003eae:	f000 f841 	bl	8003f34 <_sbrk_r>
 8003eb2:	6020      	str	r0, [r4, #0]
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	f000 f83c 	bl	8003f34 <_sbrk_r>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d126      	bne.n	8003f0e <_malloc_r+0x96>
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	6033      	str	r3, [r6, #0]
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	f000 f8e0 	bl	800408a <__malloc_unlock>
 8003eca:	e7e4      	b.n	8003e96 <_malloc_r+0x1e>
 8003ecc:	680b      	ldr	r3, [r1, #0]
 8003ece:	1b5b      	subs	r3, r3, r5
 8003ed0:	d41a      	bmi.n	8003f08 <_malloc_r+0x90>
 8003ed2:	2b0b      	cmp	r3, #11
 8003ed4:	d90f      	bls.n	8003ef6 <_malloc_r+0x7e>
 8003ed6:	600b      	str	r3, [r1, #0]
 8003ed8:	50cd      	str	r5, [r1, r3]
 8003eda:	18cc      	adds	r4, r1, r3
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f8d4 	bl	800408a <__malloc_unlock>
 8003ee2:	f104 000b 	add.w	r0, r4, #11
 8003ee6:	1d23      	adds	r3, r4, #4
 8003ee8:	f020 0007 	bic.w	r0, r0, #7
 8003eec:	1ac3      	subs	r3, r0, r3
 8003eee:	d01b      	beq.n	8003f28 <_malloc_r+0xb0>
 8003ef0:	425a      	negs	r2, r3
 8003ef2:	50e2      	str	r2, [r4, r3]
 8003ef4:	bd70      	pop	{r4, r5, r6, pc}
 8003ef6:	428c      	cmp	r4, r1
 8003ef8:	bf0d      	iteet	eq
 8003efa:	6863      	ldreq	r3, [r4, #4]
 8003efc:	684b      	ldrne	r3, [r1, #4]
 8003efe:	6063      	strne	r3, [r4, #4]
 8003f00:	6013      	streq	r3, [r2, #0]
 8003f02:	bf18      	it	ne
 8003f04:	460c      	movne	r4, r1
 8003f06:	e7e9      	b.n	8003edc <_malloc_r+0x64>
 8003f08:	460c      	mov	r4, r1
 8003f0a:	6849      	ldr	r1, [r1, #4]
 8003f0c:	e7ca      	b.n	8003ea4 <_malloc_r+0x2c>
 8003f0e:	1cc4      	adds	r4, r0, #3
 8003f10:	f024 0403 	bic.w	r4, r4, #3
 8003f14:	42a0      	cmp	r0, r4
 8003f16:	d005      	beq.n	8003f24 <_malloc_r+0xac>
 8003f18:	1a21      	subs	r1, r4, r0
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f000 f80a 	bl	8003f34 <_sbrk_r>
 8003f20:	3001      	adds	r0, #1
 8003f22:	d0cd      	beq.n	8003ec0 <_malloc_r+0x48>
 8003f24:	6025      	str	r5, [r4, #0]
 8003f26:	e7d9      	b.n	8003edc <_malloc_r+0x64>
 8003f28:	bd70      	pop	{r4, r5, r6, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000090 	.word	0x20000090
 8003f30:	20000094 	.word	0x20000094

08003f34 <_sbrk_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4c06      	ldr	r4, [pc, #24]	; (8003f50 <_sbrk_r+0x1c>)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	6023      	str	r3, [r4, #0]
 8003f40:	f7ff fa8a 	bl	8003458 <_sbrk>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d102      	bne.n	8003f4e <_sbrk_r+0x1a>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	b103      	cbz	r3, 8003f4e <_sbrk_r+0x1a>
 8003f4c:	602b      	str	r3, [r5, #0]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	20000190 	.word	0x20000190

08003f54 <__sread>:
 8003f54:	b510      	push	{r4, lr}
 8003f56:	460c      	mov	r4, r1
 8003f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5c:	f000 f896 	bl	800408c <_read_r>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	bfab      	itete	ge
 8003f64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f66:	89a3      	ldrhlt	r3, [r4, #12]
 8003f68:	181b      	addge	r3, r3, r0
 8003f6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f6e:	bfac      	ite	ge
 8003f70:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f72:	81a3      	strhlt	r3, [r4, #12]
 8003f74:	bd10      	pop	{r4, pc}

08003f76 <__swrite>:
 8003f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7a:	461f      	mov	r7, r3
 8003f7c:	898b      	ldrh	r3, [r1, #12]
 8003f7e:	05db      	lsls	r3, r3, #23
 8003f80:	4605      	mov	r5, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	4616      	mov	r6, r2
 8003f86:	d505      	bpl.n	8003f94 <__swrite+0x1e>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f90:	f000 f868 	bl	8004064 <_lseek_r>
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	4632      	mov	r2, r6
 8003fa2:	463b      	mov	r3, r7
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003faa:	f000 b817 	b.w	8003fdc <_write_r>

08003fae <__sseek>:
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb6:	f000 f855 	bl	8004064 <_lseek_r>
 8003fba:	1c43      	adds	r3, r0, #1
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	bf15      	itete	ne
 8003fc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fca:	81a3      	strheq	r3, [r4, #12]
 8003fcc:	bf18      	it	ne
 8003fce:	81a3      	strhne	r3, [r4, #12]
 8003fd0:	bd10      	pop	{r4, pc}

08003fd2 <__sclose>:
 8003fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd6:	f000 b813 	b.w	8004000 <_close_r>
	...

08003fdc <_write_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	4c07      	ldr	r4, [pc, #28]	; (8003ffc <_write_r+0x20>)
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	4608      	mov	r0, r1
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	6022      	str	r2, [r4, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f7ff fa1e 	bl	800342c <_write>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <_write_r+0x1e>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	b103      	cbz	r3, 8003ffa <_write_r+0x1e>
 8003ff8:	602b      	str	r3, [r5, #0]
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
 8003ffc:	20000190 	.word	0x20000190

08004000 <_close_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4c06      	ldr	r4, [pc, #24]	; (800401c <_close_r+0x1c>)
 8004004:	2300      	movs	r3, #0
 8004006:	4605      	mov	r5, r0
 8004008:	4608      	mov	r0, r1
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	f7ff fa44 	bl	8003498 <_close>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_close_r+0x1a>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	b103      	cbz	r3, 800401a <_close_r+0x1a>
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	20000190 	.word	0x20000190

08004020 <_fstat_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4c07      	ldr	r4, [pc, #28]	; (8004040 <_fstat_r+0x20>)
 8004024:	2300      	movs	r3, #0
 8004026:	4605      	mov	r5, r0
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	f7ff fa45 	bl	80034bc <_fstat>
 8004032:	1c43      	adds	r3, r0, #1
 8004034:	d102      	bne.n	800403c <_fstat_r+0x1c>
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	b103      	cbz	r3, 800403c <_fstat_r+0x1c>
 800403a:	602b      	str	r3, [r5, #0]
 800403c:	bd38      	pop	{r3, r4, r5, pc}
 800403e:	bf00      	nop
 8004040:	20000190 	.word	0x20000190

08004044 <_isatty_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4c06      	ldr	r4, [pc, #24]	; (8004060 <_isatty_r+0x1c>)
 8004048:	2300      	movs	r3, #0
 800404a:	4605      	mov	r5, r0
 800404c:	4608      	mov	r0, r1
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	f7ff fa46 	bl	80034e0 <_isatty>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d102      	bne.n	800405e <_isatty_r+0x1a>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	b103      	cbz	r3, 800405e <_isatty_r+0x1a>
 800405c:	602b      	str	r3, [r5, #0]
 800405e:	bd38      	pop	{r3, r4, r5, pc}
 8004060:	20000190 	.word	0x20000190

08004064 <_lseek_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4c07      	ldr	r4, [pc, #28]	; (8004084 <_lseek_r+0x20>)
 8004068:	4605      	mov	r5, r0
 800406a:	4608      	mov	r0, r1
 800406c:	4611      	mov	r1, r2
 800406e:	2200      	movs	r2, #0
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	f7ff fa44 	bl	8003500 <_lseek>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_lseek_r+0x1e>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	b103      	cbz	r3, 8004082 <_lseek_r+0x1e>
 8004080:	602b      	str	r3, [r5, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	20000190 	.word	0x20000190

08004088 <__malloc_lock>:
 8004088:	4770      	bx	lr

0800408a <__malloc_unlock>:
 800408a:	4770      	bx	lr

0800408c <_read_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4c07      	ldr	r4, [pc, #28]	; (80040ac <_read_r+0x20>)
 8004090:	4605      	mov	r5, r0
 8004092:	4608      	mov	r0, r1
 8004094:	4611      	mov	r1, r2
 8004096:	2200      	movs	r2, #0
 8004098:	6022      	str	r2, [r4, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	f7ff fa44 	bl	8003528 <_read>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_read_r+0x1e>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_read_r+0x1e>
 80040a8:	602b      	str	r3, [r5, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	20000190 	.word	0x20000190

080040b0 <_init>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr

080040bc <_fini>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	bf00      	nop
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr
