
accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b28  08007980  08007980  00017980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080084a8  080084a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080084b0  080084b0  000184b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080084b4  080084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  080084b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
  8 .bss          000017f0  200001e0  200001e0  000201e0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200019d0  200019d0  000201e0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00040745  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005cb1  00000000  00000000  00060955  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000fd8e  00000000  00000000  00066606  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d0  00000000  00000000  00076398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001988  00000000  00000000  00077868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000babf  00000000  00000000  000791f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a7e0  00000000  00000000  00084caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000ea  00000000  00000000  0008f48f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004a78  00000000  00000000  0008f57c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007968 	.word	0x08007968

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08007968 	.word	0x08007968

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2f>:
 8000bc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc8:	bf24      	itt	cs
 8000bca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bd2:	d90d      	bls.n	8000bf0 <__aeabi_d2f+0x30>
 8000bd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be8:	bf08      	it	eq
 8000bea:	f020 0001 	biceq.w	r0, r0, #1
 8000bee:	4770      	bx	lr
 8000bf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf4:	d121      	bne.n	8000c3a <__aeabi_d2f+0x7a>
 8000bf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bfa:	bfbc      	itt	lt
 8000bfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	4770      	bxlt	lr
 8000c02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c0a:	f1c2 0218 	rsb	r2, r2, #24
 8000c0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c16:	fa20 f002 	lsr.w	r0, r0, r2
 8000c1a:	bf18      	it	ne
 8000c1c:	f040 0001 	orrne.w	r0, r0, #1
 8000c20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c2c:	ea40 000c 	orr.w	r0, r0, ip
 8000c30:	fa23 f302 	lsr.w	r3, r3, r2
 8000c34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c38:	e7cc      	b.n	8000bd4 <__aeabi_d2f+0x14>
 8000c3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3e:	d107      	bne.n	8000c50 <__aeabi_d2f+0x90>
 8000c40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c44:	bf1e      	ittt	ne
 8000c46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4e:	4770      	bxne	lr
 8000c50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <__aeabi_uldivmod>:
 8000c60:	b953      	cbnz	r3, 8000c78 <__aeabi_uldivmod+0x18>
 8000c62:	b94a      	cbnz	r2, 8000c78 <__aeabi_uldivmod+0x18>
 8000c64:	2900      	cmp	r1, #0
 8000c66:	bf08      	it	eq
 8000c68:	2800      	cmpeq	r0, #0
 8000c6a:	bf1c      	itt	ne
 8000c6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c70:	f04f 30ff 	movne.w	r0, #4294967295
 8000c74:	f000 b97a 	b.w	8000f6c <__aeabi_idiv0>
 8000c78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c80:	f000 f806 	bl	8000c90 <__udivmoddi4>
 8000c84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8c:	b004      	add	sp, #16
 8000c8e:	4770      	bx	lr

08000c90 <__udivmoddi4>:
 8000c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c94:	468c      	mov	ip, r1
 8000c96:	460d      	mov	r5, r1
 8000c98:	4604      	mov	r4, r0
 8000c9a:	9e08      	ldr	r6, [sp, #32]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d151      	bne.n	8000d44 <__udivmoddi4+0xb4>
 8000ca0:	428a      	cmp	r2, r1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	d96d      	bls.n	8000d82 <__udivmoddi4+0xf2>
 8000ca6:	fab2 fe82 	clz	lr, r2
 8000caa:	f1be 0f00 	cmp.w	lr, #0
 8000cae:	d00b      	beq.n	8000cc8 <__udivmoddi4+0x38>
 8000cb0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cb4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cb8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cbc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cc0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cc4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cc8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ccc:	0c25      	lsrs	r5, r4, #16
 8000cce:	fbbc f8fa 	udiv	r8, ip, sl
 8000cd2:	fa1f f987 	uxth.w	r9, r7
 8000cd6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cda:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cde:	fb08 f309 	mul.w	r3, r8, r9
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x6c>
 8000ce6:	19ed      	adds	r5, r5, r7
 8000ce8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000cec:	f080 8123 	bcs.w	8000f36 <__udivmoddi4+0x2a6>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	f240 8120 	bls.w	8000f36 <__udivmoddi4+0x2a6>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	443d      	add	r5, r7
 8000cfc:	1aed      	subs	r5, r5, r3
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d04:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d0c:	fb00 f909 	mul.w	r9, r0, r9
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x98>
 8000d14:	19e4      	adds	r4, r4, r7
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 810a 	bcs.w	8000f32 <__udivmoddi4+0x2a2>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f240 8107 	bls.w	8000f32 <__udivmoddi4+0x2a2>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 0409 	sub.w	r4, r4, r9
 8000d2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d30:	2100      	movs	r1, #0
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d061      	beq.n	8000dfa <__udivmoddi4+0x16a>
 8000d36:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6034      	str	r4, [r6, #0]
 8000d3e:	6073      	str	r3, [r6, #4]
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0xc8>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d054      	beq.n	8000df6 <__udivmoddi4+0x166>
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d52:	4608      	mov	r0, r1
 8000d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d58:	fab3 f183 	clz	r1, r3
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	f040 808e 	bne.w	8000e7e <__udivmoddi4+0x1ee>
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xdc>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80fa 	bhi.w	8000f60 <__udivmoddi4+0x2d0>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	46ac      	mov	ip, r5
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d03f      	beq.n	8000dfa <__udivmoddi4+0x16a>
 8000d7a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	b912      	cbnz	r2, 8000d8a <__udivmoddi4+0xfa>
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d8a:	fab7 fe87 	clz	lr, r7
 8000d8e:	f1be 0f00 	cmp.w	lr, #0
 8000d92:	d134      	bne.n	8000dfe <__udivmoddi4+0x16e>
 8000d94:	1beb      	subs	r3, r5, r7
 8000d96:	0c3a      	lsrs	r2, r7, #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000da2:	0c25      	lsrs	r5, r4, #16
 8000da4:	fb02 3318 	mls	r3, r2, r8, r3
 8000da8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dac:	fb0c f308 	mul.w	r3, ip, r8
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x134>
 8000db4:	19ed      	adds	r5, r5, r7
 8000db6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x132>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	f200 80d1 	bhi.w	8000f64 <__udivmoddi4+0x2d4>
 8000dc2:	4680      	mov	r8, r0
 8000dc4:	1aed      	subs	r5, r5, r3
 8000dc6:	b2a3      	uxth	r3, r4
 8000dc8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dcc:	fb02 5510 	mls	r5, r2, r0, r5
 8000dd0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dd4:	fb0c fc00 	mul.w	ip, ip, r0
 8000dd8:	45a4      	cmp	ip, r4
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x15c>
 8000ddc:	19e4      	adds	r4, r4, r7
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x15a>
 8000de4:	45a4      	cmp	ip, r4
 8000de6:	f200 80b8 	bhi.w	8000f5a <__udivmoddi4+0x2ca>
 8000dea:	4618      	mov	r0, r3
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df4:	e79d      	b.n	8000d32 <__udivmoddi4+0xa2>
 8000df6:	4631      	mov	r1, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	f1ce 0420 	rsb	r4, lr, #32
 8000e02:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e06:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e0a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e0e:	0c3a      	lsrs	r2, r7, #16
 8000e10:	fa25 f404 	lsr.w	r4, r5, r4
 8000e14:	ea48 0803 	orr.w	r8, r8, r3
 8000e18:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e1c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e20:	fb02 4411 	mls	r4, r2, r1, r4
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e2c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e36:	d909      	bls.n	8000e4c <__udivmoddi4+0x1bc>
 8000e38:	19ed      	adds	r5, r5, r7
 8000e3a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e3e:	f080 808a 	bcs.w	8000f56 <__udivmoddi4+0x2c6>
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	f240 8087 	bls.w	8000f56 <__udivmoddi4+0x2c6>
 8000e48:	3902      	subs	r1, #2
 8000e4a:	443d      	add	r5, r7
 8000e4c:	1aeb      	subs	r3, r5, r3
 8000e4e:	fa1f f588 	uxth.w	r5, r8
 8000e52:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e56:	fb02 3310 	mls	r3, r2, r0, r3
 8000e5a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e5e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x1e6>
 8000e66:	19ed      	adds	r5, r5, r7
 8000e68:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6c:	d26f      	bcs.n	8000f4e <__udivmoddi4+0x2be>
 8000e6e:	42ab      	cmp	r3, r5
 8000e70:	d96d      	bls.n	8000f4e <__udivmoddi4+0x2be>
 8000e72:	3802      	subs	r0, #2
 8000e74:	443d      	add	r5, r7
 8000e76:	1aeb      	subs	r3, r5, r3
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	e78f      	b.n	8000d9e <__udivmoddi4+0x10e>
 8000e7e:	f1c1 0720 	rsb	r7, r1, #32
 8000e82:	fa22 f807 	lsr.w	r8, r2, r7
 8000e86:	408b      	lsls	r3, r1
 8000e88:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8c:	ea48 0303 	orr.w	r3, r8, r3
 8000e90:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e94:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e9e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ea2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ea6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eaa:	fa1f f883 	uxth.w	r8, r3
 8000eae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000eb2:	fb09 f408 	mul.w	r4, r9, r8
 8000eb6:	42ac      	cmp	r4, r5
 8000eb8:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x244>
 8000ec2:	18ed      	adds	r5, r5, r3
 8000ec4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ec8:	d243      	bcs.n	8000f52 <__udivmoddi4+0x2c2>
 8000eca:	42ac      	cmp	r4, r5
 8000ecc:	d941      	bls.n	8000f52 <__udivmoddi4+0x2c2>
 8000ece:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed2:	441d      	add	r5, r3
 8000ed4:	1b2d      	subs	r5, r5, r4
 8000ed6:	fa1f fe8e 	uxth.w	lr, lr
 8000eda:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ede:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ee2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ee6:	fb00 f808 	mul.w	r8, r0, r8
 8000eea:	45a0      	cmp	r8, r4
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x26e>
 8000eee:	18e4      	adds	r4, r4, r3
 8000ef0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ef4:	d229      	bcs.n	8000f4a <__udivmoddi4+0x2ba>
 8000ef6:	45a0      	cmp	r8, r4
 8000ef8:	d927      	bls.n	8000f4a <__udivmoddi4+0x2ba>
 8000efa:	3802      	subs	r0, #2
 8000efc:	441c      	add	r4, r3
 8000efe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f02:	eba4 0408 	sub.w	r4, r4, r8
 8000f06:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0a:	454c      	cmp	r4, r9
 8000f0c:	46c6      	mov	lr, r8
 8000f0e:	464d      	mov	r5, r9
 8000f10:	d315      	bcc.n	8000f3e <__udivmoddi4+0x2ae>
 8000f12:	d012      	beq.n	8000f3a <__udivmoddi4+0x2aa>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x29c>
 8000f16:	ebba 030e 	subs.w	r3, sl, lr
 8000f1a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40cb      	lsrs	r3, r1
 8000f24:	431f      	orrs	r7, r3
 8000f26:	40cc      	lsrs	r4, r1
 8000f28:	6037      	str	r7, [r6, #0]
 8000f2a:	6074      	str	r4, [r6, #4]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	4618      	mov	r0, r3
 8000f34:	e6f8      	b.n	8000d28 <__udivmoddi4+0x98>
 8000f36:	4690      	mov	r8, r2
 8000f38:	e6e0      	b.n	8000cfc <__udivmoddi4+0x6c>
 8000f3a:	45c2      	cmp	sl, r8
 8000f3c:	d2ea      	bcs.n	8000f14 <__udivmoddi4+0x284>
 8000f3e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f42:	eb69 0503 	sbc.w	r5, r9, r3
 8000f46:	3801      	subs	r0, #1
 8000f48:	e7e4      	b.n	8000f14 <__udivmoddi4+0x284>
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	e7d7      	b.n	8000efe <__udivmoddi4+0x26e>
 8000f4e:	4640      	mov	r0, r8
 8000f50:	e791      	b.n	8000e76 <__udivmoddi4+0x1e6>
 8000f52:	4681      	mov	r9, r0
 8000f54:	e7be      	b.n	8000ed4 <__udivmoddi4+0x244>
 8000f56:	4601      	mov	r1, r0
 8000f58:	e778      	b.n	8000e4c <__udivmoddi4+0x1bc>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	443c      	add	r4, r7
 8000f5e:	e745      	b.n	8000dec <__udivmoddi4+0x15c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xe6>
 8000f64:	f1a8 0802 	sub.w	r8, r8, #2
 8000f68:	443d      	add	r5, r7
 8000f6a:	e72b      	b.n	8000dc4 <__udivmoddi4+0x134>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f72:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <HAL_InitTick+0x3c>)
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_InitTick+0x40>)
{
 8000f76:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	7818      	ldrb	r0, [r3, #0]
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f82:	6810      	ldr	r0, [r2, #0]
 8000f84:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f88:	f000 fbee 	bl	8001768 <HAL_SYSTICK_Config>
 8000f8c:	4604      	mov	r4, r0
 8000f8e:	b958      	cbnz	r0, 8000fa8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	2d0f      	cmp	r5, #15
 8000f92:	d809      	bhi.n	8000fa8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	4602      	mov	r2, r0
 8000f96:	4629      	mov	r1, r5
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 fba4 	bl	80016e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <HAL_InitTick+0x44>)
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	601d      	str	r5, [r3, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fa8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000faa:	bd38      	pop	{r3, r4, r5, pc}
 8000fac:	2000000c 	.word	0x2000000c
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_Init>:
{
 8000fb8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x30>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fd2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 fb75 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff ffc8 	bl	8000f70 <HAL_InitTick>
  HAL_MspInit();
 8000fe0:	f003 fdae 	bl	8004b40 <HAL_MspInit>
}
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	bd08      	pop	{r3, pc}
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fec:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <HAL_IncTick+0x10>)
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <HAL_IncTick+0x14>)
 8000ff0:	6811      	ldr	r1, [r2, #0]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000254 	.word	0x20000254
 8001000:	20000000 	.word	0x20000000

08001004 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <HAL_GetTick+0x8>)
 8001006:	6818      	ldr	r0, [r3, #0]
}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000254 	.word	0x20000254

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001012:	4604      	mov	r4, r0
 8001014:	2800      	cmp	r0, #0
 8001016:	f000 8099 	beq.w	800114c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800101a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800101c:	b923      	cbnz	r3, 8001028 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800101e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001020:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001024:	f003 fda8 	bl	8004b78 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001028:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800102a:	06db      	lsls	r3, r3, #27
 800102c:	f100 808c 	bmi.w	8001148 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001030:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001032:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001036:	f023 0302 	bic.w	r3, r3, #2
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001040:	4b43      	ldr	r3, [pc, #268]	; (8001150 <HAL_ADC_Init+0x140>)
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001048:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	6861      	ldr	r1, [r4, #4]
 800104e:	430a      	orrs	r2, r1
 8001050:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001052:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001054:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800105c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001064:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001066:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001068:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800106a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800106e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	430a      	orrs	r2, r1
 8001074:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001076:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001078:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800107a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800107e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	430a      	orrs	r2, r1
 8001084:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001086:	4933      	ldr	r1, [pc, #204]	; (8001154 <HAL_ADC_Init+0x144>)
 8001088:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800108a:	428a      	cmp	r2, r1
 800108c:	d050      	beq.n	8001130 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800108e:	6899      	ldr	r1, [r3, #8]
 8001090:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001094:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001096:	6899      	ldr	r1, [r3, #8]
 8001098:	430a      	orrs	r2, r1
 800109a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800109c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800109e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010aa:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010ac:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80010ae:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010b0:	f022 0202 	bic.w	r2, r2, #2
 80010b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80010bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80010be:	6a22      	ldr	r2, [r4, #32]
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d03d      	beq.n	8001140 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010c4:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010cc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80010d4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	3901      	subs	r1, #1
 80010da:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010e2:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010e4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ec:	3901      	subs	r1, #1
 80010ee:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010f4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80010f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001104:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001106:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001108:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800110a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800110e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001110:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001112:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001114:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001118:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800111a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800111c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001128:	2300      	movs	r3, #0
 800112a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800112e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001136:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800113e:	e7b4      	b.n	80010aa <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001146:	e7ca      	b.n	80010de <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8001148:	2001      	movs	r0, #1
 800114a:	e7ed      	b.n	8001128 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 800114c:	2001      	movs	r0, #1
}
 800114e:	bd10      	pop	{r4, pc}
 8001150:	40012300 	.word	0x40012300
 8001154:	0f000001 	.word	0x0f000001

08001158 <HAL_ADC_Start>:
{
 8001158:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800115a:	2300      	movs	r3, #0
 800115c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800115e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001162:	2b01      	cmp	r3, #1
 8001164:	d04e      	beq.n	8001204 <HAL_ADC_Start+0xac>
 8001166:	2301      	movs	r3, #1
 8001168:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800116c:	6803      	ldr	r3, [r0, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	07d1      	lsls	r1, r2, #31
 8001172:	d505      	bpl.n	8001180 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	07d2      	lsls	r2, r2, #31
 8001178:	d414      	bmi.n	80011a4 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 800117a:	2000      	movs	r0, #0
}
 800117c:	b002      	add	sp, #8
 800117e:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001180:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001182:	4921      	ldr	r1, [pc, #132]	; (8001208 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8001184:	f042 0201 	orr.w	r2, r2, #1
 8001188:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800118a:	4a20      	ldr	r2, [pc, #128]	; (800120c <HAL_ADC_Start+0xb4>)
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001192:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8001196:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8001198:	9a01      	ldr	r2, [sp, #4]
 800119a:	2a00      	cmp	r2, #0
 800119c:	d0ea      	beq.n	8001174 <HAL_ADC_Start+0x1c>
      counter--;
 800119e:	9a01      	ldr	r2, [sp, #4]
 80011a0:	3a01      	subs	r2, #1
 80011a2:	e7f8      	b.n	8001196 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80011a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80011a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011b2:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011b8:	bf41      	itttt	mi
 80011ba:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80011bc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80011c0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80011c4:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80011c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011cc:	bf1c      	itt	ne
 80011ce:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 80011d0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80011d4:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011e0:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_ADC_Start+0xb8>)
 80011e4:	6852      	ldr	r2, [r2, #4]
 80011e6:	06d2      	lsls	r2, r2, #27
 80011e8:	d108      	bne.n	80011fc <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011ea:	6898      	ldr	r0, [r3, #8]
 80011ec:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80011f0:	d1c3      	bne.n	800117a <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e7bf      	b.n	800117c <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011fc:	4a05      	ldr	r2, [pc, #20]	; (8001214 <HAL_ADC_Start+0xbc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d1bb      	bne.n	800117a <HAL_ADC_Start+0x22>
 8001202:	e7f2      	b.n	80011ea <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8001204:	2002      	movs	r0, #2
 8001206:	e7b9      	b.n	800117c <HAL_ADC_Start+0x24>
 8001208:	000f4240 	.word	0x000f4240
 800120c:	2000000c 	.word	0x2000000c
 8001210:	40012300 	.word	0x40012300
 8001214:	40012000 	.word	0x40012000

08001218 <HAL_ADC_Start_IT>:
{
 8001218:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800121e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001222:	2b01      	cmp	r3, #1
 8001224:	d054      	beq.n	80012d0 <HAL_ADC_Start_IT+0xb8>
 8001226:	2301      	movs	r3, #1
 8001228:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800122c:	6803      	ldr	r3, [r0, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	07d1      	lsls	r1, r2, #31
 8001232:	d505      	bpl.n	8001240 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	07d2      	lsls	r2, r2, #31
 8001238:	d414      	bmi.n	8001264 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 800123a:	2000      	movs	r0, #0
}
 800123c:	b002      	add	sp, #8
 800123e:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001240:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001242:	4924      	ldr	r1, [pc, #144]	; (80012d4 <HAL_ADC_Start_IT+0xbc>)
    __HAL_ADC_ENABLE(hadc);
 8001244:	f042 0201 	orr.w	r2, r2, #1
 8001248:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800124a:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <HAL_ADC_Start_IT+0xc0>)
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001252:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8001256:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8001258:	9a01      	ldr	r2, [sp, #4]
 800125a:	2a00      	cmp	r2, #0
 800125c:	d0ea      	beq.n	8001234 <HAL_ADC_Start_IT+0x1c>
      counter--;
 800125e:	9a01      	ldr	r2, [sp, #4]
 8001260:	3a01      	subs	r2, #1
 8001262:	e7f8      	b.n	8001256 <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8001264:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001266:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001272:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001278:	bf41      	itttt	mi
 800127a:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 800127c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001280:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001284:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001286:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800128c:	bf1c      	itt	ne
 800128e:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8001290:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001294:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8001296:	2200      	movs	r2, #0
 8001298:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800129c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012a0:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80012a8:	f042 0220 	orr.w	r2, r2, #32
 80012ac:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_ADC_Start_IT+0xc4>)
 80012b0:	6852      	ldr	r2, [r2, #4]
 80012b2:	06d2      	lsls	r2, r2, #27
 80012b4:	d108      	bne.n	80012c8 <HAL_ADC_Start_IT+0xb0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012b6:	6898      	ldr	r0, [r3, #8]
 80012b8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80012bc:	d1bd      	bne.n	800123a <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	e7b9      	b.n	800123c <HAL_ADC_Start_IT+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012c8:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <HAL_ADC_Start_IT+0xc8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d1b5      	bne.n	800123a <HAL_ADC_Start_IT+0x22>
 80012ce:	e7f2      	b.n	80012b6 <HAL_ADC_Start_IT+0x9e>
  __HAL_LOCK(hadc);
 80012d0:	2002      	movs	r0, #2
 80012d2:	e7b3      	b.n	800123c <HAL_ADC_Start_IT+0x24>
 80012d4:	000f4240 	.word	0x000f4240
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	40012300 	.word	0x40012300
 80012e0:	40012000 	.word	0x40012000

080012e4 <HAL_ADC_Start_DMA>:
{
 80012e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012e6:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80012e8:	2200      	movs	r2, #0
 80012ea:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80012ec:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80012f0:	2a01      	cmp	r2, #1
{
 80012f2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80012f4:	d065      	beq.n	80013c2 <HAL_ADC_Start_DMA+0xde>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012f6:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012fe:	68aa      	ldr	r2, [r5, #8]
 8001300:	07d2      	lsls	r2, r2, #31
 8001302:	d505      	bpl.n	8001310 <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001304:	68aa      	ldr	r2, [r5, #8]
 8001306:	07d0      	lsls	r0, r2, #31
 8001308:	d415      	bmi.n	8001336 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 800130a:	2000      	movs	r0, #0
}
 800130c:	b003      	add	sp, #12
 800130e:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001310:	68aa      	ldr	r2, [r5, #8]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001318:	4a2b      	ldr	r2, [pc, #172]	; (80013c8 <HAL_ADC_Start_DMA+0xe4>)
 800131a:	6810      	ldr	r0, [r2, #0]
 800131c:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <HAL_ADC_Start_DMA+0xe8>)
 800131e:	fbb0 f0f2 	udiv	r0, r0, r2
 8001322:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001326:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001328:	9a01      	ldr	r2, [sp, #4]
 800132a:	2a00      	cmp	r2, #0
 800132c:	d0ea      	beq.n	8001304 <HAL_ADC_Start_DMA+0x20>
      counter--;
 800132e:	9a01      	ldr	r2, [sp, #4]
 8001330:	3a01      	subs	r2, #1
 8001332:	9201      	str	r2, [sp, #4]
 8001334:	e7f8      	b.n	8001328 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8001336:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001338:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800133c:	f020 0001 	bic.w	r0, r0, #1
 8001340:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001344:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001346:	686a      	ldr	r2, [r5, #4]
 8001348:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800134a:	bf41      	itttt	mi
 800134c:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 800134e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001352:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001356:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001358:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800135a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001360:	bf1c      	itt	ne
 8001362:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8001364:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001368:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 800136a:	2200      	movs	r2, #0
 800136c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001370:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <HAL_ADC_Start_DMA+0xec>)
 8001372:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001374:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_ADC_Start_DMA+0xf0>)
 8001376:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_ADC_Start_DMA+0xf4>)
 800137a:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800137c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001380:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001382:	686a      	ldr	r2, [r5, #4]
 8001384:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001388:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800138a:	68aa      	ldr	r2, [r5, #8]
 800138c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001390:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001392:	460a      	mov	r2, r1
 8001394:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8001398:	f000 faa2 	bl	80018e0 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_ADC_Start_DMA+0xf8>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f013 0f1f 	tst.w	r3, #31
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	d108      	bne.n	80013ba <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013a8:	6898      	ldr	r0, [r3, #8]
 80013aa:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80013ae:	d1ac      	bne.n	800130a <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	e7a8      	b.n	800130c <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_ADC_Start_DMA+0xfc>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d1a4      	bne.n	800130a <HAL_ADC_Start_DMA+0x26>
 80013c0:	e7f2      	b.n	80013a8 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 80013c2:	2002      	movs	r0, #2
 80013c4:	e7a2      	b.n	800130c <HAL_ADC_Start_DMA+0x28>
 80013c6:	bf00      	nop
 80013c8:	2000000c 	.word	0x2000000c
 80013cc:	000f4240 	.word	0x000f4240
 80013d0:	080013e5 	.word	0x080013e5
 80013d4:	08001445 	.word	0x08001445
 80013d8:	0800157b 	.word	0x0800157b
 80013dc:	40012300 	.word	0x40012300
 80013e0:	40012000 	.word	0x40012000

080013e4 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e8:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80013ec:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013ee:	d124      	bne.n	800143a <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	6891      	ldr	r1, [r2, #8]
 80013fc:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8001400:	d117      	bne.n	8001432 <ADC_DMAConvCplt+0x4e>
 8001402:	6999      	ldr	r1, [r3, #24]
 8001404:	b9a9      	cbnz	r1, 8001432 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001406:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001408:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800140c:	d002      	beq.n	8001414 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800140e:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001410:	0549      	lsls	r1, r1, #21
 8001412:	d40e      	bmi.n	8001432 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001414:	6851      	ldr	r1, [r2, #4]
 8001416:	f021 0120 	bic.w	r1, r1, #32
 800141a:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800141c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001426:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001428:	bf5e      	ittt	pl
 800142a:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 800142c:	f042 0201 	orrpl.w	r2, r2, #1
 8001430:	641a      	strpl	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8001432:	4618      	mov	r0, r3
 8001434:	f003 f820 	bl	8004478 <HAL_ADC_ConvCpltCallback>
 8001438:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800143a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  }
}
 800143c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4718      	bx	r3

08001444 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001444:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* Conversion complete callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001446:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001448:	f003 f81c 	bl	8004484 <HAL_ADC_ConvHalfCpltCallback>
 800144c:	bd08      	pop	{r3, pc}

0800144e <HAL_ADC_LevelOutOfWindowCallback>:
 800144e:	4770      	bx	lr

08001450 <HAL_ADC_ErrorCallback>:
{
 8001450:	4770      	bx	lr

08001452 <HAL_ADC_IRQHandler>:
{
 8001452:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001454:	6803      	ldr	r3, [r0, #0]
 8001456:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001458:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800145a:	078d      	lsls	r5, r1, #30
{
 800145c:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 800145e:	d52b      	bpl.n	80014b8 <HAL_ADC_IRQHandler+0x66>
 8001460:	0690      	lsls	r0, r2, #26
 8001462:	d529      	bpl.n	80014b8 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001464:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001466:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001468:	bf5e      	ittt	pl
 800146a:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800146c:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001470:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001478:	d117      	bne.n	80014aa <HAL_ADC_IRQHandler+0x58>
 800147a:	69a2      	ldr	r2, [r4, #24]
 800147c:	b9aa      	cbnz	r2, 80014aa <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800147e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001480:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001484:	d002      	beq.n	800148c <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001486:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001488:	0552      	lsls	r2, r2, #21
 800148a:	d40e      	bmi.n	80014aa <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	f022 0220 	bic.w	r2, r2, #32
 8001492:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001494:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800149a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800149c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800149e:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014a0:	bf5e      	ittt	pl
 80014a2:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80014a4:	f043 0301 	orrpl.w	r3, r3, #1
 80014a8:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80014aa:	4620      	mov	r0, r4
 80014ac:	f002 ffe4 	bl	8004478 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	f06f 0212 	mvn.w	r2, #18
 80014b6:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80014bc:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80014be:	074d      	lsls	r5, r1, #29
 80014c0:	d532      	bpl.n	8001528 <HAL_ADC_IRQHandler+0xd6>
 80014c2:	0610      	lsls	r0, r2, #24
 80014c4:	d530      	bpl.n	8001528 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014c8:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014ca:	bf5e      	ittt	pl
 80014cc:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80014ce:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80014d2:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80014da:	d11e      	bne.n	800151a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014de:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80014e2:	d002      	beq.n	80014ea <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014e4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014e6:	0552      	lsls	r2, r2, #21
 80014e8:	d417      	bmi.n	800151a <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014ea:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014ec:	0555      	lsls	r5, r2, #21
 80014ee:	d414      	bmi.n	800151a <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014f0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014f2:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80014f6:	d110      	bne.n	800151a <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014f8:	69a2      	ldr	r2, [r4, #24]
 80014fa:	b972      	cbnz	r2, 800151a <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001502:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800150a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800150c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800150e:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001510:	bf5e      	ittt	pl
 8001512:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001514:	f043 0301 	orrpl.w	r3, r3, #1
 8001518:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800151a:	4620      	mov	r0, r4
 800151c:	f000 f8d0 	bl	80016c0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	f06f 020c 	mvn.w	r2, #12
 8001526:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800152c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800152e:	07c9      	lsls	r1, r1, #31
 8001530:	d50f      	bpl.n	8001552 <HAL_ADC_IRQHandler+0x100>
 8001532:	0655      	lsls	r5, r2, #25
 8001534:	d50d      	bpl.n	8001552 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	07d8      	lsls	r0, r3, #31
 800153a:	d50a      	bpl.n	8001552 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800153c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff ff82 	bl	800144e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	f06f 0201 	mvn.w	r2, #1
 8001550:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001556:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001558:	0689      	lsls	r1, r1, #26
 800155a:	d50d      	bpl.n	8001578 <HAL_ADC_IRQHandler+0x126>
 800155c:	0152      	lsls	r2, r2, #5
 800155e:	d50b      	bpl.n	8001578 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001560:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001562:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001566:	f042 0202 	orr.w	r2, r2, #2
 800156a:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 800156c:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800156e:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8001570:	f7ff ff6e 	bl	8001450 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	601d      	str	r5, [r3, #0]
 8001578:	bd38      	pop	{r3, r4, r5, pc}

0800157a <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800157a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800157c:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800157e:	2340      	movs	r3, #64	; 0x40
 8001580:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001582:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_ADC_ErrorCallback(hadc); 
 800158a:	f7ff ff61 	bl	8001450 <HAL_ADC_ErrorCallback>
 800158e:	bd08      	pop	{r3, pc}

08001590 <HAL_ADC_ConfigChannel>:
{
 8001590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001596:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800159a:	2b01      	cmp	r3, #1
 800159c:	d06a      	beq.n	8001674 <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800159e:	680d      	ldr	r5, [r1, #0]
 80015a0:	6804      	ldr	r4, [r0, #0]
 80015a2:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80015a4:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015a6:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80015a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80015ac:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015ae:	d92a      	bls.n	8001606 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015b0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80015b4:	68e7      	ldr	r7, [r4, #12]
 80015b6:	3b1e      	subs	r3, #30
 80015b8:	f04f 0e07 	mov.w	lr, #7
 80015bc:	fa0e fe03 	lsl.w	lr, lr, r3
 80015c0:	ea27 070e 	bic.w	r7, r7, lr
 80015c4:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015c6:	68e7      	ldr	r7, [r4, #12]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	433b      	orrs	r3, r7
 80015ce:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80015d0:	684a      	ldr	r2, [r1, #4]
 80015d2:	2a06      	cmp	r2, #6
 80015d4:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80015d8:	d825      	bhi.n	8001626 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015da:	4413      	add	r3, r2
 80015dc:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80015de:	1f59      	subs	r1, r3, #5
 80015e0:	231f      	movs	r3, #31
 80015e2:	408b      	lsls	r3, r1
 80015e4:	ea27 0303 	bic.w	r3, r7, r3
 80015e8:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80015ec:	fa06 f101 	lsl.w	r1, r6, r1
 80015f0:	4311      	orrs	r1, r2
 80015f2:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_ADC_ConfigChannel+0x11c>)
 80015f6:	429c      	cmp	r4, r3
 80015f8:	d034      	beq.n	8001664 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 80015fa:	2300      	movs	r3, #0
 80015fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001600:	4618      	mov	r0, r3
}
 8001602:	b003      	add	sp, #12
 8001604:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001606:	6927      	ldr	r7, [r4, #16]
 8001608:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800160c:	f04f 0e07 	mov.w	lr, #7
 8001610:	fa0e fe03 	lsl.w	lr, lr, r3
 8001614:	ea27 070e 	bic.w	r7, r7, lr
 8001618:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800161a:	6927      	ldr	r7, [r4, #16]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	433b      	orrs	r3, r7
 8001622:	6123      	str	r3, [r4, #16]
 8001624:	e7d4      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8001626:	2a0c      	cmp	r2, #12
 8001628:	d80e      	bhi.n	8001648 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800162a:	4413      	add	r3, r2
 800162c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800162e:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001632:	231f      	movs	r3, #31
 8001634:	4093      	lsls	r3, r2
 8001636:	ea21 0303 	bic.w	r3, r1, r3
 800163a:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800163c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800163e:	fa06 f202 	lsl.w	r2, r6, r2
 8001642:	431a      	orrs	r2, r3
 8001644:	6322      	str	r2, [r4, #48]	; 0x30
 8001646:	e7d5      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001648:	4413      	add	r3, r2
 800164a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800164c:	3b41      	subs	r3, #65	; 0x41
 800164e:	221f      	movs	r2, #31
 8001650:	409a      	lsls	r2, r3
 8001652:	ea21 0202 	bic.w	r2, r1, r2
 8001656:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001658:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800165a:	fa06 f103 	lsl.w	r1, r6, r3
 800165e:	4311      	orrs	r1, r2
 8001660:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001662:	e7c7      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001664:	2d12      	cmp	r5, #18
 8001666:	d107      	bne.n	8001678 <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001668:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_ADC_ConfigChannel+0x120>)
 800166a:	6853      	ldr	r3, [r2, #4]
 800166c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001670:	6053      	str	r3, [r2, #4]
 8001672:	e7c2      	b.n	80015fa <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8001674:	2002      	movs	r0, #2
 8001676:	e7c4      	b.n	8001602 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_ADC_ConfigChannel+0x124>)
 800167a:	429d      	cmp	r5, r3
 800167c:	d001      	beq.n	8001682 <HAL_ADC_ConfigChannel+0xf2>
 800167e:	2d11      	cmp	r5, #17
 8001680:	d1bb      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001682:	490b      	ldr	r1, [pc, #44]	; (80016b0 <HAL_ADC_ConfigChannel+0x120>)
 8001684:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001686:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001688:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800168c:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800168e:	d1b4      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_ADC_ConfigChannel+0x128>)
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_ADC_ConfigChannel+0x12c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fbb3 f2f2 	udiv	r2, r3, r2
 800169a:	230a      	movs	r3, #10
 800169c:	4353      	muls	r3, r2
        counter--;
 800169e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80016a0:	9b01      	ldr	r3, [sp, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0a9      	beq.n	80015fa <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	e7f8      	b.n	800169e <HAL_ADC_ConfigChannel+0x10e>
 80016ac:	40012000 	.word	0x40012000
 80016b0:	40012300 	.word	0x40012300
 80016b4:	10000012 	.word	0x10000012
 80016b8:	2000000c 	.word	0x2000000c
 80016bc:	000f4240 	.word	0x000f4240

080016c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016cc:	041b      	lsls	r3, r3, #16
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016d4:	0200      	lsls	r0, r0, #8
 80016d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80016de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016e0:	60d3      	str	r3, [r2, #12]
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b530      	push	{r4, r5, lr}
 80016ec:	68dc      	ldr	r4, [r3, #12]
 80016ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	bf28      	it	cs
 80016fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 0501 	mov.w	r5, #1
 8001704:	fa05 f303 	lsl.w	r3, r5, r3
 8001708:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170c:	bf8c      	ite	hi
 800170e:	3c03      	subhi	r4, #3
 8001710:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001712:	4019      	ands	r1, r3
 8001714:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001716:	fa05 f404 	lsl.w	r4, r5, r4
 800171a:	3c01      	subs	r4, #1
 800171c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800171e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	ea42 0201 	orr.w	r2, r2, r1
 8001724:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	bfaf      	iteee	ge
 800172a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	f000 000f 	andlt.w	r0, r0, #15
 8001732:	4b06      	ldrlt	r3, [pc, #24]	; (800174c <HAL_NVIC_SetPriority+0x64>)
 8001734:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	bfa5      	ittet	ge
 8001738:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800173c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001744:	bd30      	pop	{r4, r5, pc}
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00
 800174c:	e000ed14 	.word	0xe000ed14

08001750 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001750:	0942      	lsrs	r2, r0, #5
 8001752:	2301      	movs	r3, #1
 8001754:	f000 001f 	and.w	r0, r0, #31
 8001758:	fa03 f000 	lsl.w	r0, r3, r0
 800175c:	4b01      	ldr	r3, [pc, #4]	; (8001764 <HAL_NVIC_EnableIRQ+0x14>)
 800175e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100

08001768 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	3801      	subs	r0, #1
 800176a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800176e:	d20a      	bcs.n	8001786 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001774:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	21f0      	movs	r1, #240	; 0xf0
 8001778:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <HAL_CRC_Init>:
  * @param  hcrc pointer to a CRC_HandleTypeDef structure that contains
  *         the configuration information for CRC
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001794:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8001796:	4604      	mov	r4, r0
 8001798:	b160      	cbz	r0, 80017b4 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 800179a:	7943      	ldrb	r3, [r0, #5]
 800179c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017a0:	b913      	cbnz	r3, 80017a8 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017a2:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017a4:	f003 fa42 	bl	8004c2c <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80017a8:	2302      	movs	r3, #2
 80017aa:	7163      	strb	r3, [r4, #5]
   
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017ac:	2301      	movs	r3, #1
 80017ae:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 80017b0:	2000      	movs	r0, #0
 80017b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017b4:	2001      	movs	r0, #1
}
 80017b6:	bd10      	pop	{r4, pc}

080017b8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017b8:	6803      	ldr	r3, [r0, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017c0:	f023 0303 	bic.w	r3, r3, #3
 80017c4:	2118      	movs	r1, #24
 80017c6:	3a10      	subs	r2, #16
 80017c8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017cc:	4904      	ldr	r1, [pc, #16]	; (80017e0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80017ce:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017d0:	bf88      	it	hi
 80017d2:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017d4:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017d6:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017d8:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80017da:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	08007980 	.word	0x08007980

080017e4 <HAL_DMA_Init>:
{
 80017e4:	b570      	push	{r4, r5, r6, lr}
 80017e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff fc0c 	bl	8001004 <HAL_GetTick>
 80017ec:	4605      	mov	r5, r0
  if(hdma == NULL)
 80017ee:	2c00      	cmp	r4, #0
 80017f0:	d071      	beq.n	80018d6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80017f2:	2300      	movs	r3, #0
 80017f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80017f8:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80017fa:	2302      	movs	r3, #2
 80017fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001800:	6813      	ldr	r3, [r2, #0]
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001808:	6821      	ldr	r1, [r4, #0]
 800180a:	680b      	ldr	r3, [r1, #0]
 800180c:	07d8      	lsls	r0, r3, #31
 800180e:	d43c      	bmi.n	800188a <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001810:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001812:	4d32      	ldr	r5, [pc, #200]	; (80018dc <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001814:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001816:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001818:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800181a:	68a3      	ldr	r3, [r4, #8]
 800181c:	4313      	orrs	r3, r2
 800181e:	68e2      	ldr	r2, [r4, #12]
 8001820:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001822:	6922      	ldr	r2, [r4, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	6962      	ldr	r2, [r4, #20]
 8001828:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182a:	69e2      	ldr	r2, [r4, #28]
 800182c:	4303      	orrs	r3, r0
 800182e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001830:	6a22      	ldr	r2, [r4, #32]
 8001832:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001834:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001836:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001838:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800183c:	bf01      	itttt	eq
 800183e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001840:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001842:	4335      	orreq	r5, r6
 8001844:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001846:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001848:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800184a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800184c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001850:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001854:	d10b      	bne.n	800186e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001856:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001858:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800185a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800185c:	b13d      	cbz	r5, 800186e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800185e:	b9f8      	cbnz	r0, 80018a0 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001860:	2a01      	cmp	r2, #1
 8001862:	d02d      	beq.n	80018c0 <HAL_DMA_Init+0xdc>
 8001864:	d301      	bcc.n	800186a <HAL_DMA_Init+0x86>
 8001866:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001868:	d101      	bne.n	800186e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800186a:	01ea      	lsls	r2, r5, #7
 800186c:	d42b      	bmi.n	80018c6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800186e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff ffa1 	bl	80017b8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001876:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001878:	233f      	movs	r3, #63	; 0x3f
 800187a:	4093      	lsls	r3, r2
 800187c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800187e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001880:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001882:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001884:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001888:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800188a:	f7ff fbbb 	bl	8001004 <HAL_GetTick>
 800188e:	1b40      	subs	r0, r0, r5
 8001890:	2805      	cmp	r0, #5
 8001892:	d9b9      	bls.n	8001808 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001894:	2320      	movs	r3, #32
 8001896:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001898:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800189a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800189e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018a0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80018a4:	d113      	bne.n	80018ce <HAL_DMA_Init+0xea>
    switch (tmp)
 80018a6:	2a03      	cmp	r2, #3
 80018a8:	d8e1      	bhi.n	800186e <HAL_DMA_Init+0x8a>
 80018aa:	a001      	add	r0, pc, #4	; (adr r0, 80018b0 <HAL_DMA_Init+0xcc>)
 80018ac:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80018b0:	080018c7 	.word	0x080018c7
 80018b4:	0800186b 	.word	0x0800186b
 80018b8:	080018c7 	.word	0x080018c7
 80018bc:	080018c1 	.word	0x080018c1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018c0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80018c4:	d1d3      	bne.n	800186e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c6:	2340      	movs	r3, #64	; 0x40
 80018c8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80018ca:	2001      	movs	r0, #1
 80018cc:	e7e5      	b.n	800189a <HAL_DMA_Init+0xb6>
    switch (tmp)
 80018ce:	2a02      	cmp	r2, #2
 80018d0:	d9f9      	bls.n	80018c6 <HAL_DMA_Init+0xe2>
 80018d2:	2a03      	cmp	r2, #3
 80018d4:	e7c8      	b.n	8001868 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80018d6:	2001      	movs	r0, #1
 80018d8:	bd70      	pop	{r4, r5, r6, pc}
 80018da:	bf00      	nop
 80018dc:	f010803f 	.word	0xf010803f

080018e0 <HAL_DMA_Start_IT>:
{
 80018e0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80018e2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80018e6:	2c01      	cmp	r4, #1
 80018e8:	d036      	beq.n	8001958 <HAL_DMA_Start_IT+0x78>
 80018ea:	2401      	movs	r4, #1
 80018ec:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80018f0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018f4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80018f6:	2c01      	cmp	r4, #1
 80018f8:	f04f 0500 	mov.w	r5, #0
 80018fc:	f04f 0402 	mov.w	r4, #2
 8001900:	d128      	bne.n	8001954 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001902:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001906:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001908:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800190a:	6825      	ldr	r5, [r4, #0]
 800190c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001910:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001912:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001914:	6883      	ldr	r3, [r0, #8]
 8001916:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001918:	bf0e      	itee	eq
 800191a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800191c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800191e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001920:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001922:	bf08      	it	eq
 8001924:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001926:	233f      	movs	r3, #63	; 0x3f
 8001928:	4093      	lsls	r3, r2
 800192a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	f043 0316 	orr.w	r3, r3, #22
 8001932:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001934:	6963      	ldr	r3, [r4, #20]
 8001936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800193c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800193e:	b11b      	cbz	r3, 8001948 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	f043 0308 	orr.w	r3, r3, #8
 8001946:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001950:	2000      	movs	r0, #0
 8001952:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001954:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001958:	2002      	movs	r0, #2
}
 800195a:	bd70      	pop	{r4, r5, r6, pc}

0800195c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800195c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001960:	2b02      	cmp	r3, #2
 8001962:	d003      	beq.n	800196c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001968:	2001      	movs	r0, #1
 800196a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800196c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800196e:	2305      	movs	r3, #5
 8001970:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001974:	6813      	ldr	r3, [r2, #0]
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800197c:	2000      	movs	r0, #0
}
 800197e:	4770      	bx	lr

08001980 <HAL_DMA_IRQHandler>:
{
 8001980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001986:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001988:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800198a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800198c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800198e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001990:	2208      	movs	r2, #8
 8001992:	409a      	lsls	r2, r3
 8001994:	4216      	tst	r6, r2
{
 8001996:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001998:	d00c      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800199a:	6801      	ldr	r1, [r0, #0]
 800199c:	6808      	ldr	r0, [r1, #0]
 800199e:	0740      	lsls	r0, r0, #29
 80019a0:	d508      	bpl.n	80019b4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a2:	6808      	ldr	r0, [r1, #0]
 80019a4:	f020 0004 	bic.w	r0, r0, #4
 80019a8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019aa:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b4:	2201      	movs	r2, #1
 80019b6:	409a      	lsls	r2, r3
 80019b8:	4216      	tst	r6, r2
 80019ba:	d008      	beq.n	80019ce <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019bc:	6821      	ldr	r1, [r4, #0]
 80019be:	6949      	ldr	r1, [r1, #20]
 80019c0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019c2:	bf41      	itttt	mi
 80019c4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019c6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80019c8:	f042 0202 	orrmi.w	r2, r2, #2
 80019cc:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ce:	2204      	movs	r2, #4
 80019d0:	409a      	lsls	r2, r3
 80019d2:	4216      	tst	r6, r2
 80019d4:	d008      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019d6:	6821      	ldr	r1, [r4, #0]
 80019d8:	6809      	ldr	r1, [r1, #0]
 80019da:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019dc:	bf41      	itttt	mi
 80019de:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019e0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80019e2:	f042 0204 	orrmi.w	r2, r2, #4
 80019e6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019e8:	2210      	movs	r2, #16
 80019ea:	409a      	lsls	r2, r3
 80019ec:	4216      	tst	r6, r2
 80019ee:	d010      	beq.n	8001a12 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	0709      	lsls	r1, r1, #28
 80019f6:	d50c      	bpl.n	8001a12 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019f8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	0350      	lsls	r0, r2, #13
 80019fe:	d535      	bpl.n	8001a6c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0319      	lsls	r1, r3, #12
 8001a04:	d401      	bmi.n	8001a0a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a08:	e000      	b.n	8001a0c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001a0c:	b10b      	cbz	r3, 8001a12 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a12:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001a14:	2220      	movs	r2, #32
 8001a16:	408a      	lsls	r2, r1
 8001a18:	4216      	tst	r6, r2
 8001a1a:	d038      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	06c6      	lsls	r6, r0, #27
 8001a22:	d534      	bpl.n	8001a8e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a24:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a26:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001a2a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a2c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a2e:	d125      	bne.n	8001a7c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a30:	f022 0216 	bic.w	r2, r2, #22
 8001a34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a3c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a40:	b90a      	cbnz	r2, 8001a46 <HAL_DMA_IRQHandler+0xc6>
 8001a42:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001a44:	b11a      	cbz	r2, 8001a4e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	f022 0208 	bic.w	r2, r2, #8
 8001a4c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4e:	233f      	movs	r3, #63	; 0x3f
 8001a50:	408b      	lsls	r3, r1
 8001a52:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001a54:	2300      	movs	r3, #0
 8001a56:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001a60:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001a62:	b10b      	cbz	r3, 8001a68 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001a64:	4620      	mov	r0, r4
 8001a66:	4798      	blx	r3
}
 8001a68:	b003      	add	sp, #12
 8001a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a70:	bf5e      	ittt	pl
 8001a72:	681a      	ldrpl	r2, [r3, #0]
 8001a74:	f022 0208 	bicpl.w	r2, r2, #8
 8001a78:	601a      	strpl	r2, [r3, #0]
 8001a7a:	e7c4      	b.n	8001a06 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a7c:	0350      	lsls	r0, r2, #13
 8001a7e:	d528      	bpl.n	8001ad2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0319      	lsls	r1, r3, #12
 8001a84:	d432      	bmi.n	8001aec <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001a86:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001a88:	b10b      	cbz	r3, 8001a8e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0e9      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a96:	07da      	lsls	r2, r3, #31
 8001a98:	d519      	bpl.n	8001ace <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a9a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001a9c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aaa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001aae:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8001ab2:	9b01      	ldr	r3, [sp, #4]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	429f      	cmp	r7, r3
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	d302      	bcc.n	8001ac2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001abc:	6813      	ldr	r3, [r2, #0]
 8001abe:	07db      	lsls	r3, r3, #31
 8001ac0:	d4f7      	bmi.n	8001ab2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001ace:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ad0:	e7c7      	b.n	8001a62 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001ad8:	d108      	bne.n	8001aec <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ada:	6819      	ldr	r1, [r3, #0]
 8001adc:	f021 0110 	bic.w	r1, r1, #16
 8001ae0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001ae4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001ae8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001aec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aee:	e7cb      	b.n	8001a88 <HAL_DMA_IRQHandler+0x108>
 8001af0:	2000000c 	.word	0x2000000c

08001af4 <HAL_DMA2D_LineEventCallback>:
 8001af4:	4770      	bx	lr

08001af6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001af6:	4770      	bx	lr

08001af8 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001af8:	6803      	ldr	r3, [r0, #0]
{
 8001afa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001afc:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001afe:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8001b00:	07f2      	lsls	r2, r6, #31
{
 8001b02:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8001b04:	d514      	bpl.n	8001b30 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != RESET)
 8001b06:	05e9      	lsls	r1, r5, #23
 8001b08:	d512      	bpl.n	8001b30 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b10:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b12:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001b14:	f042 0201 	orr.w	r2, r2, #1
 8001b18:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001b24:	2300      	movs	r3, #0
 8001b26:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001b2a:	6943      	ldr	r3, [r0, #20]
 8001b2c:	b103      	cbz	r3, 8001b30 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8001b2e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001b30:	06b2      	lsls	r2, r6, #26
 8001b32:	d516      	bpl.n	8001b62 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != RESET)
 8001b34:	04ab      	lsls	r3, r5, #18
 8001b36:	d514      	bpl.n	8001b62 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b40:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001b42:	2220      	movs	r2, #32
 8001b44:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001b54:	2300      	movs	r3, #0
 8001b56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001b5a:	6963      	ldr	r3, [r4, #20]
 8001b5c:	b10b      	cbz	r3, 8001b62 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001b62:	0730      	lsls	r0, r6, #28
 8001b64:	d516      	bpl.n	8001b94 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != RESET)
 8001b66:	0529      	lsls	r1, r5, #20
 8001b68:	d514      	bpl.n	8001b94 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b72:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001b74:	2208      	movs	r2, #8
 8001b76:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001b78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b80:	2304      	movs	r3, #4
 8001b82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001b86:	2300      	movs	r3, #0
 8001b88:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8001b8c:	6963      	ldr	r3, [r4, #20]
 8001b8e:	b10b      	cbz	r3, 8001b94 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8001b90:	4620      	mov	r0, r4
 8001b92:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8001b94:	0772      	lsls	r2, r6, #29
 8001b96:	d50b      	bpl.n	8001bb0 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != RESET)
 8001b98:	056b      	lsls	r3, r5, #21
 8001b9a:	d509      	bpl.n	8001bb0 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7ff ffa2 	bl	8001af4 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8001bb0:	07b0      	lsls	r0, r6, #30
 8001bb2:	d514      	bpl.n	8001bde <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != RESET)
 8001bb4:	05a9      	lsls	r1, r5, #22
 8001bb6:	d512      	bpl.n	8001bde <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bc0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bc8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8001bd6:	6923      	ldr	r3, [r4, #16]
 8001bd8:	b10b      	cbz	r3, 8001bde <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8001bde:	06f2      	lsls	r2, r6, #27
 8001be0:	d513      	bpl.n	8001c0a <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != RESET)
 8001be2:	04eb      	lsls	r3, r5, #19
 8001be4:	d511      	bpl.n	8001c0a <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bf6:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff ff76 	bl	8001af6 <HAL_DMA2D_CLUTLoadingCpltCallback>
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c10:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c12:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c14:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001ddc <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c18:	4a6e      	ldr	r2, [pc, #440]	; (8001dd4 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001de0 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c20:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001c22:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c26:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001c28:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001c30:	45b6      	cmp	lr, r6
 8001c32:	f040 80b6 	bne.w	8001da2 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c36:	684c      	ldr	r4, [r1, #4]
 8001c38:	f024 0710 	bic.w	r7, r4, #16
 8001c3c:	2f02      	cmp	r7, #2
 8001c3e:	d116      	bne.n	8001c6e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001c40:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001c44:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c48:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001c4c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c50:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c54:	f04f 0c0f 	mov.w	ip, #15
 8001c58:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001c5c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c60:	690d      	ldr	r5, [r1, #16]
 8001c62:	fa05 f50b 	lsl.w	r5, r5, fp
 8001c66:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	f8ca 5020 	str.w	r5, [sl, #32]
 8001c6e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c72:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001c74:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c78:	fa05 f50a 	lsl.w	r5, r5, sl
 8001c7c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c7e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c82:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c86:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c8a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c90:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001c92:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c96:	d811      	bhi.n	8001cbc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001c98:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c9a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9e:	68cf      	ldr	r7, [r1, #12]
 8001ca0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001ca4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001ca8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001caa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cac:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cb0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001cb4:	409f      	lsls	r7, r3
 8001cb6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001cba:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001cbc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cbe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc0:	688f      	ldr	r7, [r1, #8]
 8001cc2:	fa07 f70a 	lsl.w	r7, r7, sl
 8001cc6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001cc8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cca:	00e5      	lsls	r5, r4, #3
 8001ccc:	d569      	bpl.n	8001da2 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	f04f 0b00 	mov.w	fp, #0
 8001cd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8001cd6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cda:	4d3f      	ldr	r5, [pc, #252]	; (8001dd8 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cdc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001ce0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001ce4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001ce8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001cec:	9703      	str	r7, [sp, #12]
 8001cee:	9f03      	ldr	r7, [sp, #12]
 8001cf0:	f023 0703 	bic.w	r7, r3, #3
 8001cf4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001cf8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cfc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d00:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001d08:	f04f 0e0f 	mov.w	lr, #15
 8001d0c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d10:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d12:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d16:	d04b      	beq.n	8001db0 <HAL_GPIO_Init+0x1a4>
 8001d18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d1c:	42a8      	cmp	r0, r5
 8001d1e:	d049      	beq.n	8001db4 <HAL_GPIO_Init+0x1a8>
 8001d20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d24:	42a8      	cmp	r0, r5
 8001d26:	d047      	beq.n	8001db8 <HAL_GPIO_Init+0x1ac>
 8001d28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d2c:	42a8      	cmp	r0, r5
 8001d2e:	d045      	beq.n	8001dbc <HAL_GPIO_Init+0x1b0>
 8001d30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d34:	42a8      	cmp	r0, r5
 8001d36:	d043      	beq.n	8001dc0 <HAL_GPIO_Init+0x1b4>
 8001d38:	4548      	cmp	r0, r9
 8001d3a:	d043      	beq.n	8001dc4 <HAL_GPIO_Init+0x1b8>
 8001d3c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001d40:	42a8      	cmp	r0, r5
 8001d42:	d041      	beq.n	8001dc8 <HAL_GPIO_Init+0x1bc>
 8001d44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d48:	42a8      	cmp	r0, r5
 8001d4a:	d03f      	beq.n	8001dcc <HAL_GPIO_Init+0x1c0>
 8001d4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d50:	42a8      	cmp	r0, r5
 8001d52:	d03d      	beq.n	8001dd0 <HAL_GPIO_Init+0x1c4>
 8001d54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d58:	42a8      	cmp	r0, r5
 8001d5a:	bf14      	ite	ne
 8001d5c:	250a      	movne	r5, #10
 8001d5e:	2509      	moveq	r5, #9
 8001d60:	fa05 f50c 	lsl.w	r5, r5, ip
 8001d64:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001d6a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001d72:	bf0c      	ite	eq
 8001d74:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d76:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001d78:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001d7a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d7c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001d80:	bf0c      	ite	eq
 8001d82:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d84:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001d86:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d88:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001d8e:	bf0c      	ite	eq
 8001d90:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001d92:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001d94:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001d96:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d98:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	bf54      	ite	pl
 8001d9c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001d9e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001da0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da2:	3301      	adds	r3, #1
 8001da4:	2b10      	cmp	r3, #16
 8001da6:	f47f af3c 	bne.w	8001c22 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001daa:	b005      	add	sp, #20
 8001dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db0:	465d      	mov	r5, fp
 8001db2:	e7d5      	b.n	8001d60 <HAL_GPIO_Init+0x154>
 8001db4:	2501      	movs	r5, #1
 8001db6:	e7d3      	b.n	8001d60 <HAL_GPIO_Init+0x154>
 8001db8:	2502      	movs	r5, #2
 8001dba:	e7d1      	b.n	8001d60 <HAL_GPIO_Init+0x154>
 8001dbc:	2503      	movs	r5, #3
 8001dbe:	e7cf      	b.n	8001d60 <HAL_GPIO_Init+0x154>
 8001dc0:	2504      	movs	r5, #4
 8001dc2:	e7cd      	b.n	8001d60 <HAL_GPIO_Init+0x154>
 8001dc4:	2505      	movs	r5, #5
 8001dc6:	e7cb      	b.n	8001d60 <HAL_GPIO_Init+0x154>
 8001dc8:	2506      	movs	r5, #6
 8001dca:	e7c9      	b.n	8001d60 <HAL_GPIO_Init+0x154>
 8001dcc:	2507      	movs	r5, #7
 8001dce:	e7c7      	b.n	8001d60 <HAL_GPIO_Init+0x154>
 8001dd0:	2508      	movs	r5, #8
 8001dd2:	e7c5      	b.n	8001d60 <HAL_GPIO_Init+0x154>
 8001dd4:	40013c00 	.word	0x40013c00
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40021400 	.word	0x40021400

08001de4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de4:	b10a      	cbz	r2, 8001dea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de6:	6181      	str	r1, [r0, #24]
 8001de8:	4770      	bx	lr
 8001dea:	0409      	lsls	r1, r1, #16
 8001dec:	e7fb      	b.n	8001de6 <HAL_GPIO_WritePin+0x2>

08001dee <HAL_LTDC_ErrorCallback>:
 8001dee:	4770      	bx	lr

08001df0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001df0:	4770      	bx	lr

08001df2 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001df2:	6803      	ldr	r3, [r0, #0]
{
 8001df4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001df6:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001df8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 8001dfa:	0772      	lsls	r2, r6, #29
{
 8001dfc:	4604      	mov	r4, r0
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 8001dfe:	d514      	bpl.n	8001e2a <HAL_LTDC_IRQHandler+0x38>
 8001e00:	0769      	lsls	r1, r5, #29
 8001e02:	d512      	bpl.n	8001e2a <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e06:	f022 0204 	bic.w	r2, r2, #4
 8001e0a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001e10:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8001e1c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e1e:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e22:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001e26:	f7ff ffe2 	bl	8001dee <HAL_LTDC_ErrorCallback>
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 8001e2a:	07b2      	lsls	r2, r6, #30
 8001e2c:	d516      	bpl.n	8001e5c <HAL_LTDC_IRQHandler+0x6a>
 8001e2e:	07ab      	lsls	r3, r5, #30
 8001e30:	d514      	bpl.n	8001e5c <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e36:	f022 0202 	bic.w	r2, r2, #2
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001e40:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e50:	2300      	movs	r3, #0
 8001e52:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff ffc9 	bl	8001dee <HAL_LTDC_ErrorCallback>
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 8001e5c:	07f0      	lsls	r0, r6, #31
 8001e5e:	d510      	bpl.n	8001e82 <HAL_LTDC_IRQHandler+0x90>
 8001e60:	07e9      	lsls	r1, r5, #31
 8001e62:	d50e      	bpl.n	8001e82 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e68:	f022 0201 	bic.w	r2, r2, #1
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8001e72:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8001e74:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e78:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f002 fad1 	bl	8004424 <HAL_LTDC_LineEventCallback>
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 8001e82:	0732      	lsls	r2, r6, #28
 8001e84:	d511      	bpl.n	8001eaa <HAL_LTDC_IRQHandler+0xb8>
 8001e86:	072b      	lsls	r3, r5, #28
 8001e88:	d50f      	bpl.n	8001eaa <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8e:	f022 0208 	bic.w	r2, r2, #8
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001e94:	2208      	movs	r2, #8
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f7ff ffa3 	bl	8001df0 <HAL_LTDC_ReloadEventCallback>
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}

08001eac <HAL_LTDC_ProgramLineEvent>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001eac:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	f04f 0302 	mov.w	r3, #2
 8001eb6:	d012      	beq.n	8001ede <HAL_LTDC_ProgramLineEvent+0x32>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001eb8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001ebc:	6803      	ldr	r3, [r0, #0]
 8001ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec0:	f022 0201 	bic.w	r2, r2, #1
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8001ec6:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_LTDC_ProgramLineEvent+0x38>)
 8001ec8:	6411      	str	r1, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8001eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8001ede:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40016800 	.word	0x40016800

08001ee8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eec:	f8d0 9000 	ldr.w	r9, [r0]
{
 8001ef0:	b087      	sub	sp, #28
 8001ef2:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	f001 ff7e 	bl	8003df6 <USB_GetMode>
 8001efa:	9002      	str	r0, [sp, #8]
 8001efc:	2800      	cmp	r0, #0
 8001efe:	f040 812e 	bne.w	800215e <HAL_PCD_IRQHandler+0x276>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8001f02:	6820      	ldr	r0, [r4, #0]
 8001f04:	f001 ff49 	bl	8003d9a <USB_ReadInterrupts>
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	f000 8128 	beq.w	800215e <HAL_PCD_IRQHandler+0x276>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f0e:	6820      	ldr	r0, [r4, #0]
 8001f10:	f001 ff43 	bl	8003d9a <USB_ReadInterrupts>
 8001f14:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f16:	bf48      	it	mi
 8001f18:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f1a:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f1c:	bf42      	ittt	mi
 8001f1e:	6953      	ldrmi	r3, [r2, #20]
 8001f20:	f003 0302 	andmi.w	r3, r3, #2
 8001f24:	6153      	strmi	r3, [r2, #20]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f26:	f001 ff38 	bl	8003d9a <USB_ReadInterrupts>
 8001f2a:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8001f2e:	d00a      	beq.n	8001f46 <HAL_PCD_IRQHandler+0x5e>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	f001 ff36 	bl	8003da2 <USB_ReadDevAllOutEpInterrupt>
 8001f36:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 8001f3a:	4607      	mov	r7, r0
 8001f3c:	46a2      	mov	sl, r4
      epnum = 0U;
 8001f3e:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8001f40:	2f00      	cmp	r7, #0
 8001f42:	f040 810f 	bne.w	8002164 <HAL_PCD_IRQHandler+0x27c>
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f46:	6820      	ldr	r0, [r4, #0]
 8001f48:	f001 ff27 	bl	8003d9a <USB_ReadInterrupts>
 8001f4c:	0341      	lsls	r1, r0, #13
 8001f4e:	d50b      	bpl.n	8001f68 <HAL_PCD_IRQHandler+0x80>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	f001 ff2e 	bl	8003db2 <USB_ReadDevAllInEpInterrupt>
 8001f56:	4626      	mov	r6, r4
 8001f58:	9003      	str	r0, [sp, #12]
 8001f5a:	f509 6810 	add.w	r8, r9, #2304	; 0x900
      
      epnum = 0U;
 8001f5e:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8001f60:	9b03      	ldr	r3, [sp, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 813f 	bne.w	80021e6 <HAL_PCD_IRQHandler+0x2fe>
        ep_intr >>= 1U;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f68:	6820      	ldr	r0, [r4, #0]
 8001f6a:	f001 ff16 	bl	8003d9a <USB_ReadInterrupts>
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	da0d      	bge.n	8001f8e <HAL_PCD_IRQHandler+0xa6>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f72:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f002 fffe 	bl	8004f80 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f84:	6822      	ldr	r2, [r4, #0]
 8001f86:	6953      	ldr	r3, [r2, #20]
 8001f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f8c:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f8e:	6820      	ldr	r0, [r4, #0]
 8001f90:	f001 ff03 	bl	8003d9a <USB_ReadInterrupts>
 8001f94:	0506      	lsls	r6, r0, #20
 8001f96:	d50b      	bpl.n	8001fb0 <HAL_PCD_IRQHandler+0xc8>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f98:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8001f9c:	07d8      	lsls	r0, r3, #31
 8001f9e:	d502      	bpl.n	8001fa6 <HAL_PCD_IRQHandler+0xbe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f002 ffd5 	bl	8004f50 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fa6:	6822      	ldr	r2, [r4, #0]
 8001fa8:	6953      	ldr	r3, [r2, #20]
 8001faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fae:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fb0:	6820      	ldr	r0, [r4, #0]
 8001fb2:	f001 fef2 	bl	8003d9a <USB_ReadInterrupts>
 8001fb6:	04c1      	lsls	r1, r0, #19
 8001fb8:	d537      	bpl.n	800202a <HAL_PCD_IRQHandler+0x142>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001fba:	f509 6600 	add.w	r6, r9, #2048	; 0x800
 8001fbe:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001fc0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8001fc8:	2110      	movs	r1, #16
 8001fca:	f001 fcdd 	bl	8003988 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fce:	6861      	ldr	r1, [r4, #4]
 8001fd0:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001fd4:	22ff      	movs	r2, #255	; 0xff
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd6:	9802      	ldr	r0, [sp, #8]
 8001fd8:	4288      	cmp	r0, r1
 8001fda:	f040 8192 	bne.w	8002302 <HAL_PCD_IRQHandler+0x41a>
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fe4:	69f3      	ldr	r3, [r6, #28]
 8001fe6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fea:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8001fec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 818f 	beq.w	8002312 <HAL_PCD_IRQHandler+0x42a>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001ff4:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8001ff8:	f043 030b 	orr.w	r3, r3, #11
 8001ffc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8002000:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8002002:	f043 030b 	orr.w	r3, r3, #11
 8002006:	6473      	str	r3, [r6, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002008:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800200c:	7c21      	ldrb	r1, [r4, #16]
 800200e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002010:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002014:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002018:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 800201c:	f001 ff0a 	bl	8003e34 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002020:	6822      	ldr	r2, [r4, #0]
 8002022:	6953      	ldr	r3, [r2, #20]
 8002024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002028:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800202a:	6820      	ldr	r0, [r4, #0]
 800202c:	f001 feb5 	bl	8003d9a <USB_ReadInterrupts>
 8002030:	0482      	lsls	r2, r0, #18
 8002032:	d51d      	bpl.n	8002070 <HAL_PCD_IRQHandler+0x188>
    {
      USB_ActivateSetup(hpcd->Instance);
 8002034:	6820      	ldr	r0, [r4, #0]
 8002036:	f001 fee2 	bl	8003dfe <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800203a:	6820      	ldr	r0, [r4, #0]
 800203c:	68c3      	ldr	r3, [r0, #12]
 800203e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002042:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8002044:	f001 fcb2 	bl	80039ac <USB_GetDevSpeed>
 8002048:	2800      	cmp	r0, #0
 800204a:	f040 816b 	bne.w	8002324 <HAL_PCD_IRQHandler+0x43c>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 800204e:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8002050:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8002052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002056:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002058:	68d3      	ldr	r3, [r2, #12]
 800205a:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800205e:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8002060:	4620      	mov	r0, r4
 8002062:	f002 ff64 	bl	8004f2e <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	6953      	ldr	r3, [r2, #20]
 800206a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800206e:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002070:	6820      	ldr	r0, [r4, #0]
 8002072:	f001 fe92 	bl	8003d9a <USB_ReadInterrupts>
 8002076:	06c3      	lsls	r3, r0, #27
 8002078:	d52b      	bpl.n	80020d2 <HAL_PCD_IRQHandler+0x1ea>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800207a:	6822      	ldr	r2, [r4, #0]
 800207c:	6993      	ldr	r3, [r2, #24]
 800207e:	f023 0310 	bic.w	r3, r3, #16
 8002082:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8002084:	f8d9 6020 	ldr.w	r6, [r9, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8002088:	f3c6 4343 	ubfx	r3, r6, #17, #4
 800208c:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800208e:	f006 080f 	and.w	r8, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8002092:	f040 81a8 	bne.w	80023e6 <HAL_PCD_IRQHandler+0x4fe>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002096:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800209a:	421e      	tst	r6, r3
 800209c:	d014      	beq.n	80020c8 <HAL_PCD_IRQHandler+0x1e0>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 800209e:	271c      	movs	r7, #28
 80020a0:	fb07 4708 	mla	r7, r7, r8, r4
 80020a4:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80020a8:	4632      	mov	r2, r6
 80020aa:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 80020ae:	4648      	mov	r0, r9
 80020b0:	f001 fe1d 	bl	8003cee <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80020b4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80020b8:	4433      	add	r3, r6
 80020ba:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80020be:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80020c2:	441e      	add	r6, r3
 80020c4:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020c8:	6822      	ldr	r2, [r4, #0]
 80020ca:	6993      	ldr	r3, [r2, #24]
 80020cc:	f043 0310 	orr.w	r3, r3, #16
 80020d0:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020d2:	6820      	ldr	r0, [r4, #0]
 80020d4:	f001 fe61 	bl	8003d9a <USB_ReadInterrupts>
 80020d8:	0707      	lsls	r7, r0, #28
 80020da:	d507      	bpl.n	80020ec <HAL_PCD_IRQHandler+0x204>
    {
      HAL_PCD_SOFCallback(hpcd);
 80020dc:	4620      	mov	r0, r4
 80020de:	f002 ff22 	bl	8004f26 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020e2:	6822      	ldr	r2, [r4, #0]
 80020e4:	6953      	ldr	r3, [r2, #20]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020ec:	6820      	ldr	r0, [r4, #0]
 80020ee:	f001 fe54 	bl	8003d9a <USB_ReadInterrupts>
 80020f2:	02c6      	lsls	r6, r0, #11
 80020f4:	d508      	bpl.n	8002108 <HAL_PCD_IRQHandler+0x220>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80020f6:	b2e9      	uxtb	r1, r5
 80020f8:	4620      	mov	r0, r4
 80020fa:	f002 ff49 	bl	8004f90 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020fe:	6822      	ldr	r2, [r4, #0]
 8002100:	6953      	ldr	r3, [r2, #20]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002108:	6820      	ldr	r0, [r4, #0]
 800210a:	f001 fe46 	bl	8003d9a <USB_ReadInterrupts>
 800210e:	0280      	lsls	r0, r0, #10
 8002110:	d508      	bpl.n	8002124 <HAL_PCD_IRQHandler+0x23c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8002112:	b2e9      	uxtb	r1, r5
 8002114:	4620      	mov	r0, r4
 8002116:	f002 ff37 	bl	8004f88 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800211a:	6822      	ldr	r2, [r4, #0]
 800211c:	6953      	ldr	r3, [r2, #20]
 800211e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002122:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002124:	6820      	ldr	r0, [r4, #0]
 8002126:	f001 fe38 	bl	8003d9a <USB_ReadInterrupts>
 800212a:	0041      	lsls	r1, r0, #1
 800212c:	d507      	bpl.n	800213e <HAL_PCD_IRQHandler+0x256>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800212e:	4620      	mov	r0, r4
 8002130:	f002 ff32 	bl	8004f98 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002134:	6822      	ldr	r2, [r4, #0]
 8002136:	6953      	ldr	r3, [r2, #20]
 8002138:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800213c:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800213e:	6820      	ldr	r0, [r4, #0]
 8002140:	f001 fe2b 	bl	8003d9a <USB_ReadInterrupts>
 8002144:	0742      	lsls	r2, r0, #29
 8002146:	d50a      	bpl.n	800215e <HAL_PCD_IRQHandler+0x276>
    {
      temp = hpcd->Instance->GOTGINT;
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800214c:	076b      	lsls	r3, r5, #29
 800214e:	d502      	bpl.n	8002156 <HAL_PCD_IRQHandler+0x26e>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8002150:	4620      	mov	r0, r4
 8002152:	f002 ff25 	bl	8004fa0 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4315      	orrs	r5, r2
 800215c:	605d      	str	r5, [r3, #4]
    }
  }
}
 800215e:	b007      	add	sp, #28
 8002160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1U)
 8002164:	07f8      	lsls	r0, r7, #31
 8002166:	d538      	bpl.n	80021da <HAL_PCD_IRQHandler+0x2f2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8002168:	fa5f fb85 	uxtb.w	fp, r5
 800216c:	4659      	mov	r1, fp
 800216e:	6820      	ldr	r0, [r4, #0]
 8002170:	f001 fe27 	bl	8003dc2 <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002174:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8002178:	4680      	mov	r8, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800217a:	d021      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x2d8>
            if(hpcd->Init.dma_enable == 1U)
 800217c:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800217e:	2301      	movs	r3, #1
            if(hpcd->Init.dma_enable == 1U)
 8002180:	4299      	cmp	r1, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002182:	60b3      	str	r3, [r6, #8]
            if(hpcd->Init.dma_enable == 1U)
 8002184:	d10c      	bne.n	80021a0 <HAL_PCD_IRQHandler+0x2b8>
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8002186:	6931      	ldr	r1, [r6, #16]
 8002188:	f8da 0200 	ldr.w	r0, [sl, #512]	; 0x200
 800218c:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8002190:	1a41      	subs	r1, r0, r1
 8002192:	f8ca 1210 	str.w	r1, [sl, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8002196:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
 800219a:	4408      	add	r0, r1
 800219c:	f8ca 0204 	str.w	r0, [sl, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80021a0:	4659      	mov	r1, fp
 80021a2:	4620      	mov	r0, r4
 80021a4:	f002 feae 	bl	8004f04 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 80021a8:	6921      	ldr	r1, [r4, #16]
 80021aa:	2901      	cmp	r1, #1
 80021ac:	d108      	bne.n	80021c0 <HAL_PCD_IRQHandler+0x2d8>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021ae:	b93d      	cbnz	r5, 80021c0 <HAL_PCD_IRQHandler+0x2d8>
 80021b0:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80021b4:	b922      	cbnz	r2, 80021c0 <HAL_PCD_IRQHandler+0x2d8>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021b6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80021ba:	6820      	ldr	r0, [r4, #0]
 80021bc:	f001 fe3a 	bl	8003e34 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021c0:	f018 0f08 	tst.w	r8, #8
 80021c4:	d004      	beq.n	80021d0 <HAL_PCD_IRQHandler+0x2e8>
            HAL_PCD_SetupStageCallback(hpcd);
 80021c6:	4620      	mov	r0, r4
 80021c8:	f002 fe96 	bl	8004ef8 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021cc:	2308      	movs	r3, #8
 80021ce:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021d0:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021d4:	bf1c      	itt	ne
 80021d6:	2310      	movne	r3, #16
 80021d8:	60b3      	strne	r3, [r6, #8]
        epnum++;
 80021da:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80021dc:	087f      	lsrs	r7, r7, #1
 80021de:	3620      	adds	r6, #32
 80021e0:	f10a 0a1c 	add.w	sl, sl, #28
 80021e4:	e6ac      	b.n	8001f40 <HAL_PCD_IRQHandler+0x58>
        if (ep_intr & 0x1U) /* In ITR */
 80021e6:	9b03      	ldr	r3, [sp, #12]
 80021e8:	07da      	lsls	r2, r3, #31
 80021ea:	d558      	bpl.n	800229e <HAL_PCD_IRQHandler+0x3b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80021ec:	fa5f fb85 	uxtb.w	fp, r5
 80021f0:	4659      	mov	r1, fp
 80021f2:	6820      	ldr	r0, [r4, #0]
 80021f4:	f001 fdef 	bl	8003dd6 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021f8:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 80021fa:	4607      	mov	r7, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021fc:	d520      	bpl.n	8002240 <HAL_PCD_IRQHandler+0x358>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021fe:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = 0x1U << epnum;
 8002202:	2101      	movs	r1, #1
 8002204:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002206:	ea23 0301 	bic.w	r3, r3, r1
 800220a:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800220e:	2301      	movs	r3, #1
 8002210:	f8c8 3008 	str.w	r3, [r8, #8]
            if (hpcd->Init.dma_enable == 1U)
 8002214:	6923      	ldr	r3, [r4, #16]
 8002216:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8002218:	bf01      	itttt	eq
 800221a:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 800221c:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 800221e:	189b      	addeq	r3, r3, r2
 8002220:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8002222:	4659      	mov	r1, fp
 8002224:	4620      	mov	r0, r4
 8002226:	f002 fe76 	bl	8004f16 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 800222a:	6921      	ldr	r1, [r4, #16]
 800222c:	2901      	cmp	r1, #1
 800222e:	d107      	bne.n	8002240 <HAL_PCD_IRQHandler+0x358>
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002230:	b935      	cbnz	r5, 8002240 <HAL_PCD_IRQHandler+0x358>
 8002232:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002234:	b923      	cbnz	r3, 8002240 <HAL_PCD_IRQHandler+0x358>
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002236:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 800223a:	6820      	ldr	r0, [r4, #0]
 800223c:	f001 fdfa 	bl	8003e34 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002240:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002242:	bf44      	itt	mi
 8002244:	2308      	movmi	r3, #8
 8002246:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800224a:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800224c:	bf44      	itt	mi
 800224e:	2310      	movmi	r3, #16
 8002250:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002254:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002256:	bf44      	itt	mi
 8002258:	2340      	movmi	r3, #64	; 0x40
 800225a:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800225e:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002260:	bf44      	itt	mi
 8002262:	2302      	movmi	r3, #2
 8002264:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002268:	063f      	lsls	r7, r7, #24
 800226a:	d518      	bpl.n	800229e <HAL_PCD_IRQHandler+0x3b6>
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8002270:	6cf7      	ldr	r7, [r6, #76]	; 0x4c
 8002272:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002274:	1aff      	subs	r7, r7, r3
 8002276:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002278:	429f      	cmp	r7, r3
 800227a:	bf28      	it	cs
 800227c:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800227e:	9b04      	ldr	r3, [sp, #16]
 8002280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8002284:	f107 0a03 	add.w	sl, r7, #3
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002288:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  len32b = (len + 3U) / 4U;
 800228c:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8002290:	9305      	str	r3, [sp, #20]
 8002292:	9b05      	ldr	r3, [sp, #20]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4553      	cmp	r3, sl
 800229a:	d808      	bhi.n	80022ae <HAL_PCD_IRQHandler+0x3c6>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 800229c:	b32f      	cbz	r7, 80022ea <HAL_PCD_IRQHandler+0x402>
        ep_intr >>= 1U;
 800229e:	9b03      	ldr	r3, [sp, #12]
 80022a0:	085b      	lsrs	r3, r3, #1
        epnum++;
 80022a2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80022a4:	9303      	str	r3, [sp, #12]
 80022a6:	361c      	adds	r6, #28
 80022a8:	f108 0820 	add.w	r8, r8, #32
 80022ac:	e658      	b.n	8001f60 <HAL_PCD_IRQHandler+0x78>
          (ep->xfer_count < ep->xfer_len) &&
 80022ae:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80022b0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d9f2      	bls.n	800229c <HAL_PCD_IRQHandler+0x3b4>
          (ep->xfer_count < ep->xfer_len) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_PCD_IRQHandler+0x3b4>
 80022ba:	6c37      	ldr	r7, [r6, #64]	; 0x40
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80022bc:	9804      	ldr	r0, [sp, #16]
    len = ep->xfer_len - ep->xfer_count;
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	429f      	cmp	r7, r3
 80022c2:	bf28      	it	cs
 80022c4:	461f      	movcs	r7, r3
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 80022c6:	7c23      	ldrb	r3, [r4, #16]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	465a      	mov	r2, fp
 80022cc:	b2bb      	uxth	r3, r7
 80022ce:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80022d0:	f001 fcf9 	bl	8003cc6 <USB_WritePacket>
    ep->xfer_buff  += len;
 80022d4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80022d6:	443b      	add	r3, r7
 80022d8:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 80022da:	6d33      	ldr	r3, [r6, #80]	; 0x50
    len32b = (len + 3U) / 4U;
 80022dc:	f107 0a03 	add.w	sl, r7, #3
    ep->xfer_count += len;
 80022e0:	443b      	add	r3, r7
    len32b = (len + 3U) / 4U;
 80022e2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
    ep->xfer_count += len;
 80022e6:	6533      	str	r3, [r6, #80]	; 0x50
 80022e8:	e7d3      	b.n	8002292 <HAL_PCD_IRQHandler+0x3aa>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022ea:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = 0x1U << epnum;
 80022ec:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022ee:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
 80022f2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = 0x1U << epnum;
 80022f6:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022f8:	ea23 0302 	bic.w	r3, r3, r2
 80022fc:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
 8002300:	e7cd      	b.n	800229e <HAL_PCD_IRQHandler+0x3b6>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002302:	9802      	ldr	r0, [sp, #8]
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8002304:	609a      	str	r2, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002306:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8002308:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230c:	9002      	str	r0, [sp, #8]
 800230e:	3320      	adds	r3, #32
 8002310:	e661      	b.n	8001fd6 <HAL_PCD_IRQHandler+0xee>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8002312:	6973      	ldr	r3, [r6, #20]
 8002314:	f043 030b 	orr.w	r3, r3, #11
 8002318:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800231a:	6933      	ldr	r3, [r6, #16]
 800231c:	f043 030b 	orr.w	r3, r3, #11
 8002320:	6133      	str	r3, [r6, #16]
 8002322:	e671      	b.n	8002008 <HAL_PCD_IRQHandler+0x120>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8002324:	2303      	movs	r3, #3
 8002326:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8002328:	2340      	movs	r3, #64	; 0x40
 800232a:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 800232c:	f000 fba8 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8002330:	4b34      	ldr	r3, [pc, #208]	; (8002404 <HAL_PCD_IRQHandler+0x51c>)
 8002332:	4a35      	ldr	r2, [pc, #212]	; (8002408 <HAL_PCD_IRQHandler+0x520>)
 8002334:	4403      	add	r3, r0
 8002336:	4293      	cmp	r3, r2
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	d804      	bhi.n	8002346 <HAL_PCD_IRQHandler+0x45e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e68c      	b.n	8002060 <HAL_PCD_IRQHandler+0x178>
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8002346:	4a31      	ldr	r2, [pc, #196]	; (800240c <HAL_PCD_IRQHandler+0x524>)
 8002348:	4931      	ldr	r1, [pc, #196]	; (8002410 <HAL_PCD_IRQHandler+0x528>)
 800234a:	4402      	add	r2, r0
 800234c:	428a      	cmp	r2, r1
 800234e:	d803      	bhi.n	8002358 <HAL_PCD_IRQHandler+0x470>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8002356:	e7f4      	b.n	8002342 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8002358:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800235c:	492d      	ldr	r1, [pc, #180]	; (8002414 <HAL_PCD_IRQHandler+0x52c>)
 800235e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8002362:	428a      	cmp	r2, r1
 8002364:	d803      	bhi.n	800236e <HAL_PCD_IRQHandler+0x486>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800236c:	e7e9      	b.n	8002342 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 800236e:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8002372:	4929      	ldr	r1, [pc, #164]	; (8002418 <HAL_PCD_IRQHandler+0x530>)
 8002374:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8002378:	428a      	cmp	r2, r1
 800237a:	d803      	bhi.n	8002384 <HAL_PCD_IRQHandler+0x49c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8002382:	e7de      	b.n	8002342 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8002384:	4a25      	ldr	r2, [pc, #148]	; (800241c <HAL_PCD_IRQHandler+0x534>)
 8002386:	4926      	ldr	r1, [pc, #152]	; (8002420 <HAL_PCD_IRQHandler+0x538>)
 8002388:	4402      	add	r2, r0
 800238a:	428a      	cmp	r2, r1
 800238c:	d803      	bhi.n	8002396 <HAL_PCD_IRQHandler+0x4ae>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8002394:	e7d5      	b.n	8002342 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8002396:	4a23      	ldr	r2, [pc, #140]	; (8002424 <HAL_PCD_IRQHandler+0x53c>)
 8002398:	4923      	ldr	r1, [pc, #140]	; (8002428 <HAL_PCD_IRQHandler+0x540>)
 800239a:	4402      	add	r2, r0
 800239c:	428a      	cmp	r2, r1
 800239e:	d803      	bhi.n	80023a8 <HAL_PCD_IRQHandler+0x4c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80023a6:	e7cc      	b.n	8002342 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 80023a8:	4a20      	ldr	r2, [pc, #128]	; (800242c <HAL_PCD_IRQHandler+0x544>)
 80023aa:	4921      	ldr	r1, [pc, #132]	; (8002430 <HAL_PCD_IRQHandler+0x548>)
 80023ac:	4402      	add	r2, r0
 80023ae:	428a      	cmp	r2, r1
 80023b0:	d803      	bhi.n	80023ba <HAL_PCD_IRQHandler+0x4d2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80023b8:	e7c3      	b.n	8002342 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 80023ba:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80023be:	491d      	ldr	r1, [pc, #116]	; (8002434 <HAL_PCD_IRQHandler+0x54c>)
 80023c0:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80023c4:	428a      	cmp	r2, r1
 80023c6:	d803      	bhi.n	80023d0 <HAL_PCD_IRQHandler+0x4e8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ce:	e7b8      	b.n	8002342 <HAL_PCD_IRQHandler+0x45a>
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 80023d0:	4a19      	ldr	r2, [pc, #100]	; (8002438 <HAL_PCD_IRQHandler+0x550>)
 80023d2:	491a      	ldr	r1, [pc, #104]	; (800243c <HAL_PCD_IRQHandler+0x554>)
 80023d4:	4402      	add	r2, r0
 80023d6:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	bf94      	ite	ls
 80023dc:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80023e0:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80023e4:	e7ad      	b.n	8002342 <HAL_PCD_IRQHandler+0x45a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	f47f ae6e 	bne.w	80020c8 <HAL_PCD_IRQHandler+0x1e0>
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023ec:	2208      	movs	r2, #8
 80023ee:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 80023f2:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80023f4:	271c      	movs	r7, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023f6:	f001 fc7a 	bl	8003cee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80023fa:	fb07 4708 	mla	r7, r7, r8, r4
 80023fe:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8002402:	e65c      	b.n	80020be <HAL_PCD_IRQHandler+0x1d6>
 8002404:	ff275340 	.word	0xff275340
 8002408:	000c34ff 	.word	0x000c34ff
 800240c:	ff1b1e40 	.word	0xff1b1e40
 8002410:	000f423f 	.word	0x000f423f
 8002414:	00124f7f 	.word	0x00124f7f
 8002418:	0013d61f 	.word	0x0013d61f
 800241c:	fee5b660 	.word	0xfee5b660
 8002420:	0016e35f 	.word	0x0016e35f
 8002424:	feced300 	.word	0xfeced300
 8002428:	001b773f 	.word	0x001b773f
 800242c:	feb35bc0 	.word	0xfeb35bc0
 8002430:	002191bf 	.word	0x002191bf
 8002434:	0038751f 	.word	0x0038751f
 8002438:	fe5954e0 	.word	0xfe5954e0
 800243c:	00419cdf 	.word	0x00419cdf

08002440 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 8002440:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002444:	2b01      	cmp	r3, #1
{
 8002446:	b510      	push	{r4, lr}
 8002448:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800244a:	d009      	beq.n	8002460 <HAL_PCD_SetAddress+0x20>
 800244c:	2301      	movs	r3, #1
 800244e:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8002452:	6800      	ldr	r0, [r0, #0]
 8002454:	f001 fc91 	bl	8003d7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8002458:	2000      	movs	r0, #0
 800245a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800245e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8002460:	2002      	movs	r0, #2
}
 8002462:	bd10      	pop	{r4, pc}

08002464 <HAL_PCD_EP_Open>:
{
 8002464:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 8002466:	b24e      	sxtb	r6, r1
 8002468:	2e00      	cmp	r6, #0
{
 800246a:	4604      	mov	r4, r0
 800246c:	f04f 051c 	mov.w	r5, #28
 8002470:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002474:	bfb5      	itete	lt
 8002476:	fb05 4100 	mlalt	r1, r5, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800247a:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800247e:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002480:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->num   = ep_addr & 0x7F;
 8002484:	b2c0      	uxtb	r0, r0
  if (ep->is_in)
 8002486:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8002488:	bfb8      	it	lt
 800248a:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 800248c:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800248e:	70cb      	strb	r3, [r1, #3]
  ep->is_in = (0x80 & ep_addr) != 0;
 8002490:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->data_pid_start = 0U;
 8002494:	bf04      	itt	eq
 8002496:	2300      	moveq	r3, #0
 8002498:	710b      	strbeq	r3, [r1, #4]
  ep->num   = ep_addr & 0x7F;
 800249a:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800249c:	704d      	strb	r5, [r1, #1]
  __HAL_LOCK(hpcd); 
 800249e:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 80024a2:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d009      	beq.n	80024bc <HAL_PCD_EP_Open+0x58>
 80024a8:	2301      	movs	r3, #1
 80024aa:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80024ae:	6820      	ldr	r0, [r4, #0]
 80024b0:	f001 fa97 	bl	80039e2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80024b4:	2000      	movs	r0, #0
 80024b6:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 80024bc:	2002      	movs	r0, #2
}
 80024be:	bd70      	pop	{r4, r5, r6, pc}

080024c0 <HAL_PCD_EP_Receive>:
{
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80024c6:	241c      	movs	r4, #28
 80024c8:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 80024cc:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80024d0:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 80024d4:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 80024d8:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 80024da:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0U;
 80024de:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 80024e2:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 80024e6:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1U)
 80024ea:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80024ec:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 80024ee:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 80024f0:	bf08      	it	eq
 80024f2:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 80024f6:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 80024f8:	b91d      	cbnz	r5, 8002502 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80024fa:	f001 fb77 	bl	8003bec <USB_EP0StartXfer>
}
 80024fe:	2000      	movs	r0, #0
 8002500:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002502:	f001 faad 	bl	8003a60 <USB_EPStartXfer>
 8002506:	e7fa      	b.n	80024fe <HAL_PCD_EP_Receive+0x3e>

08002508 <HAL_PCD_EP_Transmit>:
{
 8002508:	b538      	push	{r3, r4, r5, lr}
 800250a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800250e:	241c      	movs	r4, #28
 8002510:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 8002514:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002518:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 800251a:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 8002520:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 8002522:	6462      	str	r2, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8002524:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8002528:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (hpcd->Init.dma_enable == 1U)
 800252c:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800252e:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8002530:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 8002532:	bf08      	it	eq
 8002534:	64a2      	streq	r2, [r4, #72]	; 0x48
 8002536:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8002538:	b91d      	cbnz	r5, 8002542 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800253a:	f001 fb57 	bl	8003bec <USB_EP0StartXfer>
}
 800253e:	2000      	movs	r0, #0
 8002540:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8002542:	f001 fa8d 	bl	8003a60 <USB_EPStartXfer>
 8002546:	e7fa      	b.n	800253e <HAL_PCD_EP_Transmit+0x36>

08002548 <HAL_PCD_EP_SetStall>:
{
 8002548:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800254a:	b24b      	sxtb	r3, r1
 800254c:	2b00      	cmp	r3, #0
 800254e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002552:	f04f 021c 	mov.w	r2, #28
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002556:	bfb5      	itete	lt
 8002558:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800255c:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002560:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8002562:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1U;
 8002566:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002568:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 800256a:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 800256c:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800256e:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002570:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8002572:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8002576:	4293      	cmp	r3, r2
{
 8002578:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 800257a:	d00f      	beq.n	800259c <HAL_PCD_EP_SetStall+0x54>
 800257c:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8002580:	6800      	ldr	r0, [r0, #0]
 8002582:	f001 fbc2 	bl	8003d0a <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8002586:	b92d      	cbnz	r5, 8002594 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002588:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 800258c:	7c21      	ldrb	r1, [r4, #16]
 800258e:	6820      	ldr	r0, [r4, #0]
 8002590:	f001 fc50 	bl	8003e34 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8002594:	2000      	movs	r0, #0
 8002596:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800259a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 800259c:	2002      	movs	r0, #2
}
 800259e:	bd38      	pop	{r3, r4, r5, pc}

080025a0 <HAL_PCD_EP_ClrStall>:
{
 80025a0:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80025a2:	b24b      	sxtb	r3, r1
 80025a4:	2b00      	cmp	r3, #0
{
 80025a6:	4605      	mov	r5, r0
 80025a8:	f04f 021c 	mov.w	r2, #28
 80025ac:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80025b0:	bfb5      	itete	lt
 80025b2:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80025b6:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80025ba:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80025bc:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80025c0:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 80025c2:	2400      	movs	r4, #0
 80025c4:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80025c6:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80025c8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 80025ca:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d009      	beq.n	80025e6 <HAL_PCD_EP_ClrStall+0x46>
 80025d2:	2301      	movs	r3, #1
 80025d4:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80025d8:	6828      	ldr	r0, [r5, #0]
 80025da:	f001 fbb5 	bl	8003d48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80025de:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 80025e2:	4620      	mov	r0, r4
 80025e4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80025e6:	2002      	movs	r0, #2
}
 80025e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080025ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f0:	4604      	mov	r4, r0
 80025f2:	b918      	cbnz	r0, 80025fc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80025f4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80025f6:	b002      	add	sp, #8
 80025f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fc:	6803      	ldr	r3, [r0, #0]
 80025fe:	07dd      	lsls	r5, r3, #31
 8002600:	d410      	bmi.n	8002624 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	0798      	lsls	r0, r3, #30
 8002606:	d458      	bmi.n	80026ba <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	071a      	lsls	r2, r3, #28
 800260c:	f100 809a 	bmi.w	8002744 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	075b      	lsls	r3, r3, #29
 8002614:	f100 80b8 	bmi.w	8002788 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002618:	69a2      	ldr	r2, [r4, #24]
 800261a:	2a00      	cmp	r2, #0
 800261c:	f040 8119 	bne.w	8002852 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002620:	2000      	movs	r0, #0
 8002622:	e7e8      	b.n	80025f6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002624:	4ba6      	ldr	r3, [pc, #664]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	f002 020c 	and.w	r2, r2, #12
 800262c:	2a04      	cmp	r2, #4
 800262e:	d007      	beq.n	8002640 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002636:	2a08      	cmp	r2, #8
 8002638:	d10a      	bne.n	8002650 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	0259      	lsls	r1, r3, #9
 800263e:	d507      	bpl.n	8002650 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	4b9f      	ldr	r3, [pc, #636]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	039a      	lsls	r2, r3, #14
 8002646:	d5dc      	bpl.n	8002602 <HAL_RCC_OscConfig+0x16>
 8002648:	6863      	ldr	r3, [r4, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1d9      	bne.n	8002602 <HAL_RCC_OscConfig+0x16>
 800264e:	e7d1      	b.n	80025f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	6863      	ldr	r3, [r4, #4]
 8002652:	4d9b      	ldr	r5, [pc, #620]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d111      	bne.n	800267e <HAL_RCC_OscConfig+0x92>
 800265a:	682b      	ldr	r3, [r5, #0]
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002662:	f7fe fccf 	bl	8001004 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4d96      	ldr	r5, [pc, #600]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002668:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	682b      	ldr	r3, [r5, #0]
 800266c:	039b      	lsls	r3, r3, #14
 800266e:	d4c8      	bmi.n	8002602 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002670:	f7fe fcc8 	bl	8001004 <HAL_GetTick>
 8002674:	1b80      	subs	r0, r0, r6
 8002676:	2864      	cmp	r0, #100	; 0x64
 8002678:	d9f7      	bls.n	800266a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800267a:	2003      	movs	r0, #3
 800267c:	e7bb      	b.n	80025f6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002682:	d104      	bne.n	800268e <HAL_RCC_OscConfig+0xa2>
 8002684:	682b      	ldr	r3, [r5, #0]
 8002686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800268a:	602b      	str	r3, [r5, #0]
 800268c:	e7e5      	b.n	800265a <HAL_RCC_OscConfig+0x6e>
 800268e:	682a      	ldr	r2, [r5, #0]
 8002690:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002694:	602a      	str	r2, [r5, #0]
 8002696:	682a      	ldr	r2, [r5, #0]
 8002698:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800269c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1df      	bne.n	8002662 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80026a2:	f7fe fcaf 	bl	8001004 <HAL_GetTick>
 80026a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a8:	682b      	ldr	r3, [r5, #0]
 80026aa:	039f      	lsls	r7, r3, #14
 80026ac:	d5a9      	bpl.n	8002602 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ae:	f7fe fca9 	bl	8001004 <HAL_GetTick>
 80026b2:	1b80      	subs	r0, r0, r6
 80026b4:	2864      	cmp	r0, #100	; 0x64
 80026b6:	d9f7      	bls.n	80026a8 <HAL_RCC_OscConfig+0xbc>
 80026b8:	e7df      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	f012 0f0c 	tst.w	r2, #12
 80026c2:	d007      	beq.n	80026d4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ca:	2a08      	cmp	r2, #8
 80026cc:	d111      	bne.n	80026f2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	025e      	lsls	r6, r3, #9
 80026d2:	d40e      	bmi.n	80026f2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d4:	4b7a      	ldr	r3, [pc, #488]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	0795      	lsls	r5, r2, #30
 80026da:	d502      	bpl.n	80026e2 <HAL_RCC_OscConfig+0xf6>
 80026dc:	68e2      	ldr	r2, [r4, #12]
 80026de:	2a01      	cmp	r2, #1
 80026e0:	d188      	bne.n	80025f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	6921      	ldr	r1, [r4, #16]
 80026e6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80026ea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80026ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f0:	e78a      	b.n	8002608 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f2:	68e2      	ldr	r2, [r4, #12]
 80026f4:	4b73      	ldr	r3, [pc, #460]	; (80028c4 <HAL_RCC_OscConfig+0x2d8>)
 80026f6:	b1b2      	cbz	r2, 8002726 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026fc:	f7fe fc82 	bl	8001004 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002700:	4d6f      	ldr	r5, [pc, #444]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002702:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	0798      	lsls	r0, r3, #30
 8002708:	d507      	bpl.n	800271a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	682b      	ldr	r3, [r5, #0]
 800270c:	6922      	ldr	r2, [r4, #16]
 800270e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002712:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002716:	602b      	str	r3, [r5, #0]
 8002718:	e776      	b.n	8002608 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7fe fc73 	bl	8001004 <HAL_GetTick>
 800271e:	1b80      	subs	r0, r0, r6
 8002720:	2802      	cmp	r0, #2
 8002722:	d9ef      	bls.n	8002704 <HAL_RCC_OscConfig+0x118>
 8002724:	e7a9      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002726:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002728:	f7fe fc6c 	bl	8001004 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272c:	4d64      	ldr	r5, [pc, #400]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800272e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002730:	682b      	ldr	r3, [r5, #0]
 8002732:	0799      	lsls	r1, r3, #30
 8002734:	f57f af68 	bpl.w	8002608 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe fc64 	bl	8001004 <HAL_GetTick>
 800273c:	1b80      	subs	r0, r0, r6
 800273e:	2802      	cmp	r0, #2
 8002740:	d9f6      	bls.n	8002730 <HAL_RCC_OscConfig+0x144>
 8002742:	e79a      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002744:	6962      	ldr	r2, [r4, #20]
 8002746:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <HAL_RCC_OscConfig+0x2dc>)
 8002748:	b17a      	cbz	r2, 800276a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800274e:	f7fe fc59 	bl	8001004 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	4d5b      	ldr	r5, [pc, #364]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002754:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002758:	079f      	lsls	r7, r3, #30
 800275a:	f53f af59 	bmi.w	8002610 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275e:	f7fe fc51 	bl	8001004 <HAL_GetTick>
 8002762:	1b80      	subs	r0, r0, r6
 8002764:	2802      	cmp	r0, #2
 8002766:	d9f6      	bls.n	8002756 <HAL_RCC_OscConfig+0x16a>
 8002768:	e787      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800276a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800276c:	f7fe fc4a 	bl	8001004 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	4d53      	ldr	r5, [pc, #332]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002772:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002776:	0798      	lsls	r0, r3, #30
 8002778:	f57f af4a 	bpl.w	8002610 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800277c:	f7fe fc42 	bl	8001004 <HAL_GetTick>
 8002780:	1b80      	subs	r0, r0, r6
 8002782:	2802      	cmp	r0, #2
 8002784:	d9f6      	bls.n	8002774 <HAL_RCC_OscConfig+0x188>
 8002786:	e778      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002788:	4b4d      	ldr	r3, [pc, #308]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
 800278a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800278c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002790:	d128      	bne.n	80027e4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	9201      	str	r2, [sp, #4]
 8002794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002796:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80027a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4d48      	ldr	r5, [pc, #288]	; (80028cc <HAL_RCC_OscConfig+0x2e0>)
 80027aa:	682b      	ldr	r3, [r5, #0]
 80027ac:	05d9      	lsls	r1, r3, #23
 80027ae:	d51b      	bpl.n	80027e8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b0:	68a3      	ldr	r3, [r4, #8]
 80027b2:	4d43      	ldr	r5, [pc, #268]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d127      	bne.n	8002808 <HAL_RCC_OscConfig+0x21c>
 80027b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80027c0:	f7fe fc20 	bl	8001004 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c4:	4d3e      	ldr	r5, [pc, #248]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80027c6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027ce:	079b      	lsls	r3, r3, #30
 80027d0:	d539      	bpl.n	8002846 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80027d2:	2e00      	cmp	r6, #0
 80027d4:	f43f af20 	beq.w	8002618 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d8:	4a39      	ldr	r2, [pc, #228]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
 80027da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80027dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	e719      	b.n	8002618 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80027e4:	2600      	movs	r6, #0
 80027e6:	e7df      	b.n	80027a8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e8:	682b      	ldr	r3, [r5, #0]
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80027f0:	f7fe fc08 	bl	8001004 <HAL_GetTick>
 80027f4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f6:	682b      	ldr	r3, [r5, #0]
 80027f8:	05da      	lsls	r2, r3, #23
 80027fa:	d4d9      	bmi.n	80027b0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fc:	f7fe fc02 	bl	8001004 <HAL_GetTick>
 8002800:	1bc0      	subs	r0, r0, r7
 8002802:	2802      	cmp	r0, #2
 8002804:	d9f7      	bls.n	80027f6 <HAL_RCC_OscConfig+0x20a>
 8002806:	e738      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002808:	2b05      	cmp	r3, #5
 800280a:	d104      	bne.n	8002816 <HAL_RCC_OscConfig+0x22a>
 800280c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	672b      	str	r3, [r5, #112]	; 0x70
 8002814:	e7d0      	b.n	80027b8 <HAL_RCC_OscConfig+0x1cc>
 8002816:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	672a      	str	r2, [r5, #112]	; 0x70
 800281e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002820:	f022 0204 	bic.w	r2, r2, #4
 8002824:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ca      	bne.n	80027c0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800282a:	f7fe fbeb 	bl	8001004 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002832:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002836:	0798      	lsls	r0, r3, #30
 8002838:	d5cb      	bpl.n	80027d2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fbe3 	bl	8001004 <HAL_GetTick>
 800283e:	1bc0      	subs	r0, r0, r7
 8002840:	4540      	cmp	r0, r8
 8002842:	d9f7      	bls.n	8002834 <HAL_RCC_OscConfig+0x248>
 8002844:	e719      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe fbdd 	bl	8001004 <HAL_GetTick>
 800284a:	1bc0      	subs	r0, r0, r7
 800284c:	4540      	cmp	r0, r8
 800284e:	d9bd      	bls.n	80027cc <HAL_RCC_OscConfig+0x1e0>
 8002850:	e713      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002852:	4d1b      	ldr	r5, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
 8002854:	68ab      	ldr	r3, [r5, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b08      	cmp	r3, #8
 800285c:	f43f aeca 	beq.w	80025f4 <HAL_RCC_OscConfig+0x8>
 8002860:	4e1b      	ldr	r6, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x2e4>)
 8002862:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002864:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002866:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002868:	d134      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800286a:	f7fe fbcb 	bl	8001004 <HAL_GetTick>
 800286e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002870:	682b      	ldr	r3, [r5, #0]
 8002872:	0199      	lsls	r1, r3, #6
 8002874:	d41e      	bmi.n	80028b4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002876:	6a22      	ldr	r2, [r4, #32]
 8002878:	69e3      	ldr	r3, [r4, #28]
 800287a:	4313      	orrs	r3, r2
 800287c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800287e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002882:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002884:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002888:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288a:	4c0d      	ldr	r4, [pc, #52]	; (80028c0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288c:	0852      	lsrs	r2, r2, #1
 800288e:	3a01      	subs	r2, #1
 8002890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002894:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002896:	2301      	movs	r3, #1
 8002898:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800289a:	f7fe fbb3 	bl	8001004 <HAL_GetTick>
 800289e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	019a      	lsls	r2, r3, #6
 80028a4:	f53f aebc 	bmi.w	8002620 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fbac 	bl	8001004 <HAL_GetTick>
 80028ac:	1b40      	subs	r0, r0, r5
 80028ae:	2802      	cmp	r0, #2
 80028b0:	d9f6      	bls.n	80028a0 <HAL_RCC_OscConfig+0x2b4>
 80028b2:	e6e2      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fba6 	bl	8001004 <HAL_GetTick>
 80028b8:	1bc0      	subs	r0, r0, r7
 80028ba:	2802      	cmp	r0, #2
 80028bc:	d9d8      	bls.n	8002870 <HAL_RCC_OscConfig+0x284>
 80028be:	e6dc      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470000 	.word	0x42470000
 80028c8:	42470e80 	.word	0x42470e80
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80028d4:	f7fe fb96 	bl	8001004 <HAL_GetTick>
 80028d8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	682b      	ldr	r3, [r5, #0]
 80028dc:	019b      	lsls	r3, r3, #6
 80028de:	f57f ae9f 	bpl.w	8002620 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fe fb8f 	bl	8001004 <HAL_GetTick>
 80028e6:	1b00      	subs	r0, r0, r4
 80028e8:	2802      	cmp	r0, #2
 80028ea:	d9f6      	bls.n	80028da <HAL_RCC_OscConfig+0x2ee>
 80028ec:	e6c5      	b.n	800267a <HAL_RCC_OscConfig+0x8e>
 80028ee:	bf00      	nop

080028f0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f0:	4913      	ldr	r1, [pc, #76]	; (8002940 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80028f2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f4:	688b      	ldr	r3, [r1, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0x16>
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d003      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002902:	4810      	ldr	r0, [pc, #64]	; (8002944 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002904:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002906:	4810      	ldr	r0, [pc, #64]	; (8002948 <HAL_RCC_GetSysClockFreq+0x58>)
 8002908:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800290a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002910:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002914:	bf14      	ite	ne
 8002916:	480c      	ldrne	r0, [pc, #48]	; (8002948 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002918:	480a      	ldreq	r0, [pc, #40]	; (8002944 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800291e:	bf18      	it	ne
 8002920:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002922:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002926:	fba1 0100 	umull	r0, r1, r1, r0
 800292a:	f7fe f999 	bl	8000c60 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <HAL_RCC_GetSysClockFreq+0x50>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800293a:	fbb0 f0f3 	udiv	r0, r0, r3
 800293e:	bd08      	pop	{r3, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	00f42400 	.word	0x00f42400
 8002948:	007a1200 	.word	0x007a1200

0800294c <HAL_RCC_ClockConfig>:
{
 800294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002950:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002952:	4604      	mov	r4, r0
 8002954:	b910      	cbnz	r0, 800295c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002956:	2001      	movs	r0, #1
 8002958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800295c:	4b44      	ldr	r3, [pc, #272]	; (8002a70 <HAL_RCC_ClockConfig+0x124>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	f002 020f 	and.w	r2, r2, #15
 8002964:	428a      	cmp	r2, r1
 8002966:	d328      	bcc.n	80029ba <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	6821      	ldr	r1, [r4, #0]
 800296a:	078f      	lsls	r7, r1, #30
 800296c:	d42d      	bmi.n	80029ca <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	07c8      	lsls	r0, r1, #31
 8002970:	d440      	bmi.n	80029f4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002972:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <HAL_RCC_ClockConfig+0x124>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	f002 020f 	and.w	r2, r2, #15
 800297a:	4295      	cmp	r5, r2
 800297c:	d366      	bcc.n	8002a4c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	0751      	lsls	r1, r2, #29
 8002982:	d46c      	bmi.n	8002a5e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	0713      	lsls	r3, r2, #28
 8002986:	d507      	bpl.n	8002998 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002988:	4a3a      	ldr	r2, [pc, #232]	; (8002a74 <HAL_RCC_ClockConfig+0x128>)
 800298a:	6921      	ldr	r1, [r4, #16]
 800298c:	6893      	ldr	r3, [r2, #8]
 800298e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002992:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002996:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002998:	f7ff ffaa 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 800299c:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <HAL_RCC_ClockConfig+0x128>)
 800299e:	4a36      	ldr	r2, [pc, #216]	; (8002a78 <HAL_RCC_ClockConfig+0x12c>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	40d8      	lsrs	r0, r3
 80029aa:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <HAL_RCC_ClockConfig+0x130>)
 80029ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7fe fade 	bl	8000f70 <HAL_InitTick>
  return HAL_OK;
 80029b4:	2000      	movs	r0, #0
 80029b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	b2ca      	uxtb	r2, r1
 80029bc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	4299      	cmp	r1, r3
 80029c6:	d1c6      	bne.n	8002956 <HAL_RCC_ClockConfig+0xa>
 80029c8:	e7ce      	b.n	8002968 <HAL_RCC_ClockConfig+0x1c>
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d0:	bf1e      	ittt	ne
 80029d2:	689a      	ldrne	r2, [r3, #8]
 80029d4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80029d8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029da:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029dc:	bf42      	ittt	mi
 80029de:	689a      	ldrmi	r2, [r3, #8]
 80029e0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80029e4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	68a0      	ldr	r0, [r4, #8]
 80029ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029ee:	4302      	orrs	r2, r0
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	e7bc      	b.n	800296e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f4:	6862      	ldr	r2, [r4, #4]
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <HAL_RCC_ClockConfig+0x128>)
 80029f8:	2a01      	cmp	r2, #1
 80029fa:	d11d      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a02:	d0a8      	beq.n	8002956 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a04:	4e1b      	ldr	r6, [pc, #108]	; (8002a74 <HAL_RCC_ClockConfig+0x128>)
 8002a06:	68b3      	ldr	r3, [r6, #8]
 8002a08:	f023 0303 	bic.w	r3, r3, #3
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a10:	f7fe faf8 	bl	8001004 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a14:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a18:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	68b3      	ldr	r3, [r6, #8]
 8002a1c:	6862      	ldr	r2, [r4, #4]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a26:	d0a4      	beq.n	8002972 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7fe faec 	bl	8001004 <HAL_GetTick>
 8002a2c:	1bc0      	subs	r0, r0, r7
 8002a2e:	4540      	cmp	r0, r8
 8002a30:	d9f3      	bls.n	8002a1a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002a32:	2003      	movs	r0, #3
}
 8002a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a38:	1e91      	subs	r1, r2, #2
 8002a3a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	d802      	bhi.n	8002a46 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a44:	e7dd      	b.n	8002a02 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	f013 0f02 	tst.w	r3, #2
 8002a4a:	e7da      	b.n	8002a02 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4c:	b2ea      	uxtb	r2, r5
 8002a4e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	429d      	cmp	r5, r3
 8002a58:	f47f af7d 	bne.w	8002956 <HAL_RCC_ClockConfig+0xa>
 8002a5c:	e78f      	b.n	800297e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5e:	4905      	ldr	r1, [pc, #20]	; (8002a74 <HAL_RCC_ClockConfig+0x128>)
 8002a60:	68e0      	ldr	r0, [r4, #12]
 8002a62:	688b      	ldr	r3, [r1, #8]
 8002a64:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002a68:	4303      	orrs	r3, r0
 8002a6a:	608b      	str	r3, [r1, #8]
 8002a6c:	e78a      	b.n	8002984 <HAL_RCC_ClockConfig+0x38>
 8002a6e:	bf00      	nop
 8002a70:	40023c00 	.word	0x40023c00
 8002a74:	40023800 	.word	0x40023800
 8002a78:	080079c5 	.word	0x080079c5
 8002a7c:	2000000c 	.word	0x2000000c

08002a80 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002a80:	4b01      	ldr	r3, [pc, #4]	; (8002a88 <HAL_RCC_GetHCLKFreq+0x8>)
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	2000000c 	.word	0x2000000c

08002a8c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002a8e:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002a96:	5cd3      	ldrb	r3, [r2, r3]
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a9a:	6810      	ldr	r0, [r2, #0]
}
 8002a9c:	40d8      	lsrs	r0, r3
 8002a9e:	4770      	bx	lr
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	080079d5 	.word	0x080079d5
 8002aa8:	2000000c 	.word	0x2000000c

08002aac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002aae:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	4a03      	ldr	r2, [pc, #12]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002aba:	6810      	ldr	r0, [r2, #0]
}
 8002abc:	40d8      	lsrs	r0, r3
 8002abe:	4770      	bx	lr
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	080079d5 	.word	0x080079d5
 8002ac8:	2000000c 	.word	0x2000000c

08002acc <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002acc:	6803      	ldr	r3, [r0, #0]
{
 8002ace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ad0:	079a      	lsls	r2, r3, #30
{
 8002ad2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ad4:	f040 8088 	bne.w	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	f013 0f0c 	tst.w	r3, #12
 8002ade:	d044      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ae0:	4d80      	ldr	r5, [pc, #512]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ae2:	4e81      	ldr	r6, [pc, #516]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fa8c 	bl	8001004 <HAL_GetTick>
 8002aec:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aee:	6833      	ldr	r3, [r6, #0]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	f100 80bd 	bmi.w	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002af6:	6821      	ldr	r1, [r4, #0]
 8002af8:	074f      	lsls	r7, r1, #29
 8002afa:	d515      	bpl.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002afc:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002afe:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b02:	6920      	ldr	r0, [r4, #16]
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002b0a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b14:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8002b18:	6a22      	ldr	r2, [r4, #32]
 8002b1a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002b1e:	3a01      	subs	r2, #1
 8002b20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b24:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b28:	070e      	lsls	r6, r1, #28
 8002b2a:	d514      	bpl.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b2c:	4a6e      	ldr	r2, [pc, #440]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b2e:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b30:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b34:	6920      	ldr	r0, [r4, #16]
 8002b36:	071b      	lsls	r3, r3, #28
 8002b38:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002b3c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002b40:	430b      	orrs	r3, r1
 8002b42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b46:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b4c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b50:	430b      	orrs	r3, r1
 8002b52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b56:	2301      	movs	r3, #1
 8002b58:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b5a:	f7fe fa53 	bl	8001004 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b5e:	4d62      	ldr	r5, [pc, #392]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8002b60:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b62:	682b      	ldr	r3, [r5, #0]
 8002b64:	0098      	lsls	r0, r3, #2
 8002b66:	f140 808a 	bpl.w	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	069a      	lsls	r2, r3, #26
 8002b6e:	d531      	bpl.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b70:	2300      	movs	r3, #0
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	4b5c      	ldr	r3, [pc, #368]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b76:	4d5d      	ldr	r5, [pc, #372]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002b8a:	682b      	ldr	r3, [r5, #0]
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b90:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b92:	f7fe fa37 	bl	8001004 <HAL_GetTick>
 8002b96:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	05d9      	lsls	r1, r3, #23
 8002b9c:	d576      	bpl.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b9e:	4d52      	ldr	r5, [pc, #328]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002ba0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002ba6:	d177      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002baa:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002bae:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002bb2:	4a4d      	ldr	r2, [pc, #308]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002bb4:	f040 8091 	bne.w	8002cda <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002bb8:	6891      	ldr	r1, [r2, #8]
 8002bba:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002bbe:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002bc2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002bc6:	4301      	orrs	r1, r0
 8002bc8:	6091      	str	r1, [r2, #8]
 8002bca:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bd4:	6820      	ldr	r0, [r4, #0]
 8002bd6:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bda:	bf1f      	itttt	ne
 8002bdc:	4b44      	ldrne	r3, [pc, #272]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bde:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8002be2:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8002be4:	2000      	movne	r0, #0
 8002be6:	e041      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 8002be8:	4d42      	ldr	r5, [pc, #264]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bea:	4e3f      	ldr	r6, [pc, #252]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002bec:	2300      	movs	r3, #0
 8002bee:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002bf0:	f7fe fa08 	bl	8001004 <HAL_GetTick>
 8002bf4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bf6:	6833      	ldr	r3, [r6, #0]
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	d431      	bmi.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bfc:	6822      	ldr	r2, [r4, #0]
 8002bfe:	07d7      	lsls	r7, r2, #31
 8002c00:	d506      	bpl.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002c02:	68a3      	ldr	r3, [r4, #8]
 8002c04:	6861      	ldr	r1, [r4, #4]
 8002c06:	071b      	lsls	r3, r3, #28
 8002c08:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002c0c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002c10:	0790      	lsls	r0, r2, #30
 8002c12:	d515      	bpl.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c14:	4a34      	ldr	r2, [pc, #208]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002c16:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c18:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002c1c:	6860      	ldr	r0, [r4, #4]
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002c24:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c2e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002c32:	69e3      	ldr	r3, [r4, #28]
 8002c34:	f021 011f 	bic.w	r1, r1, #31
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 8002c40:	2301      	movs	r3, #1
 8002c42:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002c44:	f7fe f9de 	bl	8001004 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c48:	4d27      	ldr	r5, [pc, #156]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 8002c4a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	0119      	lsls	r1, r3, #4
 8002c50:	f53f af42 	bmi.w	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c54:	f7fe f9d6 	bl	8001004 <HAL_GetTick>
 8002c58:	1b80      	subs	r0, r0, r6
 8002c5a:	2802      	cmp	r0, #2
 8002c5c:	d9f6      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002c5e:	e004      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c60:	f7fe f9d0 	bl	8001004 <HAL_GetTick>
 8002c64:	1bc0      	subs	r0, r0, r7
 8002c66:	2802      	cmp	r0, #2
 8002c68:	d9c5      	bls.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 8002c6a:	2003      	movs	r0, #3
}
 8002c6c:	b003      	add	sp, #12
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c70:	f7fe f9c8 	bl	8001004 <HAL_GetTick>
 8002c74:	1bc0      	subs	r0, r0, r7
 8002c76:	2802      	cmp	r0, #2
 8002c78:	f67f af39 	bls.w	8002aee <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002c7c:	e7f5      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c7e:	f7fe f9c1 	bl	8001004 <HAL_GetTick>
 8002c82:	1b80      	subs	r0, r0, r6
 8002c84:	2802      	cmp	r0, #2
 8002c86:	f67f af6c 	bls.w	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002c8a:	e7ee      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c8c:	f7fe f9ba 	bl	8001004 <HAL_GetTick>
 8002c90:	1b80      	subs	r0, r0, r6
 8002c92:	2802      	cmp	r0, #2
 8002c94:	d980      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002c96:	e7e8      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c9a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d082      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ca2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ca4:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cae:	2100      	movs	r1, #0
 8002cb0:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002cb2:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cb4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002cb6:	07da      	lsls	r2, r3, #31
 8002cb8:	f57f af76 	bpl.w	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f9a2 	bl	8001004 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002cc4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002cc8:	079b      	lsls	r3, r3, #30
 8002cca:	f53f af6d 	bmi.w	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe f999 	bl	8001004 <HAL_GetTick>
 8002cd2:	1b80      	subs	r0, r0, r6
 8002cd4:	42b8      	cmp	r0, r7
 8002cd6:	d9f6      	bls.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002cd8:	e7c7      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cda:	6891      	ldr	r1, [r2, #8]
 8002cdc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002ce0:	e772      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002ce2:	bf00      	nop
 8002ce4:	42470070 	.word	0x42470070
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	424711e0 	.word	0x424711e0
 8002cf4:	42470068 	.word	0x42470068
 8002cf8:	42470e40 	.word	0x42470e40

08002cfc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfc:	6a03      	ldr	r3, [r0, #32]
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d04:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002d06:	6842      	ldr	r2, [r0, #4]
{
 8002d08:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d0a:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d0e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002d12:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d14:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002d16:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002d1a:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002d1c:	4c0c      	ldr	r4, [pc, #48]	; (8002d50 <TIM_OC1_SetConfig+0x54>)
 8002d1e:	42a0      	cmp	r0, r4
 8002d20:	d009      	beq.n	8002d36 <TIM_OC1_SetConfig+0x3a>
 8002d22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d26:	42a0      	cmp	r0, r4
 8002d28:	d005      	beq.n	8002d36 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d2c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002d2e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002d30:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002d32:	6203      	str	r3, [r0, #32]
} 
 8002d34:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8002d36:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d38:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d3a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002d3e:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d40:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d46:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d48:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d4c:	4322      	orrs	r2, r4
 8002d4e:	e7ec      	b.n	8002d2a <TIM_OC1_SetConfig+0x2e>
 8002d50:	40010000 	.word	0x40010000

08002d54 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d54:	6a03      	ldr	r3, [r0, #32]
 8002d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d5a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002d5e:	6842      	ldr	r2, [r0, #4]
{
 8002d60:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d62:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002d66:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002d6a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d6c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002d6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d72:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002d76:	4c0e      	ldr	r4, [pc, #56]	; (8002db0 <TIM_OC3_SetConfig+0x5c>)
 8002d78:	42a0      	cmp	r0, r4
 8002d7a:	d009      	beq.n	8002d90 <TIM_OC3_SetConfig+0x3c>
 8002d7c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d80:	42a0      	cmp	r0, r4
 8002d82:	d005      	beq.n	8002d90 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d84:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d86:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002d88:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002d8a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d8c:	6203      	str	r3, [r0, #32]
}
 8002d8e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d90:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d92:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d98:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d9c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d9e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002da2:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002da8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002dac:	e7ea      	b.n	8002d84 <TIM_OC3_SetConfig+0x30>
 8002dae:	bf00      	nop
 8002db0:	40010000 	.word	0x40010000

08002db4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002db4:	6a03      	ldr	r3, [r0, #32]
 8002db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dba:	6203      	str	r3, [r0, #32]
{
 8002dbc:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dbe:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002dc0:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dc2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dc6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002dd0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dd4:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002dd8:	4d09      	ldr	r5, [pc, #36]	; (8002e00 <TIM_OC4_SetConfig+0x4c>)
 8002dda:	42a8      	cmp	r0, r5
 8002ddc:	d009      	beq.n	8002df2 <TIM_OC4_SetConfig+0x3e>
 8002dde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002de2:	42a8      	cmp	r0, r5
 8002de4:	d005      	beq.n	8002df2 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002de6:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002de8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002dea:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002dec:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dee:	6204      	str	r4, [r0, #32]
}
 8002df0:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002df2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002df8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002dfc:	e7f3      	b.n	8002de6 <TIM_OC4_SetConfig+0x32>
 8002dfe:	bf00      	nop
 8002e00:	40010000 	.word	0x40010000

08002e04 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e04:	6803      	ldr	r3, [r0, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	f042 0201 	orr.w	r2, r2, #1
 8002e0c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	2000      	movs	r0, #0
 8002e18:	4770      	bx	lr

08002e1a <HAL_TIM_PWM_MspInit>:
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002e1c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002e20:	2b01      	cmp	r3, #1
{
 8002e22:	b570      	push	{r4, r5, r6, lr}
 8002e24:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002e28:	d01c      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8002e2e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002e30:	2201      	movs	r2, #1
 8002e32:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8002e36:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e38:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002e3c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002e40:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002e42:	680a      	ldr	r2, [r1, #0]
 8002e44:	2a40      	cmp	r2, #64	; 0x40
 8002e46:	d079      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0x120>
 8002e48:	d819      	bhi.n	8002e7e <HAL_TIM_ConfigClockSource+0x62>
 8002e4a:	2a10      	cmp	r2, #16
 8002e4c:	f000 8093 	beq.w	8002f76 <HAL_TIM_ConfigClockSource+0x15a>
 8002e50:	d80a      	bhi.n	8002e68 <HAL_TIM_ConfigClockSource+0x4c>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	f000 8089 	beq.w	8002f6a <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002e64:	4618      	mov	r0, r3
}
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002e68:	2a20      	cmp	r2, #32
 8002e6a:	f000 808a 	beq.w	8002f82 <HAL_TIM_ConfigClockSource+0x166>
 8002e6e:	2a30      	cmp	r2, #48	; 0x30
 8002e70:	d1f2      	bne.n	8002e58 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002e72:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002e78:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002e7c:	e036      	b.n	8002eec <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002e7e:	2a70      	cmp	r2, #112	; 0x70
 8002e80:	d036      	beq.n	8002ef0 <HAL_TIM_ConfigClockSource+0xd4>
 8002e82:	d81b      	bhi.n	8002ebc <HAL_TIM_ConfigClockSource+0xa0>
 8002e84:	2a50      	cmp	r2, #80	; 0x50
 8002e86:	d042      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0xf2>
 8002e88:	2a60      	cmp	r2, #96	; 0x60
 8002e8a:	d1e5      	bne.n	8002e58 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e8c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002e8e:	684d      	ldr	r5, [r1, #4]
 8002e90:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e92:	f024 0410 	bic.w	r4, r4, #16
 8002e96:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e98:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002e9a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e9c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ea0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ea4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ea8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002eac:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eae:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002eb0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002eb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002eb6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002eba:	e017      	b.n	8002eec <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002ebc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002ec0:	d011      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0xca>
 8002ec2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002ec6:	d1c7      	bne.n	8002e58 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ec8:	688a      	ldr	r2, [r1, #8]
 8002eca:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002ecc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ece:	68c9      	ldr	r1, [r1, #12]
 8002ed0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ed6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002eda:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002edc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ee4:	e002      	b.n	8002eec <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	e7b3      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ef0:	688a      	ldr	r2, [r1, #8]
 8002ef2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002ef4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002ef6:	68c9      	ldr	r1, [r1, #12]
 8002ef8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002efa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002efe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f02:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002f04:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002f06:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f08:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002f0c:	e7ee      	b.n	8002eec <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002f0e:	684c      	ldr	r4, [r1, #4]
 8002f10:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f12:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f14:	6a1d      	ldr	r5, [r3, #32]
 8002f16:	f025 0501 	bic.w	r5, r5, #1
 8002f1a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002f1c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f22:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f26:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002f2a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002f2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f2e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002f30:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002f36:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002f3a:	e7d7      	b.n	8002eec <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002f3c:	684c      	ldr	r4, [r1, #4]
 8002f3e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f40:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f42:	6a1d      	ldr	r5, [r3, #32]
 8002f44:	f025 0501 	bic.w	r5, r5, #1
 8002f48:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002f4a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f4c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f54:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002f58:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002f5e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002f64:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002f68:	e7c0      	b.n	8002eec <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002f6a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002f70:	f042 0207 	orr.w	r2, r2, #7
 8002f74:	e7ba      	b.n	8002eec <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002f76:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002f7c:	f042 0217 	orr.w	r2, r2, #23
 8002f80:	e7b4      	b.n	8002eec <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002f82:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002f88:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002f8c:	e7ae      	b.n	8002eec <HAL_TIM_ConfigClockSource+0xd0>

08002f8e <HAL_TIM_OC_DelayElapsedCallback>:
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_IC_CaptureCallback>:
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIM_TriggerCallback>:
 8002f94:	4770      	bx	lr

08002f96 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f96:	6803      	ldr	r3, [r0, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	0791      	lsls	r1, r2, #30
{
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fa0:	d50e      	bpl.n	8002fc0 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	0792      	lsls	r2, r2, #30
 8002fa6:	d50b      	bpl.n	8002fc0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa8:	f06f 0202 	mvn.w	r2, #2
 8002fac:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fae:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb0:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb2:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb4:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb6:	d077      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb8:	f7ff ffea 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	0750      	lsls	r0, r2, #29
 8002fc6:	d510      	bpl.n	8002fea <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	0751      	lsls	r1, r2, #29
 8002fcc:	d50d      	bpl.n	8002fea <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fce:	f06f 0204 	mvn.w	r2, #4
 8002fd2:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fd6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fdc:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe0:	d068      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	f7ff ffd5 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	0712      	lsls	r2, r2, #28
 8002ff0:	d50f      	bpl.n	8003012 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	0710      	lsls	r0, r2, #28
 8002ff6:	d50c      	bpl.n	8003012 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ff8:	f06f 0208 	mvn.w	r2, #8
 8002ffc:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ffe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003000:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003002:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003004:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003008:	d05a      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	f7ff ffc1 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	2300      	movs	r3, #0
 8003010:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	06d2      	lsls	r2, r2, #27
 8003018:	d510      	bpl.n	800303c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	06d0      	lsls	r0, r2, #27
 800301e:	d50d      	bpl.n	800303c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003020:	f06f 0210 	mvn.w	r2, #16
 8003024:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003026:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003028:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800302a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800302e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003030:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003032:	d04b      	beq.n	80030cc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003034:	f7ff ffac 	bl	8002f90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003038:	2300      	movs	r3, #0
 800303a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	07d1      	lsls	r1, r2, #31
 8003042:	d508      	bpl.n	8003056 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	07d2      	lsls	r2, r2, #31
 8003048:	d505      	bpl.n	8003056 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800304a:	f06f 0201 	mvn.w	r2, #1
 800304e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003050:	4620      	mov	r0, r4
 8003052:	f001 fa31 	bl	80044b8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	0610      	lsls	r0, r2, #24
 800305c:	d508      	bpl.n	8003070 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	0611      	lsls	r1, r2, #24
 8003062:	d505      	bpl.n	8003070 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003068:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800306a:	4620      	mov	r0, r4
 800306c:	f000 f9a9 	bl	80033c2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	0652      	lsls	r2, r2, #25
 8003076:	d508      	bpl.n	800308a <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	0650      	lsls	r0, r2, #25
 800307c:	d505      	bpl.n	800308a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800307e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003082:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003084:	4620      	mov	r0, r4
 8003086:	f7ff ff85 	bl	8002f94 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	0691      	lsls	r1, r2, #26
 8003090:	d522      	bpl.n	80030d8 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	0692      	lsls	r2, r2, #26
 8003096:	d51f      	bpl.n	80030d8 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003098:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800309c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800309e:	611a      	str	r2, [r3, #16]
}
 80030a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80030a4:	f000 b98c 	b.w	80033c0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a8:	f7ff ff71 	bl	8002f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	4620      	mov	r0, r4
 80030ae:	f7ff ff70 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
 80030b2:	e783      	b.n	8002fbc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b4:	f7ff ff6b 	bl	8002f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7ff ff6a 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
 80030be:	e792      	b.n	8002fe6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c0:	f7ff ff65 	bl	8002f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7ff ff64 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
 80030ca:	e7a0      	b.n	800300e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030cc:	f7ff ff5f 	bl	8002f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff ff5e 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
 80030d6:	e7af      	b.n	8003038 <HAL_TIM_IRQHandler+0xa2>
 80030d8:	bd10      	pop	{r4, pc}
	...

080030dc <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80030dc:	4a2e      	ldr	r2, [pc, #184]	; (8003198 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80030de:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80030e0:	4290      	cmp	r0, r2
 80030e2:	d012      	beq.n	800310a <TIM_Base_SetConfig+0x2e>
 80030e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030e8:	d00f      	beq.n	800310a <TIM_Base_SetConfig+0x2e>
 80030ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80030ee:	4290      	cmp	r0, r2
 80030f0:	d00b      	beq.n	800310a <TIM_Base_SetConfig+0x2e>
 80030f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030f6:	4290      	cmp	r0, r2
 80030f8:	d007      	beq.n	800310a <TIM_Base_SetConfig+0x2e>
 80030fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030fe:	4290      	cmp	r0, r2
 8003100:	d003      	beq.n	800310a <TIM_Base_SetConfig+0x2e>
 8003102:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003106:	4290      	cmp	r0, r2
 8003108:	d11d      	bne.n	8003146 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800310a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800310c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003110:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003112:	4a21      	ldr	r2, [pc, #132]	; (8003198 <TIM_Base_SetConfig+0xbc>)
 8003114:	4290      	cmp	r0, r2
 8003116:	d104      	bne.n	8003122 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003118:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800311a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311e:	4313      	orrs	r3, r2
 8003120:	e028      	b.n	8003174 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003122:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003126:	d0f7      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
 8003128:	4a1c      	ldr	r2, [pc, #112]	; (800319c <TIM_Base_SetConfig+0xc0>)
 800312a:	4290      	cmp	r0, r2
 800312c:	d0f4      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
 800312e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003132:	4290      	cmp	r0, r2
 8003134:	d0f0      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
 8003136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800313a:	4290      	cmp	r0, r2
 800313c:	d0ec      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
 800313e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003142:	4290      	cmp	r0, r2
 8003144:	d0e8      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
 8003146:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <TIM_Base_SetConfig+0xc4>)
 8003148:	4290      	cmp	r0, r2
 800314a:	d0e5      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
 800314c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003150:	4290      	cmp	r0, r2
 8003152:	d0e1      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
 8003154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003158:	4290      	cmp	r0, r2
 800315a:	d0dd      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
 800315c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003160:	4290      	cmp	r0, r2
 8003162:	d0d9      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
 8003164:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003168:	4290      	cmp	r0, r2
 800316a:	d0d5      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
 800316c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003170:	4290      	cmp	r0, r2
 8003172:	d0d1      	beq.n	8003118 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8003174:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003176:	688b      	ldr	r3, [r1, #8]
 8003178:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800317a:	680b      	ldr	r3, [r1, #0]
 800317c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <TIM_Base_SetConfig+0xbc>)
 8003180:	4298      	cmp	r0, r3
 8003182:	d006      	beq.n	8003192 <TIM_Base_SetConfig+0xb6>
 8003184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003188:	4298      	cmp	r0, r3
 800318a:	d002      	beq.n	8003192 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 800318c:	2301      	movs	r3, #1
 800318e:	6143      	str	r3, [r0, #20]
}
 8003190:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003192:	690b      	ldr	r3, [r1, #16]
 8003194:	6303      	str	r3, [r0, #48]	; 0x30
 8003196:	e7f9      	b.n	800318c <TIM_Base_SetConfig+0xb0>
 8003198:	40010000 	.word	0x40010000
 800319c:	40000400 	.word	0x40000400
 80031a0:	40014000 	.word	0x40014000

080031a4 <HAL_TIM_Base_Init>:
{ 
 80031a4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80031a6:	4604      	mov	r4, r0
 80031a8:	b1a0      	cbz	r0, 80031d4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80031aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80031ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031b2:	b91b      	cbnz	r3, 80031bc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80031b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80031b8:	f001 fd50 	bl	8004c5c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80031bc:	2302      	movs	r3, #2
 80031be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	1d21      	adds	r1, r4, #4
 80031c6:	f7ff ff89 	bl	80030dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80031d0:	2000      	movs	r0, #0
 80031d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80031d4:	2001      	movs	r0, #1
}
 80031d6:	bd10      	pop	{r4, pc}

080031d8 <HAL_TIM_PWM_Init>:
{
 80031d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80031da:	4604      	mov	r4, r0
 80031dc:	b1a0      	cbz	r0, 8003208 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80031de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80031e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031e6:	b91b      	cbnz	r3, 80031f0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80031e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80031ec:	f7ff fe15 	bl	8002e1a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80031f0:	2302      	movs	r3, #2
 80031f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80031f6:	6820      	ldr	r0, [r4, #0]
 80031f8:	1d21      	adds	r1, r4, #4
 80031fa:	f7ff ff6f 	bl	80030dc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80031fe:	2301      	movs	r3, #1
 8003200:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003204:	2000      	movs	r0, #0
 8003206:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003208:	2001      	movs	r0, #1
}  
 800320a:	bd10      	pop	{r4, pc}

0800320c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800320c:	6a03      	ldr	r3, [r0, #32]
 800320e:	f023 0310 	bic.w	r3, r3, #16
 8003212:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003214:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003216:	6842      	ldr	r2, [r0, #4]
{
 8003218:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800321a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800321c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800321e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003222:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003226:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003228:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800322c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003230:	4c0d      	ldr	r4, [pc, #52]	; (8003268 <TIM_OC2_SetConfig+0x5c>)
 8003232:	42a0      	cmp	r0, r4
 8003234:	d009      	beq.n	800324a <TIM_OC2_SetConfig+0x3e>
 8003236:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800323a:	42a0      	cmp	r0, r4
 800323c:	d005      	beq.n	800324a <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800323e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003240:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003242:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003244:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003246:	6203      	str	r3, [r0, #32]
}
 8003248:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800324a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800324c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800324e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003252:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003256:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003258:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800325c:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800325e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003262:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8003266:	e7ea      	b.n	800323e <TIM_OC2_SetConfig+0x32>
 8003268:	40010000 	.word	0x40010000

0800326c <HAL_TIM_PWM_ConfigChannel>:
{
 800326c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800326e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003272:	2b01      	cmp	r3, #1
{
 8003274:	4604      	mov	r4, r0
 8003276:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800327a:	d025      	beq.n	80032c8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800327c:	2301      	movs	r3, #1
 800327e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003282:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8003286:	2a0c      	cmp	r2, #12
 8003288:	d818      	bhi.n	80032bc <HAL_TIM_PWM_ConfigChannel+0x50>
 800328a:	e8df f002 	tbb	[pc, r2]
 800328e:	1707      	.short	0x1707
 8003290:	171e1717 	.word	0x171e1717
 8003294:	172f1717 	.word	0x172f1717
 8003298:	1717      	.short	0x1717
 800329a:	40          	.byte	0x40
 800329b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	f7ff fd2d 	bl	8002cfc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032a4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a6:	699a      	ldr	r2, [r3, #24]
 80032a8:	f042 0208 	orr.w	r2, r2, #8
 80032ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	f022 0204 	bic.w	r2, r2, #4
 80032b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032ba:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80032be:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80032c4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80032c8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032ca:	6820      	ldr	r0, [r4, #0]
 80032cc:	f7ff ff9e 	bl	800320c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032d0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032d2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032ea:	e7e6      	b.n	80032ba <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ec:	6820      	ldr	r0, [r4, #0]
 80032ee:	f7ff fd31 	bl	8002d54 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80032f4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	f042 0208 	orr.w	r2, r2, #8
 80032fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	f022 0204 	bic.w	r2, r2, #4
 8003304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800330a:	61da      	str	r2, [r3, #28]
    break;
 800330c:	e7d6      	b.n	80032bc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800330e:	6820      	ldr	r0, [r4, #0]
 8003310:	f7ff fd50 	bl	8002db4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003314:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003316:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800331e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003326:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800332e:	e7ec      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x9e>

08003330 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8003330:	6a03      	ldr	r3, [r0, #32]
{
 8003332:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8003334:	2401      	movs	r4, #1
 8003336:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003338:	ea23 0304 	bic.w	r3, r3, r4
 800333c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800333e:	6a03      	ldr	r3, [r0, #32]
 8003340:	408a      	lsls	r2, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	6202      	str	r2, [r0, #32]
 8003346:	bd10      	pop	{r4, pc}

08003348 <HAL_TIM_PWM_Start>:
{
 8003348:	b510      	push	{r4, lr}
 800334a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800334c:	2201      	movs	r2, #1
 800334e:	6800      	ldr	r0, [r0, #0]
 8003350:	f7ff ffee 	bl	8003330 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	4a08      	ldr	r2, [pc, #32]	; (8003378 <HAL_TIM_PWM_Start+0x30>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <HAL_TIM_PWM_Start+0x1c>
 800335c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003360:	4293      	cmp	r3, r2
 8003362:	d103      	bne.n	800336c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8003364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003366:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
} 
 8003374:	2000      	movs	r0, #0
 8003376:	bd10      	pop	{r4, pc}
 8003378:	40010000 	.word	0x40010000

0800337c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800337c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003380:	2b01      	cmp	r3, #1
{
 8003382:	b510      	push	{r4, lr}
 8003384:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003388:	d018      	beq.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800338a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800338e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003390:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003392:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003394:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003396:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800339a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4322      	orrs	r2, r4
 80033a0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80033b6:	2300      	movs	r3, #0
 80033b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80033bc:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80033be:	bd10      	pop	{r4, pc}

080033c0 <HAL_TIMEx_CommutationCallback>:
 80033c0:	4770      	bx	lr

080033c2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c2:	4770      	bx	lr

080033c4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c4:	6803      	ldr	r3, [r0, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d6:	2320      	movs	r3, #32
 80033d8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80033dc:	4770      	bx	lr
	...

080033e0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80033e4:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80033e6:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80033e8:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ea:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80033ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80033f0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80033f2:	6133      	str	r3, [r6, #16]
{
 80033f4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033f6:	6883      	ldr	r3, [r0, #8]
 80033f8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80033fa:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033fc:	4303      	orrs	r3, r0
 80033fe:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003400:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003404:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003406:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800340a:	430b      	orrs	r3, r1
 800340c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800340e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003410:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003412:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8003418:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800341e:	6173      	str	r3, [r6, #20]
 8003420:	4b7a      	ldr	r3, [pc, #488]	; (800360c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003422:	d17c      	bne.n	800351e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003424:	429e      	cmp	r6, r3
 8003426:	d003      	beq.n	8003430 <UART_SetConfig+0x50>
 8003428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800342c:	429e      	cmp	r6, r3
 800342e:	d144      	bne.n	80034ba <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003430:	f7ff fb3c 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003434:	2519      	movs	r5, #25
 8003436:	fb05 f300 	mul.w	r3, r5, r0
 800343a:	6860      	ldr	r0, [r4, #4]
 800343c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003440:	0040      	lsls	r0, r0, #1
 8003442:	fbb3 f3f0 	udiv	r3, r3, r0
 8003446:	fbb3 f3f9 	udiv	r3, r3, r9
 800344a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800344e:	f7ff fb2d 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003452:	6863      	ldr	r3, [r4, #4]
 8003454:	4368      	muls	r0, r5
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fbb0 f7f3 	udiv	r7, r0, r3
 800345c:	f7ff fb26 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003460:	6863      	ldr	r3, [r4, #4]
 8003462:	4368      	muls	r0, r5
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	fbb0 f3f3 	udiv	r3, r0, r3
 800346a:	fbb3 f3f9 	udiv	r3, r3, r9
 800346e:	fb09 7313 	mls	r3, r9, r3, r7
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	3332      	adds	r3, #50	; 0x32
 8003476:	fbb3 f3f9 	udiv	r3, r3, r9
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003480:	f7ff fb14 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003484:	6862      	ldr	r2, [r4, #4]
 8003486:	4368      	muls	r0, r5
 8003488:	0052      	lsls	r2, r2, #1
 800348a:	fbb0 faf2 	udiv	sl, r0, r2
 800348e:	f7ff fb0d 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	4368      	muls	r0, r5
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fbb0 f3f3 	udiv	r3, r0, r3
 800349c:	fbb3 f3f9 	udiv	r3, r3, r9
 80034a0:	fb09 a313 	mls	r3, r9, r3, sl
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	3332      	adds	r3, #50	; 0x32
 80034a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034b2:	443b      	add	r3, r7
 80034b4:	60b3      	str	r3, [r6, #8]
 80034b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80034ba:	f7ff fae7 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 80034be:	2519      	movs	r5, #25
 80034c0:	fb05 f300 	mul.w	r3, r5, r0
 80034c4:	6860      	ldr	r0, [r4, #4]
 80034c6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80034ca:	0040      	lsls	r0, r0, #1
 80034cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80034d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80034d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034d8:	f7ff fad8 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 80034dc:	6863      	ldr	r3, [r4, #4]
 80034de:	4368      	muls	r0, r5
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	fbb0 f7f3 	udiv	r7, r0, r3
 80034e6:	f7ff fad1 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 80034ea:	6863      	ldr	r3, [r4, #4]
 80034ec:	4368      	muls	r0, r5
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80034f8:	fb09 7313 	mls	r3, r9, r3, r7
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	3332      	adds	r3, #50	; 0x32
 8003500:	fbb3 f3f9 	udiv	r3, r3, r9
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800350a:	f7ff fabf 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 800350e:	6862      	ldr	r2, [r4, #4]
 8003510:	4368      	muls	r0, r5
 8003512:	0052      	lsls	r2, r2, #1
 8003514:	fbb0 faf2 	udiv	sl, r0, r2
 8003518:	f7ff fab8 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 800351c:	e7b9      	b.n	8003492 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800351e:	429e      	cmp	r6, r3
 8003520:	d002      	beq.n	8003528 <UART_SetConfig+0x148>
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <UART_SetConfig+0x230>)
 8003524:	429e      	cmp	r6, r3
 8003526:	d140      	bne.n	80035aa <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003528:	f7ff fac0 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 800352c:	6867      	ldr	r7, [r4, #4]
 800352e:	2519      	movs	r5, #25
 8003530:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003534:	fb05 f300 	mul.w	r3, r5, r0
 8003538:	00bf      	lsls	r7, r7, #2
 800353a:	fbb3 f3f7 	udiv	r3, r3, r7
 800353e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003542:	011f      	lsls	r7, r3, #4
 8003544:	f7ff fab2 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003548:	6863      	ldr	r3, [r4, #4]
 800354a:	4368      	muls	r0, r5
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	fbb0 f8f3 	udiv	r8, r0, r3
 8003552:	f7ff faab 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003556:	6863      	ldr	r3, [r4, #4]
 8003558:	4368      	muls	r0, r5
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003560:	fbb3 f3f9 	udiv	r3, r3, r9
 8003564:	fb09 8313 	mls	r3, r9, r3, r8
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	3332      	adds	r3, #50	; 0x32
 800356c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003570:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003574:	f7ff fa9a 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003578:	6862      	ldr	r2, [r4, #4]
 800357a:	4368      	muls	r0, r5
 800357c:	0092      	lsls	r2, r2, #2
 800357e:	fbb0 faf2 	udiv	sl, r0, r2
 8003582:	f7ff fa93 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003586:	6863      	ldr	r3, [r4, #4]
 8003588:	4368      	muls	r0, r5
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003590:	fbb3 f3f9 	udiv	r3, r3, r9
 8003594:	fb09 a313 	mls	r3, r9, r3, sl
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	3332      	adds	r3, #50	; 0x32
 800359c:	fbb3 f3f9 	udiv	r3, r3, r9
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	ea43 0308 	orr.w	r3, r3, r8
 80035a8:	e783      	b.n	80034b2 <UART_SetConfig+0xd2>
 80035aa:	f7ff fa6f 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 80035ae:	6867      	ldr	r7, [r4, #4]
 80035b0:	2519      	movs	r5, #25
 80035b2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80035b6:	fb05 f300 	mul.w	r3, r5, r0
 80035ba:	00bf      	lsls	r7, r7, #2
 80035bc:	fbb3 f3f7 	udiv	r3, r3, r7
 80035c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80035c4:	011f      	lsls	r7, r3, #4
 80035c6:	f7ff fa61 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 80035ca:	6863      	ldr	r3, [r4, #4]
 80035cc:	4368      	muls	r0, r5
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	fbb0 f8f3 	udiv	r8, r0, r3
 80035d4:	f7ff fa5a 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 80035d8:	6863      	ldr	r3, [r4, #4]
 80035da:	4368      	muls	r0, r5
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	fbb3 f3f9 	udiv	r3, r3, r9
 80035e6:	fb09 8313 	mls	r3, r9, r3, r8
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	3332      	adds	r3, #50	; 0x32
 80035ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80035f2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80035f6:	f7ff fa49 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 80035fa:	6862      	ldr	r2, [r4, #4]
 80035fc:	4368      	muls	r0, r5
 80035fe:	0092      	lsls	r2, r2, #2
 8003600:	fbb0 faf2 	udiv	sl, r0, r2
 8003604:	f7ff fa42 	bl	8002a8c <HAL_RCC_GetPCLK1Freq>
 8003608:	e7bd      	b.n	8003586 <UART_SetConfig+0x1a6>
 800360a:	bf00      	nop
 800360c:	40011000 	.word	0x40011000
 8003610:	40011400 	.word	0x40011400

08003614 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	4604      	mov	r4, r0
 8003618:	460e      	mov	r6, r1
 800361a:	4617      	mov	r7, r2
 800361c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800361e:	6821      	ldr	r1, [r4, #0]
 8003620:	680b      	ldr	r3, [r1, #0]
 8003622:	ea36 0303 	bics.w	r3, r6, r3
 8003626:	d101      	bne.n	800362c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003628:	2000      	movs	r0, #0
}
 800362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800362c:	1c6b      	adds	r3, r5, #1
 800362e:	d0f7      	beq.n	8003620 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003630:	b995      	cbnz	r5, 8003658 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800363a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003644:	2320      	movs	r3, #32
 8003646:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800364a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800364e:	2300      	movs	r3, #0
 8003650:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8003654:	2003      	movs	r0, #3
 8003656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003658:	f7fd fcd4 	bl	8001004 <HAL_GetTick>
 800365c:	1bc0      	subs	r0, r0, r7
 800365e:	4285      	cmp	r5, r0
 8003660:	d2dd      	bcs.n	800361e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8003662:	e7e6      	b.n	8003632 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08003664 <HAL_UART_Init>:
{
 8003664:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003666:	4604      	mov	r4, r0
 8003668:	b340      	cbz	r0, 80036bc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800366a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800366e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003672:	b91b      	cbnz	r3, 800367c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003674:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003678:	f001 fb5e 	bl	8004d38 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800367c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800367e:	2324      	movs	r3, #36	; 0x24
 8003680:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003684:	68d3      	ldr	r3, [r2, #12]
 8003686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800368a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800368c:	4620      	mov	r0, r4
 800368e:	f7ff fea7 	bl	80033e0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800369a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036aa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80036ae:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80036b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80036b6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80036ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036bc:	2001      	movs	r0, #1
}
 80036be:	bd10      	pop	{r4, pc}

080036c0 <HAL_UART_Transmit>:
{
 80036c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036c4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80036c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80036ca:	2b20      	cmp	r3, #32
{
 80036cc:	4604      	mov	r4, r0
 80036ce:	460d      	mov	r5, r1
 80036d0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80036d2:	d14f      	bne.n	8003774 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80036d4:	2900      	cmp	r1, #0
 80036d6:	d04a      	beq.n	800376e <HAL_UART_Transmit+0xae>
 80036d8:	2a00      	cmp	r2, #0
 80036da:	d048      	beq.n	800376e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80036dc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d047      	beq.n	8003774 <HAL_UART_Transmit+0xb4>
 80036e4:	2301      	movs	r3, #1
 80036e6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ee:	2321      	movs	r3, #33	; 0x21
 80036f0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80036f4:	f7fd fc86 	bl	8001004 <HAL_GetTick>
    huart->TxXferSize = Size;
 80036f8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80036fc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80036fe:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003702:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003704:	b29b      	uxth	r3, r3
 8003706:	b96b      	cbnz	r3, 8003724 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003708:	463b      	mov	r3, r7
 800370a:	4632      	mov	r2, r6
 800370c:	2140      	movs	r1, #64	; 0x40
 800370e:	4620      	mov	r0, r4
 8003710:	f7ff ff80 	bl	8003614 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003714:	b9b0      	cbnz	r0, 8003744 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8003716:	2320      	movs	r3, #32
 8003718:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800371c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8003720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8003724:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003726:	3b01      	subs	r3, #1
 8003728:	b29b      	uxth	r3, r3
 800372a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800372c:	68a3      	ldr	r3, [r4, #8]
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003732:	4632      	mov	r2, r6
 8003734:	463b      	mov	r3, r7
 8003736:	f04f 0180 	mov.w	r1, #128	; 0x80
 800373a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800373c:	d10e      	bne.n	800375c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800373e:	f7ff ff69 	bl	8003614 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003742:	b110      	cbz	r0, 800374a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8003744:	2003      	movs	r0, #3
 8003746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800374a:	882b      	ldrh	r3, [r5, #0]
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003752:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003754:	6923      	ldr	r3, [r4, #16]
 8003756:	b943      	cbnz	r3, 800376a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8003758:	3502      	adds	r5, #2
 800375a:	e7d2      	b.n	8003702 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800375c:	f7ff ff5a 	bl	8003614 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003760:	2800      	cmp	r0, #0
 8003762:	d1ef      	bne.n	8003744 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	782a      	ldrb	r2, [r5, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	3501      	adds	r5, #1
 800376c:	e7c9      	b.n	8003702 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800376e:	2001      	movs	r0, #1
 8003770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8003774:	2002      	movs	r0, #2
}
 8003776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800377a <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800377a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800377e:	2b20      	cmp	r3, #32
 8003780:	d11c      	bne.n	80037bc <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 8003782:	b1c9      	cbz	r1, 80037b8 <HAL_UART_Receive_IT+0x3e>
 8003784:	b1c2      	cbz	r2, 80037b8 <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 8003786:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800378a:	2b01      	cmp	r3, #1
 800378c:	d016      	beq.n	80037bc <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 800378e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8003790:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003794:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003796:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003798:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800379e:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 80037a2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	f041 0101 	orr.w	r1, r1, #1
 80037aa:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037ac:	68d1      	ldr	r1, [r2, #12]
 80037ae:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 80037b2:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80037b4:	4618      	mov	r0, r3
 80037b6:	4770      	bx	lr
      return HAL_ERROR;
 80037b8:	2001      	movs	r0, #1
 80037ba:	4770      	bx	lr
    return HAL_BUSY; 
 80037bc:	2002      	movs	r0, #2
}
 80037be:	4770      	bx	lr

080037c0 <HAL_UART_TxCpltCallback>:
 80037c0:	4770      	bx	lr

080037c2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80037c2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80037c6:	2b22      	cmp	r3, #34	; 0x22
{
 80037c8:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80037ca:	d132      	bne.n	8003832 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037cc:	6883      	ldr	r3, [r0, #8]
 80037ce:	6901      	ldr	r1, [r0, #16]
 80037d0:	6802      	ldr	r2, [r0, #0]
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80037d8:	d11f      	bne.n	800381a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037da:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80037dc:	b9c9      	cbnz	r1, 8003812 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037e2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80037e6:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80037e8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80037ea:	3c01      	subs	r4, #1
 80037ec:	b2a4      	uxth	r4, r4
 80037ee:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80037f0:	b96c      	cbnz	r4, 800380e <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f2:	6803      	ldr	r3, [r0, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037fa:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003804:	2320      	movs	r3, #32
 8003806:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800380a:	f000 feab 	bl	8004564 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800380e:	2000      	movs	r0, #0
}
 8003810:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	f823 2b01 	strh.w	r2, [r3], #1
 8003818:	e7e5      	b.n	80037e6 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800381a:	b921      	cbnz	r1, 8003826 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800381c:	1c59      	adds	r1, r3, #1
 800381e:	6852      	ldr	r2, [r2, #4]
 8003820:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e7e0      	b.n	80037e8 <UART_Receive_IT+0x26>
 8003826:	6852      	ldr	r2, [r2, #4]
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	6281      	str	r1, [r0, #40]	; 0x28
 800382c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003830:	e7f7      	b.n	8003822 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8003832:	2002      	movs	r0, #2
 8003834:	bd10      	pop	{r4, pc}

08003836 <HAL_UART_ErrorCallback>:
 8003836:	4770      	bx	lr

08003838 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003838:	6803      	ldr	r3, [r0, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800383c:	68d9      	ldr	r1, [r3, #12]
{
 800383e:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8003840:	0716      	lsls	r6, r2, #28
{
 8003842:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003844:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8003846:	d107      	bne.n	8003858 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003848:	0696      	lsls	r6, r2, #26
 800384a:	d55a      	bpl.n	8003902 <HAL_UART_IRQHandler+0xca>
 800384c:	068d      	lsls	r5, r1, #26
 800384e:	d558      	bpl.n	8003902 <HAL_UART_IRQHandler+0xca>
}
 8003850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003854:	f7ff bfb5 	b.w	80037c2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003858:	f015 0501 	ands.w	r5, r5, #1
 800385c:	d102      	bne.n	8003864 <HAL_UART_IRQHandler+0x2c>
 800385e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003862:	d04e      	beq.n	8003902 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003864:	07d3      	lsls	r3, r2, #31
 8003866:	d505      	bpl.n	8003874 <HAL_UART_IRQHandler+0x3c>
 8003868:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800386a:	bf42      	ittt	mi
 800386c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800386e:	f043 0301 	orrmi.w	r3, r3, #1
 8003872:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003874:	0750      	lsls	r0, r2, #29
 8003876:	d504      	bpl.n	8003882 <HAL_UART_IRQHandler+0x4a>
 8003878:	b11d      	cbz	r5, 8003882 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800387a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003882:	0793      	lsls	r3, r2, #30
 8003884:	d504      	bpl.n	8003890 <HAL_UART_IRQHandler+0x58>
 8003886:	b11d      	cbz	r5, 8003890 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003888:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800388a:	f043 0304 	orr.w	r3, r3, #4
 800388e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003890:	0716      	lsls	r6, r2, #28
 8003892:	d504      	bpl.n	800389e <HAL_UART_IRQHandler+0x66>
 8003894:	b11d      	cbz	r5, 800389e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003896:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003898:	f043 0308 	orr.w	r3, r3, #8
 800389c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800389e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d066      	beq.n	8003972 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038a4:	0695      	lsls	r5, r2, #26
 80038a6:	d504      	bpl.n	80038b2 <HAL_UART_IRQHandler+0x7a>
 80038a8:	0688      	lsls	r0, r1, #26
 80038aa:	d502      	bpl.n	80038b2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7ff ff88 	bl	80037c2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80038b8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80038ba:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038bc:	d402      	bmi.n	80038c4 <HAL_UART_IRQHandler+0x8c>
 80038be:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80038c2:	d01a      	beq.n	80038fa <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80038c4:	f7ff fd7e 	bl	80033c4 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	0652      	lsls	r2, r2, #25
 80038ce:	d510      	bpl.n	80038f2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d0:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80038d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d8:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80038da:	b150      	cbz	r0, 80038f2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <HAL_UART_IRQHandler+0x13c>)
 80038de:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038e0:	f7fe f83c 	bl	800195c <HAL_DMA_Abort_IT>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d044      	beq.n	8003972 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80038ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80038f0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80038f2:	4620      	mov	r0, r4
 80038f4:	f7ff ff9f 	bl	8003836 <HAL_UART_ErrorCallback>
 80038f8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80038fa:	f7ff ff9c 	bl	8003836 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003900:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003902:	0616      	lsls	r6, r2, #24
 8003904:	d527      	bpl.n	8003956 <HAL_UART_IRQHandler+0x11e>
 8003906:	060d      	lsls	r5, r1, #24
 8003908:	d525      	bpl.n	8003956 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800390a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800390e:	2a21      	cmp	r2, #33	; 0x21
 8003910:	d12f      	bne.n	8003972 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003912:	68a2      	ldr	r2, [r4, #8]
 8003914:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003918:	6a22      	ldr	r2, [r4, #32]
 800391a:	d117      	bne.n	800394c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800391c:	8811      	ldrh	r1, [r2, #0]
 800391e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003922:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003924:	6921      	ldr	r1, [r4, #16]
 8003926:	b979      	cbnz	r1, 8003948 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8003928:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800392a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 800392c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800392e:	3a01      	subs	r2, #1
 8003930:	b292      	uxth	r2, r2
 8003932:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003934:	b9ea      	cbnz	r2, 8003972 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800393c:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8003948:	3201      	adds	r2, #1
 800394a:	e7ee      	b.n	800392a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800394c:	1c51      	adds	r1, r2, #1
 800394e:	6221      	str	r1, [r4, #32]
 8003950:	7812      	ldrb	r2, [r2, #0]
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	e7ea      	b.n	800392c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003956:	0650      	lsls	r0, r2, #25
 8003958:	d50b      	bpl.n	8003972 <HAL_UART_IRQHandler+0x13a>
 800395a:	064a      	lsls	r2, r1, #25
 800395c:	d509      	bpl.n	8003972 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003964:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003966:	2320      	movs	r3, #32
 8003968:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800396c:	4620      	mov	r0, r4
 800396e:	f7ff ff27 	bl	80037c0 <HAL_UART_TxCpltCallback>
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	08003979 	.word	0x08003979

08003978 <UART_DMAAbortOnError>:
{
 8003978:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800397a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8003980:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003982:	f7ff ff58 	bl	8003836 <HAL_UART_ErrorCallback>
 8003986:	bd08      	pop	{r3, pc}

08003988 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003988:	0189      	lsls	r1, r1, #6
 800398a:	f041 0120 	orr.w	r1, r1, #32
 800398e:	4a06      	ldr	r2, [pc, #24]	; (80039a8 <USB_FlushTxFifo+0x20>)
 8003990:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8003992:	3a01      	subs	r2, #1
 8003994:	d005      	beq.n	80039a2 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003996:	6903      	ldr	r3, [r0, #16]
 8003998:	f013 0320 	ands.w	r3, r3, #32
 800399c:	d1f9      	bne.n	8003992 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 800399e:	4618      	mov	r0, r3
 80039a0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80039a2:	2003      	movs	r0, #3
}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	00030d41 	.word	0x00030d41

080039ac <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80039ac:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80039b0:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 80039b4:	f010 0006 	ands.w	r0, r0, #6
 80039b8:	d012      	beq.n	80039e0 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80039ba:	6893      	ldr	r3, [r2, #8]
 80039bc:	f003 0306 	and.w	r3, r3, #6
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d00c      	beq.n	80039de <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80039c4:	6893      	ldr	r3, [r2, #8]
 80039c6:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d007      	beq.n	80039de <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80039ce:	6893      	ldr	r3, [r2, #8]
 80039d0:	f003 0306 	and.w	r3, r3, #6
 80039d4:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 80039d6:	bf14      	ite	ne
 80039d8:	2000      	movne	r0, #0
 80039da:	2002      	moveq	r0, #2
 80039dc:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 80039de:	2003      	movs	r0, #3
  }
  
  return speed;
}
 80039e0:	4770      	bx	lr

080039e2 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039e2:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80039e4:	784b      	ldrb	r3, [r1, #1]
 80039e6:	780c      	ldrb	r4, [r1, #0]
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80039e8:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 80039ec:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d11b      	bne.n	8003a2c <USB_ActivateEndpoint+0x4a>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80039f4:	40a3      	lsls	r3, r4
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	432b      	orrs	r3, r5
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80039fa:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 80039fe:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a00:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	0412      	lsls	r2, r2, #16
 8003a08:	d40e      	bmi.n	8003a28 <USB_ActivateEndpoint+0x46>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003a0a:	688a      	ldr	r2, [r1, #8]
 8003a0c:	78c8      	ldrb	r0, [r1, #3]
 8003a0e:	681d      	ldr	r5, [r3, #0]
 8003a10:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003a14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a1c:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8003a20:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 8003a24:	4328      	orrs	r0, r5
 8003a26:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8003a28:	2000      	movs	r0, #0
 8003a2a:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8003a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a30:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a32:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8003a36:	432b      	orrs	r3, r5
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a38:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8003a3c:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a3e:	6803      	ldr	r3, [r0, #0]
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	d4f1      	bmi.n	8003a28 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003a44:	688b      	ldr	r3, [r1, #8]
 8003a46:	78c9      	ldrb	r1, [r1, #3]
 8003a48:	6802      	ldr	r2, [r0, #0]
 8003a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a56:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	6003      	str	r3, [r0, #0]
 8003a5e:	e7e3      	b.n	8003a28 <USB_ActivateEndpoint+0x46>

08003a60 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a62:	784b      	ldrb	r3, [r1, #1]
 8003a64:	780c      	ldrb	r4, [r1, #0]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	694b      	ldr	r3, [r1, #20]
 8003a6a:	d177      	bne.n	8003b5c <USB_EPStartXfer+0xfc>
 8003a6c:	2620      	movs	r6, #32
 8003a6e:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003a72:	fb16 5404 	smlabb	r4, r6, r4, r5
 8003a76:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0U)
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d138      	bne.n	8003aee <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003a7c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8003a80:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003a84:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003a86:	6926      	ldr	r6, [r4, #16]
 8003a88:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8003a8c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003a8e:	6926      	ldr	r6, [r4, #16]
 8003a90:	0cf6      	lsrs	r6, r6, #19
 8003a92:	04f6      	lsls	r6, r6, #19
 8003a94:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8003a96:	2a01      	cmp	r2, #1
 8003a98:	d150      	bne.n	8003b3c <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a9a:	780c      	ldrb	r4, [r1, #0]
 8003a9c:	690e      	ldr	r6, [r1, #16]
 8003a9e:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8003aa2:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003aa4:	78ce      	ldrb	r6, [r1, #3]
 8003aa6:	2e01      	cmp	r6, #1
 8003aa8:	d10f      	bne.n	8003aca <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003aaa:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003aae:	780f      	ldrb	r7, [r1, #0]
 8003ab0:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003ab4:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ab8:	fb14 5407 	smlabb	r4, r4, r7, r5
 8003abc:	6827      	ldr	r7, [r4, #0]
 8003abe:	bf0c      	ite	eq
 8003ac0:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ac4:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8003ac8:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003aca:	780f      	ldrb	r7, [r1, #0]
 8003acc:	eb05 1547 	add.w	r5, r5, r7, lsl #5
    
    if (ep->type == EP_TYPE_ISOC)
 8003ad0:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ad2:	682c      	ldr	r4, [r5, #0]
 8003ad4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003ad8:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8003ada:	d105      	bne.n	8003ae8 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003adc:	9200      	str	r2, [sp, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	463a      	mov	r2, r7
 8003ae2:	68c9      	ldr	r1, [r1, #12]
 8003ae4:	f000 f8ef 	bl	8003cc6 <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8003ae8:	2000      	movs	r0, #0
 8003aea:	b003      	add	sp, #12
 8003aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003aee:	0cf6      	lsrs	r6, r6, #19
 8003af0:	04f6      	lsls	r6, r6, #19
 8003af2:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003af4:	6926      	ldr	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003af6:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003af8:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8003afc:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003b00:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003b02:	19de      	adds	r6, r3, r7
 8003b04:	3e01      	subs	r6, #1
 8003b06:	fbb6 f7f7 	udiv	r7, r6, r7
 8003b0a:	4e37      	ldr	r6, [pc, #220]	; (8003be8 <USB_EPStartXfer+0x188>)
 8003b0c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8003b10:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 8003b14:	ea46 060e 	orr.w	r6, r6, lr
 8003b18:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003b1a:	6927      	ldr	r7, [r4, #16]
 8003b1c:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8003b20:	433e      	orrs	r6, r7
 8003b22:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003b24:	78ce      	ldrb	r6, [r1, #3]
 8003b26:	2e01      	cmp	r6, #1
 8003b28:	d15a      	bne.n	8003be0 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003b2a:	6926      	ldr	r6, [r4, #16]
 8003b2c:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8003b30:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003b32:	6926      	ldr	r6, [r4, #16]
 8003b34:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8003b38:	6126      	str	r6, [r4, #16]
 8003b3a:	e7ac      	b.n	8003a96 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 8003b3c:	78ce      	ldrb	r6, [r1, #3]
 8003b3e:	2e01      	cmp	r6, #1
 8003b40:	d0b3      	beq.n	8003aaa <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0U)
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ae      	beq.n	8003aa4 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8003b46:	f891 e000 	ldrb.w	lr, [r1]
 8003b4a:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8003b4e:	2401      	movs	r4, #1
 8003b50:	fa04 f40e 	lsl.w	r4, r4, lr
 8003b54:	433c      	orrs	r4, r7
 8003b56:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8003b5a:	e7a3      	b.n	8003aa4 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003b5c:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8003b60:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8003b64:	6925      	ldr	r5, [r4, #16]
 8003b66:	0ced      	lsrs	r5, r5, #19
 8003b68:	04ed      	lsls	r5, r5, #19
 8003b6a:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003b6c:	6925      	ldr	r5, [r4, #16]
 8003b6e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003b72:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003b76:	6125      	str	r5, [r4, #16]
 8003b78:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8003b7a:	b9fb      	cbnz	r3, 8003bbc <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b7c:	6923      	ldr	r3, [r4, #16]
 8003b7e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003b82:	431d      	orrs	r5, r3
 8003b84:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003b86:	6923      	ldr	r3, [r4, #16]
 8003b88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b8c:	6123      	str	r3, [r4, #16]
    if (dma == 1U)
 8003b8e:	2a01      	cmp	r2, #1
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003b90:	bf04      	itt	eq
 8003b92:	68cb      	ldreq	r3, [r1, #12]
 8003b94:	6163      	streq	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8003b96:	78cb      	ldrb	r3, [r1, #3]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10a      	bne.n	8003bb2 <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003b9c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003ba0:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	bf0c      	ite	eq
 8003ba8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003bac:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bb8:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8003bba:	e795      	b.n	8003ae8 <USB_EPStartXfer+0x88>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003bbc:	4e0a      	ldr	r6, [pc, #40]	; (8003be8 <USB_EPStartXfer+0x188>)
 8003bbe:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003bc0:	442b      	add	r3, r5
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003bc8:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8003bcc:	433e      	orrs	r6, r7
 8003bce:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	6926      	ldr	r6, [r4, #16]
 8003bd4:	435d      	muls	r5, r3
 8003bd6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003bda:	4335      	orrs	r5, r6
 8003bdc:	6125      	str	r5, [r4, #16]
 8003bde:	e7d6      	b.n	8003b8e <USB_EPStartXfer+0x12e>
    if (dma == 1U)
 8003be0:	2a01      	cmp	r2, #1
 8003be2:	d1ae      	bne.n	8003b42 <USB_EPStartXfer+0xe2>
 8003be4:	e759      	b.n	8003a9a <USB_EPStartXfer+0x3a>
 8003be6:	bf00      	nop
 8003be8:	1ff80000 	.word	0x1ff80000

08003bec <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003bec:	784b      	ldrb	r3, [r1, #1]
 8003bee:	2b01      	cmp	r3, #1
{
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	780b      	ldrb	r3, [r1, #0]
 8003bf4:	694d      	ldr	r5, [r1, #20]
  if (ep->is_in == 1U)
 8003bf6:	d143      	bne.n	8003c80 <USB_EP0StartXfer+0x94>
 8003bf8:	2420      	movs	r4, #32
 8003bfa:	f500 6610 	add.w	r6, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003bfe:	fb14 6303 	smlabb	r3, r4, r3, r6
 8003c02:	691c      	ldr	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8003c04:	b9cd      	cbnz	r5, 8003c3a <USB_EP0StartXfer+0x4e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003c06:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003c0a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003c0e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003c10:	691c      	ldr	r4, [r3, #16]
 8003c12:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003c16:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003c18:	691c      	ldr	r4, [r3, #16]
 8003c1a:	0ce4      	lsrs	r4, r4, #19
 8003c1c:	04e4      	lsls	r4, r4, #19
 8003c1e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003c20:	780d      	ldrb	r5, [r1, #0]
 8003c22:	eb06 1345 	add.w	r3, r6, r5, lsl #5
    
    if (dma == 1)
 8003c26:	2a01      	cmp	r2, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003c28:	681c      	ldr	r4, [r3, #0]
 8003c2a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8003c2e:	601c      	str	r4, [r3, #0]
    if (dma == 1)
 8003c30:	d11b      	bne.n	8003c6a <USB_EP0StartXfer+0x7e>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c32:	690a      	ldr	r2, [r1, #16]
 8003c34:	615a      	str	r2, [r3, #20]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8003c36:	2000      	movs	r0, #0
 8003c38:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c3a:	0ce4      	lsrs	r4, r4, #19
 8003c3c:	04e4      	lsls	r4, r4, #19
 8003c3e:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003c40:	691c      	ldr	r4, [r3, #16]
 8003c42:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003c46:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003c4a:	611c      	str	r4, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8003c4c:	688c      	ldr	r4, [r1, #8]
 8003c4e:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8003c50:	bf88      	it	hi
 8003c52:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003c54:	691c      	ldr	r4, [r3, #16]
 8003c56:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003c5a:	611c      	str	r4, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003c5c:	694c      	ldr	r4, [r1, #20]
 8003c5e:	691d      	ldr	r5, [r3, #16]
 8003c60:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8003c64:	432c      	orrs	r4, r5
 8003c66:	611c      	str	r4, [r3, #16]
 8003c68:	e7da      	b.n	8003c20 <USB_EP0StartXfer+0x34>
      if (ep->xfer_len > 0U)
 8003c6a:	694b      	ldr	r3, [r1, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0e2      	beq.n	8003c36 <USB_EP0StartXfer+0x4a>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003c70:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003c74:	2301      	movs	r3, #1
 8003c76:	40ab      	lsls	r3, r5
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8003c7e:	e7da      	b.n	8003c36 <USB_EP0StartXfer+0x4a>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003c80:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003c84:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003c88:	6903      	ldr	r3, [r0, #16]
 8003c8a:	0cdb      	lsrs	r3, r3, #19
 8003c8c:	04db      	lsls	r3, r3, #19
 8003c8e:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003c90:	6903      	ldr	r3, [r0, #16]
 8003c92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c9a:	6103      	str	r3, [r0, #16]
 8003c9c:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8003c9e:	b105      	cbz	r5, 8003ca2 <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8003ca0:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003ca2:	6904      	ldr	r4, [r0, #16]
 8003ca4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003ca8:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003caa:	6904      	ldr	r4, [r0, #16]
 8003cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb0:	4323      	orrs	r3, r4
    if (dma == 1U)
 8003cb2:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003cb4:	6103      	str	r3, [r0, #16]
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003cb6:	bf04      	itt	eq
 8003cb8:	68cb      	ldreq	r3, [r1, #12]
 8003cba:	6143      	streq	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003cbc:	6803      	ldr	r3, [r0, #0]
 8003cbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cc2:	6003      	str	r3, [r0, #0]
 8003cc4:	e7b7      	b.n	8003c36 <USB_EP0StartXfer+0x4a>

08003cc6 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003cc6:	b510      	push	{r4, lr}
 8003cc8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8003ccc:	b94c      	cbnz	r4, 8003ce2 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8003cce:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003cd0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003cd4:	f023 0303 	bic.w	r3, r3, #3
 8003cd8:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8003cdc:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8003cde:	4299      	cmp	r1, r3
 8003ce0:	d101      	bne.n	8003ce6 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003ce6:	f851 0b04 	ldr.w	r0, [r1], #4
 8003cea:	6010      	str	r0, [r2, #0]
 8003cec:	e7f7      	b.n	8003cde <USB_WritePacket+0x18>

08003cee <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8003cee:	3203      	adds	r2, #3
 8003cf0:	f022 0203 	bic.w	r2, r2, #3
 8003cf4:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003cf6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003cfa:	4291      	cmp	r1, r2
 8003cfc:	d101      	bne.n	8003d02 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8003cfe:	4608      	mov	r0, r1
 8003d00:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003d02:	6803      	ldr	r3, [r0, #0]
 8003d04:	f841 3b04 	str.w	r3, [r1], #4
 8003d08:	e7f7      	b.n	8003cfa <USB_ReadPacket+0xc>

08003d0a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003d0a:	784b      	ldrb	r3, [r1, #1]
 8003d0c:	780a      	ldrb	r2, [r1, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	f04f 0320 	mov.w	r3, #32
 8003d14:	d10b      	bne.n	8003d2e <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8003d16:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003d1a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003d1e:	6803      	ldr	r3, [r0, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	db0b      	blt.n	8003d3c <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003d24:	6803      	ldr	r3, [r0, #0]
 8003d26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d2a:	6003      	str	r3, [r0, #0]
 8003d2c:	e006      	b.n	8003d3c <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8003d2e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003d32:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003d36:	6803      	ldr	r3, [r0, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	daf3      	bge.n	8003d24 <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003d3c:	6803      	ldr	r3, [r0, #0]
 8003d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d42:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8003d44:	2000      	movs	r0, #0
 8003d46:	4770      	bx	lr

08003d48 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003d48:	784b      	ldrb	r3, [r1, #1]
 8003d4a:	780a      	ldrb	r2, [r1, #0]
 8003d4c:	2b01      	cmp	r3, #1
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d4e:	bf0c      	ite	eq
 8003d50:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d54:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8003d58:	2320      	movs	r3, #32
 8003d5a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003d5e:	6803      	ldr	r3, [r0, #0]
 8003d60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d64:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003d66:	78cb      	ldrb	r3, [r1, #3]
 8003d68:	3b02      	subs	r3, #2
 8003d6a:	2b01      	cmp	r3, #1
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d6c:	bf9e      	ittt	ls
 8003d6e:	6803      	ldrls	r3, [r0, #0]
 8003d70:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8003d74:	6003      	strls	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8003d76:	2000      	movs	r0, #0
 8003d78:	4770      	bx	lr

08003d7a <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003d7a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003d7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d82:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8003d86:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003d8a:	0109      	lsls	r1, r1, #4
 8003d8c:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003d90:	4319      	orrs	r1, r3
 8003d92:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8003d96:	2000      	movs	r0, #0
 8003d98:	4770      	bx	lr

08003d9a <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8003d9a:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8003d9c:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8003d9e:	4010      	ands	r0, r2
 8003da0:	4770      	bx	lr

08003da2 <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003da2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003da6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8003daa:	69c0      	ldr	r0, [r0, #28]
 8003dac:	4018      	ands	r0, r3
  return ((v & 0xffff0000U) >> 16U);
}
 8003dae:	0c00      	lsrs	r0, r0, #16
 8003db0:	4770      	bx	lr

08003db2 <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003db2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003db6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8003dba:	69c0      	ldr	r0, [r0, #28]
 8003dbc:	4018      	ands	r0, r3
  return ((v & 0xFFFFU));
}
 8003dbe:	b280      	uxth	r0, r0
 8003dc0:	4770      	bx	lr

08003dc2 <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003dc2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8003dc6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8003dca:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003dce:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8003dd0:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8003dd2:	4010      	ands	r0, r2
 8003dd4:	4770      	bx	lr

08003dd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003dd6:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003dd8:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003ddc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003de0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003de4:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003de6:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003dea:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003dec:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	4323      	orrs	r3, r4
  return v;
}
 8003df2:	4018      	ands	r0, r3
 8003df4:	bd10      	pop	{r4, pc}

08003df6 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8003df6:	6940      	ldr	r0, [r0, #20]
}
 8003df8:	f000 0001 	and.w	r0, r0, #1
 8003dfc:	4770      	bx	lr

08003dfe <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003dfe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003e02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003e0e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	f002 0206 	and.w	r2, r2, #6
 8003e18:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8003e1a:	bf02      	ittt	eq
 8003e1c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8003e20:	f042 0203 	orreq.w	r2, r2, #3
 8003e24:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 8003e30:	2000      	movs	r0, #0
 8003e32:	4770      	bx	lr

08003e34 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003e34:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003e36:	2400      	movs	r4, #0
 8003e38:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003e3c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003e40:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003e44:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003e48:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003e4c:	f044 0418 	orr.w	r4, r4, #24
 8003e50:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003e54:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 8003e58:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003e5a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003e5e:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003e62:	bf08      	it	eq
 8003e64:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003e68:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003e6c:	bf04      	itt	eq
 8003e6e:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8003e72:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8003e76:	2000      	movs	r0, #0
 8003e78:	bd10      	pop	{r4, pc}

08003e7a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003e7a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003e7c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e80:	b90b      	cbnz	r3, 8003e86 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003e82:	2002      	movs	r0, #2
 8003e84:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4798      	blx	r3
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d1f9      	bne.n	8003e82 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003e8e:	bd08      	pop	{r3, pc}

08003e90 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003e90:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003e92:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4798      	blx	r3
  return USBD_OK;
}
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	bd08      	pop	{r3, pc}

08003e9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003e9e:	b538      	push	{r3, r4, r5, lr}
 8003ea0:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003ea2:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f000 fa75 	bl	8004396 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003eac:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003eae:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8003eb2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8003eb6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003eba:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003ebe:	f001 031f 	and.w	r3, r1, #31
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d00e      	beq.n	8003ee4 <USBD_LL_SetupStage+0x46>
 8003ec6:	d307      	bcc.n	8003ed8 <USBD_LL_SetupStage+0x3a>
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d010      	beq.n	8003eee <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003ecc:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f001 f879 	bl	8004fc8 <USBD_LL_StallEP>
    break;
 8003ed6:	e003      	b.n	8003ee0 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003ed8:	4629      	mov	r1, r5
 8003eda:	4620      	mov	r0, r4
 8003edc:	f000 f8e6 	bl	80040ac <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f000 f9da 	bl	80042a0 <USBD_StdItfReq>
    break;
 8003eec:	e7f8      	b.n	8003ee0 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003eee:	4629      	mov	r1, r5
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 f9ed 	bl	80042d0 <USBD_StdEPReq>
    break;
 8003ef6:	e7f3      	b.n	8003ee0 <USBD_LL_SetupStage+0x42>

08003ef8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4604      	mov	r4, r0
 8003efc:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003efe:	bb11      	cbnz	r1, 8003f46 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003f00:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d10f      	bne.n	8003f28 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8003f08:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003f0c:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d90b      	bls.n	8003f2c <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003f14:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003f16:	429a      	cmp	r2, r3
 8003f18:	bf28      	it	cs
 8003f1a:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003f1c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8003f20:	b292      	uxth	r2, r2
 8003f22:	4629      	mov	r1, r5
 8003f24:	f000 fa60 	bl	80043e8 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003f28:	2000      	movs	r0, #0
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003f2c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	b123      	cbz	r3, 8003f3e <USBD_LL_DataOutStage+0x46>
 8003f34:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003f38:	2a03      	cmp	r2, #3
 8003f3a:	d100      	bne.n	8003f3e <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003f3c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f000 fa5a 	bl	80043f8 <USBD_CtlSendStatus>
 8003f44:	e7f0      	b.n	8003f28 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8003f46:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0eb      	beq.n	8003f28 <USBD_LL_DataOutStage+0x30>
 8003f50:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003f54:	2a03      	cmp	r2, #3
 8003f56:	d1e7      	bne.n	8003f28 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8003f58:	4798      	blx	r3
 8003f5a:	e7e5      	b.n	8003f28 <USBD_LL_DataOutStage+0x30>

08003f5c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	4613      	mov	r3, r2
 8003f60:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003f62:	460e      	mov	r6, r1
 8003f64:	2900      	cmp	r1, #0
 8003f66:	d13d      	bne.n	8003fe4 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003f68:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003f6c:	2a02      	cmp	r2, #2
 8003f6e:	d10f      	bne.n	8003f90 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8003f70:	69c5      	ldr	r5, [r0, #28]
 8003f72:	6a02      	ldr	r2, [r0, #32]
 8003f74:	4295      	cmp	r5, r2
 8003f76:	d914      	bls.n	8003fa2 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8003f78:	1aaa      	subs	r2, r5, r2
 8003f7a:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	b292      	uxth	r2, r2
 8003f80:	f000 fa2a 	bl	80043d8 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003f84:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003f86:	461a      	mov	r2, r3
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f001 f868 	bl	8005060 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003f90:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d102      	bne.n	8003f9e <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8003fa2:	6983      	ldr	r3, [r0, #24]
 8003fa4:	fbb3 f5f2 	udiv	r5, r3, r2
 8003fa8:	fb02 3515 	mls	r5, r2, r5, r3
 8003fac:	b965      	cbnz	r5, 8003fc8 <USBD_LL_DataInStage+0x6c>
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d80a      	bhi.n	8003fc8 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8003fb2:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d206      	bcs.n	8003fc8 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003fba:	462a      	mov	r2, r5
 8003fbc:	f000 fa0c 	bl	80043d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003fc0:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	e7de      	b.n	8003f86 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003fc8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	b12b      	cbz	r3, 8003fdc <USBD_LL_DataInStage+0x80>
 8003fd0:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003fd4:	2a03      	cmp	r2, #3
 8003fd6:	d101      	bne.n	8003fdc <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8003fd8:	4620      	mov	r0, r4
 8003fda:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f000 fa16 	bl	800440e <USBD_CtlReceiveStatus>
 8003fe2:	e7d5      	b.n	8003f90 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003fe4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0d7      	beq.n	8003f9e <USBD_LL_DataInStage+0x42>
 8003fee:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003ff2:	2a03      	cmp	r2, #3
 8003ff4:	d1d3      	bne.n	8003f9e <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8003ff6:	4798      	blx	r3
 8003ff8:	e7d1      	b.n	8003f9e <USBD_LL_DataInStage+0x42>

08003ffa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003ffa:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003ffc:	2200      	movs	r2, #0
{
 8003ffe:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8004000:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004002:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8004004:	2340      	movs	r3, #64	; 0x40
 8004006:	f000 ffcf 	bl	8004fa8 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800400a:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800400c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8004010:	2200      	movs	r2, #0
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	4620      	mov	r0, r4
 8004016:	f000 ffc7 	bl	8004fa8 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800401a:	2301      	movs	r3, #1
 800401c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004020:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004024:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8004026:	b12b      	cbz	r3, 8004034 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004028:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800402c:	7921      	ldrb	r1, [r4, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4620      	mov	r0, r4
 8004032:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8004034:	2000      	movs	r0, #0
 8004036:	bd38      	pop	{r3, r4, r5, pc}

08004038 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004038:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800403a:	2000      	movs	r0, #0
 800403c:	4770      	bx	lr

0800403e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800403e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004042:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004046:	2304      	movs	r3, #4
 8004048:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800404c:	2000      	movs	r0, #0
 800404e:	4770      	bx	lr

08004050 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8004050:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8004054:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8004058:	2000      	movs	r0, #0
 800405a:	4770      	bx	lr

0800405c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800405c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800405e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004062:	2a03      	cmp	r2, #3
 8004064:	d104      	bne.n	8004070 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004066:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	b103      	cbz	r3, 8004070 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800406e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004070:	2000      	movs	r0, #0
 8004072:	bd08      	pop	{r3, pc}

08004074 <USBD_LL_IsoINIncomplete>:
 8004074:	2000      	movs	r0, #0
 8004076:	4770      	bx	lr

08004078 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8004078:	2000      	movs	r0, #0
 800407a:	4770      	bx	lr

0800407c <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 800407c:	2000      	movs	r0, #0
 800407e:	4770      	bx	lr

08004080 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004080:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004082:	2201      	movs	r2, #1
 8004084:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004088:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 800408c:	7901      	ldrb	r1, [r0, #4]
 800408e:	6852      	ldr	r2, [r2, #4]
 8004090:	4790      	blx	r2
   
  return USBD_OK;
}
 8004092:	2000      	movs	r0, #0
 8004094:	bd08      	pop	{r3, pc}

08004096 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8004096:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8004098:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800409a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800409c:	f000 ff94 	bl	8004fc8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80040a0:	4620      	mov	r0, r4
 80040a2:	2100      	movs	r1, #0
}
 80040a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80040a8:	f000 bf8e 	b.w	8004fc8 <USBD_LL_StallEP>

080040ac <USBD_StdDevReq>:
{
 80040ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80040ae:	784b      	ldrb	r3, [r1, #1]
{
 80040b0:	4604      	mov	r4, r0
 80040b2:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80040b4:	2b09      	cmp	r3, #9
 80040b6:	d879      	bhi.n	80041ac <USBD_StdDevReq+0x100>
 80040b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80040bc:	00e500c9 	.word	0x00e500c9
 80040c0:	00d90078 	.word	0x00d90078
 80040c4:	006d0078 	.word	0x006d0078
 80040c8:	0078000a 	.word	0x0078000a
 80040cc:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80040d0:	884b      	ldrh	r3, [r1, #2]
 80040d2:	0a1a      	lsrs	r2, r3, #8
 80040d4:	3a01      	subs	r2, #1
 80040d6:	2a06      	cmp	r2, #6
 80040d8:	d868      	bhi.n	80041ac <USBD_StdDevReq+0x100>
 80040da:	e8df f002 	tbb	[pc, r2]
 80040de:	1c04      	.short	0x1c04
 80040e0:	49676729 	.word	0x49676729
 80040e4:	52          	.byte	0x52
 80040e5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80040e6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80040ea:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80040ec:	7c20      	ldrb	r0, [r4, #16]
 80040ee:	f10d 0106 	add.w	r1, sp, #6
 80040f2:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80040f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80040f8:	2a00      	cmp	r2, #0
 80040fa:	d067      	beq.n	80041cc <USBD_StdDevReq+0x120>
 80040fc:	88eb      	ldrh	r3, [r5, #6]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d064      	beq.n	80041cc <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8004102:	429a      	cmp	r2, r3
 8004104:	bf28      	it	cs
 8004106:	461a      	movcs	r2, r3
 8004108:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800410c:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800410e:	4620      	mov	r0, r4
 8004110:	f000 f955 	bl	80043be <USBD_CtlSendData>
 8004114:	e05a      	b.n	80041cc <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004116:	7c02      	ldrb	r2, [r0, #16]
 8004118:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800411c:	b932      	cbnz	r2, 800412c <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004120:	f10d 0006 	add.w	r0, sp, #6
 8004124:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004126:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004128:	7043      	strb	r3, [r0, #1]
 800412a:	e7e3      	b.n	80040f4 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	e7f7      	b.n	8004120 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b05      	cmp	r3, #5
 8004134:	d83a      	bhi.n	80041ac <USBD_StdDevReq+0x100>
 8004136:	e8df f003 	tbb	[pc, r3]
 800413a:	0703      	.short	0x0703
 800413c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004140:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	e7d1      	b.n	80040ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004148:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	e7cd      	b.n	80040ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004150:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	e7c9      	b.n	80040ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004158:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	e7c5      	b.n	80040ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004160:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	e7c1      	b.n	80040ec <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004168:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	e7bd      	b.n	80040ec <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004170:	7c03      	ldrb	r3, [r0, #16]
 8004172:	b9db      	cbnz	r3, 80041ac <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004174:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004178:	f10d 0006 	add.w	r0, sp, #6
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	4798      	blx	r3
 8004180:	e7b8      	b.n	80040f4 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004182:	7c03      	ldrb	r3, [r0, #16]
 8004184:	b993      	cbnz	r3, 80041ac <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004186:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800418a:	f10d 0006 	add.w	r0, sp, #6
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004192:	2307      	movs	r3, #7
 8004194:	e7c8      	b.n	8004128 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004196:	888b      	ldrh	r3, [r1, #4]
 8004198:	b943      	cbnz	r3, 80041ac <USBD_StdDevReq+0x100>
 800419a:	88cb      	ldrh	r3, [r1, #6]
 800419c:	b933      	cbnz	r3, 80041ac <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800419e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80041a2:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80041a4:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80041a6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80041aa:	d103      	bne.n	80041b4 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80041ac:	4620      	mov	r0, r4
 80041ae:	f7ff ff72 	bl	8004096 <USBD_CtlError.constprop.0>
    break;
 80041b2:	e00b      	b.n	80041cc <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80041b4:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80041b8:	4629      	mov	r1, r5
 80041ba:	f000 ff35 	bl	8005028 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80041be:	4620      	mov	r0, r4
 80041c0:	f000 f91a 	bl	80043f8 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80041c4:	b12d      	cbz	r5, 80041d2 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80041c6:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80041c8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80041cc:	2000      	movs	r0, #0
 80041ce:	b003      	add	sp, #12
 80041d0:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80041d2:	2301      	movs	r3, #1
 80041d4:	e7f8      	b.n	80041c8 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80041d6:	7889      	ldrb	r1, [r1, #2]
 80041d8:	4d30      	ldr	r5, [pc, #192]	; (800429c <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80041da:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80041dc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80041de:	d8e5      	bhi.n	80041ac <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80041e0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d00c      	beq.n	8004202 <USBD_StdDevReq+0x156>
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d1df      	bne.n	80041ac <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80041ec:	b9b1      	cbnz	r1, 800421c <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80041ee:	2302      	movs	r3, #2
 80041f0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80041f4:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80041f6:	f7ff fe4b 	bl	8003e90 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80041fa:	4620      	mov	r0, r4
 80041fc:	f000 f8fc 	bl	80043f8 <USBD_CtlSendStatus>
 8004200:	e7e4      	b.n	80041cc <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8004202:	2900      	cmp	r1, #0
 8004204:	d0f9      	beq.n	80041fa <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8004206:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004208:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800420a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800420c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004210:	4620      	mov	r0, r4
 8004212:	f7ff fe32 	bl	8003e7a <USBD_SetClassConfig>
 8004216:	2802      	cmp	r0, #2
 8004218:	d1ef      	bne.n	80041fa <USBD_StdDevReq+0x14e>
 800421a:	e7c7      	b.n	80041ac <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 800421c:	6841      	ldr	r1, [r0, #4]
 800421e:	2901      	cmp	r1, #1
 8004220:	d0eb      	beq.n	80041fa <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004222:	b2c9      	uxtb	r1, r1
 8004224:	f7ff fe34 	bl	8003e90 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004228:	7829      	ldrb	r1, [r5, #0]
 800422a:	6061      	str	r1, [r4, #4]
 800422c:	e7f0      	b.n	8004210 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800422e:	88ca      	ldrh	r2, [r1, #6]
 8004230:	2a01      	cmp	r2, #1
 8004232:	d1bb      	bne.n	80041ac <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8004234:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004238:	2b02      	cmp	r3, #2
 800423a:	d003      	beq.n	8004244 <USBD_StdDevReq+0x198>
 800423c:	2b03      	cmp	r3, #3
 800423e:	d1b5      	bne.n	80041ac <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 8004240:	1d01      	adds	r1, r0, #4
 8004242:	e764      	b.n	800410e <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8004244:	4601      	mov	r1, r0
 8004246:	2300      	movs	r3, #0
 8004248:	f841 3f08 	str.w	r3, [r1, #8]!
 800424c:	e75f      	b.n	800410e <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800424e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004252:	3b02      	subs	r3, #2
 8004254:	2b01      	cmp	r3, #1
 8004256:	d8a9      	bhi.n	80041ac <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004258:	2301      	movs	r3, #1
 800425a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800425c:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8004260:	b10b      	cbz	r3, 8004266 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004262:	2303      	movs	r3, #3
 8004264:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8004266:	2202      	movs	r2, #2
 8004268:	f104 010c 	add.w	r1, r4, #12
 800426c:	e74f      	b.n	800410e <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800426e:	884b      	ldrh	r3, [r1, #2]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d1ab      	bne.n	80041cc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8004274:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004278:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800427c:	4629      	mov	r1, r5
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4620      	mov	r0, r4
 8004282:	4798      	blx	r3
 8004284:	e7b9      	b.n	80041fa <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8004286:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800428a:	3b02      	subs	r3, #2
 800428c:	2b01      	cmp	r3, #1
 800428e:	d88d      	bhi.n	80041ac <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004290:	884b      	ldrh	r3, [r1, #2]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d19a      	bne.n	80041cc <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8004296:	2300      	movs	r3, #0
 8004298:	e7ec      	b.n	8004274 <USBD_StdDevReq+0x1c8>
 800429a:	bf00      	nop
 800429c:	20000228 	.word	0x20000228

080042a0 <USBD_StdItfReq>:
{
 80042a0:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 80042a2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80042a6:	2b03      	cmp	r3, #3
{
 80042a8:	4604      	mov	r4, r0
 80042aa:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80042ac:	d10d      	bne.n	80042ca <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80042ae:	790b      	ldrb	r3, [r1, #4]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d80a      	bhi.n	80042ca <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80042b4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80042bc:	88eb      	ldrh	r3, [r5, #6]
 80042be:	b913      	cbnz	r3, 80042c6 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 f899 	bl	80043f8 <USBD_CtlSendStatus>
}
 80042c6:	2000      	movs	r0, #0
 80042c8:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80042ca:	f7ff fee4 	bl	8004096 <USBD_CtlError.constprop.0>
    break;
 80042ce:	e7fa      	b.n	80042c6 <USBD_StdItfReq+0x26>

080042d0 <USBD_StdEPReq>:
{
 80042d0:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80042d2:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80042d4:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80042d6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80042da:	2a20      	cmp	r2, #32
{
 80042dc:	4604      	mov	r4, r0
 80042de:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80042e0:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80042e2:	d105      	bne.n	80042f0 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80042e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4798      	blx	r3
}
 80042ec:	2000      	movs	r0, #0
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80042f0:	784a      	ldrb	r2, [r1, #1]
 80042f2:	2a01      	cmp	r2, #1
 80042f4:	d01c      	beq.n	8004330 <USBD_StdEPReq+0x60>
 80042f6:	d32a      	bcc.n	800434e <USBD_StdEPReq+0x7e>
 80042f8:	2a03      	cmp	r2, #3
 80042fa:	d1f7      	bne.n	80042ec <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80042fc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004300:	2a02      	cmp	r2, #2
 8004302:	d040      	beq.n	8004386 <USBD_StdEPReq+0xb6>
 8004304:	2a03      	cmp	r2, #3
 8004306:	d002      	beq.n	800430e <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8004308:	f7ff fec5 	bl	8004096 <USBD_CtlError.constprop.0>
      break;
 800430c:	e7ee      	b.n	80042ec <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800430e:	884a      	ldrh	r2, [r1, #2]
 8004310:	b922      	cbnz	r2, 800431c <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004312:	065e      	lsls	r6, r3, #25
 8004314:	d002      	beq.n	800431c <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8004316:	4619      	mov	r1, r3
 8004318:	f000 fe56 	bl	8004fc8 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800431c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004320:	4629      	mov	r1, r5
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4620      	mov	r0, r4
 8004326:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004328:	4620      	mov	r0, r4
 800432a:	f000 f865 	bl	80043f8 <USBD_CtlSendStatus>
 800432e:	e7dd      	b.n	80042ec <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8004330:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004334:	2a02      	cmp	r2, #2
 8004336:	d026      	beq.n	8004386 <USBD_StdEPReq+0xb6>
 8004338:	2a03      	cmp	r2, #3
 800433a:	d1e5      	bne.n	8004308 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800433c:	884a      	ldrh	r2, [r1, #2]
 800433e:	2a00      	cmp	r2, #0
 8004340:	d1d4      	bne.n	80042ec <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8004342:	0659      	lsls	r1, r3, #25
 8004344:	d0f0      	beq.n	8004328 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004346:	4619      	mov	r1, r3
 8004348:	f000 fe4c 	bl	8004fe4 <USBD_LL_ClearStallEP>
 800434c:	e7e6      	b.n	800431c <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800434e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004352:	2a02      	cmp	r2, #2
 8004354:	d017      	beq.n	8004386 <USBD_StdEPReq+0xb6>
 8004356:	2a03      	cmp	r2, #3
 8004358:	d1d6      	bne.n	8004308 <USBD_StdEPReq+0x38>
 800435a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800435e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004362:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004366:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004368:	bf14      	ite	ne
 800436a:	3514      	addne	r5, #20
 800436c:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004370:	f000 fe46 	bl	8005000 <USBD_LL_IsStallEP>
 8004374:	b168      	cbz	r0, 8004392 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8004376:	2301      	movs	r3, #1
 8004378:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800437a:	2202      	movs	r2, #2
 800437c:	4629      	mov	r1, r5
 800437e:	4620      	mov	r0, r4
 8004380:	f000 f81d 	bl	80043be <USBD_CtlSendData>
      break;
 8004384:	e7b2      	b.n	80042ec <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8004386:	065a      	lsls	r2, r3, #25
 8004388:	d0b0      	beq.n	80042ec <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800438a:	4619      	mov	r1, r3
 800438c:	f000 fe1c 	bl	8004fc8 <USBD_LL_StallEP>
 8004390:	e7ac      	b.n	80042ec <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8004392:	6028      	str	r0, [r5, #0]
 8004394:	e7f1      	b.n	800437a <USBD_StdEPReq+0xaa>

08004396 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004396:	780b      	ldrb	r3, [r1, #0]
 8004398:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800439a:	784b      	ldrb	r3, [r1, #1]
 800439c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800439e:	78ca      	ldrb	r2, [r1, #3]
 80043a0:	788b      	ldrb	r3, [r1, #2]
 80043a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80043a6:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80043a8:	794a      	ldrb	r2, [r1, #5]
 80043aa:	790b      	ldrb	r3, [r1, #4]
 80043ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80043b0:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80043b2:	79ca      	ldrb	r2, [r1, #7]
 80043b4:	798b      	ldrb	r3, [r1, #6]
 80043b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80043ba:	80c3      	strh	r3, [r0, #6]
 80043bc:	4770      	bx	lr

080043be <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80043be:	b510      	push	{r4, lr}
 80043c0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80043c2:	2202      	movs	r2, #2
 80043c4:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80043c8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80043ca:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80043cc:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80043ce:	2100      	movs	r1, #0
 80043d0:	f000 fe38 	bl	8005044 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80043d4:	2000      	movs	r0, #0
 80043d6:	bd10      	pop	{r4, pc}

080043d8 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80043d8:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80043da:	4613      	mov	r3, r2
 80043dc:	460a      	mov	r2, r1
 80043de:	2100      	movs	r1, #0
 80043e0:	f000 fe30 	bl	8005044 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80043e4:	2000      	movs	r0, #0
 80043e6:	bd08      	pop	{r3, pc}

080043e8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80043e8:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80043ea:	4613      	mov	r3, r2
 80043ec:	460a      	mov	r2, r1
 80043ee:	2100      	movs	r1, #0
 80043f0:	f000 fe36 	bl	8005060 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80043f4:	2000      	movs	r0, #0
 80043f6:	bd08      	pop	{r3, pc}

080043f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80043f8:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80043fa:	2304      	movs	r3, #4
 80043fc:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004400:	2300      	movs	r3, #0
 8004402:	461a      	mov	r2, r3
 8004404:	4619      	mov	r1, r3
 8004406:	f000 fe1d 	bl	8005044 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800440a:	2000      	movs	r0, #0
 800440c:	bd08      	pop	{r3, pc}

0800440e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800440e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004410:	2305      	movs	r3, #5
 8004412:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004416:	2300      	movs	r3, #0
 8004418:	461a      	mov	r2, r3
 800441a:	4619      	mov	r1, r3
 800441c:	f000 fe20 	bl	8005060 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004420:	2000      	movs	r0, #0
 8004422:	bd08      	pop	{r3, pc}

08004424 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) 
{
 8004424:	b538      	push	{r3, r4, r5, lr}
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
  {
    if (layer_prop[layer].pending_buffer >= 0) 
 8004426:	4c10      	ldr	r4, [pc, #64]	; (8004468 <HAL_LTDC_LineEventCallback+0x44>)
 8004428:	6861      	ldr	r1, [r4, #4]
 800442a:	2900      	cmp	r1, #0
{
 800442c:	4605      	mov	r5, r0
    if (layer_prop[layer].pending_buffer >= 0) 
 800442e:	db14      	blt.n	800445a <HAL_LTDC_LineEventCallback+0x36>
    {
      /* Calculate address of buffer to be used  as visible frame buffer */
      Addr = layer_prop[layer].address + \
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8004430:	68e2      	ldr	r2, [r4, #12]
 8004432:	6923      	ldr	r3, [r4, #16]
 8004434:	6960      	ldr	r0, [r4, #20]
 8004436:	4353      	muls	r3, r2
      Addr = layer_prop[layer].address + \
 8004438:	6822      	ldr	r2, [r4, #0]
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 800443a:	434b      	muls	r3, r1
      Addr = layer_prop[layer].address + \
 800443c:	fb00 2303 	mla	r3, r0, r3, r2
      
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8004440:	682a      	ldr	r2, [r5, #0]
 8004442:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
     
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8004446:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 800444e:	2000      	movs	r0, #0
 8004450:	f000 fe8c 	bl	800516c <GUI_MULTIBUF_ConfirmEx>

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8004454:	f04f 33ff 	mov.w	r3, #4294967295
 8004458:	6063      	str	r3, [r4, #4]
    }
  }
  
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 800445a:	4628      	mov	r0, r5
 800445c:	2100      	movs	r1, #0
}
 800445e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8004462:	f7fd bd23 	b.w	8001eac <HAL_LTDC_ProgramLineEvent>
 8004466:	bf00      	nop
 8004468:	2000022c 	.word	0x2000022c

0800446c <cadc_get_adc_value>:

uint32_t cadc_get_adc_value(uint8_t channel)
{

	return adc_read_value ;
}
 800446c:	4b01      	ldr	r3, [pc, #4]	; (8004474 <cadc_get_adc_value+0x8>)
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20001318 	.word	0x20001318

08004478 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
   // adc_read_value = HAL_ADC_GetValue(hadc);
    conversion_cplt_f = 1;
 8004478:	4b01      	ldr	r3, [pc, #4]	; (8004480 <HAL_ADC_ConvCpltCallback+0x8>)
 800447a:	2201      	movs	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	4770      	bx	lr
 8004480:	20001314 	.word	0x20001314

08004484 <HAL_ADC_ConvHalfCpltCallback>:
}
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
    half_conversion_cplt_f = 1;
 8004484:	4b01      	ldr	r3, [pc, #4]	; (800448c <HAL_ADC_ConvHalfCpltCallback+0x8>)
 8004486:	2201      	movs	r2, #1
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	4770      	bx	lr
 800448c:	2000131c 	.word	0x2000131c

08004490 <cadc_setup_adc>:




void cadc_setup_adc(void)
{
 8004490:	b510      	push	{r4, lr}
	HAL_ADC_Start(&hadc1);
 8004492:	4c07      	ldr	r4, [pc, #28]	; (80044b0 <cadc_setup_adc+0x20>)
 8004494:	4620      	mov	r0, r4
 8004496:	f7fc fe5f 	bl	8001158 <HAL_ADC_Start>
	HAL_ADC_Start_IT(&hadc1);
 800449a:	4620      	mov	r0, r4
 800449c:	f7fc febc 	bl	8001218 <HAL_ADC_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, &adc_read_buff[0], ADC_DMA_BUFF_SIZE);
 80044a0:	4620      	mov	r0, r4
 80044a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044a6:	4903      	ldr	r1, [pc, #12]	; (80044b4 <cadc_setup_adc+0x24>)
}
 80044a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_Start_DMA(&hadc1, &adc_read_buff[0], ADC_DMA_BUFF_SIZE);
 80044ac:	f7fc bf1a 	b.w	80012e4 <HAL_ADC_Start_DMA>
 80044b0:	20001480 	.word	0x20001480
 80044b4:	20000374 	.word	0x20000374

080044b8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){


	if (htim->Instance == TIM7){
 80044b8:	6803      	ldr	r3, [r0, #0]
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d10b      	bne.n	80044d8 <HAL_TIM_PeriodElapsedCallback+0x20>
		TOGGLE_RED_LED();
 80044c0:	f502 3201 	add.w	r2, r2, #132096	; 0x20400
 80044c4:	6953      	ldr	r3, [r2, #20]
 80044c6:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80044ca:	6153      	str	r3, [r2, #20]
		if (seconds_counter ) seconds_counter--;
 80044cc:	4a06      	ldr	r2, [pc, #24]	; (80044e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80044ce:	6813      	ldr	r3, [r2, #0]
 80044d0:	b13b      	cbz	r3, 80044e2 <HAL_TIM_PeriodElapsedCallback+0x2a>
 80044d2:	3b01      	subs	r3, #1
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4770      	bx	lr
	}
	if (htim->Instance == TIM6) {
 80044d8:	4a04      	ldr	r2, [pc, #16]	; (80044ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d101      	bne.n	80044e2 <HAL_TIM_PeriodElapsedCallback+0x2a>
		HAL_IncTick();
 80044de:	f7fc bd85 	b.w	8000fec <HAL_IncTick>
 80044e2:	4770      	bx	lr
 80044e4:	40001400 	.word	0x40001400
 80044e8:	20000008 	.word	0x20000008
 80044ec:	40001000 	.word	0x40001000

080044f0 <ctimer_update_pwm>:
}



void ctimer_update_pwm(uint32_t pwm_frequency, uint32_t pwm_duty_cycle, uint8_t pwm_channel)
{
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <ctimer_update_pwm+0x14>)

	if (pwm_channel)
 80044f2:	b122      	cbz	r2, 80044fe <ctimer_update_pwm+0xe>
		TIM9->CCR1 = pwm_duty_cycle; //Duty cycle register for TIM9, Channel 1
 80044f4:	6359      	str	r1, [r3, #52]	; 0x34
	else
		TIM9->CCR2 = pwm_duty_cycle; //Duty cycle register for TIM9, Channel 2

	if(pwm_frequency)
 80044f6:	b108      	cbz	r0, 80044fc <ctimer_update_pwm+0xc>
		htim9.Init.Period = pwm_frequency;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <ctimer_update_pwm+0x18>)
 80044fa:	60d8      	str	r0, [r3, #12]
 80044fc:	4770      	bx	lr
		TIM9->CCR2 = pwm_duty_cycle; //Duty cycle register for TIM9, Channel 2
 80044fe:	6399      	str	r1, [r3, #56]	; 0x38
 8004500:	e7f9      	b.n	80044f6 <ctimer_update_pwm+0x6>
 8004502:	bf00      	nop
 8004504:	40014000 	.word	0x40014000
 8004508:	20001564 	.word	0x20001564

0800450c <cli_ascii_stream_to_hex.constprop.1>:
 	uint8_t stream_length      = 0;
 	uint16_t converted_digit   = 1;
 	uint16_t convertion_offset = 0x10;

 	if (convertion_type != 'h')
 		convertion_offset = 0xa;
 800450c:	2868      	cmp	r0, #104	; 0x68
 	if ( hex_character <= '9' && hex_character >= '0') return (hex_character -'0');
 800450e:	f04f 0200 	mov.w	r2, #0

 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ){
 8004512:	4913      	ldr	r1, [pc, #76]	; (8004560 <cli_ascii_stream_to_hex.constprop.1+0x54>)
 static uint16_t cli_ascii_stream_to_hex(char *stream_pointer, uint8_t convertion_type)
 8004514:	b530      	push	{r4, r5, lr}
 	if ( hex_character <= '9' && hex_character >= '0') return (hex_character -'0');
 8004516:	4610      	mov	r0, r2
 		convertion_offset = 0xa;
 8004518:	bf0c      	ite	eq
 800451a:	2410      	moveq	r4, #16
 800451c:	240a      	movne	r4, #10
 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ){
 800451e:	1853      	adds	r3, r2, r1
 8004520:	795b      	ldrb	r3, [r3, #5]
 8004522:	b17b      	cbz	r3, 8004544 <cli_ascii_stream_to_hex.constprop.1+0x38>
 	if ( hex_character <= 'F' && hex_character >= 'A') return (hex_character -'A')+10;
 8004524:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 8004528:	2d05      	cmp	r5, #5
 800452a:	d80c      	bhi.n	8004546 <cli_ascii_stream_to_hex.constprop.1+0x3a>
 800452c:	3b37      	subs	r3, #55	; 0x37
 	if ( hex_character <= 'f' && hex_character >= 'a') return (hex_character -'a')+10;
 800452e:	b2db      	uxtb	r3, r3

 		converted_digit = ( cli_ascii_charhex_to_hex(*stream_pointer));
 		if (INVALID_DIGIT_CONVERTION == converted_digit){
 8004530:	2bff      	cmp	r3, #255	; 0xff
 		converted_digit = ( cli_ascii_charhex_to_hex(*stream_pointer));
 8004532:	b29d      	uxth	r5, r3
 		if (INVALID_DIGIT_CONVERTION == converted_digit){
 8004534:	d006      	beq.n	8004544 <cli_ascii_stream_to_hex.constprop.1+0x38>
			break;
		}

 		hex_result= ( hex_result * convertion_offset	) + converted_digit;
 8004536:	fb14 f000 	smulbb	r0, r4, r0
 800453a:	3201      	adds	r2, #1
 800453c:	4428      	add	r0, r5
 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ){
 800453e:	2a05      	cmp	r2, #5
 		hex_result= ( hex_result * convertion_offset	) + converted_digit;
 8004540:	b280      	uxth	r0, r0
 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ){
 8004542:	d1ec      	bne.n	800451e <cli_ascii_stream_to_hex.constprop.1+0x12>
 		stream_pointer++;
 		stream_length++;
 	}
 	return hex_result;
  }
 8004544:	bd30      	pop	{r4, r5, pc}
 	if ( hex_character <= 'f' && hex_character >= 'a') return (hex_character -'a')+10;
 8004546:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
 800454a:	2d05      	cmp	r5, #5
 800454c:	d801      	bhi.n	8004552 <cli_ascii_stream_to_hex.constprop.1+0x46>
 800454e:	3b57      	subs	r3, #87	; 0x57
 8004550:	e7ed      	b.n	800452e <cli_ascii_stream_to_hex.constprop.1+0x22>
 	if ( hex_character <= '9' && hex_character >= '0') return (hex_character -'0');
 8004552:	3b30      	subs	r3, #48	; 0x30
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b09      	cmp	r3, #9
 8004558:	bf88      	it	hi
 800455a:	23ff      	movhi	r3, #255	; 0xff
 800455c:	e7e8      	b.n	8004530 <cli_ascii_stream_to_hex.constprop.1+0x24>
 800455e:	bf00      	nop
 8004560:	200013a0 	.word	0x200013a0

08004564 <HAL_UART_RxCpltCallback>:
	 if (huart->Instance == USART1){
 8004564:	6802      	ldr	r2, [r0, #0]
 8004566:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <HAL_UART_RxCpltCallback+0x64>)
 8004568:	429a      	cmp	r2, r3
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800456a:	b410      	push	{r4}
	 if (huart->Instance == USART1){
 800456c:	d128      	bne.n	80045c0 <HAL_UART_RxCpltCallback+0x5c>
		TOGGLE_GREEN_LED();
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <HAL_UART_RxCpltCallback+0x68>)
 8004570:	6953      	ldr	r3, [r2, #20]
 8004572:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004576:	6153      	str	r3, [r2, #20]
	if (debug_port.index>= MAX_PAYLOAD_LEN)
 8004578:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <HAL_UART_RxCpltCallback+0x6c>)
 800457a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	if(debug_port.rx_buffer[0] !='#'){
 800457e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
	if (debug_port.index>= MAX_PAYLOAD_LEN)
 8004582:	2a1f      	cmp	r2, #31
		debug_port.index = 0;
 8004584:	bf84      	itt	hi
 8004586:	2200      	movhi	r2, #0
 8004588:	f883 2023 	strbhi.w	r2, [r3, #35]	; 0x23
	if(debug_port.rx_buffer[0] !='#'){
 800458c:	2923      	cmp	r1, #35	; 0x23
 800458e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004592:	d00a      	beq.n	80045aa <HAL_UART_RxCpltCallback+0x46>
		debug_port.payload[debug_port.index++] = debug_port.rx_buffer[0];
 8004594:	1c54      	adds	r4, r2, #1
 8004596:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
 800459a:	4413      	add	r3, r2
 800459c:	7059      	strb	r1, [r3, #1]
		HAL_UART_Receive_IT(huart, (uint8_t *)(debug_port.rx_buffer), 1);
 800459e:	2201      	movs	r2, #1
 80045a0:	490c      	ldr	r1, [pc, #48]	; (80045d4 <HAL_UART_RxCpltCallback+0x70>)
 }
 80045a2:	f85d 4b04 	ldr.w	r4, [sp], #4
		HAL_UART_Receive_IT(huart, (uint8_t *)(debug_port.rx_buffer), 1);
 80045a6:	f7ff b8e8 	b.w	800377a <HAL_UART_Receive_IT>
		debug_port.payload[debug_port.index] = '\0';
 80045aa:	441a      	add	r2, r3
 80045ac:	2100      	movs	r1, #0
 80045ae:	7051      	strb	r1, [r2, #1]
		debug_port.message_complete = 1;
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		debug_port.rx_buffer[0] = 0;
 80045b6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
		debug_port.index = 0;
 80045ba:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80045be:	e7ee      	b.n	800459e <HAL_UART_RxCpltCallback+0x3a>
 }
 80045c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40011000 	.word	0x40011000
 80045cc:	40021800 	.word	0x40021800
 80045d0:	200013a0 	.word	0x200013a0
 80045d4:	200013c4 	.word	0x200013c4

080045d8 <uart_setup>:



void uart_setup(void){
 80045d8:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&huart1, (uint8_t *)(debug_port.rx_buffer), 1);
 80045da:	4c08      	ldr	r4, [pc, #32]	; (80045fc <uart_setup+0x24>)
 80045dc:	4808      	ldr	r0, [pc, #32]	; (8004600 <uart_setup+0x28>)
 80045de:	2201      	movs	r2, #1
 80045e0:	4621      	mov	r1, r4
 80045e2:	f7ff f8ca 	bl	800377a <HAL_UART_Receive_IT>

		memset(debug_port.payload,0,sizeof(debug_port.payload));
 80045e6:	2220      	movs	r2, #32
 80045e8:	2100      	movs	r1, #0
 80045ea:	f1a4 0023 	sub.w	r0, r4, #35	; 0x23
 80045ee:	f000 fe19 	bl	8005224 <memset>
		memset(debug_port.rx_buffer,0,sizeof(debug_port.rx_buffer));
 80045f2:	2300      	movs	r3, #0
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	7123      	strb	r3, [r4, #4]
 80045f8:	bd10      	pop	{r4, pc}
 80045fa:	bf00      	nop
 80045fc:	200013c4 	.word	0x200013c4
 8004600:	20001360 	.word	0x20001360

08004604 <cuart_parser>:
 }



void cuart_parser(void){
 8004604:	b538      	push	{r3, r4, r5, lr}
	uint16_t pwm_value = 0 ;
	uint8_t *msg = 0;
	msg =  &debug_port.payload[0];
	if (!debug_port.message_complete)
 8004606:	4c1e      	ldr	r4, [pc, #120]	; (8004680 <cuart_parser+0x7c>)
 8004608:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800460c:	b3b3      	cbz	r3, 800467c <cuart_parser+0x78>
		return;
	debug_port.message_complete = 0;
 800460e:	2300      	movs	r3, #0
//	HAL_UART_Receive_IT(&huart1, (uint8_t *)(debug_port.rx_buffer), 1);

	#if 1
	if ( STR_CMP(msg, "pwm",3)){
 8004610:	2203      	movs	r2, #3
 8004612:	491c      	ldr	r1, [pc, #112]	; (8004684 <cuart_parser+0x80>)
	debug_port.message_complete = 0;
 8004614:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if ( STR_CMP(msg, "pwm",3)){
 8004618:	1c60      	adds	r0, r4, #1
 800461a:	f000 fde9 	bl	80051f0 <memcmp>
 800461e:	4605      	mov	r5, r0
 8004620:	b978      	cbnz	r0, 8004642 <cuart_parser+0x3e>
		 pwm_value = cli_ascii_stream_to_hex ( &debug_port.payload[4], 'd');
 8004622:	2064      	movs	r0, #100	; 0x64
 8004624:	f7ff ff72 	bl	800450c <cli_ascii_stream_to_hex.constprop.1>
		 ctimer_update_pwm(0,pwm_value,0);
 8004628:	462a      	mov	r2, r5
 800462a:	4601      	mov	r1, r0
 800462c:	4628      	mov	r0, r5
 800462e:	f7ff ff5f 	bl	80044f0 <ctimer_update_pwm>
		 DBG("extract [%d] [%s] \r\n", cli_ascii_stream_to_hex ( &debug_port.payload[4], 'h'),debug_port.payload );
 8004632:	2068      	movs	r0, #104	; 0x68
 8004634:	f7ff ff6a 	bl	800450c <cli_ascii_stream_to_hex.constprop.1>
 8004638:	1c62      	adds	r2, r4, #1
 800463a:	4601      	mov	r1, r0
 800463c:	4812      	ldr	r0, [pc, #72]	; (8004688 <cuart_parser+0x84>)
 800463e:	f001 fb11 	bl	8005c64 <iprintf>
	}
	if ( STR_CMP(msg,"adc",3)){
 8004642:	2203      	movs	r2, #3
 8004644:	4911      	ldr	r1, [pc, #68]	; (800468c <cuart_parser+0x88>)
 8004646:	4812      	ldr	r0, [pc, #72]	; (8004690 <cuart_parser+0x8c>)
 8004648:	f000 fdd2 	bl	80051f0 <memcmp>
 800464c:	b930      	cbnz	r0, 800465c <cuart_parser+0x58>
		DBG("adc channel is [%x]\n", cadc_get_adc_value (5));
 800464e:	2005      	movs	r0, #5
 8004650:	f7ff ff0c 	bl	800446c <cadc_get_adc_value>
 8004654:	4601      	mov	r1, r0
 8004656:	480f      	ldr	r0, [pc, #60]	; (8004694 <cuart_parser+0x90>)
 8004658:	f001 fb04 	bl	8005c64 <iprintf>
	}
	if ( STR_CMP(msg,"echo",3)){
 800465c:	2203      	movs	r2, #3
 800465e:	490e      	ldr	r1, [pc, #56]	; (8004698 <cuart_parser+0x94>)
 8004660:	480b      	ldr	r0, [pc, #44]	; (8004690 <cuart_parser+0x8c>)
 8004662:	f000 fdc5 	bl	80051f0 <memcmp>
 8004666:	b910      	cbnz	r0, 800466e <cuart_parser+0x6a>
		DBG("ECHO\r\n");
 8004668:	480c      	ldr	r0, [pc, #48]	; (800469c <cuart_parser+0x98>)
 800466a:	f001 fb6f 	bl	8005d4c <puts>
	}
	#endif
//	HAL_UART_Receive_IT(&huart1, (uint8_t *)(debug_port.rx_buffer), 1);


	memset(debug_port.payload,0,sizeof(debug_port.payload));
 800466e:	2220      	movs	r2, #32
 8004670:	2100      	movs	r1, #0
 8004672:	4807      	ldr	r0, [pc, #28]	; (8004690 <cuart_parser+0x8c>)
}
 8004674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(debug_port.payload,0,sizeof(debug_port.payload));
 8004678:	f000 bdd4 	b.w	8005224 <memset>
 800467c:	bd38      	pop	{r3, r4, r5, pc}
 800467e:	bf00      	nop
 8004680:	200013a0 	.word	0x200013a0
 8004684:	08007988 	.word	0x08007988
 8004688:	0800798c 	.word	0x0800798c
 800468c:	080079a1 	.word	0x080079a1
 8004690:	200013a1 	.word	0x200013a1
 8004694:	080079a5 	.word	0x080079a5
 8004698:	080079ba 	.word	0x080079ba
 800469c:	080079bf 	.word	0x080079bf

080046a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046a0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046a2:	2430      	movs	r4, #48	; 0x30
{
 80046a4:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046a6:	4622      	mov	r2, r4
 80046a8:	2100      	movs	r1, #0
 80046aa:	a808      	add	r0, sp, #32
 80046ac:	f000 fdba 	bl	8005224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046b0:	2214      	movs	r2, #20
 80046b2:	2100      	movs	r1, #0
 80046b4:	a803      	add	r0, sp, #12
 80046b6:	f000 fdb5 	bl	8005224 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046ba:	4622      	mov	r2, r4
 80046bc:	2100      	movs	r1, #0
 80046be:	a814      	add	r0, sp, #80	; 0x50
 80046c0:	f000 fdb0 	bl	8005224 <memset>

  /**Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046c4:	2400      	movs	r4, #0
 80046c6:	4b21      	ldr	r3, [pc, #132]	; (800474c <SystemClock_Config+0xac>)
 80046c8:	9401      	str	r4, [sp, #4]
 80046ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80046d4:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <SystemClock_Config+0xb0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80046de:	9402      	str	r4, [sp, #8]
 80046e0:	6813      	ldr	r3, [r2, #0]
 80046e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80046e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	6813      	ldr	r3, [r2, #0]
 80046ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046f2:	9302      	str	r3, [sp, #8]
 80046f4:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046fe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004700:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004704:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004706:	2304      	movs	r3, #4
 8004708:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800470a:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800470c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 72;
 800470e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004710:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004712:	2303      	movs	r3, #3
 8004714:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004716:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004718:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800471a:	f7fd ff67 	bl	80025ec <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800471e:	230f      	movs	r3, #15
 8004720:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004722:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004728:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800472a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800472c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800472e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004730:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004732:	f7fe f90b 	bl	800294c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004736:	2308      	movs	r3, #8
 8004738:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800473a:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800473c:	2332      	movs	r3, #50	; 0x32
 800473e:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004740:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004742:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004744:	f7fe f9c2 	bl	8002acc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004748:	b021      	add	sp, #132	; 0x84
 800474a:	bd30      	pop	{r4, r5, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	40007000 	.word	0x40007000
 8004754:	00000000 	.word	0x00000000

08004758 <main>:
{
 8004758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800475c:	ed2d 8b02 	vpush	{d8}
 8004760:	b094      	sub	sp, #80	; 0x50
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004762:	2400      	movs	r4, #0
 8004764:	4daf      	ldr	r5, [pc, #700]	; (8004a24 <main+0x2cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004766:	4fb0      	ldr	r7, [pc, #704]	; (8004a28 <main+0x2d0>)
  htim9.Instance = TIM9;
 8004768:	f8df a304 	ldr.w	sl, [pc, #772]	; 8004a70 <main+0x318>
		f32_sine_table[i] = arm_sin_f32(2.0f * M_PI * f32_sine_frequency *  (float32_t)(i / 256.0f));
 800476c:	ed9f 8aaf 	vldr	s16, [pc, #700]	; 8004a2c <main+0x2d4>
  HAL_Init();
 8004770:	f7fc fc22 	bl	8000fb8 <HAL_Init>
  SystemClock_Config();
 8004774:	f7ff ff94 	bl	80046a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004778:	2214      	movs	r2, #20
 800477a:	2100      	movs	r1, #0
 800477c:	a80d      	add	r0, sp, #52	; 0x34
 800477e:	f000 fd51 	bl	8005224 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004782:	9401      	str	r4, [sp, #4]
 8004784:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8004786:	48aa      	ldr	r0, [pc, #680]	; (8004a30 <main+0x2d8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004788:	f043 0310 	orr.w	r3, r3, #16
 800478c:	632b      	str	r3, [r5, #48]	; 0x30
 800478e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004798:	9402      	str	r4, [sp, #8]
 800479a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800479c:	f043 0304 	orr.w	r3, r3, #4
 80047a0:	632b      	str	r3, [r5, #48]	; 0x30
 80047a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	9302      	str	r3, [sp, #8]
 80047aa:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80047ac:	9403      	str	r4, [sp, #12]
 80047ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047b0:	f043 0320 	orr.w	r3, r3, #32
 80047b4:	632b      	str	r3, [r5, #48]	; 0x30
 80047b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	9303      	str	r3, [sp, #12]
 80047be:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047c0:	9404      	str	r4, [sp, #16]
 80047c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c8:	632b      	str	r3, [r5, #48]	; 0x30
 80047ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	9304      	str	r3, [sp, #16]
 80047d2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d4:	9405      	str	r4, [sp, #20]
 80047d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	632b      	str	r3, [r5, #48]	; 0x30
 80047de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	9305      	str	r3, [sp, #20]
 80047e6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e8:	9406      	str	r4, [sp, #24]
 80047ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047ec:	f043 0302 	orr.w	r3, r3, #2
 80047f0:	632b      	str	r3, [r5, #48]	; 0x30
 80047f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	9306      	str	r3, [sp, #24]
 80047fa:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80047fc:	9407      	str	r4, [sp, #28]
 80047fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004804:	632b      	str	r3, [r5, #48]	; 0x30
 8004806:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	9307      	str	r3, [sp, #28]
 800480e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004810:	9408      	str	r4, [sp, #32]
 8004812:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	632b      	str	r3, [r5, #48]	; 0x30
 800481a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8004822:	4622      	mov	r2, r4
 8004824:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004826:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8004828:	f7fd fadc 	bl	8001de4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800482c:	4622      	mov	r2, r4
 800482e:	2180      	movs	r1, #128	; 0x80
 8004830:	4880      	ldr	r0, [pc, #512]	; (8004a34 <main+0x2dc>)
 8004832:	f7fd fad7 	bl	8001de4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8004836:	4622      	mov	r2, r4
 8004838:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800483c:	487e      	ldr	r0, [pc, #504]	; (8004a38 <main+0x2e0>)
 800483e:	f7fd fad1 	bl	8001de4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8004842:	4622      	mov	r2, r4
 8004844:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004848:	487c      	ldr	r0, [pc, #496]	; (8004a3c <main+0x2e4>)
 800484a:	f7fd facb 	bl	8001de4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800484e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8004850:	2316      	movs	r3, #22
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004852:	a90d      	add	r1, sp, #52	; 0x34
 8004854:	4876      	ldr	r0, [pc, #472]	; (8004a30 <main+0x2d8>)
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8004856:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004858:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485c:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800485e:	f7fd f9d5 	bl	8001c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8004862:	f248 0307 	movw	r3, #32775	; 0x8007
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004866:	a90d      	add	r1, sp, #52	; 0x34
 8004868:	4872      	ldr	r0, [pc, #456]	; (8004a34 <main+0x2dc>)
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800486a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800486c:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004870:	f7fd f9cc 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8004874:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8004876:	a90d      	add	r1, sp, #52	; 0x34
 8004878:	486e      	ldr	r0, [pc, #440]	; (8004a34 <main+0x2dc>)
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800487a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800487c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004880:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8004882:	f7fd f9c3 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8004886:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8004888:	a90d      	add	r1, sp, #52	; 0x34
 800488a:	4869      	ldr	r0, [pc, #420]	; (8004a30 <main+0x2d8>)
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800488c:	930d      	str	r3, [sp, #52]	; 0x34

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800488e:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004892:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004894:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8004896:	f7fd f9b9 	bl	8001c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800489a:	a90d      	add	r1, sp, #52	; 0x34
 800489c:	4868      	ldr	r0, [pc, #416]	; (8004a40 <main+0x2e8>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800489e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048a2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a4:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80048a6:	f7fd f9b1 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80048aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80048ae:	a90d      	add	r1, sp, #52	; 0x34
 80048b0:	4861      	ldr	r0, [pc, #388]	; (8004a38 <main+0x2e0>)
  GPIO_InitStruct.Pin = TE_Pin;
 80048b2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048b4:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b6:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80048b8:	f7fd f9a8 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80048bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048c0:	a90d      	add	r1, sp, #52	; 0x34
 80048c2:	485d      	ldr	r0, [pc, #372]	; (8004a38 <main+0x2e0>)
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80048c4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048c6:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ca:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048cc:	f7fd f99e 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80048d0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80048d4:	a90d      	add	r1, sp, #52	; 0x34
 80048d6:	4859      	ldr	r0, [pc, #356]	; (8004a3c <main+0x2e4>)
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80048d8:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048da:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048dc:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048de:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80048e0:	f7fd f994 	bl	8001c0c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80048e4:	9400      	str	r4, [sp, #0]
 80048e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
          uint32_t tim7_prescaler = (uint32_t) ((SystemCoreClock) / 1 / TIM7_FREQ_DIV) - 1;
 80048e8:	4f56      	ldr	r7, [pc, #344]	; (8004a44 <main+0x2ec>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 80048ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048ee:	632b      	str	r3, [r5, #48]	; 0x30
 80048f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  htim1.Instance = TIM1;
 80048f2:	4d55      	ldr	r5, [pc, #340]	; (8004a48 <main+0x2f0>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 80048f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80048f8:	4622      	mov	r2, r4
 80048fa:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80048fc:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80048fe:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004900:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004902:	f7fc fef1 	bl	80016e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004906:	2038      	movs	r0, #56	; 0x38
 8004908:	f7fc ff22 	bl	8001750 <HAL_NVIC_EnableIRQ>
  hcrc.Instance = CRC;
 800490c:	484f      	ldr	r0, [pc, #316]	; (8004a4c <main+0x2f4>)
 800490e:	4b50      	ldr	r3, [pc, #320]	; (8004a50 <main+0x2f8>)
 8004910:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004912:	f7fc ff3f 	bl	8001794 <HAL_CRC_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004916:	2210      	movs	r2, #16
 8004918:	4621      	mov	r1, r4
 800491a:	a80d      	add	r0, sp, #52	; 0x34
 800491c:	f000 fc82 	bl	8005224 <memset>
  htim1.Instance = TIM1;
 8004920:	4b4c      	ldr	r3, [pc, #304]	; (8004a54 <main+0x2fc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004922:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004924:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 8004926:	e885 0018 	stmia.w	r5, {r3, r4}
  htim1.Init.Period = 0;
 800492a:	60ec      	str	r4, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800492c:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800492e:	616c      	str	r4, [r5, #20]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004930:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004934:	9409      	str	r4, [sp, #36]	; 0x24
 8004936:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004938:	f7fe fc34 	bl	80031a4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800493c:	a90d      	add	r1, sp, #52	; 0x34
 800493e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004940:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004944:	f7fe fa6a 	bl	8002e1c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004948:	a909      	add	r1, sp, #36	; 0x24
 800494a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800494c:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800494e:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004950:	f7fe fd14 	bl	800337c <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Instance = USART1;
 8004954:	4840      	ldr	r0, [pc, #256]	; (8004a58 <main+0x300>)
  huart1.Init.BaudRate = 115200;
 8004956:	4a41      	ldr	r2, [pc, #260]	; (8004a5c <main+0x304>)
  htim7.Instance = TIM7;
 8004958:	4d41      	ldr	r5, [pc, #260]	; (8004a60 <main+0x308>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800495a:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 800495c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004960:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004964:	230c      	movs	r3, #12
 8004966:	6143      	str	r3, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004968:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800496a:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800496c:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800496e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004970:	f7fe fe78 	bl	8003664 <HAL_UART_Init>
          uint32_t tim7_prescaler = (uint32_t) ((SystemCoreClock) / 1 / TIM7_FREQ_DIV) - 1;
 8004974:	683b      	ldr	r3, [r7, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004976:	940d      	str	r4, [sp, #52]	; 0x34
          uint32_t tim7_prescaler = (uint32_t) ((SystemCoreClock) / 1 / TIM7_FREQ_DIV) - 1;
 8004978:	f242 7210 	movw	r2, #10000	; 0x2710
 800497c:	fbb3 f3f2 	udiv	r3, r3, r2
  htim7.Instance = TIM7;
 8004980:	4a38      	ldr	r2, [pc, #224]	; (8004a64 <main+0x30c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004982:	940e      	str	r4, [sp, #56]	; 0x38
          uint32_t tim7_prescaler = (uint32_t) ((SystemCoreClock) / 1 / TIM7_FREQ_DIV) - 1;
 8004984:	3b01      	subs	r3, #1
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004986:	e885 001c 	stmia.w	r5, {r2, r3, r4}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800498a:	4628      	mov	r0, r5
  htim7.Init.Period = TIM7_FREQ_DIV -1;
 800498c:	f242 730f 	movw	r3, #9999	; 0x270f
 8004990:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004992:	f7fe fc07 	bl	80031a4 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004996:	a90d      	add	r1, sp, #52	; 0x34
 8004998:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800499a:	940d      	str	r4, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800499c:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800499e:	f7fe fced 	bl	800337c <HAL_TIMEx_MasterConfigSynchronization>
	HAL_TIM_Base_Start_IT(&htim7);
 80049a2:	4628      	mov	r0, r5
 80049a4:	f7fe fa2e 	bl	8002e04 <HAL_TIM_Base_Start_IT>
	uint32_t tim9_prescaler_value = ((SystemCoreClock*10)/TIM9_10MHZ)-1;
 80049a8:	683b      	ldr	r3, [r7, #0]
  htim9.Instance = TIM9;
 80049aa:	4d2f      	ldr	r5, [pc, #188]	; (8004a68 <main+0x310>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049ac:	2210      	movs	r2, #16
 80049ae:	4621      	mov	r1, r4
	uint32_t tim9_prescaler_value = ((SystemCoreClock*10)/TIM9_10MHZ)-1;
 80049b0:	270a      	movs	r7, #10
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049b2:	a809      	add	r0, sp, #36	; 0x24
	uint32_t tim9_prescaler_value = ((SystemCoreClock*10)/TIM9_10MHZ)-1;
 80049b4:	435f      	muls	r7, r3
 80049b6:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <main+0x314>)
 80049b8:	fbb7 f7f3 	udiv	r7, r7, r3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049bc:	f000 fc32 	bl	8005224 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049c0:	221c      	movs	r2, #28
 80049c2:	4621      	mov	r1, r4
 80049c4:	a80d      	add	r0, sp, #52	; 0x34
 80049c6:	f000 fc2d 	bl	8005224 <memset>
	uint32_t tim9_prescaler_value = ((SystemCoreClock*10)/TIM9_10MHZ)-1;
 80049ca:	3f01      	subs	r7, #1
  htim9.Init.Period = TIM9_PWM_PERIOD;
 80049cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80049d0:	4628      	mov	r0, r5
  htim9.Init.Period = TIM9_PWM_PERIOD;
 80049d2:	60eb      	str	r3, [r5, #12]
  htim9.Init.Prescaler = tim9_prescaler_value;
 80049d4:	606f      	str	r7, [r5, #4]
  htim9.Instance = TIM9;
 80049d6:	f8c5 a000 	str.w	sl, [r5]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049da:	60ac      	str	r4, [r5, #8]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049dc:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80049de:	f7fe fbe1 	bl	80031a4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80049e2:	a909      	add	r1, sp, #36	; 0x24
 80049e4:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049e6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80049ea:	f7fe fa17 	bl	8002e1c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80049ee:	4628      	mov	r0, r5
 80049f0:	f7fe fbf2 	bl	80031d8 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049f4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049f6:	4622      	mov	r2, r4
 80049f8:	a90d      	add	r1, sp, #52	; 0x34
 80049fa:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049fc:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80049fe:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a00:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a02:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a04:	f7fe fc32 	bl	800326c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a08:	4642      	mov	r2, r8
 8004a0a:	a90d      	add	r1, sp, #52	; 0x34
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f7fe fc2d 	bl	800326c <HAL_TIM_PWM_ConfigChannel>
	if(HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1) != HAL_OK)
 8004a12:	4621      	mov	r1, r4
 8004a14:	4628      	mov	r0, r5
 8004a16:	f7fe fc97 	bl	8003348 <HAL_TIM_PWM_Start>
	if(HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2) != HAL_OK)
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f7fe fc93 	bl	8003348 <HAL_TIM_PWM_Start>
 8004a22:	e027      	b.n	8004a74 <main+0x31c>
 8004a24:	40023800 	.word	0x40023800
 8004a28:	10120000 	.word	0x10120000
 8004a2c:	3b800000 	.word	0x3b800000
 8004a30:	40020800 	.word	0x40020800
 8004a34:	40020000 	.word	0x40020000
 8004a38:	40020c00 	.word	0x40020c00
 8004a3c:	40021800 	.word	0x40021800
 8004a40:	40020400 	.word	0x40020400
 8004a44:	2000000c 	.word	0x2000000c
 8004a48:	20001528 	.word	0x20001528
 8004a4c:	20001478 	.word	0x20001478
 8004a50:	40023000 	.word	0x40023000
 8004a54:	40010000 	.word	0x40010000
 8004a58:	20001360 	.word	0x20001360
 8004a5c:	40011000 	.word	0x40011000
 8004a60:	200015a0 	.word	0x200015a0
 8004a64:	40001400 	.word	0x40001400
 8004a68:	20001564 	.word	0x20001564
 8004a6c:	00989680 	.word	0x00989680
 8004a70:	40014000 	.word	0x40014000
	TIM9->CCR1 = 1000; //Duty cycle register for TIM9, Channel 1
 8004a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a78:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
	TIM9->CCR2 = 100; //Duty cycle register for TIM9, Channel 2
 8004a7c:	2364      	movs	r3, #100	; 0x64
 8004a7e:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  HAL_TIM_MspPostInit(&htim9);
 8004a82:	4628      	mov	r0, r5
 8004a84:	f000 f92e 	bl	8004ce4 <HAL_TIM_MspPostInit>
  ADC_ChannelConfTypeDef sConfig = {0};
 8004a88:	2210      	movs	r2, #16
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	a80d      	add	r0, sp, #52	; 0x34
 8004a8e:	f000 fbc9 	bl	8005224 <memset>
  hadc1.Instance = ADC1;
 8004a92:	4d25      	ldr	r5, [pc, #148]	; (8004b28 <main+0x3d0>)
 8004a94:	4b25      	ldr	r3, [pc, #148]	; (8004b2c <main+0x3d4>)
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004a96:	61ae      	str	r6, [r5, #24]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004a98:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004a9c:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <main+0x3d8>)
 8004aa0:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 8004aa2:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004aa4:	632e      	str	r6, [r5, #48]	; 0x30
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004aa6:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004aa8:	612c      	str	r4, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004aaa:	622c      	str	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004aac:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004aae:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004ab0:	616c      	str	r4, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ab2:	f7fc faad 	bl	8001010 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_5;
 8004ab6:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ab8:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Channel = ADC_CHANNEL_5;
 8004aba:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004abc:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004abe:	2307      	movs	r3, #7
 8004ac0:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = 1;
 8004ac2:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ac4:	f7fc fd64 	bl	8001590 <HAL_ADC_ConfigChannel>
		f32_sine_table[i] = arm_sin_f32(2.0f * M_PI * f32_sine_frequency *  (float32_t)(i / 256.0f));
 8004ac8:	a715      	add	r7, pc, #84	; (adr r7, 8004b20 <main+0x3c8>)
 8004aca:	e9d7 6700 	ldrd	r6, r7, [r7]
	uart_setup();
 8004ace:	f7ff fd83 	bl	80045d8 <uart_setup>
	cadc_setup_adc();
 8004ad2:	f7ff fcdd 	bl	8004490 <cadc_setup_adc>
		f32_sine_table[i] = arm_sin_f32(2.0f * M_PI * f32_sine_frequency *  (float32_t)(i / 256.0f));
 8004ad6:	ee07 4a90 	vmov	s15, r4
 8004ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for (int i = 0; i < 256; ++i)
 8004ade:	3401      	adds	r4, #1
		f32_sine_table[i] = arm_sin_f32(2.0f * M_PI * f32_sine_frequency *  (float32_t)(i / 256.0f));
 8004ae0:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004ae4:	ee17 0a90 	vmov	r0, s15
 8004ae8:	f7fb fd3e 	bl	8000568 <__aeabi_f2d>
 8004aec:	4632      	mov	r2, r6
 8004aee:	463b      	mov	r3, r7
 8004af0:	f7fb fd8e 	bl	8000610 <__aeabi_dmul>
 8004af4:	f7fc f864 	bl	8000bc0 <__aeabi_d2f>
 8004af8:	ee00 0a10 	vmov	s0, r0
 8004afc:	f000 fae8 	bl	80050d0 <arm_sin_f32>
	for (int i = 0; i < 256; ++i)
 8004b00:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8004b04:	d1e7      	bne.n	8004ad6 <main+0x37e>
		if (BUTTON_READ())
 8004b06:	4d0b      	ldr	r5, [pc, #44]	; (8004b34 <main+0x3dc>)
			TOGGLE_GREEN_LED();
 8004b08:	4c0b      	ldr	r4, [pc, #44]	; (8004b38 <main+0x3e0>)
	  	cuart_parser();
 8004b0a:	f7ff fd7b 	bl	8004604 <cuart_parser>
		if (BUTTON_READ())
 8004b0e:	692b      	ldr	r3, [r5, #16]
 8004b10:	07db      	lsls	r3, r3, #31
 8004b12:	d5fa      	bpl.n	8004b0a <main+0x3b2>
			TOGGLE_GREEN_LED();
 8004b14:	6963      	ldr	r3, [r4, #20]
 8004b16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b1a:	6163      	str	r3, [r4, #20]
 8004b1c:	e7f5      	b.n	8004b0a <main+0x3b2>
 8004b1e:	bf00      	nop
 8004b20:	2955385e 	.word	0x2955385e
 8004b24:	404f6a7a 	.word	0x404f6a7a
 8004b28:	20001480 	.word	0x20001480
 8004b2c:	40012000 	.word	0x40012000
 8004b30:	0f000001 	.word	0x0f000001
 8004b34:	40020000 	.word	0x40020000
 8004b38:	40021800 	.word	0x40021800

08004b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b3c:	4770      	bx	lr
	...

08004b40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b40:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <HAL_MspInit+0x34>)
 8004b44:	2100      	movs	r1, #0
 8004b46:	9100      	str	r1, [sp, #0]
 8004b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44
 8004b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b52:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004b56:	9200      	str	r2, [sp, #0]
 8004b58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b5a:	9101      	str	r1, [sp, #4]
 8004b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b62:	641a      	str	r2, [r3, #64]	; 0x40
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b6e:	b002      	add	sp, #8
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800

08004b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	4606      	mov	r6, r0
 8004b7c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b7e:	2214      	movs	r2, #20
 8004b80:	2100      	movs	r1, #0
 8004b82:	a803      	add	r0, sp, #12
 8004b84:	f000 fb4e 	bl	8005224 <memset>
  if(hadc->Instance==ADC1)
 8004b88:	6832      	ldr	r2, [r6, #0]
 8004b8a:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <HAL_ADC_MspInit+0xa4>)
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d142      	bne.n	8004c16 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b90:	2500      	movs	r5, #0
 8004b92:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004b96:	9501      	str	r5, [sp, #4]
 8004b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b9a:	4821      	ldr	r0, [pc, #132]	; (8004c20 <HAL_ADC_MspInit+0xa8>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004b9c:	4c21      	ldr	r4, [pc, #132]	; (8004c24 <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ba2:	645a      	str	r2, [r3, #68]	; 0x44
 8004ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004baa:	9201      	str	r2, [sp, #4]
 8004bac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	9502      	str	r5, [sp, #8]
 8004bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	9302      	str	r3, [sp, #8]
 8004bc0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004bc2:	2320      	movs	r3, #32
 8004bc4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bcc:	f7fd f81e 	bl	8001c0c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8004bd0:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <HAL_ADC_MspInit+0xb0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bd2:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004bd4:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bdc:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004be2:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004be4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004be8:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004bea:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004bec:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bf0:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004bf2:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004bf4:	6225      	str	r5, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bf6:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004bf8:	f7fc fdf4 	bl	80017e4 <HAL_DMA_Init>
 8004bfc:	b108      	cbz	r0, 8004c02 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8004bfe:	f7ff ff9d 	bl	8004b3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004c02:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c04:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004c06:	2012      	movs	r0, #18
 8004c08:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c0a:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004c0c:	f7fc fd6c 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004c10:	2012      	movs	r0, #18
 8004c12:	f7fc fd9d 	bl	8001750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c16:	b008      	add	sp, #32
 8004c18:	bd70      	pop	{r4, r5, r6, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40012000 	.word	0x40012000
 8004c20:	40020000 	.word	0x40020000
 8004c24:	200014c8 	.word	0x200014c8
 8004c28:	40026410 	.word	0x40026410

08004c2c <HAL_CRC_MspInit>:
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 8004c2c:	6802      	ldr	r2, [r0, #0]
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_CRC_MspInit+0x28>)
 8004c30:	429a      	cmp	r2, r3
{
 8004c32:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8004c34:	d10b      	bne.n	8004c4e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004c36:	2300      	movs	r3, #0
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_CRC_MspInit+0x2c>)
 8004c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004c4e:	b002      	add	sp, #8
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40023000 	.word	0x40023000
 8004c58:	40023800 	.word	0x40023800

08004c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM1)
 8004c5e:	6803      	ldr	r3, [r0, #0]
 8004c60:	4a1c      	ldr	r2, [pc, #112]	; (8004cd4 <HAL_TIM_Base_MspInit+0x78>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d10e      	bne.n	8004c84 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <HAL_TIM_Base_MspInit+0x7c>)
 8004c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	645a      	str	r2, [r3, #68]	; 0x44
 8004c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8004c7e:	b005      	add	sp, #20
 8004c80:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 8004c84:	4a15      	ldr	r2, [pc, #84]	; (8004cdc <HAL_TIM_Base_MspInit+0x80>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d113      	bne.n	8004cb2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <HAL_TIM_Base_MspInit+0x7c>)
 8004c8e:	9202      	str	r2, [sp, #8]
 8004c90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c92:	f041 0120 	orr.w	r1, r1, #32
 8004c96:	6419      	str	r1, [r3, #64]	; 0x40
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004ca4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004ca6:	f7fc fd1f 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004caa:	2037      	movs	r0, #55	; 0x37
 8004cac:	f7fc fd50 	bl	8001750 <HAL_NVIC_EnableIRQ>
 8004cb0:	e7e5      	b.n	8004c7e <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM9)
 8004cb2:	4a0b      	ldr	r2, [pc, #44]	; (8004ce0 <HAL_TIM_Base_MspInit+0x84>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d1e2      	bne.n	8004c7e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9303      	str	r3, [sp, #12]
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_TIM_Base_MspInit+0x7c>)
 8004cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ccc:	9303      	str	r3, [sp, #12]
 8004cce:	9b03      	ldr	r3, [sp, #12]
}
 8004cd0:	e7d5      	b.n	8004c7e <HAL_TIM_Base_MspInit+0x22>
 8004cd2:	bf00      	nop
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40001400 	.word	0x40001400
 8004ce0:	40014000 	.word	0x40014000

08004ce4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cea:	2214      	movs	r2, #20
 8004cec:	2100      	movs	r1, #0
 8004cee:	a801      	add	r0, sp, #4
 8004cf0:	f000 fa98 	bl	8005224 <memset>
  if(htim->Instance==TIM9)
 8004cf4:	6822      	ldr	r2, [r4, #0]
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_TIM_MspPostInit+0x48>)
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d115      	bne.n	8004d28 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d02:	480c      	ldr	r0, [pc, #48]	; (8004d34 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d06:	f042 0210 	orr.w	r2, r2, #16
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004d16:	2360      	movs	r3, #96	; 0x60
 8004d18:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d1e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004d20:	2303      	movs	r3, #3
 8004d22:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d24:	f7fc ff72 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8004d28:	b006      	add	sp, #24
 8004d2a:	bd10      	pop	{r4, pc}
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40023800 	.word	0x40023800
 8004d34:	40021000 	.word	0x40021000

08004d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3e:	2214      	movs	r2, #20
 8004d40:	2100      	movs	r1, #0
 8004d42:	a803      	add	r0, sp, #12
 8004d44:	f000 fa6e 	bl	8005224 <memset>
  if(huart->Instance==USART1)
 8004d48:	6822      	ldr	r2, [r4, #0]
 8004d4a:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <HAL_UART_MspInit+0x78>)
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d12d      	bne.n	8004dac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d50:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8004d54:	2400      	movs	r4, #0
 8004d56:	9401      	str	r4, [sp, #4]
 8004d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d5a:	4816      	ldr	r0, [pc, #88]	; (8004db4 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d5c:	f042 0210 	orr.w	r2, r2, #16
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44
 8004d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d64:	f002 0210 	and.w	r2, r2, #16
 8004d68:	9201      	str	r2, [sp, #4]
 8004d6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d6c:	9402      	str	r4, [sp, #8]
 8004d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d70:	f042 0201 	orr.w	r2, r2, #1
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	9302      	str	r3, [sp, #8]
 8004d7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004d80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d86:	2302      	movs	r3, #2
 8004d88:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d92:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d94:	2307      	movs	r3, #7
 8004d96:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d98:	f7fc ff38 	bl	8001c0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004d9c:	2025      	movs	r0, #37	; 0x25
 8004d9e:	4622      	mov	r2, r4
 8004da0:	4621      	mov	r1, r4
 8004da2:	f7fc fca1 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004da6:	2025      	movs	r0, #37	; 0x25
 8004da8:	f7fc fcd2 	bl	8001750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004dac:	b008      	add	sp, #32
 8004dae:	bd10      	pop	{r4, pc}
 8004db0:	40011000 	.word	0x40011000
 8004db4:	40020000 	.word	0x40020000

08004db8 <NMI_Handler>:
 8004db8:	4770      	bx	lr

08004dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dba:	e7fe      	b.n	8004dba <HardFault_Handler>

08004dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dbc:	e7fe      	b.n	8004dbc <MemManage_Handler>

08004dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dbe:	e7fe      	b.n	8004dbe <BusFault_Handler>

08004dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dc0:	e7fe      	b.n	8004dc0 <UsageFault_Handler>

08004dc2 <SVC_Handler>:
 8004dc2:	4770      	bx	lr

08004dc4 <DebugMon_Handler>:
 8004dc4:	4770      	bx	lr

08004dc6 <PendSV_Handler>:
 8004dc6:	4770      	bx	lr

08004dc8 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004dc8:	4801      	ldr	r0, [pc, #4]	; (8004dd0 <ADC_IRQHandler+0x8>)
 8004dca:	f7fc bb42 	b.w	8001452 <HAL_ADC_IRQHandler>
 8004dce:	bf00      	nop
 8004dd0:	20001480 	.word	0x20001480

08004dd4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004dd4:	4801      	ldr	r0, [pc, #4]	; (8004ddc <USART1_IRQHandler+0x8>)
 8004dd6:	f7fe bd2f 	b.w	8003838 <HAL_UART_IRQHandler>
 8004dda:	bf00      	nop
 8004ddc:	20001360 	.word	0x20001360

08004de0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004de0:	4770      	bx	lr
	...

08004de4 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004de4:	4801      	ldr	r0, [pc, #4]	; (8004dec <TIM7_IRQHandler+0x8>)
 8004de6:	f7fe b8d6 	b.w	8002f96 <HAL_TIM_IRQHandler>
 8004dea:	bf00      	nop
 8004dec:	200015a0 	.word	0x200015a0

08004df0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004df0:	4801      	ldr	r0, [pc, #4]	; (8004df8 <DMA2_Stream0_IRQHandler+0x8>)
 8004df2:	f7fc bdc5 	b.w	8001980 <HAL_DMA_IRQHandler>
 8004df6:	bf00      	nop
 8004df8:	200014c8 	.word	0x200014c8

08004dfc <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8004dfc:	4801      	ldr	r0, [pc, #4]	; (8004e04 <OTG_HS_IRQHandler+0x8>)
 8004dfe:	f7fd b873 	b.w	8001ee8 <HAL_PCD_IRQHandler>
 8004e02:	bf00      	nop
 8004e04:	200015dc 	.word	0x200015dc

08004e08 <OTG_HS_EP1_IN_IRQHandler>:
 8004e08:	f7ff bff8 	b.w	8004dfc <OTG_HS_IRQHandler>

08004e0c <OTG_HS_EP1_OUT_IRQHandler>:
 8004e0c:	f7ff bff6 	b.w	8004dfc <OTG_HS_IRQHandler>

08004e10 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004e10:	4801      	ldr	r0, [pc, #4]	; (8004e18 <LTDC_IRQHandler+0x8>)
 8004e12:	f7fc bfee 	b.w	8001df2 <HAL_LTDC_IRQHandler>
 8004e16:	bf00      	nop
 8004e18:	20000258 	.word	0x20000258

08004e1c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004e1c:	4801      	ldr	r0, [pc, #4]	; (8004e24 <DMA2D_IRQHandler+0x8>)
 8004e1e:	f7fc be6b 	b.w	8001af8 <HAL_DMA2D_IRQHandler>
 8004e22:	bf00      	nop
 8004e24:	20000300 	.word	0x20000300

08004e28 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8004e28:	b510      	push	{r4, lr}
       HAL_UART_Transmit(&huart1, ptr, len, 10);
 8004e2a:	230a      	movs	r3, #10
{
 8004e2c:	4614      	mov	r4, r2
       HAL_UART_Transmit(&huart1, ptr, len, 10);
 8004e2e:	4803      	ldr	r0, [pc, #12]	; (8004e3c <_write+0x14>)
 8004e30:	b292      	uxth	r2, r2
 8004e32:	f7fe fc45 	bl	80036c0 <HAL_UART_Transmit>
       return len;
}
 8004e36:	4620      	mov	r0, r4
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20001360 	.word	0x20001360

08004e40 <_sbrk>:
{
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <_sbrk+0x14>)
 8004e42:	6819      	ldr	r1, [r3, #0]
{
 8004e44:	4602      	mov	r2, r0
	if (heap_end == 0) {
 8004e46:	b909      	cbnz	r1, 8004e4c <_sbrk+0xc>
		heap_end = & end;
 8004e48:	4903      	ldr	r1, [pc, #12]	; (8004e58 <_sbrk+0x18>)
 8004e4a:	6019      	str	r1, [r3, #0]
	}

	prev_heap_end = heap_end;
 8004e4c:	6818      	ldr	r0, [r3, #0]
	heap_end += incr;
 8004e4e:	4402      	add	r2, r0
 8004e50:	601a      	str	r2, [r3, #0]

	return (void *) prev_heap_end;
}
 8004e52:	4770      	bx	lr
 8004e54:	20000248 	.word	0x20000248
 8004e58:	200019d0 	.word	0x200019d0

08004e5c <_close>:

int _close(int32_t file)
{
	errno = ENOSYS;
 8004e5c:	4b02      	ldr	r3, [pc, #8]	; (8004e68 <_close+0xc>)
 8004e5e:	2258      	movs	r2, #88	; 0x58
 8004e60:	601a      	str	r2, [r3, #0]
	return -1;
}
 8004e62:	f04f 30ff 	mov.w	r0, #4294967295
 8004e66:	4770      	bx	lr
 8004e68:	200019cc 	.word	0x200019cc

08004e6c <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
	errno = ENOSYS;
 8004e6c:	4b02      	ldr	r3, [pc, #8]	; (8004e78 <_fstat+0xc>)
 8004e6e:	2258      	movs	r2, #88	; 0x58
 8004e70:	601a      	str	r2, [r3, #0]
	return -1;
}
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	4770      	bx	lr
 8004e78:	200019cc 	.word	0x200019cc

08004e7c <_isatty>:

int _isatty(int32_t file)
{
	errno = ENOSYS;
 8004e7c:	4b02      	ldr	r3, [pc, #8]	; (8004e88 <_isatty+0xc>)
 8004e7e:	2258      	movs	r2, #88	; 0x58
 8004e80:	601a      	str	r2, [r3, #0]
	return 0;
}
 8004e82:	2000      	movs	r0, #0
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	200019cc 	.word	0x200019cc

08004e8c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
	errno = ENOSYS;
 8004e8c:	4b02      	ldr	r3, [pc, #8]	; (8004e98 <_lseek+0xc>)
 8004e8e:	2258      	movs	r2, #88	; 0x58
 8004e90:	601a      	str	r2, [r3, #0]
	return -1;
}
 8004e92:	f04f 30ff 	mov.w	r0, #4294967295
 8004e96:	4770      	bx	lr
 8004e98:	200019cc 	.word	0x200019cc

08004e9c <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
	errno = ENOSYS;
 8004e9c:	4b02      	ldr	r3, [pc, #8]	; (8004ea8 <_read+0xc>)
 8004e9e:	2258      	movs	r2, #88	; 0x58
 8004ea0:	601a      	str	r2, [r3, #0]
	return -1;
}
 8004ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea6:	4770      	bx	lr
 8004ea8:	200019cc 	.word	0x200019cc

08004eac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004eac:	490f      	ldr	r1, [pc, #60]	; (8004eec <SystemInit+0x40>)
 8004eae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004eb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <SystemInit+0x44>)
 8004ebc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ebe:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004ec6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004ece:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004ed4:	4a07      	ldr	r2, [pc, #28]	; (8004ef4 <SystemInit+0x48>)
 8004ed6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ede:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004ee0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ee2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ee6:	608b      	str	r3, [r1, #8]
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	e000ed00 	.word	0xe000ed00
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	24003010 	.word	0x24003010

08004ef8 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004ef8:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8004efc:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004f00:	f7fe bfcd 	b.w	8003e9e <USBD_LL_SetupStage>

08004f04 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004f04:	231c      	movs	r3, #28
 8004f06:	fb03 0301 	mla	r3, r3, r1, r0
 8004f0a:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f12:	f7fe bff1 	b.w	8003ef8 <USBD_LL_DataOutStage>

08004f16 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004f16:	231c      	movs	r3, #28
 8004f18:	fb03 0301 	mla	r3, r3, r1, r0
 8004f1c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f22:	f7ff b81b 	b.w	8003f5c <USBD_LL_DataInStage>

08004f26 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004f26:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004f2a:	f7ff b897 	b.w	800405c <USBD_LL_SOF>

08004f2e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004f2e:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8004f30:	68c1      	ldr	r1, [r0, #12]
{ 
 8004f32:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004f34:	3100      	adds	r1, #0
 8004f36:	bf18      	it	ne
 8004f38:	2101      	movne	r1, #1
 8004f3a:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004f3e:	f7ff f87b 	bl	8004038 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004f42:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8004f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004f4a:	f7ff b856 	b.w	8003ffa <USBD_LL_Reset>
	...

08004f50 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004f50:	b510      	push	{r4, lr}
 8004f52:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004f54:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004f58:	f7ff f871 	bl	800403e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004f5c:	6822      	ldr	r2, [r4, #0]
 8004f5e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004f6a:	6a23      	ldr	r3, [r4, #32]
 8004f6c:	b123      	cbz	r3, 8004f78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004f6e:	4a03      	ldr	r2, [pc, #12]	; (8004f7c <HAL_PCD_SuspendCallback+0x2c>)
 8004f70:	6913      	ldr	r3, [r2, #16]
 8004f72:	f043 0306 	orr.w	r3, r3, #6
 8004f76:	6113      	str	r3, [r2, #16]
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	bf00      	nop
 8004f7c:	e000ed00 	.word	0xe000ed00

08004f80 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004f80:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004f84:	f7ff b864 	b.w	8004050 <USBD_LL_Resume>

08004f88 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004f88:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004f8c:	f7ff b874 	b.w	8004078 <USBD_LL_IsoOUTIncomplete>

08004f90 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004f90:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004f94:	f7ff b86e 	b.w	8004074 <USBD_LL_IsoINIncomplete>

08004f98 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004f98:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004f9c:	f7ff b86e 	b.w	800407c <USBD_LL_DevConnected>

08004fa0 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004fa0:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8004fa4:	f7ff b86c 	b.w	8004080 <USBD_LL_DevDisconnected>

08004fa8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004fa8:	b510      	push	{r4, lr}
 8004faa:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004fac:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	f7fd fa56 	bl	8002464 <HAL_PCD_EP_Open>
 8004fb8:	2803      	cmp	r0, #3
 8004fba:	bf9a      	itte	ls
 8004fbc:	4b01      	ldrls	r3, [pc, #4]	; (8004fc4 <USBD_LL_OpenEP+0x1c>)
 8004fbe:	5c18      	ldrbls	r0, [r3, r0]
 8004fc0:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004fc2:	bd10      	pop	{r4, pc}
 8004fc4:	080079dd 	.word	0x080079dd

08004fc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004fc8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004fca:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004fce:	f7fd fabb 	bl	8002548 <HAL_PCD_EP_SetStall>
 8004fd2:	2803      	cmp	r0, #3
 8004fd4:	bf9a      	itte	ls
 8004fd6:	4b02      	ldrls	r3, [pc, #8]	; (8004fe0 <USBD_LL_StallEP+0x18>)
 8004fd8:	5c18      	ldrbls	r0, [r3, r0]
 8004fda:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004fdc:	bd08      	pop	{r3, pc}
 8004fde:	bf00      	nop
 8004fe0:	080079dd 	.word	0x080079dd

08004fe4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004fe4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004fe6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004fea:	f7fd fad9 	bl	80025a0 <HAL_PCD_EP_ClrStall>
 8004fee:	2803      	cmp	r0, #3
 8004ff0:	bf9a      	itte	ls
 8004ff2:	4b02      	ldrls	r3, [pc, #8]	; (8004ffc <USBD_LL_ClearStallEP+0x18>)
 8004ff4:	5c18      	ldrbls	r0, [r3, r0]
 8004ff6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004ff8:	bd08      	pop	{r3, pc}
 8004ffa:	bf00      	nop
 8004ffc:	080079dd 	.word	0x080079dd

08005000 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8005000:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005004:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8005008:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800500c:	bf1b      	ittet	ne
 800500e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8005012:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005016:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800501a:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800501e:	bf08      	it	eq
 8005020:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8005024:	4770      	bx	lr
	...

08005028 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005028:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800502a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800502e:	f7fd fa07 	bl	8002440 <HAL_PCD_SetAddress>
 8005032:	2803      	cmp	r0, #3
 8005034:	bf9a      	itte	ls
 8005036:	4b02      	ldrls	r3, [pc, #8]	; (8005040 <USBD_LL_SetUSBAddress+0x18>)
 8005038:	5c18      	ldrbls	r0, [r3, r0]
 800503a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800503c:	bd08      	pop	{r3, pc}
 800503e:	bf00      	nop
 8005040:	080079dd 	.word	0x080079dd

08005044 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005044:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005046:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800504a:	f7fd fa5d 	bl	8002508 <HAL_PCD_EP_Transmit>
 800504e:	2803      	cmp	r0, #3
 8005050:	bf9a      	itte	ls
 8005052:	4b02      	ldrls	r3, [pc, #8]	; (800505c <USBD_LL_Transmit+0x18>)
 8005054:	5c18      	ldrbls	r0, [r3, r0]
 8005056:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8005058:	bd08      	pop	{r3, pc}
 800505a:	bf00      	nop
 800505c:	080079dd 	.word	0x080079dd

08005060 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005060:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005062:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005066:	f7fd fa2b 	bl	80024c0 <HAL_PCD_EP_Receive>
 800506a:	2803      	cmp	r0, #3
 800506c:	bf9a      	itte	ls
 800506e:	4b02      	ldrls	r3, [pc, #8]	; (8005078 <USBD_LL_PrepareReceive+0x18>)
 8005070:	5c18      	ldrbls	r0, [r3, r0]
 8005072:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005074:	bd08      	pop	{r3, pc}
 8005076:	bf00      	nop
 8005078:	080079dd 	.word	0x080079dd

0800507c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800507c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050b4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005080:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005082:	e003      	b.n	800508c <LoopCopyDataInit>

08005084 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005086:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005088:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800508a:	3104      	adds	r1, #4

0800508c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800508c:	480b      	ldr	r0, [pc, #44]	; (80050bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005090:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005092:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005094:	d3f6      	bcc.n	8005084 <CopyDataInit>
  ldr  r2, =_sbss
 8005096:	4a0b      	ldr	r2, [pc, #44]	; (80050c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005098:	e002      	b.n	80050a0 <LoopFillZerobss>

0800509a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800509a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800509c:	f842 3b04 	str.w	r3, [r2], #4

080050a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80050a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80050a4:	d3f9      	bcc.n	800509a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050a6:	f7ff ff01 	bl	8004eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050aa:	f000 f875 	bl	8005198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050ae:	f7ff fb53 	bl	8004758 <main>
  bx  lr    
 80050b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80050b4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80050b8:	080084b8 	.word	0x080084b8
  ldr  r0, =_sdata
 80050bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80050c0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80050c4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80050c8:	200019d0 	.word	0x200019d0

080050cc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050cc:	e7fe      	b.n	80050cc <CAN1_RX0_IRQHandler>
	...

080050d0 <arm_sin_f32>:
 80050d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80050d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d8:	d42c      	bmi.n	8005134 <arm_sin_f32+0x64>
 80050da:	eddf 7a20 	vldr	s15, [pc, #128]	; 800515c <arm_sin_f32+0x8c>
 80050de:	ee20 0a27 	vmul.f32	s0, s0, s15
 80050e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80050e6:	d432      	bmi.n	800514e <arm_sin_f32+0x7e>
 80050e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ec:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8005160 <arm_sin_f32+0x90>
 80050f0:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <arm_sin_f32+0x94>)
 80050f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80050f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050fa:	ee20 0a26 	vmul.f32	s0, s0, s13
 80050fe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8005102:	ee17 3a90 	vmov	r3, s15
 8005106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005116:	ee70 7a67 	vsub.f32	s15, s0, s15
 800511a:	edd1 6a01 	vldr	s13, [r1, #4]
 800511e:	ed91 0a00 	vldr	s0, [r1]
 8005122:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005126:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800512a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800512e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005132:	4770      	bx	lr
 8005134:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8005168 <arm_sin_f32+0x98>
 8005138:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800513c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005140:	da0b      	bge.n	800515a <arm_sin_f32+0x8a>
 8005142:	eddf 7a06 	vldr	s15, [pc, #24]	; 800515c <arm_sin_f32+0x8c>
 8005146:	ee20 0a27 	vmul.f32	s0, s0, s15
 800514a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800514e:	ee17 3a90 	vmov	r3, s15
 8005152:	3b01      	subs	r3, #1
 8005154:	ee07 3a90 	vmov	s15, r3
 8005158:	e7c6      	b.n	80050e8 <arm_sin_f32+0x18>
 800515a:	4770      	bx	lr
 800515c:	3e22f983 	.word	0x3e22f983
 8005160:	44000000 	.word	0x44000000
 8005164:	080079e4 	.word	0x080079e4
 8005168:	b44c02cd 	.word	0xb44c02cd

0800516c <GUI_MULTIBUF_ConfirmEx>:
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <GUI_MULTIBUF_ConfirmEx+0x28>)
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	2a00      	cmp	r2, #0
 8005172:	bf18      	it	ne
 8005174:	2000      	movne	r0, #0
 8005176:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800517a:	b410      	push	{r4}
 800517c:	6994      	ldr	r4, [r2, #24]
 800517e:	2c00      	cmp	r4, #0
 8005180:	db04      	blt.n	800518c <GUI_MULTIBUF_ConfirmEx+0x20>
 8005182:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8005186:	f04f 33ff 	mov.w	r3, #4294967295
 800518a:	6193      	str	r3, [r2, #24]
 800518c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	200001fc 	.word	0x200001fc

08005198 <__libc_init_array>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	4e0d      	ldr	r6, [pc, #52]	; (80051d0 <__libc_init_array+0x38>)
 800519c:	4c0d      	ldr	r4, [pc, #52]	; (80051d4 <__libc_init_array+0x3c>)
 800519e:	1ba4      	subs	r4, r4, r6
 80051a0:	10a4      	asrs	r4, r4, #2
 80051a2:	2500      	movs	r5, #0
 80051a4:	42a5      	cmp	r5, r4
 80051a6:	d109      	bne.n	80051bc <__libc_init_array+0x24>
 80051a8:	4e0b      	ldr	r6, [pc, #44]	; (80051d8 <__libc_init_array+0x40>)
 80051aa:	4c0c      	ldr	r4, [pc, #48]	; (80051dc <__libc_init_array+0x44>)
 80051ac:	f002 fbdc 	bl	8007968 <_init>
 80051b0:	1ba4      	subs	r4, r4, r6
 80051b2:	10a4      	asrs	r4, r4, #2
 80051b4:	2500      	movs	r5, #0
 80051b6:	42a5      	cmp	r5, r4
 80051b8:	d105      	bne.n	80051c6 <__libc_init_array+0x2e>
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051c0:	4798      	blx	r3
 80051c2:	3501      	adds	r5, #1
 80051c4:	e7ee      	b.n	80051a4 <__libc_init_array+0xc>
 80051c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051ca:	4798      	blx	r3
 80051cc:	3501      	adds	r5, #1
 80051ce:	e7f2      	b.n	80051b6 <__libc_init_array+0x1e>
 80051d0:	080084b0 	.word	0x080084b0
 80051d4:	080084b0 	.word	0x080084b0
 80051d8:	080084b0 	.word	0x080084b0
 80051dc:	080084b4 	.word	0x080084b4

080051e0 <malloc>:
 80051e0:	4b02      	ldr	r3, [pc, #8]	; (80051ec <malloc+0xc>)
 80051e2:	4601      	mov	r1, r0
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	f000 b873 	b.w	80052d0 <_malloc_r>
 80051ea:	bf00      	nop
 80051ec:	20000010 	.word	0x20000010

080051f0 <memcmp>:
 80051f0:	b510      	push	{r4, lr}
 80051f2:	3901      	subs	r1, #1
 80051f4:	4402      	add	r2, r0
 80051f6:	4290      	cmp	r0, r2
 80051f8:	d101      	bne.n	80051fe <memcmp+0xe>
 80051fa:	2000      	movs	r0, #0
 80051fc:	bd10      	pop	{r4, pc}
 80051fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005202:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005206:	42a3      	cmp	r3, r4
 8005208:	d0f5      	beq.n	80051f6 <memcmp+0x6>
 800520a:	1b18      	subs	r0, r3, r4
 800520c:	bd10      	pop	{r4, pc}

0800520e <memcpy>:
 800520e:	b510      	push	{r4, lr}
 8005210:	1e43      	subs	r3, r0, #1
 8005212:	440a      	add	r2, r1
 8005214:	4291      	cmp	r1, r2
 8005216:	d100      	bne.n	800521a <memcpy+0xc>
 8005218:	bd10      	pop	{r4, pc}
 800521a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800521e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005222:	e7f7      	b.n	8005214 <memcpy+0x6>

08005224 <memset>:
 8005224:	4402      	add	r2, r0
 8005226:	4603      	mov	r3, r0
 8005228:	4293      	cmp	r3, r2
 800522a:	d100      	bne.n	800522e <memset+0xa>
 800522c:	4770      	bx	lr
 800522e:	f803 1b01 	strb.w	r1, [r3], #1
 8005232:	e7f9      	b.n	8005228 <memset+0x4>

08005234 <_free_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4605      	mov	r5, r0
 8005238:	2900      	cmp	r1, #0
 800523a:	d045      	beq.n	80052c8 <_free_r+0x94>
 800523c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005240:	1f0c      	subs	r4, r1, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	bfb8      	it	lt
 8005246:	18e4      	addlt	r4, r4, r3
 8005248:	f001 fea2 	bl	8006f90 <__malloc_lock>
 800524c:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <_free_r+0x98>)
 800524e:	6813      	ldr	r3, [r2, #0]
 8005250:	4610      	mov	r0, r2
 8005252:	b933      	cbnz	r3, 8005262 <_free_r+0x2e>
 8005254:	6063      	str	r3, [r4, #4]
 8005256:	6014      	str	r4, [r2, #0]
 8005258:	4628      	mov	r0, r5
 800525a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800525e:	f001 be98 	b.w	8006f92 <__malloc_unlock>
 8005262:	42a3      	cmp	r3, r4
 8005264:	d90c      	bls.n	8005280 <_free_r+0x4c>
 8005266:	6821      	ldr	r1, [r4, #0]
 8005268:	1862      	adds	r2, r4, r1
 800526a:	4293      	cmp	r3, r2
 800526c:	bf04      	itt	eq
 800526e:	681a      	ldreq	r2, [r3, #0]
 8005270:	685b      	ldreq	r3, [r3, #4]
 8005272:	6063      	str	r3, [r4, #4]
 8005274:	bf04      	itt	eq
 8005276:	1852      	addeq	r2, r2, r1
 8005278:	6022      	streq	r2, [r4, #0]
 800527a:	6004      	str	r4, [r0, #0]
 800527c:	e7ec      	b.n	8005258 <_free_r+0x24>
 800527e:	4613      	mov	r3, r2
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	b10a      	cbz	r2, 8005288 <_free_r+0x54>
 8005284:	42a2      	cmp	r2, r4
 8005286:	d9fa      	bls.n	800527e <_free_r+0x4a>
 8005288:	6819      	ldr	r1, [r3, #0]
 800528a:	1858      	adds	r0, r3, r1
 800528c:	42a0      	cmp	r0, r4
 800528e:	d10b      	bne.n	80052a8 <_free_r+0x74>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	4401      	add	r1, r0
 8005294:	1858      	adds	r0, r3, r1
 8005296:	4282      	cmp	r2, r0
 8005298:	6019      	str	r1, [r3, #0]
 800529a:	d1dd      	bne.n	8005258 <_free_r+0x24>
 800529c:	6810      	ldr	r0, [r2, #0]
 800529e:	6852      	ldr	r2, [r2, #4]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	4401      	add	r1, r0
 80052a4:	6019      	str	r1, [r3, #0]
 80052a6:	e7d7      	b.n	8005258 <_free_r+0x24>
 80052a8:	d902      	bls.n	80052b0 <_free_r+0x7c>
 80052aa:	230c      	movs	r3, #12
 80052ac:	602b      	str	r3, [r5, #0]
 80052ae:	e7d3      	b.n	8005258 <_free_r+0x24>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	1821      	adds	r1, r4, r0
 80052b4:	428a      	cmp	r2, r1
 80052b6:	bf04      	itt	eq
 80052b8:	6811      	ldreq	r1, [r2, #0]
 80052ba:	6852      	ldreq	r2, [r2, #4]
 80052bc:	6062      	str	r2, [r4, #4]
 80052be:	bf04      	itt	eq
 80052c0:	1809      	addeq	r1, r1, r0
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	605c      	str	r4, [r3, #4]
 80052c6:	e7c7      	b.n	8005258 <_free_r+0x24>
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	2000024c 	.word	0x2000024c

080052d0 <_malloc_r>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	1ccd      	adds	r5, r1, #3
 80052d4:	f025 0503 	bic.w	r5, r5, #3
 80052d8:	3508      	adds	r5, #8
 80052da:	2d0c      	cmp	r5, #12
 80052dc:	bf38      	it	cc
 80052de:	250c      	movcc	r5, #12
 80052e0:	2d00      	cmp	r5, #0
 80052e2:	4606      	mov	r6, r0
 80052e4:	db01      	blt.n	80052ea <_malloc_r+0x1a>
 80052e6:	42a9      	cmp	r1, r5
 80052e8:	d903      	bls.n	80052f2 <_malloc_r+0x22>
 80052ea:	230c      	movs	r3, #12
 80052ec:	6033      	str	r3, [r6, #0]
 80052ee:	2000      	movs	r0, #0
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
 80052f2:	f001 fe4d 	bl	8006f90 <__malloc_lock>
 80052f6:	4a23      	ldr	r2, [pc, #140]	; (8005384 <_malloc_r+0xb4>)
 80052f8:	6814      	ldr	r4, [r2, #0]
 80052fa:	4621      	mov	r1, r4
 80052fc:	b991      	cbnz	r1, 8005324 <_malloc_r+0x54>
 80052fe:	4c22      	ldr	r4, [pc, #136]	; (8005388 <_malloc_r+0xb8>)
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	b91b      	cbnz	r3, 800530c <_malloc_r+0x3c>
 8005304:	4630      	mov	r0, r6
 8005306:	f000 fd29 	bl	8005d5c <_sbrk_r>
 800530a:	6020      	str	r0, [r4, #0]
 800530c:	4629      	mov	r1, r5
 800530e:	4630      	mov	r0, r6
 8005310:	f000 fd24 	bl	8005d5c <_sbrk_r>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d126      	bne.n	8005366 <_malloc_r+0x96>
 8005318:	230c      	movs	r3, #12
 800531a:	6033      	str	r3, [r6, #0]
 800531c:	4630      	mov	r0, r6
 800531e:	f001 fe38 	bl	8006f92 <__malloc_unlock>
 8005322:	e7e4      	b.n	80052ee <_malloc_r+0x1e>
 8005324:	680b      	ldr	r3, [r1, #0]
 8005326:	1b5b      	subs	r3, r3, r5
 8005328:	d41a      	bmi.n	8005360 <_malloc_r+0x90>
 800532a:	2b0b      	cmp	r3, #11
 800532c:	d90f      	bls.n	800534e <_malloc_r+0x7e>
 800532e:	600b      	str	r3, [r1, #0]
 8005330:	50cd      	str	r5, [r1, r3]
 8005332:	18cc      	adds	r4, r1, r3
 8005334:	4630      	mov	r0, r6
 8005336:	f001 fe2c 	bl	8006f92 <__malloc_unlock>
 800533a:	f104 000b 	add.w	r0, r4, #11
 800533e:	1d23      	adds	r3, r4, #4
 8005340:	f020 0007 	bic.w	r0, r0, #7
 8005344:	1ac3      	subs	r3, r0, r3
 8005346:	d01b      	beq.n	8005380 <_malloc_r+0xb0>
 8005348:	425a      	negs	r2, r3
 800534a:	50e2      	str	r2, [r4, r3]
 800534c:	bd70      	pop	{r4, r5, r6, pc}
 800534e:	428c      	cmp	r4, r1
 8005350:	bf0d      	iteet	eq
 8005352:	6863      	ldreq	r3, [r4, #4]
 8005354:	684b      	ldrne	r3, [r1, #4]
 8005356:	6063      	strne	r3, [r4, #4]
 8005358:	6013      	streq	r3, [r2, #0]
 800535a:	bf18      	it	ne
 800535c:	460c      	movne	r4, r1
 800535e:	e7e9      	b.n	8005334 <_malloc_r+0x64>
 8005360:	460c      	mov	r4, r1
 8005362:	6849      	ldr	r1, [r1, #4]
 8005364:	e7ca      	b.n	80052fc <_malloc_r+0x2c>
 8005366:	1cc4      	adds	r4, r0, #3
 8005368:	f024 0403 	bic.w	r4, r4, #3
 800536c:	42a0      	cmp	r0, r4
 800536e:	d005      	beq.n	800537c <_malloc_r+0xac>
 8005370:	1a21      	subs	r1, r4, r0
 8005372:	4630      	mov	r0, r6
 8005374:	f000 fcf2 	bl	8005d5c <_sbrk_r>
 8005378:	3001      	adds	r0, #1
 800537a:	d0cd      	beq.n	8005318 <_malloc_r+0x48>
 800537c:	6025      	str	r5, [r4, #0]
 800537e:	e7d9      	b.n	8005334 <_malloc_r+0x64>
 8005380:	bd70      	pop	{r4, r5, r6, pc}
 8005382:	bf00      	nop
 8005384:	2000024c 	.word	0x2000024c
 8005388:	20000250 	.word	0x20000250

0800538c <__cvt>:
 800538c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	ec55 4b10 	vmov	r4, r5, d0
 8005394:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005396:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800539a:	2d00      	cmp	r5, #0
 800539c:	460e      	mov	r6, r1
 800539e:	4691      	mov	r9, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	bfb8      	it	lt
 80053a4:	4622      	movlt	r2, r4
 80053a6:	462b      	mov	r3, r5
 80053a8:	f027 0720 	bic.w	r7, r7, #32
 80053ac:	bfbb      	ittet	lt
 80053ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053b2:	461d      	movlt	r5, r3
 80053b4:	2300      	movge	r3, #0
 80053b6:	232d      	movlt	r3, #45	; 0x2d
 80053b8:	bfb8      	it	lt
 80053ba:	4614      	movlt	r4, r2
 80053bc:	2f46      	cmp	r7, #70	; 0x46
 80053be:	700b      	strb	r3, [r1, #0]
 80053c0:	d004      	beq.n	80053cc <__cvt+0x40>
 80053c2:	2f45      	cmp	r7, #69	; 0x45
 80053c4:	d100      	bne.n	80053c8 <__cvt+0x3c>
 80053c6:	3601      	adds	r6, #1
 80053c8:	2102      	movs	r1, #2
 80053ca:	e000      	b.n	80053ce <__cvt+0x42>
 80053cc:	2103      	movs	r1, #3
 80053ce:	ab03      	add	r3, sp, #12
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	ab02      	add	r3, sp, #8
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	4632      	mov	r2, r6
 80053d8:	4653      	mov	r3, sl
 80053da:	ec45 4b10 	vmov	d0, r4, r5
 80053de:	f000 fe1b 	bl	8006018 <_dtoa_r>
 80053e2:	2f47      	cmp	r7, #71	; 0x47
 80053e4:	4680      	mov	r8, r0
 80053e6:	d102      	bne.n	80053ee <__cvt+0x62>
 80053e8:	f019 0f01 	tst.w	r9, #1
 80053ec:	d026      	beq.n	800543c <__cvt+0xb0>
 80053ee:	2f46      	cmp	r7, #70	; 0x46
 80053f0:	eb08 0906 	add.w	r9, r8, r6
 80053f4:	d111      	bne.n	800541a <__cvt+0x8e>
 80053f6:	f898 3000 	ldrb.w	r3, [r8]
 80053fa:	2b30      	cmp	r3, #48	; 0x30
 80053fc:	d10a      	bne.n	8005414 <__cvt+0x88>
 80053fe:	2200      	movs	r2, #0
 8005400:	2300      	movs	r3, #0
 8005402:	4620      	mov	r0, r4
 8005404:	4629      	mov	r1, r5
 8005406:	f7fb fb6b 	bl	8000ae0 <__aeabi_dcmpeq>
 800540a:	b918      	cbnz	r0, 8005414 <__cvt+0x88>
 800540c:	f1c6 0601 	rsb	r6, r6, #1
 8005410:	f8ca 6000 	str.w	r6, [sl]
 8005414:	f8da 3000 	ldr.w	r3, [sl]
 8005418:	4499      	add	r9, r3
 800541a:	2200      	movs	r2, #0
 800541c:	2300      	movs	r3, #0
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fb fb5d 	bl	8000ae0 <__aeabi_dcmpeq>
 8005426:	b938      	cbnz	r0, 8005438 <__cvt+0xac>
 8005428:	2230      	movs	r2, #48	; 0x30
 800542a:	9b03      	ldr	r3, [sp, #12]
 800542c:	4599      	cmp	r9, r3
 800542e:	d905      	bls.n	800543c <__cvt+0xb0>
 8005430:	1c59      	adds	r1, r3, #1
 8005432:	9103      	str	r1, [sp, #12]
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	e7f8      	b.n	800542a <__cvt+0x9e>
 8005438:	f8cd 900c 	str.w	r9, [sp, #12]
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005440:	eba3 0308 	sub.w	r3, r3, r8
 8005444:	4640      	mov	r0, r8
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	b004      	add	sp, #16
 800544a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800544e <__exponent>:
 800544e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005450:	4603      	mov	r3, r0
 8005452:	2900      	cmp	r1, #0
 8005454:	bfb8      	it	lt
 8005456:	4249      	neglt	r1, r1
 8005458:	f803 2b02 	strb.w	r2, [r3], #2
 800545c:	bfb4      	ite	lt
 800545e:	222d      	movlt	r2, #45	; 0x2d
 8005460:	222b      	movge	r2, #43	; 0x2b
 8005462:	2909      	cmp	r1, #9
 8005464:	7042      	strb	r2, [r0, #1]
 8005466:	dd20      	ble.n	80054aa <__exponent+0x5c>
 8005468:	f10d 0207 	add.w	r2, sp, #7
 800546c:	4617      	mov	r7, r2
 800546e:	260a      	movs	r6, #10
 8005470:	fb91 f5f6 	sdiv	r5, r1, r6
 8005474:	fb06 1115 	mls	r1, r6, r5, r1
 8005478:	3130      	adds	r1, #48	; 0x30
 800547a:	2d09      	cmp	r5, #9
 800547c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005480:	f102 34ff 	add.w	r4, r2, #4294967295
 8005484:	4629      	mov	r1, r5
 8005486:	dc09      	bgt.n	800549c <__exponent+0x4e>
 8005488:	3130      	adds	r1, #48	; 0x30
 800548a:	3a02      	subs	r2, #2
 800548c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005490:	42ba      	cmp	r2, r7
 8005492:	461c      	mov	r4, r3
 8005494:	d304      	bcc.n	80054a0 <__exponent+0x52>
 8005496:	1a20      	subs	r0, r4, r0
 8005498:	b003      	add	sp, #12
 800549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549c:	4622      	mov	r2, r4
 800549e:	e7e7      	b.n	8005470 <__exponent+0x22>
 80054a0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80054a4:	f803 1b01 	strb.w	r1, [r3], #1
 80054a8:	e7f2      	b.n	8005490 <__exponent+0x42>
 80054aa:	2230      	movs	r2, #48	; 0x30
 80054ac:	461c      	mov	r4, r3
 80054ae:	4411      	add	r1, r2
 80054b0:	f804 2b02 	strb.w	r2, [r4], #2
 80054b4:	7059      	strb	r1, [r3, #1]
 80054b6:	e7ee      	b.n	8005496 <__exponent+0x48>

080054b8 <_printf_float>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	b08d      	sub	sp, #52	; 0x34
 80054be:	460c      	mov	r4, r1
 80054c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80054c4:	4616      	mov	r6, r2
 80054c6:	461f      	mov	r7, r3
 80054c8:	4605      	mov	r5, r0
 80054ca:	f001 fcef 	bl	8006eac <_localeconv_r>
 80054ce:	6803      	ldr	r3, [r0, #0]
 80054d0:	9304      	str	r3, [sp, #16]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fa fe8c 	bl	80001f0 <strlen>
 80054d8:	2300      	movs	r3, #0
 80054da:	930a      	str	r3, [sp, #40]	; 0x28
 80054dc:	f8d8 3000 	ldr.w	r3, [r8]
 80054e0:	9005      	str	r0, [sp, #20]
 80054e2:	3307      	adds	r3, #7
 80054e4:	f023 0307 	bic.w	r3, r3, #7
 80054e8:	f103 0208 	add.w	r2, r3, #8
 80054ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80054f0:	f8d4 b000 	ldr.w	fp, [r4]
 80054f4:	f8c8 2000 	str.w	r2, [r8]
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005500:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005504:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005508:	9307      	str	r3, [sp, #28]
 800550a:	f8cd 8018 	str.w	r8, [sp, #24]
 800550e:	f04f 32ff 	mov.w	r2, #4294967295
 8005512:	4ba5      	ldr	r3, [pc, #660]	; (80057a8 <_printf_float+0x2f0>)
 8005514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005518:	f7fb fb14 	bl	8000b44 <__aeabi_dcmpun>
 800551c:	2800      	cmp	r0, #0
 800551e:	f040 81fb 	bne.w	8005918 <_printf_float+0x460>
 8005522:	f04f 32ff 	mov.w	r2, #4294967295
 8005526:	4ba0      	ldr	r3, [pc, #640]	; (80057a8 <_printf_float+0x2f0>)
 8005528:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800552c:	f7fb faec 	bl	8000b08 <__aeabi_dcmple>
 8005530:	2800      	cmp	r0, #0
 8005532:	f040 81f1 	bne.w	8005918 <_printf_float+0x460>
 8005536:	2200      	movs	r2, #0
 8005538:	2300      	movs	r3, #0
 800553a:	4640      	mov	r0, r8
 800553c:	4649      	mov	r1, r9
 800553e:	f7fb fad9 	bl	8000af4 <__aeabi_dcmplt>
 8005542:	b110      	cbz	r0, 800554a <_printf_float+0x92>
 8005544:	232d      	movs	r3, #45	; 0x2d
 8005546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800554a:	4b98      	ldr	r3, [pc, #608]	; (80057ac <_printf_float+0x2f4>)
 800554c:	4a98      	ldr	r2, [pc, #608]	; (80057b0 <_printf_float+0x2f8>)
 800554e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005552:	bf8c      	ite	hi
 8005554:	4690      	movhi	r8, r2
 8005556:	4698      	movls	r8, r3
 8005558:	2303      	movs	r3, #3
 800555a:	f02b 0204 	bic.w	r2, fp, #4
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	6022      	str	r2, [r4, #0]
 8005562:	f04f 0900 	mov.w	r9, #0
 8005566:	9700      	str	r7, [sp, #0]
 8005568:	4633      	mov	r3, r6
 800556a:	aa0b      	add	r2, sp, #44	; 0x2c
 800556c:	4621      	mov	r1, r4
 800556e:	4628      	mov	r0, r5
 8005570:	f000 f9e2 	bl	8005938 <_printf_common>
 8005574:	3001      	adds	r0, #1
 8005576:	f040 8093 	bne.w	80056a0 <_printf_float+0x1e8>
 800557a:	f04f 30ff 	mov.w	r0, #4294967295
 800557e:	b00d      	add	sp, #52	; 0x34
 8005580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005584:	6861      	ldr	r1, [r4, #4]
 8005586:	1c4b      	adds	r3, r1, #1
 8005588:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800558c:	d13f      	bne.n	800560e <_printf_float+0x156>
 800558e:	2306      	movs	r3, #6
 8005590:	6063      	str	r3, [r4, #4]
 8005592:	2300      	movs	r3, #0
 8005594:	9303      	str	r3, [sp, #12]
 8005596:	ab0a      	add	r3, sp, #40	; 0x28
 8005598:	9302      	str	r3, [sp, #8]
 800559a:	ab09      	add	r3, sp, #36	; 0x24
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	ec49 8b10 	vmov	d0, r8, r9
 80055a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055a6:	6022      	str	r2, [r4, #0]
 80055a8:	f8cd a004 	str.w	sl, [sp, #4]
 80055ac:	6861      	ldr	r1, [r4, #4]
 80055ae:	4628      	mov	r0, r5
 80055b0:	f7ff feec 	bl	800538c <__cvt>
 80055b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80055b8:	2b47      	cmp	r3, #71	; 0x47
 80055ba:	4680      	mov	r8, r0
 80055bc:	d109      	bne.n	80055d2 <_printf_float+0x11a>
 80055be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c0:	1cd8      	adds	r0, r3, #3
 80055c2:	db02      	blt.n	80055ca <_printf_float+0x112>
 80055c4:	6862      	ldr	r2, [r4, #4]
 80055c6:	4293      	cmp	r3, r2
 80055c8:	dd57      	ble.n	800567a <_printf_float+0x1c2>
 80055ca:	f1aa 0a02 	sub.w	sl, sl, #2
 80055ce:	fa5f fa8a 	uxtb.w	sl, sl
 80055d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80055d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055d8:	d834      	bhi.n	8005644 <_printf_float+0x18c>
 80055da:	3901      	subs	r1, #1
 80055dc:	4652      	mov	r2, sl
 80055de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055e2:	9109      	str	r1, [sp, #36]	; 0x24
 80055e4:	f7ff ff33 	bl	800544e <__exponent>
 80055e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ea:	1883      	adds	r3, r0, r2
 80055ec:	2a01      	cmp	r2, #1
 80055ee:	4681      	mov	r9, r0
 80055f0:	6123      	str	r3, [r4, #16]
 80055f2:	dc02      	bgt.n	80055fa <_printf_float+0x142>
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	07d1      	lsls	r1, r2, #31
 80055f8:	d501      	bpl.n	80055fe <_printf_float+0x146>
 80055fa:	3301      	adds	r3, #1
 80055fc:	6123      	str	r3, [r4, #16]
 80055fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0af      	beq.n	8005566 <_printf_float+0xae>
 8005606:	232d      	movs	r3, #45	; 0x2d
 8005608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800560c:	e7ab      	b.n	8005566 <_printf_float+0xae>
 800560e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005612:	d002      	beq.n	800561a <_printf_float+0x162>
 8005614:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005618:	d1bb      	bne.n	8005592 <_printf_float+0xda>
 800561a:	b189      	cbz	r1, 8005640 <_printf_float+0x188>
 800561c:	2300      	movs	r3, #0
 800561e:	9303      	str	r3, [sp, #12]
 8005620:	ab0a      	add	r3, sp, #40	; 0x28
 8005622:	9302      	str	r3, [sp, #8]
 8005624:	ab09      	add	r3, sp, #36	; 0x24
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	ec49 8b10 	vmov	d0, r8, r9
 800562c:	6022      	str	r2, [r4, #0]
 800562e:	f8cd a004 	str.w	sl, [sp, #4]
 8005632:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005636:	4628      	mov	r0, r5
 8005638:	f7ff fea8 	bl	800538c <__cvt>
 800563c:	4680      	mov	r8, r0
 800563e:	e7be      	b.n	80055be <_printf_float+0x106>
 8005640:	2301      	movs	r3, #1
 8005642:	e7a5      	b.n	8005590 <_printf_float+0xd8>
 8005644:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005648:	d119      	bne.n	800567e <_printf_float+0x1c6>
 800564a:	2900      	cmp	r1, #0
 800564c:	6863      	ldr	r3, [r4, #4]
 800564e:	dd0c      	ble.n	800566a <_printf_float+0x1b2>
 8005650:	6121      	str	r1, [r4, #16]
 8005652:	b913      	cbnz	r3, 800565a <_printf_float+0x1a2>
 8005654:	6822      	ldr	r2, [r4, #0]
 8005656:	07d2      	lsls	r2, r2, #31
 8005658:	d502      	bpl.n	8005660 <_printf_float+0x1a8>
 800565a:	3301      	adds	r3, #1
 800565c:	440b      	add	r3, r1
 800565e:	6123      	str	r3, [r4, #16]
 8005660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005662:	65a3      	str	r3, [r4, #88]	; 0x58
 8005664:	f04f 0900 	mov.w	r9, #0
 8005668:	e7c9      	b.n	80055fe <_printf_float+0x146>
 800566a:	b913      	cbnz	r3, 8005672 <_printf_float+0x1ba>
 800566c:	6822      	ldr	r2, [r4, #0]
 800566e:	07d0      	lsls	r0, r2, #31
 8005670:	d501      	bpl.n	8005676 <_printf_float+0x1be>
 8005672:	3302      	adds	r3, #2
 8005674:	e7f3      	b.n	800565e <_printf_float+0x1a6>
 8005676:	2301      	movs	r3, #1
 8005678:	e7f1      	b.n	800565e <_printf_float+0x1a6>
 800567a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800567e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005682:	4293      	cmp	r3, r2
 8005684:	db05      	blt.n	8005692 <_printf_float+0x1da>
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	6123      	str	r3, [r4, #16]
 800568a:	07d1      	lsls	r1, r2, #31
 800568c:	d5e8      	bpl.n	8005660 <_printf_float+0x1a8>
 800568e:	3301      	adds	r3, #1
 8005690:	e7e5      	b.n	800565e <_printf_float+0x1a6>
 8005692:	2b00      	cmp	r3, #0
 8005694:	bfd4      	ite	le
 8005696:	f1c3 0302 	rsble	r3, r3, #2
 800569a:	2301      	movgt	r3, #1
 800569c:	4413      	add	r3, r2
 800569e:	e7de      	b.n	800565e <_printf_float+0x1a6>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	055a      	lsls	r2, r3, #21
 80056a4:	d407      	bmi.n	80056b6 <_printf_float+0x1fe>
 80056a6:	6923      	ldr	r3, [r4, #16]
 80056a8:	4642      	mov	r2, r8
 80056aa:	4631      	mov	r1, r6
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b8      	blx	r7
 80056b0:	3001      	adds	r0, #1
 80056b2:	d12b      	bne.n	800570c <_printf_float+0x254>
 80056b4:	e761      	b.n	800557a <_printf_float+0xc2>
 80056b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80056ba:	f240 80e2 	bls.w	8005882 <_printf_float+0x3ca>
 80056be:	2200      	movs	r2, #0
 80056c0:	2300      	movs	r3, #0
 80056c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056c6:	f7fb fa0b 	bl	8000ae0 <__aeabi_dcmpeq>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d03c      	beq.n	8005748 <_printf_float+0x290>
 80056ce:	2301      	movs	r3, #1
 80056d0:	4a38      	ldr	r2, [pc, #224]	; (80057b4 <_printf_float+0x2fc>)
 80056d2:	4631      	mov	r1, r6
 80056d4:	4628      	mov	r0, r5
 80056d6:	47b8      	blx	r7
 80056d8:	3001      	adds	r0, #1
 80056da:	f43f af4e 	beq.w	800557a <_printf_float+0xc2>
 80056de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e2:	429a      	cmp	r2, r3
 80056e4:	db02      	blt.n	80056ec <_printf_float+0x234>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	07d8      	lsls	r0, r3, #31
 80056ea:	d50f      	bpl.n	800570c <_printf_float+0x254>
 80056ec:	9b05      	ldr	r3, [sp, #20]
 80056ee:	9a04      	ldr	r2, [sp, #16]
 80056f0:	4631      	mov	r1, r6
 80056f2:	4628      	mov	r0, r5
 80056f4:	47b8      	blx	r7
 80056f6:	3001      	adds	r0, #1
 80056f8:	f43f af3f 	beq.w	800557a <_printf_float+0xc2>
 80056fc:	f04f 0800 	mov.w	r8, #0
 8005700:	f104 091a 	add.w	r9, r4, #26
 8005704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005706:	3b01      	subs	r3, #1
 8005708:	4598      	cmp	r8, r3
 800570a:	db12      	blt.n	8005732 <_printf_float+0x27a>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	079b      	lsls	r3, r3, #30
 8005710:	d509      	bpl.n	8005726 <_printf_float+0x26e>
 8005712:	f04f 0800 	mov.w	r8, #0
 8005716:	f104 0919 	add.w	r9, r4, #25
 800571a:	68e3      	ldr	r3, [r4, #12]
 800571c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800571e:	1a9b      	subs	r3, r3, r2
 8005720:	4598      	cmp	r8, r3
 8005722:	f2c0 80ee 	blt.w	8005902 <_printf_float+0x44a>
 8005726:	68e0      	ldr	r0, [r4, #12]
 8005728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800572a:	4298      	cmp	r0, r3
 800572c:	bfb8      	it	lt
 800572e:	4618      	movlt	r0, r3
 8005730:	e725      	b.n	800557e <_printf_float+0xc6>
 8005732:	2301      	movs	r3, #1
 8005734:	464a      	mov	r2, r9
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	47b8      	blx	r7
 800573c:	3001      	adds	r0, #1
 800573e:	f43f af1c 	beq.w	800557a <_printf_float+0xc2>
 8005742:	f108 0801 	add.w	r8, r8, #1
 8005746:	e7dd      	b.n	8005704 <_printf_float+0x24c>
 8005748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	dc34      	bgt.n	80057b8 <_printf_float+0x300>
 800574e:	2301      	movs	r3, #1
 8005750:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <_printf_float+0x2fc>)
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	f43f af0e 	beq.w	800557a <_printf_float+0xc2>
 800575e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005760:	b923      	cbnz	r3, 800576c <_printf_float+0x2b4>
 8005762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005764:	b913      	cbnz	r3, 800576c <_printf_float+0x2b4>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	07d9      	lsls	r1, r3, #31
 800576a:	d5cf      	bpl.n	800570c <_printf_float+0x254>
 800576c:	9b05      	ldr	r3, [sp, #20]
 800576e:	9a04      	ldr	r2, [sp, #16]
 8005770:	4631      	mov	r1, r6
 8005772:	4628      	mov	r0, r5
 8005774:	47b8      	blx	r7
 8005776:	3001      	adds	r0, #1
 8005778:	f43f aeff 	beq.w	800557a <_printf_float+0xc2>
 800577c:	f04f 0900 	mov.w	r9, #0
 8005780:	f104 0a1a 	add.w	sl, r4, #26
 8005784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005786:	425b      	negs	r3, r3
 8005788:	4599      	cmp	r9, r3
 800578a:	db01      	blt.n	8005790 <_printf_float+0x2d8>
 800578c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800578e:	e78b      	b.n	80056a8 <_printf_float+0x1f0>
 8005790:	2301      	movs	r3, #1
 8005792:	4652      	mov	r2, sl
 8005794:	4631      	mov	r1, r6
 8005796:	4628      	mov	r0, r5
 8005798:	47b8      	blx	r7
 800579a:	3001      	adds	r0, #1
 800579c:	f43f aeed 	beq.w	800557a <_printf_float+0xc2>
 80057a0:	f109 0901 	add.w	r9, r9, #1
 80057a4:	e7ee      	b.n	8005784 <_printf_float+0x2cc>
 80057a6:	bf00      	nop
 80057a8:	7fefffff 	.word	0x7fefffff
 80057ac:	080081e8 	.word	0x080081e8
 80057b0:	080081ec 	.word	0x080081ec
 80057b4:	080081f8 	.word	0x080081f8
 80057b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057bc:	429a      	cmp	r2, r3
 80057be:	bfa8      	it	ge
 80057c0:	461a      	movge	r2, r3
 80057c2:	2a00      	cmp	r2, #0
 80057c4:	4691      	mov	r9, r2
 80057c6:	dc38      	bgt.n	800583a <_printf_float+0x382>
 80057c8:	f104 031a 	add.w	r3, r4, #26
 80057cc:	f04f 0b00 	mov.w	fp, #0
 80057d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057d4:	9306      	str	r3, [sp, #24]
 80057d6:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80057da:	ebaa 0309 	sub.w	r3, sl, r9
 80057de:	459b      	cmp	fp, r3
 80057e0:	db33      	blt.n	800584a <_printf_float+0x392>
 80057e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057e6:	429a      	cmp	r2, r3
 80057e8:	db3a      	blt.n	8005860 <_printf_float+0x3a8>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	07da      	lsls	r2, r3, #31
 80057ee:	d437      	bmi.n	8005860 <_printf_float+0x3a8>
 80057f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057f4:	eba3 020a 	sub.w	r2, r3, sl
 80057f8:	eba3 0901 	sub.w	r9, r3, r1
 80057fc:	4591      	cmp	r9, r2
 80057fe:	bfa8      	it	ge
 8005800:	4691      	movge	r9, r2
 8005802:	f1b9 0f00 	cmp.w	r9, #0
 8005806:	dc33      	bgt.n	8005870 <_printf_float+0x3b8>
 8005808:	f04f 0800 	mov.w	r8, #0
 800580c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005810:	f104 0a1a 	add.w	sl, r4, #26
 8005814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	eba3 0309 	sub.w	r3, r3, r9
 800581e:	4598      	cmp	r8, r3
 8005820:	f6bf af74 	bge.w	800570c <_printf_float+0x254>
 8005824:	2301      	movs	r3, #1
 8005826:	4652      	mov	r2, sl
 8005828:	4631      	mov	r1, r6
 800582a:	4628      	mov	r0, r5
 800582c:	47b8      	blx	r7
 800582e:	3001      	adds	r0, #1
 8005830:	f43f aea3 	beq.w	800557a <_printf_float+0xc2>
 8005834:	f108 0801 	add.w	r8, r8, #1
 8005838:	e7ec      	b.n	8005814 <_printf_float+0x35c>
 800583a:	4613      	mov	r3, r2
 800583c:	4631      	mov	r1, r6
 800583e:	4642      	mov	r2, r8
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	d1bf      	bne.n	80057c8 <_printf_float+0x310>
 8005848:	e697      	b.n	800557a <_printf_float+0xc2>
 800584a:	2301      	movs	r3, #1
 800584c:	9a06      	ldr	r2, [sp, #24]
 800584e:	4631      	mov	r1, r6
 8005850:	4628      	mov	r0, r5
 8005852:	47b8      	blx	r7
 8005854:	3001      	adds	r0, #1
 8005856:	f43f ae90 	beq.w	800557a <_printf_float+0xc2>
 800585a:	f10b 0b01 	add.w	fp, fp, #1
 800585e:	e7ba      	b.n	80057d6 <_printf_float+0x31e>
 8005860:	9b05      	ldr	r3, [sp, #20]
 8005862:	9a04      	ldr	r2, [sp, #16]
 8005864:	4631      	mov	r1, r6
 8005866:	4628      	mov	r0, r5
 8005868:	47b8      	blx	r7
 800586a:	3001      	adds	r0, #1
 800586c:	d1c0      	bne.n	80057f0 <_printf_float+0x338>
 800586e:	e684      	b.n	800557a <_printf_float+0xc2>
 8005870:	464b      	mov	r3, r9
 8005872:	eb08 020a 	add.w	r2, r8, sl
 8005876:	4631      	mov	r1, r6
 8005878:	4628      	mov	r0, r5
 800587a:	47b8      	blx	r7
 800587c:	3001      	adds	r0, #1
 800587e:	d1c3      	bne.n	8005808 <_printf_float+0x350>
 8005880:	e67b      	b.n	800557a <_printf_float+0xc2>
 8005882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005884:	2a01      	cmp	r2, #1
 8005886:	dc01      	bgt.n	800588c <_printf_float+0x3d4>
 8005888:	07db      	lsls	r3, r3, #31
 800588a:	d537      	bpl.n	80058fc <_printf_float+0x444>
 800588c:	2301      	movs	r3, #1
 800588e:	4642      	mov	r2, r8
 8005890:	4631      	mov	r1, r6
 8005892:	4628      	mov	r0, r5
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	f43f ae6f 	beq.w	800557a <_printf_float+0xc2>
 800589c:	9b05      	ldr	r3, [sp, #20]
 800589e:	9a04      	ldr	r2, [sp, #16]
 80058a0:	4631      	mov	r1, r6
 80058a2:	4628      	mov	r0, r5
 80058a4:	47b8      	blx	r7
 80058a6:	3001      	adds	r0, #1
 80058a8:	f43f ae67 	beq.w	800557a <_printf_float+0xc2>
 80058ac:	2200      	movs	r2, #0
 80058ae:	2300      	movs	r3, #0
 80058b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058b4:	f7fb f914 	bl	8000ae0 <__aeabi_dcmpeq>
 80058b8:	b158      	cbz	r0, 80058d2 <_printf_float+0x41a>
 80058ba:	f04f 0800 	mov.w	r8, #0
 80058be:	f104 0a1a 	add.w	sl, r4, #26
 80058c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c4:	3b01      	subs	r3, #1
 80058c6:	4598      	cmp	r8, r3
 80058c8:	db0d      	blt.n	80058e6 <_printf_float+0x42e>
 80058ca:	464b      	mov	r3, r9
 80058cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058d0:	e6eb      	b.n	80056aa <_printf_float+0x1f2>
 80058d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d4:	f108 0201 	add.w	r2, r8, #1
 80058d8:	3b01      	subs	r3, #1
 80058da:	4631      	mov	r1, r6
 80058dc:	4628      	mov	r0, r5
 80058de:	47b8      	blx	r7
 80058e0:	3001      	adds	r0, #1
 80058e2:	d1f2      	bne.n	80058ca <_printf_float+0x412>
 80058e4:	e649      	b.n	800557a <_printf_float+0xc2>
 80058e6:	2301      	movs	r3, #1
 80058e8:	4652      	mov	r2, sl
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b8      	blx	r7
 80058f0:	3001      	adds	r0, #1
 80058f2:	f43f ae42 	beq.w	800557a <_printf_float+0xc2>
 80058f6:	f108 0801 	add.w	r8, r8, #1
 80058fa:	e7e2      	b.n	80058c2 <_printf_float+0x40a>
 80058fc:	2301      	movs	r3, #1
 80058fe:	4642      	mov	r2, r8
 8005900:	e7eb      	b.n	80058da <_printf_float+0x422>
 8005902:	2301      	movs	r3, #1
 8005904:	464a      	mov	r2, r9
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	47b8      	blx	r7
 800590c:	3001      	adds	r0, #1
 800590e:	f43f ae34 	beq.w	800557a <_printf_float+0xc2>
 8005912:	f108 0801 	add.w	r8, r8, #1
 8005916:	e700      	b.n	800571a <_printf_float+0x262>
 8005918:	4642      	mov	r2, r8
 800591a:	464b      	mov	r3, r9
 800591c:	4640      	mov	r0, r8
 800591e:	4649      	mov	r1, r9
 8005920:	f7fb f910 	bl	8000b44 <__aeabi_dcmpun>
 8005924:	2800      	cmp	r0, #0
 8005926:	f43f ae2d 	beq.w	8005584 <_printf_float+0xcc>
 800592a:	4b01      	ldr	r3, [pc, #4]	; (8005930 <_printf_float+0x478>)
 800592c:	4a01      	ldr	r2, [pc, #4]	; (8005934 <_printf_float+0x47c>)
 800592e:	e60e      	b.n	800554e <_printf_float+0x96>
 8005930:	080081f0 	.word	0x080081f0
 8005934:	080081f4 	.word	0x080081f4

08005938 <_printf_common>:
 8005938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	4691      	mov	r9, r2
 800593e:	461f      	mov	r7, r3
 8005940:	688a      	ldr	r2, [r1, #8]
 8005942:	690b      	ldr	r3, [r1, #16]
 8005944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005948:	4293      	cmp	r3, r2
 800594a:	bfb8      	it	lt
 800594c:	4613      	movlt	r3, r2
 800594e:	f8c9 3000 	str.w	r3, [r9]
 8005952:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005956:	4606      	mov	r6, r0
 8005958:	460c      	mov	r4, r1
 800595a:	b112      	cbz	r2, 8005962 <_printf_common+0x2a>
 800595c:	3301      	adds	r3, #1
 800595e:	f8c9 3000 	str.w	r3, [r9]
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	0699      	lsls	r1, r3, #26
 8005966:	bf42      	ittt	mi
 8005968:	f8d9 3000 	ldrmi.w	r3, [r9]
 800596c:	3302      	addmi	r3, #2
 800596e:	f8c9 3000 	strmi.w	r3, [r9]
 8005972:	6825      	ldr	r5, [r4, #0]
 8005974:	f015 0506 	ands.w	r5, r5, #6
 8005978:	d107      	bne.n	800598a <_printf_common+0x52>
 800597a:	f104 0a19 	add.w	sl, r4, #25
 800597e:	68e3      	ldr	r3, [r4, #12]
 8005980:	f8d9 2000 	ldr.w	r2, [r9]
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	429d      	cmp	r5, r3
 8005988:	db29      	blt.n	80059de <_printf_common+0xa6>
 800598a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800598e:	6822      	ldr	r2, [r4, #0]
 8005990:	3300      	adds	r3, #0
 8005992:	bf18      	it	ne
 8005994:	2301      	movne	r3, #1
 8005996:	0692      	lsls	r2, r2, #26
 8005998:	d42e      	bmi.n	80059f8 <_printf_common+0xc0>
 800599a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800599e:	4639      	mov	r1, r7
 80059a0:	4630      	mov	r0, r6
 80059a2:	47c0      	blx	r8
 80059a4:	3001      	adds	r0, #1
 80059a6:	d021      	beq.n	80059ec <_printf_common+0xb4>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	68e5      	ldr	r5, [r4, #12]
 80059ac:	f8d9 2000 	ldr.w	r2, [r9]
 80059b0:	f003 0306 	and.w	r3, r3, #6
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	bf08      	it	eq
 80059b8:	1aad      	subeq	r5, r5, r2
 80059ba:	68a3      	ldr	r3, [r4, #8]
 80059bc:	6922      	ldr	r2, [r4, #16]
 80059be:	bf0c      	ite	eq
 80059c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059c4:	2500      	movne	r5, #0
 80059c6:	4293      	cmp	r3, r2
 80059c8:	bfc4      	itt	gt
 80059ca:	1a9b      	subgt	r3, r3, r2
 80059cc:	18ed      	addgt	r5, r5, r3
 80059ce:	f04f 0900 	mov.w	r9, #0
 80059d2:	341a      	adds	r4, #26
 80059d4:	454d      	cmp	r5, r9
 80059d6:	d11b      	bne.n	8005a10 <_printf_common+0xd8>
 80059d8:	2000      	movs	r0, #0
 80059da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059de:	2301      	movs	r3, #1
 80059e0:	4652      	mov	r2, sl
 80059e2:	4639      	mov	r1, r7
 80059e4:	4630      	mov	r0, r6
 80059e6:	47c0      	blx	r8
 80059e8:	3001      	adds	r0, #1
 80059ea:	d103      	bne.n	80059f4 <_printf_common+0xbc>
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295
 80059f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f4:	3501      	adds	r5, #1
 80059f6:	e7c2      	b.n	800597e <_printf_common+0x46>
 80059f8:	18e1      	adds	r1, r4, r3
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	2030      	movs	r0, #48	; 0x30
 80059fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a02:	4422      	add	r2, r4
 8005a04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	e7c4      	b.n	800599a <_printf_common+0x62>
 8005a10:	2301      	movs	r3, #1
 8005a12:	4622      	mov	r2, r4
 8005a14:	4639      	mov	r1, r7
 8005a16:	4630      	mov	r0, r6
 8005a18:	47c0      	blx	r8
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d0e6      	beq.n	80059ec <_printf_common+0xb4>
 8005a1e:	f109 0901 	add.w	r9, r9, #1
 8005a22:	e7d7      	b.n	80059d4 <_printf_common+0x9c>

08005a24 <_printf_i>:
 8005a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a28:	4617      	mov	r7, r2
 8005a2a:	7e0a      	ldrb	r2, [r1, #24]
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	2a6e      	cmp	r2, #110	; 0x6e
 8005a30:	4698      	mov	r8, r3
 8005a32:	4606      	mov	r6, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a38:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005a3c:	f000 80bc 	beq.w	8005bb8 <_printf_i+0x194>
 8005a40:	d81a      	bhi.n	8005a78 <_printf_i+0x54>
 8005a42:	2a63      	cmp	r2, #99	; 0x63
 8005a44:	d02e      	beq.n	8005aa4 <_printf_i+0x80>
 8005a46:	d80a      	bhi.n	8005a5e <_printf_i+0x3a>
 8005a48:	2a00      	cmp	r2, #0
 8005a4a:	f000 80c8 	beq.w	8005bde <_printf_i+0x1ba>
 8005a4e:	2a58      	cmp	r2, #88	; 0x58
 8005a50:	f000 808a 	beq.w	8005b68 <_printf_i+0x144>
 8005a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a58:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005a5c:	e02a      	b.n	8005ab4 <_printf_i+0x90>
 8005a5e:	2a64      	cmp	r2, #100	; 0x64
 8005a60:	d001      	beq.n	8005a66 <_printf_i+0x42>
 8005a62:	2a69      	cmp	r2, #105	; 0x69
 8005a64:	d1f6      	bne.n	8005a54 <_printf_i+0x30>
 8005a66:	6821      	ldr	r1, [r4, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005a6e:	d023      	beq.n	8005ab8 <_printf_i+0x94>
 8005a70:	1d11      	adds	r1, r2, #4
 8005a72:	6019      	str	r1, [r3, #0]
 8005a74:	6813      	ldr	r3, [r2, #0]
 8005a76:	e027      	b.n	8005ac8 <_printf_i+0xa4>
 8005a78:	2a73      	cmp	r2, #115	; 0x73
 8005a7a:	f000 80b4 	beq.w	8005be6 <_printf_i+0x1c2>
 8005a7e:	d808      	bhi.n	8005a92 <_printf_i+0x6e>
 8005a80:	2a6f      	cmp	r2, #111	; 0x6f
 8005a82:	d02a      	beq.n	8005ada <_printf_i+0xb6>
 8005a84:	2a70      	cmp	r2, #112	; 0x70
 8005a86:	d1e5      	bne.n	8005a54 <_printf_i+0x30>
 8005a88:	680a      	ldr	r2, [r1, #0]
 8005a8a:	f042 0220 	orr.w	r2, r2, #32
 8005a8e:	600a      	str	r2, [r1, #0]
 8005a90:	e003      	b.n	8005a9a <_printf_i+0x76>
 8005a92:	2a75      	cmp	r2, #117	; 0x75
 8005a94:	d021      	beq.n	8005ada <_printf_i+0xb6>
 8005a96:	2a78      	cmp	r2, #120	; 0x78
 8005a98:	d1dc      	bne.n	8005a54 <_printf_i+0x30>
 8005a9a:	2278      	movs	r2, #120	; 0x78
 8005a9c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005aa0:	496e      	ldr	r1, [pc, #440]	; (8005c5c <_printf_i+0x238>)
 8005aa2:	e064      	b.n	8005b6e <_printf_i+0x14a>
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005aaa:	1d11      	adds	r1, r2, #4
 8005aac:	6019      	str	r1, [r3, #0]
 8005aae:	6813      	ldr	r3, [r2, #0]
 8005ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e0a3      	b.n	8005c00 <_printf_i+0x1dc>
 8005ab8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005abc:	f102 0104 	add.w	r1, r2, #4
 8005ac0:	6019      	str	r1, [r3, #0]
 8005ac2:	d0d7      	beq.n	8005a74 <_printf_i+0x50>
 8005ac4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	da03      	bge.n	8005ad4 <_printf_i+0xb0>
 8005acc:	222d      	movs	r2, #45	; 0x2d
 8005ace:	425b      	negs	r3, r3
 8005ad0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ad4:	4962      	ldr	r1, [pc, #392]	; (8005c60 <_printf_i+0x23c>)
 8005ad6:	220a      	movs	r2, #10
 8005ad8:	e017      	b.n	8005b0a <_printf_i+0xe6>
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005ae2:	d003      	beq.n	8005aec <_printf_i+0xc8>
 8005ae4:	1d08      	adds	r0, r1, #4
 8005ae6:	6018      	str	r0, [r3, #0]
 8005ae8:	680b      	ldr	r3, [r1, #0]
 8005aea:	e006      	b.n	8005afa <_printf_i+0xd6>
 8005aec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005af0:	f101 0004 	add.w	r0, r1, #4
 8005af4:	6018      	str	r0, [r3, #0]
 8005af6:	d0f7      	beq.n	8005ae8 <_printf_i+0xc4>
 8005af8:	880b      	ldrh	r3, [r1, #0]
 8005afa:	4959      	ldr	r1, [pc, #356]	; (8005c60 <_printf_i+0x23c>)
 8005afc:	2a6f      	cmp	r2, #111	; 0x6f
 8005afe:	bf14      	ite	ne
 8005b00:	220a      	movne	r2, #10
 8005b02:	2208      	moveq	r2, #8
 8005b04:	2000      	movs	r0, #0
 8005b06:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005b0a:	6865      	ldr	r5, [r4, #4]
 8005b0c:	60a5      	str	r5, [r4, #8]
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	f2c0 809c 	blt.w	8005c4c <_printf_i+0x228>
 8005b14:	6820      	ldr	r0, [r4, #0]
 8005b16:	f020 0004 	bic.w	r0, r0, #4
 8005b1a:	6020      	str	r0, [r4, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d13f      	bne.n	8005ba0 <_printf_i+0x17c>
 8005b20:	2d00      	cmp	r5, #0
 8005b22:	f040 8095 	bne.w	8005c50 <_printf_i+0x22c>
 8005b26:	4675      	mov	r5, lr
 8005b28:	2a08      	cmp	r2, #8
 8005b2a:	d10b      	bne.n	8005b44 <_printf_i+0x120>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	07da      	lsls	r2, r3, #31
 8005b30:	d508      	bpl.n	8005b44 <_printf_i+0x120>
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	6862      	ldr	r2, [r4, #4]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	bfde      	ittt	le
 8005b3a:	2330      	movle	r3, #48	; 0x30
 8005b3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b44:	ebae 0305 	sub.w	r3, lr, r5
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	f8cd 8000 	str.w	r8, [sp]
 8005b4e:	463b      	mov	r3, r7
 8005b50:	aa03      	add	r2, sp, #12
 8005b52:	4621      	mov	r1, r4
 8005b54:	4630      	mov	r0, r6
 8005b56:	f7ff feef 	bl	8005938 <_printf_common>
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d155      	bne.n	8005c0a <_printf_i+0x1e6>
 8005b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b62:	b005      	add	sp, #20
 8005b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b68:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005b6c:	493c      	ldr	r1, [pc, #240]	; (8005c60 <_printf_i+0x23c>)
 8005b6e:	6822      	ldr	r2, [r4, #0]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005b76:	f100 0504 	add.w	r5, r0, #4
 8005b7a:	601d      	str	r5, [r3, #0]
 8005b7c:	d001      	beq.n	8005b82 <_printf_i+0x15e>
 8005b7e:	6803      	ldr	r3, [r0, #0]
 8005b80:	e002      	b.n	8005b88 <_printf_i+0x164>
 8005b82:	0655      	lsls	r5, r2, #25
 8005b84:	d5fb      	bpl.n	8005b7e <_printf_i+0x15a>
 8005b86:	8803      	ldrh	r3, [r0, #0]
 8005b88:	07d0      	lsls	r0, r2, #31
 8005b8a:	bf44      	itt	mi
 8005b8c:	f042 0220 	orrmi.w	r2, r2, #32
 8005b90:	6022      	strmi	r2, [r4, #0]
 8005b92:	b91b      	cbnz	r3, 8005b9c <_printf_i+0x178>
 8005b94:	6822      	ldr	r2, [r4, #0]
 8005b96:	f022 0220 	bic.w	r2, r2, #32
 8005b9a:	6022      	str	r2, [r4, #0]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	e7b1      	b.n	8005b04 <_printf_i+0xe0>
 8005ba0:	4675      	mov	r5, lr
 8005ba2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ba6:	fb02 3310 	mls	r3, r2, r0, r3
 8005baa:	5ccb      	ldrb	r3, [r1, r3]
 8005bac:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d1f5      	bne.n	8005ba2 <_printf_i+0x17e>
 8005bb6:	e7b7      	b.n	8005b28 <_printf_i+0x104>
 8005bb8:	6808      	ldr	r0, [r1, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	6949      	ldr	r1, [r1, #20]
 8005bbe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005bc2:	d004      	beq.n	8005bce <_printf_i+0x1aa>
 8005bc4:	1d10      	adds	r0, r2, #4
 8005bc6:	6018      	str	r0, [r3, #0]
 8005bc8:	6813      	ldr	r3, [r2, #0]
 8005bca:	6019      	str	r1, [r3, #0]
 8005bcc:	e007      	b.n	8005bde <_printf_i+0x1ba>
 8005bce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bd2:	f102 0004 	add.w	r0, r2, #4
 8005bd6:	6018      	str	r0, [r3, #0]
 8005bd8:	6813      	ldr	r3, [r2, #0]
 8005bda:	d0f6      	beq.n	8005bca <_printf_i+0x1a6>
 8005bdc:	8019      	strh	r1, [r3, #0]
 8005bde:	2300      	movs	r3, #0
 8005be0:	6123      	str	r3, [r4, #16]
 8005be2:	4675      	mov	r5, lr
 8005be4:	e7b1      	b.n	8005b4a <_printf_i+0x126>
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	1d11      	adds	r1, r2, #4
 8005bea:	6019      	str	r1, [r3, #0]
 8005bec:	6815      	ldr	r5, [r2, #0]
 8005bee:	6862      	ldr	r2, [r4, #4]
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f7fa fb04 	bl	8000200 <memchr>
 8005bf8:	b108      	cbz	r0, 8005bfe <_printf_i+0x1da>
 8005bfa:	1b40      	subs	r0, r0, r5
 8005bfc:	6060      	str	r0, [r4, #4]
 8005bfe:	6863      	ldr	r3, [r4, #4]
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	2300      	movs	r3, #0
 8005c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c08:	e79f      	b.n	8005b4a <_printf_i+0x126>
 8005c0a:	6923      	ldr	r3, [r4, #16]
 8005c0c:	462a      	mov	r2, r5
 8005c0e:	4639      	mov	r1, r7
 8005c10:	4630      	mov	r0, r6
 8005c12:	47c0      	blx	r8
 8005c14:	3001      	adds	r0, #1
 8005c16:	d0a2      	beq.n	8005b5e <_printf_i+0x13a>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	079b      	lsls	r3, r3, #30
 8005c1c:	d507      	bpl.n	8005c2e <_printf_i+0x20a>
 8005c1e:	2500      	movs	r5, #0
 8005c20:	f104 0919 	add.w	r9, r4, #25
 8005c24:	68e3      	ldr	r3, [r4, #12]
 8005c26:	9a03      	ldr	r2, [sp, #12]
 8005c28:	1a9b      	subs	r3, r3, r2
 8005c2a:	429d      	cmp	r5, r3
 8005c2c:	db05      	blt.n	8005c3a <_printf_i+0x216>
 8005c2e:	68e0      	ldr	r0, [r4, #12]
 8005c30:	9b03      	ldr	r3, [sp, #12]
 8005c32:	4298      	cmp	r0, r3
 8005c34:	bfb8      	it	lt
 8005c36:	4618      	movlt	r0, r3
 8005c38:	e793      	b.n	8005b62 <_printf_i+0x13e>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	464a      	mov	r2, r9
 8005c3e:	4639      	mov	r1, r7
 8005c40:	4630      	mov	r0, r6
 8005c42:	47c0      	blx	r8
 8005c44:	3001      	adds	r0, #1
 8005c46:	d08a      	beq.n	8005b5e <_printf_i+0x13a>
 8005c48:	3501      	adds	r5, #1
 8005c4a:	e7eb      	b.n	8005c24 <_printf_i+0x200>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1a7      	bne.n	8005ba0 <_printf_i+0x17c>
 8005c50:	780b      	ldrb	r3, [r1, #0]
 8005c52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c5a:	e765      	b.n	8005b28 <_printf_i+0x104>
 8005c5c:	0800820b 	.word	0x0800820b
 8005c60:	080081fa 	.word	0x080081fa

08005c64 <iprintf>:
 8005c64:	b40f      	push	{r0, r1, r2, r3}
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <iprintf+0x2c>)
 8005c68:	b513      	push	{r0, r1, r4, lr}
 8005c6a:	681c      	ldr	r4, [r3, #0]
 8005c6c:	b124      	cbz	r4, 8005c78 <iprintf+0x14>
 8005c6e:	69a3      	ldr	r3, [r4, #24]
 8005c70:	b913      	cbnz	r3, 8005c78 <iprintf+0x14>
 8005c72:	4620      	mov	r0, r4
 8005c74:	f001 f890 	bl	8006d98 <__sinit>
 8005c78:	ab05      	add	r3, sp, #20
 8005c7a:	9a04      	ldr	r2, [sp, #16]
 8005c7c:	68a1      	ldr	r1, [r4, #8]
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	4620      	mov	r0, r4
 8005c82:	f001 fc8f 	bl	80075a4 <_vfiprintf_r>
 8005c86:	b002      	add	sp, #8
 8005c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c8c:	b004      	add	sp, #16
 8005c8e:	4770      	bx	lr
 8005c90:	20000010 	.word	0x20000010

08005c94 <_puts_r>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	460e      	mov	r6, r1
 8005c98:	4605      	mov	r5, r0
 8005c9a:	b118      	cbz	r0, 8005ca4 <_puts_r+0x10>
 8005c9c:	6983      	ldr	r3, [r0, #24]
 8005c9e:	b90b      	cbnz	r3, 8005ca4 <_puts_r+0x10>
 8005ca0:	f001 f87a 	bl	8006d98 <__sinit>
 8005ca4:	69ab      	ldr	r3, [r5, #24]
 8005ca6:	68ac      	ldr	r4, [r5, #8]
 8005ca8:	b913      	cbnz	r3, 8005cb0 <_puts_r+0x1c>
 8005caa:	4628      	mov	r0, r5
 8005cac:	f001 f874 	bl	8006d98 <__sinit>
 8005cb0:	4b23      	ldr	r3, [pc, #140]	; (8005d40 <_puts_r+0xac>)
 8005cb2:	429c      	cmp	r4, r3
 8005cb4:	d117      	bne.n	8005ce6 <_puts_r+0x52>
 8005cb6:	686c      	ldr	r4, [r5, #4]
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	071b      	lsls	r3, r3, #28
 8005cbc:	d51d      	bpl.n	8005cfa <_puts_r+0x66>
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	b1db      	cbz	r3, 8005cfa <_puts_r+0x66>
 8005cc2:	3e01      	subs	r6, #1
 8005cc4:	68a3      	ldr	r3, [r4, #8]
 8005cc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	60a3      	str	r3, [r4, #8]
 8005cce:	b9e9      	cbnz	r1, 8005d0c <_puts_r+0x78>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	da2e      	bge.n	8005d32 <_puts_r+0x9e>
 8005cd4:	4622      	mov	r2, r4
 8005cd6:	210a      	movs	r1, #10
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f000 f84f 	bl	8005d7c <__swbuf_r>
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d011      	beq.n	8005d06 <_puts_r+0x72>
 8005ce2:	200a      	movs	r0, #10
 8005ce4:	bd70      	pop	{r4, r5, r6, pc}
 8005ce6:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <_puts_r+0xb0>)
 8005ce8:	429c      	cmp	r4, r3
 8005cea:	d101      	bne.n	8005cf0 <_puts_r+0x5c>
 8005cec:	68ac      	ldr	r4, [r5, #8]
 8005cee:	e7e3      	b.n	8005cb8 <_puts_r+0x24>
 8005cf0:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <_puts_r+0xb4>)
 8005cf2:	429c      	cmp	r4, r3
 8005cf4:	bf08      	it	eq
 8005cf6:	68ec      	ldreq	r4, [r5, #12]
 8005cf8:	e7de      	b.n	8005cb8 <_puts_r+0x24>
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f000 f88f 	bl	8005e20 <__swsetup_r>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d0dd      	beq.n	8005cc2 <_puts_r+0x2e>
 8005d06:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0a:	bd70      	pop	{r4, r5, r6, pc}
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da04      	bge.n	8005d1a <_puts_r+0x86>
 8005d10:	69a2      	ldr	r2, [r4, #24]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	db06      	blt.n	8005d24 <_puts_r+0x90>
 8005d16:	290a      	cmp	r1, #10
 8005d18:	d004      	beq.n	8005d24 <_puts_r+0x90>
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	6022      	str	r2, [r4, #0]
 8005d20:	7019      	strb	r1, [r3, #0]
 8005d22:	e7cf      	b.n	8005cc4 <_puts_r+0x30>
 8005d24:	4622      	mov	r2, r4
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 f828 	bl	8005d7c <__swbuf_r>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d1c9      	bne.n	8005cc4 <_puts_r+0x30>
 8005d30:	e7e9      	b.n	8005d06 <_puts_r+0x72>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	200a      	movs	r0, #10
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	6022      	str	r2, [r4, #0]
 8005d3a:	7018      	strb	r0, [r3, #0]
 8005d3c:	bd70      	pop	{r4, r5, r6, pc}
 8005d3e:	bf00      	nop
 8005d40:	0800824c 	.word	0x0800824c
 8005d44:	0800826c 	.word	0x0800826c
 8005d48:	0800822c 	.word	0x0800822c

08005d4c <puts>:
 8005d4c:	4b02      	ldr	r3, [pc, #8]	; (8005d58 <puts+0xc>)
 8005d4e:	4601      	mov	r1, r0
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	f7ff bf9f 	b.w	8005c94 <_puts_r>
 8005d56:	bf00      	nop
 8005d58:	20000010 	.word	0x20000010

08005d5c <_sbrk_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4c06      	ldr	r4, [pc, #24]	; (8005d78 <_sbrk_r+0x1c>)
 8005d60:	2300      	movs	r3, #0
 8005d62:	4605      	mov	r5, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	f7ff f86a 	bl	8004e40 <_sbrk>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_sbrk_r+0x1a>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_sbrk_r+0x1a>
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	200019cc 	.word	0x200019cc

08005d7c <__swbuf_r>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	460e      	mov	r6, r1
 8005d80:	4614      	mov	r4, r2
 8005d82:	4605      	mov	r5, r0
 8005d84:	b118      	cbz	r0, 8005d8e <__swbuf_r+0x12>
 8005d86:	6983      	ldr	r3, [r0, #24]
 8005d88:	b90b      	cbnz	r3, 8005d8e <__swbuf_r+0x12>
 8005d8a:	f001 f805 	bl	8006d98 <__sinit>
 8005d8e:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <__swbuf_r+0x98>)
 8005d90:	429c      	cmp	r4, r3
 8005d92:	d12a      	bne.n	8005dea <__swbuf_r+0x6e>
 8005d94:	686c      	ldr	r4, [r5, #4]
 8005d96:	69a3      	ldr	r3, [r4, #24]
 8005d98:	60a3      	str	r3, [r4, #8]
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	071a      	lsls	r2, r3, #28
 8005d9e:	d52e      	bpl.n	8005dfe <__swbuf_r+0x82>
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	b363      	cbz	r3, 8005dfe <__swbuf_r+0x82>
 8005da4:	6923      	ldr	r3, [r4, #16]
 8005da6:	6820      	ldr	r0, [r4, #0]
 8005da8:	1ac0      	subs	r0, r0, r3
 8005daa:	6963      	ldr	r3, [r4, #20]
 8005dac:	b2f6      	uxtb	r6, r6
 8005dae:	4298      	cmp	r0, r3
 8005db0:	4637      	mov	r7, r6
 8005db2:	db04      	blt.n	8005dbe <__swbuf_r+0x42>
 8005db4:	4621      	mov	r1, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 ff84 	bl	8006cc4 <_fflush_r>
 8005dbc:	bb28      	cbnz	r0, 8005e0a <__swbuf_r+0x8e>
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	60a3      	str	r3, [r4, #8]
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	701e      	strb	r6, [r3, #0]
 8005dcc:	6963      	ldr	r3, [r4, #20]
 8005dce:	3001      	adds	r0, #1
 8005dd0:	4298      	cmp	r0, r3
 8005dd2:	d004      	beq.n	8005dde <__swbuf_r+0x62>
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	07db      	lsls	r3, r3, #31
 8005dd8:	d519      	bpl.n	8005e0e <__swbuf_r+0x92>
 8005dda:	2e0a      	cmp	r6, #10
 8005ddc:	d117      	bne.n	8005e0e <__swbuf_r+0x92>
 8005dde:	4621      	mov	r1, r4
 8005de0:	4628      	mov	r0, r5
 8005de2:	f000 ff6f 	bl	8006cc4 <_fflush_r>
 8005de6:	b190      	cbz	r0, 8005e0e <__swbuf_r+0x92>
 8005de8:	e00f      	b.n	8005e0a <__swbuf_r+0x8e>
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <__swbuf_r+0x9c>)
 8005dec:	429c      	cmp	r4, r3
 8005dee:	d101      	bne.n	8005df4 <__swbuf_r+0x78>
 8005df0:	68ac      	ldr	r4, [r5, #8]
 8005df2:	e7d0      	b.n	8005d96 <__swbuf_r+0x1a>
 8005df4:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <__swbuf_r+0xa0>)
 8005df6:	429c      	cmp	r4, r3
 8005df8:	bf08      	it	eq
 8005dfa:	68ec      	ldreq	r4, [r5, #12]
 8005dfc:	e7cb      	b.n	8005d96 <__swbuf_r+0x1a>
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 f80d 	bl	8005e20 <__swsetup_r>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d0cc      	beq.n	8005da4 <__swbuf_r+0x28>
 8005e0a:	f04f 37ff 	mov.w	r7, #4294967295
 8005e0e:	4638      	mov	r0, r7
 8005e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e12:	bf00      	nop
 8005e14:	0800824c 	.word	0x0800824c
 8005e18:	0800826c 	.word	0x0800826c
 8005e1c:	0800822c 	.word	0x0800822c

08005e20 <__swsetup_r>:
 8005e20:	4b32      	ldr	r3, [pc, #200]	; (8005eec <__swsetup_r+0xcc>)
 8005e22:	b570      	push	{r4, r5, r6, lr}
 8005e24:	681d      	ldr	r5, [r3, #0]
 8005e26:	4606      	mov	r6, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	b125      	cbz	r5, 8005e36 <__swsetup_r+0x16>
 8005e2c:	69ab      	ldr	r3, [r5, #24]
 8005e2e:	b913      	cbnz	r3, 8005e36 <__swsetup_r+0x16>
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 ffb1 	bl	8006d98 <__sinit>
 8005e36:	4b2e      	ldr	r3, [pc, #184]	; (8005ef0 <__swsetup_r+0xd0>)
 8005e38:	429c      	cmp	r4, r3
 8005e3a:	d10f      	bne.n	8005e5c <__swsetup_r+0x3c>
 8005e3c:	686c      	ldr	r4, [r5, #4]
 8005e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	0715      	lsls	r5, r2, #28
 8005e46:	d42c      	bmi.n	8005ea2 <__swsetup_r+0x82>
 8005e48:	06d0      	lsls	r0, r2, #27
 8005e4a:	d411      	bmi.n	8005e70 <__swsetup_r+0x50>
 8005e4c:	2209      	movs	r2, #9
 8005e4e:	6032      	str	r2, [r6, #0]
 8005e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
 8005e5c:	4b25      	ldr	r3, [pc, #148]	; (8005ef4 <__swsetup_r+0xd4>)
 8005e5e:	429c      	cmp	r4, r3
 8005e60:	d101      	bne.n	8005e66 <__swsetup_r+0x46>
 8005e62:	68ac      	ldr	r4, [r5, #8]
 8005e64:	e7eb      	b.n	8005e3e <__swsetup_r+0x1e>
 8005e66:	4b24      	ldr	r3, [pc, #144]	; (8005ef8 <__swsetup_r+0xd8>)
 8005e68:	429c      	cmp	r4, r3
 8005e6a:	bf08      	it	eq
 8005e6c:	68ec      	ldreq	r4, [r5, #12]
 8005e6e:	e7e6      	b.n	8005e3e <__swsetup_r+0x1e>
 8005e70:	0751      	lsls	r1, r2, #29
 8005e72:	d512      	bpl.n	8005e9a <__swsetup_r+0x7a>
 8005e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e76:	b141      	cbz	r1, 8005e8a <__swsetup_r+0x6a>
 8005e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e7c:	4299      	cmp	r1, r3
 8005e7e:	d002      	beq.n	8005e86 <__swsetup_r+0x66>
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff f9d7 	bl	8005234 <_free_r>
 8005e86:	2300      	movs	r3, #0
 8005e88:	6363      	str	r3, [r4, #52]	; 0x34
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e90:	81a3      	strh	r3, [r4, #12]
 8005e92:	2300      	movs	r3, #0
 8005e94:	6063      	str	r3, [r4, #4]
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	f043 0308 	orr.w	r3, r3, #8
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	b94b      	cbnz	r3, 8005eba <__swsetup_r+0x9a>
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb0:	d003      	beq.n	8005eba <__swsetup_r+0x9a>
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f001 f82b 	bl	8006f10 <__smakebuf_r>
 8005eba:	89a2      	ldrh	r2, [r4, #12]
 8005ebc:	f012 0301 	ands.w	r3, r2, #1
 8005ec0:	d00c      	beq.n	8005edc <__swsetup_r+0xbc>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60a3      	str	r3, [r4, #8]
 8005ec6:	6963      	ldr	r3, [r4, #20]
 8005ec8:	425b      	negs	r3, r3
 8005eca:	61a3      	str	r3, [r4, #24]
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	b953      	cbnz	r3, 8005ee6 <__swsetup_r+0xc6>
 8005ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ed4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005ed8:	d1ba      	bne.n	8005e50 <__swsetup_r+0x30>
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	0792      	lsls	r2, r2, #30
 8005ede:	bf58      	it	pl
 8005ee0:	6963      	ldrpl	r3, [r4, #20]
 8005ee2:	60a3      	str	r3, [r4, #8]
 8005ee4:	e7f2      	b.n	8005ecc <__swsetup_r+0xac>
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e7f7      	b.n	8005eda <__swsetup_r+0xba>
 8005eea:	bf00      	nop
 8005eec:	20000010 	.word	0x20000010
 8005ef0:	0800824c 	.word	0x0800824c
 8005ef4:	0800826c 	.word	0x0800826c
 8005ef8:	0800822c 	.word	0x0800822c

08005efc <quorem>:
 8005efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f00:	6903      	ldr	r3, [r0, #16]
 8005f02:	690c      	ldr	r4, [r1, #16]
 8005f04:	429c      	cmp	r4, r3
 8005f06:	4680      	mov	r8, r0
 8005f08:	f300 8082 	bgt.w	8006010 <quorem+0x114>
 8005f0c:	3c01      	subs	r4, #1
 8005f0e:	f101 0714 	add.w	r7, r1, #20
 8005f12:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005f16:	f100 0614 	add.w	r6, r0, #20
 8005f1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005f1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005f22:	eb06 030e 	add.w	r3, r6, lr
 8005f26:	3501      	adds	r5, #1
 8005f28:	eb07 090e 	add.w	r9, r7, lr
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f32:	b395      	cbz	r5, 8005f9a <quorem+0x9e>
 8005f34:	f04f 0a00 	mov.w	sl, #0
 8005f38:	4638      	mov	r0, r7
 8005f3a:	46b4      	mov	ip, r6
 8005f3c:	46d3      	mov	fp, sl
 8005f3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f42:	b293      	uxth	r3, r2
 8005f44:	fb05 a303 	mla	r3, r5, r3, sl
 8005f48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	ebab 0303 	sub.w	r3, fp, r3
 8005f52:	0c12      	lsrs	r2, r2, #16
 8005f54:	f8bc b000 	ldrh.w	fp, [ip]
 8005f58:	fb05 a202 	mla	r2, r5, r2, sl
 8005f5c:	fa13 f38b 	uxtah	r3, r3, fp
 8005f60:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005f64:	fa1f fb82 	uxth.w	fp, r2
 8005f68:	f8dc 2000 	ldr.w	r2, [ip]
 8005f6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005f70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f7a:	4581      	cmp	r9, r0
 8005f7c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005f80:	f84c 3b04 	str.w	r3, [ip], #4
 8005f84:	d2db      	bcs.n	8005f3e <quorem+0x42>
 8005f86:	f856 300e 	ldr.w	r3, [r6, lr]
 8005f8a:	b933      	cbnz	r3, 8005f9a <quorem+0x9e>
 8005f8c:	9b01      	ldr	r3, [sp, #4]
 8005f8e:	3b04      	subs	r3, #4
 8005f90:	429e      	cmp	r6, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	d330      	bcc.n	8005ff8 <quorem+0xfc>
 8005f96:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	f001 fa03 	bl	80073a6 <__mcmp>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	db25      	blt.n	8005ff0 <quorem+0xf4>
 8005fa4:	3501      	adds	r5, #1
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f04f 0e00 	mov.w	lr, #0
 8005fac:	f857 2b04 	ldr.w	r2, [r7], #4
 8005fb0:	f8d0 c000 	ldr.w	ip, [r0]
 8005fb4:	b293      	uxth	r3, r2
 8005fb6:	ebae 0303 	sub.w	r3, lr, r3
 8005fba:	0c12      	lsrs	r2, r2, #16
 8005fbc:	fa13 f38c 	uxtah	r3, r3, ip
 8005fc0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005fc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fce:	45b9      	cmp	r9, r7
 8005fd0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005fd4:	f840 3b04 	str.w	r3, [r0], #4
 8005fd8:	d2e8      	bcs.n	8005fac <quorem+0xb0>
 8005fda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005fde:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005fe2:	b92a      	cbnz	r2, 8005ff0 <quorem+0xf4>
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	429e      	cmp	r6, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	d30b      	bcc.n	8006004 <quorem+0x108>
 8005fec:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	b003      	add	sp, #12
 8005ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	3b04      	subs	r3, #4
 8005ffc:	2a00      	cmp	r2, #0
 8005ffe:	d1ca      	bne.n	8005f96 <quorem+0x9a>
 8006000:	3c01      	subs	r4, #1
 8006002:	e7c5      	b.n	8005f90 <quorem+0x94>
 8006004:	6812      	ldr	r2, [r2, #0]
 8006006:	3b04      	subs	r3, #4
 8006008:	2a00      	cmp	r2, #0
 800600a:	d1ef      	bne.n	8005fec <quorem+0xf0>
 800600c:	3c01      	subs	r4, #1
 800600e:	e7ea      	b.n	8005fe6 <quorem+0xea>
 8006010:	2000      	movs	r0, #0
 8006012:	e7ee      	b.n	8005ff2 <quorem+0xf6>
 8006014:	0000      	movs	r0, r0
	...

08006018 <_dtoa_r>:
 8006018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601c:	ec57 6b10 	vmov	r6, r7, d0
 8006020:	b097      	sub	sp, #92	; 0x5c
 8006022:	e9cd 6700 	strd	r6, r7, [sp]
 8006026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006028:	9107      	str	r1, [sp, #28]
 800602a:	4604      	mov	r4, r0
 800602c:	920a      	str	r2, [sp, #40]	; 0x28
 800602e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006030:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006032:	b93e      	cbnz	r6, 8006044 <_dtoa_r+0x2c>
 8006034:	2010      	movs	r0, #16
 8006036:	f7ff f8d3 	bl	80051e0 <malloc>
 800603a:	6260      	str	r0, [r4, #36]	; 0x24
 800603c:	6046      	str	r6, [r0, #4]
 800603e:	6086      	str	r6, [r0, #8]
 8006040:	6006      	str	r6, [r0, #0]
 8006042:	60c6      	str	r6, [r0, #12]
 8006044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006046:	6819      	ldr	r1, [r3, #0]
 8006048:	b151      	cbz	r1, 8006060 <_dtoa_r+0x48>
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	604a      	str	r2, [r1, #4]
 800604e:	2301      	movs	r3, #1
 8006050:	4093      	lsls	r3, r2
 8006052:	608b      	str	r3, [r1, #8]
 8006054:	4620      	mov	r0, r4
 8006056:	f000 ffd1 	bl	8006ffc <_Bfree>
 800605a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	9b01      	ldr	r3, [sp, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	bfbf      	itttt	lt
 8006066:	2301      	movlt	r3, #1
 8006068:	602b      	strlt	r3, [r5, #0]
 800606a:	9b01      	ldrlt	r3, [sp, #4]
 800606c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006070:	bfb2      	itee	lt
 8006072:	9301      	strlt	r3, [sp, #4]
 8006074:	2300      	movge	r3, #0
 8006076:	602b      	strge	r3, [r5, #0]
 8006078:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800607c:	4ba8      	ldr	r3, [pc, #672]	; (8006320 <_dtoa_r+0x308>)
 800607e:	ea33 0308 	bics.w	r3, r3, r8
 8006082:	d11b      	bne.n	80060bc <_dtoa_r+0xa4>
 8006084:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006086:	f242 730f 	movw	r3, #9999	; 0x270f
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	9b00      	ldr	r3, [sp, #0]
 800608e:	b923      	cbnz	r3, 800609a <_dtoa_r+0x82>
 8006090:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006094:	2800      	cmp	r0, #0
 8006096:	f000 8578 	beq.w	8006b8a <_dtoa_r+0xb72>
 800609a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800609c:	b953      	cbnz	r3, 80060b4 <_dtoa_r+0x9c>
 800609e:	4ba1      	ldr	r3, [pc, #644]	; (8006324 <_dtoa_r+0x30c>)
 80060a0:	e021      	b.n	80060e6 <_dtoa_r+0xce>
 80060a2:	4ba1      	ldr	r3, [pc, #644]	; (8006328 <_dtoa_r+0x310>)
 80060a4:	9302      	str	r3, [sp, #8]
 80060a6:	3308      	adds	r3, #8
 80060a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	9802      	ldr	r0, [sp, #8]
 80060ae:	b017      	add	sp, #92	; 0x5c
 80060b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b4:	4b9b      	ldr	r3, [pc, #620]	; (8006324 <_dtoa_r+0x30c>)
 80060b6:	9302      	str	r3, [sp, #8]
 80060b8:	3303      	adds	r3, #3
 80060ba:	e7f5      	b.n	80060a8 <_dtoa_r+0x90>
 80060bc:	e9dd 6700 	ldrd	r6, r7, [sp]
 80060c0:	2200      	movs	r2, #0
 80060c2:	2300      	movs	r3, #0
 80060c4:	4630      	mov	r0, r6
 80060c6:	4639      	mov	r1, r7
 80060c8:	f7fa fd0a 	bl	8000ae0 <__aeabi_dcmpeq>
 80060cc:	4681      	mov	r9, r0
 80060ce:	b160      	cbz	r0, 80060ea <_dtoa_r+0xd2>
 80060d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060d2:	2301      	movs	r3, #1
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8553 	beq.w	8006b84 <_dtoa_r+0xb6c>
 80060de:	4b93      	ldr	r3, [pc, #588]	; (800632c <_dtoa_r+0x314>)
 80060e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	9302      	str	r3, [sp, #8]
 80060e8:	e7e0      	b.n	80060ac <_dtoa_r+0x94>
 80060ea:	aa14      	add	r2, sp, #80	; 0x50
 80060ec:	a915      	add	r1, sp, #84	; 0x54
 80060ee:	ec47 6b10 	vmov	d0, r6, r7
 80060f2:	4620      	mov	r0, r4
 80060f4:	f001 f9cf 	bl	8007496 <__d2b>
 80060f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060fc:	4682      	mov	sl, r0
 80060fe:	2d00      	cmp	r5, #0
 8006100:	d07e      	beq.n	8006200 <_dtoa_r+0x1e8>
 8006102:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006106:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800610a:	4630      	mov	r0, r6
 800610c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006110:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006114:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8006118:	2200      	movs	r2, #0
 800611a:	4b85      	ldr	r3, [pc, #532]	; (8006330 <_dtoa_r+0x318>)
 800611c:	f7fa f8c4 	bl	80002a8 <__aeabi_dsub>
 8006120:	a379      	add	r3, pc, #484	; (adr r3, 8006308 <_dtoa_r+0x2f0>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	f7fa fa73 	bl	8000610 <__aeabi_dmul>
 800612a:	a379      	add	r3, pc, #484	; (adr r3, 8006310 <_dtoa_r+0x2f8>)
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f7fa f8bc 	bl	80002ac <__adddf3>
 8006134:	4606      	mov	r6, r0
 8006136:	4628      	mov	r0, r5
 8006138:	460f      	mov	r7, r1
 800613a:	f7fa fa03 	bl	8000544 <__aeabi_i2d>
 800613e:	a376      	add	r3, pc, #472	; (adr r3, 8006318 <_dtoa_r+0x300>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa fa64 	bl	8000610 <__aeabi_dmul>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4630      	mov	r0, r6
 800614e:	4639      	mov	r1, r7
 8006150:	f7fa f8ac 	bl	80002ac <__adddf3>
 8006154:	4606      	mov	r6, r0
 8006156:	460f      	mov	r7, r1
 8006158:	f7fa fd0a 	bl	8000b70 <__aeabi_d2iz>
 800615c:	2200      	movs	r2, #0
 800615e:	4683      	mov	fp, r0
 8006160:	2300      	movs	r3, #0
 8006162:	4630      	mov	r0, r6
 8006164:	4639      	mov	r1, r7
 8006166:	f7fa fcc5 	bl	8000af4 <__aeabi_dcmplt>
 800616a:	b158      	cbz	r0, 8006184 <_dtoa_r+0x16c>
 800616c:	4658      	mov	r0, fp
 800616e:	f7fa f9e9 	bl	8000544 <__aeabi_i2d>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	4630      	mov	r0, r6
 8006178:	4639      	mov	r1, r7
 800617a:	f7fa fcb1 	bl	8000ae0 <__aeabi_dcmpeq>
 800617e:	b908      	cbnz	r0, 8006184 <_dtoa_r+0x16c>
 8006180:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006184:	f1bb 0f16 	cmp.w	fp, #22
 8006188:	d859      	bhi.n	800623e <_dtoa_r+0x226>
 800618a:	496a      	ldr	r1, [pc, #424]	; (8006334 <_dtoa_r+0x31c>)
 800618c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006198:	f7fa fcca 	bl	8000b30 <__aeabi_dcmpgt>
 800619c:	2800      	cmp	r0, #0
 800619e:	d050      	beq.n	8006242 <_dtoa_r+0x22a>
 80061a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061a4:	2300      	movs	r3, #0
 80061a6:	930e      	str	r3, [sp, #56]	; 0x38
 80061a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061aa:	1b5d      	subs	r5, r3, r5
 80061ac:	1e6b      	subs	r3, r5, #1
 80061ae:	9306      	str	r3, [sp, #24]
 80061b0:	bf45      	ittet	mi
 80061b2:	f1c5 0301 	rsbmi	r3, r5, #1
 80061b6:	9305      	strmi	r3, [sp, #20]
 80061b8:	2300      	movpl	r3, #0
 80061ba:	2300      	movmi	r3, #0
 80061bc:	bf4c      	ite	mi
 80061be:	9306      	strmi	r3, [sp, #24]
 80061c0:	9305      	strpl	r3, [sp, #20]
 80061c2:	f1bb 0f00 	cmp.w	fp, #0
 80061c6:	db3e      	blt.n	8006246 <_dtoa_r+0x22e>
 80061c8:	9b06      	ldr	r3, [sp, #24]
 80061ca:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80061ce:	445b      	add	r3, fp
 80061d0:	9306      	str	r3, [sp, #24]
 80061d2:	2300      	movs	r3, #0
 80061d4:	9308      	str	r3, [sp, #32]
 80061d6:	9b07      	ldr	r3, [sp, #28]
 80061d8:	2b09      	cmp	r3, #9
 80061da:	f200 80af 	bhi.w	800633c <_dtoa_r+0x324>
 80061de:	2b05      	cmp	r3, #5
 80061e0:	bfc4      	itt	gt
 80061e2:	3b04      	subgt	r3, #4
 80061e4:	9307      	strgt	r3, [sp, #28]
 80061e6:	9b07      	ldr	r3, [sp, #28]
 80061e8:	f1a3 0302 	sub.w	r3, r3, #2
 80061ec:	bfcc      	ite	gt
 80061ee:	2600      	movgt	r6, #0
 80061f0:	2601      	movle	r6, #1
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	f200 80ae 	bhi.w	8006354 <_dtoa_r+0x33c>
 80061f8:	e8df f003 	tbb	[pc, r3]
 80061fc:	772f8482 	.word	0x772f8482
 8006200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006202:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006204:	441d      	add	r5, r3
 8006206:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800620a:	2b20      	cmp	r3, #32
 800620c:	dd11      	ble.n	8006232 <_dtoa_r+0x21a>
 800620e:	9a00      	ldr	r2, [sp, #0]
 8006210:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006214:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006218:	fa22 f000 	lsr.w	r0, r2, r0
 800621c:	fa08 f303 	lsl.w	r3, r8, r3
 8006220:	4318      	orrs	r0, r3
 8006222:	f7fa f97f 	bl	8000524 <__aeabi_ui2d>
 8006226:	2301      	movs	r3, #1
 8006228:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800622c:	3d01      	subs	r5, #1
 800622e:	9312      	str	r3, [sp, #72]	; 0x48
 8006230:	e772      	b.n	8006118 <_dtoa_r+0x100>
 8006232:	f1c3 0020 	rsb	r0, r3, #32
 8006236:	9b00      	ldr	r3, [sp, #0]
 8006238:	fa03 f000 	lsl.w	r0, r3, r0
 800623c:	e7f1      	b.n	8006222 <_dtoa_r+0x20a>
 800623e:	2301      	movs	r3, #1
 8006240:	e7b1      	b.n	80061a6 <_dtoa_r+0x18e>
 8006242:	900e      	str	r0, [sp, #56]	; 0x38
 8006244:	e7b0      	b.n	80061a8 <_dtoa_r+0x190>
 8006246:	9b05      	ldr	r3, [sp, #20]
 8006248:	eba3 030b 	sub.w	r3, r3, fp
 800624c:	9305      	str	r3, [sp, #20]
 800624e:	f1cb 0300 	rsb	r3, fp, #0
 8006252:	9308      	str	r3, [sp, #32]
 8006254:	2300      	movs	r3, #0
 8006256:	930b      	str	r3, [sp, #44]	; 0x2c
 8006258:	e7bd      	b.n	80061d6 <_dtoa_r+0x1be>
 800625a:	2301      	movs	r3, #1
 800625c:	9309      	str	r3, [sp, #36]	; 0x24
 800625e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006260:	2b00      	cmp	r3, #0
 8006262:	dd7a      	ble.n	800635a <_dtoa_r+0x342>
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	9303      	str	r3, [sp, #12]
 8006268:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800626a:	2200      	movs	r2, #0
 800626c:	606a      	str	r2, [r5, #4]
 800626e:	2104      	movs	r1, #4
 8006270:	f101 0214 	add.w	r2, r1, #20
 8006274:	429a      	cmp	r2, r3
 8006276:	d975      	bls.n	8006364 <_dtoa_r+0x34c>
 8006278:	6869      	ldr	r1, [r5, #4]
 800627a:	4620      	mov	r0, r4
 800627c:	f000 fe8a 	bl	8006f94 <_Balloc>
 8006280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006282:	6028      	str	r0, [r5, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	9302      	str	r3, [sp, #8]
 8006288:	9b03      	ldr	r3, [sp, #12]
 800628a:	2b0e      	cmp	r3, #14
 800628c:	f200 80e5 	bhi.w	800645a <_dtoa_r+0x442>
 8006290:	2e00      	cmp	r6, #0
 8006292:	f000 80e2 	beq.w	800645a <_dtoa_r+0x442>
 8006296:	ed9d 7b00 	vldr	d7, [sp]
 800629a:	f1bb 0f00 	cmp.w	fp, #0
 800629e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80062a2:	dd74      	ble.n	800638e <_dtoa_r+0x376>
 80062a4:	4a23      	ldr	r2, [pc, #140]	; (8006334 <_dtoa_r+0x31c>)
 80062a6:	f00b 030f 	and.w	r3, fp, #15
 80062aa:	ea4f 162b 	mov.w	r6, fp, asr #4
 80062ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062b2:	06f0      	lsls	r0, r6, #27
 80062b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062b8:	d559      	bpl.n	800636e <_dtoa_r+0x356>
 80062ba:	4b1f      	ldr	r3, [pc, #124]	; (8006338 <_dtoa_r+0x320>)
 80062bc:	ec51 0b17 	vmov	r0, r1, d7
 80062c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062c4:	f7fa face 	bl	8000864 <__aeabi_ddiv>
 80062c8:	e9cd 0100 	strd	r0, r1, [sp]
 80062cc:	f006 060f 	and.w	r6, r6, #15
 80062d0:	2503      	movs	r5, #3
 80062d2:	4f19      	ldr	r7, [pc, #100]	; (8006338 <_dtoa_r+0x320>)
 80062d4:	2e00      	cmp	r6, #0
 80062d6:	d14c      	bne.n	8006372 <_dtoa_r+0x35a>
 80062d8:	4642      	mov	r2, r8
 80062da:	464b      	mov	r3, r9
 80062dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062e0:	f7fa fac0 	bl	8000864 <__aeabi_ddiv>
 80062e4:	e9cd 0100 	strd	r0, r1, [sp]
 80062e8:	e06a      	b.n	80063c0 <_dtoa_r+0x3a8>
 80062ea:	2301      	movs	r3, #1
 80062ec:	9309      	str	r3, [sp, #36]	; 0x24
 80062ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f0:	445b      	add	r3, fp
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	3301      	adds	r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	9303      	str	r3, [sp, #12]
 80062fa:	bfb8      	it	lt
 80062fc:	2301      	movlt	r3, #1
 80062fe:	e7b3      	b.n	8006268 <_dtoa_r+0x250>
 8006300:	2300      	movs	r3, #0
 8006302:	e7ab      	b.n	800625c <_dtoa_r+0x244>
 8006304:	2300      	movs	r3, #0
 8006306:	e7f1      	b.n	80062ec <_dtoa_r+0x2d4>
 8006308:	636f4361 	.word	0x636f4361
 800630c:	3fd287a7 	.word	0x3fd287a7
 8006310:	8b60c8b3 	.word	0x8b60c8b3
 8006314:	3fc68a28 	.word	0x3fc68a28
 8006318:	509f79fb 	.word	0x509f79fb
 800631c:	3fd34413 	.word	0x3fd34413
 8006320:	7ff00000 	.word	0x7ff00000
 8006324:	08008225 	.word	0x08008225
 8006328:	0800821c 	.word	0x0800821c
 800632c:	080081f9 	.word	0x080081f9
 8006330:	3ff80000 	.word	0x3ff80000
 8006334:	080082b8 	.word	0x080082b8
 8006338:	08008290 	.word	0x08008290
 800633c:	2601      	movs	r6, #1
 800633e:	2300      	movs	r3, #0
 8006340:	9307      	str	r3, [sp, #28]
 8006342:	9609      	str	r6, [sp, #36]	; 0x24
 8006344:	f04f 33ff 	mov.w	r3, #4294967295
 8006348:	9304      	str	r3, [sp, #16]
 800634a:	9303      	str	r3, [sp, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	2312      	movs	r3, #18
 8006350:	920a      	str	r2, [sp, #40]	; 0x28
 8006352:	e789      	b.n	8006268 <_dtoa_r+0x250>
 8006354:	2301      	movs	r3, #1
 8006356:	9309      	str	r3, [sp, #36]	; 0x24
 8006358:	e7f4      	b.n	8006344 <_dtoa_r+0x32c>
 800635a:	2301      	movs	r3, #1
 800635c:	9304      	str	r3, [sp, #16]
 800635e:	9303      	str	r3, [sp, #12]
 8006360:	461a      	mov	r2, r3
 8006362:	e7f5      	b.n	8006350 <_dtoa_r+0x338>
 8006364:	686a      	ldr	r2, [r5, #4]
 8006366:	3201      	adds	r2, #1
 8006368:	606a      	str	r2, [r5, #4]
 800636a:	0049      	lsls	r1, r1, #1
 800636c:	e780      	b.n	8006270 <_dtoa_r+0x258>
 800636e:	2502      	movs	r5, #2
 8006370:	e7af      	b.n	80062d2 <_dtoa_r+0x2ba>
 8006372:	07f1      	lsls	r1, r6, #31
 8006374:	d508      	bpl.n	8006388 <_dtoa_r+0x370>
 8006376:	4640      	mov	r0, r8
 8006378:	4649      	mov	r1, r9
 800637a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800637e:	f7fa f947 	bl	8000610 <__aeabi_dmul>
 8006382:	3501      	adds	r5, #1
 8006384:	4680      	mov	r8, r0
 8006386:	4689      	mov	r9, r1
 8006388:	1076      	asrs	r6, r6, #1
 800638a:	3708      	adds	r7, #8
 800638c:	e7a2      	b.n	80062d4 <_dtoa_r+0x2bc>
 800638e:	f000 809d 	beq.w	80064cc <_dtoa_r+0x4b4>
 8006392:	f1cb 0600 	rsb	r6, fp, #0
 8006396:	4b9f      	ldr	r3, [pc, #636]	; (8006614 <_dtoa_r+0x5fc>)
 8006398:	4f9f      	ldr	r7, [pc, #636]	; (8006618 <_dtoa_r+0x600>)
 800639a:	f006 020f 	and.w	r2, r6, #15
 800639e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063aa:	f7fa f931 	bl	8000610 <__aeabi_dmul>
 80063ae:	e9cd 0100 	strd	r0, r1, [sp]
 80063b2:	1136      	asrs	r6, r6, #4
 80063b4:	2300      	movs	r3, #0
 80063b6:	2502      	movs	r5, #2
 80063b8:	2e00      	cmp	r6, #0
 80063ba:	d17c      	bne.n	80064b6 <_dtoa_r+0x49e>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d191      	bne.n	80062e4 <_dtoa_r+0x2cc>
 80063c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8084 	beq.w	80064d0 <_dtoa_r+0x4b8>
 80063c8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80063cc:	2200      	movs	r2, #0
 80063ce:	4b93      	ldr	r3, [pc, #588]	; (800661c <_dtoa_r+0x604>)
 80063d0:	4640      	mov	r0, r8
 80063d2:	4649      	mov	r1, r9
 80063d4:	f7fa fb8e 	bl	8000af4 <__aeabi_dcmplt>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d079      	beq.n	80064d0 <_dtoa_r+0x4b8>
 80063dc:	9b03      	ldr	r3, [sp, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d076      	beq.n	80064d0 <_dtoa_r+0x4b8>
 80063e2:	9b04      	ldr	r3, [sp, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	dd34      	ble.n	8006452 <_dtoa_r+0x43a>
 80063e8:	2200      	movs	r2, #0
 80063ea:	4b8d      	ldr	r3, [pc, #564]	; (8006620 <_dtoa_r+0x608>)
 80063ec:	4640      	mov	r0, r8
 80063ee:	4649      	mov	r1, r9
 80063f0:	f7fa f90e 	bl	8000610 <__aeabi_dmul>
 80063f4:	e9cd 0100 	strd	r0, r1, [sp]
 80063f8:	9e04      	ldr	r6, [sp, #16]
 80063fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 80063fe:	3501      	adds	r5, #1
 8006400:	4628      	mov	r0, r5
 8006402:	f7fa f89f 	bl	8000544 <__aeabi_i2d>
 8006406:	e9dd 2300 	ldrd	r2, r3, [sp]
 800640a:	f7fa f901 	bl	8000610 <__aeabi_dmul>
 800640e:	2200      	movs	r2, #0
 8006410:	4b84      	ldr	r3, [pc, #528]	; (8006624 <_dtoa_r+0x60c>)
 8006412:	f7f9 ff4b 	bl	80002ac <__adddf3>
 8006416:	4680      	mov	r8, r0
 8006418:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800641c:	2e00      	cmp	r6, #0
 800641e:	d15a      	bne.n	80064d6 <_dtoa_r+0x4be>
 8006420:	2200      	movs	r2, #0
 8006422:	4b81      	ldr	r3, [pc, #516]	; (8006628 <_dtoa_r+0x610>)
 8006424:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006428:	f7f9 ff3e 	bl	80002a8 <__aeabi_dsub>
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	e9cd 0100 	strd	r0, r1, [sp]
 8006434:	f7fa fb7c 	bl	8000b30 <__aeabi_dcmpgt>
 8006438:	2800      	cmp	r0, #0
 800643a:	f040 829b 	bne.w	8006974 <_dtoa_r+0x95c>
 800643e:	4642      	mov	r2, r8
 8006440:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006444:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006448:	f7fa fb54 	bl	8000af4 <__aeabi_dcmplt>
 800644c:	2800      	cmp	r0, #0
 800644e:	f040 828f 	bne.w	8006970 <_dtoa_r+0x958>
 8006452:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006456:	e9cd 2300 	strd	r2, r3, [sp]
 800645a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800645c:	2b00      	cmp	r3, #0
 800645e:	f2c0 8150 	blt.w	8006702 <_dtoa_r+0x6ea>
 8006462:	f1bb 0f0e 	cmp.w	fp, #14
 8006466:	f300 814c 	bgt.w	8006702 <_dtoa_r+0x6ea>
 800646a:	4b6a      	ldr	r3, [pc, #424]	; (8006614 <_dtoa_r+0x5fc>)
 800646c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006470:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	f280 80da 	bge.w	8006630 <_dtoa_r+0x618>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f300 80d6 	bgt.w	8006630 <_dtoa_r+0x618>
 8006484:	f040 8273 	bne.w	800696e <_dtoa_r+0x956>
 8006488:	2200      	movs	r2, #0
 800648a:	4b67      	ldr	r3, [pc, #412]	; (8006628 <_dtoa_r+0x610>)
 800648c:	4640      	mov	r0, r8
 800648e:	4649      	mov	r1, r9
 8006490:	f7fa f8be 	bl	8000610 <__aeabi_dmul>
 8006494:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006498:	f7fa fb40 	bl	8000b1c <__aeabi_dcmpge>
 800649c:	9e03      	ldr	r6, [sp, #12]
 800649e:	4637      	mov	r7, r6
 80064a0:	2800      	cmp	r0, #0
 80064a2:	f040 824a 	bne.w	800693a <_dtoa_r+0x922>
 80064a6:	9b02      	ldr	r3, [sp, #8]
 80064a8:	9a02      	ldr	r2, [sp, #8]
 80064aa:	1c5d      	adds	r5, r3, #1
 80064ac:	2331      	movs	r3, #49	; 0x31
 80064ae:	7013      	strb	r3, [r2, #0]
 80064b0:	f10b 0b01 	add.w	fp, fp, #1
 80064b4:	e245      	b.n	8006942 <_dtoa_r+0x92a>
 80064b6:	07f2      	lsls	r2, r6, #31
 80064b8:	d505      	bpl.n	80064c6 <_dtoa_r+0x4ae>
 80064ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064be:	f7fa f8a7 	bl	8000610 <__aeabi_dmul>
 80064c2:	3501      	adds	r5, #1
 80064c4:	2301      	movs	r3, #1
 80064c6:	1076      	asrs	r6, r6, #1
 80064c8:	3708      	adds	r7, #8
 80064ca:	e775      	b.n	80063b8 <_dtoa_r+0x3a0>
 80064cc:	2502      	movs	r5, #2
 80064ce:	e777      	b.n	80063c0 <_dtoa_r+0x3a8>
 80064d0:	465f      	mov	r7, fp
 80064d2:	9e03      	ldr	r6, [sp, #12]
 80064d4:	e794      	b.n	8006400 <_dtoa_r+0x3e8>
 80064d6:	9a02      	ldr	r2, [sp, #8]
 80064d8:	4b4e      	ldr	r3, [pc, #312]	; (8006614 <_dtoa_r+0x5fc>)
 80064da:	4432      	add	r2, r6
 80064dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80064de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e0:	1e71      	subs	r1, r6, #1
 80064e2:	2a00      	cmp	r2, #0
 80064e4:	d048      	beq.n	8006578 <_dtoa_r+0x560>
 80064e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	2000      	movs	r0, #0
 80064f0:	494e      	ldr	r1, [pc, #312]	; (800662c <_dtoa_r+0x614>)
 80064f2:	f7fa f9b7 	bl	8000864 <__aeabi_ddiv>
 80064f6:	4642      	mov	r2, r8
 80064f8:	464b      	mov	r3, r9
 80064fa:	f7f9 fed5 	bl	80002a8 <__aeabi_dsub>
 80064fe:	9d02      	ldr	r5, [sp, #8]
 8006500:	4680      	mov	r8, r0
 8006502:	4689      	mov	r9, r1
 8006504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006508:	f7fa fb32 	bl	8000b70 <__aeabi_d2iz>
 800650c:	4606      	mov	r6, r0
 800650e:	f7fa f819 	bl	8000544 <__aeabi_i2d>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	e9dd 0100 	ldrd	r0, r1, [sp]
 800651a:	f7f9 fec5 	bl	80002a8 <__aeabi_dsub>
 800651e:	3630      	adds	r6, #48	; 0x30
 8006520:	f805 6b01 	strb.w	r6, [r5], #1
 8006524:	4642      	mov	r2, r8
 8006526:	464b      	mov	r3, r9
 8006528:	e9cd 0100 	strd	r0, r1, [sp]
 800652c:	f7fa fae2 	bl	8000af4 <__aeabi_dcmplt>
 8006530:	2800      	cmp	r0, #0
 8006532:	d165      	bne.n	8006600 <_dtoa_r+0x5e8>
 8006534:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006538:	2000      	movs	r0, #0
 800653a:	4938      	ldr	r1, [pc, #224]	; (800661c <_dtoa_r+0x604>)
 800653c:	f7f9 feb4 	bl	80002a8 <__aeabi_dsub>
 8006540:	4642      	mov	r2, r8
 8006542:	464b      	mov	r3, r9
 8006544:	f7fa fad6 	bl	8000af4 <__aeabi_dcmplt>
 8006548:	2800      	cmp	r0, #0
 800654a:	f040 80ba 	bne.w	80066c2 <_dtoa_r+0x6aa>
 800654e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006550:	429d      	cmp	r5, r3
 8006552:	f43f af7e 	beq.w	8006452 <_dtoa_r+0x43a>
 8006556:	2200      	movs	r2, #0
 8006558:	4b31      	ldr	r3, [pc, #196]	; (8006620 <_dtoa_r+0x608>)
 800655a:	4640      	mov	r0, r8
 800655c:	4649      	mov	r1, r9
 800655e:	f7fa f857 	bl	8000610 <__aeabi_dmul>
 8006562:	2200      	movs	r2, #0
 8006564:	4680      	mov	r8, r0
 8006566:	4689      	mov	r9, r1
 8006568:	4b2d      	ldr	r3, [pc, #180]	; (8006620 <_dtoa_r+0x608>)
 800656a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800656e:	f7fa f84f 	bl	8000610 <__aeabi_dmul>
 8006572:	e9cd 0100 	strd	r0, r1, [sp]
 8006576:	e7c5      	b.n	8006504 <_dtoa_r+0x4ec>
 8006578:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006584:	f7fa f844 	bl	8000610 <__aeabi_dmul>
 8006588:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800658c:	9d02      	ldr	r5, [sp, #8]
 800658e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006592:	f7fa faed 	bl	8000b70 <__aeabi_d2iz>
 8006596:	4606      	mov	r6, r0
 8006598:	f7f9 ffd4 	bl	8000544 <__aeabi_i2d>
 800659c:	3630      	adds	r6, #48	; 0x30
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065a6:	f7f9 fe7f 	bl	80002a8 <__aeabi_dsub>
 80065aa:	f805 6b01 	strb.w	r6, [r5], #1
 80065ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065b0:	42ab      	cmp	r3, r5
 80065b2:	4680      	mov	r8, r0
 80065b4:	4689      	mov	r9, r1
 80065b6:	f04f 0200 	mov.w	r2, #0
 80065ba:	d125      	bne.n	8006608 <_dtoa_r+0x5f0>
 80065bc:	4b1b      	ldr	r3, [pc, #108]	; (800662c <_dtoa_r+0x614>)
 80065be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065c2:	f7f9 fe73 	bl	80002ac <__adddf3>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4640      	mov	r0, r8
 80065cc:	4649      	mov	r1, r9
 80065ce:	f7fa faaf 	bl	8000b30 <__aeabi_dcmpgt>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	d175      	bne.n	80066c2 <_dtoa_r+0x6aa>
 80065d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065da:	2000      	movs	r0, #0
 80065dc:	4913      	ldr	r1, [pc, #76]	; (800662c <_dtoa_r+0x614>)
 80065de:	f7f9 fe63 	bl	80002a8 <__aeabi_dsub>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4640      	mov	r0, r8
 80065e8:	4649      	mov	r1, r9
 80065ea:	f7fa fa83 	bl	8000af4 <__aeabi_dcmplt>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f43f af2f 	beq.w	8006452 <_dtoa_r+0x43a>
 80065f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065f8:	2b30      	cmp	r3, #48	; 0x30
 80065fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80065fe:	d001      	beq.n	8006604 <_dtoa_r+0x5ec>
 8006600:	46bb      	mov	fp, r7
 8006602:	e04d      	b.n	80066a0 <_dtoa_r+0x688>
 8006604:	4615      	mov	r5, r2
 8006606:	e7f5      	b.n	80065f4 <_dtoa_r+0x5dc>
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <_dtoa_r+0x608>)
 800660a:	f7fa f801 	bl	8000610 <__aeabi_dmul>
 800660e:	e9cd 0100 	strd	r0, r1, [sp]
 8006612:	e7bc      	b.n	800658e <_dtoa_r+0x576>
 8006614:	080082b8 	.word	0x080082b8
 8006618:	08008290 	.word	0x08008290
 800661c:	3ff00000 	.word	0x3ff00000
 8006620:	40240000 	.word	0x40240000
 8006624:	401c0000 	.word	0x401c0000
 8006628:	40140000 	.word	0x40140000
 800662c:	3fe00000 	.word	0x3fe00000
 8006630:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006634:	9d02      	ldr	r5, [sp, #8]
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	4630      	mov	r0, r6
 800663c:	4639      	mov	r1, r7
 800663e:	f7fa f911 	bl	8000864 <__aeabi_ddiv>
 8006642:	f7fa fa95 	bl	8000b70 <__aeabi_d2iz>
 8006646:	9000      	str	r0, [sp, #0]
 8006648:	f7f9 ff7c 	bl	8000544 <__aeabi_i2d>
 800664c:	4642      	mov	r2, r8
 800664e:	464b      	mov	r3, r9
 8006650:	f7f9 ffde 	bl	8000610 <__aeabi_dmul>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4630      	mov	r0, r6
 800665a:	4639      	mov	r1, r7
 800665c:	f7f9 fe24 	bl	80002a8 <__aeabi_dsub>
 8006660:	9e00      	ldr	r6, [sp, #0]
 8006662:	9f03      	ldr	r7, [sp, #12]
 8006664:	3630      	adds	r6, #48	; 0x30
 8006666:	f805 6b01 	strb.w	r6, [r5], #1
 800666a:	9e02      	ldr	r6, [sp, #8]
 800666c:	1bae      	subs	r6, r5, r6
 800666e:	42b7      	cmp	r7, r6
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	d138      	bne.n	80066e8 <_dtoa_r+0x6d0>
 8006676:	f7f9 fe19 	bl	80002ac <__adddf3>
 800667a:	4606      	mov	r6, r0
 800667c:	460f      	mov	r7, r1
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4640      	mov	r0, r8
 8006684:	4649      	mov	r1, r9
 8006686:	f7fa fa35 	bl	8000af4 <__aeabi_dcmplt>
 800668a:	b9c8      	cbnz	r0, 80066c0 <_dtoa_r+0x6a8>
 800668c:	4632      	mov	r2, r6
 800668e:	463b      	mov	r3, r7
 8006690:	4640      	mov	r0, r8
 8006692:	4649      	mov	r1, r9
 8006694:	f7fa fa24 	bl	8000ae0 <__aeabi_dcmpeq>
 8006698:	b110      	cbz	r0, 80066a0 <_dtoa_r+0x688>
 800669a:	9b00      	ldr	r3, [sp, #0]
 800669c:	07db      	lsls	r3, r3, #31
 800669e:	d40f      	bmi.n	80066c0 <_dtoa_r+0x6a8>
 80066a0:	4651      	mov	r1, sl
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 fcaa 	bl	8006ffc <_Bfree>
 80066a8:	2300      	movs	r3, #0
 80066aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066ac:	702b      	strb	r3, [r5, #0]
 80066ae:	f10b 0301 	add.w	r3, fp, #1
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f43f acf8 	beq.w	80060ac <_dtoa_r+0x94>
 80066bc:	601d      	str	r5, [r3, #0]
 80066be:	e4f5      	b.n	80060ac <_dtoa_r+0x94>
 80066c0:	465f      	mov	r7, fp
 80066c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80066c6:	2a39      	cmp	r2, #57	; 0x39
 80066c8:	f105 33ff 	add.w	r3, r5, #4294967295
 80066cc:	d106      	bne.n	80066dc <_dtoa_r+0x6c4>
 80066ce:	9a02      	ldr	r2, [sp, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d107      	bne.n	80066e4 <_dtoa_r+0x6cc>
 80066d4:	2330      	movs	r3, #48	; 0x30
 80066d6:	7013      	strb	r3, [r2, #0]
 80066d8:	3701      	adds	r7, #1
 80066da:	4613      	mov	r3, r2
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	3201      	adds	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	e78d      	b.n	8006600 <_dtoa_r+0x5e8>
 80066e4:	461d      	mov	r5, r3
 80066e6:	e7ec      	b.n	80066c2 <_dtoa_r+0x6aa>
 80066e8:	2200      	movs	r2, #0
 80066ea:	4ba4      	ldr	r3, [pc, #656]	; (800697c <_dtoa_r+0x964>)
 80066ec:	f7f9 ff90 	bl	8000610 <__aeabi_dmul>
 80066f0:	2200      	movs	r2, #0
 80066f2:	2300      	movs	r3, #0
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	f7fa f9f2 	bl	8000ae0 <__aeabi_dcmpeq>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d09a      	beq.n	8006636 <_dtoa_r+0x61e>
 8006700:	e7ce      	b.n	80066a0 <_dtoa_r+0x688>
 8006702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006704:	2a00      	cmp	r2, #0
 8006706:	f000 80cd 	beq.w	80068a4 <_dtoa_r+0x88c>
 800670a:	9a07      	ldr	r2, [sp, #28]
 800670c:	2a01      	cmp	r2, #1
 800670e:	f300 80af 	bgt.w	8006870 <_dtoa_r+0x858>
 8006712:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006714:	2a00      	cmp	r2, #0
 8006716:	f000 80a7 	beq.w	8006868 <_dtoa_r+0x850>
 800671a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800671e:	9e08      	ldr	r6, [sp, #32]
 8006720:	9d05      	ldr	r5, [sp, #20]
 8006722:	9a05      	ldr	r2, [sp, #20]
 8006724:	441a      	add	r2, r3
 8006726:	9205      	str	r2, [sp, #20]
 8006728:	9a06      	ldr	r2, [sp, #24]
 800672a:	2101      	movs	r1, #1
 800672c:	441a      	add	r2, r3
 800672e:	4620      	mov	r0, r4
 8006730:	9206      	str	r2, [sp, #24]
 8006732:	f000 fd03 	bl	800713c <__i2b>
 8006736:	4607      	mov	r7, r0
 8006738:	2d00      	cmp	r5, #0
 800673a:	dd0c      	ble.n	8006756 <_dtoa_r+0x73e>
 800673c:	9b06      	ldr	r3, [sp, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	dd09      	ble.n	8006756 <_dtoa_r+0x73e>
 8006742:	42ab      	cmp	r3, r5
 8006744:	9a05      	ldr	r2, [sp, #20]
 8006746:	bfa8      	it	ge
 8006748:	462b      	movge	r3, r5
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	9205      	str	r2, [sp, #20]
 800674e:	9a06      	ldr	r2, [sp, #24]
 8006750:	1aed      	subs	r5, r5, r3
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	9306      	str	r3, [sp, #24]
 8006756:	9b08      	ldr	r3, [sp, #32]
 8006758:	b1f3      	cbz	r3, 8006798 <_dtoa_r+0x780>
 800675a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80a5 	beq.w	80068ac <_dtoa_r+0x894>
 8006762:	2e00      	cmp	r6, #0
 8006764:	dd10      	ble.n	8006788 <_dtoa_r+0x770>
 8006766:	4639      	mov	r1, r7
 8006768:	4632      	mov	r2, r6
 800676a:	4620      	mov	r0, r4
 800676c:	f000 fd7c 	bl	8007268 <__pow5mult>
 8006770:	4652      	mov	r2, sl
 8006772:	4601      	mov	r1, r0
 8006774:	4607      	mov	r7, r0
 8006776:	4620      	mov	r0, r4
 8006778:	f000 fce9 	bl	800714e <__multiply>
 800677c:	4651      	mov	r1, sl
 800677e:	4680      	mov	r8, r0
 8006780:	4620      	mov	r0, r4
 8006782:	f000 fc3b 	bl	8006ffc <_Bfree>
 8006786:	46c2      	mov	sl, r8
 8006788:	9b08      	ldr	r3, [sp, #32]
 800678a:	1b9a      	subs	r2, r3, r6
 800678c:	d004      	beq.n	8006798 <_dtoa_r+0x780>
 800678e:	4651      	mov	r1, sl
 8006790:	4620      	mov	r0, r4
 8006792:	f000 fd69 	bl	8007268 <__pow5mult>
 8006796:	4682      	mov	sl, r0
 8006798:	2101      	movs	r1, #1
 800679a:	4620      	mov	r0, r4
 800679c:	f000 fcce 	bl	800713c <__i2b>
 80067a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	4606      	mov	r6, r0
 80067a6:	f340 8083 	ble.w	80068b0 <_dtoa_r+0x898>
 80067aa:	461a      	mov	r2, r3
 80067ac:	4601      	mov	r1, r0
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 fd5a 	bl	8007268 <__pow5mult>
 80067b4:	9b07      	ldr	r3, [sp, #28]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	4606      	mov	r6, r0
 80067ba:	dd7c      	ble.n	80068b6 <_dtoa_r+0x89e>
 80067bc:	f04f 0800 	mov.w	r8, #0
 80067c0:	6933      	ldr	r3, [r6, #16]
 80067c2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80067c6:	6918      	ldr	r0, [r3, #16]
 80067c8:	f000 fc6a 	bl	80070a0 <__hi0bits>
 80067cc:	f1c0 0020 	rsb	r0, r0, #32
 80067d0:	9b06      	ldr	r3, [sp, #24]
 80067d2:	4418      	add	r0, r3
 80067d4:	f010 001f 	ands.w	r0, r0, #31
 80067d8:	f000 8096 	beq.w	8006908 <_dtoa_r+0x8f0>
 80067dc:	f1c0 0320 	rsb	r3, r0, #32
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	f340 8087 	ble.w	80068f4 <_dtoa_r+0x8dc>
 80067e6:	9b05      	ldr	r3, [sp, #20]
 80067e8:	f1c0 001c 	rsb	r0, r0, #28
 80067ec:	4403      	add	r3, r0
 80067ee:	9305      	str	r3, [sp, #20]
 80067f0:	9b06      	ldr	r3, [sp, #24]
 80067f2:	4405      	add	r5, r0
 80067f4:	4403      	add	r3, r0
 80067f6:	9306      	str	r3, [sp, #24]
 80067f8:	9b05      	ldr	r3, [sp, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	dd05      	ble.n	800680a <_dtoa_r+0x7f2>
 80067fe:	4651      	mov	r1, sl
 8006800:	461a      	mov	r2, r3
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fd7e 	bl	8007304 <__lshift>
 8006808:	4682      	mov	sl, r0
 800680a:	9b06      	ldr	r3, [sp, #24]
 800680c:	2b00      	cmp	r3, #0
 800680e:	dd05      	ble.n	800681c <_dtoa_r+0x804>
 8006810:	4631      	mov	r1, r6
 8006812:	461a      	mov	r2, r3
 8006814:	4620      	mov	r0, r4
 8006816:	f000 fd75 	bl	8007304 <__lshift>
 800681a:	4606      	mov	r6, r0
 800681c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d074      	beq.n	800690c <_dtoa_r+0x8f4>
 8006822:	4631      	mov	r1, r6
 8006824:	4650      	mov	r0, sl
 8006826:	f000 fdbe 	bl	80073a6 <__mcmp>
 800682a:	2800      	cmp	r0, #0
 800682c:	da6e      	bge.n	800690c <_dtoa_r+0x8f4>
 800682e:	2300      	movs	r3, #0
 8006830:	4651      	mov	r1, sl
 8006832:	220a      	movs	r2, #10
 8006834:	4620      	mov	r0, r4
 8006836:	f000 fbf8 	bl	800702a <__multadd>
 800683a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006840:	4682      	mov	sl, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 81a8 	beq.w	8006b98 <_dtoa_r+0xb80>
 8006848:	2300      	movs	r3, #0
 800684a:	4639      	mov	r1, r7
 800684c:	220a      	movs	r2, #10
 800684e:	4620      	mov	r0, r4
 8006850:	f000 fbeb 	bl	800702a <__multadd>
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	4607      	mov	r7, r0
 800685a:	f300 80c8 	bgt.w	80069ee <_dtoa_r+0x9d6>
 800685e:	9b07      	ldr	r3, [sp, #28]
 8006860:	2b02      	cmp	r3, #2
 8006862:	f340 80c4 	ble.w	80069ee <_dtoa_r+0x9d6>
 8006866:	e059      	b.n	800691c <_dtoa_r+0x904>
 8006868:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800686a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800686e:	e756      	b.n	800671e <_dtoa_r+0x706>
 8006870:	9b03      	ldr	r3, [sp, #12]
 8006872:	1e5e      	subs	r6, r3, #1
 8006874:	9b08      	ldr	r3, [sp, #32]
 8006876:	42b3      	cmp	r3, r6
 8006878:	bfbf      	itttt	lt
 800687a:	9b08      	ldrlt	r3, [sp, #32]
 800687c:	9608      	strlt	r6, [sp, #32]
 800687e:	1af2      	sublt	r2, r6, r3
 8006880:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8006882:	bfb6      	itet	lt
 8006884:	189b      	addlt	r3, r3, r2
 8006886:	1b9e      	subge	r6, r3, r6
 8006888:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	bfb8      	it	lt
 800688e:	2600      	movlt	r6, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	bfb9      	ittee	lt
 8006894:	9b05      	ldrlt	r3, [sp, #20]
 8006896:	9a03      	ldrlt	r2, [sp, #12]
 8006898:	9d05      	ldrge	r5, [sp, #20]
 800689a:	9b03      	ldrge	r3, [sp, #12]
 800689c:	bfbc      	itt	lt
 800689e:	1a9d      	sublt	r5, r3, r2
 80068a0:	2300      	movlt	r3, #0
 80068a2:	e73e      	b.n	8006722 <_dtoa_r+0x70a>
 80068a4:	9e08      	ldr	r6, [sp, #32]
 80068a6:	9d05      	ldr	r5, [sp, #20]
 80068a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80068aa:	e745      	b.n	8006738 <_dtoa_r+0x720>
 80068ac:	9a08      	ldr	r2, [sp, #32]
 80068ae:	e76e      	b.n	800678e <_dtoa_r+0x776>
 80068b0:	9b07      	ldr	r3, [sp, #28]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	dc19      	bgt.n	80068ea <_dtoa_r+0x8d2>
 80068b6:	9b00      	ldr	r3, [sp, #0]
 80068b8:	b9bb      	cbnz	r3, 80068ea <_dtoa_r+0x8d2>
 80068ba:	9b01      	ldr	r3, [sp, #4]
 80068bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068c0:	b99b      	cbnz	r3, 80068ea <_dtoa_r+0x8d2>
 80068c2:	9b01      	ldr	r3, [sp, #4]
 80068c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068c8:	0d1b      	lsrs	r3, r3, #20
 80068ca:	051b      	lsls	r3, r3, #20
 80068cc:	b183      	cbz	r3, 80068f0 <_dtoa_r+0x8d8>
 80068ce:	9b05      	ldr	r3, [sp, #20]
 80068d0:	3301      	adds	r3, #1
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	9b06      	ldr	r3, [sp, #24]
 80068d6:	3301      	adds	r3, #1
 80068d8:	9306      	str	r3, [sp, #24]
 80068da:	f04f 0801 	mov.w	r8, #1
 80068de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f47f af6d 	bne.w	80067c0 <_dtoa_r+0x7a8>
 80068e6:	2001      	movs	r0, #1
 80068e8:	e772      	b.n	80067d0 <_dtoa_r+0x7b8>
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	e7f6      	b.n	80068de <_dtoa_r+0x8c6>
 80068f0:	4698      	mov	r8, r3
 80068f2:	e7f4      	b.n	80068de <_dtoa_r+0x8c6>
 80068f4:	d080      	beq.n	80067f8 <_dtoa_r+0x7e0>
 80068f6:	9a05      	ldr	r2, [sp, #20]
 80068f8:	331c      	adds	r3, #28
 80068fa:	441a      	add	r2, r3
 80068fc:	9205      	str	r2, [sp, #20]
 80068fe:	9a06      	ldr	r2, [sp, #24]
 8006900:	441a      	add	r2, r3
 8006902:	441d      	add	r5, r3
 8006904:	4613      	mov	r3, r2
 8006906:	e776      	b.n	80067f6 <_dtoa_r+0x7de>
 8006908:	4603      	mov	r3, r0
 800690a:	e7f4      	b.n	80068f6 <_dtoa_r+0x8de>
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	dc36      	bgt.n	8006980 <_dtoa_r+0x968>
 8006912:	9b07      	ldr	r3, [sp, #28]
 8006914:	2b02      	cmp	r3, #2
 8006916:	dd33      	ble.n	8006980 <_dtoa_r+0x968>
 8006918:	9b03      	ldr	r3, [sp, #12]
 800691a:	9304      	str	r3, [sp, #16]
 800691c:	9b04      	ldr	r3, [sp, #16]
 800691e:	b963      	cbnz	r3, 800693a <_dtoa_r+0x922>
 8006920:	4631      	mov	r1, r6
 8006922:	2205      	movs	r2, #5
 8006924:	4620      	mov	r0, r4
 8006926:	f000 fb80 	bl	800702a <__multadd>
 800692a:	4601      	mov	r1, r0
 800692c:	4606      	mov	r6, r0
 800692e:	4650      	mov	r0, sl
 8006930:	f000 fd39 	bl	80073a6 <__mcmp>
 8006934:	2800      	cmp	r0, #0
 8006936:	f73f adb6 	bgt.w	80064a6 <_dtoa_r+0x48e>
 800693a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693c:	9d02      	ldr	r5, [sp, #8]
 800693e:	ea6f 0b03 	mvn.w	fp, r3
 8006942:	2300      	movs	r3, #0
 8006944:	9303      	str	r3, [sp, #12]
 8006946:	4631      	mov	r1, r6
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fb57 	bl	8006ffc <_Bfree>
 800694e:	2f00      	cmp	r7, #0
 8006950:	f43f aea6 	beq.w	80066a0 <_dtoa_r+0x688>
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	b12b      	cbz	r3, 8006964 <_dtoa_r+0x94c>
 8006958:	42bb      	cmp	r3, r7
 800695a:	d003      	beq.n	8006964 <_dtoa_r+0x94c>
 800695c:	4619      	mov	r1, r3
 800695e:	4620      	mov	r0, r4
 8006960:	f000 fb4c 	bl	8006ffc <_Bfree>
 8006964:	4639      	mov	r1, r7
 8006966:	4620      	mov	r0, r4
 8006968:	f000 fb48 	bl	8006ffc <_Bfree>
 800696c:	e698      	b.n	80066a0 <_dtoa_r+0x688>
 800696e:	2600      	movs	r6, #0
 8006970:	4637      	mov	r7, r6
 8006972:	e7e2      	b.n	800693a <_dtoa_r+0x922>
 8006974:	46bb      	mov	fp, r7
 8006976:	4637      	mov	r7, r6
 8006978:	e595      	b.n	80064a6 <_dtoa_r+0x48e>
 800697a:	bf00      	nop
 800697c:	40240000 	.word	0x40240000
 8006980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006982:	bb93      	cbnz	r3, 80069ea <_dtoa_r+0x9d2>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	9304      	str	r3, [sp, #16]
 8006988:	9d02      	ldr	r5, [sp, #8]
 800698a:	4631      	mov	r1, r6
 800698c:	4650      	mov	r0, sl
 800698e:	f7ff fab5 	bl	8005efc <quorem>
 8006992:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006996:	f805 9b01 	strb.w	r9, [r5], #1
 800699a:	9b02      	ldr	r3, [sp, #8]
 800699c:	9a04      	ldr	r2, [sp, #16]
 800699e:	1aeb      	subs	r3, r5, r3
 80069a0:	429a      	cmp	r2, r3
 80069a2:	f300 80dc 	bgt.w	8006b5e <_dtoa_r+0xb46>
 80069a6:	9b02      	ldr	r3, [sp, #8]
 80069a8:	2a01      	cmp	r2, #1
 80069aa:	bfac      	ite	ge
 80069ac:	189b      	addge	r3, r3, r2
 80069ae:	3301      	addlt	r3, #1
 80069b0:	4698      	mov	r8, r3
 80069b2:	2300      	movs	r3, #0
 80069b4:	9303      	str	r3, [sp, #12]
 80069b6:	4651      	mov	r1, sl
 80069b8:	2201      	movs	r2, #1
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 fca2 	bl	8007304 <__lshift>
 80069c0:	4631      	mov	r1, r6
 80069c2:	4682      	mov	sl, r0
 80069c4:	f000 fcef 	bl	80073a6 <__mcmp>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	f300 808d 	bgt.w	8006ae8 <_dtoa_r+0xad0>
 80069ce:	d103      	bne.n	80069d8 <_dtoa_r+0x9c0>
 80069d0:	f019 0f01 	tst.w	r9, #1
 80069d4:	f040 8088 	bne.w	8006ae8 <_dtoa_r+0xad0>
 80069d8:	4645      	mov	r5, r8
 80069da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069de:	2b30      	cmp	r3, #48	; 0x30
 80069e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80069e4:	d1af      	bne.n	8006946 <_dtoa_r+0x92e>
 80069e6:	4615      	mov	r5, r2
 80069e8:	e7f7      	b.n	80069da <_dtoa_r+0x9c2>
 80069ea:	9b03      	ldr	r3, [sp, #12]
 80069ec:	9304      	str	r3, [sp, #16]
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	dd05      	ble.n	80069fe <_dtoa_r+0x9e6>
 80069f2:	4639      	mov	r1, r7
 80069f4:	462a      	mov	r2, r5
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 fc84 	bl	8007304 <__lshift>
 80069fc:	4607      	mov	r7, r0
 80069fe:	f1b8 0f00 	cmp.w	r8, #0
 8006a02:	d04c      	beq.n	8006a9e <_dtoa_r+0xa86>
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4620      	mov	r0, r4
 8006a08:	f000 fac4 	bl	8006f94 <_Balloc>
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	3202      	adds	r2, #2
 8006a10:	4605      	mov	r5, r0
 8006a12:	0092      	lsls	r2, r2, #2
 8006a14:	f107 010c 	add.w	r1, r7, #12
 8006a18:	300c      	adds	r0, #12
 8006a1a:	f7fe fbf8 	bl	800520e <memcpy>
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4629      	mov	r1, r5
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 fc6e 	bl	8007304 <__lshift>
 8006a28:	9b00      	ldr	r3, [sp, #0]
 8006a2a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006a2e:	9703      	str	r7, [sp, #12]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	4607      	mov	r7, r0
 8006a36:	9305      	str	r3, [sp, #20]
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	f7ff fa5e 	bl	8005efc <quorem>
 8006a40:	9903      	ldr	r1, [sp, #12]
 8006a42:	4605      	mov	r5, r0
 8006a44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a48:	4650      	mov	r0, sl
 8006a4a:	f000 fcac 	bl	80073a6 <__mcmp>
 8006a4e:	463a      	mov	r2, r7
 8006a50:	9000      	str	r0, [sp, #0]
 8006a52:	4631      	mov	r1, r6
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 fcc0 	bl	80073da <__mdiff>
 8006a5a:	68c3      	ldr	r3, [r0, #12]
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	bb03      	cbnz	r3, 8006aa2 <_dtoa_r+0xa8a>
 8006a60:	4601      	mov	r1, r0
 8006a62:	9006      	str	r0, [sp, #24]
 8006a64:	4650      	mov	r0, sl
 8006a66:	f000 fc9e 	bl	80073a6 <__mcmp>
 8006a6a:	9a06      	ldr	r2, [sp, #24]
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4620      	mov	r0, r4
 8006a72:	9306      	str	r3, [sp, #24]
 8006a74:	f000 fac2 	bl	8006ffc <_Bfree>
 8006a78:	9b06      	ldr	r3, [sp, #24]
 8006a7a:	b9a3      	cbnz	r3, 8006aa6 <_dtoa_r+0xa8e>
 8006a7c:	9a07      	ldr	r2, [sp, #28]
 8006a7e:	b992      	cbnz	r2, 8006aa6 <_dtoa_r+0xa8e>
 8006a80:	9a05      	ldr	r2, [sp, #20]
 8006a82:	b982      	cbnz	r2, 8006aa6 <_dtoa_r+0xa8e>
 8006a84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a88:	d029      	beq.n	8006ade <_dtoa_r+0xac6>
 8006a8a:	9b00      	ldr	r3, [sp, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	dd01      	ble.n	8006a94 <_dtoa_r+0xa7c>
 8006a90:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006a94:	f108 0501 	add.w	r5, r8, #1
 8006a98:	f888 9000 	strb.w	r9, [r8]
 8006a9c:	e753      	b.n	8006946 <_dtoa_r+0x92e>
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	e7c2      	b.n	8006a28 <_dtoa_r+0xa10>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e7e3      	b.n	8006a6e <_dtoa_r+0xa56>
 8006aa6:	9a00      	ldr	r2, [sp, #0]
 8006aa8:	2a00      	cmp	r2, #0
 8006aaa:	db04      	blt.n	8006ab6 <_dtoa_r+0xa9e>
 8006aac:	d125      	bne.n	8006afa <_dtoa_r+0xae2>
 8006aae:	9a07      	ldr	r2, [sp, #28]
 8006ab0:	bb1a      	cbnz	r2, 8006afa <_dtoa_r+0xae2>
 8006ab2:	9a05      	ldr	r2, [sp, #20]
 8006ab4:	bb0a      	cbnz	r2, 8006afa <_dtoa_r+0xae2>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	ddec      	ble.n	8006a94 <_dtoa_r+0xa7c>
 8006aba:	4651      	mov	r1, sl
 8006abc:	2201      	movs	r2, #1
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 fc20 	bl	8007304 <__lshift>
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	f000 fc6d 	bl	80073a6 <__mcmp>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	dc03      	bgt.n	8006ad8 <_dtoa_r+0xac0>
 8006ad0:	d1e0      	bne.n	8006a94 <_dtoa_r+0xa7c>
 8006ad2:	f019 0f01 	tst.w	r9, #1
 8006ad6:	d0dd      	beq.n	8006a94 <_dtoa_r+0xa7c>
 8006ad8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006adc:	d1d8      	bne.n	8006a90 <_dtoa_r+0xa78>
 8006ade:	2339      	movs	r3, #57	; 0x39
 8006ae0:	f888 3000 	strb.w	r3, [r8]
 8006ae4:	f108 0801 	add.w	r8, r8, #1
 8006ae8:	4645      	mov	r5, r8
 8006aea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006aee:	2b39      	cmp	r3, #57	; 0x39
 8006af0:	f105 32ff 	add.w	r2, r5, #4294967295
 8006af4:	d03b      	beq.n	8006b6e <_dtoa_r+0xb56>
 8006af6:	3301      	adds	r3, #1
 8006af8:	e040      	b.n	8006b7c <_dtoa_r+0xb64>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f108 0501 	add.w	r5, r8, #1
 8006b00:	dd05      	ble.n	8006b0e <_dtoa_r+0xaf6>
 8006b02:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b06:	d0ea      	beq.n	8006ade <_dtoa_r+0xac6>
 8006b08:	f109 0901 	add.w	r9, r9, #1
 8006b0c:	e7c4      	b.n	8006a98 <_dtoa_r+0xa80>
 8006b0e:	9b02      	ldr	r3, [sp, #8]
 8006b10:	9a04      	ldr	r2, [sp, #16]
 8006b12:	f805 9c01 	strb.w	r9, [r5, #-1]
 8006b16:	1aeb      	subs	r3, r5, r3
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	46a8      	mov	r8, r5
 8006b1c:	f43f af4b 	beq.w	80069b6 <_dtoa_r+0x99e>
 8006b20:	4651      	mov	r1, sl
 8006b22:	2300      	movs	r3, #0
 8006b24:	220a      	movs	r2, #10
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 fa7f 	bl	800702a <__multadd>
 8006b2c:	9b03      	ldr	r3, [sp, #12]
 8006b2e:	9903      	ldr	r1, [sp, #12]
 8006b30:	42bb      	cmp	r3, r7
 8006b32:	4682      	mov	sl, r0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	f04f 020a 	mov.w	r2, #10
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	d104      	bne.n	8006b4a <_dtoa_r+0xb32>
 8006b40:	f000 fa73 	bl	800702a <__multadd>
 8006b44:	9003      	str	r0, [sp, #12]
 8006b46:	4607      	mov	r7, r0
 8006b48:	e776      	b.n	8006a38 <_dtoa_r+0xa20>
 8006b4a:	f000 fa6e 	bl	800702a <__multadd>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9003      	str	r0, [sp, #12]
 8006b52:	220a      	movs	r2, #10
 8006b54:	4639      	mov	r1, r7
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fa67 	bl	800702a <__multadd>
 8006b5c:	e7f3      	b.n	8006b46 <_dtoa_r+0xb2e>
 8006b5e:	4651      	mov	r1, sl
 8006b60:	2300      	movs	r3, #0
 8006b62:	220a      	movs	r2, #10
 8006b64:	4620      	mov	r0, r4
 8006b66:	f000 fa60 	bl	800702a <__multadd>
 8006b6a:	4682      	mov	sl, r0
 8006b6c:	e70d      	b.n	800698a <_dtoa_r+0x972>
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d105      	bne.n	8006b80 <_dtoa_r+0xb68>
 8006b74:	9a02      	ldr	r2, [sp, #8]
 8006b76:	f10b 0b01 	add.w	fp, fp, #1
 8006b7a:	2331      	movs	r3, #49	; 0x31
 8006b7c:	7013      	strb	r3, [r2, #0]
 8006b7e:	e6e2      	b.n	8006946 <_dtoa_r+0x92e>
 8006b80:	4615      	mov	r5, r2
 8006b82:	e7b2      	b.n	8006aea <_dtoa_r+0xad2>
 8006b84:	4b09      	ldr	r3, [pc, #36]	; (8006bac <_dtoa_r+0xb94>)
 8006b86:	f7ff baae 	b.w	80060e6 <_dtoa_r+0xce>
 8006b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f47f aa88 	bne.w	80060a2 <_dtoa_r+0x8a>
 8006b92:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <_dtoa_r+0xb98>)
 8006b94:	f7ff baa7 	b.w	80060e6 <_dtoa_r+0xce>
 8006b98:	9b04      	ldr	r3, [sp, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f73f aef4 	bgt.w	8006988 <_dtoa_r+0x970>
 8006ba0:	9b07      	ldr	r3, [sp, #28]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	f77f aef0 	ble.w	8006988 <_dtoa_r+0x970>
 8006ba8:	e6b8      	b.n	800691c <_dtoa_r+0x904>
 8006baa:	bf00      	nop
 8006bac:	080081f8 	.word	0x080081f8
 8006bb0:	0800821c 	.word	0x0800821c

08006bb4 <__sflush_r>:
 8006bb4:	898a      	ldrh	r2, [r1, #12]
 8006bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bba:	4605      	mov	r5, r0
 8006bbc:	0710      	lsls	r0, r2, #28
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	d45a      	bmi.n	8006c78 <__sflush_r+0xc4>
 8006bc2:	684b      	ldr	r3, [r1, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dc05      	bgt.n	8006bd4 <__sflush_r+0x20>
 8006bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dc02      	bgt.n	8006bd4 <__sflush_r+0x20>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	d0f9      	beq.n	8006bce <__sflush_r+0x1a>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006be0:	682f      	ldr	r7, [r5, #0]
 8006be2:	602b      	str	r3, [r5, #0]
 8006be4:	d033      	beq.n	8006c4e <__sflush_r+0x9a>
 8006be6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	075a      	lsls	r2, r3, #29
 8006bec:	d505      	bpl.n	8006bfa <__sflush_r+0x46>
 8006bee:	6863      	ldr	r3, [r4, #4]
 8006bf0:	1ac0      	subs	r0, r0, r3
 8006bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bf4:	b10b      	cbz	r3, 8006bfa <__sflush_r+0x46>
 8006bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bf8:	1ac0      	subs	r0, r0, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c00:	6a21      	ldr	r1, [r4, #32]
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b0      	blx	r6
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	d106      	bne.n	8006c1a <__sflush_r+0x66>
 8006c0c:	6829      	ldr	r1, [r5, #0]
 8006c0e:	291d      	cmp	r1, #29
 8006c10:	d84b      	bhi.n	8006caa <__sflush_r+0xf6>
 8006c12:	4a2b      	ldr	r2, [pc, #172]	; (8006cc0 <__sflush_r+0x10c>)
 8006c14:	40ca      	lsrs	r2, r1
 8006c16:	07d6      	lsls	r6, r2, #31
 8006c18:	d547      	bpl.n	8006caa <__sflush_r+0xf6>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	6062      	str	r2, [r4, #4]
 8006c1e:	04d9      	lsls	r1, r3, #19
 8006c20:	6922      	ldr	r2, [r4, #16]
 8006c22:	6022      	str	r2, [r4, #0]
 8006c24:	d504      	bpl.n	8006c30 <__sflush_r+0x7c>
 8006c26:	1c42      	adds	r2, r0, #1
 8006c28:	d101      	bne.n	8006c2e <__sflush_r+0x7a>
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	b903      	cbnz	r3, 8006c30 <__sflush_r+0x7c>
 8006c2e:	6560      	str	r0, [r4, #84]	; 0x54
 8006c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c32:	602f      	str	r7, [r5, #0]
 8006c34:	2900      	cmp	r1, #0
 8006c36:	d0ca      	beq.n	8006bce <__sflush_r+0x1a>
 8006c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c3c:	4299      	cmp	r1, r3
 8006c3e:	d002      	beq.n	8006c46 <__sflush_r+0x92>
 8006c40:	4628      	mov	r0, r5
 8006c42:	f7fe faf7 	bl	8005234 <_free_r>
 8006c46:	2000      	movs	r0, #0
 8006c48:	6360      	str	r0, [r4, #52]	; 0x34
 8006c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c4e:	6a21      	ldr	r1, [r4, #32]
 8006c50:	2301      	movs	r3, #1
 8006c52:	4628      	mov	r0, r5
 8006c54:	47b0      	blx	r6
 8006c56:	1c41      	adds	r1, r0, #1
 8006c58:	d1c6      	bne.n	8006be8 <__sflush_r+0x34>
 8006c5a:	682b      	ldr	r3, [r5, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d0c3      	beq.n	8006be8 <__sflush_r+0x34>
 8006c60:	2b1d      	cmp	r3, #29
 8006c62:	d001      	beq.n	8006c68 <__sflush_r+0xb4>
 8006c64:	2b16      	cmp	r3, #22
 8006c66:	d101      	bne.n	8006c6c <__sflush_r+0xb8>
 8006c68:	602f      	str	r7, [r5, #0]
 8006c6a:	e7b0      	b.n	8006bce <__sflush_r+0x1a>
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c72:	81a3      	strh	r3, [r4, #12]
 8006c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c78:	690f      	ldr	r7, [r1, #16]
 8006c7a:	2f00      	cmp	r7, #0
 8006c7c:	d0a7      	beq.n	8006bce <__sflush_r+0x1a>
 8006c7e:	0793      	lsls	r3, r2, #30
 8006c80:	680e      	ldr	r6, [r1, #0]
 8006c82:	bf08      	it	eq
 8006c84:	694b      	ldreq	r3, [r1, #20]
 8006c86:	600f      	str	r7, [r1, #0]
 8006c88:	bf18      	it	ne
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	eba6 0807 	sub.w	r8, r6, r7
 8006c90:	608b      	str	r3, [r1, #8]
 8006c92:	f1b8 0f00 	cmp.w	r8, #0
 8006c96:	dd9a      	ble.n	8006bce <__sflush_r+0x1a>
 8006c98:	4643      	mov	r3, r8
 8006c9a:	463a      	mov	r2, r7
 8006c9c:	6a21      	ldr	r1, [r4, #32]
 8006c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b0      	blx	r6
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	dc07      	bgt.n	8006cb8 <__sflush_r+0x104>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb8:	4407      	add	r7, r0
 8006cba:	eba8 0800 	sub.w	r8, r8, r0
 8006cbe:	e7e8      	b.n	8006c92 <__sflush_r+0xde>
 8006cc0:	20400001 	.word	0x20400001

08006cc4 <_fflush_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	690b      	ldr	r3, [r1, #16]
 8006cc8:	4605      	mov	r5, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	b1db      	cbz	r3, 8006d06 <_fflush_r+0x42>
 8006cce:	b118      	cbz	r0, 8006cd8 <_fflush_r+0x14>
 8006cd0:	6983      	ldr	r3, [r0, #24]
 8006cd2:	b90b      	cbnz	r3, 8006cd8 <_fflush_r+0x14>
 8006cd4:	f000 f860 	bl	8006d98 <__sinit>
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <_fflush_r+0x48>)
 8006cda:	429c      	cmp	r4, r3
 8006cdc:	d109      	bne.n	8006cf2 <_fflush_r+0x2e>
 8006cde:	686c      	ldr	r4, [r5, #4]
 8006ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce4:	b17b      	cbz	r3, 8006d06 <_fflush_r+0x42>
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4628      	mov	r0, r5
 8006cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cee:	f7ff bf61 	b.w	8006bb4 <__sflush_r>
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <_fflush_r+0x4c>)
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	d101      	bne.n	8006cfc <_fflush_r+0x38>
 8006cf8:	68ac      	ldr	r4, [r5, #8]
 8006cfa:	e7f1      	b.n	8006ce0 <_fflush_r+0x1c>
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <_fflush_r+0x50>)
 8006cfe:	429c      	cmp	r4, r3
 8006d00:	bf08      	it	eq
 8006d02:	68ec      	ldreq	r4, [r5, #12]
 8006d04:	e7ec      	b.n	8006ce0 <_fflush_r+0x1c>
 8006d06:	2000      	movs	r0, #0
 8006d08:	bd38      	pop	{r3, r4, r5, pc}
 8006d0a:	bf00      	nop
 8006d0c:	0800824c 	.word	0x0800824c
 8006d10:	0800826c 	.word	0x0800826c
 8006d14:	0800822c 	.word	0x0800822c

08006d18 <_cleanup_r>:
 8006d18:	4901      	ldr	r1, [pc, #4]	; (8006d20 <_cleanup_r+0x8>)
 8006d1a:	f000 b8a9 	b.w	8006e70 <_fwalk_reent>
 8006d1e:	bf00      	nop
 8006d20:	08006cc5 	.word	0x08006cc5

08006d24 <std.isra.0>:
 8006d24:	2300      	movs	r3, #0
 8006d26:	b510      	push	{r4, lr}
 8006d28:	4604      	mov	r4, r0
 8006d2a:	6003      	str	r3, [r0, #0]
 8006d2c:	6043      	str	r3, [r0, #4]
 8006d2e:	6083      	str	r3, [r0, #8]
 8006d30:	8181      	strh	r1, [r0, #12]
 8006d32:	6643      	str	r3, [r0, #100]	; 0x64
 8006d34:	81c2      	strh	r2, [r0, #14]
 8006d36:	6103      	str	r3, [r0, #16]
 8006d38:	6143      	str	r3, [r0, #20]
 8006d3a:	6183      	str	r3, [r0, #24]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	2208      	movs	r2, #8
 8006d40:	305c      	adds	r0, #92	; 0x5c
 8006d42:	f7fe fa6f 	bl	8005224 <memset>
 8006d46:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <std.isra.0+0x38>)
 8006d48:	6263      	str	r3, [r4, #36]	; 0x24
 8006d4a:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <std.isra.0+0x3c>)
 8006d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d4e:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <std.isra.0+0x40>)
 8006d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d52:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <std.isra.0+0x44>)
 8006d54:	6224      	str	r4, [r4, #32]
 8006d56:	6323      	str	r3, [r4, #48]	; 0x30
 8006d58:	bd10      	pop	{r4, pc}
 8006d5a:	bf00      	nop
 8006d5c:	080077d1 	.word	0x080077d1
 8006d60:	080077f3 	.word	0x080077f3
 8006d64:	0800782b 	.word	0x0800782b
 8006d68:	0800784f 	.word	0x0800784f

08006d6c <__sfmoreglue>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	1e4a      	subs	r2, r1, #1
 8006d70:	2568      	movs	r5, #104	; 0x68
 8006d72:	4355      	muls	r5, r2
 8006d74:	460e      	mov	r6, r1
 8006d76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d7a:	f7fe faa9 	bl	80052d0 <_malloc_r>
 8006d7e:	4604      	mov	r4, r0
 8006d80:	b140      	cbz	r0, 8006d94 <__sfmoreglue+0x28>
 8006d82:	2100      	movs	r1, #0
 8006d84:	e880 0042 	stmia.w	r0, {r1, r6}
 8006d88:	300c      	adds	r0, #12
 8006d8a:	60a0      	str	r0, [r4, #8]
 8006d8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d90:	f7fe fa48 	bl	8005224 <memset>
 8006d94:	4620      	mov	r0, r4
 8006d96:	bd70      	pop	{r4, r5, r6, pc}

08006d98 <__sinit>:
 8006d98:	6983      	ldr	r3, [r0, #24]
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	bb33      	cbnz	r3, 8006dee <__sinit+0x56>
 8006da0:	6483      	str	r3, [r0, #72]	; 0x48
 8006da2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006da4:	6503      	str	r3, [r0, #80]	; 0x50
 8006da6:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <__sinit+0x58>)
 8006da8:	4a12      	ldr	r2, [pc, #72]	; (8006df4 <__sinit+0x5c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6282      	str	r2, [r0, #40]	; 0x28
 8006dae:	4298      	cmp	r0, r3
 8006db0:	bf04      	itt	eq
 8006db2:	2301      	moveq	r3, #1
 8006db4:	6183      	streq	r3, [r0, #24]
 8006db6:	f000 f81f 	bl	8006df8 <__sfp>
 8006dba:	6060      	str	r0, [r4, #4]
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 f81b 	bl	8006df8 <__sfp>
 8006dc2:	60a0      	str	r0, [r4, #8]
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 f817 	bl	8006df8 <__sfp>
 8006dca:	2200      	movs	r2, #0
 8006dcc:	60e0      	str	r0, [r4, #12]
 8006dce:	2104      	movs	r1, #4
 8006dd0:	6860      	ldr	r0, [r4, #4]
 8006dd2:	f7ff ffa7 	bl	8006d24 <std.isra.0>
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	2109      	movs	r1, #9
 8006dda:	68a0      	ldr	r0, [r4, #8]
 8006ddc:	f7ff ffa2 	bl	8006d24 <std.isra.0>
 8006de0:	2202      	movs	r2, #2
 8006de2:	2112      	movs	r1, #18
 8006de4:	68e0      	ldr	r0, [r4, #12]
 8006de6:	f7ff ff9d 	bl	8006d24 <std.isra.0>
 8006dea:	2301      	movs	r3, #1
 8006dec:	61a3      	str	r3, [r4, #24]
 8006dee:	bd10      	pop	{r4, pc}
 8006df0:	0800828c 	.word	0x0800828c
 8006df4:	08006d19 	.word	0x08006d19

08006df8 <__sfp>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	4b1c      	ldr	r3, [pc, #112]	; (8006e6c <__sfp+0x74>)
 8006dfc:	681e      	ldr	r6, [r3, #0]
 8006dfe:	69b3      	ldr	r3, [r6, #24]
 8006e00:	4607      	mov	r7, r0
 8006e02:	b913      	cbnz	r3, 8006e0a <__sfp+0x12>
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7ff ffc7 	bl	8006d98 <__sinit>
 8006e0a:	3648      	adds	r6, #72	; 0x48
 8006e0c:	68b4      	ldr	r4, [r6, #8]
 8006e0e:	6873      	ldr	r3, [r6, #4]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	d503      	bpl.n	8006e1c <__sfp+0x24>
 8006e14:	6833      	ldr	r3, [r6, #0]
 8006e16:	b133      	cbz	r3, 8006e26 <__sfp+0x2e>
 8006e18:	6836      	ldr	r6, [r6, #0]
 8006e1a:	e7f7      	b.n	8006e0c <__sfp+0x14>
 8006e1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e20:	b16d      	cbz	r5, 8006e3e <__sfp+0x46>
 8006e22:	3468      	adds	r4, #104	; 0x68
 8006e24:	e7f4      	b.n	8006e10 <__sfp+0x18>
 8006e26:	2104      	movs	r1, #4
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f7ff ff9f 	bl	8006d6c <__sfmoreglue>
 8006e2e:	6030      	str	r0, [r6, #0]
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d1f1      	bne.n	8006e18 <__sfp+0x20>
 8006e34:	230c      	movs	r3, #12
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	4604      	mov	r4, r0
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e42:	81e3      	strh	r3, [r4, #14]
 8006e44:	2301      	movs	r3, #1
 8006e46:	81a3      	strh	r3, [r4, #12]
 8006e48:	6665      	str	r5, [r4, #100]	; 0x64
 8006e4a:	6025      	str	r5, [r4, #0]
 8006e4c:	60a5      	str	r5, [r4, #8]
 8006e4e:	6065      	str	r5, [r4, #4]
 8006e50:	6125      	str	r5, [r4, #16]
 8006e52:	6165      	str	r5, [r4, #20]
 8006e54:	61a5      	str	r5, [r4, #24]
 8006e56:	2208      	movs	r2, #8
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e5e:	f7fe f9e1 	bl	8005224 <memset>
 8006e62:	6365      	str	r5, [r4, #52]	; 0x34
 8006e64:	63a5      	str	r5, [r4, #56]	; 0x38
 8006e66:	64a5      	str	r5, [r4, #72]	; 0x48
 8006e68:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006e6a:	e7e6      	b.n	8006e3a <__sfp+0x42>
 8006e6c:	0800828c 	.word	0x0800828c

08006e70 <_fwalk_reent>:
 8006e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e74:	4680      	mov	r8, r0
 8006e76:	4689      	mov	r9, r1
 8006e78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e7c:	2600      	movs	r6, #0
 8006e7e:	b914      	cbnz	r4, 8006e86 <_fwalk_reent+0x16>
 8006e80:	4630      	mov	r0, r6
 8006e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e86:	68a5      	ldr	r5, [r4, #8]
 8006e88:	6867      	ldr	r7, [r4, #4]
 8006e8a:	3f01      	subs	r7, #1
 8006e8c:	d501      	bpl.n	8006e92 <_fwalk_reent+0x22>
 8006e8e:	6824      	ldr	r4, [r4, #0]
 8006e90:	e7f5      	b.n	8006e7e <_fwalk_reent+0xe>
 8006e92:	89ab      	ldrh	r3, [r5, #12]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d907      	bls.n	8006ea8 <_fwalk_reent+0x38>
 8006e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	d003      	beq.n	8006ea8 <_fwalk_reent+0x38>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	47c8      	blx	r9
 8006ea6:	4306      	orrs	r6, r0
 8006ea8:	3568      	adds	r5, #104	; 0x68
 8006eaa:	e7ee      	b.n	8006e8a <_fwalk_reent+0x1a>

08006eac <_localeconv_r>:
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <_localeconv_r+0x14>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6a18      	ldr	r0, [r3, #32]
 8006eb2:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <_localeconv_r+0x18>)
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	bf08      	it	eq
 8006eb8:	4618      	moveq	r0, r3
 8006eba:	30f0      	adds	r0, #240	; 0xf0
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20000010 	.word	0x20000010
 8006ec4:	20000074 	.word	0x20000074

08006ec8 <__swhatbuf_r>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	460e      	mov	r6, r1
 8006ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed0:	2900      	cmp	r1, #0
 8006ed2:	b090      	sub	sp, #64	; 0x40
 8006ed4:	4614      	mov	r4, r2
 8006ed6:	461d      	mov	r5, r3
 8006ed8:	da07      	bge.n	8006eea <__swhatbuf_r+0x22>
 8006eda:	2300      	movs	r3, #0
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	89b3      	ldrh	r3, [r6, #12]
 8006ee0:	061a      	lsls	r2, r3, #24
 8006ee2:	d410      	bmi.n	8006f06 <__swhatbuf_r+0x3e>
 8006ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ee8:	e00e      	b.n	8006f08 <__swhatbuf_r+0x40>
 8006eea:	aa01      	add	r2, sp, #4
 8006eec:	f000 fcd6 	bl	800789c <_fstat_r>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	dbf2      	blt.n	8006eda <__swhatbuf_r+0x12>
 8006ef4:	9a02      	ldr	r2, [sp, #8]
 8006ef6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006efa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006efe:	425a      	negs	r2, r3
 8006f00:	415a      	adcs	r2, r3
 8006f02:	602a      	str	r2, [r5, #0]
 8006f04:	e7ee      	b.n	8006ee4 <__swhatbuf_r+0x1c>
 8006f06:	2340      	movs	r3, #64	; 0x40
 8006f08:	2000      	movs	r0, #0
 8006f0a:	6023      	str	r3, [r4, #0]
 8006f0c:	b010      	add	sp, #64	; 0x40
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}

08006f10 <__smakebuf_r>:
 8006f10:	898b      	ldrh	r3, [r1, #12]
 8006f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f14:	079d      	lsls	r5, r3, #30
 8006f16:	4606      	mov	r6, r0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	d507      	bpl.n	8006f2c <__smakebuf_r+0x1c>
 8006f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	6123      	str	r3, [r4, #16]
 8006f24:	2301      	movs	r3, #1
 8006f26:	6163      	str	r3, [r4, #20]
 8006f28:	b002      	add	sp, #8
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	ab01      	add	r3, sp, #4
 8006f2e:	466a      	mov	r2, sp
 8006f30:	f7ff ffca 	bl	8006ec8 <__swhatbuf_r>
 8006f34:	9900      	ldr	r1, [sp, #0]
 8006f36:	4605      	mov	r5, r0
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f7fe f9c9 	bl	80052d0 <_malloc_r>
 8006f3e:	b948      	cbnz	r0, 8006f54 <__smakebuf_r+0x44>
 8006f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f44:	059a      	lsls	r2, r3, #22
 8006f46:	d4ef      	bmi.n	8006f28 <__smakebuf_r+0x18>
 8006f48:	f023 0303 	bic.w	r3, r3, #3
 8006f4c:	f043 0302 	orr.w	r3, r3, #2
 8006f50:	81a3      	strh	r3, [r4, #12]
 8006f52:	e7e3      	b.n	8006f1c <__smakebuf_r+0xc>
 8006f54:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <__smakebuf_r+0x7c>)
 8006f56:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	6020      	str	r0, [r4, #0]
 8006f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f60:	81a3      	strh	r3, [r4, #12]
 8006f62:	9b00      	ldr	r3, [sp, #0]
 8006f64:	6163      	str	r3, [r4, #20]
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	6120      	str	r0, [r4, #16]
 8006f6a:	b15b      	cbz	r3, 8006f84 <__smakebuf_r+0x74>
 8006f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f70:	4630      	mov	r0, r6
 8006f72:	f000 fca5 	bl	80078c0 <_isatty_r>
 8006f76:	b128      	cbz	r0, 8006f84 <__smakebuf_r+0x74>
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	f023 0303 	bic.w	r3, r3, #3
 8006f7e:	f043 0301 	orr.w	r3, r3, #1
 8006f82:	81a3      	strh	r3, [r4, #12]
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	431d      	orrs	r5, r3
 8006f88:	81a5      	strh	r5, [r4, #12]
 8006f8a:	e7cd      	b.n	8006f28 <__smakebuf_r+0x18>
 8006f8c:	08006d19 	.word	0x08006d19

08006f90 <__malloc_lock>:
 8006f90:	4770      	bx	lr

08006f92 <__malloc_unlock>:
 8006f92:	4770      	bx	lr

08006f94 <_Balloc>:
 8006f94:	b570      	push	{r4, r5, r6, lr}
 8006f96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f98:	4604      	mov	r4, r0
 8006f9a:	460e      	mov	r6, r1
 8006f9c:	b93d      	cbnz	r5, 8006fae <_Balloc+0x1a>
 8006f9e:	2010      	movs	r0, #16
 8006fa0:	f7fe f91e 	bl	80051e0 <malloc>
 8006fa4:	6260      	str	r0, [r4, #36]	; 0x24
 8006fa6:	6045      	str	r5, [r0, #4]
 8006fa8:	6085      	str	r5, [r0, #8]
 8006faa:	6005      	str	r5, [r0, #0]
 8006fac:	60c5      	str	r5, [r0, #12]
 8006fae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006fb0:	68eb      	ldr	r3, [r5, #12]
 8006fb2:	b183      	cbz	r3, 8006fd6 <_Balloc+0x42>
 8006fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006fbc:	b9b8      	cbnz	r0, 8006fee <_Balloc+0x5a>
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	fa01 f506 	lsl.w	r5, r1, r6
 8006fc4:	1d6a      	adds	r2, r5, #5
 8006fc6:	0092      	lsls	r2, r2, #2
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 fab3 	bl	8007534 <_calloc_r>
 8006fce:	b160      	cbz	r0, 8006fea <_Balloc+0x56>
 8006fd0:	6046      	str	r6, [r0, #4]
 8006fd2:	6085      	str	r5, [r0, #8]
 8006fd4:	e00e      	b.n	8006ff4 <_Balloc+0x60>
 8006fd6:	2221      	movs	r2, #33	; 0x21
 8006fd8:	2104      	movs	r1, #4
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 faaa 	bl	8007534 <_calloc_r>
 8006fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe2:	60e8      	str	r0, [r5, #12]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e4      	bne.n	8006fb4 <_Balloc+0x20>
 8006fea:	2000      	movs	r0, #0
 8006fec:	bd70      	pop	{r4, r5, r6, pc}
 8006fee:	6802      	ldr	r2, [r0, #0]
 8006ff0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	6103      	str	r3, [r0, #16]
 8006ff8:	60c3      	str	r3, [r0, #12]
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}

08006ffc <_Bfree>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007000:	4606      	mov	r6, r0
 8007002:	460d      	mov	r5, r1
 8007004:	b93c      	cbnz	r4, 8007016 <_Bfree+0x1a>
 8007006:	2010      	movs	r0, #16
 8007008:	f7fe f8ea 	bl	80051e0 <malloc>
 800700c:	6270      	str	r0, [r6, #36]	; 0x24
 800700e:	6044      	str	r4, [r0, #4]
 8007010:	6084      	str	r4, [r0, #8]
 8007012:	6004      	str	r4, [r0, #0]
 8007014:	60c4      	str	r4, [r0, #12]
 8007016:	b13d      	cbz	r5, 8007028 <_Bfree+0x2c>
 8007018:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800701a:	686a      	ldr	r2, [r5, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007022:	6029      	str	r1, [r5, #0]
 8007024:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007028:	bd70      	pop	{r4, r5, r6, pc}

0800702a <__multadd>:
 800702a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702e:	690d      	ldr	r5, [r1, #16]
 8007030:	461f      	mov	r7, r3
 8007032:	4606      	mov	r6, r0
 8007034:	460c      	mov	r4, r1
 8007036:	f101 0e14 	add.w	lr, r1, #20
 800703a:	2300      	movs	r3, #0
 800703c:	f8de 0000 	ldr.w	r0, [lr]
 8007040:	b281      	uxth	r1, r0
 8007042:	fb02 7101 	mla	r1, r2, r1, r7
 8007046:	0c0f      	lsrs	r7, r1, #16
 8007048:	0c00      	lsrs	r0, r0, #16
 800704a:	fb02 7000 	mla	r0, r2, r0, r7
 800704e:	b289      	uxth	r1, r1
 8007050:	3301      	adds	r3, #1
 8007052:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007056:	429d      	cmp	r5, r3
 8007058:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800705c:	f84e 1b04 	str.w	r1, [lr], #4
 8007060:	dcec      	bgt.n	800703c <__multadd+0x12>
 8007062:	b1d7      	cbz	r7, 800709a <__multadd+0x70>
 8007064:	68a3      	ldr	r3, [r4, #8]
 8007066:	429d      	cmp	r5, r3
 8007068:	db12      	blt.n	8007090 <__multadd+0x66>
 800706a:	6861      	ldr	r1, [r4, #4]
 800706c:	4630      	mov	r0, r6
 800706e:	3101      	adds	r1, #1
 8007070:	f7ff ff90 	bl	8006f94 <_Balloc>
 8007074:	6922      	ldr	r2, [r4, #16]
 8007076:	3202      	adds	r2, #2
 8007078:	f104 010c 	add.w	r1, r4, #12
 800707c:	4680      	mov	r8, r0
 800707e:	0092      	lsls	r2, r2, #2
 8007080:	300c      	adds	r0, #12
 8007082:	f7fe f8c4 	bl	800520e <memcpy>
 8007086:	4621      	mov	r1, r4
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff ffb7 	bl	8006ffc <_Bfree>
 800708e:	4644      	mov	r4, r8
 8007090:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007094:	3501      	adds	r5, #1
 8007096:	615f      	str	r7, [r3, #20]
 8007098:	6125      	str	r5, [r4, #16]
 800709a:	4620      	mov	r0, r4
 800709c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080070a0 <__hi0bits>:
 80070a0:	0c02      	lsrs	r2, r0, #16
 80070a2:	0412      	lsls	r2, r2, #16
 80070a4:	4603      	mov	r3, r0
 80070a6:	b9b2      	cbnz	r2, 80070d6 <__hi0bits+0x36>
 80070a8:	0403      	lsls	r3, r0, #16
 80070aa:	2010      	movs	r0, #16
 80070ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070b0:	bf04      	itt	eq
 80070b2:	021b      	lsleq	r3, r3, #8
 80070b4:	3008      	addeq	r0, #8
 80070b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80070ba:	bf04      	itt	eq
 80070bc:	011b      	lsleq	r3, r3, #4
 80070be:	3004      	addeq	r0, #4
 80070c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070c4:	bf04      	itt	eq
 80070c6:	009b      	lsleq	r3, r3, #2
 80070c8:	3002      	addeq	r0, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	db06      	blt.n	80070dc <__hi0bits+0x3c>
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	d503      	bpl.n	80070da <__hi0bits+0x3a>
 80070d2:	3001      	adds	r0, #1
 80070d4:	4770      	bx	lr
 80070d6:	2000      	movs	r0, #0
 80070d8:	e7e8      	b.n	80070ac <__hi0bits+0xc>
 80070da:	2020      	movs	r0, #32
 80070dc:	4770      	bx	lr

080070de <__lo0bits>:
 80070de:	6803      	ldr	r3, [r0, #0]
 80070e0:	f013 0207 	ands.w	r2, r3, #7
 80070e4:	4601      	mov	r1, r0
 80070e6:	d00b      	beq.n	8007100 <__lo0bits+0x22>
 80070e8:	07da      	lsls	r2, r3, #31
 80070ea:	d423      	bmi.n	8007134 <__lo0bits+0x56>
 80070ec:	0798      	lsls	r0, r3, #30
 80070ee:	bf49      	itett	mi
 80070f0:	085b      	lsrmi	r3, r3, #1
 80070f2:	089b      	lsrpl	r3, r3, #2
 80070f4:	2001      	movmi	r0, #1
 80070f6:	600b      	strmi	r3, [r1, #0]
 80070f8:	bf5c      	itt	pl
 80070fa:	600b      	strpl	r3, [r1, #0]
 80070fc:	2002      	movpl	r0, #2
 80070fe:	4770      	bx	lr
 8007100:	b298      	uxth	r0, r3
 8007102:	b9a8      	cbnz	r0, 8007130 <__lo0bits+0x52>
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	2010      	movs	r0, #16
 8007108:	f013 0fff 	tst.w	r3, #255	; 0xff
 800710c:	bf04      	itt	eq
 800710e:	0a1b      	lsreq	r3, r3, #8
 8007110:	3008      	addeq	r0, #8
 8007112:	071a      	lsls	r2, r3, #28
 8007114:	bf04      	itt	eq
 8007116:	091b      	lsreq	r3, r3, #4
 8007118:	3004      	addeq	r0, #4
 800711a:	079a      	lsls	r2, r3, #30
 800711c:	bf04      	itt	eq
 800711e:	089b      	lsreq	r3, r3, #2
 8007120:	3002      	addeq	r0, #2
 8007122:	07da      	lsls	r2, r3, #31
 8007124:	d402      	bmi.n	800712c <__lo0bits+0x4e>
 8007126:	085b      	lsrs	r3, r3, #1
 8007128:	d006      	beq.n	8007138 <__lo0bits+0x5a>
 800712a:	3001      	adds	r0, #1
 800712c:	600b      	str	r3, [r1, #0]
 800712e:	4770      	bx	lr
 8007130:	4610      	mov	r0, r2
 8007132:	e7e9      	b.n	8007108 <__lo0bits+0x2a>
 8007134:	2000      	movs	r0, #0
 8007136:	4770      	bx	lr
 8007138:	2020      	movs	r0, #32
 800713a:	4770      	bx	lr

0800713c <__i2b>:
 800713c:	b510      	push	{r4, lr}
 800713e:	460c      	mov	r4, r1
 8007140:	2101      	movs	r1, #1
 8007142:	f7ff ff27 	bl	8006f94 <_Balloc>
 8007146:	2201      	movs	r2, #1
 8007148:	6144      	str	r4, [r0, #20]
 800714a:	6102      	str	r2, [r0, #16]
 800714c:	bd10      	pop	{r4, pc}

0800714e <__multiply>:
 800714e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007152:	4614      	mov	r4, r2
 8007154:	690a      	ldr	r2, [r1, #16]
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	429a      	cmp	r2, r3
 800715a:	bfb8      	it	lt
 800715c:	460b      	movlt	r3, r1
 800715e:	4689      	mov	r9, r1
 8007160:	bfbc      	itt	lt
 8007162:	46a1      	movlt	r9, r4
 8007164:	461c      	movlt	r4, r3
 8007166:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800716a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800716e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007172:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007176:	eb07 060a 	add.w	r6, r7, sl
 800717a:	429e      	cmp	r6, r3
 800717c:	bfc8      	it	gt
 800717e:	3101      	addgt	r1, #1
 8007180:	f7ff ff08 	bl	8006f94 <_Balloc>
 8007184:	f100 0514 	add.w	r5, r0, #20
 8007188:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800718c:	462b      	mov	r3, r5
 800718e:	2200      	movs	r2, #0
 8007190:	4543      	cmp	r3, r8
 8007192:	d316      	bcc.n	80071c2 <__multiply+0x74>
 8007194:	f104 0214 	add.w	r2, r4, #20
 8007198:	f109 0114 	add.w	r1, r9, #20
 800719c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80071a0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80071a4:	9301      	str	r3, [sp, #4]
 80071a6:	9c01      	ldr	r4, [sp, #4]
 80071a8:	4294      	cmp	r4, r2
 80071aa:	4613      	mov	r3, r2
 80071ac:	d80c      	bhi.n	80071c8 <__multiply+0x7a>
 80071ae:	2e00      	cmp	r6, #0
 80071b0:	dd03      	ble.n	80071ba <__multiply+0x6c>
 80071b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d054      	beq.n	8007264 <__multiply+0x116>
 80071ba:	6106      	str	r6, [r0, #16]
 80071bc:	b003      	add	sp, #12
 80071be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c2:	f843 2b04 	str.w	r2, [r3], #4
 80071c6:	e7e3      	b.n	8007190 <__multiply+0x42>
 80071c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80071cc:	3204      	adds	r2, #4
 80071ce:	f1ba 0f00 	cmp.w	sl, #0
 80071d2:	d020      	beq.n	8007216 <__multiply+0xc8>
 80071d4:	46ae      	mov	lr, r5
 80071d6:	4689      	mov	r9, r1
 80071d8:	f04f 0c00 	mov.w	ip, #0
 80071dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80071e0:	f8be b000 	ldrh.w	fp, [lr]
 80071e4:	b2a3      	uxth	r3, r4
 80071e6:	fb0a b303 	mla	r3, sl, r3, fp
 80071ea:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80071ee:	f8de 4000 	ldr.w	r4, [lr]
 80071f2:	4463      	add	r3, ip
 80071f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80071f8:	fb0a c40b 	mla	r4, sl, fp, ip
 80071fc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007200:	b29b      	uxth	r3, r3
 8007202:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007206:	454f      	cmp	r7, r9
 8007208:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800720c:	f84e 3b04 	str.w	r3, [lr], #4
 8007210:	d8e4      	bhi.n	80071dc <__multiply+0x8e>
 8007212:	f8ce c000 	str.w	ip, [lr]
 8007216:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800721a:	f1b9 0f00 	cmp.w	r9, #0
 800721e:	d01f      	beq.n	8007260 <__multiply+0x112>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	46ae      	mov	lr, r5
 8007224:	468c      	mov	ip, r1
 8007226:	f04f 0a00 	mov.w	sl, #0
 800722a:	f8bc 4000 	ldrh.w	r4, [ip]
 800722e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007232:	fb09 b404 	mla	r4, r9, r4, fp
 8007236:	44a2      	add	sl, r4
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800723e:	f84e 3b04 	str.w	r3, [lr], #4
 8007242:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007246:	f8be 4000 	ldrh.w	r4, [lr]
 800724a:	0c1b      	lsrs	r3, r3, #16
 800724c:	fb09 4303 	mla	r3, r9, r3, r4
 8007250:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007254:	4567      	cmp	r7, ip
 8007256:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800725a:	d8e6      	bhi.n	800722a <__multiply+0xdc>
 800725c:	f8ce 3000 	str.w	r3, [lr]
 8007260:	3504      	adds	r5, #4
 8007262:	e7a0      	b.n	80071a6 <__multiply+0x58>
 8007264:	3e01      	subs	r6, #1
 8007266:	e7a2      	b.n	80071ae <__multiply+0x60>

08007268 <__pow5mult>:
 8007268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800726c:	4615      	mov	r5, r2
 800726e:	f012 0203 	ands.w	r2, r2, #3
 8007272:	4606      	mov	r6, r0
 8007274:	460f      	mov	r7, r1
 8007276:	d007      	beq.n	8007288 <__pow5mult+0x20>
 8007278:	3a01      	subs	r2, #1
 800727a:	4c21      	ldr	r4, [pc, #132]	; (8007300 <__pow5mult+0x98>)
 800727c:	2300      	movs	r3, #0
 800727e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007282:	f7ff fed2 	bl	800702a <__multadd>
 8007286:	4607      	mov	r7, r0
 8007288:	10ad      	asrs	r5, r5, #2
 800728a:	d035      	beq.n	80072f8 <__pow5mult+0x90>
 800728c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800728e:	b93c      	cbnz	r4, 80072a0 <__pow5mult+0x38>
 8007290:	2010      	movs	r0, #16
 8007292:	f7fd ffa5 	bl	80051e0 <malloc>
 8007296:	6270      	str	r0, [r6, #36]	; 0x24
 8007298:	6044      	str	r4, [r0, #4]
 800729a:	6084      	str	r4, [r0, #8]
 800729c:	6004      	str	r4, [r0, #0]
 800729e:	60c4      	str	r4, [r0, #12]
 80072a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072a8:	b94c      	cbnz	r4, 80072be <__pow5mult+0x56>
 80072aa:	f240 2171 	movw	r1, #625	; 0x271
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7ff ff44 	bl	800713c <__i2b>
 80072b4:	2300      	movs	r3, #0
 80072b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80072ba:	4604      	mov	r4, r0
 80072bc:	6003      	str	r3, [r0, #0]
 80072be:	f04f 0800 	mov.w	r8, #0
 80072c2:	07eb      	lsls	r3, r5, #31
 80072c4:	d50a      	bpl.n	80072dc <__pow5mult+0x74>
 80072c6:	4639      	mov	r1, r7
 80072c8:	4622      	mov	r2, r4
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff ff3f 	bl	800714e <__multiply>
 80072d0:	4639      	mov	r1, r7
 80072d2:	4681      	mov	r9, r0
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7ff fe91 	bl	8006ffc <_Bfree>
 80072da:	464f      	mov	r7, r9
 80072dc:	106d      	asrs	r5, r5, #1
 80072de:	d00b      	beq.n	80072f8 <__pow5mult+0x90>
 80072e0:	6820      	ldr	r0, [r4, #0]
 80072e2:	b938      	cbnz	r0, 80072f4 <__pow5mult+0x8c>
 80072e4:	4622      	mov	r2, r4
 80072e6:	4621      	mov	r1, r4
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff ff30 	bl	800714e <__multiply>
 80072ee:	6020      	str	r0, [r4, #0]
 80072f0:	f8c0 8000 	str.w	r8, [r0]
 80072f4:	4604      	mov	r4, r0
 80072f6:	e7e4      	b.n	80072c2 <__pow5mult+0x5a>
 80072f8:	4638      	mov	r0, r7
 80072fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072fe:	bf00      	nop
 8007300:	08008380 	.word	0x08008380

08007304 <__lshift>:
 8007304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007308:	460c      	mov	r4, r1
 800730a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800730e:	6923      	ldr	r3, [r4, #16]
 8007310:	6849      	ldr	r1, [r1, #4]
 8007312:	eb0a 0903 	add.w	r9, sl, r3
 8007316:	68a3      	ldr	r3, [r4, #8]
 8007318:	4607      	mov	r7, r0
 800731a:	4616      	mov	r6, r2
 800731c:	f109 0501 	add.w	r5, r9, #1
 8007320:	42ab      	cmp	r3, r5
 8007322:	db31      	blt.n	8007388 <__lshift+0x84>
 8007324:	4638      	mov	r0, r7
 8007326:	f7ff fe35 	bl	8006f94 <_Balloc>
 800732a:	2200      	movs	r2, #0
 800732c:	4680      	mov	r8, r0
 800732e:	f100 0314 	add.w	r3, r0, #20
 8007332:	4611      	mov	r1, r2
 8007334:	4552      	cmp	r2, sl
 8007336:	db2a      	blt.n	800738e <__lshift+0x8a>
 8007338:	6920      	ldr	r0, [r4, #16]
 800733a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800733e:	f104 0114 	add.w	r1, r4, #20
 8007342:	f016 021f 	ands.w	r2, r6, #31
 8007346:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800734a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800734e:	d022      	beq.n	8007396 <__lshift+0x92>
 8007350:	f1c2 0c20 	rsb	ip, r2, #32
 8007354:	2000      	movs	r0, #0
 8007356:	680e      	ldr	r6, [r1, #0]
 8007358:	4096      	lsls	r6, r2
 800735a:	4330      	orrs	r0, r6
 800735c:	f843 0b04 	str.w	r0, [r3], #4
 8007360:	f851 0b04 	ldr.w	r0, [r1], #4
 8007364:	458e      	cmp	lr, r1
 8007366:	fa20 f00c 	lsr.w	r0, r0, ip
 800736a:	d8f4      	bhi.n	8007356 <__lshift+0x52>
 800736c:	6018      	str	r0, [r3, #0]
 800736e:	b108      	cbz	r0, 8007374 <__lshift+0x70>
 8007370:	f109 0502 	add.w	r5, r9, #2
 8007374:	3d01      	subs	r5, #1
 8007376:	4638      	mov	r0, r7
 8007378:	f8c8 5010 	str.w	r5, [r8, #16]
 800737c:	4621      	mov	r1, r4
 800737e:	f7ff fe3d 	bl	8006ffc <_Bfree>
 8007382:	4640      	mov	r0, r8
 8007384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007388:	3101      	adds	r1, #1
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	e7c8      	b.n	8007320 <__lshift+0x1c>
 800738e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007392:	3201      	adds	r2, #1
 8007394:	e7ce      	b.n	8007334 <__lshift+0x30>
 8007396:	3b04      	subs	r3, #4
 8007398:	f851 2b04 	ldr.w	r2, [r1], #4
 800739c:	f843 2f04 	str.w	r2, [r3, #4]!
 80073a0:	458e      	cmp	lr, r1
 80073a2:	d8f9      	bhi.n	8007398 <__lshift+0x94>
 80073a4:	e7e6      	b.n	8007374 <__lshift+0x70>

080073a6 <__mcmp>:
 80073a6:	6903      	ldr	r3, [r0, #16]
 80073a8:	690a      	ldr	r2, [r1, #16]
 80073aa:	1a9b      	subs	r3, r3, r2
 80073ac:	b530      	push	{r4, r5, lr}
 80073ae:	d10c      	bne.n	80073ca <__mcmp+0x24>
 80073b0:	0092      	lsls	r2, r2, #2
 80073b2:	3014      	adds	r0, #20
 80073b4:	3114      	adds	r1, #20
 80073b6:	1884      	adds	r4, r0, r2
 80073b8:	4411      	add	r1, r2
 80073ba:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073be:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073c2:	4295      	cmp	r5, r2
 80073c4:	d003      	beq.n	80073ce <__mcmp+0x28>
 80073c6:	d305      	bcc.n	80073d4 <__mcmp+0x2e>
 80073c8:	2301      	movs	r3, #1
 80073ca:	4618      	mov	r0, r3
 80073cc:	bd30      	pop	{r4, r5, pc}
 80073ce:	42a0      	cmp	r0, r4
 80073d0:	d3f3      	bcc.n	80073ba <__mcmp+0x14>
 80073d2:	e7fa      	b.n	80073ca <__mcmp+0x24>
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	e7f7      	b.n	80073ca <__mcmp+0x24>

080073da <__mdiff>:
 80073da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073de:	460d      	mov	r5, r1
 80073e0:	4607      	mov	r7, r0
 80073e2:	4611      	mov	r1, r2
 80073e4:	4628      	mov	r0, r5
 80073e6:	4614      	mov	r4, r2
 80073e8:	f7ff ffdd 	bl	80073a6 <__mcmp>
 80073ec:	1e06      	subs	r6, r0, #0
 80073ee:	d108      	bne.n	8007402 <__mdiff+0x28>
 80073f0:	4631      	mov	r1, r6
 80073f2:	4638      	mov	r0, r7
 80073f4:	f7ff fdce 	bl	8006f94 <_Balloc>
 80073f8:	2301      	movs	r3, #1
 80073fa:	6103      	str	r3, [r0, #16]
 80073fc:	6146      	str	r6, [r0, #20]
 80073fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007402:	bfa4      	itt	ge
 8007404:	4623      	movge	r3, r4
 8007406:	462c      	movge	r4, r5
 8007408:	4638      	mov	r0, r7
 800740a:	6861      	ldr	r1, [r4, #4]
 800740c:	bfa6      	itte	ge
 800740e:	461d      	movge	r5, r3
 8007410:	2600      	movge	r6, #0
 8007412:	2601      	movlt	r6, #1
 8007414:	f7ff fdbe 	bl	8006f94 <_Balloc>
 8007418:	692b      	ldr	r3, [r5, #16]
 800741a:	60c6      	str	r6, [r0, #12]
 800741c:	6926      	ldr	r6, [r4, #16]
 800741e:	f105 0914 	add.w	r9, r5, #20
 8007422:	f104 0214 	add.w	r2, r4, #20
 8007426:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800742a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800742e:	f100 0514 	add.w	r5, r0, #20
 8007432:	f04f 0c00 	mov.w	ip, #0
 8007436:	f852 ab04 	ldr.w	sl, [r2], #4
 800743a:	f859 4b04 	ldr.w	r4, [r9], #4
 800743e:	fa1c f18a 	uxtah	r1, ip, sl
 8007442:	b2a3      	uxth	r3, r4
 8007444:	1ac9      	subs	r1, r1, r3
 8007446:	0c23      	lsrs	r3, r4, #16
 8007448:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800744c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007450:	b289      	uxth	r1, r1
 8007452:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007456:	45c8      	cmp	r8, r9
 8007458:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800745c:	4696      	mov	lr, r2
 800745e:	f845 3b04 	str.w	r3, [r5], #4
 8007462:	d8e8      	bhi.n	8007436 <__mdiff+0x5c>
 8007464:	45be      	cmp	lr, r7
 8007466:	d305      	bcc.n	8007474 <__mdiff+0x9a>
 8007468:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800746c:	b18b      	cbz	r3, 8007492 <__mdiff+0xb8>
 800746e:	6106      	str	r6, [r0, #16]
 8007470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007474:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007478:	fa1c f381 	uxtah	r3, ip, r1
 800747c:	141a      	asrs	r2, r3, #16
 800747e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007482:	b29b      	uxth	r3, r3
 8007484:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007488:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800748c:	f845 3b04 	str.w	r3, [r5], #4
 8007490:	e7e8      	b.n	8007464 <__mdiff+0x8a>
 8007492:	3e01      	subs	r6, #1
 8007494:	e7e8      	b.n	8007468 <__mdiff+0x8e>

08007496 <__d2b>:
 8007496:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800749a:	460e      	mov	r6, r1
 800749c:	2101      	movs	r1, #1
 800749e:	ec59 8b10 	vmov	r8, r9, d0
 80074a2:	4615      	mov	r5, r2
 80074a4:	f7ff fd76 	bl	8006f94 <_Balloc>
 80074a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80074ac:	4607      	mov	r7, r0
 80074ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074b2:	bb34      	cbnz	r4, 8007502 <__d2b+0x6c>
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	f1b8 0f00 	cmp.w	r8, #0
 80074ba:	d027      	beq.n	800750c <__d2b+0x76>
 80074bc:	a802      	add	r0, sp, #8
 80074be:	f840 8d08 	str.w	r8, [r0, #-8]!
 80074c2:	f7ff fe0c 	bl	80070de <__lo0bits>
 80074c6:	9900      	ldr	r1, [sp, #0]
 80074c8:	b1f0      	cbz	r0, 8007508 <__d2b+0x72>
 80074ca:	9a01      	ldr	r2, [sp, #4]
 80074cc:	f1c0 0320 	rsb	r3, r0, #32
 80074d0:	fa02 f303 	lsl.w	r3, r2, r3
 80074d4:	430b      	orrs	r3, r1
 80074d6:	40c2      	lsrs	r2, r0
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	9201      	str	r2, [sp, #4]
 80074dc:	9b01      	ldr	r3, [sp, #4]
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bf14      	ite	ne
 80074e4:	2102      	movne	r1, #2
 80074e6:	2101      	moveq	r1, #1
 80074e8:	6139      	str	r1, [r7, #16]
 80074ea:	b1c4      	cbz	r4, 800751e <__d2b+0x88>
 80074ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80074f0:	4404      	add	r4, r0
 80074f2:	6034      	str	r4, [r6, #0]
 80074f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074f8:	6028      	str	r0, [r5, #0]
 80074fa:	4638      	mov	r0, r7
 80074fc:	b003      	add	sp, #12
 80074fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007506:	e7d5      	b.n	80074b4 <__d2b+0x1e>
 8007508:	6179      	str	r1, [r7, #20]
 800750a:	e7e7      	b.n	80074dc <__d2b+0x46>
 800750c:	a801      	add	r0, sp, #4
 800750e:	f7ff fde6 	bl	80070de <__lo0bits>
 8007512:	9b01      	ldr	r3, [sp, #4]
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	2101      	movs	r1, #1
 8007518:	6139      	str	r1, [r7, #16]
 800751a:	3020      	adds	r0, #32
 800751c:	e7e5      	b.n	80074ea <__d2b+0x54>
 800751e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007522:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007526:	6030      	str	r0, [r6, #0]
 8007528:	6918      	ldr	r0, [r3, #16]
 800752a:	f7ff fdb9 	bl	80070a0 <__hi0bits>
 800752e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007532:	e7e1      	b.n	80074f8 <__d2b+0x62>

08007534 <_calloc_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	fb02 f401 	mul.w	r4, r2, r1
 800753a:	4621      	mov	r1, r4
 800753c:	f7fd fec8 	bl	80052d0 <_malloc_r>
 8007540:	4605      	mov	r5, r0
 8007542:	b118      	cbz	r0, 800754c <_calloc_r+0x18>
 8007544:	4622      	mov	r2, r4
 8007546:	2100      	movs	r1, #0
 8007548:	f7fd fe6c 	bl	8005224 <memset>
 800754c:	4628      	mov	r0, r5
 800754e:	bd38      	pop	{r3, r4, r5, pc}

08007550 <__sfputc_r>:
 8007550:	6893      	ldr	r3, [r2, #8]
 8007552:	3b01      	subs	r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	b410      	push	{r4}
 8007558:	6093      	str	r3, [r2, #8]
 800755a:	da09      	bge.n	8007570 <__sfputc_r+0x20>
 800755c:	6994      	ldr	r4, [r2, #24]
 800755e:	42a3      	cmp	r3, r4
 8007560:	db02      	blt.n	8007568 <__sfputc_r+0x18>
 8007562:	b2cb      	uxtb	r3, r1
 8007564:	2b0a      	cmp	r3, #10
 8007566:	d103      	bne.n	8007570 <__sfputc_r+0x20>
 8007568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800756c:	f7fe bc06 	b.w	8005d7c <__swbuf_r>
 8007570:	6813      	ldr	r3, [r2, #0]
 8007572:	1c58      	adds	r0, r3, #1
 8007574:	6010      	str	r0, [r2, #0]
 8007576:	7019      	strb	r1, [r3, #0]
 8007578:	b2c8      	uxtb	r0, r1
 800757a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800757e:	4770      	bx	lr

08007580 <__sfputs_r>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	4606      	mov	r6, r0
 8007584:	460f      	mov	r7, r1
 8007586:	4614      	mov	r4, r2
 8007588:	18d5      	adds	r5, r2, r3
 800758a:	42ac      	cmp	r4, r5
 800758c:	d101      	bne.n	8007592 <__sfputs_r+0x12>
 800758e:	2000      	movs	r0, #0
 8007590:	e007      	b.n	80075a2 <__sfputs_r+0x22>
 8007592:	463a      	mov	r2, r7
 8007594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff ffd9 	bl	8007550 <__sfputc_r>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	d1f3      	bne.n	800758a <__sfputs_r+0xa>
 80075a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075a4 <_vfiprintf_r>:
 80075a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a8:	b09d      	sub	sp, #116	; 0x74
 80075aa:	460c      	mov	r4, r1
 80075ac:	4617      	mov	r7, r2
 80075ae:	9303      	str	r3, [sp, #12]
 80075b0:	4606      	mov	r6, r0
 80075b2:	b118      	cbz	r0, 80075bc <_vfiprintf_r+0x18>
 80075b4:	6983      	ldr	r3, [r0, #24]
 80075b6:	b90b      	cbnz	r3, 80075bc <_vfiprintf_r+0x18>
 80075b8:	f7ff fbee 	bl	8006d98 <__sinit>
 80075bc:	4b7c      	ldr	r3, [pc, #496]	; (80077b0 <_vfiprintf_r+0x20c>)
 80075be:	429c      	cmp	r4, r3
 80075c0:	d157      	bne.n	8007672 <_vfiprintf_r+0xce>
 80075c2:	6874      	ldr	r4, [r6, #4]
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	0718      	lsls	r0, r3, #28
 80075c8:	d55d      	bpl.n	8007686 <_vfiprintf_r+0xe2>
 80075ca:	6923      	ldr	r3, [r4, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d05a      	beq.n	8007686 <_vfiprintf_r+0xe2>
 80075d0:	2300      	movs	r3, #0
 80075d2:	9309      	str	r3, [sp, #36]	; 0x24
 80075d4:	2320      	movs	r3, #32
 80075d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075da:	2330      	movs	r3, #48	; 0x30
 80075dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e0:	f04f 0b01 	mov.w	fp, #1
 80075e4:	46b8      	mov	r8, r7
 80075e6:	4645      	mov	r5, r8
 80075e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d155      	bne.n	800769c <_vfiprintf_r+0xf8>
 80075f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80075f4:	d00b      	beq.n	800760e <_vfiprintf_r+0x6a>
 80075f6:	4653      	mov	r3, sl
 80075f8:	463a      	mov	r2, r7
 80075fa:	4621      	mov	r1, r4
 80075fc:	4630      	mov	r0, r6
 80075fe:	f7ff ffbf 	bl	8007580 <__sfputs_r>
 8007602:	3001      	adds	r0, #1
 8007604:	f000 80c4 	beq.w	8007790 <_vfiprintf_r+0x1ec>
 8007608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760a:	4453      	add	r3, sl
 800760c:	9309      	str	r3, [sp, #36]	; 0x24
 800760e:	f898 3000 	ldrb.w	r3, [r8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 80bc 	beq.w	8007790 <_vfiprintf_r+0x1ec>
 8007618:	2300      	movs	r3, #0
 800761a:	f04f 32ff 	mov.w	r2, #4294967295
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	9307      	str	r3, [sp, #28]
 8007622:	9205      	str	r2, [sp, #20]
 8007624:	9306      	str	r3, [sp, #24]
 8007626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800762a:	931a      	str	r3, [sp, #104]	; 0x68
 800762c:	2205      	movs	r2, #5
 800762e:	7829      	ldrb	r1, [r5, #0]
 8007630:	4860      	ldr	r0, [pc, #384]	; (80077b4 <_vfiprintf_r+0x210>)
 8007632:	f7f8 fde5 	bl	8000200 <memchr>
 8007636:	f105 0801 	add.w	r8, r5, #1
 800763a:	9b04      	ldr	r3, [sp, #16]
 800763c:	2800      	cmp	r0, #0
 800763e:	d131      	bne.n	80076a4 <_vfiprintf_r+0x100>
 8007640:	06d9      	lsls	r1, r3, #27
 8007642:	bf44      	itt	mi
 8007644:	2220      	movmi	r2, #32
 8007646:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800764a:	071a      	lsls	r2, r3, #28
 800764c:	bf44      	itt	mi
 800764e:	222b      	movmi	r2, #43	; 0x2b
 8007650:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007654:	782a      	ldrb	r2, [r5, #0]
 8007656:	2a2a      	cmp	r2, #42	; 0x2a
 8007658:	d02c      	beq.n	80076b4 <_vfiprintf_r+0x110>
 800765a:	9a07      	ldr	r2, [sp, #28]
 800765c:	2100      	movs	r1, #0
 800765e:	200a      	movs	r0, #10
 8007660:	46a8      	mov	r8, r5
 8007662:	3501      	adds	r5, #1
 8007664:	f898 3000 	ldrb.w	r3, [r8]
 8007668:	3b30      	subs	r3, #48	; 0x30
 800766a:	2b09      	cmp	r3, #9
 800766c:	d96d      	bls.n	800774a <_vfiprintf_r+0x1a6>
 800766e:	b371      	cbz	r1, 80076ce <_vfiprintf_r+0x12a>
 8007670:	e026      	b.n	80076c0 <_vfiprintf_r+0x11c>
 8007672:	4b51      	ldr	r3, [pc, #324]	; (80077b8 <_vfiprintf_r+0x214>)
 8007674:	429c      	cmp	r4, r3
 8007676:	d101      	bne.n	800767c <_vfiprintf_r+0xd8>
 8007678:	68b4      	ldr	r4, [r6, #8]
 800767a:	e7a3      	b.n	80075c4 <_vfiprintf_r+0x20>
 800767c:	4b4f      	ldr	r3, [pc, #316]	; (80077bc <_vfiprintf_r+0x218>)
 800767e:	429c      	cmp	r4, r3
 8007680:	bf08      	it	eq
 8007682:	68f4      	ldreq	r4, [r6, #12]
 8007684:	e79e      	b.n	80075c4 <_vfiprintf_r+0x20>
 8007686:	4621      	mov	r1, r4
 8007688:	4630      	mov	r0, r6
 800768a:	f7fe fbc9 	bl	8005e20 <__swsetup_r>
 800768e:	2800      	cmp	r0, #0
 8007690:	d09e      	beq.n	80075d0 <_vfiprintf_r+0x2c>
 8007692:	f04f 30ff 	mov.w	r0, #4294967295
 8007696:	b01d      	add	sp, #116	; 0x74
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769c:	2b25      	cmp	r3, #37	; 0x25
 800769e:	d0a7      	beq.n	80075f0 <_vfiprintf_r+0x4c>
 80076a0:	46a8      	mov	r8, r5
 80076a2:	e7a0      	b.n	80075e6 <_vfiprintf_r+0x42>
 80076a4:	4a43      	ldr	r2, [pc, #268]	; (80077b4 <_vfiprintf_r+0x210>)
 80076a6:	1a80      	subs	r0, r0, r2
 80076a8:	fa0b f000 	lsl.w	r0, fp, r0
 80076ac:	4318      	orrs	r0, r3
 80076ae:	9004      	str	r0, [sp, #16]
 80076b0:	4645      	mov	r5, r8
 80076b2:	e7bb      	b.n	800762c <_vfiprintf_r+0x88>
 80076b4:	9a03      	ldr	r2, [sp, #12]
 80076b6:	1d11      	adds	r1, r2, #4
 80076b8:	6812      	ldr	r2, [r2, #0]
 80076ba:	9103      	str	r1, [sp, #12]
 80076bc:	2a00      	cmp	r2, #0
 80076be:	db01      	blt.n	80076c4 <_vfiprintf_r+0x120>
 80076c0:	9207      	str	r2, [sp, #28]
 80076c2:	e004      	b.n	80076ce <_vfiprintf_r+0x12a>
 80076c4:	4252      	negs	r2, r2
 80076c6:	f043 0302 	orr.w	r3, r3, #2
 80076ca:	9207      	str	r2, [sp, #28]
 80076cc:	9304      	str	r3, [sp, #16]
 80076ce:	f898 3000 	ldrb.w	r3, [r8]
 80076d2:	2b2e      	cmp	r3, #46	; 0x2e
 80076d4:	d110      	bne.n	80076f8 <_vfiprintf_r+0x154>
 80076d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80076da:	2b2a      	cmp	r3, #42	; 0x2a
 80076dc:	f108 0101 	add.w	r1, r8, #1
 80076e0:	d137      	bne.n	8007752 <_vfiprintf_r+0x1ae>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	1d1a      	adds	r2, r3, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	9203      	str	r2, [sp, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfb8      	it	lt
 80076ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80076f2:	f108 0802 	add.w	r8, r8, #2
 80076f6:	9305      	str	r3, [sp, #20]
 80076f8:	4d31      	ldr	r5, [pc, #196]	; (80077c0 <_vfiprintf_r+0x21c>)
 80076fa:	f898 1000 	ldrb.w	r1, [r8]
 80076fe:	2203      	movs	r2, #3
 8007700:	4628      	mov	r0, r5
 8007702:	f7f8 fd7d 	bl	8000200 <memchr>
 8007706:	b140      	cbz	r0, 800771a <_vfiprintf_r+0x176>
 8007708:	2340      	movs	r3, #64	; 0x40
 800770a:	1b40      	subs	r0, r0, r5
 800770c:	fa03 f000 	lsl.w	r0, r3, r0
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	4303      	orrs	r3, r0
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	f108 0801 	add.w	r8, r8, #1
 800771a:	f898 1000 	ldrb.w	r1, [r8]
 800771e:	4829      	ldr	r0, [pc, #164]	; (80077c4 <_vfiprintf_r+0x220>)
 8007720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007724:	2206      	movs	r2, #6
 8007726:	f108 0701 	add.w	r7, r8, #1
 800772a:	f7f8 fd69 	bl	8000200 <memchr>
 800772e:	2800      	cmp	r0, #0
 8007730:	d034      	beq.n	800779c <_vfiprintf_r+0x1f8>
 8007732:	4b25      	ldr	r3, [pc, #148]	; (80077c8 <_vfiprintf_r+0x224>)
 8007734:	bb03      	cbnz	r3, 8007778 <_vfiprintf_r+0x1d4>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	3307      	adds	r3, #7
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	3308      	adds	r3, #8
 8007740:	9303      	str	r3, [sp, #12]
 8007742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007744:	444b      	add	r3, r9
 8007746:	9309      	str	r3, [sp, #36]	; 0x24
 8007748:	e74c      	b.n	80075e4 <_vfiprintf_r+0x40>
 800774a:	fb00 3202 	mla	r2, r0, r2, r3
 800774e:	2101      	movs	r1, #1
 8007750:	e786      	b.n	8007660 <_vfiprintf_r+0xbc>
 8007752:	2300      	movs	r3, #0
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	4618      	mov	r0, r3
 8007758:	250a      	movs	r5, #10
 800775a:	4688      	mov	r8, r1
 800775c:	3101      	adds	r1, #1
 800775e:	f898 2000 	ldrb.w	r2, [r8]
 8007762:	3a30      	subs	r2, #48	; 0x30
 8007764:	2a09      	cmp	r2, #9
 8007766:	d903      	bls.n	8007770 <_vfiprintf_r+0x1cc>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0c5      	beq.n	80076f8 <_vfiprintf_r+0x154>
 800776c:	9005      	str	r0, [sp, #20]
 800776e:	e7c3      	b.n	80076f8 <_vfiprintf_r+0x154>
 8007770:	fb05 2000 	mla	r0, r5, r0, r2
 8007774:	2301      	movs	r3, #1
 8007776:	e7f0      	b.n	800775a <_vfiprintf_r+0x1b6>
 8007778:	ab03      	add	r3, sp, #12
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	4622      	mov	r2, r4
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <_vfiprintf_r+0x228>)
 8007780:	a904      	add	r1, sp, #16
 8007782:	4630      	mov	r0, r6
 8007784:	f7fd fe98 	bl	80054b8 <_printf_float>
 8007788:	f1b0 3fff 	cmp.w	r0, #4294967295
 800778c:	4681      	mov	r9, r0
 800778e:	d1d8      	bne.n	8007742 <_vfiprintf_r+0x19e>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	065b      	lsls	r3, r3, #25
 8007794:	f53f af7d 	bmi.w	8007692 <_vfiprintf_r+0xee>
 8007798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800779a:	e77c      	b.n	8007696 <_vfiprintf_r+0xf2>
 800779c:	ab03      	add	r3, sp, #12
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	4622      	mov	r2, r4
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <_vfiprintf_r+0x228>)
 80077a4:	a904      	add	r1, sp, #16
 80077a6:	4630      	mov	r0, r6
 80077a8:	f7fe f93c 	bl	8005a24 <_printf_i>
 80077ac:	e7ec      	b.n	8007788 <_vfiprintf_r+0x1e4>
 80077ae:	bf00      	nop
 80077b0:	0800824c 	.word	0x0800824c
 80077b4:	0800838c 	.word	0x0800838c
 80077b8:	0800826c 	.word	0x0800826c
 80077bc:	0800822c 	.word	0x0800822c
 80077c0:	08008392 	.word	0x08008392
 80077c4:	08008396 	.word	0x08008396
 80077c8:	080054b9 	.word	0x080054b9
 80077cc:	08007581 	.word	0x08007581

080077d0 <__sread>:
 80077d0:	b510      	push	{r4, lr}
 80077d2:	460c      	mov	r4, r1
 80077d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d8:	f000 f8a6 	bl	8007928 <_read_r>
 80077dc:	2800      	cmp	r0, #0
 80077de:	bfab      	itete	ge
 80077e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077e2:	89a3      	ldrhlt	r3, [r4, #12]
 80077e4:	181b      	addge	r3, r3, r0
 80077e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077ea:	bfac      	ite	ge
 80077ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80077ee:	81a3      	strhlt	r3, [r4, #12]
 80077f0:	bd10      	pop	{r4, pc}

080077f2 <__swrite>:
 80077f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f6:	461f      	mov	r7, r3
 80077f8:	898b      	ldrh	r3, [r1, #12]
 80077fa:	05db      	lsls	r3, r3, #23
 80077fc:	4605      	mov	r5, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	4616      	mov	r6, r2
 8007802:	d505      	bpl.n	8007810 <__swrite+0x1e>
 8007804:	2302      	movs	r3, #2
 8007806:	2200      	movs	r2, #0
 8007808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800780c:	f000 f868 	bl	80078e0 <_lseek_r>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	4628      	mov	r0, r5
 8007822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007826:	f000 b817 	b.w	8007858 <_write_r>

0800782a <__sseek>:
 800782a:	b510      	push	{r4, lr}
 800782c:	460c      	mov	r4, r1
 800782e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007832:	f000 f855 	bl	80078e0 <_lseek_r>
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	bf15      	itete	ne
 800783c:	6560      	strne	r0, [r4, #84]	; 0x54
 800783e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007846:	81a3      	strheq	r3, [r4, #12]
 8007848:	bf18      	it	ne
 800784a:	81a3      	strhne	r3, [r4, #12]
 800784c:	bd10      	pop	{r4, pc}

0800784e <__sclose>:
 800784e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007852:	f000 b813 	b.w	800787c <_close_r>
	...

08007858 <_write_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4c07      	ldr	r4, [pc, #28]	; (8007878 <_write_r+0x20>)
 800785c:	4605      	mov	r5, r0
 800785e:	4608      	mov	r0, r1
 8007860:	4611      	mov	r1, r2
 8007862:	2200      	movs	r2, #0
 8007864:	6022      	str	r2, [r4, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	f7fd fade 	bl	8004e28 <_write>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_write_r+0x1e>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	b103      	cbz	r3, 8007876 <_write_r+0x1e>
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	200019cc 	.word	0x200019cc

0800787c <_close_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4c06      	ldr	r4, [pc, #24]	; (8007898 <_close_r+0x1c>)
 8007880:	2300      	movs	r3, #0
 8007882:	4605      	mov	r5, r0
 8007884:	4608      	mov	r0, r1
 8007886:	6023      	str	r3, [r4, #0]
 8007888:	f7fd fae8 	bl	8004e5c <_close>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_close_r+0x1a>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	b103      	cbz	r3, 8007896 <_close_r+0x1a>
 8007894:	602b      	str	r3, [r5, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	200019cc 	.word	0x200019cc

0800789c <_fstat_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	4c07      	ldr	r4, [pc, #28]	; (80078bc <_fstat_r+0x20>)
 80078a0:	2300      	movs	r3, #0
 80078a2:	4605      	mov	r5, r0
 80078a4:	4608      	mov	r0, r1
 80078a6:	4611      	mov	r1, r2
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	f7fd fadf 	bl	8004e6c <_fstat>
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	d102      	bne.n	80078b8 <_fstat_r+0x1c>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	b103      	cbz	r3, 80078b8 <_fstat_r+0x1c>
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	bd38      	pop	{r3, r4, r5, pc}
 80078ba:	bf00      	nop
 80078bc:	200019cc 	.word	0x200019cc

080078c0 <_isatty_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4c06      	ldr	r4, [pc, #24]	; (80078dc <_isatty_r+0x1c>)
 80078c4:	2300      	movs	r3, #0
 80078c6:	4605      	mov	r5, r0
 80078c8:	4608      	mov	r0, r1
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	f7fd fad6 	bl	8004e7c <_isatty>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_isatty_r+0x1a>
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	b103      	cbz	r3, 80078da <_isatty_r+0x1a>
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	200019cc 	.word	0x200019cc

080078e0 <_lseek_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4c07      	ldr	r4, [pc, #28]	; (8007900 <_lseek_r+0x20>)
 80078e4:	4605      	mov	r5, r0
 80078e6:	4608      	mov	r0, r1
 80078e8:	4611      	mov	r1, r2
 80078ea:	2200      	movs	r2, #0
 80078ec:	6022      	str	r2, [r4, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	f7fd facc 	bl	8004e8c <_lseek>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_lseek_r+0x1e>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_lseek_r+0x1e>
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	200019cc 	.word	0x200019cc

08007904 <__ascii_mbtowc>:
 8007904:	b082      	sub	sp, #8
 8007906:	b901      	cbnz	r1, 800790a <__ascii_mbtowc+0x6>
 8007908:	a901      	add	r1, sp, #4
 800790a:	b142      	cbz	r2, 800791e <__ascii_mbtowc+0x1a>
 800790c:	b14b      	cbz	r3, 8007922 <__ascii_mbtowc+0x1e>
 800790e:	7813      	ldrb	r3, [r2, #0]
 8007910:	600b      	str	r3, [r1, #0]
 8007912:	7812      	ldrb	r2, [r2, #0]
 8007914:	1c10      	adds	r0, r2, #0
 8007916:	bf18      	it	ne
 8007918:	2001      	movne	r0, #1
 800791a:	b002      	add	sp, #8
 800791c:	4770      	bx	lr
 800791e:	4610      	mov	r0, r2
 8007920:	e7fb      	b.n	800791a <__ascii_mbtowc+0x16>
 8007922:	f06f 0001 	mvn.w	r0, #1
 8007926:	e7f8      	b.n	800791a <__ascii_mbtowc+0x16>

08007928 <_read_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4c07      	ldr	r4, [pc, #28]	; (8007948 <_read_r+0x20>)
 800792c:	4605      	mov	r5, r0
 800792e:	4608      	mov	r0, r1
 8007930:	4611      	mov	r1, r2
 8007932:	2200      	movs	r2, #0
 8007934:	6022      	str	r2, [r4, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	f7fd fab0 	bl	8004e9c <_read>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_read_r+0x1e>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	b103      	cbz	r3, 8007946 <_read_r+0x1e>
 8007944:	602b      	str	r3, [r5, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	200019cc 	.word	0x200019cc

0800794c <__ascii_wctomb>:
 800794c:	b149      	cbz	r1, 8007962 <__ascii_wctomb+0x16>
 800794e:	2aff      	cmp	r2, #255	; 0xff
 8007950:	bf85      	ittet	hi
 8007952:	238a      	movhi	r3, #138	; 0x8a
 8007954:	6003      	strhi	r3, [r0, #0]
 8007956:	700a      	strbls	r2, [r1, #0]
 8007958:	f04f 30ff 	movhi.w	r0, #4294967295
 800795c:	bf98      	it	ls
 800795e:	2001      	movls	r0, #1
 8007960:	4770      	bx	lr
 8007962:	4608      	mov	r0, r1
 8007964:	4770      	bx	lr
	...

08007968 <_init>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	bf00      	nop
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr

08007974 <_fini>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	bf00      	nop
 8007978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797a:	bc08      	pop	{r3}
 800797c:	469e      	mov	lr, r3
 800797e:	4770      	bx	lr
