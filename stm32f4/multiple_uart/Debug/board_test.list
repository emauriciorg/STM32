
board_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004efc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  080050ac  080050ac  000150ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000038c  20000000  080053d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002038c  2**0
                  CONTENTS
  8 .bss          00000510  2000038c  2000038c  0002038c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  2000089c  2000089c  0002038c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f1b9  00000000  00000000  000203bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000020d2  00000000  00000000  0002f575  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e10  00000000  00000000  00031648  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d18  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005999  00000000  00000000  00033170  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000047f9  00000000  00000000  00038b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003d302  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004268  00000000  00000000  0003d380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000038c 	.word	0x2000038c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005094 	.word	0x08005094

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000390 	.word	0x20000390
 80001ec:	08005094 	.word	0x08005094

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <HAL_Init+0x40>)
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_Init+0x40>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <HAL_Init+0x40>)
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_Init+0x40>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <HAL_Init+0x40>)
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x40>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f929 	bl	8000830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f808 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f003 f92a 	bl	800383c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x54>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_InitTick+0x58>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	fbb3 f3f1 	udiv	r3, r3, r1
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f941 	bl	800089a <HAL_SYSTICK_Config>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	e00e      	b.n	8000640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d80a      	bhi.n	800063e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f000 f909 	bl	8000846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_InitTick+0x5c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000324 	.word	0x20000324
 800064c:	20000004 	.word	0x20000004
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000004 	.word	0x20000004
 8000678:	200003b8 	.word	0x200003b8

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	200003b8 	.word	0x200003b8

08000694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b0:	4013      	ands	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	60d3      	str	r3, [r2, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <__NVIC_GetPriorityGrouping+0x18>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	f003 0307 	and.w	r3, r3, #7
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	db0b      	blt.n	8000722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070a:	4909      	ldr	r1, [pc, #36]	; (8000730 <__NVIC_EnableIRQ+0x38>)
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	095b      	lsrs	r3, r3, #5
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	f002 021f 	and.w	r2, r2, #31
 8000718:	2001      	movs	r0, #1
 800071a:	fa00 f202 	lsl.w	r2, r0, r2
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e100 	.word	0xe000e100

08000734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db0a      	blt.n	800075e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	490d      	ldr	r1, [pc, #52]	; (8000780 <__NVIC_SetPriority+0x4c>)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	b2d2      	uxtb	r2, r2
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800075c:	e00a      	b.n	8000774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	4909      	ldr	r1, [pc, #36]	; (8000784 <__NVIC_SetPriority+0x50>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	3b04      	subs	r3, #4
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	b2d2      	uxtb	r2, r2
 800076c:	0112      	lsls	r2, r2, #4
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	440b      	add	r3, r1
 8000772:	761a      	strb	r2, [r3, #24]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000788:	b480      	push	{r7}
 800078a:	b089      	sub	sp, #36	; 0x24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf28      	it	cs
 80007a6:	2304      	movcs	r3, #4
 80007a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d902      	bls.n	80007b8 <NVIC_EncodePriority+0x30>
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3b03      	subs	r3, #3
 80007b6:	e000      	b.n	80007ba <NVIC_EncodePriority+0x32>
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	2201      	movs	r2, #1
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	401a      	ands	r2, r3
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ce:	2101      	movs	r1, #1
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	1e59      	subs	r1, r3, #1
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007dc:	4313      	orrs	r3, r2
         );
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3724      	adds	r7, #36	; 0x24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
	...

080007ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007fc:	d301      	bcc.n	8000802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007fe:	2301      	movs	r3, #1
 8000800:	e00f      	b.n	8000822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <SysTick_Config+0x40>)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800080a:	210f      	movs	r1, #15
 800080c:	f04f 30ff 	mov.w	r0, #4294967295
 8000810:	f7ff ff90 	bl	8000734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <SysTick_Config+0x40>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <SysTick_Config+0x40>)
 800081c:	2207      	movs	r2, #7
 800081e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	e000e010 	.word	0xe000e010

08000830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ff2b 	bl	8000694 <__NVIC_SetPriorityGrouping>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000858:	f7ff ff40 	bl	80006dc <__NVIC_GetPriorityGrouping>
 800085c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	68b9      	ldr	r1, [r7, #8]
 8000862:	6978      	ldr	r0, [r7, #20]
 8000864:	f7ff ff90 	bl	8000788 <NVIC_EncodePriority>
 8000868:	4602      	mov	r2, r0
 800086a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff5f 	bl	8000734 <__NVIC_SetPriority>
}
 8000876:	bf00      	nop
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff33 	bl	80006f8 <__NVIC_EnableIRQ>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffa2 	bl	80007ec <SysTick_Config>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d004      	beq.n	80008d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e00c      	b.n	80008ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2205      	movs	r2, #5
 80008d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	f022 0201 	bic.w	r2, r2, #1
 80008e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
 8000912:	e177      	b.n	8000c04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000914:	2201      	movs	r2, #1
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	429a      	cmp	r2, r3
 800092e:	f040 8166 	bne.w	8000bfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d003      	beq.n	8000942 <HAL_GPIO_Init+0x4a>
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b12      	cmp	r3, #18
 8000940:	d123      	bne.n	800098a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	08da      	lsrs	r2, r3, #3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3208      	adds	r2, #8
 800094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	220f      	movs	r2, #15
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4013      	ands	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	691a      	ldr	r2, [r3, #16]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	f003 0307 	and.w	r3, r3, #7
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4313      	orrs	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	08da      	lsrs	r2, r3, #3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3208      	adds	r2, #8
 8000984:	69b9      	ldr	r1, [r7, #24]
 8000986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	2203      	movs	r2, #3
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f003 0203 	and.w	r2, r3, #3
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d00b      	beq.n	80009de <HAL_GPIO_Init+0xe6>
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d007      	beq.n	80009de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d2:	2b11      	cmp	r3, #17
 80009d4:	d003      	beq.n	80009de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b12      	cmp	r3, #18
 80009dc:	d130      	bne.n	8000a40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	2203      	movs	r2, #3
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	68da      	ldr	r2, [r3, #12]
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a14:	2201      	movs	r2, #1
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4013      	ands	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	091b      	lsrs	r3, r3, #4
 8000a2a:	f003 0201 	and.w	r2, r3, #1
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	f000 80c0 	beq.w	8000bfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4a65      	ldr	r2, [pc, #404]	; (8000c18 <HAL_GPIO_Init+0x320>)
 8000a84:	4b64      	ldr	r3, [pc, #400]	; (8000c18 <HAL_GPIO_Init+0x320>)
 8000a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b62      	ldr	r3, [pc, #392]	; (8000c18 <HAL_GPIO_Init+0x320>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a9a:	4a60      	ldr	r2, [pc, #384]	; (8000c1c <HAL_GPIO_Init+0x324>)
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f003 0303 	and.w	r3, r3, #3
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a57      	ldr	r2, [pc, #348]	; (8000c20 <HAL_GPIO_Init+0x328>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d037      	beq.n	8000b36 <HAL_GPIO_Init+0x23e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a56      	ldr	r2, [pc, #344]	; (8000c24 <HAL_GPIO_Init+0x32c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d031      	beq.n	8000b32 <HAL_GPIO_Init+0x23a>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a55      	ldr	r2, [pc, #340]	; (8000c28 <HAL_GPIO_Init+0x330>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d02b      	beq.n	8000b2e <HAL_GPIO_Init+0x236>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a54      	ldr	r2, [pc, #336]	; (8000c2c <HAL_GPIO_Init+0x334>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d025      	beq.n	8000b2a <HAL_GPIO_Init+0x232>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a53      	ldr	r2, [pc, #332]	; (8000c30 <HAL_GPIO_Init+0x338>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d01f      	beq.n	8000b26 <HAL_GPIO_Init+0x22e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a52      	ldr	r2, [pc, #328]	; (8000c34 <HAL_GPIO_Init+0x33c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d019      	beq.n	8000b22 <HAL_GPIO_Init+0x22a>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a51      	ldr	r2, [pc, #324]	; (8000c38 <HAL_GPIO_Init+0x340>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d013      	beq.n	8000b1e <HAL_GPIO_Init+0x226>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a50      	ldr	r2, [pc, #320]	; (8000c3c <HAL_GPIO_Init+0x344>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d00d      	beq.n	8000b1a <HAL_GPIO_Init+0x222>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a4f      	ldr	r2, [pc, #316]	; (8000c40 <HAL_GPIO_Init+0x348>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d007      	beq.n	8000b16 <HAL_GPIO_Init+0x21e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a4e      	ldr	r2, [pc, #312]	; (8000c44 <HAL_GPIO_Init+0x34c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d101      	bne.n	8000b12 <HAL_GPIO_Init+0x21a>
 8000b0e:	2309      	movs	r3, #9
 8000b10:	e012      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b12:	230a      	movs	r3, #10
 8000b14:	e010      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b16:	2308      	movs	r3, #8
 8000b18:	e00e      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	e00c      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b1e:	2306      	movs	r3, #6
 8000b20:	e00a      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b22:	2305      	movs	r3, #5
 8000b24:	e008      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b26:	2304      	movs	r3, #4
 8000b28:	e006      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e004      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e002      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <HAL_GPIO_Init+0x240>
 8000b36:	2300      	movs	r3, #0
 8000b38:	69fa      	ldr	r2, [r7, #28]
 8000b3a:	f002 0203 	and.w	r2, r2, #3
 8000b3e:	0092      	lsls	r2, r2, #2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b48:	4934      	ldr	r1, [pc, #208]	; (8000c1c <HAL_GPIO_Init+0x324>)
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	3302      	adds	r3, #2
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b7a:	4a33      	ldr	r2, [pc, #204]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <HAL_GPIO_Init+0x350>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	2b0f      	cmp	r3, #15
 8000c08:	f67f ae84 	bls.w	8000914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3724      	adds	r7, #36	; 0x24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40021400 	.word	0x40021400
 8000c38:	40021800 	.word	0x40021800
 8000c3c:	40021c00 	.word	0x40021c00
 8000c40:	40022000 	.word	0x40022000
 8000c44:	40022400 	.word	0x40022400
 8000c48:	40013c00 	.word	0x40013c00

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c5c:	787b      	ldrb	r3, [r7, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c68:	e003      	b.n	8000c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	619a      	str	r2, [r3, #24]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e22d      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d075      	beq.n	8000d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c9e:	4ba3      	ldr	r3, [pc, #652]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d00c      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000caa:	4ba0      	ldr	r3, [pc, #640]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d112      	bne.n	8000cdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cb6:	4b9d      	ldr	r3, [pc, #628]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cc2:	d10b      	bne.n	8000cdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc4:	4b99      	ldr	r3, [pc, #612]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d05b      	beq.n	8000d88 <HAL_RCC_OscConfig+0x108>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d157      	bne.n	8000d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e208      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce4:	d106      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x74>
 8000ce6:	4a91      	ldr	r2, [pc, #580]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	4b90      	ldr	r3, [pc, #576]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e01d      	b.n	8000d30 <HAL_RCC_OscConfig+0xb0>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cfc:	d10c      	bne.n	8000d18 <HAL_RCC_OscConfig+0x98>
 8000cfe:	4a8b      	ldr	r2, [pc, #556]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	4b8a      	ldr	r3, [pc, #552]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	4a88      	ldr	r2, [pc, #544]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	4b87      	ldr	r3, [pc, #540]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e00b      	b.n	8000d30 <HAL_RCC_OscConfig+0xb0>
 8000d18:	4a84      	ldr	r2, [pc, #528]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d1a:	4b84      	ldr	r3, [pc, #528]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4a81      	ldr	r2, [pc, #516]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d26:	4b81      	ldr	r3, [pc, #516]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d013      	beq.n	8000d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d38:	f7ff fca0 	bl	800067c <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d40:	f7ff fc9c 	bl	800067c <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b64      	cmp	r3, #100	; 0x64
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e1cd      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d52:	4b76      	ldr	r3, [pc, #472]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f0      	beq.n	8000d40 <HAL_RCC_OscConfig+0xc0>
 8000d5e:	e014      	b.n	8000d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d60:	f7ff fc8c 	bl	800067c <HAL_GetTick>
 8000d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d68:	f7ff fc88 	bl	800067c <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b64      	cmp	r3, #100	; 0x64
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e1b9      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7a:	4b6c      	ldr	r3, [pc, #432]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f0      	bne.n	8000d68 <HAL_RCC_OscConfig+0xe8>
 8000d86:	e000      	b.n	8000d8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d063      	beq.n	8000e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d96:	4b65      	ldr	r3, [pc, #404]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00b      	beq.n	8000dba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000da2:	4b62      	ldr	r3, [pc, #392]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d11c      	bne.n	8000de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dae:	4b5f      	ldr	r3, [pc, #380]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d116      	bne.n	8000de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dba:	4b5c      	ldr	r3, [pc, #368]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x152>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d001      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e18d      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd2:	4956      	ldr	r1, [pc, #344]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000dd4:	4b55      	ldr	r3, [pc, #340]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de6:	e03a      	b.n	8000e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d020      	beq.n	8000e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df0:	4b4f      	ldr	r3, [pc, #316]	; (8000f30 <HAL_RCC_OscConfig+0x2b0>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df6:	f7ff fc41 	bl	800067c <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fc3d 	bl	800067c <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e16e      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	4b46      	ldr	r3, [pc, #280]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f0      	beq.n	8000dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e1c:	4943      	ldr	r1, [pc, #268]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000e1e:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	600b      	str	r3, [r1, #0]
 8000e30:	e015      	b.n	8000e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <HAL_RCC_OscConfig+0x2b0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e38:	f7ff fc20 	bl	800067c <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e40:	f7ff fc1c 	bl	800067c <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e14d      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e52:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f0      	bne.n	8000e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d030      	beq.n	8000ecc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d016      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e72:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <HAL_RCC_OscConfig+0x2b4>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e78:	f7ff fc00 	bl	800067c <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e80:	f7ff fbfc 	bl	800067c <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e12d      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f0      	beq.n	8000e80 <HAL_RCC_OscConfig+0x200>
 8000e9e:	e015      	b.n	8000ecc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <HAL_RCC_OscConfig+0x2b4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fbe9 	bl	800067c <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eae:	f7ff fbe5 	bl	800067c <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e116      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1f0      	bne.n	8000eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80a0 	beq.w	800101a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10f      	bne.n	8000f0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_RCC_OscConfig+0x2ac>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f06:	2301      	movs	r3, #1
 8000f08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_RCC_OscConfig+0x2b8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d121      	bne.n	8000f5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f16:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <HAL_RCC_OscConfig+0x2b8>)
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <HAL_RCC_OscConfig+0x2b8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fbab 	bl	800067c <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f28:	e011      	b.n	8000f4e <HAL_RCC_OscConfig+0x2ce>
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	42470000 	.word	0x42470000
 8000f34:	42470e80 	.word	0x42470e80
 8000f38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f3c:	f7ff fb9e 	bl	800067c <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e0cf      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4e:	4b6a      	ldr	r3, [pc, #424]	; (80010f8 <HAL_RCC_OscConfig+0x478>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d106      	bne.n	8000f70 <HAL_RCC_OscConfig+0x2f0>
 8000f62:	4a66      	ldr	r2, [pc, #408]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000f64:	4b65      	ldr	r3, [pc, #404]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f6e:	e01c      	b.n	8000faa <HAL_RCC_OscConfig+0x32a>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	2b05      	cmp	r3, #5
 8000f76:	d10c      	bne.n	8000f92 <HAL_RCC_OscConfig+0x312>
 8000f78:	4a60      	ldr	r2, [pc, #384]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000f7a:	4b60      	ldr	r3, [pc, #384]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6713      	str	r3, [r2, #112]	; 0x70
 8000f84:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000f86:	4b5d      	ldr	r3, [pc, #372]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f90:	e00b      	b.n	8000faa <HAL_RCC_OscConfig+0x32a>
 8000f92:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000f94:	4b59      	ldr	r3, [pc, #356]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f9e:	4a57      	ldr	r2, [pc, #348]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000fa0:	4b56      	ldr	r3, [pc, #344]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa4:	f023 0304 	bic.w	r3, r3, #4
 8000fa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d015      	beq.n	8000fde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb2:	f7ff fb63 	bl	800067c <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb8:	e00a      	b.n	8000fd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fba:	f7ff fb5f 	bl	800067c <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e08e      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd0:	4b4a      	ldr	r3, [pc, #296]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0ee      	beq.n	8000fba <HAL_RCC_OscConfig+0x33a>
 8000fdc:	e014      	b.n	8001008 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fb4d 	bl	800067c <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fb49 	bl	800067c <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e078      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffc:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8000ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1ee      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d105      	bne.n	800101a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100e:	4a3b      	ldr	r2, [pc, #236]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8001010:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d064      	beq.n	80010ec <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001022:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b08      	cmp	r3, #8
 800102c:	d05c      	beq.n	80010e8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d141      	bne.n	80010ba <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001036:	4b32      	ldr	r3, [pc, #200]	; (8001100 <HAL_RCC_OscConfig+0x480>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fb1e 	bl	800067c <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001044:	f7ff fb1a 	bl	800067c <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e04b      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f0      	bne.n	8001044 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001062:	4926      	ldr	r1, [pc, #152]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69da      	ldr	r2, [r3, #28]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	019b      	lsls	r3, r3, #6
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107a:	085b      	lsrs	r3, r3, #1
 800107c:	3b01      	subs	r3, #1
 800107e:	041b      	lsls	r3, r3, #16
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	061b      	lsls	r3, r3, #24
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_RCC_OscConfig+0x480>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff faf3 	bl	800067c <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109a:	f7ff faef 	bl	800067c <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e020      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x41a>
 80010b8:	e018      	b.n	80010ec <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_RCC_OscConfig+0x480>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fadc 	bl	800067c <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c8:	f7ff fad8 	bl	800067c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e009      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_RCC_OscConfig+0x47c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x448>
 80010e6:	e001      	b.n	80010ec <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40007000 	.word	0x40007000
 80010fc:	40023800 	.word	0x40023800
 8001100:	42470060 	.word	0x42470060

08001104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e0ca      	b.n	80012ae <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001118:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <HAL_RCC_ClockConfig+0x1b4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 020f 	and.w	r2, r3, #15
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d20c      	bcs.n	8001140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001126:	4b64      	ldr	r3, [pc, #400]	; (80012b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112e:	4b62      	ldr	r3, [pc, #392]	; (80012b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 020f 	and.w	r2, r3, #15
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e0b6      	b.n	80012ae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001158:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800115a:	4b58      	ldr	r3, [pc, #352]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001170:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001172:	4b52      	ldr	r3, [pc, #328]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800117a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117c:	494f      	ldr	r1, [pc, #316]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800117e:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d044      	beq.n	8001224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d119      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e07d      	b.n	80012ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d003      	beq.n	80011c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d107      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e06d      	b.n	80012ae <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e065      	b.n	80012ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e2:	4936      	ldr	r1, [pc, #216]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 0203 	bic.w	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f4:	f7ff fa42 	bl	800067c <HAL_GetTick>
 80011f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fa:	e00a      	b.n	8001212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fc:	f7ff fa3e 	bl	800067c <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f241 3288 	movw	r2, #5000	; 0x1388
 800120a:	4293      	cmp	r3, r2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e04d      	b.n	80012ae <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 020c 	and.w	r2, r3, #12
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	429a      	cmp	r2, r3
 8001222:	d1eb      	bne.n	80011fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 020f 	and.w	r2, r3, #15
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d90c      	bls.n	800124c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_RCC_ClockConfig+0x1b4>)
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_RCC_ClockConfig+0x1b4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 020f 	and.w	r2, r3, #15
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e030      	b.n	80012ae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001258:	4918      	ldr	r1, [pc, #96]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001276:	4911      	ldr	r1, [pc, #68]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4313      	orrs	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800128a:	f000 f81d 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 800128e:	4601      	mov	r1, r0
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	fa21 f303 	lsr.w	r3, r1, r3
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff f9a4 	bl	80005f4 <HAL_InitTick>

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00
 80012bc:	40023800 	.word	0x40023800
 80012c0:	08005310 	.word	0x08005310
 80012c4:	20000324 	.word	0x20000324

080012c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012cc:	b08f      	sub	sp, #60	; 0x3c
 80012ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012e0:	4b62      	ldr	r3, [pc, #392]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d007      	beq.n	80012fc <HAL_RCC_GetSysClockFreq+0x34>
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d008      	beq.n	8001302 <HAL_RCC_GetSysClockFreq+0x3a>
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f040 80b2 	bne.w	800145a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012f6:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80012fa:	e0b1      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012fc:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001300:	e0ae      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001302:	4b5a      	ldr	r3, [pc, #360]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800130c:	4b57      	ldr	r3, [pc, #348]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d04e      	beq.n	80013b6 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001318:	4b54      	ldr	r3, [pc, #336]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	099b      	lsrs	r3, r3, #6
 800131e:	f04f 0400 	mov.w	r4, #0
 8001322:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	ea01 0103 	and.w	r1, r1, r3
 800132e:	ea02 0204 	and.w	r2, r2, r4
 8001332:	460b      	mov	r3, r1
 8001334:	4614      	mov	r4, r2
 8001336:	0160      	lsls	r0, r4, #5
 8001338:	6278      	str	r0, [r7, #36]	; 0x24
 800133a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800133c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001340:	6278      	str	r0, [r7, #36]	; 0x24
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	623b      	str	r3, [r7, #32]
 8001346:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800134a:	1a5b      	subs	r3, r3, r1
 800134c:	eb64 0402 	sbc.w	r4, r4, r2
 8001350:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001354:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001358:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800135c:	ebb8 0803 	subs.w	r8, r8, r3
 8001360:	eb69 0904 	sbc.w	r9, r9, r4
 8001364:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800137c:	eb18 0801 	adds.w	r8, r8, r1
 8001380:	eb49 0902 	adc.w	r9, r9, r2
 8001384:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800139c:	4640      	mov	r0, r8
 800139e:	4649      	mov	r1, r9
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	f04f 0400 	mov.w	r4, #0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4623      	mov	r3, r4
 80013aa:	f7fe ff79 	bl	80002a0 <__aeabi_uldivmod>
 80013ae:	4603      	mov	r3, r0
 80013b0:	460c      	mov	r4, r1
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
 80013b4:	e043      	b.n	800143e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	099b      	lsrs	r3, r3, #6
 80013bc:	f04f 0400 	mov.w	r4, #0
 80013c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	ea01 0103 	and.w	r1, r1, r3
 80013cc:	ea02 0204 	and.w	r2, r2, r4
 80013d0:	460b      	mov	r3, r1
 80013d2:	4614      	mov	r4, r2
 80013d4:	0160      	lsls	r0, r4, #5
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	015b      	lsls	r3, r3, #5
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013e8:	1a5b      	subs	r3, r3, r1
 80013ea:	eb64 0402 	sbc.w	r4, r4, r2
 80013ee:	01a6      	lsls	r6, r4, #6
 80013f0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80013f4:	019d      	lsls	r5, r3, #6
 80013f6:	1aed      	subs	r5, r5, r3
 80013f8:	eb66 0604 	sbc.w	r6, r6, r4
 80013fc:	00f3      	lsls	r3, r6, #3
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	00eb      	lsls	r3, r5, #3
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001410:	186d      	adds	r5, r5, r1
 8001412:	eb46 0602 	adc.w	r6, r6, r2
 8001416:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800141a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800141e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001422:	4655      	mov	r5, sl
 8001424:	465e      	mov	r6, fp
 8001426:	4628      	mov	r0, r5
 8001428:	4631      	mov	r1, r6
 800142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142c:	f04f 0400 	mov.w	r4, #0
 8001430:	461a      	mov	r2, r3
 8001432:	4623      	mov	r3, r4
 8001434:	f7fe ff34 	bl	80002a0 <__aeabi_uldivmod>
 8001438:	4603      	mov	r3, r0
 800143a:	460c      	mov	r4, r1
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	0c1b      	lsrs	r3, r3, #16
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	3301      	adds	r3, #1
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800144e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001458:	e002      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800145e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001462:	4618      	mov	r0, r3
 8001464:	373c      	adds	r7, #60	; 0x3c
 8001466:	46bd      	mov	sp, r7
 8001468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	00f42400 	.word	0x00f42400
 8001474:	007a1200 	.word	0x007a1200

08001478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_RCC_GetHCLKFreq+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000324 	.word	0x20000324

08001490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001494:	f7ff fff0 	bl	8001478 <HAL_RCC_GetHCLKFreq>
 8001498:	4601      	mov	r1, r0
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	0a9b      	lsrs	r3, r3, #10
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	08005320 	.word	0x08005320

080014b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014bc:	f7ff ffdc 	bl	8001478 <HAL_RCC_GetHCLKFreq>
 80014c0:	4601      	mov	r1, r0
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	0b5b      	lsrs	r3, r3, #13
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800
 80014dc:	08005320 	.word	0x08005320

080014e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d122      	bne.n	800153c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b02      	cmp	r3, #2
 8001502:	d11b      	bne.n	800153c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f06f 0202 	mvn.w	r2, #2
 800150c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f8f8 	bl	8001718 <HAL_TIM_IC_CaptureCallback>
 8001528:	e005      	b.n	8001536 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f8ea 	bl	8001704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f8fb 	bl	800172c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b04      	cmp	r3, #4
 8001548:	d122      	bne.n	8001590 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b04      	cmp	r3, #4
 8001556:	d11b      	bne.n	8001590 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f06f 0204 	mvn.w	r2, #4
 8001560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2202      	movs	r2, #2
 8001566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f8ce 	bl	8001718 <HAL_TIM_IC_CaptureCallback>
 800157c:	e005      	b.n	800158a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f8c0 	bl	8001704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f8d1 	bl	800172c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b08      	cmp	r3, #8
 800159c:	d122      	bne.n	80015e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d11b      	bne.n	80015e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f06f 0208 	mvn.w	r2, #8
 80015b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2204      	movs	r2, #4
 80015ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f8a4 	bl	8001718 <HAL_TIM_IC_CaptureCallback>
 80015d0:	e005      	b.n	80015de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f896 	bl	8001704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8a7 	bl	800172c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b10      	cmp	r3, #16
 80015f0:	d122      	bne.n	8001638 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	d11b      	bne.n	8001638 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f06f 0210 	mvn.w	r2, #16
 8001608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2208      	movs	r2, #8
 800160e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f87a 	bl	8001718 <HAL_TIM_IC_CaptureCallback>
 8001624:	e005      	b.n	8001632 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f86c 	bl	8001704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f87d 	bl	800172c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10e      	bne.n	8001664 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f06f 0201 	mvn.w	r2, #1
 800165c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f846 	bl	80016f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166e:	2b80      	cmp	r3, #128	; 0x80
 8001670:	d10e      	bne.n	8001690 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167c:	2b80      	cmp	r3, #128	; 0x80
 800167e:	d107      	bne.n	8001690 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f86c 	bl	8001768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169a:	2b40      	cmp	r3, #64	; 0x40
 800169c:	d10e      	bne.n	80016bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a8:	2b40      	cmp	r3, #64	; 0x40
 80016aa:	d107      	bne.n	80016bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f842 	bl	8001740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	d10e      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	d107      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f06f 0220 	mvn.w	r2, #32
 80016e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f836 	bl	8001754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e04a      	b.n	8001824 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d111      	bne.n	80017be <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fa80 	bl	8001ca8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a1e      	ldr	r2, [pc, #120]	; (800182c <HAL_UART_Init+0xb0>)
 80017b4:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2224      	movs	r2, #36	; 0x24
 80017c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	68d2      	ldr	r2, [r2, #12]
 80017d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fc06 	bl	8001fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	6912      	ldr	r2, [r2, #16]
 80017e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	6952      	ldr	r2, [r2, #20]
 80017f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	68d2      	ldr	r2, [r2, #12]
 8001806:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800180a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2220      	movs	r2, #32
 800181e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	0800388d 	.word	0x0800388d

08001830 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	4613      	mov	r3, r2
 800183e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b20      	cmp	r3, #32
 800184e:	f040 8082 	bne.w	8001956 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <HAL_UART_Transmit+0x2e>
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07a      	b.n	8001958 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_UART_Transmit+0x40>
 800186c:	2302      	movs	r3, #2
 800186e:	e073      	b.n	8001958 <HAL_UART_Transmit+0x128>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2221      	movs	r2, #33	; 0x21
 8001882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001886:	f7fe fef9 	bl	800067c <HAL_GetTick>
 800188a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	88fa      	ldrh	r2, [r7, #6]
 8001896:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001898:	e041      	b.n	800191e <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b0:	d121      	bne.n	80018f6 <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2200      	movs	r2, #0
 80018ba:	2180      	movs	r1, #128	; 0x80
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fa25 	bl	8001d0c <UART_WaitOnFlagUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e045      	b.n	8001958 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	8812      	ldrh	r2, [r2, #0]
 80018d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018dc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d103      	bne.n	80018ee <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	3302      	adds	r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	e017      	b.n	800191e <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	e013      	b.n	800191e <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2200      	movs	r2, #0
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 fa03 	bl	8001d0c <UART_WaitOnFlagUntilTimeout>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e023      	b.n	8001958 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c59      	adds	r1, r3, #1
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001922:	b29b      	uxth	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1b8      	bne.n	800189a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2200      	movs	r2, #0
 8001930:	2140      	movs	r1, #64	; 0x40
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f9ea 	bl	8001d0c <UART_WaitOnFlagUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e00a      	b.n	8001958 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001956:	2302      	movs	r3, #2
  }
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b20      	cmp	r3, #32
 8001978:	d140      	bne.n	80019fc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_UART_Receive_IT+0x26>
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e039      	b.n	80019fe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_UART_Receive_IT+0x38>
 8001994:	2302      	movs	r3, #2
 8001996:	e032      	b.n	80019fe <HAL_UART_Receive_IT+0x9e>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	88fa      	ldrh	r2, [r7, #6]
 80019aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2222      	movs	r2, #34	; 0x22
 80019bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	68d2      	ldr	r2, [r2, #12]
 80019d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019d6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	6952      	ldr	r2, [r2, #20]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	68d2      	ldr	r2, [r2, #12]
 80019f2:	f042 0220 	orr.w	r2, r2, #32
 80019f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e000      	b.n	80019fe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80019fc:	2302      	movs	r3, #2
  }
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_UART_IRQHandler+0x52>
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f003 0320 	and.w	r3, r3, #32
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fa43 	bl	8001ee2 <UART_Receive_IT>
      return;
 8001a5c:	e0cf      	b.n	8001bfe <HAL_UART_IRQHandler+0x1f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80ae 	beq.w	8001bc2 <HAL_UART_IRQHandler+0x1b6>
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_UART_IRQHandler+0x70>
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80a3 	beq.w	8001bc2 <HAL_UART_IRQHandler+0x1b6>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00a      	beq.n	8001a9c <HAL_UART_IRQHandler+0x90>
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00a      	beq.n	8001abc <HAL_UART_IRQHandler+0xb0>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab4:	f043 0202 	orr.w	r2, r3, #2
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00a      	beq.n	8001adc <HAL_UART_IRQHandler+0xd0>
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad4:	f043 0204 	orr.w	r2, r3, #4
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <HAL_UART_IRQHandler+0xf0>
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af4:	f043 0208 	orr.w	r2, r3, #8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d07b      	beq.n	8001bfc <HAL_UART_IRQHandler+0x1f0>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_UART_IRQHandler+0x112>
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f9e2 	bl	8001ee2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <HAL_UART_IRQHandler+0x13a>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d033      	beq.n	8001bae <HAL_UART_IRQHandler+0x1a2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f92a 	bl	8001da0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	2b40      	cmp	r3, #64	; 0x40
 8001b58:	d124      	bne.n	8001ba4 <HAL_UART_IRQHandler+0x198>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	6952      	ldr	r2, [r2, #20]
 8001b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b68:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d013      	beq.n	8001b9a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b76:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <HAL_UART_IRQHandler+0x1f8>)
 8001b78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fe97 	bl	80008b2 <HAL_DMA_Abort_IT>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d019      	beq.n	8001bbe <HAL_UART_IRQHandler+0x1b2>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b94:	4610      	mov	r0, r2
 8001b96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b98:	e011      	b.n	8001bbe <HAL_UART_IRQHandler+0x1b2>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ba2:	e00c      	b.n	8001bbe <HAL_UART_IRQHandler+0x1b2>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bac:	e007      	b.n	8001bbe <HAL_UART_IRQHandler+0x1b2>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001bbc:	e01e      	b.n	8001bfc <HAL_UART_IRQHandler+0x1f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bbe:	bf00      	nop
    return;
 8001bc0:	e01c      	b.n	8001bfc <HAL_UART_IRQHandler+0x1f0>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_UART_IRQHandler+0x1d2>
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_UART_IRQHandler+0x1d2>
  {
    UART_Transmit_IT(huart);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f915 	bl	8001e06 <UART_Transmit_IT>
    return;
 8001bdc:	e00f      	b.n	8001bfe <HAL_UART_IRQHandler+0x1f2>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00a      	beq.n	8001bfe <HAL_UART_IRQHandler+0x1f2>
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_UART_IRQHandler+0x1f2>
  {
    UART_EndTransmit_IT(huart);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f95c 	bl	8001eb0 <UART_EndTransmit_IT>
    return;
 8001bf8:	bf00      	nop
 8001bfa:	e000      	b.n	8001bfe <HAL_UART_IRQHandler+0x1f2>
    return;
 8001bfc:	bf00      	nop
  }
}
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	08001ddd 	.word	0x08001ddd

08001c08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <UART_InitCallbacksToDefault+0x44>)
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <UART_InitCallbacksToDefault+0x48>)
 8001cba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <UART_InitCallbacksToDefault+0x4c>)
 8001cc0:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <UART_InitCallbacksToDefault+0x50>)
 8001cc6:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a0c      	ldr	r2, [pc, #48]	; (8001cfc <UART_InitCallbacksToDefault+0x54>)
 8001ccc:	651a      	str	r2, [r3, #80]	; 0x50
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <UART_InitCallbacksToDefault+0x58>)
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <UART_InitCallbacksToDefault+0x5c>)
 8001cd8:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <UART_InitCallbacksToDefault+0x60>)
 8001cde:	65da      	str	r2, [r3, #92]	; 0x5c

}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	08001c1d 	.word	0x08001c1d
 8001cf0:	08001c09 	.word	0x08001c09
 8001cf4:	08001c45 	.word	0x08001c45
 8001cf8:	08001c31 	.word	0x08001c31
 8001cfc:	08001c59 	.word	0x08001c59
 8001d00:	08001c6d 	.word	0x08001c6d
 8001d04:	08001c81 	.word	0x08001c81
 8001d08:	08001c95 	.word	0x08001c95

08001d0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d1c:	e02c      	b.n	8001d78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d028      	beq.n	8001d78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d007      	beq.n	8001d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8001d2c:	f7fe fca6 	bl	800067c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	1ad2      	subs	r2, r2, r3
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d91d      	bls.n	8001d78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	68d2      	ldr	r2, [r2, #12]
 8001d46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	6952      	ldr	r2, [r2, #20]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e00f      	b.n	8001d98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	401a      	ands	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d0c3      	beq.n	8001d1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	68d2      	ldr	r2, [r2, #12]
 8001db2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001db6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	6952      	ldr	r2, [r2, #20]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b21      	cmp	r3, #33	; 0x21
 8001e18:	d143      	bne.n	8001ea2 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e22:	d119      	bne.n	8001e58 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	8812      	ldrh	r2, [r2, #0]
 8001e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	1c9a      	adds	r2, r3, #2
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	621a      	str	r2, [r3, #32]
 8001e4a:	e00e      	b.n	8001e6a <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	621a      	str	r2, [r3, #32]
 8001e56:	e008      	b.n	8001e6a <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	1c58      	adds	r0, r3, #1
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	6208      	str	r0, [r1, #32]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4619      	mov	r1, r3
 8001e78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	68d2      	ldr	r2, [r2, #12]
 8001e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	68d2      	ldr	r2, [r2, #12]
 8001e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	68d2      	ldr	r2, [r2, #12]
 8001ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b22      	cmp	r3, #34	; 0x22
 8001ef4:	d172      	bne.n	8001fdc <UART_Receive_IT+0xfa>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efe:	d123      	bne.n	8001f48 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10e      	bne.n	8001f2c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	1c9a      	adds	r2, r3, #2
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
 8001f2a:	e029      	b.n	8001f80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28
 8001f46:	e01b      	b.n	8001f80 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	1c59      	adds	r1, r3, #1
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6291      	str	r1, [r2, #40]	; 0x28
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	6852      	ldr	r2, [r2, #4]
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e00c      	b.n	8001f80 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	1c59      	adds	r1, r3, #1
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6291      	str	r1, [r2, #40]	; 0x28
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	6852      	ldr	r2, [r2, #4]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d121      	bne.n	8001fd8 <UART_Receive_IT+0xf6>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	68d2      	ldr	r2, [r2, #12]
 8001f9e:	f022 0220 	bic.w	r2, r2, #32
 8001fa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	68d2      	ldr	r2, [r2, #12]
 8001fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	6952      	ldr	r2, [r2, #20]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e002      	b.n	8001fde <UART_Receive_IT+0xfc>
    }
    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <UART_Receive_IT+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	6912      	ldr	r2, [r2, #16]
 8001ffa:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68d2      	ldr	r2, [r2, #12]
 8002002:	430a      	orrs	r2, r1
 8002004:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800202c:	f023 030c 	bic.w	r3, r3, #12
 8002030:	68f9      	ldr	r1, [r7, #12]
 8002032:	430b      	orrs	r3, r1
 8002034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	6952      	ldr	r2, [r2, #20]
 8002040:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6992      	ldr	r2, [r2, #24]
 8002048:	430a      	orrs	r2, r1
 800204a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002054:	f040 80e4 	bne.w	8002220 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4aab      	ldr	r2, [pc, #684]	; (800230c <UART_SetConfig+0x324>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d004      	beq.n	800206c <UART_SetConfig+0x84>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4aaa      	ldr	r2, [pc, #680]	; (8002310 <UART_SetConfig+0x328>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d16c      	bne.n	8002146 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681c      	ldr	r4, [r3, #0]
 8002070:	f7ff fa22 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
 8002074:	4602      	mov	r2, r0
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009a      	lsls	r2, r3, #2
 800207e:	441a      	add	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4aa2      	ldr	r2, [pc, #648]	; (8002314 <UART_SetConfig+0x32c>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	011d      	lsls	r5, r3, #4
 8002094:	f7ff fa10 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
 8002098:	4602      	mov	r2, r0
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	009a      	lsls	r2, r3, #2
 80020a2:	441a      	add	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80020ae:	f7ff fa03 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009a      	lsls	r2, r3, #2
 80020bc:	441a      	add	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	4a92      	ldr	r2, [pc, #584]	; (8002314 <UART_SetConfig+0x32c>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2264      	movs	r2, #100	; 0x64
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	1af3      	subs	r3, r6, r3
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	3332      	adds	r3, #50	; 0x32
 80020dc:	4a8d      	ldr	r2, [pc, #564]	; (8002314 <UART_SetConfig+0x32c>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020ea:	441d      	add	r5, r3
 80020ec:	f7ff f9e4 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	009a      	lsls	r2, r3, #2
 80020fa:	441a      	add	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fbb2 f6f3 	udiv	r6, r2, r3
 8002106:	f7ff f9d7 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
 800210a:	4602      	mov	r2, r0
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	009a      	lsls	r2, r3, #2
 8002114:	441a      	add	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	4a7c      	ldr	r2, [pc, #496]	; (8002314 <UART_SetConfig+0x32c>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2264      	movs	r2, #100	; 0x64
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	1af3      	subs	r3, r6, r3
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	3332      	adds	r3, #50	; 0x32
 8002134:	4a77      	ldr	r2, [pc, #476]	; (8002314 <UART_SetConfig+0x32c>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	442b      	add	r3, r5
 8002142:	60a3      	str	r3, [r4, #8]
 8002144:	e154      	b.n	80023f0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681c      	ldr	r4, [r3, #0]
 800214a:	f7ff f9a1 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 800214e:	4602      	mov	r2, r0
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009a      	lsls	r2, r3, #2
 8002158:	441a      	add	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	4a6b      	ldr	r2, [pc, #428]	; (8002314 <UART_SetConfig+0x32c>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	011d      	lsls	r5, r3, #4
 800216e:	f7ff f98f 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 8002172:	4602      	mov	r2, r0
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009a      	lsls	r2, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fbb2 f6f3 	udiv	r6, r2, r3
 8002188:	f7ff f982 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 800218c:	4602      	mov	r2, r0
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	009a      	lsls	r2, r3, #2
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4a5c      	ldr	r2, [pc, #368]	; (8002314 <UART_SetConfig+0x32c>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	2264      	movs	r2, #100	; 0x64
 80021ac:	fb02 f303 	mul.w	r3, r2, r3
 80021b0:	1af3      	subs	r3, r6, r3
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	3332      	adds	r3, #50	; 0x32
 80021b6:	4a57      	ldr	r2, [pc, #348]	; (8002314 <UART_SetConfig+0x32c>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021c4:	441d      	add	r5, r3
 80021c6:	f7ff f963 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	009a      	lsls	r2, r3, #2
 80021d4:	441a      	add	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80021e0:	f7ff f956 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	009a      	lsls	r2, r3, #2
 80021ee:	441a      	add	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	4a46      	ldr	r2, [pc, #280]	; (8002314 <UART_SetConfig+0x32c>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	2264      	movs	r2, #100	; 0x64
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	1af3      	subs	r3, r6, r3
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	3332      	adds	r3, #50	; 0x32
 800220e:	4a41      	ldr	r2, [pc, #260]	; (8002314 <UART_SetConfig+0x32c>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	442b      	add	r3, r5
 800221c:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800221e:	e0e7      	b.n	80023f0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a39      	ldr	r2, [pc, #228]	; (800230c <UART_SetConfig+0x324>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d004      	beq.n	8002234 <UART_SetConfig+0x24c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a38      	ldr	r2, [pc, #224]	; (8002310 <UART_SetConfig+0x328>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d171      	bne.n	8002318 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681c      	ldr	r4, [r3, #0]
 8002238:	f7ff f93e 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
 800223c:	4602      	mov	r2, r0
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	009a      	lsls	r2, r3, #2
 8002246:	441a      	add	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	4a30      	ldr	r2, [pc, #192]	; (8002314 <UART_SetConfig+0x32c>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	011d      	lsls	r5, r3, #4
 800225c:	f7ff f92c 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
 8002260:	4602      	mov	r2, r0
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	009a      	lsls	r2, r3, #2
 800226a:	441a      	add	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	fbb2 f6f3 	udiv	r6, r2, r3
 8002276:	f7ff f91f 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
 800227a:	4602      	mov	r2, r0
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	009a      	lsls	r2, r3, #2
 8002284:	441a      	add	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <UART_SetConfig+0x32c>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2264      	movs	r2, #100	; 0x64
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	1af3      	subs	r3, r6, r3
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	3332      	adds	r3, #50	; 0x32
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <UART_SetConfig+0x32c>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b0:	441d      	add	r5, r3
 80022b2:	f7ff f901 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	009a      	lsls	r2, r3, #2
 80022c0:	441a      	add	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80022cc:	f7ff f8f4 	bl	80014b8 <HAL_RCC_GetPCLK2Freq>
 80022d0:	4602      	mov	r2, r0
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	009a      	lsls	r2, r3, #2
 80022da:	441a      	add	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <UART_SetConfig+0x32c>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	2264      	movs	r2, #100	; 0x64
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	1af3      	subs	r3, r6, r3
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	3332      	adds	r3, #50	; 0x32
 80022fa:	4a06      	ldr	r2, [pc, #24]	; (8002314 <UART_SetConfig+0x32c>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	442b      	add	r3, r5
 8002308:	60a3      	str	r3, [r4, #8]
 800230a:	e071      	b.n	80023f0 <UART_SetConfig+0x408>
 800230c:	40011000 	.word	0x40011000
 8002310:	40011400 	.word	0x40011400
 8002314:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681c      	ldr	r4, [r3, #0]
 800231c:	f7ff f8b8 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 8002320:	4602      	mov	r2, r0
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	009a      	lsls	r2, r3, #2
 800232a:	441a      	add	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4a30      	ldr	r2, [pc, #192]	; (80023f8 <UART_SetConfig+0x410>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	011d      	lsls	r5, r3, #4
 8002340:	f7ff f8a6 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 8002344:	4602      	mov	r2, r0
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	009a      	lsls	r2, r3, #2
 800234e:	441a      	add	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	fbb2 f6f3 	udiv	r6, r2, r3
 800235a:	f7ff f899 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 800235e:	4602      	mov	r2, r0
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009a      	lsls	r2, r3, #2
 8002368:	441a      	add	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <UART_SetConfig+0x410>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2264      	movs	r2, #100	; 0x64
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	1af3      	subs	r3, r6, r3
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	3332      	adds	r3, #50	; 0x32
 8002388:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <UART_SetConfig+0x410>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002394:	441d      	add	r5, r3
 8002396:	f7ff f87b 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 800239a:	4602      	mov	r2, r0
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	009a      	lsls	r2, r3, #2
 80023a4:	441a      	add	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80023b0:	f7ff f86e 	bl	8001490 <HAL_RCC_GetPCLK1Freq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	009a      	lsls	r2, r3, #2
 80023be:	441a      	add	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <UART_SetConfig+0x410>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	2264      	movs	r2, #100	; 0x64
 80023d4:	fb02 f303 	mul.w	r3, r2, r3
 80023d8:	1af3      	subs	r3, r6, r3
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	3332      	adds	r3, #50	; 0x32
 80023de:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <UART_SetConfig+0x410>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	442b      	add	r3, r5
 80023ec:	60a3      	str	r3, [r4, #8]
}
 80023ee:	e7ff      	b.n	80023f0 <UART_SetConfig+0x408>
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023f8:	51eb851f 	.word	0x51eb851f

080023fc <dbg_uart_error_call_back>:
		0};


/*----------------------------------------------------------------------------*/

void dbg_uart_error_call_back(UART_HandleTypeDef *huart){}
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <dbg_register_task>:


uint8_t dbg_register_task(void (*task_routine)(void), uint8_t *task_command, uint8_t args)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	71fb      	strb	r3, [r7, #7]
	uint8_t	 task_command_len  = strlen((char *)task_command);
 800241e:	68b8      	ldr	r0, [r7, #8]
 8002420:	f7fd fee6 	bl	80001f0 <strlen>
 8002424:	4603      	mov	r3, r0
 8002426:	75fb      	strb	r3, [r7, #23]
 	if (task_routine == NULL ) return false;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <dbg_register_task+0x22>
 800242e:	2300      	movs	r3, #0
 8002430:	e04a      	b.n	80024c8 <dbg_register_task+0xb8>

	if (task_command == NULL) return false;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <dbg_register_task+0x2c>
 8002438:	2300      	movs	r3, #0
 800243a:	e045      	b.n	80024c8 <dbg_register_task+0xb8>

	if (task_command_len >= COMMAND_LEN_MAX) return false;
 800243c:	7dfb      	ldrb	r3, [r7, #23]
 800243e:	2b09      	cmp	r3, #9
 8002440:	d901      	bls.n	8002446 <dbg_register_task+0x36>
 8002442:	2300      	movs	r3, #0
 8002444:	e040      	b.n	80024c8 <dbg_register_task+0xb8>

	if ((task_pool.taken_task+1) >= task_pool.limit ) return false;
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <dbg_register_task+0xc0>)
 8002448:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800244c:	3301      	adds	r3, #1
 800244e:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <dbg_register_task+0xc0>)
 8002450:	f892 20a1 	ldrb.w	r2, [r2, #161]	; 0xa1
 8002454:	4293      	cmp	r3, r2
 8002456:	db01      	blt.n	800245c <dbg_register_task+0x4c>
 8002458:	2300      	movs	r3, #0
 800245a:	e035      	b.n	80024c8 <dbg_register_task+0xb8>

	task_pool.entry[task_pool.taken_task].args           = args;
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <dbg_register_task+0xc0>)
 800245e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <dbg_register_task+0xc0>)
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	4413      	add	r3, r2
 8002468:	330f      	adds	r3, #15
 800246a:	79fa      	ldrb	r2, [r7, #7]
 800246c:	701a      	strb	r2, [r3, #0]
	task_pool.entry[task_pool.taken_task].handlers.basic = task_routine;
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <dbg_register_task+0xc0>)
 8002470:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4916      	ldr	r1, [pc, #88]	; (80024d0 <dbg_register_task+0xc0>)
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	440b      	add	r3, r1
 800247c:	601a      	str	r2, [r3, #0]
	task_pool.entry[task_pool.taken_task].command_len    = task_command_len;
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <dbg_register_task+0xc0>)
 8002480:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <dbg_register_task+0xc0>)
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	4413      	add	r3, r2
 800248a:	330e      	adds	r3, #14
 800248c:	7dfa      	ldrb	r2, [r7, #23]
 800248e:	701a      	strb	r2, [r3, #0]

	memcpy (task_pool.entry[task_pool.taken_task].command  , task_command,task_command_len);
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <dbg_register_task+0xc0>)
 8002492:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <dbg_register_task+0xc0>)
 800249a:	4413      	add	r3, r2
 800249c:	3304      	adds	r3, #4
 800249e:	7dfa      	ldrb	r2, [r7, #23]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 fdc3 	bl	800402e <memcpy>

	task_pool.taken_task++;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <dbg_register_task+0xc0>)
 80024aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80024ae:	3301      	adds	r3, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <dbg_register_task+0xc0>)
 80024b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	printf("Task %lx with cmd [%s]  registered OK\r\n", (uint32_t)&task_routine, task_command);
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	4619      	mov	r1, r3
 80024c0:	4804      	ldr	r0, [pc, #16]	; (80024d4 <dbg_register_task+0xc4>)
 80024c2:	f001 fdc7 	bl	8004054 <iprintf>
	return true;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200003bc 	.word	0x200003bc
 80024d4:	080050ac 	.word	0x080050ac

080024d8 <dbg_store_packet>:


void dbg_store_packet(char recieved_data)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
	if ((recieved_data == '\r') ||  (recieved_data == '\n')) return;
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	2b0d      	cmp	r3, #13
 80024e6:	d041      	beq.n	800256c <dbg_store_packet+0x94>
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	2b0a      	cmp	r3, #10
 80024ec:	d03e      	beq.n	800256c <dbg_store_packet+0x94>
	if (recieved_data == protocol.init_char) {
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <dbg_store_packet+0xa0>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	79fa      	ldrb	r2, [r7, #7]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d10d      	bne.n	8002514 <dbg_store_packet+0x3c>

		protocol.tail     = false;
 80024f8:	4b1f      	ldr	r3, [pc, #124]	; (8002578 <dbg_store_packet+0xa0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	711a      	strb	r2, [r3, #4]
		protocol.available_msg = false;
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <dbg_store_packet+0xa0>)
 8002500:	7893      	ldrb	r3, [r2, #2]
 8002502:	f36f 0300 	bfc	r3, #0, #1
 8002506:	7093      	strb	r3, [r2, #2]
		protocol.start    = true;
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <dbg_store_packet+0xa0>)
 800250a:	7893      	ldrb	r3, [r2, #2]
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	7093      	strb	r3, [r2, #2]
		return;
 8002512:	e02c      	b.n	800256e <dbg_store_packet+0x96>
	}

	if ((recieved_data == protocol.end_char)  && protocol.start==true) {
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <dbg_store_packet+0xa0>)
 8002516:	785b      	ldrb	r3, [r3, #1]
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d110      	bne.n	8002540 <dbg_store_packet+0x68>
 800251e:	4b16      	ldr	r3, [pc, #88]	; (8002578 <dbg_store_packet+0xa0>)
 8002520:	789b      	ldrb	r3, [r3, #2]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <dbg_store_packet+0x68>

		protocol.available_msg = true;
 800252c:	4a12      	ldr	r2, [pc, #72]	; (8002578 <dbg_store_packet+0xa0>)
 800252e:	7893      	ldrb	r3, [r2, #2]
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	7093      	strb	r3, [r2, #2]
		protocol.start    = false;
 8002536:	4a10      	ldr	r2, [pc, #64]	; (8002578 <dbg_store_packet+0xa0>)
 8002538:	7893      	ldrb	r3, [r2, #2]
 800253a:	f36f 0341 	bfc	r3, #1, #1
 800253e:	7093      	strb	r3, [r2, #2]
	}

	protocol.data_in[ protocol.tail ] = recieved_data;
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <dbg_store_packet+0xa0>)
 8002542:	791b      	ldrb	r3, [r3, #4]
 8002544:	461a      	mov	r2, r3
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <dbg_store_packet+0xa0>)
 8002548:	4413      	add	r3, r2
 800254a:	79fa      	ldrb	r2, [r7, #7]
 800254c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
	protocol.tail++;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <dbg_store_packet+0xa0>)
 8002552:	791b      	ldrb	r3, [r3, #4]
 8002554:	3301      	adds	r3, #1
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <dbg_store_packet+0xa0>)
 800255a:	711a      	strb	r2, [r3, #4]

	if ( protocol.tail >= (UART_RX_BUFFER_SIZE-1))
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <dbg_store_packet+0xa0>)
 800255e:	791b      	ldrb	r3, [r3, #4]
 8002560:	2bff      	cmp	r3, #255	; 0xff
 8002562:	d104      	bne.n	800256e <dbg_store_packet+0x96>
		protocol.tail=false;
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <dbg_store_packet+0xa0>)
 8002566:	2200      	movs	r2, #0
 8002568:	711a      	strb	r2, [r3, #4]
 800256a:	e000      	b.n	800256e <dbg_store_packet+0x96>
	if ((recieved_data == '\r') ||  (recieved_data == '\n')) return;
 800256c:	bf00      	nop
}
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	20000008 	.word	0x20000008

0800257c <dbg_uart_rx_callback>:



void dbg_uart_rx_callback(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_OREFLAG(PTR_UART_DBG);
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <dbg_uart_rx_callback+0x3c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <dbg_uart_rx_callback+0x3c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
	dbg_store_packet((protocol.rx_byte[0]));
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <dbg_uart_rx_callback+0x40>)
 800259c:	78db      	ldrb	r3, [r3, #3]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff99 	bl	80024d8 <dbg_store_packet>
	HAL_UART_Receive_IT(huart, (uint8_t *)protocol.rx_byte, 1);
 80025a6:	2201      	movs	r2, #1
 80025a8:	4905      	ldr	r1, [pc, #20]	; (80025c0 <dbg_uart_rx_callback+0x44>)
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff f9d8 	bl	8001960 <HAL_UART_Receive_IT>

}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000538 	.word	0x20000538
 80025bc:	20000008 	.word	0x20000008
 80025c0:	2000000b 	.word	0x2000000b

080025c4 <dbg_command_scan>:

void dbg_command_scan(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	if (!protocol.available_msg) { return;}
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <dbg_command_scan+0x58>)
 80025ca:	789b      	ldrb	r3, [r3, #2]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01f      	beq.n	8002616 <dbg_command_scan+0x52>

	protocol.available_msg	          = false;
 80025d6:	4a11      	ldr	r2, [pc, #68]	; (800261c <dbg_command_scan+0x58>)
 80025d8:	7893      	ldrb	r3, [r2, #2]
 80025da:	f36f 0300 	bfc	r3, #0, #1
 80025de:	7093      	strb	r3, [r2, #2]
	protocol.data_in[protocol.tail+1] = 0;
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <dbg_command_scan+0x58>)
 80025e2:	791b      	ldrb	r3, [r3, #4]
 80025e4:	3301      	adds	r3, #1
 80025e6:	4a0d      	ldr	r2, [pc, #52]	; (800261c <dbg_command_scan+0x58>)
 80025e8:	4413      	add	r3, r2
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
	protocol.command	          = protocol.data_in[1];
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <dbg_command_scan+0x58>)
 80025f2:	f893 2207 	ldrb.w	r2, [r3, #519]	; 0x207
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <dbg_command_scan+0x58>)
 80025f8:	715a      	strb	r2, [r3, #5]
	memcpy(protocol.parameters,  protocol.data_in,(protocol.tail-1));
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <dbg_command_scan+0x58>)
 80025fc:	791b      	ldrb	r3, [r3, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	461a      	mov	r2, r3
 8002602:	4907      	ldr	r1, [pc, #28]	; (8002620 <dbg_command_scan+0x5c>)
 8002604:	4807      	ldr	r0, [pc, #28]	; (8002624 <dbg_command_scan+0x60>)
 8002606:	f001 fd12 	bl	800402e <memcpy>

	dbg_uart_parser( protocol.parameters) ;
 800260a:	4806      	ldr	r0, [pc, #24]	; (8002624 <dbg_command_scan+0x60>)
 800260c:	f000 f900 	bl	8002810 <dbg_uart_parser>
	dbg_clear_packet();
 8002610:	f000 f80a 	bl	8002628 <dbg_clear_packet>
 8002614:	e000      	b.n	8002618 <dbg_command_scan+0x54>
	if (!protocol.available_msg) { return;}
 8002616:	bf00      	nop

}
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000008 	.word	0x20000008
 8002620:	2000020e 	.word	0x2000020e
 8002624:	2000010e 	.word	0x2000010e

08002628 <dbg_clear_packet>:


static void dbg_clear_packet(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	protocol.tail		= false;
 800262c:	4b10      	ldr	r3, [pc, #64]	; (8002670 <dbg_clear_packet+0x48>)
 800262e:	2200      	movs	r2, #0
 8002630:	711a      	strb	r2, [r3, #4]
	protocol.start		= false;
 8002632:	4a0f      	ldr	r2, [pc, #60]	; (8002670 <dbg_clear_packet+0x48>)
 8002634:	7893      	ldrb	r3, [r2, #2]
 8002636:	f36f 0341 	bfc	r3, #1, #1
 800263a:	7093      	strb	r3, [r2, #2]
	protocol.command	= false;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <dbg_clear_packet+0x48>)
 800263e:	2200      	movs	r2, #0
 8002640:	715a      	strb	r2, [r3, #5]
	protocol.end		= false;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <dbg_clear_packet+0x48>)
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
	protocol.available_msg	= false;
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <dbg_clear_packet+0x48>)
 800264c:	7893      	ldrb	r3, [r2, #2]
 800264e:	f36f 0300 	bfc	r3, #0, #1
 8002652:	7093      	strb	r3, [r2, #2]

	memset(protocol.parameters, false, sizeof(protocol.parameters));
 8002654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002658:	2100      	movs	r1, #0
 800265a:	4806      	ldr	r0, [pc, #24]	; (8002674 <dbg_clear_packet+0x4c>)
 800265c:	f001 fcf2 	bl	8004044 <memset>
	memset(protocol.data_in   , false, sizeof(protocol.data_in));
 8002660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002664:	2100      	movs	r1, #0
 8002666:	4804      	ldr	r0, [pc, #16]	; (8002678 <dbg_clear_packet+0x50>)
 8002668:	f001 fcec 	bl	8004044 <memset>
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000008 	.word	0x20000008
 8002674:	2000010e 	.word	0x2000010e
 8002678:	2000020e 	.word	0x2000020e

0800267c <dbg_has_arguments>:


static uint16_t dbg_has_arguments(uint8_t *msg)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	uint8_t *p_char = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
	p_char = (uint8_t*) strchr((char *)msg,' ');
 8002688:	2120      	movs	r1, #32
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f001 fe0c 	bl	80042a8 <strchr>
 8002690:	60f8      	str	r0, [r7, #12]
	if (p_char)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <dbg_has_arguments+0x2c>
		return  ascii_to_to_hex(p_char+1, 'd');
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3301      	adds	r3, #1
 800269c:	2164      	movs	r1, #100	; 0x64
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f831 	bl	8002706 <ascii_to_to_hex>
 80026a4:	4603      	mov	r3, r0
 80026a6:	e000      	b.n	80026aa <dbg_has_arguments+0x2e>
	return 0;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <hexascii_to_hex>:


static uint8_t hexascii_to_hex( char  hex_char) {
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]

 	if ( hex_char <= 'F' && hex_char >= 'A') return (hex_char -'A')+10;
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	2b46      	cmp	r3, #70	; 0x46
 80026c0:	d806      	bhi.n	80026d0 <hexascii_to_hex+0x1e>
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d903      	bls.n	80026d0 <hexascii_to_hex+0x1e>
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	3b37      	subs	r3, #55	; 0x37
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e014      	b.n	80026fa <hexascii_to_hex+0x48>

 	if ( hex_char <= 'f' && hex_char >= 'a') return (hex_char -'a')+10;
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	2b66      	cmp	r3, #102	; 0x66
 80026d4:	d806      	bhi.n	80026e4 <hexascii_to_hex+0x32>
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	2b60      	cmp	r3, #96	; 0x60
 80026da:	d903      	bls.n	80026e4 <hexascii_to_hex+0x32>
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	3b57      	subs	r3, #87	; 0x57
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e00a      	b.n	80026fa <hexascii_to_hex+0x48>

 	if ( hex_char <= '9' && hex_char >= '0') return (hex_char -'0');
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	2b39      	cmp	r3, #57	; 0x39
 80026e8:	d806      	bhi.n	80026f8 <hexascii_to_hex+0x46>
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b2f      	cmp	r3, #47	; 0x2f
 80026ee:	d903      	bls.n	80026f8 <hexascii_to_hex+0x46>
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	3b30      	subs	r3, #48	; 0x30
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e000      	b.n	80026fa <hexascii_to_hex+0x48>

 	return INVALID_DIGIT_CONVERTION;
 80026f8:	23ff      	movs	r3, #255	; 0xff
 }
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <ascii_to_to_hex>:


static uint16_t ascii_to_to_hex(uint8_t *stream_pointer, uint8_t convertion_type)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	70fb      	strb	r3, [r7, #3]
	uint16_t hex_result        = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	81fb      	strh	r3, [r7, #14]
 	uint8_t stream_length      = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	737b      	strb	r3, [r7, #13]
 	uint16_t converted_digit   = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	813b      	strh	r3, [r7, #8]
 	uint16_t convertion_offset = 0x10;
 800271e:	2310      	movs	r3, #16
 8002720:	817b      	strh	r3, [r7, #10]

 	if (convertion_type != 'h')
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	2b68      	cmp	r3, #104	; 0x68
 8002726:	d01a      	beq.n	800275e <ascii_to_to_hex+0x58>
 		convertion_offset = 0x0A;
 8002728:	230a      	movs	r3, #10
 800272a:	817b      	strh	r3, [r7, #10]

 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 800272c:	e017      	b.n	800275e <ascii_to_to_hex+0x58>

 		converted_digit = ( hexascii_to_hex(*stream_pointer));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ffbd 	bl	80026b2 <hexascii_to_hex>
 8002738:	4603      	mov	r3, r0
 800273a:	813b      	strh	r3, [r7, #8]
 		if (INVALID_DIGIT_CONVERTION == converted_digit) {
 800273c:	893b      	ldrh	r3, [r7, #8]
 800273e:	2bff      	cmp	r3, #255	; 0xff
 8002740:	d015      	beq.n	800276e <ascii_to_to_hex+0x68>
			break;
		}
		hex_result = (hex_result * convertion_offset) + converted_digit;
 8002742:	89fa      	ldrh	r2, [r7, #14]
 8002744:	897b      	ldrh	r3, [r7, #10]
 8002746:	fb12 f303 	smulbb	r3, r2, r3
 800274a:	b29a      	uxth	r2, r3
 800274c:	893b      	ldrh	r3, [r7, #8]
 800274e:	4413      	add	r3, r2
 8002750:	81fb      	strh	r3, [r7, #14]
		stream_pointer++;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3301      	adds	r3, #1
 8002756:	607b      	str	r3, [r7, #4]
		stream_length++;
 8002758:	7b7b      	ldrb	r3, [r7, #13]
 800275a:	3301      	adds	r3, #1
 800275c:	737b      	strb	r3, [r7, #13]
 	while((stream_length != MAX_DIGITS) &&  (*stream_pointer) ) {
 800275e:	7b7b      	ldrb	r3, [r7, #13]
 8002760:	2b05      	cmp	r3, #5
 8002762:	d005      	beq.n	8002770 <ascii_to_to_hex+0x6a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e0      	bne.n	800272e <ascii_to_to_hex+0x28>
 800276c:	e000      	b.n	8002770 <ascii_to_to_hex+0x6a>
			break;
 800276e:	bf00      	nop
	}
	return hex_result;
 8002770:	89fb      	ldrh	r3, [r7, #14]
  }
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <dbg_init>:



void dbg_init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
	__HAL_UART_CLEAR_OREFLAG(PTR_UART_DBG);
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <dbg_init+0x80>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <dbg_init+0x80>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
	__HAL_UART_CLEAR_NEFLAG(PTR_UART_DBG);
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <dbg_init+0x80>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	4b15      	ldr	r3, [pc, #84]	; (80027fc <dbg_init+0x80>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_UART_CLEAR_FEFLAG(PTR_UART_DBG);
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <dbg_init+0x80>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <dbg_init+0x80>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
	__HAL_UART_DISABLE_IT(PTR_UART_DBG, UART_IT_ERR);
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <dbg_init+0x80>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <dbg_init+0x80>)
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	6952      	ldr	r2, [r2, #20]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	615a      	str	r2, [r3, #20]

	UART_HANDLER.RxCpltCallback = dbg_uart_rx_callback;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <dbg_init+0x80>)
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <dbg_init+0x84>)
 80027d8:	64da      	str	r2, [r3, #76]	; 0x4c
	UART_HANDLER.ErrorCallback  = dbg_uart_error_call_back;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <dbg_init+0x80>)
 80027dc:	4a09      	ldr	r2, [pc, #36]	; (8002804 <dbg_init+0x88>)
 80027de:	651a      	str	r2, [r3, #80]	; 0x50

	HAL_UART_Receive_IT(PTR_UART_DBG,(uint8_t *)protocol.rx_byte,1);
 80027e0:	2201      	movs	r2, #1
 80027e2:	4909      	ldr	r1, [pc, #36]	; (8002808 <dbg_init+0x8c>)
 80027e4:	4805      	ldr	r0, [pc, #20]	; (80027fc <dbg_init+0x80>)
 80027e6:	f7ff f8bb 	bl	8001960 <HAL_UART_Receive_IT>
	task_pool.limit = MAX_TASK;
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <dbg_init+0x90>)
 80027ec:	220a      	movs	r2, #10
 80027ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000538 	.word	0x20000538
 8002800:	0800257d 	.word	0x0800257d
 8002804:	080023fd 	.word	0x080023fd
 8002808:	2000000b 	.word	0x2000000b
 800280c:	200003bc 	.word	0x200003bc

08002810 <dbg_uart_parser>:
}



void dbg_uart_parser(uint8_t *msg)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	uint8_t task_id = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]
	uint16_t args   = dbg_has_arguments(msg);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff2d 	bl	800267c <dbg_has_arguments>
 8002822:	4603      	mov	r3, r0
 8002824:	82bb      	strh	r3, [r7, #20]
	uint8_t cmd_len;
	uint8_t *cmd_str;
	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 8002826:	2300      	movs	r3, #0
 8002828:	75fb      	strb	r3, [r7, #23]
 800282a:	e022      	b.n	8002872 <dbg_uart_parser+0x62>

		cmd_str = task_pool.entry[task_id].command;
 800282c:	7dfb      	ldrb	r3, [r7, #23]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4a15      	ldr	r2, [pc, #84]	; (8002888 <dbg_uart_parser+0x78>)
 8002832:	4413      	add	r3, r2
 8002834:	3304      	adds	r3, #4
 8002836:	613b      	str	r3, [r7, #16]
		cmd_len = task_pool.entry[task_id].command_len;
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	4a13      	ldr	r2, [pc, #76]	; (8002888 <dbg_uart_parser+0x78>)
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	4413      	add	r3, r2
 8002840:	330e      	adds	r3, #14
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	73fb      	strb	r3, [r7, #15]

		if ( !STR_CMP(msg ,cmd_str,cmd_len))
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	461a      	mov	r2, r3
 800284a:	6939      	ldr	r1, [r7, #16]
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f001 fbdf 	bl	8004010 <memcmp>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d108      	bne.n	800286a <dbg_uart_parser+0x5a>
			continue;
		task_pool.entry[task_id].handlers.uint_args(args);
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <dbg_uart_parser+0x78>)
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4413      	add	r3, r2
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	8aba      	ldrh	r2, [r7, #20]
 8002864:	4610      	mov	r0, r2
 8002866:	4798      	blx	r3
 8002868:	e000      	b.n	800286c <dbg_uart_parser+0x5c>
			continue;
 800286a:	bf00      	nop
	for (task_id = 0; task_id < task_pool.taken_task; task_id++) {
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	3301      	adds	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <dbg_uart_parser+0x78>)
 8002874:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002878:	7dfa      	ldrb	r2, [r7, #23]
 800287a:	429a      	cmp	r2, r3
 800287c:	d3d6      	bcc.n	800282c <dbg_uart_parser+0x1c>


	}
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200003bc 	.word	0x200003bc

0800288c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002890:	f7fd fe8e 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002894:	f000 f87c 	bl	8002990 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  	setvbuf(stdout, NULL, _IONBF, 0);
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <main+0xb4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6898      	ldr	r0, [r3, #8]
 800289e:	2300      	movs	r3, #0
 80028a0:	2202      	movs	r2, #2
 80028a2:	2100      	movs	r1, #0
 80028a4:	f001 fc52 	bl	800414c <setvbuf>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028a8:	f000 fa04 	bl	8002cb4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80028ac:	f000 f95a 	bl	8002b64 <MX_USART1_UART_Init>
  MX_UART5_Init();
 80028b0:	f000 f904 	bl	8002abc <MX_UART5_Init>
  MX_USART2_UART_Init();
 80028b4:	f000 f980 	bl	8002bb8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80028b8:	f000 f9a8 	bl	8002c0c <MX_USART3_UART_Init>
  MX_UART4_Init();
 80028bc:	f000 f8d4 	bl	8002a68 <MX_UART4_Init>
  MX_USART6_UART_Init();
 80028c0:	f000 f9ce 	bl	8002c60 <MX_USART6_UART_Init>
  MX_UART8_Init();
 80028c4:	f000 f924 	bl	8002b10 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  	dbg_init();
 80028c8:	f7ff ff58 	bl	800277c <dbg_init>
	printf("KIR11 multi RFID test %s %s\r\n",__DATE__, __TIME__ );
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <main+0xb8>)
 80028ce:	491e      	ldr	r1, [pc, #120]	; (8002948 <main+0xbc>)
 80028d0:	481e      	ldr	r0, [pc, #120]	; (800294c <main+0xc0>)
 80028d2:	f001 fbbf 	bl	8004054 <iprintf>

	printf("Connections,  \r\n" );
 80028d6:	481e      	ldr	r0, [pc, #120]	; (8002950 <main+0xc4>)
 80028d8:	f001 fc30 	bl	800413c <puts>

	printf("UART2  rx : PA3   tx : PD5  \r\n");
 80028dc:	481d      	ldr	r0, [pc, #116]	; (8002954 <main+0xc8>)
 80028de:	f001 fc2d 	bl	800413c <puts>
	printf("UART3  rx : PC11  tx : PC10 \r\n");
 80028e2:	481d      	ldr	r0, [pc, #116]	; (8002958 <main+0xcc>)
 80028e4:	f001 fc2a 	bl	800413c <puts>
	printf("UART8  rx : PE0   tx : PE1  \r\n");
 80028e8:	481c      	ldr	r0, [pc, #112]	; (800295c <main+0xd0>)
 80028ea:	f001 fc27 	bl	800413c <puts>
	printf("UART5  rx : PD2   tx : PC12 \r\n");
 80028ee:	481c      	ldr	r0, [pc, #112]	; (8002960 <main+0xd4>)
 80028f0:	f001 fc24 	bl	800413c <puts>
	printf("UART6  rx : PG9   tx : PC6  \r\n\r\n");
 80028f4:	481b      	ldr	r0, [pc, #108]	; (8002964 <main+0xd8>)
 80028f6:	f001 fc21 	bl	800413c <puts>

	printf("Mux pins  CTRL0:PE2, CTRL1:PE3, CTRL2:PE4, CTRL3:PE5 \r\n");
 80028fa:	481b      	ldr	r0, [pc, #108]	; (8002968 <main+0xdc>)
 80028fc:	f001 fc1e 	bl	800413c <puts>

	//printf("For command list type #help* \r\n");

	mifare_init();
 8002900:	f000 fc9a 	bl	8003238 <mifare_init>
	dbg_register_task(mifare_choose_mode,"option",1);
 8002904:	2201      	movs	r2, #1
 8002906:	4919      	ldr	r1, [pc, #100]	; (800296c <main+0xe0>)
 8002908:	4819      	ldr	r0, [pc, #100]	; (8002970 <main+0xe4>)
 800290a:	f7ff fd81 	bl	8002410 <dbg_register_task>
	dbg_register_task(mifare_sample_period_change,"sample",1);
 800290e:	2201      	movs	r2, #1
 8002910:	4918      	ldr	r1, [pc, #96]	; (8002974 <main+0xe8>)
 8002912:	4819      	ldr	r0, [pc, #100]	; (8002978 <main+0xec>)
 8002914:	f7ff fd7c 	bl	8002410 <dbg_register_task>
	dbg_register_task(mifare_rf_field,"RFfield",1);
 8002918:	2201      	movs	r2, #1
 800291a:	4918      	ldr	r1, [pc, #96]	; (800297c <main+0xf0>)
 800291c:	4818      	ldr	r0, [pc, #96]	; (8002980 <main+0xf4>)
 800291e:	f7ff fd77 	bl	8002410 <dbg_register_task>
	dbg_register_task(mifare_read_single_board,"read",0);
 8002922:	2200      	movs	r2, #0
 8002924:	4917      	ldr	r1, [pc, #92]	; (8002984 <main+0xf8>)
 8002926:	4818      	ldr	r0, [pc, #96]	; (8002988 <main+0xfc>)
 8002928:	f7ff fd72 	bl	8002410 <dbg_register_task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	dbg_command_scan();
 800292c:	f7ff fe4a 	bl	80025c4 <dbg_command_scan>
    /* USER CODE BEGIN 3 */
	LD4_GPIO_Port->ODR ^=LD4_Pin;
 8002930:	4a16      	ldr	r2, [pc, #88]	; (800298c <main+0x100>)
 8002932:	4b16      	ldr	r3, [pc, #88]	; (800298c <main+0x100>)
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800293a:	6153      	str	r3, [r2, #20]
	dbg_command_scan();
 800293c:	e7f6      	b.n	800292c <main+0xa0>
 800293e:	bf00      	nop
 8002940:	20000328 	.word	0x20000328
 8002944:	080050d4 	.word	0x080050d4
 8002948:	080050e0 	.word	0x080050e0
 800294c:	080050ec 	.word	0x080050ec
 8002950:	0800510c 	.word	0x0800510c
 8002954:	0800511c 	.word	0x0800511c
 8002958:	0800513c 	.word	0x0800513c
 800295c:	0800515c 	.word	0x0800515c
 8002960:	0800517c 	.word	0x0800517c
 8002964:	0800519c 	.word	0x0800519c
 8002968:	080051bc 	.word	0x080051bc
 800296c:	080051f4 	.word	0x080051f4
 8002970:	080037cd 	.word	0x080037cd
 8002974:	080051fc 	.word	0x080051fc
 8002978:	080033f1 	.word	0x080033f1
 800297c:	08005204 	.word	0x08005204
 8002980:	0800348d 	.word	0x0800348d
 8002984:	0800520c 	.word	0x0800520c
 8002988:	08003549 	.word	0x08003549
 800298c:	40021800 	.word	0x40021800

08002990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b094      	sub	sp, #80	; 0x50
 8002994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002996:	f107 0320 	add.w	r3, r7, #32
 800299a:	2230      	movs	r2, #48	; 0x30
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 fb50 	bl	8004044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <SystemClock_Config+0xd0>)
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <SystemClock_Config+0xd0>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6413      	str	r3, [r2, #64]	; 0x40
 80029c4:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <SystemClock_Config+0xd0>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80029d0:	2300      	movs	r3, #0
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	4a23      	ldr	r2, [pc, #140]	; (8002a64 <SystemClock_Config+0xd4>)
 80029d6:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <SystemClock_Config+0xd4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <SystemClock_Config+0xd4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029f0:	2302      	movs	r3, #2
 80029f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029f8:	2310      	movs	r3, #16
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029fc:	2302      	movs	r3, #2
 80029fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a00:	2300      	movs	r3, #0
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a04:	2308      	movs	r3, #8
 8002a06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8002a08:	2340      	movs	r3, #64	; 0x40
 8002a0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a10:	2304      	movs	r3, #4
 8002a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a14:	f107 0320 	add.w	r3, r7, #32
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe f931 	bl	8000c80 <HAL_RCC_OscConfig>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002a24:	f000 fbb2 	bl	800318c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a28:	230f      	movs	r3, #15
 8002a2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fb5c 	bl	8001104 <HAL_RCC_ClockConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002a52:	f000 fb9b 	bl	800318c <Error_Handler>
  }
}
 8002a56:	bf00      	nop
 8002a58:	3750      	adds	r7, #80	; 0x50
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40007000 	.word	0x40007000

08002a68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <MX_UART4_Init+0x50>)
 8002a70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a8e:	220c      	movs	r2, #12
 8002a90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_UART4_Init+0x4c>)
 8002aa0:	f7fe fe6c 	bl	800177c <HAL_UART_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002aaa:	f000 fb6f 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200006bc 	.word	0x200006bc
 8002ab8:	40004c00 	.word	0x40004c00

08002abc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <MX_UART5_Init+0x4c>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <MX_UART5_Init+0x50>)
 8002ac4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <MX_UART5_Init+0x4c>)
 8002ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002acc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <MX_UART5_Init+0x4c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_UART5_Init+0x4c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <MX_UART5_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_UART5_Init+0x4c>)
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <MX_UART5_Init+0x4c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <MX_UART5_Init+0x4c>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002af2:	4805      	ldr	r0, [pc, #20]	; (8002b08 <MX_UART5_Init+0x4c>)
 8002af4:	f7fe fe42 	bl	800177c <HAL_UART_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002afe:	f000 fb45 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200004cc 	.word	0x200004cc
 8002b0c:	40005000 	.word	0x40005000

08002b10 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_UART8_Init+0x4c>)
 8002b16:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <MX_UART8_Init+0x50>)
 8002b18:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <MX_UART8_Init+0x4c>)
 8002b1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b20:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <MX_UART8_Init+0x4c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <MX_UART8_Init+0x4c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <MX_UART8_Init+0x4c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <MX_UART8_Init+0x4c>)
 8002b36:	220c      	movs	r2, #12
 8002b38:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <MX_UART8_Init+0x4c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <MX_UART8_Init+0x4c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002b46:	4805      	ldr	r0, [pc, #20]	; (8002b5c <MX_UART8_Init+0x4c>)
 8002b48:	f7fe fe18 	bl	800177c <HAL_UART_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002b52:	f000 fb1b 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200005e4 	.word	0x200005e4
 8002b60:	40007c00 	.word	0x40007c00

08002b64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <MX_USART1_UART_Init+0x50>)
 8002b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b9a:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <MX_USART1_UART_Init+0x4c>)
 8002b9c:	f7fe fdee 	bl	800177c <HAL_UART_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ba6:	f000 faf1 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000538 	.word	0x20000538
 8002bb4:	40011000 	.word	0x40011000

08002bb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <MX_USART2_UART_Init+0x50>)
 8002bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bf0:	f7fe fdc4 	bl	800177c <HAL_UART_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bfa:	f000 fac7 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000728 	.word	0x20000728
 8002c08:	40004400 	.word	0x40004400

08002c0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c12:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <MX_USART3_UART_Init+0x50>)
 8002c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c32:	220c      	movs	r2, #12
 8002c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_USART3_UART_Init+0x4c>)
 8002c44:	f7fe fd9a 	bl	800177c <HAL_UART_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c4e:	f000 fa9d 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000460 	.word	0x20000460
 8002c5c:	40004800 	.word	0x40004800

08002c60 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <MX_USART6_UART_Init+0x4c>)
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <MX_USART6_UART_Init+0x50>)
 8002c68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <MX_USART6_UART_Init+0x4c>)
 8002c6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c72:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <MX_USART6_UART_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <MX_USART6_UART_Init+0x4c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <MX_USART6_UART_Init+0x4c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <MX_USART6_UART_Init+0x4c>)
 8002c86:	220c      	movs	r2, #12
 8002c88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <MX_USART6_UART_Init+0x4c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <MX_USART6_UART_Init+0x4c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <MX_USART6_UART_Init+0x4c>)
 8002c98:	f7fe fd70 	bl	800177c <HAL_UART_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002ca2:	f000 fa73 	bl	800318c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000650 	.word	0x20000650
 8002cb0:	40011400 	.word	0x40011400

08002cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08e      	sub	sp, #56	; 0x38
 8002cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
 8002cc6:	60da      	str	r2, [r3, #12]
 8002cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
 8002cce:	4ab1      	ldr	r2, [pc, #708]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002cd0:	4bb0      	ldr	r3, [pc, #704]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	f043 0310 	orr.w	r3, r3, #16
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4bae      	ldr	r3, [pc, #696]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	623b      	str	r3, [r7, #32]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	4aaa      	ldr	r2, [pc, #680]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002cec:	4ba9      	ldr	r3, [pc, #676]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4ba7      	ldr	r3, [pc, #668]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	4aa3      	ldr	r2, [pc, #652]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d08:	4ba2      	ldr	r3, [pc, #648]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	f043 0320 	orr.w	r3, r3, #32
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4ba0      	ldr	r3, [pc, #640]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	4a9c      	ldr	r2, [pc, #624]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d24:	4b9b      	ldr	r3, [pc, #620]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b99      	ldr	r3, [pc, #612]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	4a95      	ldr	r2, [pc, #596]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d40:	4b94      	ldr	r3, [pc, #592]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b92      	ldr	r3, [pc, #584]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	4a8e      	ldr	r2, [pc, #568]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d5c:	4b8d      	ldr	r3, [pc, #564]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b8b      	ldr	r3, [pc, #556]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	4a87      	ldr	r2, [pc, #540]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d78:	4b86      	ldr	r3, [pc, #536]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b84      	ldr	r3, [pc, #528]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	4a80      	ldr	r2, [pc, #512]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d94:	4b7f      	ldr	r3, [pc, #508]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b7d      	ldr	r3, [pc, #500]	; (8002f94 <MX_GPIO_Init+0x2e0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MUX_S0_Pin|MUX_S1_Pin|MUX_S2_Pin|MUX_S3_Pin, GPIO_PIN_RESET);
 8002daa:	2200      	movs	r2, #0
 8002dac:	213c      	movs	r1, #60	; 0x3c
 8002dae:	487a      	ldr	r0, [pc, #488]	; (8002f98 <MX_GPIO_Init+0x2e4>)
 8002db0:	f7fd ff4c 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002db4:	2200      	movs	r2, #0
 8002db6:	2116      	movs	r1, #22
 8002db8:	4878      	ldr	r0, [pc, #480]	; (8002f9c <MX_GPIO_Init+0x2e8>)
 8002dba:	f7fd ff47 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	4877      	ldr	r0, [pc, #476]	; (8002fa0 <MX_GPIO_Init+0x2ec>)
 8002dc4:	f7fd ff42 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002dce:	4875      	ldr	r0, [pc, #468]	; (8002fa4 <MX_GPIO_Init+0x2f0>)
 8002dd0:	f7fd ff3c 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002dda:	4873      	ldr	r0, [pc, #460]	; (8002fa8 <MX_GPIO_Init+0x2f4>)
 8002ddc:	f7fd ff36 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX_S0_Pin MUX_S1_Pin MUX_S2_Pin MUX_S3_Pin */
  GPIO_InitStruct.Pin = MUX_S0_Pin|MUX_S1_Pin|MUX_S2_Pin|MUX_S3_Pin;
 8002de0:	233c      	movs	r3, #60	; 0x3c
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df4:	4619      	mov	r1, r3
 8002df6:	4868      	ldr	r0, [pc, #416]	; (8002f98 <MX_GPIO_Init+0x2e4>)
 8002df8:	f7fd fd7e 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002dfc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e0e:	230c      	movs	r3, #12
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e16:	4619      	mov	r1, r3
 8002e18:	4864      	ldr	r0, [pc, #400]	; (8002fac <MX_GPIO_Init+0x2f8>)
 8002e1a:	f7fd fd6d 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002e1e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002e30:	2305      	movs	r3, #5
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	485c      	ldr	r0, [pc, #368]	; (8002fac <MX_GPIO_Init+0x2f8>)
 8002e3c:	f7fd fd5c 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8002e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e52:	230e      	movs	r3, #14
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4853      	ldr	r0, [pc, #332]	; (8002fac <MX_GPIO_Init+0x2f8>)
 8002e5e:	f7fd fd4b 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002e62:	2301      	movs	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e72:	230c      	movs	r3, #12
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4847      	ldr	r0, [pc, #284]	; (8002f9c <MX_GPIO_Init+0x2e8>)
 8002e7e:	f7fd fd3b 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002e82:	2316      	movs	r3, #22
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e86:	2301      	movs	r3, #1
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e96:	4619      	mov	r1, r3
 8002e98:	4840      	ldr	r0, [pc, #256]	; (8002f9c <MX_GPIO_Init+0x2e8>)
 8002e9a:	f7fd fd2d 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin|TP_INT1_Pin;
 8002e9e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ea4:	4b42      	ldr	r3, [pc, #264]	; (8002fb0 <MX_GPIO_Init+0x2fc>)
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	483b      	ldr	r0, [pc, #236]	; (8002fa0 <MX_GPIO_Init+0x2ec>)
 8002eb4:	f7fd fd20 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_Pin G2_Pin R4_Pin R5_Pin */
  GPIO_InitStruct.Pin = VSYNC_Pin|G2_Pin|R4_Pin|R5_Pin;
 8002eb8:	f641 0350 	movw	r3, #6224	; 0x1850
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eca:	230e      	movs	r3, #14
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4832      	ldr	r0, [pc, #200]	; (8002fa0 <MX_GPIO_Init+0x2ec>)
 8002ed6:	f7fd fd0f 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eee:	4619      	mov	r1, r3
 8002ef0:	482b      	ldr	r0, [pc, #172]	; (8002fa0 <MX_GPIO_Init+0x2ec>)
 8002ef2:	f7fd fd01 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002efa:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <MX_GPIO_Init+0x2fc>)
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f06:	4619      	mov	r1, r3
 8002f08:	4824      	ldr	r0, [pc, #144]	; (8002f9c <MX_GPIO_Init+0x2e8>)
 8002f0a:	f7fd fcf5 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f1e:	2309      	movs	r3, #9
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	4619      	mov	r1, r3
 8002f28:	4822      	ldr	r0, [pc, #136]	; (8002fb4 <MX_GPIO_Init+0x300>)
 8002f2a:	f7fd fce5 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3e:	4619      	mov	r1, r3
 8002f40:	481c      	ldr	r0, [pc, #112]	; (8002fb4 <MX_GPIO_Init+0x300>)
 8002f42:	f7fd fcd9 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002f46:	f248 1333 	movw	r3, #33075	; 0x8133
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f54:	2303      	movs	r3, #3
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f58:	230c      	movs	r3, #12
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f60:	4619      	mov	r1, r3
 8002f62:	4811      	ldr	r0, [pc, #68]	; (8002fa8 <MX_GPIO_Init+0x2f4>)
 8002f64:	f7fd fcc8 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002f68:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f76:	2303      	movs	r3, #3
 8002f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f82:	4619      	mov	r1, r3
 8002f84:	4804      	ldr	r0, [pc, #16]	; (8002f98 <MX_GPIO_Init+0x2e4>)
 8002f86:	f7fd fcb7 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002f8a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	e011      	b.n	8002fb8 <MX_GPIO_Init+0x304>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40020800 	.word	0x40020800
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	40020c00 	.word	0x40020c00
 8002fa8:	40021800 	.word	0x40021800
 8002fac:	40021400 	.word	0x40021400
 8002fb0:	10120000 	.word	0x10120000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fc2:	230e      	movs	r3, #14
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fca:	4619      	mov	r1, r3
 8002fcc:	486a      	ldr	r0, [pc, #424]	; (8003178 <MX_GPIO_Init+0x4c4>)
 8002fce:	f7fd fc93 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002fd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4864      	ldr	r0, [pc, #400]	; (8003178 <MX_GPIO_Init+0x4c4>)
 8002fe8:	f7fd fc86 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002fec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002ffe:	230c      	movs	r3, #12
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003006:	4619      	mov	r1, r3
 8003008:	485b      	ldr	r0, [pc, #364]	; (8003178 <MX_GPIO_Init+0x4c4>)
 800300a:	f7fd fc75 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800300e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003020:	230c      	movs	r3, #12
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003028:	4619      	mov	r1, r3
 800302a:	4854      	ldr	r0, [pc, #336]	; (800317c <MX_GPIO_Init+0x4c8>)
 800302c:	f7fd fc64 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003036:	2300      	movs	r3, #0
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800303e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003042:	4619      	mov	r1, r3
 8003044:	484d      	ldr	r0, [pc, #308]	; (800317c <MX_GPIO_Init+0x4c8>)
 8003046:	f7fd fc57 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800304a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003050:	2301      	movs	r3, #1
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	2300      	movs	r3, #0
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800305c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003060:	4619      	mov	r1, r3
 8003062:	4846      	ldr	r0, [pc, #280]	; (800317c <MX_GPIO_Init+0x4c8>)
 8003064:	f7fd fc48 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003068:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800307a:	230e      	movs	r3, #14
 800307c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800307e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003082:	4619      	mov	r1, r3
 8003084:	483e      	ldr	r0, [pc, #248]	; (8003180 <MX_GPIO_Init+0x4cc>)
 8003086:	f7fd fc37 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : G6_Pin */
  GPIO_InitStruct.Pin = G6_Pin;
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003096:	2300      	movs	r3, #0
 8003098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800309a:	230e      	movs	r3, #14
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G6_GPIO_Port, &GPIO_InitStruct);
 800309e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a2:	4619      	mov	r1, r3
 80030a4:	4837      	ldr	r0, [pc, #220]	; (8003184 <MX_GPIO_Init+0x4d0>)
 80030a6:	f7fd fc27 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80030aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030b0:	2312      	movs	r3, #18
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030b4:	2301      	movs	r3, #1
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b8:	2300      	movs	r3, #0
 80030ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030bc:	2304      	movs	r3, #4
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80030c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c4:	4619      	mov	r1, r3
 80030c6:	482f      	ldr	r0, [pc, #188]	; (8003184 <MX_GPIO_Init+0x4d0>)
 80030c8:	f7fd fc16 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80030cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030d2:	2312      	movs	r3, #18
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d6:	2301      	movs	r3, #1
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030de:	2304      	movs	r3, #4
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80030e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e6:	4619      	mov	r1, r3
 80030e8:	4827      	ldr	r0, [pc, #156]	; (8003188 <MX_GPIO_Init+0x4d4>)
 80030ea:	f7fd fc05 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80030ee:	2340      	movs	r3, #64	; 0x40
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fa:	2300      	movs	r3, #0
 80030fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030fe:	230e      	movs	r3, #14
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8003102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003106:	4619      	mov	r1, r3
 8003108:	481c      	ldr	r0, [pc, #112]	; (800317c <MX_GPIO_Init+0x4c8>)
 800310a:	f7fd fbf5 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800310e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311c:	2300      	movs	r3, #0
 800311e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003120:	2309      	movs	r3, #9
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003128:	4619      	mov	r1, r3
 800312a:	4815      	ldr	r0, [pc, #84]	; (8003180 <MX_GPIO_Init+0x4cc>)
 800312c:	f7fd fbe4 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8003130:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003136:	2301      	movs	r3, #1
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313e:	2300      	movs	r3, #0
 8003140:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003146:	4619      	mov	r1, r3
 8003148:	480d      	ldr	r0, [pc, #52]	; (8003180 <MX_GPIO_Init+0x4cc>)
 800314a:	f7fd fbd5 	bl	80008f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800314e:	2360      	movs	r3, #96	; 0x60
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315a:	2303      	movs	r3, #3
 800315c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800315e:	230c      	movs	r3, #12
 8003160:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003166:	4619      	mov	r1, r3
 8003168:	4803      	ldr	r0, [pc, #12]	; (8003178 <MX_GPIO_Init+0x4c4>)
 800316a:	f7fd fbc5 	bl	80008f8 <HAL_GPIO_Init>

}
 800316e:	bf00      	nop
 8003170:	3738      	adds	r7, #56	; 0x38
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40020400 	.word	0x40020400
 800317c:	40020c00 	.word	0x40020c00
 8003180:	40021800 	.word	0x40021800
 8003184:	40020800 	.word	0x40020800
 8003188:	40020000 	.word	0x40020000

0800318c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <mifare_register_uart>:
	} while( (index++) < MAX_MIFARE_BOARD);
}



void mifare_register_uart(UART_HandleTypeDef *huart, uint8_t id){
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]

	mifare_service.reader[id].instance        = huart->Instance;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	4911      	ldr	r1, [pc, #68]	; (80031f4 <mifare_register_uart+0x58>)
 80031b0:	2074      	movs	r0, #116	; 0x74
 80031b2:	fb00 f303 	mul.w	r3, r0, r3
 80031b6:	440b      	add	r3, r1
 80031b8:	3354      	adds	r3, #84	; 0x54
 80031ba:	601a      	str	r2, [r3, #0]
	mifare_service.reader[id].handler         = huart;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <mifare_register_uart+0x58>)
 80031c0:	2174      	movs	r1, #116	; 0x74
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3358      	adds	r3, #88	; 0x58
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	601a      	str	r2, [r3, #0]
	mifare_service.reader[id].payload.max_len = PAYLOAD_MAX_LEN;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	4a08      	ldr	r2, [pc, #32]	; (80031f4 <mifare_register_uart+0x58>)
 80031d2:	2174      	movs	r1, #116	; 0x74
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	3351      	adds	r3, #81	; 0x51
 80031dc:	2250      	movs	r2, #80	; 0x50
 80031de:	701a      	strb	r2, [r3, #0]
	huart->RxCpltCallback = mifare_irq_handler;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <mifare_register_uart+0x5c>)
 80031e4:	64da      	str	r2, [r3, #76]	; 0x4c

}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	200007f8 	.word	0x200007f8
 80031f8:	08003259 	.word	0x08003259

080031fc <mifare_enable_reader_irq>:
	mifare_service.reader[id].handler         = 0;
}


void mifare_enable_reader_irq(uint8_t id)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive_IT(mifare_service.reader[id].handler, (uint8_t *)&(mifare_service.reader[id].payload.buffer[0]), 1);
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <mifare_enable_reader_irq+0x38>)
 800320a:	2174      	movs	r1, #116	; 0x74
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3358      	adds	r3, #88	; 0x58
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	2274      	movs	r2, #116	; 0x74
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	4a05      	ldr	r2, [pc, #20]	; (8003234 <mifare_enable_reader_irq+0x38>)
 8003220:	4413      	add	r3, r2
 8003222:	2201      	movs	r2, #1
 8003224:	4619      	mov	r1, r3
 8003226:	f7fe fb9b 	bl	8001960 <HAL_UART_Receive_IT>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	200007f8 	.word	0x200007f8

08003238 <mifare_init>:


void mifare_init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
	//htim7->PeriodElapsedCallback = timer_update_irq_callback;

	mifare_register_uart(&huart3,0);
 800323c:	2100      	movs	r1, #0
 800323e:	4805      	ldr	r0, [pc, #20]	; (8003254 <mifare_init+0x1c>)
 8003240:	f7ff ffac 	bl	800319c <mifare_register_uart>
	mifare_enable_reader_irq(0);
 8003244:	2000      	movs	r0, #0
 8003246:	f7ff ffd9 	bl	80031fc <mifare_enable_reader_irq>

	mifare_board_selector_init();
 800324a:	f000 fa41 	bl	80036d0 <mifare_board_selector_init>
	// mifare_enable_reader_irq(2);
	// mifare_enable_reader_irq(3);
	// mifare_enable_reader_irq(4);

//	HAL_TIM_Base_Start_IT(PTR_GENERIC_TIMER_HAL_HANDLER);
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000460 	.word	0x20000460

08003258 <mifare_irq_handler>:


void mifare_irq_handler(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	75fb      	strb	r3, [r7, #23]
	/*over run error*/
	if (huart->Instance->SR & USART_SR_ORE) {
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d011      	beq.n	8003296 <mifare_irq_handler+0x3e>
		huart->Instance->SR &= ~USART_SR_ORE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
		volatile uint32_t SR_uart = huart->Instance->SR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	613b      	str	r3, [r7, #16]
		volatile uint32_t DR_uart = huart->Instance->DR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	60fb      	str	r3, [r7, #12]
		UNUSED(DR_uart);
 8003292:	68fb      	ldr	r3, [r7, #12]
		UNUSED(SR_uart);
 8003294:	693b      	ldr	r3, [r7, #16]
		/*here we shall exit and enabled the isr!*/
	}

	do {
		if (huart->Instance != mifare_service.reader[index].instance) {
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	4918      	ldr	r1, [pc, #96]	; (8003300 <mifare_irq_handler+0xa8>)
 800329e:	2074      	movs	r0, #116	; 0x74
 80032a0:	fb00 f303 	mul.w	r3, r0, r3
 80032a4:	440b      	add	r3, r1
 80032a6:	3354      	adds	r3, #84	; 0x54
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d11d      	bne.n	80032ea <mifare_irq_handler+0x92>
			continue;
		}

		mifare_service.reader[index].reader_present = true;
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	4a13      	ldr	r2, [pc, #76]	; (8003300 <mifare_irq_handler+0xa8>)
 80032b2:	2174      	movs	r1, #116	; 0x74
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3368      	adds	r3, #104	; 0x68
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
		mifare_store_packet(&(mifare_service.reader[index]),
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	2274      	movs	r2, #116	; 0x74
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	4a0d      	ldr	r2, [pc, #52]	; (8003300 <mifare_irq_handler+0xa8>)
 80032ca:	1898      	adds	r0, r3, r2
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <mifare_irq_handler+0xa8>)
 80032d0:	2174      	movs	r1, #116	; 0x74
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	f000 f862 	bl	80033a4 <mifare_store_packet>
		      mifare_service.reader[index].payload.buffer[0]);

		mifare_enable_reader_irq(index);
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff8a 	bl	80031fc <mifare_enable_reader_irq>
 80032e8:	e000      	b.n	80032ec <mifare_irq_handler+0x94>
			continue;
 80032ea:	bf00      	nop
		//read_time[1] = HAL_GetTick();
	} while((index++) < MAX_MIFARE_BOARD);
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	75fa      	strb	r2, [r7, #23]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0cf      	beq.n	8003296 <mifare_irq_handler+0x3e>
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200007f8 	.word	0x200007f8

08003304 <mifare_send_scan_command>:


/*------------------------------generic mifare routines-----------------------*/

void mifare_send_scan_command(struct  mifare_st *mifare_reader)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	mifare_reader->reader_present = false;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	mifare_reader->payload.len = 0;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	memset((char * )mifare_reader->payload.buffer, 0x00,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2250      	movs	r2, #80	; 0x50
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fe8e 	bl	8004044 <memset>
	    sizeof(mifare_reader->payload.buffer));
	HAL_UART_Transmit( mifare_reader->handler,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
 8003330:	2211      	movs	r2, #17
 8003332:	4903      	ldr	r1, [pc, #12]	; (8003340 <mifare_send_scan_command+0x3c>)
 8003334:	f7fe fa7c 	bl	8001830 <HAL_UART_Transmit>
	         (uint8_t *) mifare_sequence_scan,
	         sizeof(mifare_sequence_scan),
	         HAL_MAX_DELAY);
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	080052d4 	.word	0x080052d4

08003344 <mifare_send_rf_field_command>:

void mifare_send_rf_field_command(struct  mifare_st *mifare_reader, uint8_t field_enabled)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	70fb      	strb	r3, [r7, #3]
	mifare_reader->reader_present = false;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	mifare_reader->payload.len = 0;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	memset((char * )mifare_reader->payload.buffer, 0x00,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2250      	movs	r2, #80	; 0x50
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fe6c 	bl	8004044 <memset>
	    sizeof(mifare_reader->payload.buffer));

	if (field_enabled == true) {
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d108      	bne.n	8003384 <mifare_send_rf_field_command+0x40>
		HAL_UART_Transmit( mifare_reader->handler,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
 800337a:	2211      	movs	r2, #17
 800337c:	4907      	ldr	r1, [pc, #28]	; (800339c <mifare_send_rf_field_command+0x58>)
 800337e:	f7fe fa57 	bl	8001830 <HAL_UART_Transmit>
		(uint8_t *) mifare_RF_field_off,
		sizeof(mifare_RF_field_off),
		HAL_MAX_DELAY);
	}

}
 8003382:	e007      	b.n	8003394 <mifare_send_rf_field_command+0x50>
		HAL_UART_Transmit( mifare_reader->handler,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
 800338c:	2211      	movs	r2, #17
 800338e:	4904      	ldr	r1, [pc, #16]	; (80033a0 <mifare_send_rf_field_command+0x5c>)
 8003390:	f7fe fa4e 	bl	8001830 <HAL_UART_Transmit>
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	080052e8 	.word	0x080052e8
 80033a0:	080052fc 	.word	0x080052fc

080033a4 <mifare_store_packet>:


void mifare_store_packet(struct mifare_st  *reader, uint8_t rx_byte)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
	if (reader->payload.len <reader->payload.max_len) {
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033bc:	429a      	cmp	r2, r3
 80033be:	d20c      	bcs.n	80033da <mifare_store_packet+0x36>
		reader->payload.buffer[reader->payload.len++] = rx_byte;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	b2d1      	uxtb	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
 80033d0:	4619      	mov	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	545a      	strb	r2, [r3, r1]
	}
	else {
		reader->payload.len = 0;
	}
}
 80033d8:	e003      	b.n	80033e2 <mifare_store_packet+0x3e>
		reader->payload.len = 0;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <mifare_sample_period_change>:
	}
}
#endif

void mifare_sample_period_change( uint32_t period_in_ms )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	printf("sample period changed to [%d] ms \r\n", period_in_ms);
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4805      	ldr	r0, [pc, #20]	; (8003410 <mifare_sample_period_change+0x20>)
 80033fc:	f000 fe2a 	bl	8004054 <iprintf>
	dinamyc_sample_period = period_in_ms;
 8003400:	4a04      	ldr	r2, [pc, #16]	; (8003414 <mifare_sample_period_change+0x24>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6013      	str	r3, [r2, #0]
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	08005234 	.word	0x08005234
 8003414:	20000310 	.word	0x20000310

08003418 <mifare_send_scan_broadcast>:

void mifare_send_scan_broadcast(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
	uint8_t index = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	71fb      	strb	r3, [r7, #7]

	mifare_service.available = false;
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <mifare_send_scan_broadcast+0x6c>)
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74


	do {
		if (mifare_service.reader[index].instance == NULL) {
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <mifare_send_scan_broadcast+0x6c>)
 800342e:	2174      	movs	r1, #116	; 0x74
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3354      	adds	r3, #84	; 0x54
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <mifare_send_scan_broadcast+0x3a>
			continue;
		}
		mifare_send_scan_command(&(mifare_service.reader[index]));
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	2274      	movs	r2, #116	; 0x74
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <mifare_send_scan_broadcast+0x6c>)
 8003448:	4413      	add	r3, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ff5a 	bl	8003304 <mifare_send_scan_command>
 8003450:	e000      	b.n	8003454 <mifare_send_scan_broadcast+0x3c>
			continue;
 8003452:	bf00      	nop
	}while( (index++) < MAX_MIFARE_BOARD);
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	71fa      	strb	r2, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0e5      	beq.n	800342a <mifare_send_scan_broadcast+0x12>

	//read_time[0] = HAL_GetTick();
	/*leave time to the isr to execute*/
	uint32_t timeout = HAL_GetTick() + dinamyc_sample_period;
 800345e:	f7fd f90d 	bl	800067c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <mifare_send_scan_broadcast+0x70>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4413      	add	r3, r2
 800346a:	603b      	str	r3, [r7, #0]
	while (timeout > HAL_GetTick());
 800346c:	bf00      	nop
 800346e:	f7fd f905 	bl	800067c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d3f9      	bcc.n	800346e <mifare_send_scan_broadcast+0x56>

}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200007f8 	.word	0x200007f8
 8003488:	20000310 	.word	0x20000310

0800348c <mifare_rf_field>:


void mifare_rf_field(uint8_t field){
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
	uint8_t index = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
	if (field == 0){
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <mifare_rf_field+0x1c>
		printf("RF field OFF\r\n");
 80034a0:	4813      	ldr	r0, [pc, #76]	; (80034f0 <mifare_rf_field+0x64>)
 80034a2:	f000 fe4b 	bl	800413c <puts>
 80034a6:	e002      	b.n	80034ae <mifare_rf_field+0x22>
	}
	else {
		printf("RF field ON\r\n");
 80034a8:	4812      	ldr	r0, [pc, #72]	; (80034f4 <mifare_rf_field+0x68>)
 80034aa:	f000 fe47 	bl	800413c <puts>
	}
	do {
		if (mifare_service.reader[index].instance == NULL) {
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	4a11      	ldr	r2, [pc, #68]	; (80034f8 <mifare_rf_field+0x6c>)
 80034b2:	2174      	movs	r1, #116	; 0x74
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	3354      	adds	r3, #84	; 0x54
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <mifare_rf_field+0x4e>
			continue;
		}
		mifare_send_rf_field_command(&(mifare_service.reader[index]), field);
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2274      	movs	r2, #116	; 0x74
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <mifare_rf_field+0x6c>)
 80034cc:	4413      	add	r3, r2
 80034ce:	79fa      	ldrb	r2, [r7, #7]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff36 	bl	8003344 <mifare_send_rf_field_command>
 80034d8:	e000      	b.n	80034dc <mifare_rf_field+0x50>
			continue;
 80034da:	bf00      	nop
	}while( (index++) < MAX_MIFARE_BOARD);
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	73fa      	strb	r2, [r7, #15]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0e3      	beq.n	80034ae <mifare_rf_field+0x22>
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	08005258 	.word	0x08005258
 80034f4:	08005268 	.word	0x08005268
 80034f8:	200007f8 	.word	0x200007f8

080034fc <mifare_extract_readers_card_id>:

void mifare_extract_readers_card_id(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
	uint8_t index = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	71fb      	strb	r3, [r7, #7]

	do {
		if (mifare_service.reader[index].instance == NULL) {
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <mifare_extract_readers_card_id+0x48>)
 800350a:	2174      	movs	r1, #116	; 0x74
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3354      	adds	r3, #84	; 0x54
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <mifare_extract_readers_card_id+0x32>
			continue;
		}
		mifare_extract_single_reader_card_id(&(mifare_service.reader[index]));
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	2274      	movs	r2, #116	; 0x74
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <mifare_extract_readers_card_id+0x48>)
 8003524:	4413      	add	r3, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f862 	bl	80035f0 <mifare_extract_single_reader_card_id>
 800352c:	e000      	b.n	8003530 <mifare_extract_readers_card_id+0x34>
			continue;
 800352e:	bf00      	nop
	}while( (index++) < MAX_MIFARE_BOARD);
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	71fa      	strb	r2, [r7, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0e5      	beq.n	8003506 <mifare_extract_readers_card_id+0xa>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200007f8 	.word	0x200007f8

08003548 <mifare_read_single_board>:

void mifare_read_single_board(void){
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
	mifare_auto_scanner();
 800354c:	f000 f844 	bl	80035d8 <mifare_auto_scanner>
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}

08003554 <mifare_print_readers_card_id>:

void mifare_print_readers_card_id (void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
	uint8_t index = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	71fb      	strb	r3, [r7, #7]
	do {
		/*none card got detected*/
		if (mifare_service.available == false){
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <mifare_print_readers_card_id+0x78>)
 8003560:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003564:	2b00      	cmp	r3, #0
 8003566:	d02c      	beq.n	80035c2 <mifare_print_readers_card_id+0x6e>
			break;
		}

		if ( (mifare_service.reader[index].instance     == NULL)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	4a18      	ldr	r2, [pc, #96]	; (80035cc <mifare_print_readers_card_id+0x78>)
 800356c:	2174      	movs	r1, #116	; 0x74
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3354      	adds	r3, #84	; 0x54
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01b      	beq.n	80035b4 <mifare_print_readers_card_id+0x60>
		||   (mifare_service.reader[index].card_present == false)) {
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	4a13      	ldr	r2, [pc, #76]	; (80035cc <mifare_print_readers_card_id+0x78>)
 8003580:	2174      	movs	r1, #116	; 0x74
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	3367      	adds	r3, #103	; 0x67
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d011      	beq.n	80035b4 <mifare_print_readers_card_id+0x60>
			//printf("%0x. nothing read\r\n", index);
			continue;
		}

		printf("%0x.%x card detected : %s\r\n"
 8003590:	79f9      	ldrb	r1, [r7, #7]
 8003592:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <mifare_print_readers_card_id+0x7c>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	4618      	mov	r0, r3
		,index
		,board_to_read_mux
		,mifare_service.reader[index].card_id ) ;
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	2274      	movs	r2, #116	; 0x74
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	3358      	adds	r3, #88	; 0x58
 80035a4:	4a09      	ldr	r2, [pc, #36]	; (80035cc <mifare_print_readers_card_id+0x78>)
 80035a6:	4413      	add	r3, r2
 80035a8:	3305      	adds	r3, #5
		printf("%0x.%x card detected : %s\r\n"
 80035aa:	4602      	mov	r2, r0
 80035ac:	4809      	ldr	r0, [pc, #36]	; (80035d4 <mifare_print_readers_card_id+0x80>)
 80035ae:	f000 fd51 	bl	8004054 <iprintf>
 80035b2:	e000      	b.n	80035b6 <mifare_print_readers_card_id+0x62>
			continue;
 80035b4:	bf00      	nop
//		printf("Reply time %d ms \r\n", read_time[1]-read_time[0] );

	}while( (index++) < MAX_MIFARE_BOARD);
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	71fa      	strb	r2, [r7, #7]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ce      	beq.n	800355e <mifare_print_readers_card_id+0xa>
}
 80035c0:	e000      	b.n	80035c4 <mifare_print_readers_card_id+0x70>
			break;
 80035c2:	bf00      	nop
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	200007f8 	.word	0x200007f8
 80035d0:	200003a8 	.word	0x200003a8
 80035d4:	08005278 	.word	0x08005278

080035d8 <mifare_auto_scanner>:


/*burst scan*/
void mifare_auto_scanner(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
	mifare_mux_choose_board();
 80035dc:	f000 f8c4 	bl	8003768 <mifare_mux_choose_board>
	mifare_send_scan_broadcast();
 80035e0:	f7ff ff1a 	bl	8003418 <mifare_send_scan_broadcast>
	mifare_extract_readers_card_id();
 80035e4:	f7ff ff8a 	bl	80034fc <mifare_extract_readers_card_id>
	mifare_print_readers_card_id();
 80035e8:	f7ff ffb4 	bl	8003554 <mifare_print_readers_card_id>
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <mifare_extract_single_reader_card_id>:



void mifare_extract_single_reader_card_id(struct mifare_st  *reader)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	uint8_t cardNumberInBytes[21] = {0};
 80035f8:	f107 0308 	add.w	r3, r7, #8
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
 8003608:	751a      	strb	r2, [r3, #20]
	uint8_t top_byte, bottom_byte;
	uint8_t i ;

	reader->card_present = false;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	if (memcmp((char *)reader->payload.buffer, "RES", 3) != 0){
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2203      	movs	r2, #3
 8003616:	492c      	ldr	r1, [pc, #176]	; (80036c8 <mifare_extract_single_reader_card_id+0xd8>)
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fcf9 	bl	8004010 <memcmp>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d04e      	beq.n	80036c2 <mifare_extract_single_reader_card_id+0xd2>

		if (reader->payload.buffer[MIFARE_STATUS] != 0x43) return;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7a1b      	ldrb	r3, [r3, #8]
 8003628:	2b43      	cmp	r3, #67	; 0x43
 800362a:	d149      	bne.n	80036c0 <mifare_extract_single_reader_card_id+0xd0>

		reader->card_present = true;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		mifare_service.available = true;
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <mifare_extract_single_reader_card_id+0xdc>)
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		memcpy(cardNumberInBytes, (char *)&reader->payload.buffer[CARD_NUMBER_POSITION], 4);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	330a      	adds	r3, #10
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60bb      	str	r3, [r7, #8]


		cardNumberInBytes[CARD_BYTES_TO_READ] = '\0';
 8003644:	2300      	movs	r3, #0
 8003646:	733b      	strb	r3, [r7, #12]

		for (i = 0; i < CARD_BYTES_TO_READ; i++)
 8003648:	2300      	movs	r3, #0
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e034      	b.n	80036b8 <mifare_extract_single_reader_card_id+0xc8>
		{
			top_byte = (cardNumberInBytes[i]&0xF0)>>4;
 800364e:	7ffb      	ldrb	r3, [r7, #31]
 8003650:	f107 0220 	add.w	r2, r7, #32
 8003654:	4413      	add	r3, r2
 8003656:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	77bb      	strb	r3, [r7, #30]
			bottom_byte = (cardNumberInBytes[i]&0x0F);
 800365e:	7ffb      	ldrb	r3, [r7, #31]
 8003660:	f107 0220 	add.w	r2, r7, #32
 8003664:	4413      	add	r3, r2
 8003666:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	777b      	strb	r3, [r7, #29]
			reader->card_id[i*2]   = (top_byte    <= 9)?(top_byte   + '0'):(top_byte   +'A'-10);
 8003670:	7ffb      	ldrb	r3, [r7, #31]
 8003672:	005a      	lsls	r2, r3, #1
 8003674:	7fbb      	ldrb	r3, [r7, #30]
 8003676:	2b09      	cmp	r3, #9
 8003678:	d803      	bhi.n	8003682 <mifare_extract_single_reader_card_id+0x92>
 800367a:	7fbb      	ldrb	r3, [r7, #30]
 800367c:	3330      	adds	r3, #48	; 0x30
 800367e:	b2db      	uxtb	r3, r3
 8003680:	e002      	b.n	8003688 <mifare_extract_single_reader_card_id+0x98>
 8003682:	7fbb      	ldrb	r3, [r7, #30]
 8003684:	3337      	adds	r3, #55	; 0x37
 8003686:	b2db      	uxtb	r3, r3
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	440a      	add	r2, r1
 800368c:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
			reader->card_id[i*2+1] = (bottom_byte <= 9)?(bottom_byte+'0') :(bottom_byte+'A'-10);
 8003690:	7ffb      	ldrb	r3, [r7, #31]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	7f7b      	ldrb	r3, [r7, #29]
 8003698:	2b09      	cmp	r3, #9
 800369a:	d803      	bhi.n	80036a4 <mifare_extract_single_reader_card_id+0xb4>
 800369c:	7f7b      	ldrb	r3, [r7, #29]
 800369e:	3330      	adds	r3, #48	; 0x30
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e002      	b.n	80036aa <mifare_extract_single_reader_card_id+0xba>
 80036a4:	7f7b      	ldrb	r3, [r7, #29]
 80036a6:	3337      	adds	r3, #55	; 0x37
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	440a      	add	r2, r1
 80036ae:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
		for (i = 0; i < CARD_BYTES_TO_READ; i++)
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
 80036b4:	3301      	adds	r3, #1
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	7ffb      	ldrb	r3, [r7, #31]
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d9c7      	bls.n	800364e <mifare_extract_single_reader_card_id+0x5e>
 80036be:	e000      	b.n	80036c2 <mifare_extract_single_reader_card_id+0xd2>
		if (reader->payload.buffer[MIFARE_STATUS] != 0x43) return;
 80036c0:	bf00      	nop
		}
	}

}
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	08005294 	.word	0x08005294
 80036cc:	200007f8 	.word	0x200007f8

080036d0 <mifare_board_selector_init>:
	0x08
};


void mifare_board_selector_init(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
	#option 1*
	#option 2*
#sample 100*
OK/error
*/
	table_entry[0].table_ptr = ctl_table_option_0;
 80036d4:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <mifare_board_selector_init+0x78>)
 80036d6:	4a1d      	ldr	r2, [pc, #116]	; (800374c <mifare_board_selector_init+0x7c>)
 80036d8:	601a      	str	r2, [r3, #0]
	table_entry[0].size = sizeof(ctl_table_option_0);
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <mifare_board_selector_init+0x78>)
 80036dc:	2204      	movs	r2, #4
 80036de:	605a      	str	r2, [r3, #4]

	table_entry[1].table_ptr = ctl_table_option_1;
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <mifare_board_selector_init+0x78>)
 80036e2:	4a1b      	ldr	r2, [pc, #108]	; (8003750 <mifare_board_selector_init+0x80>)
 80036e4:	60da      	str	r2, [r3, #12]
	table_entry[1].size = sizeof(ctl_table_option_1);
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <mifare_board_selector_init+0x78>)
 80036e8:	2205      	movs	r2, #5
 80036ea:	611a      	str	r2, [r3, #16]

	table_entry[2].table_ptr = ctl_table_option_2;
 80036ec:	4b16      	ldr	r3, [pc, #88]	; (8003748 <mifare_board_selector_init+0x78>)
 80036ee:	4a19      	ldr	r2, [pc, #100]	; (8003754 <mifare_board_selector_init+0x84>)
 80036f0:	619a      	str	r2, [r3, #24]
	table_entry[2].size = sizeof(ctl_table_option_2);
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <mifare_board_selector_init+0x78>)
 80036f4:	2204      	movs	r2, #4
 80036f6:	61da      	str	r2, [r3, #28]


	table_entry_mode_ptr = &table_entry[multiplexing_mode];
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <mifare_board_selector_init+0x88>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4a10      	ldr	r2, [pc, #64]	; (8003748 <mifare_board_selector_init+0x78>)
 8003708:	4413      	add	r3, r2
 800370a:	4a14      	ldr	r2, [pc, #80]	; (800375c <mifare_board_selector_init+0x8c>)
 800370c:	6013      	str	r3, [r2, #0]

	board_selector[0].port = MULTIPLEXOR_PORT;
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <mifare_board_selector_init+0x90>)
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <mifare_board_selector_init+0x94>)
 8003712:	601a      	str	r2, [r3, #0]
	board_selector[0].pin  = GPIO_PIN_2;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <mifare_board_selector_init+0x90>)
 8003716:	2204      	movs	r2, #4
 8003718:	809a      	strh	r2, [r3, #4]

	board_selector[1].port = MULTIPLEXOR_PORT;
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <mifare_board_selector_init+0x90>)
 800371c:	4a11      	ldr	r2, [pc, #68]	; (8003764 <mifare_board_selector_init+0x94>)
 800371e:	609a      	str	r2, [r3, #8]
	board_selector[1].pin  = GPIO_PIN_3;
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <mifare_board_selector_init+0x90>)
 8003722:	2208      	movs	r2, #8
 8003724:	819a      	strh	r2, [r3, #12]

	board_selector[2].port = MULTIPLEXOR_PORT;
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <mifare_board_selector_init+0x90>)
 8003728:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <mifare_board_selector_init+0x94>)
 800372a:	611a      	str	r2, [r3, #16]
	board_selector[2].pin  = GPIO_PIN_4;
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <mifare_board_selector_init+0x90>)
 800372e:	2210      	movs	r2, #16
 8003730:	829a      	strh	r2, [r3, #20]

	board_selector[3].port = MULTIPLEXOR_PORT;
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <mifare_board_selector_init+0x90>)
 8003734:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <mifare_board_selector_init+0x94>)
 8003736:	619a      	str	r2, [r3, #24]
	board_selector[3].pin  = GPIO_PIN_5;
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <mifare_board_selector_init+0x90>)
 800373a:	2220      	movs	r2, #32
 800373c:	839a      	strh	r2, [r3, #28]
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	20000874 	.word	0x20000874
 800374c:	20000314 	.word	0x20000314
 8003750:	20000318 	.word	0x20000318
 8003754:	20000320 	.word	0x20000320
 8003758:	200003a9 	.word	0x200003a9
 800375c:	200007d4 	.word	0x200007d4
 8003760:	200007d8 	.word	0x200007d8
 8003764:	40021000 	.word	0x40021000

08003768 <mifare_mux_choose_board>:




void mifare_mux_choose_board(void)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
	uint8_t pos = table_entry_mode_ptr->current_pos;
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <mifare_mux_choose_board+0x5c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	7a1b      	ldrb	r3, [r3, #8]
 8003774:	71fb      	strb	r3, [r7, #7]

	//printf("multiplexing pin %x [%x]\r\n", table_entry_mode_ptr->table_ptr[pos], (table_entry_mode_ptr->table_ptr[pos]) << MUX_PIN_OFFSET);
	MULTIPLEXOR_PORT->ODR  = 0;
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <mifare_mux_choose_board+0x60>)
 8003778:	2200      	movs	r2, #0
 800377a:	615a      	str	r2, [r3, #20]
	MULTIPLEXOR_PORT->ODR = ( table_entry_mode_ptr->table_ptr[pos]) << MUX_PIN_OFFSET;
 800377c:	4912      	ldr	r1, [pc, #72]	; (80037c8 <mifare_mux_choose_board+0x60>)
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <mifare_mux_choose_board+0x5c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	4413      	add	r3, r2
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	614b      	str	r3, [r1, #20]

	// HAL_Delay(500);
	// printf("reading antenna [%d %x] in mode [%d]\r\n",pos,table_entry_mode_ptr->table_ptr[pos],multiplexing_mode);

	if ((table_entry_mode_ptr->current_pos+1) >= table_entry_mode_ptr->size  ) {
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <mifare_mux_choose_board+0x5c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	7a1b      	ldrb	r3, [r3, #8]
 8003794:	3301      	adds	r3, #1
 8003796:	461a      	mov	r2, r3
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <mifare_mux_choose_board+0x5c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d304      	bcc.n	80037ac <mifare_mux_choose_board+0x44>
		(table_entry_mode_ptr->current_pos) = 0;
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <mifare_mux_choose_board+0x5c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	721a      	strb	r2, [r3, #8]
	}else{
		table_entry_mode_ptr->current_pos++;
	}
	//HAL_Delay(500);

}
 80037aa:	e005      	b.n	80037b8 <mifare_mux_choose_board+0x50>
		table_entry_mode_ptr->current_pos++;
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <mifare_mux_choose_board+0x5c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	7a1a      	ldrb	r2, [r3, #8]
 80037b2:	3201      	adds	r2, #1
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	721a      	strb	r2, [r3, #8]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	200007d4 	.word	0x200007d4
 80037c8:	40021000 	.word	0x40021000

080037cc <mifare_choose_mode>:


void mifare_choose_mode(uint16_t mode){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	80fb      	strh	r3, [r7, #6]
	if ( (mode > 3)  ||  (mode==0)) {
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d802      	bhi.n	80037e2 <mifare_choose_mode+0x16>
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <mifare_choose_mode+0x1e>
		printf("ERROR: WRONG MODE , available [1-3]\r\n");
 80037e2:	4810      	ldr	r0, [pc, #64]	; (8003824 <mifare_choose_mode+0x58>)
 80037e4:	f000 fcaa 	bl	800413c <puts>
 80037e8:	e002      	b.n	80037f0 <mifare_choose_mode+0x24>
	}
	else{
		printf("OK\r\n");
 80037ea:	480f      	ldr	r0, [pc, #60]	; (8003828 <mifare_choose_mode+0x5c>)
 80037ec:	f000 fca6 	bl	800413c <puts>
	}
	printf("Mode set to %d \r\n", mode);
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	4619      	mov	r1, r3
 80037f4:	480d      	ldr	r0, [pc, #52]	; (800382c <mifare_choose_mode+0x60>)
 80037f6:	f000 fc2d 	bl	8004054 <iprintf>

	multiplexing_mode = mode-1;
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <mifare_choose_mode+0x64>)
 8003804:	701a      	strb	r2, [r3, #0]
	table_entry_mode_ptr = &table_entry[multiplexing_mode];
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <mifare_choose_mode+0x64>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4a07      	ldr	r2, [pc, #28]	; (8003834 <mifare_choose_mode+0x68>)
 8003816:	4413      	add	r3, r2
 8003818:	4a07      	ldr	r2, [pc, #28]	; (8003838 <mifare_choose_mode+0x6c>)
 800381a:	6013      	str	r3, [r2, #0]
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	08005298 	.word	0x08005298
 8003828:	08005214 	.word	0x08005214
 800382c:	080052c0 	.word	0x080052c0
 8003830:	200003a9 	.word	0x200003a9
 8003834:	20000874 	.word	0x20000874
 8003838:	200007d4 	.word	0x200007d4

0800383c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	4a10      	ldr	r2, [pc, #64]	; (8003888 <HAL_MspInit+0x4c>)
 8003848:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <HAL_MspInit+0x4c>)
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003850:	6453      	str	r3, [r2, #68]	; 0x44
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <HAL_MspInit+0x4c>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4a09      	ldr	r2, [pc, #36]	; (8003888 <HAL_MspInit+0x4c>)
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_MspInit+0x4c>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_MspInit+0x4c>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40023800 	.word	0x40023800

0800388c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b098      	sub	sp, #96	; 0x60
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003894:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a82      	ldr	r2, [pc, #520]	; (8003ab4 <HAL_UART_MspInit+0x228>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d134      	bne.n	8003918 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038b2:	4a81      	ldr	r2, [pc, #516]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80038b4:	4b80      	ldr	r3, [pc, #512]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b7e      	ldr	r3, [pc, #504]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	647b      	str	r3, [r7, #68]	; 0x44
 80038ce:	4a7a      	ldr	r2, [pc, #488]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80038d0:	4b79      	ldr	r3, [pc, #484]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30
 80038da:	4b77      	ldr	r3, [pc, #476]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	647b      	str	r3, [r7, #68]	; 0x44
 80038e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038e6:	2303      	movs	r3, #3
 80038e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038ee:	2301      	movs	r3, #1
 80038f0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f2:	2303      	movs	r3, #3
 80038f4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038f6:	2308      	movs	r3, #8
 80038f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038fe:	4619      	mov	r1, r3
 8003900:	486e      	ldr	r0, [pc, #440]	; (8003abc <HAL_UART_MspInit+0x230>)
 8003902:	f7fc fff9 	bl	80008f8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2100      	movs	r1, #0
 800390a:	2034      	movs	r0, #52	; 0x34
 800390c:	f7fc ff9b 	bl	8000846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003910:	2034      	movs	r0, #52	; 0x34
 8003912:	f7fc ffb4 	bl	800087e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003916:	e1ca      	b.n	8003cae <HAL_UART_MspInit+0x422>
  else if(huart->Instance==UART5)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a68      	ldr	r2, [pc, #416]	; (8003ac0 <HAL_UART_MspInit+0x234>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d153      	bne.n	80039ca <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	643b      	str	r3, [r7, #64]	; 0x40
 8003926:	4a64      	ldr	r2, [pc, #400]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003928:	4b63      	ldr	r3, [pc, #396]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003930:	6413      	str	r3, [r2, #64]	; 0x40
 8003932:	4b61      	ldr	r3, [pc, #388]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393a:	643b      	str	r3, [r7, #64]	; 0x40
 800393c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003942:	4a5d      	ldr	r2, [pc, #372]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003944:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f043 0304 	orr.w	r3, r3, #4
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b5a      	ldr	r3, [pc, #360]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	63bb      	str	r3, [r7, #56]	; 0x38
 800395e:	4a56      	ldr	r2, [pc, #344]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003960:	4b55      	ldr	r3, [pc, #340]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	f043 0308 	orr.w	r3, r3, #8
 8003968:	6313      	str	r3, [r2, #48]	; 0x30
 800396a:	4b53      	ldr	r3, [pc, #332]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
 8003974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003980:	2301      	movs	r3, #1
 8003982:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003984:	2303      	movs	r3, #3
 8003986:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003988:	2308      	movs	r3, #8
 800398a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003990:	4619      	mov	r1, r3
 8003992:	484c      	ldr	r0, [pc, #304]	; (8003ac4 <HAL_UART_MspInit+0x238>)
 8003994:	f7fc ffb0 	bl	80008f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003998:	2304      	movs	r3, #4
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399c:	2302      	movs	r3, #2
 800399e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039a0:	2301      	movs	r3, #1
 80039a2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a4:	2303      	movs	r3, #3
 80039a6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039a8:	2308      	movs	r3, #8
 80039aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039b0:	4619      	mov	r1, r3
 80039b2:	4845      	ldr	r0, [pc, #276]	; (8003ac8 <HAL_UART_MspInit+0x23c>)
 80039b4:	f7fc ffa0 	bl	80008f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2100      	movs	r1, #0
 80039bc:	2035      	movs	r0, #53	; 0x35
 80039be:	f7fc ff42 	bl	8000846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80039c2:	2035      	movs	r0, #53	; 0x35
 80039c4:	f7fc ff5b 	bl	800087e <HAL_NVIC_EnableIRQ>
}
 80039c8:	e171      	b.n	8003cae <HAL_UART_MspInit+0x422>
  else if(huart->Instance==UART8)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a3f      	ldr	r2, [pc, #252]	; (8003acc <HAL_UART_MspInit+0x240>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d134      	bne.n	8003a3e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_UART8_CLK_ENABLE();
 80039d4:	2300      	movs	r3, #0
 80039d6:	637b      	str	r3, [r7, #52]	; 0x34
 80039d8:	4a37      	ldr	r2, [pc, #220]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80039da:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039e2:	6413      	str	r3, [r2, #64]	; 0x40
 80039e4:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039ec:	637b      	str	r3, [r7, #52]	; 0x34
 80039ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039f0:	2300      	movs	r3, #0
 80039f2:	633b      	str	r3, [r7, #48]	; 0x30
 80039f4:	4a30      	ldr	r2, [pc, #192]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80039f6:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f043 0310 	orr.w	r3, r3, #16
 80039fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003a00:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a10:	2302      	movs	r3, #2
 8003a12:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a14:	2301      	movs	r3, #1
 8003a16:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a24:	4619      	mov	r1, r3
 8003a26:	482a      	ldr	r0, [pc, #168]	; (8003ad0 <HAL_UART_MspInit+0x244>)
 8003a28:	f7fc ff66 	bl	80008f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2100      	movs	r1, #0
 8003a30:	2053      	movs	r0, #83	; 0x53
 8003a32:	f7fc ff08 	bl	8000846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8003a36:	2053      	movs	r0, #83	; 0x53
 8003a38:	f7fc ff21 	bl	800087e <HAL_NVIC_EnableIRQ>
}
 8003a3c:	e137      	b.n	8003cae <HAL_UART_MspInit+0x422>
  else if(huart->Instance==USART1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <HAL_UART_MspInit+0x248>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d147      	bne.n	8003ad8 <HAL_UART_MspInit+0x24c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a48:	2300      	movs	r3, #0
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f043 0310 	orr.w	r3, r3, #16
 8003a56:	6453      	str	r3, [r2, #68]	; 0x44
 8003a58:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a64:	2300      	movs	r3, #0
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a68:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6313      	str	r3, [r2, #48]	; 0x30
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_UART_MspInit+0x22c>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003a80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a84:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a86:	2302      	movs	r3, #2
 8003a88:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a92:	2307      	movs	r3, #7
 8003a94:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4807      	ldr	r0, [pc, #28]	; (8003abc <HAL_UART_MspInit+0x230>)
 8003a9e:	f7fc ff2b 	bl	80008f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	2025      	movs	r0, #37	; 0x25
 8003aa8:	f7fc fecd 	bl	8000846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003aac:	2025      	movs	r0, #37	; 0x25
 8003aae:	f7fc fee6 	bl	800087e <HAL_NVIC_EnableIRQ>
}
 8003ab2:	e0fc      	b.n	8003cae <HAL_UART_MspInit+0x422>
 8003ab4:	40004c00 	.word	0x40004c00
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40020000 	.word	0x40020000
 8003ac0:	40005000 	.word	0x40005000
 8003ac4:	40020800 	.word	0x40020800
 8003ac8:	40020c00 	.word	0x40020c00
 8003acc:	40007c00 	.word	0x40007c00
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40011000 	.word	0x40011000
  else if(huart->Instance==USART2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a76      	ldr	r2, [pc, #472]	; (8003cb8 <HAL_UART_MspInit+0x42c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d152      	bne.n	8003b88 <HAL_UART_MspInit+0x2fc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae6:	4a75      	ldr	r2, [pc, #468]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003ae8:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af0:	6413      	str	r3, [r2, #64]	; 0x40
 8003af2:	4b72      	ldr	r3, [pc, #456]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	623b      	str	r3, [r7, #32]
 8003b02:	4a6e      	ldr	r2, [pc, #440]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003b04:	4b6d      	ldr	r3, [pc, #436]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	623b      	str	r3, [r7, #32]
 8003b18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	4a67      	ldr	r2, [pc, #412]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003b20:	4b66      	ldr	r3, [pc, #408]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	f043 0308 	orr.w	r3, r3, #8
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b64      	ldr	r3, [pc, #400]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b36:	2308      	movs	r3, #8
 8003b38:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b42:	2303      	movs	r3, #3
 8003b44:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b46:	2307      	movs	r3, #7
 8003b48:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b4e:	4619      	mov	r1, r3
 8003b50:	485b      	ldr	r0, [pc, #364]	; (8003cc0 <HAL_UART_MspInit+0x434>)
 8003b52:	f7fc fed1 	bl	80008f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003b56:	2320      	movs	r3, #32
 8003b58:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b62:	2303      	movs	r3, #3
 8003b64:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b66:	2307      	movs	r3, #7
 8003b68:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4854      	ldr	r0, [pc, #336]	; (8003cc4 <HAL_UART_MspInit+0x438>)
 8003b72:	f7fc fec1 	bl	80008f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b76:	2200      	movs	r2, #0
 8003b78:	2100      	movs	r1, #0
 8003b7a:	2026      	movs	r0, #38	; 0x26
 8003b7c:	f7fc fe63 	bl	8000846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b80:	2026      	movs	r0, #38	; 0x26
 8003b82:	f7fc fe7c 	bl	800087e <HAL_NVIC_EnableIRQ>
}
 8003b86:	e092      	b.n	8003cae <HAL_UART_MspInit+0x422>
  else if(huart->Instance==USART3)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a4e      	ldr	r2, [pc, #312]	; (8003cc8 <HAL_UART_MspInit+0x43c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d135      	bne.n	8003bfe <HAL_UART_MspInit+0x372>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	4a49      	ldr	r2, [pc, #292]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003b98:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	4a42      	ldr	r2, [pc, #264]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003bb4:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f043 0304 	orr.w	r3, r3, #4
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003bca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003bce:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003bdc:	2307      	movs	r3, #7
 8003bde:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003be4:	4619      	mov	r1, r3
 8003be6:	4839      	ldr	r0, [pc, #228]	; (8003ccc <HAL_UART_MspInit+0x440>)
 8003be8:	f7fc fe86 	bl	80008f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003bec:	2200      	movs	r2, #0
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2027      	movs	r0, #39	; 0x27
 8003bf2:	f7fc fe28 	bl	8000846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003bf6:	2027      	movs	r0, #39	; 0x27
 8003bf8:	f7fc fe41 	bl	800087e <HAL_NVIC_EnableIRQ>
}
 8003bfc:	e057      	b.n	8003cae <HAL_UART_MspInit+0x422>
  else if(huart->Instance==USART6)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a33      	ldr	r2, [pc, #204]	; (8003cd0 <HAL_UART_MspInit+0x444>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d152      	bne.n	8003cae <HAL_UART_MspInit+0x422>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003c0e:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f043 0320 	orr.w	r3, r3, #32
 8003c16:	6453      	str	r3, [r2, #68]	; 0x44
 8003c18:	4b28      	ldr	r3, [pc, #160]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	4a24      	ldr	r2, [pc, #144]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003c2a:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	6313      	str	r3, [r2, #48]	; 0x30
 8003c34:	4b21      	ldr	r3, [pc, #132]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c40:	2300      	movs	r3, #0
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_UART_MspInit+0x430>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c5c:	2340      	movs	r3, #64	; 0x40
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c64:	2301      	movs	r3, #1
 8003c66:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c74:	4619      	mov	r1, r3
 8003c76:	4815      	ldr	r0, [pc, #84]	; (8003ccc <HAL_UART_MspInit+0x440>)
 8003c78:	f7fc fe3e 	bl	80008f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c80:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c82:	2302      	movs	r3, #2
 8003c84:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c86:	2301      	movs	r3, #1
 8003c88:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c8e:	2308      	movs	r3, #8
 8003c90:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c96:	4619      	mov	r1, r3
 8003c98:	480e      	ldr	r0, [pc, #56]	; (8003cd4 <HAL_UART_MspInit+0x448>)
 8003c9a:	f7fc fe2d 	bl	80008f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	2047      	movs	r0, #71	; 0x47
 8003ca4:	f7fc fdcf 	bl	8000846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003ca8:	2047      	movs	r0, #71	; 0x47
 8003caa:	f7fc fde8 	bl	800087e <HAL_NVIC_EnableIRQ>
}
 8003cae:	bf00      	nop
 8003cb0:	3760      	adds	r7, #96	; 0x60
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40004400 	.word	0x40004400
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40020000 	.word	0x40020000
 8003cc4:	40020c00 	.word	0x40020c00
 8003cc8:	40004800 	.word	0x40004800
 8003ccc:	40020800 	.word	0x40020800
 8003cd0:	40011400 	.word	0x40011400
 8003cd4:	40021800 	.word	0x40021800

08003cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cea:	e7fe      	b.n	8003cea <HardFault_Handler+0x4>

08003cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cf0:	e7fe      	b.n	8003cf0 <MemManage_Handler+0x4>

08003cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cf6:	e7fe      	b.n	8003cf6 <BusFault_Handler+0x4>

08003cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cfc:	e7fe      	b.n	8003cfc <UsageFault_Handler+0x4>

08003cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d2c:	f7fc fc92 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d38:	4802      	ldr	r0, [pc, #8]	; (8003d44 <USART1_IRQHandler+0x10>)
 8003d3a:	f7fd fe67 	bl	8001a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000538 	.word	0x20000538

08003d48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d4c:	4802      	ldr	r0, [pc, #8]	; (8003d58 <USART2_IRQHandler+0x10>)
 8003d4e:	f7fd fe5d 	bl	8001a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000728 	.word	0x20000728

08003d5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d60:	4802      	ldr	r0, [pc, #8]	; (8003d6c <USART3_IRQHandler+0x10>)
 8003d62:	f7fd fe53 	bl	8001a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000460 	.word	0x20000460

08003d70 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <UART4_IRQHandler+0x10>)
 8003d76:	f7fd fe49 	bl	8001a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200006bc 	.word	0x200006bc

08003d84 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <UART5_IRQHandler+0x10>)
 8003d8a:	f7fd fe3f 	bl	8001a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200004cc 	.word	0x200004cc

08003d98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003d9c:	4802      	ldr	r0, [pc, #8]	; (8003da8 <TIM7_IRQHandler+0x10>)
 8003d9e:	f7fd fb9f 	bl	80014e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000794 	.word	0x20000794

08003dac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003db0:	4802      	ldr	r0, [pc, #8]	; (8003dbc <USART6_IRQHandler+0x10>)
 8003db2:	f7fd fe2b 	bl	8001a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000650 	.word	0x20000650

08003dc0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <UART8_IRQHandler+0x10>)
 8003dc6:	f7fd fe21 	bl	8001a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	200005e4 	.word	0x200005e4

08003dd4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e00a      	b.n	8003dfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003de6:	68bc      	ldr	r4, [r7, #8]
 8003de8:	1c63      	adds	r3, r4, #1
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	f3af 8000 	nop.w
 8003df0:	4603      	mov	r3, r0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	dbf0      	blt.n	8003de6 <_read+0x12>
	}

return len;
 8003e04:	687b      	ldr	r3, [r7, #4]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd90      	pop	{r4, r7, pc}
	...

08003e10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit( UART_DBG_PORT, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	4804      	ldr	r0, [pc, #16]	; (8003e38 <_write+0x28>)
 8003e28:	f7fd fd02 	bl	8001830 <HAL_UART_Transmit>
	return len;
 8003e2c:	687b      	ldr	r3, [r7, #4]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000538 	.word	0x20000538

08003e3c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003e44:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <_sbrk+0x50>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <_sbrk+0x16>
		heap_end = &end;
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <_sbrk+0x50>)
 8003e4e:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <_sbrk+0x54>)
 8003e50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <_sbrk+0x50>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <_sbrk+0x50>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	466a      	mov	r2, sp
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d907      	bls.n	8003e76 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003e66:	f000 f8a9 	bl	8003fbc <__errno>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
 8003e74:	e006      	b.n	8003e84 <_sbrk+0x48>
	}

	heap_end += incr;
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <_sbrk+0x50>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	4a03      	ldr	r2, [pc, #12]	; (8003e8c <_sbrk+0x50>)
 8003e80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	200003ac 	.word	0x200003ac
 8003e90:	2000089c 	.word	0x2000089c

08003e94 <_close>:

int _close(int file)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	return -1;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ebc:	605a      	str	r2, [r3, #4]
	return 0;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <_isatty>:

int _isatty(int file)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	return 1;
 8003ed4:	2301      	movs	r3, #1
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b085      	sub	sp, #20
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
	return 0;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f00:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <SystemInit+0x60>)
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <SystemInit+0x60>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003f10:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <SystemInit+0x64>)
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <SystemInit+0x64>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f1c:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <SystemInit+0x64>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003f22:	4a0f      	ldr	r2, [pc, #60]	; (8003f60 <SystemInit+0x64>)
 8003f24:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <SystemInit+0x64>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <SystemInit+0x64>)
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <SystemInit+0x68>)
 8003f36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003f38:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <SystemInit+0x64>)
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <SystemInit+0x64>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <SystemInit+0x64>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <SystemInit+0x60>)
 8003f4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f50:	609a      	str	r2, [r3, #8]
#endif
}
 8003f52:	bf00      	nop
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000ed00 	.word	0xe000ed00
 8003f60:	40023800 	.word	0x40023800
 8003f64:	24003010 	.word	0x24003010

08003f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fa0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f6e:	e003      	b.n	8003f78 <LoopCopyDataInit>

08003f70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f76:	3104      	adds	r1, #4

08003f78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f78:	480b      	ldr	r0, [pc, #44]	; (8003fa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f80:	d3f6      	bcc.n	8003f70 <CopyDataInit>
  ldr  r2, =_sbss
 8003f82:	4a0b      	ldr	r2, [pc, #44]	; (8003fb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f84:	e002      	b.n	8003f8c <LoopFillZerobss>

08003f86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f88:	f842 3b04 	str.w	r3, [r2], #4

08003f8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f90:	d3f9      	bcc.n	8003f86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f92:	f7ff ffb3 	bl	8003efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f96:	f000 f817 	bl	8003fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f9a:	f7fe fc77 	bl	800288c <main>
  bx  lr    
 8003f9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003fa0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003fa4:	080053d0 	.word	0x080053d0
  ldr  r0, =_sdata
 8003fa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fac:	2000038c 	.word	0x2000038c
  ldr  r2, =_sbss
 8003fb0:	2000038c 	.word	0x2000038c
  ldr  r3, = _ebss
 8003fb4:	2000089c 	.word	0x2000089c

08003fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fb8:	e7fe      	b.n	8003fb8 <ADC_IRQHandler>
	...

08003fbc <__errno>:
 8003fbc:	4b01      	ldr	r3, [pc, #4]	; (8003fc4 <__errno+0x8>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000328 	.word	0x20000328

08003fc8 <__libc_init_array>:
 8003fc8:	b570      	push	{r4, r5, r6, lr}
 8003fca:	4e0d      	ldr	r6, [pc, #52]	; (8004000 <__libc_init_array+0x38>)
 8003fcc:	4c0d      	ldr	r4, [pc, #52]	; (8004004 <__libc_init_array+0x3c>)
 8003fce:	1ba4      	subs	r4, r4, r6
 8003fd0:	10a4      	asrs	r4, r4, #2
 8003fd2:	2500      	movs	r5, #0
 8003fd4:	42a5      	cmp	r5, r4
 8003fd6:	d109      	bne.n	8003fec <__libc_init_array+0x24>
 8003fd8:	4e0b      	ldr	r6, [pc, #44]	; (8004008 <__libc_init_array+0x40>)
 8003fda:	4c0c      	ldr	r4, [pc, #48]	; (800400c <__libc_init_array+0x44>)
 8003fdc:	f001 f85a 	bl	8005094 <_init>
 8003fe0:	1ba4      	subs	r4, r4, r6
 8003fe2:	10a4      	asrs	r4, r4, #2
 8003fe4:	2500      	movs	r5, #0
 8003fe6:	42a5      	cmp	r5, r4
 8003fe8:	d105      	bne.n	8003ff6 <__libc_init_array+0x2e>
 8003fea:	bd70      	pop	{r4, r5, r6, pc}
 8003fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ff0:	4798      	blx	r3
 8003ff2:	3501      	adds	r5, #1
 8003ff4:	e7ee      	b.n	8003fd4 <__libc_init_array+0xc>
 8003ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ffa:	4798      	blx	r3
 8003ffc:	3501      	adds	r5, #1
 8003ffe:	e7f2      	b.n	8003fe6 <__libc_init_array+0x1e>
 8004000:	080053c8 	.word	0x080053c8
 8004004:	080053c8 	.word	0x080053c8
 8004008:	080053c8 	.word	0x080053c8
 800400c:	080053cc 	.word	0x080053cc

08004010 <memcmp>:
 8004010:	b510      	push	{r4, lr}
 8004012:	3901      	subs	r1, #1
 8004014:	4402      	add	r2, r0
 8004016:	4290      	cmp	r0, r2
 8004018:	d101      	bne.n	800401e <memcmp+0xe>
 800401a:	2000      	movs	r0, #0
 800401c:	bd10      	pop	{r4, pc}
 800401e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004022:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004026:	42a3      	cmp	r3, r4
 8004028:	d0f5      	beq.n	8004016 <memcmp+0x6>
 800402a:	1b18      	subs	r0, r3, r4
 800402c:	bd10      	pop	{r4, pc}

0800402e <memcpy>:
 800402e:	b510      	push	{r4, lr}
 8004030:	1e43      	subs	r3, r0, #1
 8004032:	440a      	add	r2, r1
 8004034:	4291      	cmp	r1, r2
 8004036:	d100      	bne.n	800403a <memcpy+0xc>
 8004038:	bd10      	pop	{r4, pc}
 800403a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800403e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004042:	e7f7      	b.n	8004034 <memcpy+0x6>

08004044 <memset>:
 8004044:	4402      	add	r2, r0
 8004046:	4603      	mov	r3, r0
 8004048:	4293      	cmp	r3, r2
 800404a:	d100      	bne.n	800404e <memset+0xa>
 800404c:	4770      	bx	lr
 800404e:	f803 1b01 	strb.w	r1, [r3], #1
 8004052:	e7f9      	b.n	8004048 <memset+0x4>

08004054 <iprintf>:
 8004054:	b40f      	push	{r0, r1, r2, r3}
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <iprintf+0x2c>)
 8004058:	b513      	push	{r0, r1, r4, lr}
 800405a:	681c      	ldr	r4, [r3, #0]
 800405c:	b124      	cbz	r4, 8004068 <iprintf+0x14>
 800405e:	69a3      	ldr	r3, [r4, #24]
 8004060:	b913      	cbnz	r3, 8004068 <iprintf+0x14>
 8004062:	4620      	mov	r0, r4
 8004064:	f000 fae0 	bl	8004628 <__sinit>
 8004068:	ab05      	add	r3, sp, #20
 800406a:	9a04      	ldr	r2, [sp, #16]
 800406c:	68a1      	ldr	r1, [r4, #8]
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	4620      	mov	r0, r4
 8004072:	f000 fca5 	bl	80049c0 <_vfiprintf_r>
 8004076:	b002      	add	sp, #8
 8004078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407c:	b004      	add	sp, #16
 800407e:	4770      	bx	lr
 8004080:	20000328 	.word	0x20000328

08004084 <_puts_r>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	460e      	mov	r6, r1
 8004088:	4605      	mov	r5, r0
 800408a:	b118      	cbz	r0, 8004094 <_puts_r+0x10>
 800408c:	6983      	ldr	r3, [r0, #24]
 800408e:	b90b      	cbnz	r3, 8004094 <_puts_r+0x10>
 8004090:	f000 faca 	bl	8004628 <__sinit>
 8004094:	69ab      	ldr	r3, [r5, #24]
 8004096:	68ac      	ldr	r4, [r5, #8]
 8004098:	b913      	cbnz	r3, 80040a0 <_puts_r+0x1c>
 800409a:	4628      	mov	r0, r5
 800409c:	f000 fac4 	bl	8004628 <__sinit>
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <_puts_r+0xac>)
 80040a2:	429c      	cmp	r4, r3
 80040a4:	d117      	bne.n	80040d6 <_puts_r+0x52>
 80040a6:	686c      	ldr	r4, [r5, #4]
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	071b      	lsls	r3, r3, #28
 80040ac:	d51d      	bpl.n	80040ea <_puts_r+0x66>
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	b1db      	cbz	r3, 80040ea <_puts_r+0x66>
 80040b2:	3e01      	subs	r6, #1
 80040b4:	68a3      	ldr	r3, [r4, #8]
 80040b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ba:	3b01      	subs	r3, #1
 80040bc:	60a3      	str	r3, [r4, #8]
 80040be:	b9e9      	cbnz	r1, 80040fc <_puts_r+0x78>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	da2e      	bge.n	8004122 <_puts_r+0x9e>
 80040c4:	4622      	mov	r2, r4
 80040c6:	210a      	movs	r1, #10
 80040c8:	4628      	mov	r0, r5
 80040ca:	f000 f8fb 	bl	80042c4 <__swbuf_r>
 80040ce:	3001      	adds	r0, #1
 80040d0:	d011      	beq.n	80040f6 <_puts_r+0x72>
 80040d2:	200a      	movs	r0, #10
 80040d4:	bd70      	pop	{r4, r5, r6, pc}
 80040d6:	4b17      	ldr	r3, [pc, #92]	; (8004134 <_puts_r+0xb0>)
 80040d8:	429c      	cmp	r4, r3
 80040da:	d101      	bne.n	80040e0 <_puts_r+0x5c>
 80040dc:	68ac      	ldr	r4, [r5, #8]
 80040de:	e7e3      	b.n	80040a8 <_puts_r+0x24>
 80040e0:	4b15      	ldr	r3, [pc, #84]	; (8004138 <_puts_r+0xb4>)
 80040e2:	429c      	cmp	r4, r3
 80040e4:	bf08      	it	eq
 80040e6:	68ec      	ldreq	r4, [r5, #12]
 80040e8:	e7de      	b.n	80040a8 <_puts_r+0x24>
 80040ea:	4621      	mov	r1, r4
 80040ec:	4628      	mov	r0, r5
 80040ee:	f000 f93b 	bl	8004368 <__swsetup_r>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d0dd      	beq.n	80040b2 <_puts_r+0x2e>
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	da04      	bge.n	800410a <_puts_r+0x86>
 8004100:	69a2      	ldr	r2, [r4, #24]
 8004102:	4293      	cmp	r3, r2
 8004104:	db06      	blt.n	8004114 <_puts_r+0x90>
 8004106:	290a      	cmp	r1, #10
 8004108:	d004      	beq.n	8004114 <_puts_r+0x90>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	6022      	str	r2, [r4, #0]
 8004110:	7019      	strb	r1, [r3, #0]
 8004112:	e7cf      	b.n	80040b4 <_puts_r+0x30>
 8004114:	4622      	mov	r2, r4
 8004116:	4628      	mov	r0, r5
 8004118:	f000 f8d4 	bl	80042c4 <__swbuf_r>
 800411c:	3001      	adds	r0, #1
 800411e:	d1c9      	bne.n	80040b4 <_puts_r+0x30>
 8004120:	e7e9      	b.n	80040f6 <_puts_r+0x72>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	200a      	movs	r0, #10
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	6022      	str	r2, [r4, #0]
 800412a:	7018      	strb	r0, [r3, #0]
 800412c:	bd70      	pop	{r4, r5, r6, pc}
 800412e:	bf00      	nop
 8004130:	0800534c 	.word	0x0800534c
 8004134:	0800536c 	.word	0x0800536c
 8004138:	0800532c 	.word	0x0800532c

0800413c <puts>:
 800413c:	4b02      	ldr	r3, [pc, #8]	; (8004148 <puts+0xc>)
 800413e:	4601      	mov	r1, r0
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f7ff bf9f 	b.w	8004084 <_puts_r>
 8004146:	bf00      	nop
 8004148:	20000328 	.word	0x20000328

0800414c <setvbuf>:
 800414c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004150:	461d      	mov	r5, r3
 8004152:	4b51      	ldr	r3, [pc, #324]	; (8004298 <setvbuf+0x14c>)
 8004154:	681e      	ldr	r6, [r3, #0]
 8004156:	4604      	mov	r4, r0
 8004158:	460f      	mov	r7, r1
 800415a:	4690      	mov	r8, r2
 800415c:	b126      	cbz	r6, 8004168 <setvbuf+0x1c>
 800415e:	69b3      	ldr	r3, [r6, #24]
 8004160:	b913      	cbnz	r3, 8004168 <setvbuf+0x1c>
 8004162:	4630      	mov	r0, r6
 8004164:	f000 fa60 	bl	8004628 <__sinit>
 8004168:	4b4c      	ldr	r3, [pc, #304]	; (800429c <setvbuf+0x150>)
 800416a:	429c      	cmp	r4, r3
 800416c:	d152      	bne.n	8004214 <setvbuf+0xc8>
 800416e:	6874      	ldr	r4, [r6, #4]
 8004170:	f1b8 0f02 	cmp.w	r8, #2
 8004174:	d006      	beq.n	8004184 <setvbuf+0x38>
 8004176:	f1b8 0f01 	cmp.w	r8, #1
 800417a:	f200 8089 	bhi.w	8004290 <setvbuf+0x144>
 800417e:	2d00      	cmp	r5, #0
 8004180:	f2c0 8086 	blt.w	8004290 <setvbuf+0x144>
 8004184:	4621      	mov	r1, r4
 8004186:	4630      	mov	r0, r6
 8004188:	f000 f9e4 	bl	8004554 <_fflush_r>
 800418c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800418e:	b141      	cbz	r1, 80041a2 <setvbuf+0x56>
 8004190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004194:	4299      	cmp	r1, r3
 8004196:	d002      	beq.n	800419e <setvbuf+0x52>
 8004198:	4630      	mov	r0, r6
 800419a:	f000 fb3b 	bl	8004814 <_free_r>
 800419e:	2300      	movs	r3, #0
 80041a0:	6363      	str	r3, [r4, #52]	; 0x34
 80041a2:	2300      	movs	r3, #0
 80041a4:	61a3      	str	r3, [r4, #24]
 80041a6:	6063      	str	r3, [r4, #4]
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	061b      	lsls	r3, r3, #24
 80041ac:	d503      	bpl.n	80041b6 <setvbuf+0x6a>
 80041ae:	6921      	ldr	r1, [r4, #16]
 80041b0:	4630      	mov	r0, r6
 80041b2:	f000 fb2f 	bl	8004814 <_free_r>
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80041bc:	f023 0303 	bic.w	r3, r3, #3
 80041c0:	f1b8 0f02 	cmp.w	r8, #2
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	d05d      	beq.n	8004284 <setvbuf+0x138>
 80041c8:	ab01      	add	r3, sp, #4
 80041ca:	466a      	mov	r2, sp
 80041cc:	4621      	mov	r1, r4
 80041ce:	4630      	mov	r0, r6
 80041d0:	f000 fab4 	bl	800473c <__swhatbuf_r>
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	4318      	orrs	r0, r3
 80041d8:	81a0      	strh	r0, [r4, #12]
 80041da:	bb2d      	cbnz	r5, 8004228 <setvbuf+0xdc>
 80041dc:	9d00      	ldr	r5, [sp, #0]
 80041de:	4628      	mov	r0, r5
 80041e0:	f000 fb10 	bl	8004804 <malloc>
 80041e4:	4607      	mov	r7, r0
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d14e      	bne.n	8004288 <setvbuf+0x13c>
 80041ea:	f8dd 9000 	ldr.w	r9, [sp]
 80041ee:	45a9      	cmp	r9, r5
 80041f0:	d13c      	bne.n	800426c <setvbuf+0x120>
 80041f2:	f04f 30ff 	mov.w	r0, #4294967295
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	81a3      	strh	r3, [r4, #12]
 80041fe:	2300      	movs	r3, #0
 8004200:	60a3      	str	r3, [r4, #8]
 8004202:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	6123      	str	r3, [r4, #16]
 800420a:	2301      	movs	r3, #1
 800420c:	6163      	str	r3, [r4, #20]
 800420e:	b003      	add	sp, #12
 8004210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004214:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <setvbuf+0x154>)
 8004216:	429c      	cmp	r4, r3
 8004218:	d101      	bne.n	800421e <setvbuf+0xd2>
 800421a:	68b4      	ldr	r4, [r6, #8]
 800421c:	e7a8      	b.n	8004170 <setvbuf+0x24>
 800421e:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <setvbuf+0x158>)
 8004220:	429c      	cmp	r4, r3
 8004222:	bf08      	it	eq
 8004224:	68f4      	ldreq	r4, [r6, #12]
 8004226:	e7a3      	b.n	8004170 <setvbuf+0x24>
 8004228:	2f00      	cmp	r7, #0
 800422a:	d0d8      	beq.n	80041de <setvbuf+0x92>
 800422c:	69b3      	ldr	r3, [r6, #24]
 800422e:	b913      	cbnz	r3, 8004236 <setvbuf+0xea>
 8004230:	4630      	mov	r0, r6
 8004232:	f000 f9f9 	bl	8004628 <__sinit>
 8004236:	f1b8 0f01 	cmp.w	r8, #1
 800423a:	bf08      	it	eq
 800423c:	89a3      	ldrheq	r3, [r4, #12]
 800423e:	6027      	str	r7, [r4, #0]
 8004240:	bf04      	itt	eq
 8004242:	f043 0301 	orreq.w	r3, r3, #1
 8004246:	81a3      	strheq	r3, [r4, #12]
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	6127      	str	r7, [r4, #16]
 800424c:	f013 0008 	ands.w	r0, r3, #8
 8004250:	6165      	str	r5, [r4, #20]
 8004252:	d01b      	beq.n	800428c <setvbuf+0x140>
 8004254:	f013 0001 	ands.w	r0, r3, #1
 8004258:	bf18      	it	ne
 800425a:	426d      	negne	r5, r5
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	bf1d      	ittte	ne
 8004262:	60a3      	strne	r3, [r4, #8]
 8004264:	61a5      	strne	r5, [r4, #24]
 8004266:	4618      	movne	r0, r3
 8004268:	60a5      	streq	r5, [r4, #8]
 800426a:	e7d0      	b.n	800420e <setvbuf+0xc2>
 800426c:	4648      	mov	r0, r9
 800426e:	f000 fac9 	bl	8004804 <malloc>
 8004272:	4607      	mov	r7, r0
 8004274:	2800      	cmp	r0, #0
 8004276:	d0bc      	beq.n	80041f2 <setvbuf+0xa6>
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427e:	81a3      	strh	r3, [r4, #12]
 8004280:	464d      	mov	r5, r9
 8004282:	e7d3      	b.n	800422c <setvbuf+0xe0>
 8004284:	2000      	movs	r0, #0
 8004286:	e7b6      	b.n	80041f6 <setvbuf+0xaa>
 8004288:	46a9      	mov	r9, r5
 800428a:	e7f5      	b.n	8004278 <setvbuf+0x12c>
 800428c:	60a0      	str	r0, [r4, #8]
 800428e:	e7be      	b.n	800420e <setvbuf+0xc2>
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	e7bb      	b.n	800420e <setvbuf+0xc2>
 8004296:	bf00      	nop
 8004298:	20000328 	.word	0x20000328
 800429c:	0800534c 	.word	0x0800534c
 80042a0:	0800536c 	.word	0x0800536c
 80042a4:	0800532c 	.word	0x0800532c

080042a8 <strchr>:
 80042a8:	b2c9      	uxtb	r1, r1
 80042aa:	4603      	mov	r3, r0
 80042ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b0:	b11a      	cbz	r2, 80042ba <strchr+0x12>
 80042b2:	4291      	cmp	r1, r2
 80042b4:	d1f9      	bne.n	80042aa <strchr+0x2>
 80042b6:	4618      	mov	r0, r3
 80042b8:	4770      	bx	lr
 80042ba:	2900      	cmp	r1, #0
 80042bc:	bf0c      	ite	eq
 80042be:	4618      	moveq	r0, r3
 80042c0:	2000      	movne	r0, #0
 80042c2:	4770      	bx	lr

080042c4 <__swbuf_r>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	460e      	mov	r6, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	4605      	mov	r5, r0
 80042cc:	b118      	cbz	r0, 80042d6 <__swbuf_r+0x12>
 80042ce:	6983      	ldr	r3, [r0, #24]
 80042d0:	b90b      	cbnz	r3, 80042d6 <__swbuf_r+0x12>
 80042d2:	f000 f9a9 	bl	8004628 <__sinit>
 80042d6:	4b21      	ldr	r3, [pc, #132]	; (800435c <__swbuf_r+0x98>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	d12a      	bne.n	8004332 <__swbuf_r+0x6e>
 80042dc:	686c      	ldr	r4, [r5, #4]
 80042de:	69a3      	ldr	r3, [r4, #24]
 80042e0:	60a3      	str	r3, [r4, #8]
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	071a      	lsls	r2, r3, #28
 80042e6:	d52e      	bpl.n	8004346 <__swbuf_r+0x82>
 80042e8:	6923      	ldr	r3, [r4, #16]
 80042ea:	b363      	cbz	r3, 8004346 <__swbuf_r+0x82>
 80042ec:	6923      	ldr	r3, [r4, #16]
 80042ee:	6820      	ldr	r0, [r4, #0]
 80042f0:	1ac0      	subs	r0, r0, r3
 80042f2:	6963      	ldr	r3, [r4, #20]
 80042f4:	b2f6      	uxtb	r6, r6
 80042f6:	4298      	cmp	r0, r3
 80042f8:	4637      	mov	r7, r6
 80042fa:	db04      	blt.n	8004306 <__swbuf_r+0x42>
 80042fc:	4621      	mov	r1, r4
 80042fe:	4628      	mov	r0, r5
 8004300:	f000 f928 	bl	8004554 <_fflush_r>
 8004304:	bb28      	cbnz	r0, 8004352 <__swbuf_r+0x8e>
 8004306:	68a3      	ldr	r3, [r4, #8]
 8004308:	3b01      	subs	r3, #1
 800430a:	60a3      	str	r3, [r4, #8]
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	6022      	str	r2, [r4, #0]
 8004312:	701e      	strb	r6, [r3, #0]
 8004314:	6963      	ldr	r3, [r4, #20]
 8004316:	3001      	adds	r0, #1
 8004318:	4298      	cmp	r0, r3
 800431a:	d004      	beq.n	8004326 <__swbuf_r+0x62>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	07db      	lsls	r3, r3, #31
 8004320:	d519      	bpl.n	8004356 <__swbuf_r+0x92>
 8004322:	2e0a      	cmp	r6, #10
 8004324:	d117      	bne.n	8004356 <__swbuf_r+0x92>
 8004326:	4621      	mov	r1, r4
 8004328:	4628      	mov	r0, r5
 800432a:	f000 f913 	bl	8004554 <_fflush_r>
 800432e:	b190      	cbz	r0, 8004356 <__swbuf_r+0x92>
 8004330:	e00f      	b.n	8004352 <__swbuf_r+0x8e>
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <__swbuf_r+0x9c>)
 8004334:	429c      	cmp	r4, r3
 8004336:	d101      	bne.n	800433c <__swbuf_r+0x78>
 8004338:	68ac      	ldr	r4, [r5, #8]
 800433a:	e7d0      	b.n	80042de <__swbuf_r+0x1a>
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <__swbuf_r+0xa0>)
 800433e:	429c      	cmp	r4, r3
 8004340:	bf08      	it	eq
 8004342:	68ec      	ldreq	r4, [r5, #12]
 8004344:	e7cb      	b.n	80042de <__swbuf_r+0x1a>
 8004346:	4621      	mov	r1, r4
 8004348:	4628      	mov	r0, r5
 800434a:	f000 f80d 	bl	8004368 <__swsetup_r>
 800434e:	2800      	cmp	r0, #0
 8004350:	d0cc      	beq.n	80042ec <__swbuf_r+0x28>
 8004352:	f04f 37ff 	mov.w	r7, #4294967295
 8004356:	4638      	mov	r0, r7
 8004358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800435a:	bf00      	nop
 800435c:	0800534c 	.word	0x0800534c
 8004360:	0800536c 	.word	0x0800536c
 8004364:	0800532c 	.word	0x0800532c

08004368 <__swsetup_r>:
 8004368:	4b32      	ldr	r3, [pc, #200]	; (8004434 <__swsetup_r+0xcc>)
 800436a:	b570      	push	{r4, r5, r6, lr}
 800436c:	681d      	ldr	r5, [r3, #0]
 800436e:	4606      	mov	r6, r0
 8004370:	460c      	mov	r4, r1
 8004372:	b125      	cbz	r5, 800437e <__swsetup_r+0x16>
 8004374:	69ab      	ldr	r3, [r5, #24]
 8004376:	b913      	cbnz	r3, 800437e <__swsetup_r+0x16>
 8004378:	4628      	mov	r0, r5
 800437a:	f000 f955 	bl	8004628 <__sinit>
 800437e:	4b2e      	ldr	r3, [pc, #184]	; (8004438 <__swsetup_r+0xd0>)
 8004380:	429c      	cmp	r4, r3
 8004382:	d10f      	bne.n	80043a4 <__swsetup_r+0x3c>
 8004384:	686c      	ldr	r4, [r5, #4]
 8004386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800438a:	b29a      	uxth	r2, r3
 800438c:	0715      	lsls	r5, r2, #28
 800438e:	d42c      	bmi.n	80043ea <__swsetup_r+0x82>
 8004390:	06d0      	lsls	r0, r2, #27
 8004392:	d411      	bmi.n	80043b8 <__swsetup_r+0x50>
 8004394:	2209      	movs	r2, #9
 8004396:	6032      	str	r2, [r6, #0]
 8004398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800439c:	81a3      	strh	r3, [r4, #12]
 800439e:	f04f 30ff 	mov.w	r0, #4294967295
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <__swsetup_r+0xd4>)
 80043a6:	429c      	cmp	r4, r3
 80043a8:	d101      	bne.n	80043ae <__swsetup_r+0x46>
 80043aa:	68ac      	ldr	r4, [r5, #8]
 80043ac:	e7eb      	b.n	8004386 <__swsetup_r+0x1e>
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <__swsetup_r+0xd8>)
 80043b0:	429c      	cmp	r4, r3
 80043b2:	bf08      	it	eq
 80043b4:	68ec      	ldreq	r4, [r5, #12]
 80043b6:	e7e6      	b.n	8004386 <__swsetup_r+0x1e>
 80043b8:	0751      	lsls	r1, r2, #29
 80043ba:	d512      	bpl.n	80043e2 <__swsetup_r+0x7a>
 80043bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043be:	b141      	cbz	r1, 80043d2 <__swsetup_r+0x6a>
 80043c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c4:	4299      	cmp	r1, r3
 80043c6:	d002      	beq.n	80043ce <__swsetup_r+0x66>
 80043c8:	4630      	mov	r0, r6
 80043ca:	f000 fa23 	bl	8004814 <_free_r>
 80043ce:	2300      	movs	r3, #0
 80043d0:	6363      	str	r3, [r4, #52]	; 0x34
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043d8:	81a3      	strh	r3, [r4, #12]
 80043da:	2300      	movs	r3, #0
 80043dc:	6063      	str	r3, [r4, #4]
 80043de:	6923      	ldr	r3, [r4, #16]
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	81a3      	strh	r3, [r4, #12]
 80043ea:	6923      	ldr	r3, [r4, #16]
 80043ec:	b94b      	cbnz	r3, 8004402 <__swsetup_r+0x9a>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f8:	d003      	beq.n	8004402 <__swsetup_r+0x9a>
 80043fa:	4621      	mov	r1, r4
 80043fc:	4630      	mov	r0, r6
 80043fe:	f000 f9c1 	bl	8004784 <__smakebuf_r>
 8004402:	89a2      	ldrh	r2, [r4, #12]
 8004404:	f012 0301 	ands.w	r3, r2, #1
 8004408:	d00c      	beq.n	8004424 <__swsetup_r+0xbc>
 800440a:	2300      	movs	r3, #0
 800440c:	60a3      	str	r3, [r4, #8]
 800440e:	6963      	ldr	r3, [r4, #20]
 8004410:	425b      	negs	r3, r3
 8004412:	61a3      	str	r3, [r4, #24]
 8004414:	6923      	ldr	r3, [r4, #16]
 8004416:	b953      	cbnz	r3, 800442e <__swsetup_r+0xc6>
 8004418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800441c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004420:	d1ba      	bne.n	8004398 <__swsetup_r+0x30>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	0792      	lsls	r2, r2, #30
 8004426:	bf58      	it	pl
 8004428:	6963      	ldrpl	r3, [r4, #20]
 800442a:	60a3      	str	r3, [r4, #8]
 800442c:	e7f2      	b.n	8004414 <__swsetup_r+0xac>
 800442e:	2000      	movs	r0, #0
 8004430:	e7f7      	b.n	8004422 <__swsetup_r+0xba>
 8004432:	bf00      	nop
 8004434:	20000328 	.word	0x20000328
 8004438:	0800534c 	.word	0x0800534c
 800443c:	0800536c 	.word	0x0800536c
 8004440:	0800532c 	.word	0x0800532c

08004444 <__sflush_r>:
 8004444:	898a      	ldrh	r2, [r1, #12]
 8004446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444a:	4605      	mov	r5, r0
 800444c:	0710      	lsls	r0, r2, #28
 800444e:	460c      	mov	r4, r1
 8004450:	d45a      	bmi.n	8004508 <__sflush_r+0xc4>
 8004452:	684b      	ldr	r3, [r1, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	dc05      	bgt.n	8004464 <__sflush_r+0x20>
 8004458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	dc02      	bgt.n	8004464 <__sflush_r+0x20>
 800445e:	2000      	movs	r0, #0
 8004460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004466:	2e00      	cmp	r6, #0
 8004468:	d0f9      	beq.n	800445e <__sflush_r+0x1a>
 800446a:	2300      	movs	r3, #0
 800446c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004470:	682f      	ldr	r7, [r5, #0]
 8004472:	602b      	str	r3, [r5, #0]
 8004474:	d033      	beq.n	80044de <__sflush_r+0x9a>
 8004476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	075a      	lsls	r2, r3, #29
 800447c:	d505      	bpl.n	800448a <__sflush_r+0x46>
 800447e:	6863      	ldr	r3, [r4, #4]
 8004480:	1ac0      	subs	r0, r0, r3
 8004482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004484:	b10b      	cbz	r3, 800448a <__sflush_r+0x46>
 8004486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004488:	1ac0      	subs	r0, r0, r3
 800448a:	2300      	movs	r3, #0
 800448c:	4602      	mov	r2, r0
 800448e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004490:	6a21      	ldr	r1, [r4, #32]
 8004492:	4628      	mov	r0, r5
 8004494:	47b0      	blx	r6
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	d106      	bne.n	80044aa <__sflush_r+0x66>
 800449c:	6829      	ldr	r1, [r5, #0]
 800449e:	291d      	cmp	r1, #29
 80044a0:	d84b      	bhi.n	800453a <__sflush_r+0xf6>
 80044a2:	4a2b      	ldr	r2, [pc, #172]	; (8004550 <__sflush_r+0x10c>)
 80044a4:	40ca      	lsrs	r2, r1
 80044a6:	07d6      	lsls	r6, r2, #31
 80044a8:	d547      	bpl.n	800453a <__sflush_r+0xf6>
 80044aa:	2200      	movs	r2, #0
 80044ac:	6062      	str	r2, [r4, #4]
 80044ae:	04d9      	lsls	r1, r3, #19
 80044b0:	6922      	ldr	r2, [r4, #16]
 80044b2:	6022      	str	r2, [r4, #0]
 80044b4:	d504      	bpl.n	80044c0 <__sflush_r+0x7c>
 80044b6:	1c42      	adds	r2, r0, #1
 80044b8:	d101      	bne.n	80044be <__sflush_r+0x7a>
 80044ba:	682b      	ldr	r3, [r5, #0]
 80044bc:	b903      	cbnz	r3, 80044c0 <__sflush_r+0x7c>
 80044be:	6560      	str	r0, [r4, #84]	; 0x54
 80044c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044c2:	602f      	str	r7, [r5, #0]
 80044c4:	2900      	cmp	r1, #0
 80044c6:	d0ca      	beq.n	800445e <__sflush_r+0x1a>
 80044c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044cc:	4299      	cmp	r1, r3
 80044ce:	d002      	beq.n	80044d6 <__sflush_r+0x92>
 80044d0:	4628      	mov	r0, r5
 80044d2:	f000 f99f 	bl	8004814 <_free_r>
 80044d6:	2000      	movs	r0, #0
 80044d8:	6360      	str	r0, [r4, #52]	; 0x34
 80044da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044de:	6a21      	ldr	r1, [r4, #32]
 80044e0:	2301      	movs	r3, #1
 80044e2:	4628      	mov	r0, r5
 80044e4:	47b0      	blx	r6
 80044e6:	1c41      	adds	r1, r0, #1
 80044e8:	d1c6      	bne.n	8004478 <__sflush_r+0x34>
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0c3      	beq.n	8004478 <__sflush_r+0x34>
 80044f0:	2b1d      	cmp	r3, #29
 80044f2:	d001      	beq.n	80044f8 <__sflush_r+0xb4>
 80044f4:	2b16      	cmp	r3, #22
 80044f6:	d101      	bne.n	80044fc <__sflush_r+0xb8>
 80044f8:	602f      	str	r7, [r5, #0]
 80044fa:	e7b0      	b.n	800445e <__sflush_r+0x1a>
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004502:	81a3      	strh	r3, [r4, #12]
 8004504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004508:	690f      	ldr	r7, [r1, #16]
 800450a:	2f00      	cmp	r7, #0
 800450c:	d0a7      	beq.n	800445e <__sflush_r+0x1a>
 800450e:	0793      	lsls	r3, r2, #30
 8004510:	680e      	ldr	r6, [r1, #0]
 8004512:	bf08      	it	eq
 8004514:	694b      	ldreq	r3, [r1, #20]
 8004516:	600f      	str	r7, [r1, #0]
 8004518:	bf18      	it	ne
 800451a:	2300      	movne	r3, #0
 800451c:	eba6 0807 	sub.w	r8, r6, r7
 8004520:	608b      	str	r3, [r1, #8]
 8004522:	f1b8 0f00 	cmp.w	r8, #0
 8004526:	dd9a      	ble.n	800445e <__sflush_r+0x1a>
 8004528:	4643      	mov	r3, r8
 800452a:	463a      	mov	r2, r7
 800452c:	6a21      	ldr	r1, [r4, #32]
 800452e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004530:	4628      	mov	r0, r5
 8004532:	47b0      	blx	r6
 8004534:	2800      	cmp	r0, #0
 8004536:	dc07      	bgt.n	8004548 <__sflush_r+0x104>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004548:	4407      	add	r7, r0
 800454a:	eba8 0800 	sub.w	r8, r8, r0
 800454e:	e7e8      	b.n	8004522 <__sflush_r+0xde>
 8004550:	20400001 	.word	0x20400001

08004554 <_fflush_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	690b      	ldr	r3, [r1, #16]
 8004558:	4605      	mov	r5, r0
 800455a:	460c      	mov	r4, r1
 800455c:	b1db      	cbz	r3, 8004596 <_fflush_r+0x42>
 800455e:	b118      	cbz	r0, 8004568 <_fflush_r+0x14>
 8004560:	6983      	ldr	r3, [r0, #24]
 8004562:	b90b      	cbnz	r3, 8004568 <_fflush_r+0x14>
 8004564:	f000 f860 	bl	8004628 <__sinit>
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <_fflush_r+0x48>)
 800456a:	429c      	cmp	r4, r3
 800456c:	d109      	bne.n	8004582 <_fflush_r+0x2e>
 800456e:	686c      	ldr	r4, [r5, #4]
 8004570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004574:	b17b      	cbz	r3, 8004596 <_fflush_r+0x42>
 8004576:	4621      	mov	r1, r4
 8004578:	4628      	mov	r0, r5
 800457a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800457e:	f7ff bf61 	b.w	8004444 <__sflush_r>
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <_fflush_r+0x4c>)
 8004584:	429c      	cmp	r4, r3
 8004586:	d101      	bne.n	800458c <_fflush_r+0x38>
 8004588:	68ac      	ldr	r4, [r5, #8]
 800458a:	e7f1      	b.n	8004570 <_fflush_r+0x1c>
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <_fflush_r+0x50>)
 800458e:	429c      	cmp	r4, r3
 8004590:	bf08      	it	eq
 8004592:	68ec      	ldreq	r4, [r5, #12]
 8004594:	e7ec      	b.n	8004570 <_fflush_r+0x1c>
 8004596:	2000      	movs	r0, #0
 8004598:	bd38      	pop	{r3, r4, r5, pc}
 800459a:	bf00      	nop
 800459c:	0800534c 	.word	0x0800534c
 80045a0:	0800536c 	.word	0x0800536c
 80045a4:	0800532c 	.word	0x0800532c

080045a8 <_cleanup_r>:
 80045a8:	4901      	ldr	r1, [pc, #4]	; (80045b0 <_cleanup_r+0x8>)
 80045aa:	f000 b8a9 	b.w	8004700 <_fwalk_reent>
 80045ae:	bf00      	nop
 80045b0:	08004555 	.word	0x08004555

080045b4 <std.isra.0>:
 80045b4:	2300      	movs	r3, #0
 80045b6:	b510      	push	{r4, lr}
 80045b8:	4604      	mov	r4, r0
 80045ba:	6003      	str	r3, [r0, #0]
 80045bc:	6043      	str	r3, [r0, #4]
 80045be:	6083      	str	r3, [r0, #8]
 80045c0:	8181      	strh	r1, [r0, #12]
 80045c2:	6643      	str	r3, [r0, #100]	; 0x64
 80045c4:	81c2      	strh	r2, [r0, #14]
 80045c6:	6103      	str	r3, [r0, #16]
 80045c8:	6143      	str	r3, [r0, #20]
 80045ca:	6183      	str	r3, [r0, #24]
 80045cc:	4619      	mov	r1, r3
 80045ce:	2208      	movs	r2, #8
 80045d0:	305c      	adds	r0, #92	; 0x5c
 80045d2:	f7ff fd37 	bl	8004044 <memset>
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <std.isra.0+0x38>)
 80045d8:	6263      	str	r3, [r4, #36]	; 0x24
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <std.isra.0+0x3c>)
 80045dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <std.isra.0+0x40>)
 80045e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <std.isra.0+0x44>)
 80045e4:	6224      	str	r4, [r4, #32]
 80045e6:	6323      	str	r3, [r4, #48]	; 0x30
 80045e8:	bd10      	pop	{r4, pc}
 80045ea:	bf00      	nop
 80045ec:	08004f39 	.word	0x08004f39
 80045f0:	08004f5b 	.word	0x08004f5b
 80045f4:	08004f93 	.word	0x08004f93
 80045f8:	08004fb7 	.word	0x08004fb7

080045fc <__sfmoreglue>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	1e4a      	subs	r2, r1, #1
 8004600:	2568      	movs	r5, #104	; 0x68
 8004602:	4355      	muls	r5, r2
 8004604:	460e      	mov	r6, r1
 8004606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800460a:	f000 f951 	bl	80048b0 <_malloc_r>
 800460e:	4604      	mov	r4, r0
 8004610:	b140      	cbz	r0, 8004624 <__sfmoreglue+0x28>
 8004612:	2100      	movs	r1, #0
 8004614:	e880 0042 	stmia.w	r0, {r1, r6}
 8004618:	300c      	adds	r0, #12
 800461a:	60a0      	str	r0, [r4, #8]
 800461c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004620:	f7ff fd10 	bl	8004044 <memset>
 8004624:	4620      	mov	r0, r4
 8004626:	bd70      	pop	{r4, r5, r6, pc}

08004628 <__sinit>:
 8004628:	6983      	ldr	r3, [r0, #24]
 800462a:	b510      	push	{r4, lr}
 800462c:	4604      	mov	r4, r0
 800462e:	bb33      	cbnz	r3, 800467e <__sinit+0x56>
 8004630:	6483      	str	r3, [r0, #72]	; 0x48
 8004632:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004634:	6503      	str	r3, [r0, #80]	; 0x50
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <__sinit+0x58>)
 8004638:	4a12      	ldr	r2, [pc, #72]	; (8004684 <__sinit+0x5c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6282      	str	r2, [r0, #40]	; 0x28
 800463e:	4298      	cmp	r0, r3
 8004640:	bf04      	itt	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	6183      	streq	r3, [r0, #24]
 8004646:	f000 f81f 	bl	8004688 <__sfp>
 800464a:	6060      	str	r0, [r4, #4]
 800464c:	4620      	mov	r0, r4
 800464e:	f000 f81b 	bl	8004688 <__sfp>
 8004652:	60a0      	str	r0, [r4, #8]
 8004654:	4620      	mov	r0, r4
 8004656:	f000 f817 	bl	8004688 <__sfp>
 800465a:	2200      	movs	r2, #0
 800465c:	60e0      	str	r0, [r4, #12]
 800465e:	2104      	movs	r1, #4
 8004660:	6860      	ldr	r0, [r4, #4]
 8004662:	f7ff ffa7 	bl	80045b4 <std.isra.0>
 8004666:	2201      	movs	r2, #1
 8004668:	2109      	movs	r1, #9
 800466a:	68a0      	ldr	r0, [r4, #8]
 800466c:	f7ff ffa2 	bl	80045b4 <std.isra.0>
 8004670:	2202      	movs	r2, #2
 8004672:	2112      	movs	r1, #18
 8004674:	68e0      	ldr	r0, [r4, #12]
 8004676:	f7ff ff9d 	bl	80045b4 <std.isra.0>
 800467a:	2301      	movs	r3, #1
 800467c:	61a3      	str	r3, [r4, #24]
 800467e:	bd10      	pop	{r4, pc}
 8004680:	08005328 	.word	0x08005328
 8004684:	080045a9 	.word	0x080045a9

08004688 <__sfp>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <__sfp+0x74>)
 800468c:	681e      	ldr	r6, [r3, #0]
 800468e:	69b3      	ldr	r3, [r6, #24]
 8004690:	4607      	mov	r7, r0
 8004692:	b913      	cbnz	r3, 800469a <__sfp+0x12>
 8004694:	4630      	mov	r0, r6
 8004696:	f7ff ffc7 	bl	8004628 <__sinit>
 800469a:	3648      	adds	r6, #72	; 0x48
 800469c:	68b4      	ldr	r4, [r6, #8]
 800469e:	6873      	ldr	r3, [r6, #4]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	d503      	bpl.n	80046ac <__sfp+0x24>
 80046a4:	6833      	ldr	r3, [r6, #0]
 80046a6:	b133      	cbz	r3, 80046b6 <__sfp+0x2e>
 80046a8:	6836      	ldr	r6, [r6, #0]
 80046aa:	e7f7      	b.n	800469c <__sfp+0x14>
 80046ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046b0:	b16d      	cbz	r5, 80046ce <__sfp+0x46>
 80046b2:	3468      	adds	r4, #104	; 0x68
 80046b4:	e7f4      	b.n	80046a0 <__sfp+0x18>
 80046b6:	2104      	movs	r1, #4
 80046b8:	4638      	mov	r0, r7
 80046ba:	f7ff ff9f 	bl	80045fc <__sfmoreglue>
 80046be:	6030      	str	r0, [r6, #0]
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d1f1      	bne.n	80046a8 <__sfp+0x20>
 80046c4:	230c      	movs	r3, #12
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4604      	mov	r4, r0
 80046ca:	4620      	mov	r0, r4
 80046cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046d2:	81e3      	strh	r3, [r4, #14]
 80046d4:	2301      	movs	r3, #1
 80046d6:	81a3      	strh	r3, [r4, #12]
 80046d8:	6665      	str	r5, [r4, #100]	; 0x64
 80046da:	6025      	str	r5, [r4, #0]
 80046dc:	60a5      	str	r5, [r4, #8]
 80046de:	6065      	str	r5, [r4, #4]
 80046e0:	6125      	str	r5, [r4, #16]
 80046e2:	6165      	str	r5, [r4, #20]
 80046e4:	61a5      	str	r5, [r4, #24]
 80046e6:	2208      	movs	r2, #8
 80046e8:	4629      	mov	r1, r5
 80046ea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046ee:	f7ff fca9 	bl	8004044 <memset>
 80046f2:	6365      	str	r5, [r4, #52]	; 0x34
 80046f4:	63a5      	str	r5, [r4, #56]	; 0x38
 80046f6:	64a5      	str	r5, [r4, #72]	; 0x48
 80046f8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80046fa:	e7e6      	b.n	80046ca <__sfp+0x42>
 80046fc:	08005328 	.word	0x08005328

08004700 <_fwalk_reent>:
 8004700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004704:	4680      	mov	r8, r0
 8004706:	4689      	mov	r9, r1
 8004708:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800470c:	2600      	movs	r6, #0
 800470e:	b914      	cbnz	r4, 8004716 <_fwalk_reent+0x16>
 8004710:	4630      	mov	r0, r6
 8004712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004716:	68a5      	ldr	r5, [r4, #8]
 8004718:	6867      	ldr	r7, [r4, #4]
 800471a:	3f01      	subs	r7, #1
 800471c:	d501      	bpl.n	8004722 <_fwalk_reent+0x22>
 800471e:	6824      	ldr	r4, [r4, #0]
 8004720:	e7f5      	b.n	800470e <_fwalk_reent+0xe>
 8004722:	89ab      	ldrh	r3, [r5, #12]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d907      	bls.n	8004738 <_fwalk_reent+0x38>
 8004728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800472c:	3301      	adds	r3, #1
 800472e:	d003      	beq.n	8004738 <_fwalk_reent+0x38>
 8004730:	4629      	mov	r1, r5
 8004732:	4640      	mov	r0, r8
 8004734:	47c8      	blx	r9
 8004736:	4306      	orrs	r6, r0
 8004738:	3568      	adds	r5, #104	; 0x68
 800473a:	e7ee      	b.n	800471a <_fwalk_reent+0x1a>

0800473c <__swhatbuf_r>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	460e      	mov	r6, r1
 8004740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004744:	2900      	cmp	r1, #0
 8004746:	b090      	sub	sp, #64	; 0x40
 8004748:	4614      	mov	r4, r2
 800474a:	461d      	mov	r5, r3
 800474c:	da07      	bge.n	800475e <__swhatbuf_r+0x22>
 800474e:	2300      	movs	r3, #0
 8004750:	602b      	str	r3, [r5, #0]
 8004752:	89b3      	ldrh	r3, [r6, #12]
 8004754:	061a      	lsls	r2, r3, #24
 8004756:	d410      	bmi.n	800477a <__swhatbuf_r+0x3e>
 8004758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475c:	e00e      	b.n	800477c <__swhatbuf_r+0x40>
 800475e:	aa01      	add	r2, sp, #4
 8004760:	f000 fc50 	bl	8005004 <_fstat_r>
 8004764:	2800      	cmp	r0, #0
 8004766:	dbf2      	blt.n	800474e <__swhatbuf_r+0x12>
 8004768:	9a02      	ldr	r2, [sp, #8]
 800476a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800476e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004772:	425a      	negs	r2, r3
 8004774:	415a      	adcs	r2, r3
 8004776:	602a      	str	r2, [r5, #0]
 8004778:	e7ee      	b.n	8004758 <__swhatbuf_r+0x1c>
 800477a:	2340      	movs	r3, #64	; 0x40
 800477c:	2000      	movs	r0, #0
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	b010      	add	sp, #64	; 0x40
 8004782:	bd70      	pop	{r4, r5, r6, pc}

08004784 <__smakebuf_r>:
 8004784:	898b      	ldrh	r3, [r1, #12]
 8004786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004788:	079d      	lsls	r5, r3, #30
 800478a:	4606      	mov	r6, r0
 800478c:	460c      	mov	r4, r1
 800478e:	d507      	bpl.n	80047a0 <__smakebuf_r+0x1c>
 8004790:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	6123      	str	r3, [r4, #16]
 8004798:	2301      	movs	r3, #1
 800479a:	6163      	str	r3, [r4, #20]
 800479c:	b002      	add	sp, #8
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	ab01      	add	r3, sp, #4
 80047a2:	466a      	mov	r2, sp
 80047a4:	f7ff ffca 	bl	800473c <__swhatbuf_r>
 80047a8:	9900      	ldr	r1, [sp, #0]
 80047aa:	4605      	mov	r5, r0
 80047ac:	4630      	mov	r0, r6
 80047ae:	f000 f87f 	bl	80048b0 <_malloc_r>
 80047b2:	b948      	cbnz	r0, 80047c8 <__smakebuf_r+0x44>
 80047b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b8:	059a      	lsls	r2, r3, #22
 80047ba:	d4ef      	bmi.n	800479c <__smakebuf_r+0x18>
 80047bc:	f023 0303 	bic.w	r3, r3, #3
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	81a3      	strh	r3, [r4, #12]
 80047c6:	e7e3      	b.n	8004790 <__smakebuf_r+0xc>
 80047c8:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <__smakebuf_r+0x7c>)
 80047ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	6020      	str	r0, [r4, #0]
 80047d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	9b00      	ldr	r3, [sp, #0]
 80047d8:	6163      	str	r3, [r4, #20]
 80047da:	9b01      	ldr	r3, [sp, #4]
 80047dc:	6120      	str	r0, [r4, #16]
 80047de:	b15b      	cbz	r3, 80047f8 <__smakebuf_r+0x74>
 80047e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 fc1f 	bl	8005028 <_isatty_r>
 80047ea:	b128      	cbz	r0, 80047f8 <__smakebuf_r+0x74>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	431d      	orrs	r5, r3
 80047fc:	81a5      	strh	r5, [r4, #12]
 80047fe:	e7cd      	b.n	800479c <__smakebuf_r+0x18>
 8004800:	080045a9 	.word	0x080045a9

08004804 <malloc>:
 8004804:	4b02      	ldr	r3, [pc, #8]	; (8004810 <malloc+0xc>)
 8004806:	4601      	mov	r1, r0
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	f000 b851 	b.w	80048b0 <_malloc_r>
 800480e:	bf00      	nop
 8004810:	20000328 	.word	0x20000328

08004814 <_free_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4605      	mov	r5, r0
 8004818:	2900      	cmp	r1, #0
 800481a:	d045      	beq.n	80048a8 <_free_r+0x94>
 800481c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004820:	1f0c      	subs	r4, r1, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	bfb8      	it	lt
 8004826:	18e4      	addlt	r4, r4, r3
 8004828:	f000 fc20 	bl	800506c <__malloc_lock>
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <_free_r+0x98>)
 800482e:	6813      	ldr	r3, [r2, #0]
 8004830:	4610      	mov	r0, r2
 8004832:	b933      	cbnz	r3, 8004842 <_free_r+0x2e>
 8004834:	6063      	str	r3, [r4, #4]
 8004836:	6014      	str	r4, [r2, #0]
 8004838:	4628      	mov	r0, r5
 800483a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800483e:	f000 bc16 	b.w	800506e <__malloc_unlock>
 8004842:	42a3      	cmp	r3, r4
 8004844:	d90c      	bls.n	8004860 <_free_r+0x4c>
 8004846:	6821      	ldr	r1, [r4, #0]
 8004848:	1862      	adds	r2, r4, r1
 800484a:	4293      	cmp	r3, r2
 800484c:	bf04      	itt	eq
 800484e:	681a      	ldreq	r2, [r3, #0]
 8004850:	685b      	ldreq	r3, [r3, #4]
 8004852:	6063      	str	r3, [r4, #4]
 8004854:	bf04      	itt	eq
 8004856:	1852      	addeq	r2, r2, r1
 8004858:	6022      	streq	r2, [r4, #0]
 800485a:	6004      	str	r4, [r0, #0]
 800485c:	e7ec      	b.n	8004838 <_free_r+0x24>
 800485e:	4613      	mov	r3, r2
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	b10a      	cbz	r2, 8004868 <_free_r+0x54>
 8004864:	42a2      	cmp	r2, r4
 8004866:	d9fa      	bls.n	800485e <_free_r+0x4a>
 8004868:	6819      	ldr	r1, [r3, #0]
 800486a:	1858      	adds	r0, r3, r1
 800486c:	42a0      	cmp	r0, r4
 800486e:	d10b      	bne.n	8004888 <_free_r+0x74>
 8004870:	6820      	ldr	r0, [r4, #0]
 8004872:	4401      	add	r1, r0
 8004874:	1858      	adds	r0, r3, r1
 8004876:	4282      	cmp	r2, r0
 8004878:	6019      	str	r1, [r3, #0]
 800487a:	d1dd      	bne.n	8004838 <_free_r+0x24>
 800487c:	6810      	ldr	r0, [r2, #0]
 800487e:	6852      	ldr	r2, [r2, #4]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	4401      	add	r1, r0
 8004884:	6019      	str	r1, [r3, #0]
 8004886:	e7d7      	b.n	8004838 <_free_r+0x24>
 8004888:	d902      	bls.n	8004890 <_free_r+0x7c>
 800488a:	230c      	movs	r3, #12
 800488c:	602b      	str	r3, [r5, #0]
 800488e:	e7d3      	b.n	8004838 <_free_r+0x24>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	1821      	adds	r1, r4, r0
 8004894:	428a      	cmp	r2, r1
 8004896:	bf04      	itt	eq
 8004898:	6811      	ldreq	r1, [r2, #0]
 800489a:	6852      	ldreq	r2, [r2, #4]
 800489c:	6062      	str	r2, [r4, #4]
 800489e:	bf04      	itt	eq
 80048a0:	1809      	addeq	r1, r1, r0
 80048a2:	6021      	streq	r1, [r4, #0]
 80048a4:	605c      	str	r4, [r3, #4]
 80048a6:	e7c7      	b.n	8004838 <_free_r+0x24>
 80048a8:	bd38      	pop	{r3, r4, r5, pc}
 80048aa:	bf00      	nop
 80048ac:	200003b0 	.word	0x200003b0

080048b0 <_malloc_r>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	1ccd      	adds	r5, r1, #3
 80048b4:	f025 0503 	bic.w	r5, r5, #3
 80048b8:	3508      	adds	r5, #8
 80048ba:	2d0c      	cmp	r5, #12
 80048bc:	bf38      	it	cc
 80048be:	250c      	movcc	r5, #12
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	4606      	mov	r6, r0
 80048c4:	db01      	blt.n	80048ca <_malloc_r+0x1a>
 80048c6:	42a9      	cmp	r1, r5
 80048c8:	d903      	bls.n	80048d2 <_malloc_r+0x22>
 80048ca:	230c      	movs	r3, #12
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	2000      	movs	r0, #0
 80048d0:	bd70      	pop	{r4, r5, r6, pc}
 80048d2:	f000 fbcb 	bl	800506c <__malloc_lock>
 80048d6:	4a23      	ldr	r2, [pc, #140]	; (8004964 <_malloc_r+0xb4>)
 80048d8:	6814      	ldr	r4, [r2, #0]
 80048da:	4621      	mov	r1, r4
 80048dc:	b991      	cbnz	r1, 8004904 <_malloc_r+0x54>
 80048de:	4c22      	ldr	r4, [pc, #136]	; (8004968 <_malloc_r+0xb8>)
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	b91b      	cbnz	r3, 80048ec <_malloc_r+0x3c>
 80048e4:	4630      	mov	r0, r6
 80048e6:	f000 fb17 	bl	8004f18 <_sbrk_r>
 80048ea:	6020      	str	r0, [r4, #0]
 80048ec:	4629      	mov	r1, r5
 80048ee:	4630      	mov	r0, r6
 80048f0:	f000 fb12 	bl	8004f18 <_sbrk_r>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d126      	bne.n	8004946 <_malloc_r+0x96>
 80048f8:	230c      	movs	r3, #12
 80048fa:	6033      	str	r3, [r6, #0]
 80048fc:	4630      	mov	r0, r6
 80048fe:	f000 fbb6 	bl	800506e <__malloc_unlock>
 8004902:	e7e4      	b.n	80048ce <_malloc_r+0x1e>
 8004904:	680b      	ldr	r3, [r1, #0]
 8004906:	1b5b      	subs	r3, r3, r5
 8004908:	d41a      	bmi.n	8004940 <_malloc_r+0x90>
 800490a:	2b0b      	cmp	r3, #11
 800490c:	d90f      	bls.n	800492e <_malloc_r+0x7e>
 800490e:	600b      	str	r3, [r1, #0]
 8004910:	50cd      	str	r5, [r1, r3]
 8004912:	18cc      	adds	r4, r1, r3
 8004914:	4630      	mov	r0, r6
 8004916:	f000 fbaa 	bl	800506e <__malloc_unlock>
 800491a:	f104 000b 	add.w	r0, r4, #11
 800491e:	1d23      	adds	r3, r4, #4
 8004920:	f020 0007 	bic.w	r0, r0, #7
 8004924:	1ac3      	subs	r3, r0, r3
 8004926:	d01b      	beq.n	8004960 <_malloc_r+0xb0>
 8004928:	425a      	negs	r2, r3
 800492a:	50e2      	str	r2, [r4, r3]
 800492c:	bd70      	pop	{r4, r5, r6, pc}
 800492e:	428c      	cmp	r4, r1
 8004930:	bf0d      	iteet	eq
 8004932:	6863      	ldreq	r3, [r4, #4]
 8004934:	684b      	ldrne	r3, [r1, #4]
 8004936:	6063      	strne	r3, [r4, #4]
 8004938:	6013      	streq	r3, [r2, #0]
 800493a:	bf18      	it	ne
 800493c:	460c      	movne	r4, r1
 800493e:	e7e9      	b.n	8004914 <_malloc_r+0x64>
 8004940:	460c      	mov	r4, r1
 8004942:	6849      	ldr	r1, [r1, #4]
 8004944:	e7ca      	b.n	80048dc <_malloc_r+0x2c>
 8004946:	1cc4      	adds	r4, r0, #3
 8004948:	f024 0403 	bic.w	r4, r4, #3
 800494c:	42a0      	cmp	r0, r4
 800494e:	d005      	beq.n	800495c <_malloc_r+0xac>
 8004950:	1a21      	subs	r1, r4, r0
 8004952:	4630      	mov	r0, r6
 8004954:	f000 fae0 	bl	8004f18 <_sbrk_r>
 8004958:	3001      	adds	r0, #1
 800495a:	d0cd      	beq.n	80048f8 <_malloc_r+0x48>
 800495c:	6025      	str	r5, [r4, #0]
 800495e:	e7d9      	b.n	8004914 <_malloc_r+0x64>
 8004960:	bd70      	pop	{r4, r5, r6, pc}
 8004962:	bf00      	nop
 8004964:	200003b0 	.word	0x200003b0
 8004968:	200003b4 	.word	0x200003b4

0800496c <__sfputc_r>:
 800496c:	6893      	ldr	r3, [r2, #8]
 800496e:	3b01      	subs	r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	b410      	push	{r4}
 8004974:	6093      	str	r3, [r2, #8]
 8004976:	da09      	bge.n	800498c <__sfputc_r+0x20>
 8004978:	6994      	ldr	r4, [r2, #24]
 800497a:	42a3      	cmp	r3, r4
 800497c:	db02      	blt.n	8004984 <__sfputc_r+0x18>
 800497e:	b2cb      	uxtb	r3, r1
 8004980:	2b0a      	cmp	r3, #10
 8004982:	d103      	bne.n	800498c <__sfputc_r+0x20>
 8004984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004988:	f7ff bc9c 	b.w	80042c4 <__swbuf_r>
 800498c:	6813      	ldr	r3, [r2, #0]
 800498e:	1c58      	adds	r0, r3, #1
 8004990:	6010      	str	r0, [r2, #0]
 8004992:	7019      	strb	r1, [r3, #0]
 8004994:	b2c8      	uxtb	r0, r1
 8004996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800499a:	4770      	bx	lr

0800499c <__sfputs_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	4606      	mov	r6, r0
 80049a0:	460f      	mov	r7, r1
 80049a2:	4614      	mov	r4, r2
 80049a4:	18d5      	adds	r5, r2, r3
 80049a6:	42ac      	cmp	r4, r5
 80049a8:	d101      	bne.n	80049ae <__sfputs_r+0x12>
 80049aa:	2000      	movs	r0, #0
 80049ac:	e007      	b.n	80049be <__sfputs_r+0x22>
 80049ae:	463a      	mov	r2, r7
 80049b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b4:	4630      	mov	r0, r6
 80049b6:	f7ff ffd9 	bl	800496c <__sfputc_r>
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	d1f3      	bne.n	80049a6 <__sfputs_r+0xa>
 80049be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049c0 <_vfiprintf_r>:
 80049c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c4:	b09d      	sub	sp, #116	; 0x74
 80049c6:	460c      	mov	r4, r1
 80049c8:	4617      	mov	r7, r2
 80049ca:	9303      	str	r3, [sp, #12]
 80049cc:	4606      	mov	r6, r0
 80049ce:	b118      	cbz	r0, 80049d8 <_vfiprintf_r+0x18>
 80049d0:	6983      	ldr	r3, [r0, #24]
 80049d2:	b90b      	cbnz	r3, 80049d8 <_vfiprintf_r+0x18>
 80049d4:	f7ff fe28 	bl	8004628 <__sinit>
 80049d8:	4b7c      	ldr	r3, [pc, #496]	; (8004bcc <_vfiprintf_r+0x20c>)
 80049da:	429c      	cmp	r4, r3
 80049dc:	d157      	bne.n	8004a8e <_vfiprintf_r+0xce>
 80049de:	6874      	ldr	r4, [r6, #4]
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	0718      	lsls	r0, r3, #28
 80049e4:	d55d      	bpl.n	8004aa2 <_vfiprintf_r+0xe2>
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05a      	beq.n	8004aa2 <_vfiprintf_r+0xe2>
 80049ec:	2300      	movs	r3, #0
 80049ee:	9309      	str	r3, [sp, #36]	; 0x24
 80049f0:	2320      	movs	r3, #32
 80049f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049f6:	2330      	movs	r3, #48	; 0x30
 80049f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049fc:	f04f 0b01 	mov.w	fp, #1
 8004a00:	46b8      	mov	r8, r7
 8004a02:	4645      	mov	r5, r8
 8004a04:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d155      	bne.n	8004ab8 <_vfiprintf_r+0xf8>
 8004a0c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004a10:	d00b      	beq.n	8004a2a <_vfiprintf_r+0x6a>
 8004a12:	4653      	mov	r3, sl
 8004a14:	463a      	mov	r2, r7
 8004a16:	4621      	mov	r1, r4
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f7ff ffbf 	bl	800499c <__sfputs_r>
 8004a1e:	3001      	adds	r0, #1
 8004a20:	f000 80c4 	beq.w	8004bac <_vfiprintf_r+0x1ec>
 8004a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a26:	4453      	add	r3, sl
 8004a28:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2a:	f898 3000 	ldrb.w	r3, [r8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80bc 	beq.w	8004bac <_vfiprintf_r+0x1ec>
 8004a34:	2300      	movs	r3, #0
 8004a36:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3a:	9304      	str	r3, [sp, #16]
 8004a3c:	9307      	str	r3, [sp, #28]
 8004a3e:	9205      	str	r2, [sp, #20]
 8004a40:	9306      	str	r3, [sp, #24]
 8004a42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a46:	931a      	str	r3, [sp, #104]	; 0x68
 8004a48:	2205      	movs	r2, #5
 8004a4a:	7829      	ldrb	r1, [r5, #0]
 8004a4c:	4860      	ldr	r0, [pc, #384]	; (8004bd0 <_vfiprintf_r+0x210>)
 8004a4e:	f7fb fbd7 	bl	8000200 <memchr>
 8004a52:	f105 0801 	add.w	r8, r5, #1
 8004a56:	9b04      	ldr	r3, [sp, #16]
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d131      	bne.n	8004ac0 <_vfiprintf_r+0x100>
 8004a5c:	06d9      	lsls	r1, r3, #27
 8004a5e:	bf44      	itt	mi
 8004a60:	2220      	movmi	r2, #32
 8004a62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a66:	071a      	lsls	r2, r3, #28
 8004a68:	bf44      	itt	mi
 8004a6a:	222b      	movmi	r2, #43	; 0x2b
 8004a6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a70:	782a      	ldrb	r2, [r5, #0]
 8004a72:	2a2a      	cmp	r2, #42	; 0x2a
 8004a74:	d02c      	beq.n	8004ad0 <_vfiprintf_r+0x110>
 8004a76:	9a07      	ldr	r2, [sp, #28]
 8004a78:	2100      	movs	r1, #0
 8004a7a:	200a      	movs	r0, #10
 8004a7c:	46a8      	mov	r8, r5
 8004a7e:	3501      	adds	r5, #1
 8004a80:	f898 3000 	ldrb.w	r3, [r8]
 8004a84:	3b30      	subs	r3, #48	; 0x30
 8004a86:	2b09      	cmp	r3, #9
 8004a88:	d96d      	bls.n	8004b66 <_vfiprintf_r+0x1a6>
 8004a8a:	b371      	cbz	r1, 8004aea <_vfiprintf_r+0x12a>
 8004a8c:	e026      	b.n	8004adc <_vfiprintf_r+0x11c>
 8004a8e:	4b51      	ldr	r3, [pc, #324]	; (8004bd4 <_vfiprintf_r+0x214>)
 8004a90:	429c      	cmp	r4, r3
 8004a92:	d101      	bne.n	8004a98 <_vfiprintf_r+0xd8>
 8004a94:	68b4      	ldr	r4, [r6, #8]
 8004a96:	e7a3      	b.n	80049e0 <_vfiprintf_r+0x20>
 8004a98:	4b4f      	ldr	r3, [pc, #316]	; (8004bd8 <_vfiprintf_r+0x218>)
 8004a9a:	429c      	cmp	r4, r3
 8004a9c:	bf08      	it	eq
 8004a9e:	68f4      	ldreq	r4, [r6, #12]
 8004aa0:	e79e      	b.n	80049e0 <_vfiprintf_r+0x20>
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	f7ff fc5f 	bl	8004368 <__swsetup_r>
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	d09e      	beq.n	80049ec <_vfiprintf_r+0x2c>
 8004aae:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab2:	b01d      	add	sp, #116	; 0x74
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab8:	2b25      	cmp	r3, #37	; 0x25
 8004aba:	d0a7      	beq.n	8004a0c <_vfiprintf_r+0x4c>
 8004abc:	46a8      	mov	r8, r5
 8004abe:	e7a0      	b.n	8004a02 <_vfiprintf_r+0x42>
 8004ac0:	4a43      	ldr	r2, [pc, #268]	; (8004bd0 <_vfiprintf_r+0x210>)
 8004ac2:	1a80      	subs	r0, r0, r2
 8004ac4:	fa0b f000 	lsl.w	r0, fp, r0
 8004ac8:	4318      	orrs	r0, r3
 8004aca:	9004      	str	r0, [sp, #16]
 8004acc:	4645      	mov	r5, r8
 8004ace:	e7bb      	b.n	8004a48 <_vfiprintf_r+0x88>
 8004ad0:	9a03      	ldr	r2, [sp, #12]
 8004ad2:	1d11      	adds	r1, r2, #4
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	9103      	str	r1, [sp, #12]
 8004ad8:	2a00      	cmp	r2, #0
 8004ada:	db01      	blt.n	8004ae0 <_vfiprintf_r+0x120>
 8004adc:	9207      	str	r2, [sp, #28]
 8004ade:	e004      	b.n	8004aea <_vfiprintf_r+0x12a>
 8004ae0:	4252      	negs	r2, r2
 8004ae2:	f043 0302 	orr.w	r3, r3, #2
 8004ae6:	9207      	str	r2, [sp, #28]
 8004ae8:	9304      	str	r3, [sp, #16]
 8004aea:	f898 3000 	ldrb.w	r3, [r8]
 8004aee:	2b2e      	cmp	r3, #46	; 0x2e
 8004af0:	d110      	bne.n	8004b14 <_vfiprintf_r+0x154>
 8004af2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004af6:	2b2a      	cmp	r3, #42	; 0x2a
 8004af8:	f108 0101 	add.w	r1, r8, #1
 8004afc:	d137      	bne.n	8004b6e <_vfiprintf_r+0x1ae>
 8004afe:	9b03      	ldr	r3, [sp, #12]
 8004b00:	1d1a      	adds	r2, r3, #4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	9203      	str	r2, [sp, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bfb8      	it	lt
 8004b0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b0e:	f108 0802 	add.w	r8, r8, #2
 8004b12:	9305      	str	r3, [sp, #20]
 8004b14:	4d31      	ldr	r5, [pc, #196]	; (8004bdc <_vfiprintf_r+0x21c>)
 8004b16:	f898 1000 	ldrb.w	r1, [r8]
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f7fb fb6f 	bl	8000200 <memchr>
 8004b22:	b140      	cbz	r0, 8004b36 <_vfiprintf_r+0x176>
 8004b24:	2340      	movs	r3, #64	; 0x40
 8004b26:	1b40      	subs	r0, r0, r5
 8004b28:	fa03 f000 	lsl.w	r0, r3, r0
 8004b2c:	9b04      	ldr	r3, [sp, #16]
 8004b2e:	4303      	orrs	r3, r0
 8004b30:	9304      	str	r3, [sp, #16]
 8004b32:	f108 0801 	add.w	r8, r8, #1
 8004b36:	f898 1000 	ldrb.w	r1, [r8]
 8004b3a:	4829      	ldr	r0, [pc, #164]	; (8004be0 <_vfiprintf_r+0x220>)
 8004b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b40:	2206      	movs	r2, #6
 8004b42:	f108 0701 	add.w	r7, r8, #1
 8004b46:	f7fb fb5b 	bl	8000200 <memchr>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d034      	beq.n	8004bb8 <_vfiprintf_r+0x1f8>
 8004b4e:	4b25      	ldr	r3, [pc, #148]	; (8004be4 <_vfiprintf_r+0x224>)
 8004b50:	bb03      	cbnz	r3, 8004b94 <_vfiprintf_r+0x1d4>
 8004b52:	9b03      	ldr	r3, [sp, #12]
 8004b54:	3307      	adds	r3, #7
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	9303      	str	r3, [sp, #12]
 8004b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b60:	444b      	add	r3, r9
 8004b62:	9309      	str	r3, [sp, #36]	; 0x24
 8004b64:	e74c      	b.n	8004a00 <_vfiprintf_r+0x40>
 8004b66:	fb00 3202 	mla	r2, r0, r2, r3
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	e786      	b.n	8004a7c <_vfiprintf_r+0xbc>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	9305      	str	r3, [sp, #20]
 8004b72:	4618      	mov	r0, r3
 8004b74:	250a      	movs	r5, #10
 8004b76:	4688      	mov	r8, r1
 8004b78:	3101      	adds	r1, #1
 8004b7a:	f898 2000 	ldrb.w	r2, [r8]
 8004b7e:	3a30      	subs	r2, #48	; 0x30
 8004b80:	2a09      	cmp	r2, #9
 8004b82:	d903      	bls.n	8004b8c <_vfiprintf_r+0x1cc>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0c5      	beq.n	8004b14 <_vfiprintf_r+0x154>
 8004b88:	9005      	str	r0, [sp, #20]
 8004b8a:	e7c3      	b.n	8004b14 <_vfiprintf_r+0x154>
 8004b8c:	fb05 2000 	mla	r0, r5, r0, r2
 8004b90:	2301      	movs	r3, #1
 8004b92:	e7f0      	b.n	8004b76 <_vfiprintf_r+0x1b6>
 8004b94:	ab03      	add	r3, sp, #12
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	4622      	mov	r2, r4
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <_vfiprintf_r+0x228>)
 8004b9c:	a904      	add	r1, sp, #16
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f3af 8000 	nop.w
 8004ba4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ba8:	4681      	mov	r9, r0
 8004baa:	d1d8      	bne.n	8004b5e <_vfiprintf_r+0x19e>
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	065b      	lsls	r3, r3, #25
 8004bb0:	f53f af7d 	bmi.w	8004aae <_vfiprintf_r+0xee>
 8004bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bb6:	e77c      	b.n	8004ab2 <_vfiprintf_r+0xf2>
 8004bb8:	ab03      	add	r3, sp, #12
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4622      	mov	r2, r4
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <_vfiprintf_r+0x228>)
 8004bc0:	a904      	add	r1, sp, #16
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f000 f888 	bl	8004cd8 <_printf_i>
 8004bc8:	e7ec      	b.n	8004ba4 <_vfiprintf_r+0x1e4>
 8004bca:	bf00      	nop
 8004bcc:	0800534c 	.word	0x0800534c
 8004bd0:	0800538c 	.word	0x0800538c
 8004bd4:	0800536c 	.word	0x0800536c
 8004bd8:	0800532c 	.word	0x0800532c
 8004bdc:	08005392 	.word	0x08005392
 8004be0:	08005396 	.word	0x08005396
 8004be4:	00000000 	.word	0x00000000
 8004be8:	0800499d 	.word	0x0800499d

08004bec <_printf_common>:
 8004bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	4691      	mov	r9, r2
 8004bf2:	461f      	mov	r7, r3
 8004bf4:	688a      	ldr	r2, [r1, #8]
 8004bf6:	690b      	ldr	r3, [r1, #16]
 8004bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	bfb8      	it	lt
 8004c00:	4613      	movlt	r3, r2
 8004c02:	f8c9 3000 	str.w	r3, [r9]
 8004c06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	b112      	cbz	r2, 8004c16 <_printf_common+0x2a>
 8004c10:	3301      	adds	r3, #1
 8004c12:	f8c9 3000 	str.w	r3, [r9]
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	0699      	lsls	r1, r3, #26
 8004c1a:	bf42      	ittt	mi
 8004c1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c20:	3302      	addmi	r3, #2
 8004c22:	f8c9 3000 	strmi.w	r3, [r9]
 8004c26:	6825      	ldr	r5, [r4, #0]
 8004c28:	f015 0506 	ands.w	r5, r5, #6
 8004c2c:	d107      	bne.n	8004c3e <_printf_common+0x52>
 8004c2e:	f104 0a19 	add.w	sl, r4, #25
 8004c32:	68e3      	ldr	r3, [r4, #12]
 8004c34:	f8d9 2000 	ldr.w	r2, [r9]
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	429d      	cmp	r5, r3
 8004c3c:	db29      	blt.n	8004c92 <_printf_common+0xa6>
 8004c3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	3300      	adds	r3, #0
 8004c46:	bf18      	it	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	0692      	lsls	r2, r2, #26
 8004c4c:	d42e      	bmi.n	8004cac <_printf_common+0xc0>
 8004c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c52:	4639      	mov	r1, r7
 8004c54:	4630      	mov	r0, r6
 8004c56:	47c0      	blx	r8
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d021      	beq.n	8004ca0 <_printf_common+0xb4>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	68e5      	ldr	r5, [r4, #12]
 8004c60:	f8d9 2000 	ldr.w	r2, [r9]
 8004c64:	f003 0306 	and.w	r3, r3, #6
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	bf08      	it	eq
 8004c6c:	1aad      	subeq	r5, r5, r2
 8004c6e:	68a3      	ldr	r3, [r4, #8]
 8004c70:	6922      	ldr	r2, [r4, #16]
 8004c72:	bf0c      	ite	eq
 8004c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c78:	2500      	movne	r5, #0
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	bfc4      	itt	gt
 8004c7e:	1a9b      	subgt	r3, r3, r2
 8004c80:	18ed      	addgt	r5, r5, r3
 8004c82:	f04f 0900 	mov.w	r9, #0
 8004c86:	341a      	adds	r4, #26
 8004c88:	454d      	cmp	r5, r9
 8004c8a:	d11b      	bne.n	8004cc4 <_printf_common+0xd8>
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c92:	2301      	movs	r3, #1
 8004c94:	4652      	mov	r2, sl
 8004c96:	4639      	mov	r1, r7
 8004c98:	4630      	mov	r0, r6
 8004c9a:	47c0      	blx	r8
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d103      	bne.n	8004ca8 <_printf_common+0xbc>
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca8:	3501      	adds	r5, #1
 8004caa:	e7c2      	b.n	8004c32 <_printf_common+0x46>
 8004cac:	18e1      	adds	r1, r4, r3
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	2030      	movs	r0, #48	; 0x30
 8004cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cb6:	4422      	add	r2, r4
 8004cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	e7c4      	b.n	8004c4e <_printf_common+0x62>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	4639      	mov	r1, r7
 8004cca:	4630      	mov	r0, r6
 8004ccc:	47c0      	blx	r8
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d0e6      	beq.n	8004ca0 <_printf_common+0xb4>
 8004cd2:	f109 0901 	add.w	r9, r9, #1
 8004cd6:	e7d7      	b.n	8004c88 <_printf_common+0x9c>

08004cd8 <_printf_i>:
 8004cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cdc:	4617      	mov	r7, r2
 8004cde:	7e0a      	ldrb	r2, [r1, #24]
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	2a6e      	cmp	r2, #110	; 0x6e
 8004ce4:	4698      	mov	r8, r3
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	460c      	mov	r4, r1
 8004cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004cf0:	f000 80bc 	beq.w	8004e6c <_printf_i+0x194>
 8004cf4:	d81a      	bhi.n	8004d2c <_printf_i+0x54>
 8004cf6:	2a63      	cmp	r2, #99	; 0x63
 8004cf8:	d02e      	beq.n	8004d58 <_printf_i+0x80>
 8004cfa:	d80a      	bhi.n	8004d12 <_printf_i+0x3a>
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	f000 80c8 	beq.w	8004e92 <_printf_i+0x1ba>
 8004d02:	2a58      	cmp	r2, #88	; 0x58
 8004d04:	f000 808a 	beq.w	8004e1c <_printf_i+0x144>
 8004d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d0c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004d10:	e02a      	b.n	8004d68 <_printf_i+0x90>
 8004d12:	2a64      	cmp	r2, #100	; 0x64
 8004d14:	d001      	beq.n	8004d1a <_printf_i+0x42>
 8004d16:	2a69      	cmp	r2, #105	; 0x69
 8004d18:	d1f6      	bne.n	8004d08 <_printf_i+0x30>
 8004d1a:	6821      	ldr	r1, [r4, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004d22:	d023      	beq.n	8004d6c <_printf_i+0x94>
 8004d24:	1d11      	adds	r1, r2, #4
 8004d26:	6019      	str	r1, [r3, #0]
 8004d28:	6813      	ldr	r3, [r2, #0]
 8004d2a:	e027      	b.n	8004d7c <_printf_i+0xa4>
 8004d2c:	2a73      	cmp	r2, #115	; 0x73
 8004d2e:	f000 80b4 	beq.w	8004e9a <_printf_i+0x1c2>
 8004d32:	d808      	bhi.n	8004d46 <_printf_i+0x6e>
 8004d34:	2a6f      	cmp	r2, #111	; 0x6f
 8004d36:	d02a      	beq.n	8004d8e <_printf_i+0xb6>
 8004d38:	2a70      	cmp	r2, #112	; 0x70
 8004d3a:	d1e5      	bne.n	8004d08 <_printf_i+0x30>
 8004d3c:	680a      	ldr	r2, [r1, #0]
 8004d3e:	f042 0220 	orr.w	r2, r2, #32
 8004d42:	600a      	str	r2, [r1, #0]
 8004d44:	e003      	b.n	8004d4e <_printf_i+0x76>
 8004d46:	2a75      	cmp	r2, #117	; 0x75
 8004d48:	d021      	beq.n	8004d8e <_printf_i+0xb6>
 8004d4a:	2a78      	cmp	r2, #120	; 0x78
 8004d4c:	d1dc      	bne.n	8004d08 <_printf_i+0x30>
 8004d4e:	2278      	movs	r2, #120	; 0x78
 8004d50:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004d54:	496e      	ldr	r1, [pc, #440]	; (8004f10 <_printf_i+0x238>)
 8004d56:	e064      	b.n	8004e22 <_printf_i+0x14a>
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004d5e:	1d11      	adds	r1, r2, #4
 8004d60:	6019      	str	r1, [r3, #0]
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0a3      	b.n	8004eb4 <_printf_i+0x1dc>
 8004d6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004d70:	f102 0104 	add.w	r1, r2, #4
 8004d74:	6019      	str	r1, [r3, #0]
 8004d76:	d0d7      	beq.n	8004d28 <_printf_i+0x50>
 8004d78:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	da03      	bge.n	8004d88 <_printf_i+0xb0>
 8004d80:	222d      	movs	r2, #45	; 0x2d
 8004d82:	425b      	negs	r3, r3
 8004d84:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d88:	4962      	ldr	r1, [pc, #392]	; (8004f14 <_printf_i+0x23c>)
 8004d8a:	220a      	movs	r2, #10
 8004d8c:	e017      	b.n	8004dbe <_printf_i+0xe6>
 8004d8e:	6820      	ldr	r0, [r4, #0]
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004d96:	d003      	beq.n	8004da0 <_printf_i+0xc8>
 8004d98:	1d08      	adds	r0, r1, #4
 8004d9a:	6018      	str	r0, [r3, #0]
 8004d9c:	680b      	ldr	r3, [r1, #0]
 8004d9e:	e006      	b.n	8004dae <_printf_i+0xd6>
 8004da0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004da4:	f101 0004 	add.w	r0, r1, #4
 8004da8:	6018      	str	r0, [r3, #0]
 8004daa:	d0f7      	beq.n	8004d9c <_printf_i+0xc4>
 8004dac:	880b      	ldrh	r3, [r1, #0]
 8004dae:	4959      	ldr	r1, [pc, #356]	; (8004f14 <_printf_i+0x23c>)
 8004db0:	2a6f      	cmp	r2, #111	; 0x6f
 8004db2:	bf14      	ite	ne
 8004db4:	220a      	movne	r2, #10
 8004db6:	2208      	moveq	r2, #8
 8004db8:	2000      	movs	r0, #0
 8004dba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004dbe:	6865      	ldr	r5, [r4, #4]
 8004dc0:	60a5      	str	r5, [r4, #8]
 8004dc2:	2d00      	cmp	r5, #0
 8004dc4:	f2c0 809c 	blt.w	8004f00 <_printf_i+0x228>
 8004dc8:	6820      	ldr	r0, [r4, #0]
 8004dca:	f020 0004 	bic.w	r0, r0, #4
 8004dce:	6020      	str	r0, [r4, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d13f      	bne.n	8004e54 <_printf_i+0x17c>
 8004dd4:	2d00      	cmp	r5, #0
 8004dd6:	f040 8095 	bne.w	8004f04 <_printf_i+0x22c>
 8004dda:	4675      	mov	r5, lr
 8004ddc:	2a08      	cmp	r2, #8
 8004dde:	d10b      	bne.n	8004df8 <_printf_i+0x120>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	07da      	lsls	r2, r3, #31
 8004de4:	d508      	bpl.n	8004df8 <_printf_i+0x120>
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	6862      	ldr	r2, [r4, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	bfde      	ittt	le
 8004dee:	2330      	movle	r3, #48	; 0x30
 8004df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004df8:	ebae 0305 	sub.w	r3, lr, r5
 8004dfc:	6123      	str	r3, [r4, #16]
 8004dfe:	f8cd 8000 	str.w	r8, [sp]
 8004e02:	463b      	mov	r3, r7
 8004e04:	aa03      	add	r2, sp, #12
 8004e06:	4621      	mov	r1, r4
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f7ff feef 	bl	8004bec <_printf_common>
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d155      	bne.n	8004ebe <_printf_i+0x1e6>
 8004e12:	f04f 30ff 	mov.w	r0, #4294967295
 8004e16:	b005      	add	sp, #20
 8004e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004e20:	493c      	ldr	r1, [pc, #240]	; (8004f14 <_printf_i+0x23c>)
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004e2a:	f100 0504 	add.w	r5, r0, #4
 8004e2e:	601d      	str	r5, [r3, #0]
 8004e30:	d001      	beq.n	8004e36 <_printf_i+0x15e>
 8004e32:	6803      	ldr	r3, [r0, #0]
 8004e34:	e002      	b.n	8004e3c <_printf_i+0x164>
 8004e36:	0655      	lsls	r5, r2, #25
 8004e38:	d5fb      	bpl.n	8004e32 <_printf_i+0x15a>
 8004e3a:	8803      	ldrh	r3, [r0, #0]
 8004e3c:	07d0      	lsls	r0, r2, #31
 8004e3e:	bf44      	itt	mi
 8004e40:	f042 0220 	orrmi.w	r2, r2, #32
 8004e44:	6022      	strmi	r2, [r4, #0]
 8004e46:	b91b      	cbnz	r3, 8004e50 <_printf_i+0x178>
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	f022 0220 	bic.w	r2, r2, #32
 8004e4e:	6022      	str	r2, [r4, #0]
 8004e50:	2210      	movs	r2, #16
 8004e52:	e7b1      	b.n	8004db8 <_printf_i+0xe0>
 8004e54:	4675      	mov	r5, lr
 8004e56:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e5a:	fb02 3310 	mls	r3, r2, r0, r3
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e64:	4603      	mov	r3, r0
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d1f5      	bne.n	8004e56 <_printf_i+0x17e>
 8004e6a:	e7b7      	b.n	8004ddc <_printf_i+0x104>
 8004e6c:	6808      	ldr	r0, [r1, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	6949      	ldr	r1, [r1, #20]
 8004e72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004e76:	d004      	beq.n	8004e82 <_printf_i+0x1aa>
 8004e78:	1d10      	adds	r0, r2, #4
 8004e7a:	6018      	str	r0, [r3, #0]
 8004e7c:	6813      	ldr	r3, [r2, #0]
 8004e7e:	6019      	str	r1, [r3, #0]
 8004e80:	e007      	b.n	8004e92 <_printf_i+0x1ba>
 8004e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e86:	f102 0004 	add.w	r0, r2, #4
 8004e8a:	6018      	str	r0, [r3, #0]
 8004e8c:	6813      	ldr	r3, [r2, #0]
 8004e8e:	d0f6      	beq.n	8004e7e <_printf_i+0x1a6>
 8004e90:	8019      	strh	r1, [r3, #0]
 8004e92:	2300      	movs	r3, #0
 8004e94:	6123      	str	r3, [r4, #16]
 8004e96:	4675      	mov	r5, lr
 8004e98:	e7b1      	b.n	8004dfe <_printf_i+0x126>
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	1d11      	adds	r1, r2, #4
 8004e9e:	6019      	str	r1, [r3, #0]
 8004ea0:	6815      	ldr	r5, [r2, #0]
 8004ea2:	6862      	ldr	r2, [r4, #4]
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f7fb f9aa 	bl	8000200 <memchr>
 8004eac:	b108      	cbz	r0, 8004eb2 <_printf_i+0x1da>
 8004eae:	1b40      	subs	r0, r0, r5
 8004eb0:	6060      	str	r0, [r4, #4]
 8004eb2:	6863      	ldr	r3, [r4, #4]
 8004eb4:	6123      	str	r3, [r4, #16]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ebc:	e79f      	b.n	8004dfe <_printf_i+0x126>
 8004ebe:	6923      	ldr	r3, [r4, #16]
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	4639      	mov	r1, r7
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	47c0      	blx	r8
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d0a2      	beq.n	8004e12 <_printf_i+0x13a>
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	079b      	lsls	r3, r3, #30
 8004ed0:	d507      	bpl.n	8004ee2 <_printf_i+0x20a>
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	f104 0919 	add.w	r9, r4, #25
 8004ed8:	68e3      	ldr	r3, [r4, #12]
 8004eda:	9a03      	ldr	r2, [sp, #12]
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	429d      	cmp	r5, r3
 8004ee0:	db05      	blt.n	8004eee <_printf_i+0x216>
 8004ee2:	68e0      	ldr	r0, [r4, #12]
 8004ee4:	9b03      	ldr	r3, [sp, #12]
 8004ee6:	4298      	cmp	r0, r3
 8004ee8:	bfb8      	it	lt
 8004eea:	4618      	movlt	r0, r3
 8004eec:	e793      	b.n	8004e16 <_printf_i+0x13e>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	464a      	mov	r2, r9
 8004ef2:	4639      	mov	r1, r7
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	47c0      	blx	r8
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d08a      	beq.n	8004e12 <_printf_i+0x13a>
 8004efc:	3501      	adds	r5, #1
 8004efe:	e7eb      	b.n	8004ed8 <_printf_i+0x200>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1a7      	bne.n	8004e54 <_printf_i+0x17c>
 8004f04:	780b      	ldrb	r3, [r1, #0]
 8004f06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f0e:	e765      	b.n	8004ddc <_printf_i+0x104>
 8004f10:	080053ae 	.word	0x080053ae
 8004f14:	0800539d 	.word	0x0800539d

08004f18 <_sbrk_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4c06      	ldr	r4, [pc, #24]	; (8004f34 <_sbrk_r+0x1c>)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4605      	mov	r5, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	6023      	str	r3, [r4, #0]
 8004f24:	f7fe ff8a 	bl	8003e3c <_sbrk>
 8004f28:	1c43      	adds	r3, r0, #1
 8004f2a:	d102      	bne.n	8004f32 <_sbrk_r+0x1a>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	b103      	cbz	r3, 8004f32 <_sbrk_r+0x1a>
 8004f30:	602b      	str	r3, [r5, #0]
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	20000898 	.word	0x20000898

08004f38 <__sread>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f40:	f000 f896 	bl	8005070 <_read_r>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	bfab      	itete	ge
 8004f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f4c:	181b      	addge	r3, r3, r0
 8004f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f52:	bfac      	ite	ge
 8004f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f56:	81a3      	strhlt	r3, [r4, #12]
 8004f58:	bd10      	pop	{r4, pc}

08004f5a <__swrite>:
 8004f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5e:	461f      	mov	r7, r3
 8004f60:	898b      	ldrh	r3, [r1, #12]
 8004f62:	05db      	lsls	r3, r3, #23
 8004f64:	4605      	mov	r5, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	4616      	mov	r6, r2
 8004f6a:	d505      	bpl.n	8004f78 <__swrite+0x1e>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f74:	f000 f868 	bl	8005048 <_lseek_r>
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f82:	81a3      	strh	r3, [r4, #12]
 8004f84:	4632      	mov	r2, r6
 8004f86:	463b      	mov	r3, r7
 8004f88:	4628      	mov	r0, r5
 8004f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8e:	f000 b817 	b.w	8004fc0 <_write_r>

08004f92 <__sseek>:
 8004f92:	b510      	push	{r4, lr}
 8004f94:	460c      	mov	r4, r1
 8004f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9a:	f000 f855 	bl	8005048 <_lseek_r>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	bf15      	itete	ne
 8004fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fae:	81a3      	strheq	r3, [r4, #12]
 8004fb0:	bf18      	it	ne
 8004fb2:	81a3      	strhne	r3, [r4, #12]
 8004fb4:	bd10      	pop	{r4, pc}

08004fb6 <__sclose>:
 8004fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fba:	f000 b813 	b.w	8004fe4 <_close_r>
	...

08004fc0 <_write_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4c07      	ldr	r4, [pc, #28]	; (8004fe0 <_write_r+0x20>)
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	4611      	mov	r1, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	6022      	str	r2, [r4, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f7fe ff1e 	bl	8003e10 <_write>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_write_r+0x1e>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_write_r+0x1e>
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	20000898 	.word	0x20000898

08004fe4 <_close_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4c06      	ldr	r4, [pc, #24]	; (8005000 <_close_r+0x1c>)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4605      	mov	r5, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	f7fe ff50 	bl	8003e94 <_close>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_close_r+0x1a>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_close_r+0x1a>
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	20000898 	.word	0x20000898

08005004 <_fstat_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4c07      	ldr	r4, [pc, #28]	; (8005024 <_fstat_r+0x20>)
 8005008:	2300      	movs	r3, #0
 800500a:	4605      	mov	r5, r0
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	f7fe ff4b 	bl	8003eac <_fstat>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d102      	bne.n	8005020 <_fstat_r+0x1c>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	b103      	cbz	r3, 8005020 <_fstat_r+0x1c>
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	bd38      	pop	{r3, r4, r5, pc}
 8005022:	bf00      	nop
 8005024:	20000898 	.word	0x20000898

08005028 <_isatty_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4c06      	ldr	r4, [pc, #24]	; (8005044 <_isatty_r+0x1c>)
 800502c:	2300      	movs	r3, #0
 800502e:	4605      	mov	r5, r0
 8005030:	4608      	mov	r0, r1
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	f7fe ff4a 	bl	8003ecc <_isatty>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_isatty_r+0x1a>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	b103      	cbz	r3, 8005042 <_isatty_r+0x1a>
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	20000898 	.word	0x20000898

08005048 <_lseek_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4c07      	ldr	r4, [pc, #28]	; (8005068 <_lseek_r+0x20>)
 800504c:	4605      	mov	r5, r0
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	2200      	movs	r2, #0
 8005054:	6022      	str	r2, [r4, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	f7fe ff43 	bl	8003ee2 <_lseek>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_lseek_r+0x1e>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	b103      	cbz	r3, 8005066 <_lseek_r+0x1e>
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20000898 	.word	0x20000898

0800506c <__malloc_lock>:
 800506c:	4770      	bx	lr

0800506e <__malloc_unlock>:
 800506e:	4770      	bx	lr

08005070 <_read_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4c07      	ldr	r4, [pc, #28]	; (8005090 <_read_r+0x20>)
 8005074:	4605      	mov	r5, r0
 8005076:	4608      	mov	r0, r1
 8005078:	4611      	mov	r1, r2
 800507a:	2200      	movs	r2, #0
 800507c:	6022      	str	r2, [r4, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	f7fe fea8 	bl	8003dd4 <_read>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_read_r+0x1e>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	b103      	cbz	r3, 800508e <_read_r+0x1e>
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	20000898 	.word	0x20000898

08005094 <_init>:
 8005094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005096:	bf00      	nop
 8005098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509a:	bc08      	pop	{r3}
 800509c:	469e      	mov	lr, r3
 800509e:	4770      	bx	lr

080050a0 <_fini>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	bf00      	nop
 80050a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a6:	bc08      	pop	{r3}
 80050a8:	469e      	mov	lr, r3
 80050aa:	4770      	bx	lr
