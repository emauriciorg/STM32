
lcd_stm32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003568  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b4  080039b4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080039b4  080039b4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039b4  080039b4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080039bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000060  08003a18  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003a18  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081ee  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab4  00000000  00000000  00028272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  00029d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000e4f3  00000000  00000000  0002a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000a324  00000000  00000000  00038b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0005c58e  00000000  00000000  00042e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0009f415  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000858  00000000  00000000  0009f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002010  00000000  00000000  0009fcc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003610 	.word	0x08003610

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003610 	.word	0x08003610

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f002 f881 	bl	8002500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f8b9 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f95d 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000406:	f000 f93d 	bl	8000684 <MX_DMA_Init>
  MX_SPI2_Init();
 800040a:	f000 f8fd 	bl	8000608 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
   #if 1
    BSP_LCD_Init();
 800040e:	f000 ff7d 	bl	800130c <BSP_LCD_Init>
    BSP_LCD_DisplayStringAt(50,50, (uint8_t*)"Testing LCD", LEFT_MODE);
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
    //BSP_LCD_DrawDigits(100,10,5);
 #endif
    uint8_t hour[6];
    uint32_t timeout[5] = {0};
 8000412:	003b      	movs	r3, r7
 8000414:	0018      	movs	r0, r3
 8000416:	2314      	movs	r3, #20
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	f003 f8f0 	bl	8003600 <memset>
    uint8_t hours=0,minutes=0,seconds=0,millis =0;
 8000420:	231f      	movs	r3, #31
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
 8000428:	231e      	movs	r3, #30
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
 8000430:	231d      	movs	r3, #29
 8000432:	18fb      	adds	r3, r7, r3
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
 8000438:	231c      	movs	r3, #28
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	2200      	movs	r2, #0
 800043e:	701a      	strb	r2, [r3, #0]
    BSP_LCD_DisplayDigits(30,40,"12:34");
 8000440:	4b4b      	ldr	r3, [pc, #300]	; (8000570 <main+0x17c>)
 8000442:	001a      	movs	r2, r3
 8000444:	2128      	movs	r1, #40	; 0x28
 8000446:	201e      	movs	r0, #30
 8000448:	f000 fffe 	bl	8001448 <BSP_LCD_DisplayDigits>
    hour[2]=':';
 800044c:	2314      	movs	r3, #20
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	223a      	movs	r2, #58	; 0x3a
 8000452:	709a      	strb	r2, [r3, #2]
  while (1)
  {
      //GPIOC->ODR ^=LD4_Pin;
      //HAL_Delay(400);

      if(HAL_GetTick() > timeout[0]){
 8000454:	f002 f8ae 	bl	80025b4 <HAL_GetTick>
 8000458:	0002      	movs	r2, r0
 800045a:	003b      	movs	r3, r7
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	429a      	cmp	r2, r3
 8000460:	d91f      	bls.n	80004a2 <main+0xae>
          timeout[0]= HAL_GetTick()+100;
 8000462:	f002 f8a7 	bl	80025b4 <HAL_GetTick>
 8000466:	0003      	movs	r3, r0
 8000468:	3364      	adds	r3, #100	; 0x64
 800046a:	001a      	movs	r2, r3
 800046c:	003b      	movs	r3, r7
 800046e:	601a      	str	r2, [r3, #0]
          hour[4] = (millis%10)+'0';
 8000470:	241c      	movs	r4, #28
 8000472:	193b      	adds	r3, r7, r4
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	210a      	movs	r1, #10
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff fecb 	bl	8000214 <__aeabi_uidivmod>
 800047e:	000b      	movs	r3, r1
 8000480:	b2db      	uxtb	r3, r3
 8000482:	3330      	adds	r3, #48	; 0x30
 8000484:	b2da      	uxtb	r2, r3
 8000486:	2114      	movs	r1, #20
 8000488:	187b      	adds	r3, r7, r1
 800048a:	711a      	strb	r2, [r3, #4]
           BSP_LCD_DisplayDigits(30,40,hour);
 800048c:	187b      	adds	r3, r7, r1
 800048e:	001a      	movs	r2, r3
 8000490:	2128      	movs	r1, #40	; 0x28
 8000492:	201e      	movs	r0, #30
 8000494:	f000 ffd8 	bl	8001448 <BSP_LCD_DisplayDigits>
        millis++;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	781a      	ldrb	r2, [r3, #0]
 800049c:	193b      	adds	r3, r7, r4
 800049e:	3201      	adds	r2, #1
 80004a0:	701a      	strb	r2, [r3, #0]
      } 

       if(HAL_GetTick() > timeout[1]){
 80004a2:	f002 f887 	bl	80025b4 <HAL_GetTick>
 80004a6:	0002      	movs	r2, r0
 80004a8:	003b      	movs	r3, r7
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d91a      	bls.n	80004e6 <main+0xf2>
          timeout[1]= HAL_GetTick()+300;
 80004b0:	f002 f880 	bl	80025b4 <HAL_GetTick>
 80004b4:	0003      	movs	r3, r0
 80004b6:	332d      	adds	r3, #45	; 0x2d
 80004b8:	33ff      	adds	r3, #255	; 0xff
 80004ba:	001a      	movs	r2, r3
 80004bc:	003b      	movs	r3, r7
 80004be:	605a      	str	r2, [r3, #4]
          hour[3] = (seconds%10)+'0'; 
 80004c0:	241d      	movs	r4, #29
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	210a      	movs	r1, #10
 80004c8:	0018      	movs	r0, r3
 80004ca:	f7ff fea3 	bl	8000214 <__aeabi_uidivmod>
 80004ce:	000b      	movs	r3, r1
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	3330      	adds	r3, #48	; 0x30
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	2314      	movs	r3, #20
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	70da      	strb	r2, [r3, #3]
          seconds++;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
      }

       if(HAL_GetTick() > timeout[2]){
 80004e6:	f002 f865 	bl	80025b4 <HAL_GetTick>
 80004ea:	0002      	movs	r2, r0
 80004ec:	003b      	movs	r3, r7
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d91a      	bls.n	800052a <main+0x136>
          timeout[2]= HAL_GetTick()+500;
 80004f4:	f002 f85e 	bl	80025b4 <HAL_GetTick>
 80004f8:	0003      	movs	r3, r0
 80004fa:	33f5      	adds	r3, #245	; 0xf5
 80004fc:	33ff      	adds	r3, #255	; 0xff
 80004fe:	001a      	movs	r2, r3
 8000500:	003b      	movs	r3, r7
 8000502:	609a      	str	r2, [r3, #8]
          hour[1] = (minutes%10)+'0'; 
 8000504:	241e      	movs	r4, #30
 8000506:	193b      	adds	r3, r7, r4
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	210a      	movs	r1, #10
 800050c:	0018      	movs	r0, r3
 800050e:	f7ff fe81 	bl	8000214 <__aeabi_uidivmod>
 8000512:	000b      	movs	r3, r1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	3330      	adds	r3, #48	; 0x30
 8000518:	b2da      	uxtb	r2, r3
 800051a:	2314      	movs	r3, #20
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	705a      	strb	r2, [r3, #1]
          minutes++;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	781a      	ldrb	r2, [r3, #0]
 8000524:	193b      	adds	r3, r7, r4
 8000526:	3201      	adds	r2, #1
 8000528:	701a      	strb	r2, [r3, #0]
       }

        if(HAL_GetTick() > timeout[3]){
 800052a:	f002 f843 	bl	80025b4 <HAL_GetTick>
 800052e:	0002      	movs	r2, r0
 8000530:	003b      	movs	r3, r7
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	429a      	cmp	r2, r3
 8000536:	d98d      	bls.n	8000454 <main+0x60>
          hour[0] = (hours%10)+'0';
 8000538:	241f      	movs	r4, #31
 800053a:	193b      	adds	r3, r7, r4
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	210a      	movs	r1, #10
 8000540:	0018      	movs	r0, r3
 8000542:	f7ff fe67 	bl	8000214 <__aeabi_uidivmod>
 8000546:	000b      	movs	r3, r1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	3330      	adds	r3, #48	; 0x30
 800054c:	b2da      	uxtb	r2, r3
 800054e:	2314      	movs	r3, #20
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	701a      	strb	r2, [r3, #0]
          timeout[3]= HAL_GetTick()+1000;
 8000554:	f002 f82e 	bl	80025b4 <HAL_GetTick>
 8000558:	0003      	movs	r3, r0
 800055a:	22fa      	movs	r2, #250	; 0xfa
 800055c:	0092      	lsls	r2, r2, #2
 800055e:	189a      	adds	r2, r3, r2
 8000560:	003b      	movs	r3, r7
 8000562:	60da      	str	r2, [r3, #12]
          hours++;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	781a      	ldrb	r2, [r3, #0]
 8000568:	193b      	adds	r3, r7, r4
 800056a:	3201      	adds	r2, #1
 800056c:	701a      	strb	r2, [r3, #0]
      if(HAL_GetTick() > timeout[0]){
 800056e:	e771      	b.n	8000454 <main+0x60>
 8000570:	08003628 	.word	0x08003628

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b091      	sub	sp, #68	; 0x44
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	2410      	movs	r4, #16
 800057c:	193b      	adds	r3, r7, r4
 800057e:	0018      	movs	r0, r3
 8000580:	2330      	movs	r3, #48	; 0x30
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f003 f83b 	bl	8003600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058a:	003b      	movs	r3, r7
 800058c:	0018      	movs	r0, r3
 800058e:	2310      	movs	r3, #16
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f003 f834 	bl	8003600 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	0021      	movs	r1, r4
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2202      	movs	r2, #2
 800059e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2201      	movs	r2, #1
 80005a4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2210      	movs	r2, #16
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2202      	movs	r2, #2
 80005b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	22a0      	movs	r2, #160	; 0xa0
 80005bc:	0392      	lsls	r2, r2, #14
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 faf1 	bl	8002bb0 <HAL_RCC_OscConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005d2:	f000 f90f 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	003b      	movs	r3, r7
 80005d8:	2207      	movs	r2, #7
 80005da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	003b      	movs	r3, r7
 80005de:	2202      	movs	r2, #2
 80005e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	003b      	movs	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	003b      	movs	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ee:	003b      	movs	r3, r7
 80005f0:	2101      	movs	r1, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 fdf6 	bl	80031e4 <HAL_RCC_ClockConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005fc:	f000 f8fa 	bl	80007f4 <Error_Handler>
  }
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b011      	add	sp, #68	; 0x44
 8000606:	bd90      	pop	{r4, r7, pc}

08000608 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_SPI2_Init+0x74>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <MX_SPI2_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_SPI2_Init+0x74>)
 8000614:	2282      	movs	r2, #130	; 0x82
 8000616:	0052      	lsls	r2, r2, #1
 8000618:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_SPI2_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_SPI2_Init+0x74>)
 8000622:	22c0      	movs	r2, #192	; 0xc0
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_SPI2_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <MX_SPI2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_SPI2_Init+0x74>)
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	0092      	lsls	r2, r2, #2
 800063a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_SPI2_Init+0x74>)
 800063e:	2228      	movs	r2, #40	; 0x28
 8000640:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_SPI2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_SPI2_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_SPI2_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_SPI2_Init+0x74>)
 8000656:	2207      	movs	r2, #7
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_SPI2_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_SPI2_Init+0x74>)
 8000662:	2208      	movs	r2, #8
 8000664:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <MX_SPI2_Init+0x74>)
 8000668:	0018      	movs	r0, r3
 800066a:	f002 feed 	bl	8003448 <HAL_SPI_Init>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d001      	beq.n	8000676 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f8bf 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000007c 	.word	0x2000007c
 8000680:	40003800 	.word	0x40003800

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_DMA_Init+0x38>)
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_DMA_Init+0x38>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	615a      	str	r2, [r3, #20]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_DMA_Init+0x38>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	200b      	movs	r0, #11
 80006a8:	f002 f85e 	bl	8002768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80006ac:	200b      	movs	r0, #11
 80006ae:	f002 f870 	bl	8002792 <HAL_NVIC_EnableIRQ>

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	40021000 	.word	0x40021000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	240c      	movs	r4, #12
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	0018      	movs	r0, r3
 80006cc:	2314      	movs	r3, #20
 80006ce:	001a      	movs	r2, r3
 80006d0:	2100      	movs	r1, #0
 80006d2:	f002 ff95 	bl	8003600 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <MX_GPIO_Init+0x128>)
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	4b43      	ldr	r3, [pc, #268]	; (80007e8 <MX_GPIO_Init+0x128>)
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	0289      	lsls	r1, r1, #10
 80006e0:	430a      	orrs	r2, r1
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	4b40      	ldr	r3, [pc, #256]	; (80007e8 <MX_GPIO_Init+0x128>)
 80006e6:	695a      	ldr	r2, [r3, #20]
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	029b      	lsls	r3, r3, #10
 80006ec:	4013      	ands	r3, r2
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <MX_GPIO_Init+0x128>)
 80006f4:	695a      	ldr	r2, [r3, #20]
 80006f6:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <MX_GPIO_Init+0x128>)
 80006f8:	2180      	movs	r1, #128	; 0x80
 80006fa:	02c9      	lsls	r1, r1, #11
 80006fc:	430a      	orrs	r2, r1
 80006fe:	615a      	str	r2, [r3, #20]
 8000700:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <MX_GPIO_Init+0x128>)
 8000702:	695a      	ldr	r2, [r3, #20]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	02db      	lsls	r3, r3, #11
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <MX_GPIO_Init+0x128>)
 8000710:	695a      	ldr	r2, [r3, #20]
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <MX_GPIO_Init+0x128>)
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0309      	lsls	r1, r1, #12
 8000718:	430a      	orrs	r2, r1
 800071a:	615a      	str	r2, [r3, #20]
 800071c:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <MX_GPIO_Init+0x128>)
 800071e:	695a      	ldr	r2, [r3, #20]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	031b      	lsls	r3, r3, #12
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800072a:	23c0      	movs	r3, #192	; 0xc0
 800072c:	015b      	lsls	r3, r3, #5
 800072e:	482f      	ldr	r0, [pc, #188]	; (80007ec <MX_GPIO_Init+0x12c>)
 8000730:	2200      	movs	r2, #0
 8000732:	0019      	movs	r1, r3
 8000734:	f002 fa1e 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000738:	23c0      	movs	r3, #192	; 0xc0
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	482c      	ldr	r0, [pc, #176]	; (80007f0 <MX_GPIO_Init+0x130>)
 800073e:	2200      	movs	r2, #0
 8000740:	0019      	movs	r1, r3
 8000742:	f002 fa17 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2290      	movs	r2, #144	; 0x90
 8000750:	0352      	lsls	r2, r2, #13
 8000752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075a:	193a      	adds	r2, r7, r4
 800075c:	2390      	movs	r3, #144	; 0x90
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	0011      	movs	r1, r2
 8000762:	0018      	movs	r0, r3
 8000764:	f002 f896 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000768:	0021      	movs	r1, r4
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	00d2      	lsls	r2, r2, #3
 8000770:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2288      	movs	r2, #136	; 0x88
 8000776:	0352      	lsls	r2, r2, #13
 8000778:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000780:	000c      	movs	r4, r1
 8000782:	187b      	adds	r3, r7, r1
 8000784:	4a19      	ldr	r2, [pc, #100]	; (80007ec <MX_GPIO_Init+0x12c>)
 8000786:	0019      	movs	r1, r3
 8000788:	0010      	movs	r0, r2
 800078a:	f002 f883 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 800078e:	0021      	movs	r1, r4
 8000790:	187b      	adds	r3, r7, r1
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	0152      	lsls	r2, r2, #5
 8000796:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	000c      	movs	r4, r1
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2201      	movs	r2, #1
 800079e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <MX_GPIO_Init+0x12c>)
 80007b0:	0019      	movs	r1, r3
 80007b2:	0010      	movs	r0, r2
 80007b4:	f002 f86e 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80007b8:	0021      	movs	r1, r4
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	22c0      	movs	r2, #192	; 0xc0
 80007be:	0092      	lsls	r2, r2, #2
 80007c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2201      	movs	r2, #1
 80007c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <MX_GPIO_Init+0x130>)
 80007d8:	0019      	movs	r1, r3
 80007da:	0010      	movs	r0, r2
 80007dc:	f002 f85a 	bl	8002894 <HAL_GPIO_Init>

}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b009      	add	sp, #36	; 0x24
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000400 	.word	0x48000400
 80007f0:	48000800 	.word	0x48000800

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x44>)
 8000808:	699a      	ldr	r2, [r3, #24]
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_MspInit+0x44>)
 800080c:	2101      	movs	r1, #1
 800080e:	430a      	orrs	r2, r1
 8000810:	619a      	str	r2, [r3, #24]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x44>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	2201      	movs	r2, #1
 8000818:	4013      	ands	r3, r2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x44>)
 8000820:	69da      	ldr	r2, [r3, #28]
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_MspInit+0x44>)
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	0549      	lsls	r1, r1, #21
 8000828:	430a      	orrs	r2, r1
 800082a:	61da      	str	r2, [r3, #28]
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_MspInit+0x44>)
 800082e:	69da      	ldr	r2, [r3, #28]
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	055b      	lsls	r3, r3, #21
 8000834:	4013      	ands	r3, r2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b08b      	sub	sp, #44	; 0x2c
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	2414      	movs	r4, #20
 8000852:	193b      	adds	r3, r7, r4
 8000854:	0018      	movs	r0, r3
 8000856:	2314      	movs	r3, #20
 8000858:	001a      	movs	r2, r3
 800085a:	2100      	movs	r1, #0
 800085c:	f002 fed0 	bl	8003600 <memset>
  if(hspi->Instance==SPI2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a43      	ldr	r2, [pc, #268]	; (8000974 <HAL_SPI_MspInit+0x12c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d000      	beq.n	800086c <HAL_SPI_MspInit+0x24>
 800086a:	e07e      	b.n	800096a <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <HAL_SPI_MspInit+0x130>)
 800086e:	69da      	ldr	r2, [r3, #28]
 8000870:	4b41      	ldr	r3, [pc, #260]	; (8000978 <HAL_SPI_MspInit+0x130>)
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	01c9      	lsls	r1, r1, #7
 8000876:	430a      	orrs	r2, r1
 8000878:	61da      	str	r2, [r3, #28]
 800087a:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <HAL_SPI_MspInit+0x130>)
 800087c:	69da      	ldr	r2, [r3, #28]
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	01db      	lsls	r3, r3, #7
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <HAL_SPI_MspInit+0x130>)
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <HAL_SPI_MspInit+0x130>)
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	02c9      	lsls	r1, r1, #11
 8000892:	430a      	orrs	r2, r1
 8000894:	615a      	str	r2, [r3, #20]
 8000896:	4b38      	ldr	r3, [pc, #224]	; (8000978 <HAL_SPI_MspInit+0x130>)
 8000898:	695a      	ldr	r2, [r3, #20]
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	02db      	lsls	r3, r3, #11
 800089e:	4013      	ands	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	22e0      	movs	r2, #224	; 0xe0
 80008a8:	0212      	lsls	r2, r2, #8
 80008aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	0021      	movs	r1, r4
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2202      	movs	r2, #2
 80008b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2203      	movs	r2, #3
 80008be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	4a2c      	ldr	r2, [pc, #176]	; (800097c <HAL_SPI_MspInit+0x134>)
 80008ca:	0019      	movs	r1, r3
 80008cc:	0010      	movs	r0, r2
 80008ce:	f001 ffe1 	bl	8002894 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80008d2:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <HAL_SPI_MspInit+0x138>)
 80008d4:	4a2b      	ldr	r2, [pc, #172]	; (8000984 <HAL_SPI_MspInit+0x13c>)
 80008d6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <HAL_SPI_MspInit+0x138>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008de:	4b28      	ldr	r3, [pc, #160]	; (8000980 <HAL_SPI_MspInit+0x138>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <HAL_SPI_MspInit+0x138>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <HAL_SPI_MspInit+0x138>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <HAL_SPI_MspInit+0x138>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <HAL_SPI_MspInit+0x138>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <HAL_SPI_MspInit+0x138>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <HAL_SPI_MspInit+0x138>)
 8000904:	0018      	movs	r0, r3
 8000906:	f001 ff61 	bl	80027cc <HAL_DMA_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800090e:	f7ff ff71 	bl	80007f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <HAL_SPI_MspInit+0x138>)
 8000916:	659a      	str	r2, [r3, #88]	; 0x58
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_SPI_MspInit+0x138>)
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <HAL_SPI_MspInit+0x140>)
 8000920:	4a1a      	ldr	r2, [pc, #104]	; (800098c <HAL_SPI_MspInit+0x144>)
 8000922:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_SPI_MspInit+0x140>)
 8000926:	2210      	movs	r2, #16
 8000928:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_SPI_MspInit+0x140>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_SPI_MspInit+0x140>)
 8000932:	2280      	movs	r2, #128	; 0x80
 8000934:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <HAL_SPI_MspInit+0x140>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_SPI_MspInit+0x140>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_SPI_MspInit+0x140>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_SPI_MspInit+0x140>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_SPI_MspInit+0x140>)
 8000950:	0018      	movs	r0, r3
 8000952:	f001 ff3b 	bl	80027cc <HAL_DMA_Init>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 800095a:	f7ff ff4b 	bl	80007f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a09      	ldr	r2, [pc, #36]	; (8000988 <HAL_SPI_MspInit+0x140>)
 8000962:	655a      	str	r2, [r3, #84]	; 0x54
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_SPI_MspInit+0x140>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b00b      	add	sp, #44	; 0x2c
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40003800 	.word	0x40003800
 8000978:	40021000 	.word	0x40021000
 800097c:	48000400 	.word	0x48000400
 8000980:	200000e0 	.word	0x200000e0
 8000984:	40020044 	.word	0x40020044
 8000988:	20000124 	.word	0x20000124
 800098c:	40020058 	.word	0x40020058

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f001 fdec 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490e      	ldr	r1, [pc, #56]	; (8000a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009f2:	f7ff ffe4 	bl	80009be <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009f6:	f002 fddf 	bl	80035b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fa:	f7ff fcfb 	bl	80003f4 <main>

080009fe <LoopForever>:

LoopForever:
    b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   r0, =_estack
 8000a00:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a0c:	080039bc 	.word	0x080039bc
  ldr r2, =_sbss
 8000a10:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a14:	20000294 	.word	0x20000294

08000a18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_IRQHandler>
	...

08000a1c <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8000a20:	4b46      	ldr	r3, [pc, #280]	; (8000b3c <ili9488_Init+0x120>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001a      	movs	r2, r3
 8000a26:	2301      	movs	r3, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	d115      	bne.n	8000a58 <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8000a2c:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <ili9488_Init+0x120>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2201      	movs	r2, #1
 8000a32:	4313      	orrs	r3, r2
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <ili9488_Init+0x120>)
 8000a38:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 8000a3a:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <ili9488_Init+0x120>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	001a      	movs	r2, r3
 8000a40:	2302      	movs	r3, #2
 8000a42:	4013      	ands	r3, r2
 8000a44:	d101      	bne.n	8000a4a <ili9488_Init+0x2e>
      LCD_IO_Init();
 8000a46:	f001 fb4f 	bl	80020e8 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	; (8000b3c <ili9488_Init+0x120>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2202      	movs	r2, #2
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <ili9488_Init+0x120>)
 8000a56:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8000a58:	2069      	movs	r0, #105	; 0x69
 8000a5a:	f001 fb20 	bl	800209e <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f001 fc10 	bl	8002284 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8000a64:	2005      	movs	r0, #5
 8000a66:	f001 fb1a 	bl	800209e <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 8000a6a:	4b35      	ldr	r3, [pc, #212]	; (8000b40 <ili9488_Init+0x124>)
 8000a6c:	220f      	movs	r2, #15
 8000a6e:	0019      	movs	r1, r3
 8000a70:	20e0      	movs	r0, #224	; 0xe0
 8000a72:	f001 fc85 	bl	8002380 <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8000a76:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <ili9488_Init+0x128>)
 8000a78:	220f      	movs	r2, #15
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	20e1      	movs	r0, #225	; 0xe1
 8000a7e:	f001 fc7f 	bl	8002380 <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8000a82:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <ili9488_Init+0x12c>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	0019      	movs	r1, r3
 8000a88:	20c0      	movs	r0, #192	; 0xc0
 8000a8a:	f001 fc79 	bl	8002380 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000a8e:	2005      	movs	r0, #5
 8000a90:	f001 fb05 	bl	800209e <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 8000a94:	20c1      	movs	r0, #193	; 0xc1
 8000a96:	f001 fbf5 	bl	8002284 <LCD_IO_WriteCmd8>
 8000a9a:	2041      	movs	r0, #65	; 0x41
 8000a9c:	f001 fc18 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_Delay(5);
 8000aa0:	2005      	movs	r0, #5
 8000aa2:	f001 fafc 	bl	800209e <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <ili9488_Init+0x130>)
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	0019      	movs	r1, r3
 8000aac:	20c5      	movs	r0, #197	; 0xc5
 8000aae:	f001 fc67 	bl	8002380 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000ab2:	2005      	movs	r0, #5
 8000ab4:	f001 faf3 	bl	800209e <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 8000ab8:	203a      	movs	r0, #58	; 0x3a
 8000aba:	f001 fbe3 	bl	8002284 <LCD_IO_WriteCmd8>
 8000abe:	2066      	movs	r0, #102	; 0x66
 8000ac0:	f001 fc06 	bl	80022d0 <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
 8000ac4:	20b0      	movs	r0, #176	; 0xb0
 8000ac6:	f001 fbdd 	bl	8002284 <LCD_IO_WriteCmd8>
 8000aca:	2080      	movs	r0, #128	; 0x80
 8000acc:	f001 fc00 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8000ad0:	20b1      	movs	r0, #177	; 0xb1
 8000ad2:	f001 fbd7 	bl	8002284 <LCD_IO_WriteCmd8>
 8000ad6:	20a0      	movs	r0, #160	; 0xa0
 8000ad8:	f001 fbfa 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8000adc:	20b4      	movs	r0, #180	; 0xb4
 8000ade:	f001 fbd1 	bl	8002284 <LCD_IO_WriteCmd8>
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f001 fbf4 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <ili9488_Init+0x134>)
 8000aea:	2202      	movs	r2, #2
 8000aec:	0019      	movs	r1, r3
 8000aee:	20b6      	movs	r0, #182	; 0xb6
 8000af0:	f001 fc46 	bl	8002380 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 8000af4:	20e9      	movs	r0, #233	; 0xe9
 8000af6:	f001 fbc5 	bl	8002284 <LCD_IO_WriteCmd8>
 8000afa:	2000      	movs	r0, #0
 8000afc:	f001 fbe8 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <ili9488_Init+0x138>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	0019      	movs	r1, r3
 8000b06:	20f7      	movs	r0, #247	; 0xf7
 8000b08:	f001 fc3a 	bl	8002380 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000b0c:	2005      	movs	r0, #5
 8000b0e:	f001 fac6 	bl	800209e <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 8000b12:	2011      	movs	r0, #17
 8000b14:	f001 fbb6 	bl	8002284 <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8000b18:	2078      	movs	r0, #120	; 0x78
 8000b1a:	f001 fac0 	bl	800209e <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 8000b1e:	2029      	movs	r0, #41	; 0x29
 8000b20:	f001 fbb0 	bl	8002284 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8000b24:	2005      	movs	r0, #5
 8000b26:	f001 faba 	bl	800209e <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8000b2a:	2036      	movs	r0, #54	; 0x36
 8000b2c:	f001 fbaa 	bl	8002284 <LCD_IO_WriteCmd8>
 8000b30:	20e8      	movs	r0, #232	; 0xe8
 8000b32:	f001 fbcd 	bl	80022d0 <LCD_IO_WriteData8>
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000168 	.word	0x20000168
 8000b40:	08003630 	.word	0x08003630
 8000b44:	08003640 	.word	0x08003640
 8000b48:	08003650 	.word	0x08003650
 8000b4c:	08003654 	.word	0x08003654
 8000b50:	08003658 	.word	0x08003658
 8000b54:	0800365c 	.word	0x0800365c

08000b58 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8000b5c:	2011      	movs	r0, #17
 8000b5e:	f001 fb91 	bl	8002284 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 faa8 	bl	80020b8 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 8000b72:	2010      	movs	r0, #16
 8000b74:	f001 fb86 	bl	8002284 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f001 fa9d 	bl	80020b8 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8000b88:	23f0      	movs	r3, #240	; 0xf0
 8000b8a:	005b      	lsls	r3, r3, #1
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8000b96:	23a0      	movs	r3, #160	; 0xa0
 8000b98:	005b      	lsls	r3, r3, #1
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <ili9488_ReadID+0x40>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 8000bb2:	f7ff ff33 	bl	8000a1c <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 8000bb6:	1d39      	adds	r1, r7, #4
 8000bb8:	2300      	movs	r3, #0
 8000bba:	2203      	movs	r2, #3
 8000bbc:	2004      	movs	r0, #4
 8000bbe:	f001 fc3b 	bl	8002438 <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <ili9488_ReadID+0x44>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d101      	bne.n	8000bd4 <ili9488_ReadID+0x34>
    return 0x9488;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <ili9488_ReadID+0x48>)
 8000bd2:	e000      	b.n	8000bd6 <ili9488_ReadID+0x36>
  return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	20000168 	.word	0x20000168
 8000be4:	00668054 	.word	0x00668054
 8000be8:	00009488 	.word	0x00009488

08000bec <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	1dbb      	adds	r3, r7, #6
 8000bf6:	801a      	strh	r2, [r3, #0]
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	1c0a      	adds	r2, r1, #0
 8000bfc:	801a      	strh	r2, [r3, #0]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000bfe:	202a      	movs	r0, #42	; 0x2a
 8000c00:	f001 fb40 	bl	8002284 <LCD_IO_WriteCmd8>
 8000c04:	1dbb      	adds	r3, r7, #6
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f001 fb5e 	bl	80022d0 <LCD_IO_WriteData8>
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f001 fb58 	bl	80022d0 <LCD_IO_WriteData8>
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 fb50 	bl	80022d0 <LCD_IO_WriteData8>
 8000c30:	1dbb      	adds	r3, r7, #6
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 fb4a 	bl	80022d0 <LCD_IO_WriteData8>
 8000c3c:	202b      	movs	r0, #43	; 0x2b
 8000c3e:	f001 fb21 	bl	8002284 <LCD_IO_WriteCmd8>
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f001 fb3f 	bl	80022d0 <LCD_IO_WriteData8>
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f001 fb39 	bl	80022d0 <LCD_IO_WriteData8>
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f001 fb31 	bl	80022d0 <LCD_IO_WriteData8>
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 fb2b 	bl	80022d0 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	0002      	movs	r2, r0
 8000c8a:	1dbb      	adds	r3, r7, #6
 8000c8c:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 8000c8e:	1dbb      	adds	r3, r7, #6
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	121b      	asrs	r3, r3, #8
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2207      	movs	r2, #7
 8000c98:	4393      	bics	r3, r2
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f001 fb17 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 8000ca2:	1dbb      	adds	r3, r7, #6
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	10db      	asrs	r3, r3, #3
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2203      	movs	r2, #3
 8000cac:	4393      	bics	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f001 fb0d 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 8000cb6:	1dbb      	adds	r3, r7, #6
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 fb06 	bl	80022d0 <LCD_IO_WriteData8>
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	0004      	movs	r4, r0
 8000cd4:	0008      	movs	r0, r1
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	1dbb      	adds	r3, r7, #6
 8000cda:	1c22      	adds	r2, r4, #0
 8000cdc:	801a      	strh	r2, [r3, #0]
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	1c02      	adds	r2, r0, #0
 8000ce2:	801a      	strh	r2, [r3, #0]
 8000ce4:	1cbb      	adds	r3, r7, #2
 8000ce6:	1c0a      	adds	r2, r1, #0
 8000ce8:	801a      	strh	r2, [r3, #0]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000cea:	202a      	movs	r0, #42	; 0x2a
 8000cec:	f001 faca 	bl	8002284 <LCD_IO_WriteCmd8>
 8000cf0:	1dbb      	adds	r3, r7, #6
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 fae8 	bl	80022d0 <LCD_IO_WriteData8>
 8000d00:	1dbb      	adds	r3, r7, #6
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	0018      	movs	r0, r3
 8000d08:	f001 fae2 	bl	80022d0 <LCD_IO_WriteData8>
 8000d0c:	1dbb      	adds	r3, r7, #6
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 fada 	bl	80022d0 <LCD_IO_WriteData8>
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	0018      	movs	r0, r3
 8000d24:	f001 fad4 	bl	80022d0 <LCD_IO_WriteData8>
 8000d28:	202b      	movs	r0, #43	; 0x2b
 8000d2a:	f001 faab 	bl	8002284 <LCD_IO_WriteCmd8>
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	0a1b      	lsrs	r3, r3, #8
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 fac9 	bl	80022d0 <LCD_IO_WriteData8>
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 fac3 	bl	80022d0 <LCD_IO_WriteData8>
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	0018      	movs	r0, r3
 8000d56:	f001 fabb 	bl	80022d0 <LCD_IO_WriteData8>
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 fab5 	bl	80022d0 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8000d66:	202c      	movs	r0, #44	; 0x2c
 8000d68:	f001 fa8c 	bl	8002284 <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 8000d6c:	1cbb      	adds	r3, r7, #2
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff86 	bl	8000c82 <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b003      	add	sp, #12
 8000d7c:	bd90      	pop	{r4, r7, pc}

08000d7e <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8000d7e:	b590      	push	{r4, r7, lr}
 8000d80:	b085      	sub	sp, #20
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	0002      	movs	r2, r0
 8000d86:	1dbb      	adds	r3, r7, #6
 8000d88:	801a      	strh	r2, [r3, #0]
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	1c0a      	adds	r2, r1, #0
 8000d8e:	801a      	strh	r2, [r3, #0]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000d90:	202a      	movs	r0, #42	; 0x2a
 8000d92:	f001 fa77 	bl	8002284 <LCD_IO_WriteCmd8>
 8000d96:	1dbb      	adds	r3, r7, #6
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 fa95 	bl	80022d0 <LCD_IO_WriteData8>
 8000da6:	1dbb      	adds	r3, r7, #6
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	0018      	movs	r0, r3
 8000dae:	f001 fa8f 	bl	80022d0 <LCD_IO_WriteData8>
 8000db2:	1dbb      	adds	r3, r7, #6
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f001 fa87 	bl	80022d0 <LCD_IO_WriteData8>
 8000dc2:	1dbb      	adds	r3, r7, #6
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f001 fa81 	bl	80022d0 <LCD_IO_WriteData8>
 8000dce:	202b      	movs	r0, #43	; 0x2b
 8000dd0:	f001 fa58 	bl	8002284 <LCD_IO_WriteCmd8>
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	f001 fa76 	bl	80022d0 <LCD_IO_WriteData8>
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	0018      	movs	r0, r3
 8000dec:	f001 fa70 	bl	80022d0 <LCD_IO_WriteData8>
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f001 fa68 	bl	80022d0 <LCD_IO_WriteData8>
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	0018      	movs	r0, r3
 8000e08:	f001 fa62 	bl	80022d0 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 8000e0c:	240e      	movs	r4, #14
 8000e0e:	1939      	adds	r1, r7, r4
 8000e10:	2301      	movs	r3, #1
 8000e12:	2201      	movs	r2, #1
 8000e14:	202e      	movs	r0, #46	; 0x2e
 8000e16:	f001 fb41 	bl	800249c <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	881b      	ldrh	r3, [r3, #0]
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b005      	add	sp, #20
 8000e24:	bd90      	pop	{r4, r7, pc}
	...

08000e28 <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000e28:	b5b0      	push	{r4, r5, r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	0005      	movs	r5, r0
 8000e30:	000c      	movs	r4, r1
 8000e32:	0010      	movs	r0, r2
 8000e34:	0019      	movs	r1, r3
 8000e36:	1dbb      	adds	r3, r7, #6
 8000e38:	1c2a      	adds	r2, r5, #0
 8000e3a:	801a      	strh	r2, [r3, #0]
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	1c22      	adds	r2, r4, #0
 8000e40:	801a      	strh	r2, [r3, #0]
 8000e42:	1cbb      	adds	r3, r7, #2
 8000e44:	1c02      	adds	r2, r0, #0
 8000e46:	801a      	strh	r2, [r3, #0]
 8000e48:	003b      	movs	r3, r7
 8000e4a:	1c0a      	adds	r2, r1, #0
 8000e4c:	801a      	strh	r2, [r3, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8000e4e:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <ili9488_SetDisplayWindow+0xf0>)
 8000e50:	1d3a      	adds	r2, r7, #4
 8000e52:	8812      	ldrh	r2, [r2, #0]
 8000e54:	801a      	strh	r2, [r3, #0]
 8000e56:	1d3a      	adds	r2, r7, #4
 8000e58:	003b      	movs	r3, r7
 8000e5a:	8812      	ldrh	r2, [r2, #0]
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	18d3      	adds	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	3b01      	subs	r3, #1
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <ili9488_SetDisplayWindow+0xf4>)
 8000e68:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8000e6a:	202a      	movs	r0, #42	; 0x2a
 8000e6c:	f001 fa0a 	bl	8002284 <LCD_IO_WriteCmd8>
 8000e70:	1dbb      	adds	r3, r7, #6
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f001 fa28 	bl	80022d0 <LCD_IO_WriteData8>
 8000e80:	1dbb      	adds	r3, r7, #6
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	0018      	movs	r0, r3
 8000e88:	f001 fa22 	bl	80022d0 <LCD_IO_WriteData8>
 8000e8c:	1dbb      	adds	r3, r7, #6
 8000e8e:	881a      	ldrh	r2, [r3, #0]
 8000e90:	1cbb      	adds	r3, r7, #2
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	18d3      	adds	r3, r2, r3
 8000e96:	3b01      	subs	r3, #1
 8000e98:	121b      	asrs	r3, r3, #8
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 fa17 	bl	80022d0 <LCD_IO_WriteData8>
 8000ea2:	1dbb      	adds	r3, r7, #6
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	1cbb      	adds	r3, r7, #2
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	18d3      	adds	r3, r2, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 fa0a 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8000ebc:	202b      	movs	r0, #43	; 0x2b
 8000ebe:	f001 f9e1 	bl	8002284 <LCD_IO_WriteCmd8>
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f001 f9ff 	bl	80022d0 <LCD_IO_WriteData8>
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 f9f9 	bl	80022d0 <LCD_IO_WriteData8>
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	881a      	ldrh	r2, [r3, #0]
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	18d3      	adds	r3, r2, r3
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	121b      	asrs	r3, r3, #8
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f001 f9ee 	bl	80022d0 <LCD_IO_WriteData8>
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	003b      	movs	r3, r7
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	18d3      	adds	r3, r2, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f001 f9e1 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bdb0      	pop	{r4, r5, r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	2000016a 	.word	0x2000016a
 8000f1c:	2000016c 	.word	0x2000016c

08000f20 <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	0005      	movs	r5, r0
 8000f28:	000c      	movs	r4, r1
 8000f2a:	0010      	movs	r0, r2
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	1dbb      	adds	r3, r7, #6
 8000f30:	1c2a      	adds	r2, r5, #0
 8000f32:	801a      	strh	r2, [r3, #0]
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	1c22      	adds	r2, r4, #0
 8000f38:	801a      	strh	r2, [r3, #0]
 8000f3a:	1cbb      	adds	r3, r7, #2
 8000f3c:	1c02      	adds	r2, r0, #0
 8000f3e:	801a      	strh	r2, [r3, #0]
 8000f40:	003b      	movs	r3, r7
 8000f42:	1c0a      	adds	r2, r1, #0
 8000f44:	801a      	strh	r2, [r3, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 8000f46:	003b      	movs	r3, r7
 8000f48:	881a      	ldrh	r2, [r3, #0]
 8000f4a:	1cbb      	adds	r3, r7, #2
 8000f4c:	8819      	ldrh	r1, [r3, #0]
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	8818      	ldrh	r0, [r3, #0]
 8000f52:	1dbb      	adds	r3, r7, #6
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f000 f828 	bl	8000fae <ili9488_FillRect>
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}

08000f66 <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000f66:	b5b0      	push	{r4, r5, r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af02      	add	r7, sp, #8
 8000f6c:	0005      	movs	r5, r0
 8000f6e:	000c      	movs	r4, r1
 8000f70:	0010      	movs	r0, r2
 8000f72:	0019      	movs	r1, r3
 8000f74:	1dbb      	adds	r3, r7, #6
 8000f76:	1c2a      	adds	r2, r5, #0
 8000f78:	801a      	strh	r2, [r3, #0]
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	1c22      	adds	r2, r4, #0
 8000f7e:	801a      	strh	r2, [r3, #0]
 8000f80:	1cbb      	adds	r3, r7, #2
 8000f82:	1c02      	adds	r2, r0, #0
 8000f84:	801a      	strh	r2, [r3, #0]
 8000f86:	003b      	movs	r3, r7
 8000f88:	1c0a      	adds	r2, r1, #0
 8000f8a:	801a      	strh	r2, [r3, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	1cbb      	adds	r3, r7, #2
 8000f92:	8819      	ldrh	r1, [r3, #0]
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	8818      	ldrh	r0, [r3, #0]
 8000f98:	1dbb      	adds	r3, r7, #6
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	0013      	movs	r3, r2
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f000 f804 	bl	8000fae <ili9488_FillRect>
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bdb0      	pop	{r4, r5, r7, pc}

08000fae <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000fae:	b5b0      	push	{r4, r5, r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	0005      	movs	r5, r0
 8000fb6:	000c      	movs	r4, r1
 8000fb8:	0010      	movs	r0, r2
 8000fba:	0019      	movs	r1, r3
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	1c2a      	adds	r2, r5, #0
 8000fc0:	801a      	strh	r2, [r3, #0]
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	1c22      	adds	r2, r4, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
 8000fc8:	1cbb      	adds	r3, r7, #2
 8000fca:	1c02      	adds	r2, r0, #0
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	003b      	movs	r3, r7
 8000fd0:	1c0a      	adds	r2, r1, #0
 8000fd2:	801a      	strh	r2, [r3, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	881c      	ldrh	r4, [r3, #0]
 8000fd8:	1cbb      	adds	r3, r7, #2
 8000fda:	881a      	ldrh	r2, [r3, #0]
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	8819      	ldrh	r1, [r3, #0]
 8000fe0:	1dbb      	adds	r3, r7, #6
 8000fe2:	8818      	ldrh	r0, [r3, #0]
 8000fe4:	0023      	movs	r3, r4
 8000fe6:	f7ff ff1f 	bl	8000e28 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8000fea:	202c      	movs	r0, #44	; 0x2c
 8000fec:	f001 f94a 	bl	8002284 <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 8000ff0:	1cbb      	adds	r3, r7, #2
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	003a      	movs	r2, r7
 8000ff6:	8812      	ldrh	r2, [r2, #0]
 8000ff8:	4353      	muls	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 8000ffc:	e005      	b.n	800100a <ili9488_FillRect+0x5c>
    ili9488_write16to24(RGBCode);
 8000ffe:	2320      	movs	r3, #32
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff fe3c 	bl	8000c82 <ili9488_write16to24>
  while(XYsize--)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1e5a      	subs	r2, r3, #1
 800100e:	60fa      	str	r2, [r7, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f4      	bne.n	8000ffe <ili9488_FillRect+0x50>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b004      	add	sp, #16
 800101c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001020 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	603a      	str	r2, [r7, #0]
 8001028:	1dbb      	adds	r3, r7, #6
 800102a:	1c02      	adds	r2, r0, #0
 800102c:	801a      	strh	r2, [r3, #0]
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	1c0a      	adds	r2, r1, #0
 8001032:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0, size = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3316      	adds	r3, #22
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b29a      	uxth	r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	3317      	adds	r3, #23
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b29b      	uxth	r3, r3
 8001050:	18d3      	adds	r3, r2, r3
 8001052:	b29a      	uxth	r2, r3
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	18d3      	adds	r3, r2, r3
 800105a:	b29a      	uxth	r2, r3
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	3a01      	subs	r2, #1
 8001060:	801a      	strh	r2, [r3, #0]
  size = *(volatile uint16_t *) (pbmp + 2);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	3302      	adds	r3, #2
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3304      	adds	r3, #4
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	041b      	lsls	r3, r3, #16
 8001076:	001a      	movs	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	330a      	adds	r3, #10
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	330c      	adds	r3, #12
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	041b      	lsls	r3, r3, #16
 8001092:	001a      	movs	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
 8001098:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	085b      	lsrs	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	18d3      	adds	r3, r2, r3
 80010aa:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 80010ac:	2036      	movs	r0, #54	; 0x36
 80010ae:	f001 f8e9 	bl	8002284 <LCD_IO_WriteCmd8>
 80010b2:	20a8      	movs	r0, #168	; 0xa8
 80010b4:	f001 f90c 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 80010b8:	202b      	movs	r0, #43	; 0x2b
 80010ba:	f001 f8e3 	bl	8002284 <LCD_IO_WriteCmd8>
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <ili9488_DrawBitmap+0x124>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	001a      	movs	r2, r3
 80010c4:	2340      	movs	r3, #64	; 0x40
 80010c6:	33ff      	adds	r3, #255	; 0xff
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	121b      	asrs	r3, r3, #8
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 f8fe 	bl	80022d0 <LCD_IO_WriteData8>
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <ili9488_DrawBitmap+0x124>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	223f      	movs	r2, #63	; 0x3f
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	0018      	movs	r0, r3
 80010e2:	f001 f8f5 	bl	80022d0 <LCD_IO_WriteData8>
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <ili9488_DrawBitmap+0x128>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	001a      	movs	r2, r3
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	33ff      	adds	r3, #255	; 0xff
 80010f0:	1a9b      	subs	r3, r3, r2
 80010f2:	121b      	asrs	r3, r3, #8
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	0018      	movs	r0, r3
 80010f8:	f001 f8ea 	bl	80022d0 <LCD_IO_WriteData8>
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <ili9488_DrawBitmap+0x128>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	223f      	movs	r2, #63	; 0x3f
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	0018      	movs	r0, r3
 800110a:	f001 f8e1 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 800110e:	202c      	movs	r0, #44	; 0x2c
 8001110:	f001 f8b8 	bl	8002284 <LCD_IO_WriteCmd8>
  while(size--)
 8001114:	e007      	b.n	8001126 <ili9488_DrawBitmap+0x106>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff fdb1 	bl	8000c82 <ili9488_write16to24>
    pbmp+= 2;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3302      	adds	r3, #2
 8001124:	603b      	str	r3, [r7, #0]
  while(size--)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1e5a      	subs	r2, r3, #1
 800112a:	60fa      	str	r2, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f2      	bne.n	8001116 <ili9488_DrawBitmap+0xf6>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8001130:	2036      	movs	r0, #54	; 0x36
 8001132:	f001 f8a7 	bl	8002284 <LCD_IO_WriteCmd8>
 8001136:	20e8      	movs	r0, #232	; 0xe8
 8001138:	f001 f8ca 	bl	80022d0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b004      	add	sp, #16
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000016c 	.word	0x2000016c
 8001148:	2000016a 	.word	0x2000016a

0800114c <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	0005      	movs	r5, r0
 8001154:	000c      	movs	r4, r1
 8001156:	0010      	movs	r0, r2
 8001158:	0019      	movs	r1, r3
 800115a:	1dbb      	adds	r3, r7, #6
 800115c:	1c2a      	adds	r2, r5, #0
 800115e:	801a      	strh	r2, [r3, #0]
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	1c22      	adds	r2, r4, #0
 8001164:	801a      	strh	r2, [r3, #0]
 8001166:	1cbb      	adds	r3, r7, #2
 8001168:	1c02      	adds	r2, r0, #0
 800116a:	801a      	strh	r2, [r3, #0]
 800116c:	003b      	movs	r3, r7
 800116e:	1c0a      	adds	r2, r1, #0
 8001170:	801a      	strh	r2, [r3, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 8001172:	1cbb      	adds	r3, r7, #2
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	003a      	movs	r2, r7
 8001178:	8812      	ldrh	r2, [r2, #0]
 800117a:	4353      	muls	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800117e:	003b      	movs	r3, r7
 8001180:	881c      	ldrh	r4, [r3, #0]
 8001182:	1cbb      	adds	r3, r7, #2
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	8819      	ldrh	r1, [r3, #0]
 800118a:	1dbb      	adds	r3, r7, #6
 800118c:	8818      	ldrh	r0, [r3, #0]
 800118e:	0023      	movs	r3, r4
 8001190:	f7ff fe4a 	bl	8000e28 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8001194:	202c      	movs	r0, #44	; 0x2c
 8001196:	f001 f875 	bl	8002284 <LCD_IO_WriteCmd8>
  while(size--)
 800119a:	e007      	b.n	80011ac <ili9488_DrawRGBImage+0x60>
  {
    ili9488_write16to24(*pdata);
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	0018      	movs	r0, r3
 80011a2:	f7ff fd6e 	bl	8000c82 <ili9488_write16to24>
    pdata++;
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	3302      	adds	r3, #2
 80011aa:	623b      	str	r3, [r7, #32]
  while(size--)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1e5a      	subs	r2, r3, #1
 80011b0:	60fa      	str	r2, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f2      	bne.n	800119c <ili9488_DrawRGBImage+0x50>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b004      	add	sp, #16
 80011be:	bdb0      	pop	{r4, r5, r7, pc}

080011c0 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	0005      	movs	r5, r0
 80011c8:	000c      	movs	r4, r1
 80011ca:	0010      	movs	r0, r2
 80011cc:	0019      	movs	r1, r3
 80011ce:	1dbb      	adds	r3, r7, #6
 80011d0:	1c2a      	adds	r2, r5, #0
 80011d2:	801a      	strh	r2, [r3, #0]
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	1c22      	adds	r2, r4, #0
 80011d8:	801a      	strh	r2, [r3, #0]
 80011da:	1cbb      	adds	r3, r7, #2
 80011dc:	1c02      	adds	r2, r0, #0
 80011de:	801a      	strh	r2, [r3, #0]
 80011e0:	003b      	movs	r3, r7
 80011e2:	1c0a      	adds	r2, r1, #0
 80011e4:	801a      	strh	r2, [r3, #0]
  uint32_t size = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 80011ea:	1cbb      	adds	r3, r7, #2
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	003a      	movs	r2, r7
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	4353      	muls	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80011f6:	003b      	movs	r3, r7
 80011f8:	881c      	ldrh	r4, [r3, #0]
 80011fa:	1cbb      	adds	r3, r7, #2
 80011fc:	881a      	ldrh	r2, [r3, #0]
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	8819      	ldrh	r1, [r3, #0]
 8001202:	1dbb      	adds	r3, r7, #6
 8001204:	8818      	ldrh	r0, [r3, #0]
 8001206:	0023      	movs	r3, r4
 8001208:	f7ff fe0e 	bl	8000e28 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	6a39      	ldr	r1, [r7, #32]
 8001210:	2301      	movs	r3, #1
 8001212:	202e      	movs	r0, #46	; 0x2e
 8001214:	f001 f942 	bl	800249c <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b004      	add	sp, #16
 800121e:	bdb0      	pop	{r4, r5, r7, pc}

08001220 <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	0004      	movs	r4, r0
 8001228:	0008      	movs	r0, r1
 800122a:	0011      	movs	r1, r2
 800122c:	1dbb      	adds	r3, r7, #6
 800122e:	1c22      	adds	r2, r4, #0
 8001230:	801a      	strh	r2, [r3, #0]
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	1c02      	adds	r2, r0, #0
 8001236:	801a      	strh	r2, [r3, #0]
 8001238:	1cbb      	adds	r3, r7, #2
 800123a:	1c0a      	adds	r2, r1, #0
 800123c:	801a      	strh	r2, [r3, #0]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 800123e:	4b31      	ldr	r3, [pc, #196]	; (8001304 <ili9488_Scroll+0xe4>)
 8001240:	88db      	ldrh	r3, [r3, #6]
 8001242:	1d3a      	adds	r2, r7, #4
 8001244:	8812      	ldrh	r2, [r2, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d105      	bne.n	8001256 <ili9488_Scroll+0x36>
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <ili9488_Scroll+0xe4>)
 800124c:	885b      	ldrh	r3, [r3, #2]
 800124e:	1cba      	adds	r2, r7, #2
 8001250:	8812      	ldrh	r2, [r2, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d019      	beq.n	800128a <ili9488_Scroll+0x6a>
  {
    scrparam[3] = TopFix;
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <ili9488_Scroll+0xe4>)
 8001258:	1d3a      	adds	r2, r7, #4
 800125a:	8812      	ldrh	r2, [r2, #0]
 800125c:	80da      	strh	r2, [r3, #6]
    scrparam[1] = BottonFix;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <ili9488_Scroll+0xe4>)
 8001260:	1cba      	adds	r2, r7, #2
 8001262:	8812      	ldrh	r2, [r2, #0]
 8001264:	805a      	strh	r2, [r3, #2]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8001266:	1d3a      	adds	r2, r7, #4
 8001268:	1cbb      	adds	r3, r7, #2
 800126a:	8812      	ldrh	r2, [r2, #0]
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	18d3      	adds	r3, r2, r3
 8001270:	b29b      	uxth	r3, r3
 8001272:	22f0      	movs	r2, #240	; 0xf0
 8001274:	0052      	lsls	r2, r2, #1
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <ili9488_Scroll+0xe4>)
 800127c:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <ili9488_Scroll+0xe8>)
 8001280:	2203      	movs	r2, #3
 8001282:	0019      	movs	r1, r3
 8001284:	2033      	movs	r0, #51	; 0x33
 8001286:	f001 f8a5 	bl	80023d4 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 800128a:	1dbb      	adds	r3, r7, #6
 800128c:	2200      	movs	r2, #0
 800128e:	5e9a      	ldrsh	r2, [r3, r2]
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <ili9488_Scroll+0xe4>)
 8001292:	889b      	ldrh	r3, [r3, #4]
 8001294:	0019      	movs	r1, r3
 8001296:	0010      	movs	r0, r2
 8001298:	f7ff f8a6 	bl	80003e8 <__aeabi_idivmod>
 800129c:	000b      	movs	r3, r1
 800129e:	001a      	movs	r2, r3
 80012a0:	1dbb      	adds	r3, r7, #6
 80012a2:	801a      	strh	r2, [r3, #0]
  if(Scroll < 0)
 80012a4:	1dbb      	adds	r3, r7, #6
 80012a6:	2200      	movs	r2, #0
 80012a8:	5e9b      	ldrsh	r3, [r3, r2]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	da0c      	bge.n	80012c8 <ili9488_Scroll+0xa8>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <ili9488_Scroll+0xe4>)
 80012b0:	889a      	ldrh	r2, [r3, #4]
 80012b2:	1dbb      	adds	r3, r7, #6
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	18d3      	adds	r3, r2, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <ili9488_Scroll+0xe4>)
 80012bc:	885b      	ldrh	r3, [r3, #2]
 80012be:	18d3      	adds	r3, r2, r3
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	1dbb      	adds	r3, r7, #6
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	e007      	b.n	80012d8 <ili9488_Scroll+0xb8>
  else
    Scroll = Scroll + scrparam[1];
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <ili9488_Scroll+0xe4>)
 80012ca:	885a      	ldrh	r2, [r3, #2]
 80012cc:	1dbb      	adds	r3, r7, #6
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	1dbb      	adds	r3, r7, #6
 80012d6:	801a      	strh	r2, [r3, #0]
  #endif
  if(Scroll != scrparam[0])
 80012d8:	1dbb      	adds	r3, r7, #6
 80012da:	2200      	movs	r2, #0
 80012dc:	5e9b      	ldrsh	r3, [r3, r2]
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <ili9488_Scroll+0xe4>)
 80012e0:	8812      	ldrh	r2, [r2, #0]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00a      	beq.n	80012fc <ili9488_Scroll+0xdc>
  {
    scrparam[0] = Scroll;
 80012e6:	1dbb      	adds	r3, r7, #6
 80012e8:	881a      	ldrh	r2, [r3, #0]
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <ili9488_Scroll+0xe4>)
 80012ec:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <ili9488_Scroll+0xe4>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	2201      	movs	r2, #1
 80012f4:	0019      	movs	r1, r3
 80012f6:	2037      	movs	r0, #55	; 0x37
 80012f8:	f001 f810 	bl	800231c <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b003      	add	sp, #12
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	20000170 	.word	0x20000170
 8001308:	20000172 	.word	0x20000172

0800130c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]

  /* LCD Init */   
  lcd_drv->Init();
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <BSP_LCD_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <BSP_LCD_Init+0x44>)
 8001322:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <BSP_LCD_Init+0x48>)
 8001324:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <BSP_LCD_Init+0x44>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <BSP_LCD_Init+0x44>)
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <BSP_LCD_Init+0x4c>)
 8001330:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <BSP_LCD_Init+0x48>)
 8001334:	0018      	movs	r0, r3
 8001336:	f000 f839 	bl	80013ac <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
  
  return ret;
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	781b      	ldrb	r3, [r3, #0]
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	b002      	add	sp, #8
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000050 	.word	0x20000050
 8001350:	20000178 	.word	0x20000178
 8001354:	0000ffff 	.word	0x0000ffff
 8001358:	20000000 	.word	0x20000000

0800135c <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <BSP_LCD_GetXSize+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	4798      	blx	r3
 8001368:	0003      	movs	r3, r0
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000050 	.word	0x20000050

08001374 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <BSP_LCD_GetYSize+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	4798      	blx	r3
 8001380:	0003      	movs	r3, r0
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000050 	.word	0x20000050

0800138c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	0002      	movs	r2, r0
 8001394:	1dbb      	adds	r3, r7, #6
 8001396:	801a      	strh	r2, [r3, #0]
  DrawProp.TextColor = Color;
 8001398:	1dbb      	adds	r3, r7, #6
 800139a:	881a      	ldrh	r2, [r3, #0]
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <BSP_LCD_SetTextColor+0x1c>)
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000178 	.word	0x20000178

080013ac <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 80013ac:	b5b0      	push	{r4, r5, r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	0002      	movs	r2, r0
 80013b4:	1dbb      	adds	r3, r7, #6
 80013b6:	801a      	strh	r2, [r3, #0]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <BSP_LCD_Clear+0x3c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80013be:	f7ff ffcd 	bl	800135c <BSP_LCD_GetXSize>
 80013c2:	0003      	movs	r3, r0
 80013c4:	001d      	movs	r5, r3
 80013c6:	f7ff ffd5 	bl	8001374 <BSP_LCD_GetYSize>
 80013ca:	0003      	movs	r3, r0
 80013cc:	001a      	movs	r2, r3
 80013ce:	1dbb      	adds	r3, r7, #6
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	0013      	movs	r3, r2
 80013d6:	002a      	movs	r2, r5
 80013d8:	2100      	movs	r1, #0
 80013da:	2000      	movs	r0, #0
 80013dc:	47a0      	blx	r4
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bdb0      	pop	{r4, r5, r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	20000050 	.word	0x20000050

080013ec <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	0005      	movs	r5, r0
 80013f4:	000c      	movs	r4, r1
 80013f6:	0010      	movs	r0, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	1dbb      	adds	r3, r7, #6
 80013fc:	1c2a      	adds	r2, r5, #0
 80013fe:	801a      	strh	r2, [r3, #0]
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	1c22      	adds	r2, r4, #0
 8001404:	801a      	strh	r2, [r3, #0]
 8001406:	1cbb      	adds	r3, r7, #2
 8001408:	1c02      	adds	r2, r0, #0
 800140a:	801a      	strh	r2, [r3, #0]
 800140c:	003b      	movs	r3, r7
 800140e:	1c0a      	adds	r2, r1, #0
 8001410:	801a      	strh	r2, [r3, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <BSP_LCD_FillRect+0x54>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <BSP_LCD_FillRect+0x58>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	003a      	movs	r2, r7
 8001420:	8816      	ldrh	r6, [r2, #0]
 8001422:	1cba      	adds	r2, r7, #2
 8001424:	8815      	ldrh	r5, [r2, #0]
 8001426:	1d3a      	adds	r2, r7, #4
 8001428:	8811      	ldrh	r1, [r2, #0]
 800142a:	1dba      	adds	r2, r7, #6
 800142c:	8810      	ldrh	r0, [r2, #0]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	0033      	movs	r3, r6
 8001432:	002a      	movs	r2, r5
 8001434:	47a0      	blx	r4
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b003      	add	sp, #12
 800143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	20000050 	.word	0x20000050
 8001444:	20000178 	.word	0x20000178

08001448 <BSP_LCD_DisplayDigits>:
 * @param Ypos 
 * @param Text stream of text containing numbers "0"-"9" or ":"
 * @param Mode 
 */
void BSP_LCD_DisplayDigits(uint16_t Xpos, uint16_t Ypos, uint8_t *Text)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	603a      	str	r2, [r7, #0]
 8001450:	1dbb      	adds	r3, r7, #6
 8001452:	1c02      	adds	r2, r0, #0
 8001454:	801a      	strh	r2, [r3, #0]
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	1c0a      	adds	r2, r1, #0
 800145a:	801a      	strh	r2, [r3, #0]
    uint8_t digit_count = 1;
 800145c:	230f      	movs	r3, #15
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
    uint16_t x = Xpos;
 8001464:	230c      	movs	r3, #12
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	1dba      	adds	r2, r7, #6
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	801a      	strh	r2, [r3, #0]
    while(*Text != NULL){
 800146e:	e039      	b.n	80014e4 <BSP_LCD_DisplayDigits+0x9c>
      if (*Text == ':') {
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b3a      	cmp	r3, #58	; 0x3a
 8001476:	d115      	bne.n	80014a4 <BSP_LCD_DisplayDigits+0x5c>
        BSP_LCD_Colon(x,Ypos+20);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	3314      	adds	r3, #20
 800147e:	b29a      	uxth	r2, r3
 8001480:	240c      	movs	r4, #12
 8001482:	193b      	adds	r3, r7, r4
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f000 f995 	bl	80017b8 <BSP_LCD_Colon>
        x+=30;
 800148e:	193b      	adds	r3, r7, r4
 8001490:	193a      	adds	r2, r7, r4
 8001492:	8812      	ldrh	r2, [r2, #0]
 8001494:	321e      	adds	r2, #30
 8001496:	801a      	strh	r2, [r3, #0]
        Xpos+=30; //next offset should include a small gap from the colon
 8001498:	1dbb      	adds	r3, r7, #6
 800149a:	1dba      	adds	r2, r7, #6
 800149c:	8812      	ldrh	r2, [r2, #0]
 800149e:	321e      	adds	r2, #30
 80014a0:	801a      	strh	r2, [r3, #0]
 80014a2:	e01c      	b.n	80014de <BSP_LCD_DisplayDigits+0x96>
        
      }else{
        BSP_LCD_DrawDigits(x ,  Ypos, (*Text)-'0');
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	3b30      	subs	r3, #48	; 0x30
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	8819      	ldrh	r1, [r3, #0]
 80014b0:	240c      	movs	r4, #12
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 f81e 	bl	80014f8 <BSP_LCD_DrawDigits>
        x = Xpos + (LCD_SEGMENT_DIGIT_SPACING_OFFSET*digit_count);
 80014bc:	200f      	movs	r0, #15
 80014be:	183b      	adds	r3, r7, r0
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2234      	movs	r2, #52	; 0x34
 80014c6:	4353      	muls	r3, r2
 80014c8:	b299      	uxth	r1, r3
 80014ca:	193b      	adds	r3, r7, r4
 80014cc:	1dba      	adds	r2, r7, #6
 80014ce:	8812      	ldrh	r2, [r2, #0]
 80014d0:	188a      	adds	r2, r1, r2
 80014d2:	801a      	strh	r2, [r3, #0]
        digit_count++;
 80014d4:	183b      	adds	r3, r7, r0
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	183b      	adds	r3, r7, r0
 80014da:	3201      	adds	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
      }
      Text++;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	603b      	str	r3, [r7, #0]
    while(*Text != NULL){
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1c1      	bne.n	8001470 <BSP_LCD_DisplayDigits+0x28>
    }
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b005      	add	sp, #20
 80014f4:	bd90      	pop	{r4, r7, pc}
	...

080014f8 <BSP_LCD_DrawDigits>:
 * 
 * @param xpos 
 * @param ypos 
 * @param digit int number 0-9
 */
void BSP_LCD_DrawDigits(uint16_t xpos,uint16_t ypos, uint8_t digit) {
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	0004      	movs	r4, r0
 8001500:	0008      	movs	r0, r1
 8001502:	0011      	movs	r1, r2
 8001504:	1dbb      	adds	r3, r7, #6
 8001506:	1c22      	adds	r2, r4, #0
 8001508:	801a      	strh	r2, [r3, #0]
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	1c02      	adds	r2, r0, #0
 800150e:	801a      	strh	r2, [r3, #0]
 8001510:	1cfb      	adds	r3, r7, #3
 8001512:	1c0a      	adds	r2, r1, #0
 8001514:	701a      	strb	r2, [r3, #0]

  volatile uint16_t x[6] = {0};
 8001516:	2418      	movs	r4, #24
 8001518:	193b      	adds	r3, r7, r4
 800151a:	0018      	movs	r0, r3
 800151c:	230c      	movs	r3, #12
 800151e:	001a      	movs	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	f002 f86d 	bl	8003600 <memset>
  volatile uint16_t y[6] = {0};
 8001526:	250c      	movs	r5, #12
 8001528:	197b      	adds	r3, r7, r5
 800152a:	0018      	movs	r0, r3
 800152c:	230c      	movs	r3, #12
 800152e:	001a      	movs	r2, r3
 8001530:	2100      	movs	r1, #0
 8001532:	f002 f865 	bl	8003600 <memset>
    

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff ff28 	bl	800138c <BSP_LCD_SetTextColor>

    x[0] = xpos;
 800153c:	0021      	movs	r1, r4
 800153e:	187b      	adds	r3, r7, r1
 8001540:	1dba      	adds	r2, r7, #6
 8001542:	8812      	ldrh	r2, [r2, #0]
 8001544:	801a      	strh	r2, [r3, #0]
    x[1] = x[0] - (LCD_SEGMENT_WIDTH + LCD_SEGMENT_GAP);
 8001546:	187b      	adds	r3, r7, r1
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	3b09      	subs	r3, #9
 800154e:	b29a      	uxth	r2, r3
 8001550:	187b      	adds	r3, r7, r1
 8001552:	805a      	strh	r2, [r3, #2]
    x[2] = x[1];
 8001554:	187b      	adds	r3, r7, r1
 8001556:	885b      	ldrh	r3, [r3, #2]
 8001558:	b29a      	uxth	r2, r3
 800155a:	187b      	adds	r3, r7, r1
 800155c:	809a      	strh	r2, [r3, #4]
    x[3] = x[0];
 800155e:	187b      	adds	r3, r7, r1
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	b29a      	uxth	r2, r3
 8001564:	187b      	adds	r3, r7, r1
 8001566:	80da      	strh	r2, [r3, #6]
    x[4] = x[0];
 8001568:	187b      	adds	r3, r7, r1
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b29a      	uxth	r2, r3
 800156e:	187b      	adds	r3, r7, r1
 8001570:	811a      	strh	r2, [r3, #8]
    x[5] = x[0] + LCD_SEGMENT_HEIGHT +LCD_SEGMENT_GAP; 
 8001572:	187b      	adds	r3, r7, r1
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	331e      	adds	r3, #30
 800157a:	b29a      	uxth	r2, r3
 800157c:	187b      	adds	r3, r7, r1
 800157e:	815a      	strh	r2, [r3, #10]
    x[6] = x[5];
 8001580:	187b      	adds	r3, r7, r1
 8001582:	895b      	ldrh	r3, [r3, #10]
 8001584:	b29a      	uxth	r2, r3
 8001586:	187b      	adds	r3, r7, r1
 8001588:	819a      	strh	r2, [r3, #12]

    y[0] = ypos;
 800158a:	0029      	movs	r1, r5
 800158c:	187b      	adds	r3, r7, r1
 800158e:	1d3a      	adds	r2, r7, #4
 8001590:	8812      	ldrh	r2, [r2, #0]
 8001592:	801a      	strh	r2, [r3, #0]
    y[1] = y[0] + (LCD_SEGMENT_WIDTH/2);
 8001594:	187b      	adds	r3, r7, r1
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	b29b      	uxth	r3, r3
 800159a:	3304      	adds	r3, #4
 800159c:	b29a      	uxth	r2, r3
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	805a      	strh	r2, [r3, #2]
    y[2] = y[0] + (LCD_SEGMENT_WIDTH/2) + LCD_SEGMENT_HEIGHT + LCD_SEGMENT_GAP;
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3322      	adds	r3, #34	; 0x22
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	809a      	strh	r2, [r3, #4]
    y[3] = y[0] + LCD_SEGMENT_HEIGHT;
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	331e      	adds	r3, #30
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	80da      	strh	r2, [r3, #6]
    y[4] = y[0]+ (LCD_SEGMENT_HEIGHT*2) + LCD_SEGMENT_GAP;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	333c      	adds	r3, #60	; 0x3c
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	811a      	strh	r2, [r3, #8]
    y[5] = y[2]; 
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	889b      	ldrh	r3, [r3, #4]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	815a      	strh	r2, [r3, #10]
    y[6] = y[1];
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	885b      	ldrh	r3, [r3, #2]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	819a      	strh	r2, [r3, #12]
    uint16_t yrect;
    uint16_t width;
    uint16_t height;

 
  for(uint8_t segment= 0; segment < 7; segment++){
 80015e0:	2327      	movs	r3, #39	; 0x27
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	e0d5      	b.n	8001796 <BSP_LCD_DrawDigits+0x29e>
    
       switch(segment){
 80015ea:	2327      	movs	r3, #39	; 0x27
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b06      	cmp	r3, #6
 80015f2:	d900      	bls.n	80015f6 <BSP_LCD_DrawDigits+0xfe>
 80015f4:	e096      	b.n	8001724 <BSP_LCD_DrawDigits+0x22c>
 80015f6:	009a      	lsls	r2, r3, #2
 80015f8:	4b6c      	ldr	r3, [pc, #432]	; (80017ac <BSP_LCD_DrawDigits+0x2b4>)
 80015fa:	18d3      	adds	r3, r2, r3
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	469f      	mov	pc, r3
          case 0: xrect= xpos; yrect=y[0]; width=LCD_SEGMENT_HEIGHT ; height= LCD_SEGMENT_WIDTH; break;
 8001600:	232e      	movs	r3, #46	; 0x2e
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	1dba      	adds	r2, r7, #6
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	801a      	strh	r2, [r3, #0]
 800160a:	232c      	movs	r3, #44	; 0x2c
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	220c      	movs	r2, #12
 8001610:	18ba      	adds	r2, r7, r2
 8001612:	8812      	ldrh	r2, [r2, #0]
 8001614:	801a      	strh	r2, [r3, #0]
 8001616:	232a      	movs	r3, #42	; 0x2a
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	221e      	movs	r2, #30
 800161c:	801a      	strh	r2, [r3, #0]
 800161e:	2328      	movs	r3, #40	; 0x28
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	2209      	movs	r2, #9
 8001624:	801a      	strh	r2, [r3, #0]
 8001626:	e07d      	b.n	8001724 <BSP_LCD_DrawDigits+0x22c>
          case 1: xrect= x[6]; yrect=y[6]; width=LCD_SEGMENT_WIDTH ; height= LCD_SEGMENT_HEIGHT;break;
 8001628:	232e      	movs	r3, #46	; 0x2e
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	2218      	movs	r2, #24
 800162e:	18ba      	adds	r2, r7, r2
 8001630:	8992      	ldrh	r2, [r2, #12]
 8001632:	801a      	strh	r2, [r3, #0]
 8001634:	232c      	movs	r3, #44	; 0x2c
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	220c      	movs	r2, #12
 800163a:	18ba      	adds	r2, r7, r2
 800163c:	8992      	ldrh	r2, [r2, #12]
 800163e:	801a      	strh	r2, [r3, #0]
 8001640:	232a      	movs	r3, #42	; 0x2a
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	2209      	movs	r2, #9
 8001646:	801a      	strh	r2, [r3, #0]
 8001648:	2328      	movs	r3, #40	; 0x28
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	221e      	movs	r2, #30
 800164e:	801a      	strh	r2, [r3, #0]
 8001650:	e068      	b.n	8001724 <BSP_LCD_DrawDigits+0x22c>
          case 2: xrect= x[5]; yrect=y[5]; width=LCD_SEGMENT_WIDTH ; height= LCD_SEGMENT_HEIGHT;break;
 8001652:	232e      	movs	r3, #46	; 0x2e
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	2218      	movs	r2, #24
 8001658:	18ba      	adds	r2, r7, r2
 800165a:	8952      	ldrh	r2, [r2, #10]
 800165c:	801a      	strh	r2, [r3, #0]
 800165e:	232c      	movs	r3, #44	; 0x2c
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	220c      	movs	r2, #12
 8001664:	18ba      	adds	r2, r7, r2
 8001666:	8952      	ldrh	r2, [r2, #10]
 8001668:	801a      	strh	r2, [r3, #0]
 800166a:	232a      	movs	r3, #42	; 0x2a
 800166c:	18fb      	adds	r3, r7, r3
 800166e:	2209      	movs	r2, #9
 8001670:	801a      	strh	r2, [r3, #0]
 8001672:	2328      	movs	r3, #40	; 0x28
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	221e      	movs	r2, #30
 8001678:	801a      	strh	r2, [r3, #0]
 800167a:	e053      	b.n	8001724 <BSP_LCD_DrawDigits+0x22c>
          case 3: xrect= x[4]; yrect=y[4]; width=LCD_SEGMENT_HEIGHT ; height= LCD_SEGMENT_WIDTH;break;
 800167c:	232e      	movs	r3, #46	; 0x2e
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	2218      	movs	r2, #24
 8001682:	18ba      	adds	r2, r7, r2
 8001684:	8912      	ldrh	r2, [r2, #8]
 8001686:	801a      	strh	r2, [r3, #0]
 8001688:	232c      	movs	r3, #44	; 0x2c
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	220c      	movs	r2, #12
 800168e:	18ba      	adds	r2, r7, r2
 8001690:	8912      	ldrh	r2, [r2, #8]
 8001692:	801a      	strh	r2, [r3, #0]
 8001694:	232a      	movs	r3, #42	; 0x2a
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	221e      	movs	r2, #30
 800169a:	801a      	strh	r2, [r3, #0]
 800169c:	2328      	movs	r3, #40	; 0x28
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	2209      	movs	r2, #9
 80016a2:	801a      	strh	r2, [r3, #0]
 80016a4:	e03e      	b.n	8001724 <BSP_LCD_DrawDigits+0x22c>
          case 4: xrect= x[2]; yrect=y[2]; width=LCD_SEGMENT_WIDTH ; height= LCD_SEGMENT_HEIGHT;break;
 80016a6:	232e      	movs	r3, #46	; 0x2e
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	2218      	movs	r2, #24
 80016ac:	18ba      	adds	r2, r7, r2
 80016ae:	8892      	ldrh	r2, [r2, #4]
 80016b0:	801a      	strh	r2, [r3, #0]
 80016b2:	232c      	movs	r3, #44	; 0x2c
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	220c      	movs	r2, #12
 80016b8:	18ba      	adds	r2, r7, r2
 80016ba:	8892      	ldrh	r2, [r2, #4]
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	232a      	movs	r3, #42	; 0x2a
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2209      	movs	r2, #9
 80016c4:	801a      	strh	r2, [r3, #0]
 80016c6:	2328      	movs	r3, #40	; 0x28
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	221e      	movs	r2, #30
 80016cc:	801a      	strh	r2, [r3, #0]
 80016ce:	e029      	b.n	8001724 <BSP_LCD_DrawDigits+0x22c>
          case 5: xrect= x[1]; yrect=y[1]; width=LCD_SEGMENT_WIDTH ; height= LCD_SEGMENT_HEIGHT;break;
 80016d0:	232e      	movs	r3, #46	; 0x2e
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	2218      	movs	r2, #24
 80016d6:	18ba      	adds	r2, r7, r2
 80016d8:	8852      	ldrh	r2, [r2, #2]
 80016da:	801a      	strh	r2, [r3, #0]
 80016dc:	232c      	movs	r3, #44	; 0x2c
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	220c      	movs	r2, #12
 80016e2:	18ba      	adds	r2, r7, r2
 80016e4:	8852      	ldrh	r2, [r2, #2]
 80016e6:	801a      	strh	r2, [r3, #0]
 80016e8:	232a      	movs	r3, #42	; 0x2a
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	2209      	movs	r2, #9
 80016ee:	801a      	strh	r2, [r3, #0]
 80016f0:	2328      	movs	r3, #40	; 0x28
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	221e      	movs	r2, #30
 80016f6:	801a      	strh	r2, [r3, #0]
 80016f8:	e014      	b.n	8001724 <BSP_LCD_DrawDigits+0x22c>
          case 6: xrect= x[3]; yrect=y[3]; width=LCD_SEGMENT_HEIGHT ; height= LCD_SEGMENT_WIDTH;break;
 80016fa:	232e      	movs	r3, #46	; 0x2e
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	2218      	movs	r2, #24
 8001700:	18ba      	adds	r2, r7, r2
 8001702:	88d2      	ldrh	r2, [r2, #6]
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	232c      	movs	r3, #44	; 0x2c
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	220c      	movs	r2, #12
 800170c:	18ba      	adds	r2, r7, r2
 800170e:	88d2      	ldrh	r2, [r2, #6]
 8001710:	801a      	strh	r2, [r3, #0]
 8001712:	232a      	movs	r3, #42	; 0x2a
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	221e      	movs	r2, #30
 8001718:	801a      	strh	r2, [r3, #0]
 800171a:	2328      	movs	r3, #40	; 0x28
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2209      	movs	r2, #9
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	46c0      	nop			; (mov r8, r8)
          default:;
        }
    
      if(digit_segment[digit] &(0x1<<segment)){
 8001724:	1cfb      	adds	r3, r7, #3
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <BSP_LCD_DrawDigits+0x2b8>)
 800172a:	5cd3      	ldrb	r3, [r2, r3]
 800172c:	001a      	movs	r2, r3
 800172e:	2327      	movs	r3, #39	; 0x27
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	411a      	asrs	r2, r3
 8001736:	0013      	movs	r3, r2
 8001738:	2201      	movs	r2, #1
 800173a:	4013      	ands	r3, r2
 800173c:	d012      	beq.n	8001764 <BSP_LCD_DrawDigits+0x26c>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff fe24 	bl	800138c <BSP_LCD_SetTextColor>
         BSP_LCD_FillRect(xrect,yrect, width, height ); 
 8001744:	2328      	movs	r3, #40	; 0x28
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	881c      	ldrh	r4, [r3, #0]
 800174a:	232a      	movs	r3, #42	; 0x2a
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	881a      	ldrh	r2, [r3, #0]
 8001750:	232c      	movs	r3, #44	; 0x2c
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	8819      	ldrh	r1, [r3, #0]
 8001756:	232e      	movs	r3, #46	; 0x2e
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	8818      	ldrh	r0, [r3, #0]
 800175c:	0023      	movs	r3, r4
 800175e:	f7ff fe45 	bl	80013ec <BSP_LCD_FillRect>
 8001762:	e012      	b.n	800178a <BSP_LCD_DrawDigits+0x292>
      }
      else{
           BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <BSP_LCD_DrawDigits+0x2bc>)
 8001766:	0018      	movs	r0, r3
 8001768:	f7ff fe10 	bl	800138c <BSP_LCD_SetTextColor>
           BSP_LCD_FillRect(xrect,yrect, width, height );
 800176c:	2328      	movs	r3, #40	; 0x28
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	881c      	ldrh	r4, [r3, #0]
 8001772:	232a      	movs	r3, #42	; 0x2a
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	881a      	ldrh	r2, [r3, #0]
 8001778:	232c      	movs	r3, #44	; 0x2c
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	8819      	ldrh	r1, [r3, #0]
 800177e:	232e      	movs	r3, #46	; 0x2e
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	8818      	ldrh	r0, [r3, #0]
 8001784:	0023      	movs	r3, r4
 8001786:	f7ff fe31 	bl	80013ec <BSP_LCD_FillRect>
  for(uint8_t segment= 0; segment < 7; segment++){
 800178a:	2127      	movs	r1, #39	; 0x27
 800178c:	187b      	adds	r3, r7, r1
 800178e:	781a      	ldrb	r2, [r3, #0]
 8001790:	187b      	adds	r3, r7, r1
 8001792:	3201      	adds	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	2327      	movs	r3, #39	; 0x27
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b06      	cmp	r3, #6
 800179e:	d800      	bhi.n	80017a2 <BSP_LCD_DrawDigits+0x2aa>
 80017a0:	e723      	b.n	80015ea <BSP_LCD_DrawDigits+0xf2>
      }
    }
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b00c      	add	sp, #48	; 0x30
 80017aa:	bdb0      	pop	{r4, r5, r7, pc}
 80017ac:	08003998 	.word	0x08003998
 80017b0:	0800398c 	.word	0x0800398c
 80017b4:	0000ffff 	.word	0x0000ffff

080017b8 <BSP_LCD_Colon>:

void BSP_LCD_Colon(uint16_t xpos,uint16_t ypos){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	0002      	movs	r2, r0
 80017c0:	1dbb      	adds	r3, r7, #6
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	1c0a      	adds	r2, r1, #0
 80017c8:	801a      	strh	r2, [r3, #0]
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80017ca:	23f8      	movs	r3, #248	; 0xf8
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff fddc 	bl	800138c <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(xpos, ypos,  LCD_COLON_WIDTH,LCD_COLON_WIDTH );
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	8819      	ldrh	r1, [r3, #0]
 80017d8:	1dbb      	adds	r3, r7, #6
 80017da:	8818      	ldrh	r0, [r3, #0]
 80017dc:	230c      	movs	r3, #12
 80017de:	220c      	movs	r2, #12
 80017e0:	f7ff fe04 	bl	80013ec <BSP_LCD_FillRect>
    BSP_LCD_FillRect(xpos, ypos+20,  LCD_COLON_WIDTH,LCD_COLON_WIDTH ); 
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	3314      	adds	r3, #20
 80017ea:	b299      	uxth	r1, r3
 80017ec:	1dbb      	adds	r3, r7, #6
 80017ee:	8818      	ldrh	r0, [r3, #0]
 80017f0:	230c      	movs	r3, #12
 80017f2:	220c      	movs	r2, #12
 80017f4:	f7ff fdfa 	bl	80013ec <BSP_LCD_FillRect>
}
 80017f8:	46c0      	nop			; (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b002      	add	sp, #8
 80017fe:	bd80      	pop	{r7, pc}

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	0002      	movs	r2, r0
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800180c:	1dfb      	adds	r3, r7, #7
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b7f      	cmp	r3, #127	; 0x7f
 8001812:	d809      	bhi.n	8001828 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001814:	1dfb      	adds	r3, r7, #7
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	001a      	movs	r2, r3
 800181a:	231f      	movs	r3, #31
 800181c:	401a      	ands	r2, r3
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_EnableIRQ+0x30>)
 8001820:	2101      	movs	r1, #1
 8001822:	4091      	lsls	r1, r2
 8001824:	000a      	movs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
  }
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b002      	add	sp, #8
 800182e:	bd80      	pop	{r7, pc}
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	0002      	movs	r2, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b7f      	cmp	r3, #127	; 0x7f
 8001848:	d828      	bhi.n	800189c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800184a:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <__NVIC_SetPriority+0xd4>)
 800184c:	1dfb      	adds	r3, r7, #7
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	33c0      	adds	r3, #192	; 0xc0
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	589b      	ldr	r3, [r3, r2]
 800185a:	1dfa      	adds	r2, r7, #7
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	0011      	movs	r1, r2
 8001860:	2203      	movs	r2, #3
 8001862:	400a      	ands	r2, r1
 8001864:	00d2      	lsls	r2, r2, #3
 8001866:	21ff      	movs	r1, #255	; 0xff
 8001868:	4091      	lsls	r1, r2
 800186a:	000a      	movs	r2, r1
 800186c:	43d2      	mvns	r2, r2
 800186e:	401a      	ands	r2, r3
 8001870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	019b      	lsls	r3, r3, #6
 8001876:	22ff      	movs	r2, #255	; 0xff
 8001878:	401a      	ands	r2, r3
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	0018      	movs	r0, r3
 8001880:	2303      	movs	r3, #3
 8001882:	4003      	ands	r3, r0
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001888:	481f      	ldr	r0, [pc, #124]	; (8001908 <__NVIC_SetPriority+0xd4>)
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b25b      	sxtb	r3, r3
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	430a      	orrs	r2, r1
 8001894:	33c0      	adds	r3, #192	; 0xc0
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800189a:	e031      	b.n	8001900 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <__NVIC_SetPriority+0xd8>)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	0019      	movs	r1, r3
 80018a4:	230f      	movs	r3, #15
 80018a6:	400b      	ands	r3, r1
 80018a8:	3b08      	subs	r3, #8
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3306      	adds	r3, #6
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	18d3      	adds	r3, r2, r3
 80018b2:	3304      	adds	r3, #4
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	1dfa      	adds	r2, r7, #7
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	0011      	movs	r1, r2
 80018bc:	2203      	movs	r2, #3
 80018be:	400a      	ands	r2, r1
 80018c0:	00d2      	lsls	r2, r2, #3
 80018c2:	21ff      	movs	r1, #255	; 0xff
 80018c4:	4091      	lsls	r1, r2
 80018c6:	000a      	movs	r2, r1
 80018c8:	43d2      	mvns	r2, r2
 80018ca:	401a      	ands	r2, r3
 80018cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	019b      	lsls	r3, r3, #6
 80018d2:	22ff      	movs	r2, #255	; 0xff
 80018d4:	401a      	ands	r2, r3
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	0018      	movs	r0, r3
 80018dc:	2303      	movs	r3, #3
 80018de:	4003      	ands	r3, r0
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e4:	4809      	ldr	r0, [pc, #36]	; (800190c <__NVIC_SetPriority+0xd8>)
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	001c      	movs	r4, r3
 80018ec:	230f      	movs	r3, #15
 80018ee:	4023      	ands	r3, r4
 80018f0:	3b08      	subs	r3, #8
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	430a      	orrs	r2, r1
 80018f6:	3306      	adds	r3, #6
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	18c3      	adds	r3, r0, r3
 80018fc:	3304      	adds	r3, #4
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b003      	add	sp, #12
 8001906:	bd90      	pop	{r4, r7, pc}
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <LcdDirRead+0x68>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a17      	ldr	r2, [pc, #92]	; (800197c <LcdDirRead+0x6c>)
 800191e:	401a      	ands	r2, r3
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <LcdDirRead+0x68>)
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	04c9      	lsls	r1, r1, #19
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
  while(d--)
 800192a:	e00a      	b.n	8001942 <LcdDirRead+0x32>
  {
    GPIOX_CLR(LCD_SCK);
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <LcdDirRead+0x68>)
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	0592      	lsls	r2, r2, #22
 8001932:	619a      	str	r2, [r3, #24]
    LCD_READ_DELAY;
 8001934:	2000      	movs	r0, #0
 8001936:	f000 fba3 	bl	8002080 <LCD_IO_Delay>
    GPIOX_SET(LCD_SCK);
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <LcdDirRead+0x68>)
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	0192      	lsls	r2, r2, #6
 8001940:	619a      	str	r2, [r3, #24]
  while(d--)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ef      	bne.n	800192c <LcdDirRead+0x1c>
  }
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <LcdDirRead+0x68>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <LcdDirRead+0x6c>)
 8001952:	401a      	ands	r2, r3
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <LcdDirRead+0x68>)
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	0509      	lsls	r1, r1, #20
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos);
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <LcdDirRead+0x70>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2238      	movs	r2, #56	; 0x38
 8001964:	4393      	bics	r3, r2
 8001966:	001a      	movs	r2, r3
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <LcdDirRead+0x70>)
 800196a:	2118      	movs	r1, #24
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
}
 8001970:	46c0      	nop			; (mov r8, r8)
 8001972:	46bd      	mov	sp, r7
 8001974:	b002      	add	sp, #8
 8001976:	bd80      	pop	{r7, pc}
 8001978:	48000400 	.word	0x48000400
 800197c:	f3ffffff 	.word	0xf3ffffff
 8001980:	40003800 	.word	0x40003800

08001984 <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <LcdDirWrite+0x1c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2238      	movs	r2, #56	; 0x38
 800198e:	4393      	bics	r3, r2
 8001990:	001a      	movs	r2, r3
 8001992:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <LcdDirWrite+0x1c>)
 8001994:	2108      	movs	r1, #8
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40003800 	.word	0x40003800

080019a4 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	0002      	movs	r2, r0
 80019ac:	1dfb      	adds	r3, r7, #7
 80019ae:	701a      	strb	r2, [r3, #0]
  *(volatile uint8_t *)&SPIX->DR = d8;
 80019b0:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <LcdWrite8+0x30>)
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	7013      	strb	r3, [r2, #0]
  LCD_IO_Delay(0);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 fb61 	bl	8002080 <LCD_IO_Delay>
  while(SPIX->SR & SPI_SR_BSY);
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <LcdWrite8+0x34>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1fa      	bne.n	80019c0 <LcdWrite8+0x1c>
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b002      	add	sp, #8
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	4000380c 	.word	0x4000380c
 80019d8:	40003800 	.word	0x40003800

080019dc <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	0002      	movs	r2, r0
 80019e4:	1dfb      	adds	r3, r7, #7
 80019e6:	701a      	strb	r2, [r3, #0]
  LCD_RS_CMD;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <LcdCmdWrite8+0x40>)
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	0512      	lsls	r2, r2, #20
 80019ee:	619a      	str	r2, [r3, #24]
  *(volatile uint8_t *)&SPIX->DR = cmd8;
 80019f0:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <LcdCmdWrite8+0x44>)
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	7013      	strb	r3, [r2, #0]
  LCD_IO_Delay(0);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 fb41 	bl	8002080 <LCD_IO_Delay>
  while(SPIX->SR & SPI_SR_BSY);
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LcdCmdWrite8+0x48>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	4013      	ands	r3, r2
 8001a08:	d1fa      	bne.n	8001a00 <LcdCmdWrite8+0x24>
  LCD_RS_DATA;
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <LcdCmdWrite8+0x40>)
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	4000380c 	.word	0x4000380c
 8001a24:	40003800 	.word	0x40003800

08001a28 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <WaitForDmaEnd+0x18>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1fb      	bne.n	8001a2e <WaitForDmaEnd+0x6>
}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	20000184 	.word	0x20000184

08001a44 <Dma_irq_tx>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

extern inline void Dma_irq_tx(void);
inline void Dma_irq_tx(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <Dma_irq_tx+0x70>)
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	0292      	lsls	r2, r2, #10
 8001a4e:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <Dma_irq_tx+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <Dma_irq_tx+0x74>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d1fa      	bne.n	8001a58 <Dma_irq_tx+0x14>
  SPIX->CR2 &= ~SPI_CR2_TXDMAEN;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <Dma_irq_tx+0x78>)
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <Dma_irq_tx+0x78>)
 8001a68:	2102      	movs	r1, #2
 8001a6a:	438a      	bics	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
  while(SPIX->SR & SPI_SR_BSY);
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <Dma_irq_tx+0x78>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2280      	movs	r2, #128	; 0x80
 8001a76:	4013      	ands	r3, r2
 8001a78:	d1fa      	bne.n	8001a70 <Dma_irq_tx+0x2c>
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <Dma_irq_tx+0x78>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <Dma_irq_tx+0x78>)
 8001a80:	2140      	movs	r1, #64	; 0x40
 8001a82:	438a      	bics	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8001a86:	2003      	movs	r0, #3
 8001a88:	f000 fafa 	bl	8002080 <LCD_IO_Delay>
  SPIX->CR1 |= SPI_CR1_SPE;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <Dma_irq_tx+0x78>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <Dma_irq_tx+0x78>)
 8001a92:	2140      	movs	r1, #64	; 0x40
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

  if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <Dma_irq_tx+0x7c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d103      	bne.n	8001aa8 <Dma_irq_tx+0x64>
    LCD_CS_OFF;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <Dma_irq_tx+0x80>)
 8001aa2:	2280      	movs	r2, #128	; 0x80
 8001aa4:	0152      	lsls	r2, r2, #5
 8001aa6:	619a      	str	r2, [r3, #24]

  #ifndef osFeature_Semaphore
  /* no FreeRtos */
  LCD_IO_DmaTransferStatus = 0;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <Dma_irq_tx+0x7c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
  #else
  /* FreeRtos */
  osSemaphoreRelease(spiDmaBinSemHandle);
  #endif // #else osFeature_Semaphore
}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020058 	.word	0x40020058
 8001abc:	40003800 	.word	0x40003800
 8001ac0:	20000184 	.word	0x20000184
 8001ac4:	48000400 	.word	0x48000400

08001ac8 <LCD_IO_WriteMultiData>:
}
#endif

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <LCD_IO_WriteMultiData+0x78>)
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	0252      	lsls	r2, r2, #9
 8001ada:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <LCD_IO_WriteMultiData+0x7c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <LCD_IO_WriteMultiData+0x7c>)
 8001ae2:	2140      	movs	r1, #64	; 0x40
 8001ae4:	438a      	bics	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <LCD_IO_WriteMultiData+0x80>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <LCD_IO_WriteMultiData+0x80>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	d1fa      	bne.n	8001af0 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <LCD_IO_WriteMultiData+0x80>)
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <LCD_IO_WriteMultiData+0x80>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <LCD_IO_WriteMultiData+0x84>)
 8001b04:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <LCD_IO_WriteMultiData+0x80>)
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <LCD_IO_WriteMultiData+0x80>)
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	601a      	str	r2, [r3, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <LCD_IO_WriteMultiData+0x80>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <LCD_IO_WriteMultiData+0x80>)
 8001b18:	2101      	movs	r1, #1
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]
  SPIX->CR2 |= SPI_CR2_TXDMAEN;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <LCD_IO_WriteMultiData+0x7c>)
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <LCD_IO_WriteMultiData+0x7c>)
 8001b24:	2102      	movs	r1, #2
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]
  SPIX->CR1 |= SPI_CR1_SPE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <LCD_IO_WriteMultiData+0x7c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <LCD_IO_WriteMultiData+0x7c>)
 8001b30:	2140      	movs	r1, #64	; 0x40
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b004      	add	sp, #16
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40003800 	.word	0x40003800
 8001b48:	40020058 	.word	0x40020058
 8001b4c:	4000380c 	.word	0x4000380c

08001b50 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d108      	bne.n	8001b74 <LCD_IO_WriteMultiData8+0x24>
  {
    d8s = *pData;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <LCD_IO_WriteMultiData8+0x94>)
 8001b68:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <LCD_IO_WriteMultiData8+0x94>)
 8001b6c:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <LCD_IO_WriteMultiData8+0x98>)
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e02f      	b.n	8001bd4 <LCD_IO_WriteMultiData8+0x84>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <LCD_IO_WriteMultiData8+0x9c>)
 8001b76:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8001b78:	e02c      	b.n	8001bd4 <LCD_IO_WriteMultiData8+0x84>
  {
    if(Size <= DMA_MAXSIZE)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <LCD_IO_WriteMultiData8+0xa0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d810      	bhi.n	8001ba4 <LCD_IO_WriteMultiData8+0x54>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <LCD_IO_WriteMultiData8+0xa4>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7ff ff9a 	bl	8001ac8 <LCD_IO_WriteMultiData>
      Size = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d01a      	beq.n	8001bd4 <LCD_IO_WriteMultiData8+0x84>
        WaitForDmaEnd();
 8001b9e:	f7ff ff43 	bl	8001a28 <WaitForDmaEnd>
 8001ba2:	e017      	b.n	8001bd4 <LCD_IO_WriteMultiData8+0x84>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <LCD_IO_WriteMultiData8+0xa4>)
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4910      	ldr	r1, [pc, #64]	; (8001bf0 <LCD_IO_WriteMultiData8+0xa0>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff ff89 	bl	8001ac8 <LCD_IO_WriteMultiData>
      if(dinc)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <LCD_IO_WriteMultiData8+0x76>
        pData+= DMA_MAXSIZE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <LCD_IO_WriteMultiData8+0xa0>)
 8001bc0:	4694      	mov	ip, r2
 8001bc2:	4463      	add	r3, ip
 8001bc4:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <LCD_IO_WriteMultiData8+0xa8>)
 8001bca:	4694      	mov	ip, r2
 8001bcc:	4463      	add	r3, ip
 8001bce:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001bd0:	f7ff ff2a 	bl	8001a28 <WaitForDmaEnd>
  while(Size)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1cf      	bne.n	8001b7a <LCD_IO_WriteMultiData8+0x2a>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b006      	add	sp, #24
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000188 	.word	0x20000188
 8001be8:	00001012 	.word	0x00001012
 8001bec:	00001092 	.word	0x00001092
 8001bf0:	0000fffe 	.word	0x0000fffe
 8001bf4:	20000184 	.word	0x20000184
 8001bf8:	ffff0002 	.word	0xffff0002

08001bfc <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d108      	bne.n	8001c20 <LCD_IO_WriteMultiData16+0x24>
  {
    d16s = *pData;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	881a      	ldrh	r2, [r3, #0]
 8001c12:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <LCD_IO_WriteMultiData16+0xd4>)
 8001c14:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <LCD_IO_WriteMultiData16+0xd4>)
 8001c18:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <LCD_IO_WriteMultiData16+0xd8>)
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e04e      	b.n	8001cbe <LCD_IO_WriteMultiData16+0xc2>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <LCD_IO_WriteMultiData16+0xdc>)
 8001c22:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8001c24:	e04b      	b.n	8001cbe <LCD_IO_WriteMultiData16+0xc2>
  {
    if(Size <= DMA_MAXSIZE)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <LCD_IO_WriteMultiData16+0xe0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d810      	bhi.n	8001c50 <LCD_IO_WriteMultiData16+0x54>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <LCD_IO_WriteMultiData16+0xe4>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7ff ff44 	bl	8001ac8 <LCD_IO_WriteMultiData>
      Size = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d039      	beq.n	8001cbe <LCD_IO_WriteMultiData16+0xc2>
        WaitForDmaEnd();
 8001c4a:	f7ff feed 	bl	8001a28 <WaitForDmaEnd>
 8001c4e:	e036      	b.n	8001cbe <LCD_IO_WriteMultiData16+0xc2>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <LCD_IO_WriteMultiData16+0xe8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d81a      	bhi.n	8001c8e <LCD_IO_WriteMultiData16+0x92>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <LCD_IO_WriteMultiData16+0xe4>)
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <LCD_IO_WriteMultiData16+0xec>)
 8001c62:	1899      	adds	r1, r3, r2
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff ff2d 	bl	8001ac8 <LCD_IO_WriteMultiData>
      if(dinc)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <LCD_IO_WriteMultiData16+0x88>
        pData+= Size - DMA_MAXSIZE;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <LCD_IO_WriteMultiData16+0xf0>)
 8001c78:	4694      	mov	ip, r2
 8001c7a:	4463      	add	r3, ip
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	18d3      	adds	r3, r2, r3
 8001c82:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <LCD_IO_WriteMultiData16+0xe0>)
 8001c86:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001c88:	f7ff fece 	bl	8001a28 <WaitForDmaEnd>
 8001c8c:	e017      	b.n	8001cbe <LCD_IO_WriteMultiData16+0xc2>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <LCD_IO_WriteMultiData16+0xe4>)
 8001c90:	2202      	movs	r2, #2
 8001c92:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4911      	ldr	r1, [pc, #68]	; (8001cdc <LCD_IO_WriteMultiData16+0xe0>)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7ff ff14 	bl	8001ac8 <LCD_IO_WriteMultiData>
      if(dinc)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <LCD_IO_WriteMultiData16+0xb4>
        pData+= DMA_MAXSIZE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4a11      	ldr	r2, [pc, #68]	; (8001cf0 <LCD_IO_WriteMultiData16+0xf4>)
 8001caa:	4694      	mov	ip, r2
 8001cac:	4463      	add	r3, ip
 8001cae:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <LCD_IO_WriteMultiData16+0xec>)
 8001cb4:	4694      	mov	ip, r2
 8001cb6:	4463      	add	r3, ip
 8001cb8:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001cba:	f7ff feb5 	bl	8001a28 <WaitForDmaEnd>
  while(Size)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1b0      	bne.n	8001c26 <LCD_IO_WriteMultiData16+0x2a>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b006      	add	sp, #24
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	2000018a 	.word	0x2000018a
 8001cd4:	00001512 	.word	0x00001512
 8001cd8:	00001592 	.word	0x00001592
 8001cdc:	0000fffe 	.word	0x0000fffe
 8001ce0:	20000184 	.word	0x20000184
 8001ce4:	0001fffb 	.word	0x0001fffb
 8001ce8:	ffff0002 	.word	0xffff0002
 8001cec:	7fff0002 	.word	0x7fff0002
 8001cf0:	0001fffc 	.word	0x0001fffc

08001cf4 <Dma_irq_rx>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

extern inline void Dma_irq_rx(void);
inline void Dma_irq_rx(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <Dma_irq_rx+0x90>)
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	0192      	lsls	r2, r2, #6
 8001d00:	605a      	str	r2, [r3, #4]
  SPIX->CR2 &= ~SPI_CR2_RXDMAEN; /* SPI DMA tilt */
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <Dma_irq_rx+0x94>)
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <Dma_irq_rx+0x94>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	438a      	bics	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
  while(SPIX->SR & SPI_SR_RXNE)
 8001d0e:	e003      	b.n	8001d18 <Dma_irq_rx+0x24>
    d8 = *(uint8_t *)&SPIX->DR;
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <Dma_irq_rx+0x98>)
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	701a      	strb	r2, [r3, #0]
  while(SPIX->SR & SPI_SR_RXNE)
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <Dma_irq_rx+0x94>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d1f6      	bne.n	8001d10 <Dma_irq_rx+0x1c>
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <Dma_irq_rx+0x94>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <Dma_irq_rx+0x94>)
 8001d28:	2140      	movs	r1, #64	; 0x40
 8001d2a:	438a      	bics	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <Dma_irq_rx+0x94>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <Dma_irq_rx+0x9c>)
 8001d34:	401a      	ands	r2, r3
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <Dma_irq_rx+0x94>)
 8001d38:	4916      	ldr	r1, [pc, #88]	; (8001d94 <Dma_irq_rx+0xa0>)
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f000 f99e 	bl	8002080 <LCD_IO_Delay>
  while(SPIX->SR & SPI_SR_RXNE)
 8001d44:	e003      	b.n	8001d4e <Dma_irq_rx+0x5a>
    d8 = *(uint8_t *)&SPIX->DR;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <Dma_irq_rx+0x98>)
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	701a      	strb	r2, [r3, #0]
  while(SPIX->SR & SPI_SR_RXNE)
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <Dma_irq_rx+0x94>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2201      	movs	r2, #1
 8001d54:	4013      	ands	r3, r2
 8001d56:	d1f6      	bne.n	8001d46 <Dma_irq_rx+0x52>
  SPIX->CR1 |= SPI_CR1_SPE;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <Dma_irq_rx+0x94>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <Dma_irq_rx+0x94>)
 8001d5e:	2140      	movs	r1, #64	; 0x40
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <Dma_irq_rx+0xa4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <Dma_irq_rx+0xa4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	d1fa      	bne.n	8001d6c <Dma_irq_rx+0x78>

  #ifndef osFeature_Semaphore
  /* no FreeRtos */
  LCD_IO_DmaTransferStatus = 0;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <Dma_irq_rx+0xa8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
  #else  /* #ifndef osFeature_Semaphore */
  /* FreeRtos */
  osSemaphoreRelease(spiDmaBinSemHandle);
  #endif /* #else osFeature_Semaphore */
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40003800 	.word	0x40003800
 8001d8c:	4000380c 	.word	0x4000380c
 8001d90:	ffffbfc7 	.word	0xffffbfc7
 8001d94:	00004008 	.word	0x00004008
 8001d98:	40020044 	.word	0x40020044
 8001d9c:	20000184 	.word	0x20000184

08001da0 <DMA1_Channel4_5_IRQHandler>:
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
#else
/* TX-RX DMA are on shared DMA interrupt handler */
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <DMA1_Channel4_5_IRQHandler+0x58>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	4013      	ands	r3, r2
 8001dae:	d002      	beq.n	8001db6 <DMA1_Channel4_5_IRQHandler+0x16>
    Dma_irq_tx();
 8001db0:	f7ff fe48 	bl	8001a44 <Dma_irq_tx>
 8001db4:	e009      	b.n	8001dca <DMA1_Channel4_5_IRQHandler+0x2a>
  else if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_GIF(LCD_DMA_TX))
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <DMA1_Channel4_5_IRQHandler+0x58>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	025b      	lsls	r3, r3, #9
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d003      	beq.n	8001dca <DMA1_Channel4_5_IRQHandler+0x2a>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <DMA1_Channel4_5_IRQHandler+0x58>)
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	0252      	lsls	r2, r2, #9
 8001dc8:	605a      	str	r2, [r3, #4]

  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <DMA1_Channel4_5_IRQHandler+0x58>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	019b      	lsls	r3, r3, #6
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d002      	beq.n	8001ddc <DMA1_Channel4_5_IRQHandler+0x3c>
    Dma_irq_rx();
 8001dd6:	f7ff ff8d 	bl	8001cf4 <Dma_irq_rx>
  else if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_GIF(LCD_DMA_RX))
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 8001dda:	e009      	b.n	8001df0 <DMA1_Channel4_5_IRQHandler+0x50>
  else if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_GIF(LCD_DMA_RX))
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <DMA1_Channel4_5_IRQHandler+0x58>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	015b      	lsls	r3, r3, #5
 8001de4:	4013      	ands	r3, r2
 8001de6:	d003      	beq.n	8001df0 <DMA1_Channel4_5_IRQHandler+0x50>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <DMA1_Channel4_5_IRQHandler+0x58>)
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	0152      	lsls	r2, r2, #5
 8001dee:	605a      	str	r2, [r3, #4]
}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	40020000 	.word	0x40020000

08001dfc <LCD_IO_ReadMultiData>:
#endif

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <LCD_IO_ReadMultiData+0x60>)
 8001e0a:	2280      	movs	r2, #128	; 0x80
 8001e0c:	0152      	lsls	r2, r2, #5
 8001e0e:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <LCD_IO_ReadMultiData+0x64>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <LCD_IO_ReadMultiData+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d1fa      	bne.n	8001e18 <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <LCD_IO_ReadMultiData+0x64>)
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <LCD_IO_ReadMultiData+0x64>)
 8001e2a:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <LCD_IO_ReadMultiData+0x68>)
 8001e2c:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <LCD_IO_ReadMultiData+0x64>)
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <LCD_IO_ReadMultiData+0x64>)
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;    /* DMA start */
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <LCD_IO_ReadMultiData+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <LCD_IO_ReadMultiData+0x64>)
 8001e40:	2101      	movs	r1, #1
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
  SPIX->CR2 |= SPI_CR2_RXDMAEN;                   /* SPI DMA on */
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <LCD_IO_ReadMultiData+0x6c>)
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <LCD_IO_ReadMultiData+0x6c>)
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]
}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b004      	add	sp, #16
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020044 	.word	0x40020044
 8001e64:	4000380c 	.word	0x4000380c
 8001e68:	40003800 	.word	0x40003800

08001e6c <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <LCD_IO_ReadMultiData8+0x74>)
 8001e78:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 8001e7a:	e024      	b.n	8001ec6 <LCD_IO_ReadMultiData8+0x5a>
  {
    if(Size > DMA_MAXSIZE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4a19      	ldr	r2, [pc, #100]	; (8001ee4 <LCD_IO_ReadMultiData8+0x78>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d913      	bls.n	8001eac <LCD_IO_ReadMultiData8+0x40>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <LCD_IO_ReadMultiData8+0x7c>)
 8001e86:	2202      	movs	r2, #2
 8001e88:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4915      	ldr	r1, [pc, #84]	; (8001ee4 <LCD_IO_ReadMultiData8+0x78>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff ffb3 	bl	8001dfc <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	4a14      	ldr	r2, [pc, #80]	; (8001eec <LCD_IO_ReadMultiData8+0x80>)
 8001e9a:	4694      	mov	ip, r2
 8001e9c:	4463      	add	r3, ip
 8001e9e:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <LCD_IO_ReadMultiData8+0x78>)
 8001ea4:	4694      	mov	ip, r2
 8001ea6:	4463      	add	r3, ip
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	e00a      	b.n	8001ec2 <LCD_IO_ReadMultiData8+0x56>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <LCD_IO_ReadMultiData8+0x7c>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7ff ff9f 	bl	8001dfc <LCD_IO_ReadMultiData>
      Size = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 8001ec2:	f7ff fdb1 	bl	8001a28 <WaitForDmaEnd>
  while(Size)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1d7      	bne.n	8001e7c <LCD_IO_ReadMultiData8+0x10>
  }
  LCD_CS_OFF;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <LCD_IO_ReadMultiData8+0x84>)
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	0152      	lsls	r2, r2, #5
 8001ed2:	619a      	str	r2, [r3, #24]
  LcdDirWrite();
 8001ed4:	f7ff fd56 	bl	8001984 <LcdDirWrite>
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b004      	add	sp, #16
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	00001082 	.word	0x00001082
 8001ee4:	0000fffe 	.word	0x0000fffe
 8001ee8:	20000184 	.word	0x20000184
 8001eec:	ffff0002 	.word	0xffff0002
 8001ef0:	48000400 	.word	0x48000400

08001ef4 <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8001f06:	4b56      	ldr	r3, [pc, #344]	; (8002060 <LCD_IO_ReadMultiData16to24+0x16c>)
 8001f08:	2280      	movs	r2, #128	; 0x80
 8001f0a:	0152      	lsls	r2, r2, #5
 8001f0c:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 8001f0e:	4b55      	ldr	r3, [pc, #340]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	4b53      	ldr	r3, [pc, #332]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1fa      	bne.n	8001f16 <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 8001f20:	4b50      	ldr	r3, [pc, #320]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 8001f22:	4a51      	ldr	r2, [pc, #324]	; (8002068 <LCD_IO_ReadMultiData16to24+0x174>)
 8001f24:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 8001f26:	4b4f      	ldr	r3, [pc, #316]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 8001f28:	4a50      	ldr	r2, [pc, #320]	; (800206c <LCD_IO_ReadMultiData16to24+0x178>)
 8001f2a:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	0052      	lsls	r2, r2, #1
 8001f32:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |                 
 8001f3a:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 8001f3c:	2285      	movs	r2, #133	; 0x85
 8001f3e:	0152      	lsls	r2, r2, #5
 8001f40:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |                                
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 8001f42:	4b48      	ldr	r3, [pc, #288]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
  SPIX->CR2 |= SPI_CR2_RXDMAEN;
 8001f4e:	4b48      	ldr	r3, [pc, #288]	; (8002070 <LCD_IO_ReadMultiData16to24+0x17c>)
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <LCD_IO_ReadMultiData16to24+0x17c>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]
  while(Size)
 8001f5a:	e043      	b.n	8001fe4 <LCD_IO_ReadMultiData16to24+0xf0>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8001f5c:	4b41      	ldr	r3, [pc, #260]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d03e      	beq.n	8001fe4 <LCD_IO_ReadMultiData16to24+0xf0>
    {
      if(!--ntdr_follower)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <LCD_IO_ReadMultiData16to24+0x84>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	1c53      	adds	r3, r2, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1c59      	adds	r1, r3, #1
 8001f82:	6139      	str	r1, [r7, #16]
 8001f84:	4938      	ldr	r1, [pc, #224]	; (8002068 <LCD_IO_ReadMultiData16to24+0x174>)
 8001f86:	5c89      	ldrb	r1, [r1, r2]
 8001f88:	2208      	movs	r2, #8
 8001f8a:	18ba      	adds	r2, r7, r2
 8001f8c:	54d1      	strb	r1, [r2, r3]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2bff      	cmp	r3, #255	; 0xff
 8001f92:	d901      	bls.n	8001f98 <LCD_IO_ReadMultiData16to24+0xa4>
        dmadata_ri = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d122      	bne.n	8001fe4 <LCD_IO_ReadMultiData16to24+0xf0>
      {
        rgb888cnt = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
        Size--;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8001fa8:	2008      	movs	r0, #8
 8001faa:	183b      	adds	r3, r7, r0
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	0adb      	lsrs	r3, r3, #11
 8001fb4:	02db      	lsls	r3, r3, #11
 8001fb6:	b21a      	sxth	r2, r3
 8001fb8:	183b      	adds	r3, r7, r0
 8001fba:	785b      	ldrb	r3, [r3, #1]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	b219      	sxth	r1, r3
 8001fc0:	23fc      	movs	r3, #252	; 0xfc
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	183b      	adds	r3, r7, r0
 8001fce:	789b      	ldrb	r3, [r3, #2]
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b219      	sxth	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	1c9a      	adds	r2, r3, #2
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	b28a      	uxth	r2, r1
 8001fe2:	801a      	strh	r2, [r3, #0]
  while(Size)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1b8      	bne.n	8001f5c <LCD_IO_ReadMultiData16to24+0x68>
      }
    }
  }
  SPIX->CR2 &= ~SPI_CR2_RXDMAEN;
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <LCD_IO_ReadMultiData16to24+0x17c>)
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <LCD_IO_ReadMultiData16to24+0x17c>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
  while(SPIX->SR & SPI_SR_RXNE)
 8001ff6:	e004      	b.n	8002002 <LCD_IO_ReadMultiData16to24+0x10e>
    d8 = *(uint8_t *)&SPIX->DR;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <LCD_IO_ReadMultiData16to24+0x178>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	230b      	movs	r3, #11
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	701a      	strb	r2, [r3, #0]
  while(SPIX->SR & SPI_SR_RXNE)
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <LCD_IO_ReadMultiData16to24+0x17c>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2201      	movs	r2, #1
 8002008:	4013      	ands	r3, r2
 800200a:	d1f5      	bne.n	8001ff8 <LCD_IO_ReadMultiData16to24+0x104>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <LCD_IO_ReadMultiData16to24+0x17c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a18      	ldr	r2, [pc, #96]	; (8002074 <LCD_IO_ReadMultiData16to24+0x180>)
 8002012:	401a      	ands	r2, r3
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <LCD_IO_ReadMultiData16to24+0x17c>)
 8002016:	4918      	ldr	r1, [pc, #96]	; (8002078 <LCD_IO_ReadMultiData16to24+0x184>)
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 800201c:	2001      	movs	r0, #1
 800201e:	f000 f82f 	bl	8002080 <LCD_IO_Delay>
  while(SPIX->SR & SPI_SR_RXNE)
 8002022:	e004      	b.n	800202e <LCD_IO_ReadMultiData16to24+0x13a>
    d8 = *(uint8_t *)&SPIX->DR;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <LCD_IO_ReadMultiData16to24+0x178>)
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	230b      	movs	r3, #11
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	701a      	strb	r2, [r3, #0]
  while(SPIX->SR & SPI_SR_RXNE)
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <LCD_IO_ReadMultiData16to24+0x17c>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d1f5      	bne.n	8002024 <LCD_IO_ReadMultiData16to24+0x130>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <LCD_IO_ReadMultiData16to24+0x170>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2201      	movs	r2, #1
 8002046:	4013      	ands	r3, r2
 8002048:	d1fa      	bne.n	8002040 <LCD_IO_ReadMultiData16to24+0x14c>
  LCD_CS_OFF;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <LCD_IO_ReadMultiData16to24+0x188>)
 800204c:	2280      	movs	r2, #128	; 0x80
 800204e:	0152      	lsls	r2, r2, #5
 8002050:	619a      	str	r2, [r3, #24]
  LcdDirWrite();
 8002052:	f7ff fc97 	bl	8001984 <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b006      	add	sp, #24
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40020000 	.word	0x40020000
 8002064:	40020044 	.word	0x40020044
 8002068:	20000190 	.word	0x20000190
 800206c:	4000380c 	.word	0x4000380c
 8002070:	40003800 	.word	0x40003800
 8002074:	ffffbfc7 	.word	0xffffbfc7
 8002078:	00004008 	.word	0x00004008
 800207c:	48000400 	.word	0x48000400

08002080 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  while(c--);
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1fa      	bne.n	800208a <LCD_IO_Delay+0xa>
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}

0800209e <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f000 fa8d 	bl	80025c8 <HAL_Delay>
}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b002      	add	sp, #8
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	0002      	movs	r2, r0
 80020c0:	1dfb      	adds	r3, r7, #7
 80020c2:	701a      	strb	r2, [r3, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <LCD_IO_Bl_OnOff+0x1e>
    #if LCD_BLON == 1
    GPIOX_SET(LCD_BL);
    #else
    GPIOX_CLR(LCD_BL);
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <LCD_IO_Bl_OnOff+0x2c>)
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	03d2      	lsls	r2, r2, #15
 80020d2:	619a      	str	r2, [r3, #24]
    GPIOX_CLR(LCD_BL);
    #else
    GPIOX_SET(LCD_BL);
    #endif
  #endif
}
 80020d4:	e002      	b.n	80020dc <LCD_IO_Bl_OnOff+0x24>
    GPIOX_SET(LCD_BL);
 80020d6:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <LCD_IO_Bl_OnOff+0x2c>)
 80020d8:	2240      	movs	r2, #64	; 0x40
 80020da:	619a      	str	r2, [r3, #24]
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	48000800 	.word	0x48000800

080020e8 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  /* #else LCD_SPI == 0 */

  /* GPIO, DMA Clocks */
  RCC->AHBENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80020ec:	4b58      	ldr	r3, [pc, #352]	; (8002250 <LCD_IO_Init+0x168>)
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	4b57      	ldr	r3, [pc, #348]	; (8002250 <LCD_IO_Init+0x168>)
 80020f2:	4958      	ldr	r1, [pc, #352]	; (8002254 <LCD_IO_Init+0x16c>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	615a      	str	r2, [r3, #20]
                 GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_MISO |
                 DMA1_CLOCK_TX | DMA1_CLOCK_RX;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODER(MODE_DIGITAL_INPUT, LCD_MISO);
 80020f8:	4b57      	ldr	r3, [pc, #348]	; (8002258 <LCD_IO_Init+0x170>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b56      	ldr	r3, [pc, #344]	; (8002258 <LCD_IO_Init+0x170>)
 80020fe:	4957      	ldr	r1, [pc, #348]	; (800225c <LCD_IO_Init+0x174>)
 8002100:	400a      	ands	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_BL);
 8002104:	4b56      	ldr	r3, [pc, #344]	; (8002260 <LCD_IO_Init+0x178>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a56      	ldr	r2, [pc, #344]	; (8002264 <LCD_IO_Init+0x17c>)
 800210a:	401a      	ands	r2, r3
 800210c:	4b54      	ldr	r3, [pc, #336]	; (8002260 <LCD_IO_Init+0x178>)
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0149      	lsls	r1, r1, #5
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
  LCD_IO_Bl_OnOff(1);
 8002116:	2001      	movs	r0, #1
 8002118:	f7ff ffce 	bl	80020b8 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 800211c:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <LCD_IO_Init+0x170>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a51      	ldr	r2, [pc, #324]	; (8002268 <LCD_IO_Init+0x180>)
 8002122:	401a      	ands	r2, r3
 8002124:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <LCD_IO_Init+0x170>)
 8002126:	2180      	movs	r1, #128	; 0x80
 8002128:	0349      	lsls	r1, r1, #13
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 800212e:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <LCD_IO_Init+0x170>)
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	4b49      	ldr	r3, [pc, #292]	; (8002258 <LCD_IO_Init+0x170>)
 8002134:	494c      	ldr	r1, [pc, #304]	; (8002268 <LCD_IO_Init+0x180>)
 8002136:	400a      	ands	r2, r1
 8002138:	609a      	str	r2, [r3, #8]
  LCD_RST_OFF;
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <LCD_IO_Init+0x170>)
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	00d2      	lsls	r2, r2, #3
 8002140:	619a      	str	r2, [r3, #24]
  #endif

  LCD_RS_DATA;
 8002142:	4b45      	ldr	r3, [pc, #276]	; (8002258 <LCD_IO_Init+0x170>)
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 800214a:	4b43      	ldr	r3, [pc, #268]	; (8002258 <LCD_IO_Init+0x170>)
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	0152      	lsls	r2, r2, #5
 8002150:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8002152:	4b41      	ldr	r3, [pc, #260]	; (8002258 <LCD_IO_Init+0x170>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a45      	ldr	r2, [pc, #276]	; (800226c <LCD_IO_Init+0x184>)
 8002158:	401a      	ands	r2, r3
 800215a:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <LCD_IO_Init+0x170>)
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	03c9      	lsls	r1, r1, #15
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8002164:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <LCD_IO_Init+0x170>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a41      	ldr	r2, [pc, #260]	; (8002270 <LCD_IO_Init+0x188>)
 800216a:	401a      	ands	r2, r3
 800216c:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <LCD_IO_Init+0x170>)
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	0449      	lsls	r1, r1, #17
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8002176:	4b38      	ldr	r3, [pc, #224]	; (8002258 <LCD_IO_Init+0x170>)
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <LCD_IO_Init+0x170>)
 800217c:	21c0      	movs	r1, #192	; 0xc0
 800217e:	0409      	lsls	r1, r1, #16
 8002180:	430a      	orrs	r2, r1
 8002182:	609a      	str	r2, [r3, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8002184:	4b34      	ldr	r3, [pc, #208]	; (8002258 <LCD_IO_Init+0x170>)
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	4b33      	ldr	r3, [pc, #204]	; (8002258 <LCD_IO_Init+0x170>)
 800218a:	21c0      	movs	r1, #192	; 0xc0
 800218c:	0489      	lsls	r1, r1, #18
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <LCD_IO_Init+0x170>)
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	4b30      	ldr	r3, [pc, #192]	; (8002258 <LCD_IO_Init+0x170>)
 8002198:	21c0      	movs	r1, #192	; 0xc0
 800219a:	0509      	lsls	r1, r1, #20
 800219c:	430a      	orrs	r2, r1
 800219e:	609a      	str	r2, [r3, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 80021a0:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <LCD_IO_Init+0x170>)
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <LCD_IO_Init+0x170>)
 80021a6:	21c0      	movs	r1, #192	; 0xc0
 80021a8:	0609      	lsls	r1, r1, #24
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
  GPIOX_SET(LCD_SCK);                   // SCK = 1
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <LCD_IO_Init+0x170>)
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	0192      	lsls	r2, r2, #6
 80021b4:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <LCD_IO_Init+0x168>)
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	4b25      	ldr	r3, [pc, #148]	; (8002250 <LCD_IO_Init+0x168>)
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	01c9      	lsls	r1, r1, #7
 80021c0:	430a      	orrs	r2, r1
 80021c2:	61da      	str	r2, [r3, #28]

  GPIOX_AFR(LCD_SPI_AFR, LCD_SCK);
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <LCD_IO_Init+0x170>)
 80021c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c8:	4b23      	ldr	r3, [pc, #140]	; (8002258 <LCD_IO_Init+0x170>)
 80021ca:	492a      	ldr	r1, [pc, #168]	; (8002274 <LCD_IO_Init+0x18c>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <LCD_IO_Init+0x170>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a28      	ldr	r2, [pc, #160]	; (8002278 <LCD_IO_Init+0x190>)
 80021d6:	401a      	ands	r2, r3
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <LCD_IO_Init+0x170>)
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	0509      	lsls	r1, r1, #20
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]
  GPIOX_AFR(LCD_SPI_AFR, LCD_MOSI);
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <LCD_IO_Init+0x170>)
 80021e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <LCD_IO_Init+0x170>)
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	0912      	lsrs	r2, r2, #4
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
  GPIOX_MODER(MODE_ALTER, LCD_MOSI);
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <LCD_IO_Init+0x170>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	089a      	lsrs	r2, r3, #2
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <LCD_IO_Init+0x170>)
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	0609      	lsls	r1, r1, #24
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else /* #if LCD_SPI_MODE == 1 */
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8002200:	4b1e      	ldr	r3, [pc, #120]	; (800227c <LCD_IO_Init+0x194>)
 8002202:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <LCD_IO_Init+0x198>)
 8002204:	601a      	str	r2, [r3, #0]
  #endif /* #else LCD_SPI_MODE == 1 */
  SPIX->CR2 = (7 << SPI_CR2_DS_Pos);
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <LCD_IO_Init+0x194>)
 8002208:	22e0      	movs	r2, #224	; 0xe0
 800220a:	00d2      	lsls	r2, r2, #3
 800220c:	605a      	str	r2, [r3, #4]
  SPIX->CR1 |= SPI_CR1_SPE;
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <LCD_IO_Init+0x194>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <LCD_IO_Init+0x194>)
 8002214:	2140      	movs	r1, #64	; 0x40
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]

  #endif /* #else LCD_SPI == 0 */

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 800221a:	200a      	movs	r0, #10
 800221c:	f7ff ff3f 	bl	800209e <LCD_Delay>
  LCD_RST_ON;
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <LCD_IO_Init+0x170>)
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	04d2      	lsls	r2, r2, #19
 8002226:	619a      	str	r2, [r3, #24]
  LCD_Delay(10);
 8002228:	200a      	movs	r0, #10
 800222a:	f7ff ff38 	bl	800209e <LCD_Delay>
  LCD_RST_OFF;
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <LCD_IO_Init+0x170>)
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	00d2      	lsls	r2, r2, #3
 8002234:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(10);
 8002236:	200a      	movs	r0, #10
 8002238:	f7ff ff31 	bl	800209e <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #ifdef LCD_DMA_TX_RX_IRQ_SHARED
  /* Shared interrupt handler */
  NVIC_SetPriority(LCD_DMA_TX_IRQ, LCD_DMA_IRQ_PR);
 800223c:	210f      	movs	r1, #15
 800223e:	200b      	movs	r0, #11
 8002240:	f7ff faf8 	bl	8001834 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LCD_DMA_TX_IRQ);
 8002244:	200b      	movs	r0, #11
 8002246:	f7ff fadb 	bl	8001800 <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  /* #if DMANUM(LCD_DMA_RX) > 0 */
} /* void LCD_IO_Init(void) */
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	000c0001 	.word	0x000c0001
 8002258:	48000400 	.word	0x48000400
 800225c:	cfffffff 	.word	0xcfffffff
 8002260:	48000800 	.word	0x48000800
 8002264:	ffffcfff 	.word	0xffffcfff
 8002268:	ffcfffff 	.word	0xffcfffff
 800226c:	ff3fffff 	.word	0xff3fffff
 8002270:	fcffffff 	.word	0xfcffffff
 8002274:	ff0fffff 	.word	0xff0fffff
 8002278:	f3ffffff 	.word	0xf3ffffff
 800227c:	40003800 	.word	0x40003800
 8002280:	0000030f 	.word	0x0000030f

08002284 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	0002      	movs	r2, r0
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 8002290:	f7ff fbca 	bl	8001a28 <WaitForDmaEnd>
  LcdSpiMode8();
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <LCD_IO_WriteCmd8+0x40>)
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <LCD_IO_WriteCmd8+0x40>)
 800229a:	490b      	ldr	r1, [pc, #44]	; (80022c8 <LCD_IO_WriteCmd8+0x44>)
 800229c:	400a      	ands	r2, r1
 800229e:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <LCD_IO_WriteCmd8+0x48>)
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	0552      	lsls	r2, r2, #21
 80022a6:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 80022a8:	1dfb      	adds	r3, r7, #7
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff fb95 	bl	80019dc <LcdCmdWrite8>
  LCD_CS_OFF;
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <LCD_IO_WriteCmd8+0x48>)
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	0152      	lsls	r2, r2, #5
 80022b8:	619a      	str	r2, [r3, #24]
}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	46bd      	mov	sp, r7
 80022be:	b002      	add	sp, #8
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	40003800 	.word	0x40003800
 80022c8:	fffff7ff 	.word	0xfffff7ff
 80022cc:	48000400 	.word	0x48000400

080022d0 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	0002      	movs	r2, r0
 80022d8:	1dfb      	adds	r3, r7, #7
 80022da:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 80022dc:	f7ff fba4 	bl	8001a28 <WaitForDmaEnd>
  LcdSpiMode8();
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <LCD_IO_WriteData8+0x40>)
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <LCD_IO_WriteData8+0x40>)
 80022e6:	490b      	ldr	r1, [pc, #44]	; (8002314 <LCD_IO_WriteData8+0x44>)
 80022e8:	400a      	ands	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <LCD_IO_WriteData8+0x48>)
 80022ee:	2280      	movs	r2, #128	; 0x80
 80022f0:	0552      	lsls	r2, r2, #21
 80022f2:	619a      	str	r2, [r3, #24]
  LcdWrite8(Data);
 80022f4:	1dfb      	adds	r3, r7, #7
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7ff fb53 	bl	80019a4 <LcdWrite8>
  LCD_CS_OFF;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <LCD_IO_WriteData8+0x48>)
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	0152      	lsls	r2, r2, #5
 8002304:	619a      	str	r2, [r3, #24]
}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b002      	add	sp, #8
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40003800 	.word	0x40003800
 8002314:	fffff7ff 	.word	0xfffff7ff
 8002318:	48000400 	.word	0x48000400

0800231c <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	603a      	str	r2, [r7, #0]
 8002324:	1dfb      	adds	r3, r7, #7
 8002326:	1c02      	adds	r2, r0, #0
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	1c0a      	adds	r2, r1, #0
 800232e:	801a      	strh	r2, [r3, #0]
  WaitForDmaEnd();
 8002330:	f7ff fb7a 	bl	8001a28 <WaitForDmaEnd>
  LcdSpiMode8();
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <LCD_IO_WriteCmd8DataFill16+0x58>)
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <LCD_IO_WriteCmd8DataFill16+0x58>)
 800233a:	490f      	ldr	r1, [pc, #60]	; (8002378 <LCD_IO_WriteCmd8DataFill16+0x5c>)
 800233c:	400a      	ands	r2, r1
 800233e:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <LCD_IO_WriteCmd8DataFill16+0x60>)
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	0552      	lsls	r2, r2, #21
 8002346:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8002348:	1dfb      	adds	r3, r7, #7
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff fb45 	bl	80019dc <LcdCmdWrite8>
  LcdSpiMode16();
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <LCD_IO_WriteCmd8DataFill16+0x58>)
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <LCD_IO_WriteCmd8DataFill16+0x58>)
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	0109      	lsls	r1, r1, #4
 800235c:	430a      	orrs	r2, r1
 800235e:	605a      	str	r2, [r3, #4]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2200      	movs	r2, #0
 8002366:	0018      	movs	r0, r3
 8002368:	f7ff fc48 	bl	8001bfc <LCD_IO_WriteMultiData16>
}
 800236c:	46c0      	nop			; (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40003800 	.word	0x40003800
 8002378:	fffff7ff 	.word	0xfffff7ff
 800237c:	48000400 	.word	0x48000400

08002380 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	240f      	movs	r4, #15
 800238c:	193b      	adds	r3, r7, r4
 800238e:	1c02      	adds	r2, r0, #0
 8002390:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 8002392:	f7ff fb49 	bl	8001a28 <WaitForDmaEnd>
  LcdSpiMode8();
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <LCD_IO_WriteCmd8MultipleData8+0x48>)
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <LCD_IO_WriteCmd8MultipleData8+0x48>)
 800239c:	490b      	ldr	r1, [pc, #44]	; (80023cc <LCD_IO_WriteCmd8MultipleData8+0x4c>)
 800239e:	400a      	ands	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <LCD_IO_WriteCmd8MultipleData8+0x50>)
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	0552      	lsls	r2, r2, #21
 80023a8:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 80023aa:	193b      	adds	r3, r7, r4
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7ff fb14 	bl	80019dc <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2201      	movs	r2, #1
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7ff fbc8 	bl	8001b50 <LCD_IO_WriteMultiData8>
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b005      	add	sp, #20
 80023c6:	bd90      	pop	{r4, r7, pc}
 80023c8:	40003800 	.word	0x40003800
 80023cc:	fffff7ff 	.word	0xfffff7ff
 80023d0:	48000400 	.word	0x48000400

080023d4 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	240f      	movs	r4, #15
 80023e0:	193b      	adds	r3, r7, r4
 80023e2:	1c02      	adds	r2, r0, #0
 80023e4:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 80023e6:	f7ff fb1f 	bl	8001a28 <WaitForDmaEnd>
  LcdSpiMode8();
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <LCD_IO_WriteCmd8MultipleData16+0x58>)
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <LCD_IO_WriteCmd8MultipleData16+0x58>)
 80023f0:	490f      	ldr	r1, [pc, #60]	; (8002430 <LCD_IO_WriteCmd8MultipleData16+0x5c>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 80023f6:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <LCD_IO_WriteCmd8MultipleData16+0x60>)
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	0552      	lsls	r2, r2, #21
 80023fc:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff faea 	bl	80019dc <LcdCmdWrite8>
  LcdSpiMode16();
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <LCD_IO_WriteCmd8MultipleData16+0x58>)
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <LCD_IO_WriteCmd8MultipleData16+0x58>)
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	0109      	lsls	r1, r1, #4
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2201      	movs	r2, #1
 800241c:	0018      	movs	r0, r3
 800241e:	f7ff fbed 	bl	8001bfc <LCD_IO_WriteMultiData16>
}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	b005      	add	sp, #20
 8002428:	bd90      	pop	{r4, r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	40003800 	.word	0x40003800
 8002430:	fffff7ff 	.word	0xfffff7ff
 8002434:	48000400 	.word	0x48000400

08002438 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	240f      	movs	r4, #15
 8002446:	193b      	adds	r3, r7, r4
 8002448:	1c02      	adds	r2, r0, #0
 800244a:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 800244c:	f7ff faec 	bl	8001a28 <WaitForDmaEnd>
  LcdSpiMode8();
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <LCD_IO_ReadCmd8MultipleData8+0x58>)
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <LCD_IO_ReadCmd8MultipleData8+0x58>)
 8002456:	490f      	ldr	r1, [pc, #60]	; (8002494 <LCD_IO_ReadCmd8MultipleData8+0x5c>)
 8002458:	400a      	ands	r2, r1
 800245a:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <LCD_IO_ReadCmd8MultipleData8+0x60>)
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	0552      	lsls	r2, r2, #21
 8002462:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8002464:	193b      	adds	r3, r7, r4
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	0018      	movs	r0, r3
 800246a:	f7ff fab7 	bl	80019dc <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	0018      	movs	r0, r3
 8002478:	f7ff fa4a 	bl	8001910 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	0011      	movs	r1, r2
 8002482:	0018      	movs	r0, r3
 8002484:	f7ff fcf2 	bl	8001e6c <LCD_IO_ReadMultiData8>
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b005      	add	sp, #20
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	40003800 	.word	0x40003800
 8002494:	fffff7ff 	.word	0xfffff7ff
 8002498:	48000400 	.word	0x48000400

0800249c <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	240f      	movs	r4, #15
 80024aa:	193b      	adds	r3, r7, r4
 80024ac:	1c02      	adds	r2, r0, #0
 80024ae:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 80024b0:	f7ff faba 	bl	8001a28 <WaitForDmaEnd>
  LcdSpiMode8();
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <LCD_IO_ReadCmd8MultipleData24to16+0x58>)
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <LCD_IO_ReadCmd8MultipleData24to16+0x58>)
 80024ba:	490f      	ldr	r1, [pc, #60]	; (80024f8 <LCD_IO_ReadCmd8MultipleData24to16+0x5c>)
 80024bc:	400a      	ands	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <LCD_IO_ReadCmd8MultipleData24to16+0x60>)
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	0552      	lsls	r2, r2, #21
 80024c6:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 80024c8:	193b      	adds	r3, r7, r4
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff fa85 	bl	80019dc <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	0018      	movs	r0, r3
 80024dc:	f7ff fa18 	bl	8001910 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	0011      	movs	r1, r2
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7ff fd04 	bl	8001ef4 <LCD_IO_ReadMultiData16to24>
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b005      	add	sp, #20
 80024f2:	bd90      	pop	{r4, r7, pc}
 80024f4:	40003800 	.word	0x40003800
 80024f8:	fffff7ff 	.word	0xfffff7ff
 80024fc:	48000400 	.word	0x48000400

08002500 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <HAL_Init+0x24>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_Init+0x24>)
 800250a:	2110      	movs	r1, #16
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002510:	2000      	movs	r0, #0
 8002512:	f000 f809 	bl	8002528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002516:	f7fe f973 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	40022000 	.word	0x40022000

08002528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_InitTick+0x5c>)
 8002532:	681c      	ldr	r4, [r3, #0]
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_InitTick+0x60>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	0019      	movs	r1, r3
 800253a:	23fa      	movs	r3, #250	; 0xfa
 800253c:	0098      	lsls	r0, r3, #2
 800253e:	f7fd fde3 	bl	8000108 <__udivsi3>
 8002542:	0003      	movs	r3, r0
 8002544:	0019      	movs	r1, r3
 8002546:	0020      	movs	r0, r4
 8002548:	f7fd fdde 	bl	8000108 <__udivsi3>
 800254c:	0003      	movs	r3, r0
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f92f 	bl	80027b2 <HAL_SYSTICK_Config>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e00f      	b.n	800257c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d80b      	bhi.n	800257a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	2301      	movs	r3, #1
 8002566:	425b      	negs	r3, r3
 8002568:	2200      	movs	r2, #0
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f8fc 	bl	8002768 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_InitTick+0x64>)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b003      	add	sp, #12
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	20000008 	.word	0x20000008
 8002588:	20000058 	.word	0x20000058
 800258c:	20000054 	.word	0x20000054

08002590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_IncTick+0x1c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	001a      	movs	r2, r3
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_IncTick+0x20>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	18d2      	adds	r2, r2, r3
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_IncTick+0x20>)
 80025a2:	601a      	str	r2, [r3, #0]
}
 80025a4:	46c0      	nop			; (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	20000058 	.word	0x20000058
 80025b0:	20000290 	.word	0x20000290

080025b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b02      	ldr	r3, [pc, #8]	; (80025c4 <HAL_GetTick+0x10>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	0018      	movs	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	20000290 	.word	0x20000290

080025c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff fff0 	bl	80025b4 <HAL_GetTick>
 80025d4:	0003      	movs	r3, r0
 80025d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3301      	adds	r3, #1
 80025e0:	d005      	beq.n	80025ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_Delay+0x44>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	001a      	movs	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	189b      	adds	r3, r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	f7ff ffe0 	bl	80025b4 <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d8f7      	bhi.n	80025f0 <HAL_Delay+0x28>
  {
  }
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	20000058 	.word	0x20000058

08002610 <__NVIC_EnableIRQ>:
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	0002      	movs	r2, r0
 8002618:	1dfb      	adds	r3, r7, #7
 800261a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800261c:	1dfb      	adds	r3, r7, #7
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b7f      	cmp	r3, #127	; 0x7f
 8002622:	d809      	bhi.n	8002638 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002624:	1dfb      	adds	r3, r7, #7
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	001a      	movs	r2, r3
 800262a:	231f      	movs	r3, #31
 800262c:	401a      	ands	r2, r3
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_EnableIRQ+0x30>)
 8002630:	2101      	movs	r1, #1
 8002632:	4091      	lsls	r1, r2
 8002634:	000a      	movs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b002      	add	sp, #8
 800263e:	bd80      	pop	{r7, pc}
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	0002      	movs	r2, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b7f      	cmp	r3, #127	; 0x7f
 8002658:	d828      	bhi.n	80026ac <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800265a:	4a2f      	ldr	r2, [pc, #188]	; (8002718 <__NVIC_SetPriority+0xd4>)
 800265c:	1dfb      	adds	r3, r7, #7
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	b25b      	sxtb	r3, r3
 8002662:	089b      	lsrs	r3, r3, #2
 8002664:	33c0      	adds	r3, #192	; 0xc0
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	589b      	ldr	r3, [r3, r2]
 800266a:	1dfa      	adds	r2, r7, #7
 800266c:	7812      	ldrb	r2, [r2, #0]
 800266e:	0011      	movs	r1, r2
 8002670:	2203      	movs	r2, #3
 8002672:	400a      	ands	r2, r1
 8002674:	00d2      	lsls	r2, r2, #3
 8002676:	21ff      	movs	r1, #255	; 0xff
 8002678:	4091      	lsls	r1, r2
 800267a:	000a      	movs	r2, r1
 800267c:	43d2      	mvns	r2, r2
 800267e:	401a      	ands	r2, r3
 8002680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	22ff      	movs	r2, #255	; 0xff
 8002688:	401a      	ands	r2, r3
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	0018      	movs	r0, r3
 8002690:	2303      	movs	r3, #3
 8002692:	4003      	ands	r3, r0
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002698:	481f      	ldr	r0, [pc, #124]	; (8002718 <__NVIC_SetPriority+0xd4>)
 800269a:	1dfb      	adds	r3, r7, #7
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	430a      	orrs	r2, r1
 80026a4:	33c0      	adds	r3, #192	; 0xc0
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	501a      	str	r2, [r3, r0]
}
 80026aa:	e031      	b.n	8002710 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026ac:	4a1b      	ldr	r2, [pc, #108]	; (800271c <__NVIC_SetPriority+0xd8>)
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	0019      	movs	r1, r3
 80026b4:	230f      	movs	r3, #15
 80026b6:	400b      	ands	r3, r1
 80026b8:	3b08      	subs	r3, #8
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3306      	adds	r3, #6
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	18d3      	adds	r3, r2, r3
 80026c2:	3304      	adds	r3, #4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	1dfa      	adds	r2, r7, #7
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	0011      	movs	r1, r2
 80026cc:	2203      	movs	r2, #3
 80026ce:	400a      	ands	r2, r1
 80026d0:	00d2      	lsls	r2, r2, #3
 80026d2:	21ff      	movs	r1, #255	; 0xff
 80026d4:	4091      	lsls	r1, r2
 80026d6:	000a      	movs	r2, r1
 80026d8:	43d2      	mvns	r2, r2
 80026da:	401a      	ands	r2, r3
 80026dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	22ff      	movs	r2, #255	; 0xff
 80026e4:	401a      	ands	r2, r3
 80026e6:	1dfb      	adds	r3, r7, #7
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	0018      	movs	r0, r3
 80026ec:	2303      	movs	r3, #3
 80026ee:	4003      	ands	r3, r0
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026f4:	4809      	ldr	r0, [pc, #36]	; (800271c <__NVIC_SetPriority+0xd8>)
 80026f6:	1dfb      	adds	r3, r7, #7
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	001c      	movs	r4, r3
 80026fc:	230f      	movs	r3, #15
 80026fe:	4023      	ands	r3, r4
 8002700:	3b08      	subs	r3, #8
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	430a      	orrs	r2, r1
 8002706:	3306      	adds	r3, #6
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	18c3      	adds	r3, r0, r3
 800270c:	3304      	adds	r3, #4
 800270e:	601a      	str	r2, [r3, #0]
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b003      	add	sp, #12
 8002716:	bd90      	pop	{r4, r7, pc}
 8002718:	e000e100 	.word	0xe000e100
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1e5a      	subs	r2, r3, #1
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	045b      	lsls	r3, r3, #17
 8002730:	429a      	cmp	r2, r3
 8002732:	d301      	bcc.n	8002738 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002734:	2301      	movs	r3, #1
 8002736:	e010      	b.n	800275a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <SysTick_Config+0x44>)
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	3a01      	subs	r2, #1
 800273e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002740:	2301      	movs	r3, #1
 8002742:	425b      	negs	r3, r3
 8002744:	2103      	movs	r1, #3
 8002746:	0018      	movs	r0, r3
 8002748:	f7ff ff7c 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <SysTick_Config+0x44>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <SysTick_Config+0x44>)
 8002754:	2207      	movs	r2, #7
 8002756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002758:	2300      	movs	r3, #0
}
 800275a:	0018      	movs	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	b002      	add	sp, #8
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	e000e010 	.word	0xe000e010

08002768 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	210f      	movs	r1, #15
 8002774:	187b      	adds	r3, r7, r1
 8002776:	1c02      	adds	r2, r0, #0
 8002778:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	187b      	adds	r3, r7, r1
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b25b      	sxtb	r3, r3
 8002782:	0011      	movs	r1, r2
 8002784:	0018      	movs	r0, r3
 8002786:	f7ff ff5d 	bl	8002644 <__NVIC_SetPriority>
}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	b004      	add	sp, #16
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	0002      	movs	r2, r0
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff ff33 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b002      	add	sp, #8
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff ffaf 	bl	8002720 <SysTick_Config>
 80027c2:	0003      	movs	r3, r0
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b002      	add	sp, #8
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e036      	b.n	8002850 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2221      	movs	r2, #33	; 0x21
 80027e6:	2102      	movs	r1, #2
 80027e8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_DMA_Init+0x8c>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f000 f812 	bl	800285c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2221      	movs	r2, #33	; 0x21
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	2100      	movs	r1, #0
 800284c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}  
 8002850:	0018      	movs	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	b004      	add	sp, #16
 8002856:	bd80      	pop	{r7, pc}
 8002858:	ffffc00f 	.word	0xffffc00f

0800285c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a08      	ldr	r2, [pc, #32]	; (800288c <DMA_CalcBaseAndBitshift+0x30>)
 800286a:	4694      	mov	ip, r2
 800286c:	4463      	add	r3, ip
 800286e:	2114      	movs	r1, #20
 8002870:	0018      	movs	r0, r3
 8002872:	f7fd fc49 	bl	8000108 <__udivsi3>
 8002876:	0003      	movs	r3, r0
 8002878:	009a      	lsls	r2, r3, #2
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a03      	ldr	r2, [pc, #12]	; (8002890 <DMA_CalcBaseAndBitshift+0x34>)
 8002882:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b002      	add	sp, #8
 800288a:	bd80      	pop	{r7, pc}
 800288c:	bffdfff8 	.word	0xbffdfff8
 8002890:	40020000 	.word	0x40020000

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a2:	e14f      	b.n	8002b44 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4091      	lsls	r1, r2
 80028ae:	000a      	movs	r2, r1
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d100      	bne.n	80028bc <HAL_GPIO_Init+0x28>
 80028ba:	e140      	b.n	8002b3e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2203      	movs	r2, #3
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d005      	beq.n	80028d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2203      	movs	r2, #3
 80028ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d130      	bne.n	8002936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	409a      	lsls	r2, r3
 80028e2:	0013      	movs	r3, r2
 80028e4:	43da      	mvns	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	0013      	movs	r3, r2
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800290a:	2201      	movs	r2, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
 8002910:	0013      	movs	r3, r2
 8002912:	43da      	mvns	r2, r3
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	2201      	movs	r2, #1
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
 8002928:	0013      	movs	r3, r2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2203      	movs	r2, #3
 800293c:	4013      	ands	r3, r2
 800293e:	2b03      	cmp	r3, #3
 8002940:	d017      	beq.n	8002972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	2203      	movs	r2, #3
 800294e:	409a      	lsls	r2, r3
 8002950:	0013      	movs	r3, r2
 8002952:	43da      	mvns	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	409a      	lsls	r2, r3
 8002964:	0013      	movs	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2203      	movs	r2, #3
 8002978:	4013      	ands	r3, r2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d123      	bne.n	80029c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	08da      	lsrs	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3208      	adds	r2, #8
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	58d3      	ldr	r3, [r2, r3]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2207      	movs	r2, #7
 8002990:	4013      	ands	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	220f      	movs	r2, #15
 8002996:	409a      	lsls	r2, r3
 8002998:	0013      	movs	r3, r2
 800299a:	43da      	mvns	r2, r3
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2107      	movs	r1, #7
 80029aa:	400b      	ands	r3, r1
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	409a      	lsls	r2, r3
 80029b0:	0013      	movs	r3, r2
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	08da      	lsrs	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3208      	adds	r2, #8
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	6939      	ldr	r1, [r7, #16]
 80029c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2203      	movs	r2, #3
 80029d2:	409a      	lsls	r2, r3
 80029d4:	0013      	movs	r3, r2
 80029d6:	43da      	mvns	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2203      	movs	r2, #3
 80029e4:	401a      	ands	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	409a      	lsls	r2, r3
 80029ec:	0013      	movs	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	23c0      	movs	r3, #192	; 0xc0
 8002a00:	029b      	lsls	r3, r3, #10
 8002a02:	4013      	ands	r3, r2
 8002a04:	d100      	bne.n	8002a08 <HAL_GPIO_Init+0x174>
 8002a06:	e09a      	b.n	8002b3e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a08:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <HAL_GPIO_Init+0x2c8>)
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_GPIO_Init+0x2c8>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	430a      	orrs	r2, r1
 8002a12:	619a      	str	r2, [r3, #24]
 8002a14:	4b51      	ldr	r3, [pc, #324]	; (8002b5c <HAL_GPIO_Init+0x2c8>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a20:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_GPIO_Init+0x2cc>)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	589b      	ldr	r3, [r3, r2]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2203      	movs	r2, #3
 8002a32:	4013      	ands	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	220f      	movs	r2, #15
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	2390      	movs	r3, #144	; 0x90
 8002a48:	05db      	lsls	r3, r3, #23
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_Init+0x1e2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a44      	ldr	r2, [pc, #272]	; (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00d      	beq.n	8002a72 <HAL_GPIO_Init+0x1de>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a43      	ldr	r2, [pc, #268]	; (8002b68 <HAL_GPIO_Init+0x2d4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_GPIO_Init+0x1da>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a42      	ldr	r2, [pc, #264]	; (8002b6c <HAL_GPIO_Init+0x2d8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_GPIO_Init+0x1d6>
 8002a66:	2303      	movs	r3, #3
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x1e4>
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	e004      	b.n	8002a78 <HAL_GPIO_Init+0x1e4>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e002      	b.n	8002a78 <HAL_GPIO_Init+0x1e4>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x1e4>
 8002a76:	2300      	movs	r3, #0
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	0092      	lsls	r2, r2, #2
 8002a80:	4093      	lsls	r3, r2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a88:	4935      	ldr	r1, [pc, #212]	; (8002b60 <HAL_GPIO_Init+0x2cc>)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a96:	4b36      	ldr	r3, [pc, #216]	; (8002b70 <HAL_GPIO_Init+0x2dc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	025b      	lsls	r3, r3, #9
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_GPIO_Init+0x2dc>)
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <HAL_GPIO_Init+0x2dc>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	029b      	lsls	r3, r3, #10
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <HAL_GPIO_Init+0x2dc>)
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_GPIO_Init+0x2dc>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43da      	mvns	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	035b      	lsls	r3, r3, #13
 8002b02:	4013      	ands	r3, r2
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_GPIO_Init+0x2dc>)
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <HAL_GPIO_Init+0x2dc>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	039b      	lsls	r3, r3, #14
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <HAL_GPIO_Init+0x2dc>)
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3301      	adds	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	40da      	lsrs	r2, r3
 8002b4c:	1e13      	subs	r3, r2, #0
 8002b4e:	d000      	beq.n	8002b52 <HAL_GPIO_Init+0x2be>
 8002b50:	e6a8      	b.n	80028a4 <HAL_GPIO_Init+0x10>
  } 
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b006      	add	sp, #24
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40010000 	.word	0x40010000
 8002b64:	48000400 	.word	0x48000400
 8002b68:	48000800 	.word	0x48000800
 8002b6c:	48000c00 	.word	0x48000c00
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	0008      	movs	r0, r1
 8002b7e:	0011      	movs	r1, r2
 8002b80:	1cbb      	adds	r3, r7, #2
 8002b82:	1c02      	adds	r2, r0, #0
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	1c7b      	adds	r3, r7, #1
 8002b88:	1c0a      	adds	r2, r1, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b8c:	1c7b      	adds	r3, r7, #1
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b94:	1cbb      	adds	r3, r7, #2
 8002b96:	881a      	ldrh	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b9c:	e003      	b.n	8002ba6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b9e:	1cbb      	adds	r3, r7, #2
 8002ba0:	881a      	ldrh	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b002      	add	sp, #8
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e301      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d100      	bne.n	8002bce <HAL_RCC_OscConfig+0x1e>
 8002bcc:	e08d      	b.n	8002cea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bce:	4bc3      	ldr	r3, [pc, #780]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d00e      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bda:	4bc0      	ldr	r3, [pc, #768]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	220c      	movs	r2, #12
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d116      	bne.n	8002c14 <HAL_RCC_OscConfig+0x64>
 8002be6:	4bbd      	ldr	r3, [pc, #756]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	025b      	lsls	r3, r3, #9
 8002bee:	401a      	ands	r2, r3
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	025b      	lsls	r3, r3, #9
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10d      	bne.n	8002c14 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	4bb8      	ldr	r3, [pc, #736]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	029b      	lsls	r3, r3, #10
 8002c00:	4013      	ands	r3, r2
 8002c02:	d100      	bne.n	8002c06 <HAL_RCC_OscConfig+0x56>
 8002c04:	e070      	b.n	8002ce8 <HAL_RCC_OscConfig+0x138>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d000      	beq.n	8002c10 <HAL_RCC_OscConfig+0x60>
 8002c0e:	e06b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e2d8      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d107      	bne.n	8002c2c <HAL_RCC_OscConfig+0x7c>
 8002c1c:	4baf      	ldr	r3, [pc, #700]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4bae      	ldr	r3, [pc, #696]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	0249      	lsls	r1, r1, #9
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e02f      	b.n	8002c8c <HAL_RCC_OscConfig+0xdc>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10c      	bne.n	8002c4e <HAL_RCC_OscConfig+0x9e>
 8002c34:	4ba9      	ldr	r3, [pc, #676]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4ba8      	ldr	r3, [pc, #672]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c3a:	49a9      	ldr	r1, [pc, #676]	; (8002ee0 <HAL_RCC_OscConfig+0x330>)
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	4ba6      	ldr	r3, [pc, #664]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4ba5      	ldr	r3, [pc, #660]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c46:	49a7      	ldr	r1, [pc, #668]	; (8002ee4 <HAL_RCC_OscConfig+0x334>)
 8002c48:	400a      	ands	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	e01e      	b.n	8002c8c <HAL_RCC_OscConfig+0xdc>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d10e      	bne.n	8002c74 <HAL_RCC_OscConfig+0xc4>
 8002c56:	4ba1      	ldr	r3, [pc, #644]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4ba0      	ldr	r3, [pc, #640]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	02c9      	lsls	r1, r1, #11
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	4b9d      	ldr	r3, [pc, #628]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b9c      	ldr	r3, [pc, #624]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	0249      	lsls	r1, r1, #9
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0xdc>
 8002c74:	4b99      	ldr	r3, [pc, #612]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b98      	ldr	r3, [pc, #608]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c7a:	4999      	ldr	r1, [pc, #612]	; (8002ee0 <HAL_RCC_OscConfig+0x330>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	4b96      	ldr	r3, [pc, #600]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b95      	ldr	r3, [pc, #596]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002c86:	4997      	ldr	r1, [pc, #604]	; (8002ee4 <HAL_RCC_OscConfig+0x334>)
 8002c88:	400a      	ands	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d014      	beq.n	8002cbe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7ff fc8e 	bl	80025b4 <HAL_GetTick>
 8002c98:	0003      	movs	r3, r0
 8002c9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c9e:	f7ff fc89 	bl	80025b4 <HAL_GetTick>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	; 0x64
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e28a      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb0:	4b8a      	ldr	r3, [pc, #552]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	029b      	lsls	r3, r3, #10
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0xee>
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7ff fc79 	bl	80025b4 <HAL_GetTick>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7ff fc74 	bl	80025b4 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e275      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b80      	ldr	r3, [pc, #512]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x118>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x146>
 8002cf4:	e069      	b.n	8002dca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cf6:	4b79      	ldr	r3, [pc, #484]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	220c      	movs	r2, #12
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d00b      	beq.n	8002d18 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d00:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	220c      	movs	r2, #12
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d11c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x196>
 8002d0c:	4b73      	ldr	r3, [pc, #460]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	025b      	lsls	r3, r3, #9
 8002d14:	4013      	ands	r3, r2
 8002d16:	d116      	bne.n	8002d46 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d18:	4b70      	ldr	r3, [pc, #448]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d005      	beq.n	8002d2e <HAL_RCC_OscConfig+0x17e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e24b      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2e:	4b6b      	ldr	r3, [pc, #428]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	22f8      	movs	r2, #248	; 0xf8
 8002d34:	4393      	bics	r3, r2
 8002d36:	0019      	movs	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	00da      	lsls	r2, r3, #3
 8002d3e:	4b67      	ldr	r3, [pc, #412]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d44:	e041      	b.n	8002dca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d024      	beq.n	8002d98 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4e:	4b63      	ldr	r3, [pc, #396]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b62      	ldr	r3, [pc, #392]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d54:	2101      	movs	r1, #1
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7ff fc2b 	bl	80025b4 <HAL_GetTick>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d64:	f7ff fc26 	bl	80025b4 <HAL_GetTick>
 8002d68:	0002      	movs	r2, r0
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e227      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d0f1      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b56      	ldr	r3, [pc, #344]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	22f8      	movs	r2, #248	; 0xf8
 8002d86:	4393      	bics	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00da      	lsls	r2, r3, #3
 8002d90:	4b52      	ldr	r3, [pc, #328]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e018      	b.n	8002dca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d98:	4b50      	ldr	r3, [pc, #320]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	438a      	bics	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7ff fc06 	bl	80025b4 <HAL_GetTick>
 8002da8:	0003      	movs	r3, r0
 8002daa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dae:	f7ff fc01 	bl	80025b4 <HAL_GetTick>
 8002db2:	0002      	movs	r2, r0
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e202      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc0:	4b46      	ldr	r3, [pc, #280]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d1f1      	bne.n	8002dae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2208      	movs	r2, #8
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d036      	beq.n	8002e42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d019      	beq.n	8002e10 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ddc:	4b3f      	ldr	r3, [pc, #252]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de0:	4b3e      	ldr	r3, [pc, #248]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002de2:	2101      	movs	r1, #1
 8002de4:	430a      	orrs	r2, r1
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7ff fbe4 	bl	80025b4 <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df2:	f7ff fbdf 	bl	80025b4 <HAL_GetTick>
 8002df6:	0002      	movs	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1e0      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e04:	4b35      	ldr	r3, [pc, #212]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	2202      	movs	r2, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d0f1      	beq.n	8002df2 <HAL_RCC_OscConfig+0x242>
 8002e0e:	e018      	b.n	8002e42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e10:	4b32      	ldr	r3, [pc, #200]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e14:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	438a      	bics	r2, r1
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1c:	f7ff fbca 	bl	80025b4 <HAL_GetTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e26:	f7ff fbc5 	bl	80025b4 <HAL_GetTick>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1c6      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	4b28      	ldr	r3, [pc, #160]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d1f1      	bne.n	8002e26 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2204      	movs	r2, #4
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <HAL_RCC_OscConfig+0x29e>
 8002e4c:	e0b4      	b.n	8002fb8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	201f      	movs	r0, #31
 8002e50:	183b      	adds	r3, r7, r0
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	055b      	lsls	r3, r3, #21
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d110      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	0549      	lsls	r1, r1, #21
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	055b      	lsls	r3, r3, #21
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e7e:	183b      	adds	r3, r7, r0
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <HAL_RCC_OscConfig+0x338>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d11a      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e90:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x338>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <HAL_RCC_OscConfig+0x338>)
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	0049      	lsls	r1, r1, #1
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9e:	f7ff fb89 	bl	80025b4 <HAL_GetTick>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7ff fb84 	bl	80025b4 <HAL_GetTick>
 8002eac:	0002      	movs	r2, r0
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e185      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x338>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d10e      	bne.n	8002eec <HAL_RCC_OscConfig+0x33c>
 8002ece:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002ed0:	6a1a      	ldr	r2, [r3, #32]
 8002ed2:	4b02      	ldr	r3, [pc, #8]	; (8002edc <HAL_RCC_OscConfig+0x32c>)
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	621a      	str	r2, [r3, #32]
 8002eda:	e035      	b.n	8002f48 <HAL_RCC_OscConfig+0x398>
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	fffeffff 	.word	0xfffeffff
 8002ee4:	fffbffff 	.word	0xfffbffff
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCC_OscConfig+0x35e>
 8002ef4:	4bb6      	ldr	r3, [pc, #728]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002ef6:	6a1a      	ldr	r2, [r3, #32]
 8002ef8:	4bb5      	ldr	r3, [pc, #724]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	438a      	bics	r2, r1
 8002efe:	621a      	str	r2, [r3, #32]
 8002f00:	4bb3      	ldr	r3, [pc, #716]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	4bb2      	ldr	r3, [pc, #712]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f06:	2104      	movs	r1, #4
 8002f08:	438a      	bics	r2, r1
 8002f0a:	621a      	str	r2, [r3, #32]
 8002f0c:	e01c      	b.n	8002f48 <HAL_RCC_OscConfig+0x398>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x380>
 8002f16:	4bae      	ldr	r3, [pc, #696]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f18:	6a1a      	ldr	r2, [r3, #32]
 8002f1a:	4bad      	ldr	r3, [pc, #692]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	621a      	str	r2, [r3, #32]
 8002f22:	4bab      	ldr	r3, [pc, #684]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	4baa      	ldr	r3, [pc, #680]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f28:	2101      	movs	r1, #1
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	621a      	str	r2, [r3, #32]
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0x398>
 8002f30:	4ba7      	ldr	r3, [pc, #668]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	4ba6      	ldr	r3, [pc, #664]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f36:	2101      	movs	r1, #1
 8002f38:	438a      	bics	r2, r1
 8002f3a:	621a      	str	r2, [r3, #32]
 8002f3c:	4ba4      	ldr	r3, [pc, #656]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	4ba3      	ldr	r3, [pc, #652]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f42:	2104      	movs	r1, #4
 8002f44:	438a      	bics	r2, r1
 8002f46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d014      	beq.n	8002f7a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f50:	f7ff fb30 	bl	80025b4 <HAL_GetTick>
 8002f54:	0003      	movs	r3, r0
 8002f56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	e009      	b.n	8002f6e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7ff fb2b 	bl	80025b4 <HAL_GetTick>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	4a9b      	ldr	r2, [pc, #620]	; (80031d4 <HAL_RCC_OscConfig+0x624>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e12b      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6e:	4b98      	ldr	r3, [pc, #608]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	2202      	movs	r2, #2
 8002f74:	4013      	ands	r3, r2
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x3aa>
 8002f78:	e013      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7a:	f7ff fb1b 	bl	80025b4 <HAL_GetTick>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f82:	e009      	b.n	8002f98 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7ff fb16 	bl	80025b4 <HAL_GetTick>
 8002f88:	0002      	movs	r2, r0
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	4a91      	ldr	r2, [pc, #580]	; (80031d4 <HAL_RCC_OscConfig+0x624>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e116      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f98:	4b8d      	ldr	r3, [pc, #564]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fa2:	231f      	movs	r3, #31
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fac:	4b88      	ldr	r3, [pc, #544]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	4b87      	ldr	r3, [pc, #540]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002fb2:	4989      	ldr	r1, [pc, #548]	; (80031d8 <HAL_RCC_OscConfig+0x628>)
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d12a      	bne.n	8003020 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fca:	4b81      	ldr	r3, [pc, #516]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	4b80      	ldr	r3, [pc, #512]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002fd0:	2104      	movs	r1, #4
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002fd6:	4b7e      	ldr	r3, [pc, #504]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fda:	4b7d      	ldr	r3, [pc, #500]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8002fdc:	2101      	movs	r1, #1
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe2:	f7ff fae7 	bl	80025b4 <HAL_GetTick>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fec:	f7ff fae2 	bl	80025b4 <HAL_GetTick>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0e3      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ffe:	4b74      	ldr	r3, [pc, #464]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	2202      	movs	r2, #2
 8003004:	4013      	ands	r3, r2
 8003006:	d0f1      	beq.n	8002fec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003008:	4b71      	ldr	r3, [pc, #452]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	22f8      	movs	r2, #248	; 0xf8
 800300e:	4393      	bics	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	00da      	lsls	r2, r3, #3
 8003018:	4b6d      	ldr	r3, [pc, #436]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800301a:	430a      	orrs	r2, r1
 800301c:	635a      	str	r2, [r3, #52]	; 0x34
 800301e:	e034      	b.n	800308a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	3305      	adds	r3, #5
 8003026:	d111      	bne.n	800304c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003028:	4b69      	ldr	r3, [pc, #420]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800302a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302c:	4b68      	ldr	r3, [pc, #416]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800302e:	2104      	movs	r1, #4
 8003030:	438a      	bics	r2, r1
 8003032:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003034:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003038:	22f8      	movs	r2, #248	; 0xf8
 800303a:	4393      	bics	r3, r2
 800303c:	0019      	movs	r1, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	00da      	lsls	r2, r3, #3
 8003044:	4b62      	ldr	r3, [pc, #392]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003046:	430a      	orrs	r2, r1
 8003048:	635a      	str	r2, [r3, #52]	; 0x34
 800304a:	e01e      	b.n	800308a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800304c:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800304e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003050:	4b5f      	ldr	r3, [pc, #380]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003052:	2104      	movs	r1, #4
 8003054:	430a      	orrs	r2, r1
 8003056:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003058:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800305a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305c:	4b5c      	ldr	r3, [pc, #368]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800305e:	2101      	movs	r1, #1
 8003060:	438a      	bics	r2, r1
 8003062:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003064:	f7ff faa6 	bl	80025b4 <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800306e:	f7ff faa1 	bl	80025b4 <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e0a2      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003080:	4b53      	ldr	r3, [pc, #332]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	2202      	movs	r2, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d1f1      	bne.n	800306e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d100      	bne.n	8003094 <HAL_RCC_OscConfig+0x4e4>
 8003092:	e097      	b.n	80031c4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003094:	4b4e      	ldr	r3, [pc, #312]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	220c      	movs	r2, #12
 800309a:	4013      	ands	r3, r2
 800309c:	2b08      	cmp	r3, #8
 800309e:	d100      	bne.n	80030a2 <HAL_RCC_OscConfig+0x4f2>
 80030a0:	e06b      	b.n	800317a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d14c      	bne.n	8003144 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030aa:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	4b48      	ldr	r3, [pc, #288]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 80030b0:	494a      	ldr	r1, [pc, #296]	; (80031dc <HAL_RCC_OscConfig+0x62c>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7ff fa7d 	bl	80025b4 <HAL_GetTick>
 80030ba:	0003      	movs	r3, r0
 80030bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c0:	f7ff fa78 	bl	80025b4 <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e079      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	049b      	lsls	r3, r3, #18
 80030da:	4013      	ands	r3, r2
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030de:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	220f      	movs	r2, #15
 80030e4:	4393      	bics	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 80030ee:	430a      	orrs	r2, r1
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80030f2:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <HAL_RCC_OscConfig+0x630>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	431a      	orrs	r2, r3
 8003106:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	0449      	lsls	r1, r1, #17
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311a:	f7ff fa4b 	bl	80025b4 <HAL_GetTick>
 800311e:	0003      	movs	r3, r0
 8003120:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003124:	f7ff fa46 	bl	80025b4 <HAL_GetTick>
 8003128:	0002      	movs	r2, r0
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e047      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	049b      	lsls	r3, r3, #18
 800313e:	4013      	ands	r3, r2
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x574>
 8003142:	e03f      	b.n	80031c4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003144:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800314a:	4924      	ldr	r1, [pc, #144]	; (80031dc <HAL_RCC_OscConfig+0x62c>)
 800314c:	400a      	ands	r2, r1
 800314e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7ff fa30 	bl	80025b4 <HAL_GetTick>
 8003154:	0003      	movs	r3, r0
 8003156:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315a:	f7ff fa2b 	bl	80025b4 <HAL_GetTick>
 800315e:	0002      	movs	r2, r0
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e02c      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316c:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	049b      	lsls	r3, r3, #18
 8003174:	4013      	ands	r3, r2
 8003176:	d1f0      	bne.n	800315a <HAL_RCC_OscConfig+0x5aa>
 8003178:	e024      	b.n	80031c4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e01f      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_RCC_OscConfig+0x620>)
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	025b      	lsls	r3, r3, #9
 8003198:	401a      	ands	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10e      	bne.n	80031c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	220f      	movs	r2, #15
 80031a6:	401a      	ands	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	23f0      	movs	r3, #240	; 0xf0
 80031b4:	039b      	lsls	r3, r3, #14
 80031b6:	401a      	ands	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b008      	add	sp, #32
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	40021000 	.word	0x40021000
 80031d4:	00001388 	.word	0x00001388
 80031d8:	efffffff 	.word	0xefffffff
 80031dc:	feffffff 	.word	0xfeffffff
 80031e0:	ffc2ffff 	.word	0xffc2ffff

080031e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0b3      	b.n	8003360 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b5b      	ldr	r3, [pc, #364]	; (8003368 <HAL_RCC_ClockConfig+0x184>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2201      	movs	r2, #1
 80031fe:	4013      	ands	r3, r2
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d911      	bls.n	800322a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b58      	ldr	r3, [pc, #352]	; (8003368 <HAL_RCC_ClockConfig+0x184>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	4393      	bics	r3, r2
 800320e:	0019      	movs	r1, r3
 8003210:	4b55      	ldr	r3, [pc, #340]	; (8003368 <HAL_RCC_ClockConfig+0x184>)
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_ClockConfig+0x184>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2201      	movs	r2, #1
 800321e:	4013      	ands	r3, r2
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d001      	beq.n	800322a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e09a      	b.n	8003360 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2202      	movs	r2, #2
 8003230:	4013      	ands	r3, r2
 8003232:	d015      	beq.n	8003260 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2204      	movs	r2, #4
 800323a:	4013      	ands	r3, r2
 800323c:	d006      	beq.n	800324c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800323e:	4b4b      	ldr	r3, [pc, #300]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 8003244:	21e0      	movs	r1, #224	; 0xe0
 8003246:	00c9      	lsls	r1, r1, #3
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800324c:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	22f0      	movs	r2, #240	; 0xf0
 8003252:	4393      	bics	r3, r2
 8003254:	0019      	movs	r1, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	4b44      	ldr	r3, [pc, #272]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	4013      	ands	r3, r2
 8003268:	d040      	beq.n	80032ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b3e      	ldr	r3, [pc, #248]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	2380      	movs	r3, #128	; 0x80
 8003278:	029b      	lsls	r3, r3, #10
 800327a:	4013      	ands	r3, r2
 800327c:	d114      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e06e      	b.n	8003360 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	4b38      	ldr	r3, [pc, #224]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	049b      	lsls	r3, r3, #18
 8003292:	4013      	ands	r3, r2
 8003294:	d108      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e062      	b.n	8003360 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	4b34      	ldr	r3, [pc, #208]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2202      	movs	r2, #2
 80032a0:	4013      	ands	r3, r2
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e05b      	b.n	8003360 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a8:	4b30      	ldr	r3, [pc, #192]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2203      	movs	r2, #3
 80032ae:	4393      	bics	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4b2d      	ldr	r3, [pc, #180]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032bc:	f7ff f97a 	bl	80025b4 <HAL_GetTick>
 80032c0:	0003      	movs	r3, r0
 80032c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c4:	e009      	b.n	80032da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c6:	f7ff f975 	bl	80025b4 <HAL_GetTick>
 80032ca:	0002      	movs	r2, r0
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <HAL_RCC_ClockConfig+0x18c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e042      	b.n	8003360 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	220c      	movs	r2, #12
 80032e0:	401a      	ands	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1ec      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <HAL_RCC_ClockConfig+0x184>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2201      	movs	r2, #1
 80032f2:	4013      	ands	r3, r2
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d211      	bcs.n	800331e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_ClockConfig+0x184>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2201      	movs	r2, #1
 8003300:	4393      	bics	r3, r2
 8003302:	0019      	movs	r1, r3
 8003304:	4b18      	ldr	r3, [pc, #96]	; (8003368 <HAL_RCC_ClockConfig+0x184>)
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330c:	4b16      	ldr	r3, [pc, #88]	; (8003368 <HAL_RCC_ClockConfig+0x184>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2201      	movs	r2, #1
 8003312:	4013      	ands	r3, r2
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d001      	beq.n	800331e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e020      	b.n	8003360 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2204      	movs	r2, #4
 8003324:	4013      	ands	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a11      	ldr	r2, [pc, #68]	; (8003374 <HAL_RCC_ClockConfig+0x190>)
 800332e:	4013      	ands	r3, r2
 8003330:	0019      	movs	r1, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800333c:	f000 f820 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8003340:	0001      	movs	r1, r0
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCC_ClockConfig+0x188>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	220f      	movs	r2, #15
 800334a:	4013      	ands	r3, r2
 800334c:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <HAL_RCC_ClockConfig+0x194>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	000a      	movs	r2, r1
 8003352:	40da      	lsrs	r2, r3
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_RCC_ClockConfig+0x198>)
 8003356:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003358:	2000      	movs	r0, #0
 800335a:	f7ff f8e5 	bl	8002528 <HAL_InitTick>
  
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	b004      	add	sp, #16
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40022000 	.word	0x40022000
 800336c:	40021000 	.word	0x40021000
 8003370:	00001388 	.word	0x00001388
 8003374:	fffff8ff 	.word	0xfffff8ff
 8003378:	0800397c 	.word	0x0800397c
 800337c:	20000008 	.word	0x20000008

08003380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b08f      	sub	sp, #60	; 0x3c
 8003384:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003386:	2314      	movs	r3, #20
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	4a2b      	ldr	r2, [pc, #172]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800338c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800338e:	c313      	stmia	r3!, {r0, r1, r4}
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	4a29      	ldr	r2, [pc, #164]	; (800343c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003398:	ca13      	ldmia	r2!, {r0, r1, r4}
 800339a:	c313      	stmia	r3!, {r0, r1, r4}
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a4:	2300      	movs	r3, #0
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a8:	2300      	movs	r3, #0
 80033aa:	637b      	str	r3, [r7, #52]	; 0x34
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80033b4:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	220c      	movs	r2, #12
 80033be:	4013      	ands	r3, r2
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d002      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x4a>
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d003      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x50>
 80033c8:	e02d      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033ce:	e02d      	b.n	800342c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	0c9b      	lsrs	r3, r3, #18
 80033d4:	220f      	movs	r2, #15
 80033d6:	4013      	ands	r3, r2
 80033d8:	2214      	movs	r2, #20
 80033da:	18ba      	adds	r2, r7, r2
 80033dc:	5cd3      	ldrb	r3, [r2, r3]
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80033e0:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	220f      	movs	r2, #15
 80033e6:	4013      	ands	r3, r2
 80033e8:	1d3a      	adds	r2, r7, #4
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	025b      	lsls	r3, r3, #9
 80033f4:	4013      	ands	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fa:	4812      	ldr	r0, [pc, #72]	; (8003444 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033fc:	f7fc fe84 	bl	8000108 <__udivsi3>
 8003400:	0003      	movs	r3, r0
 8003402:	001a      	movs	r2, r3
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	4353      	muls	r3, r2
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
 800340a:	e009      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800340c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800340e:	000a      	movs	r2, r1
 8003410:	0152      	lsls	r2, r2, #5
 8003412:	1a52      	subs	r2, r2, r1
 8003414:	0193      	lsls	r3, r2, #6
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	185b      	adds	r3, r3, r1
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003422:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003424:	e002      	b.n	800342c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800342a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b00f      	add	sp, #60	; 0x3c
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	08003664 	.word	0x08003664
 800343c:	08003674 	.word	0x08003674
 8003440:	40021000 	.word	0x40021000
 8003444:	007a1200 	.word	0x007a1200

08003448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0a8      	b.n	80035ac <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	2382      	movs	r3, #130	; 0x82
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	429a      	cmp	r2, r3
 800346c:	d009      	beq.n	8003482 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	61da      	str	r2, [r3, #28]
 8003474:	e005      	b.n	8003482 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	225d      	movs	r2, #93	; 0x5d
 800348c:	5c9b      	ldrb	r3, [r3, r2]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	225c      	movs	r2, #92	; 0x5c
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fd f9d2 	bl	8000848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	225d      	movs	r2, #93	; 0x5d
 80034a8:	2102      	movs	r1, #2
 80034aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2140      	movs	r1, #64	; 0x40
 80034b8:	438a      	bics	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	23e0      	movs	r3, #224	; 0xe0
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d902      	bls.n	80034ce <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e002      	b.n	80034d4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	015b      	lsls	r3, r3, #5
 80034d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	23f0      	movs	r3, #240	; 0xf0
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	429a      	cmp	r2, r3
 80034de:	d008      	beq.n	80034f2 <HAL_SPI_Init+0xaa>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	23e0      	movs	r3, #224	; 0xe0
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d002      	beq.n	80034f2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	2382      	movs	r3, #130	; 0x82
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	401a      	ands	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	2384      	movs	r3, #132	; 0x84
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	400b      	ands	r3, r1
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2102      	movs	r1, #2
 800350e:	400b      	ands	r3, r1
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2101      	movs	r1, #1
 8003518:	400b      	ands	r3, r1
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6999      	ldr	r1, [r3, #24]
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	400b      	ands	r3, r1
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2138      	movs	r1, #56	; 0x38
 800352e:	400b      	ands	r3, r1
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	400b      	ands	r3, r1
 800353a:	431a      	orrs	r2, r3
 800353c:	0011      	movs	r1, r2
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	019b      	lsls	r3, r3, #6
 8003546:	401a      	ands	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	2204      	movs	r2, #4
 8003558:	401a      	ands	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2110      	movs	r1, #16
 8003560:	400b      	ands	r3, r1
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	2108      	movs	r1, #8
 800356a:	400b      	ands	r3, r1
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68d9      	ldr	r1, [r3, #12]
 8003572:	23f0      	movs	r3, #240	; 0xf0
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	400b      	ands	r3, r1
 8003578:	431a      	orrs	r2, r3
 800357a:	0011      	movs	r1, r2
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	015b      	lsls	r3, r3, #5
 8003582:	401a      	ands	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4907      	ldr	r1, [pc, #28]	; (80035b4 <HAL_SPI_Init+0x16c>)
 8003598:	400a      	ands	r2, r1
 800359a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	225d      	movs	r2, #93	; 0x5d
 80035a6:	2101      	movs	r1, #1
 80035a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b004      	add	sp, #16
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	fffff7ff 	.word	0xfffff7ff

080035b8 <__libc_init_array>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	2600      	movs	r6, #0
 80035bc:	4d0c      	ldr	r5, [pc, #48]	; (80035f0 <__libc_init_array+0x38>)
 80035be:	4c0d      	ldr	r4, [pc, #52]	; (80035f4 <__libc_init_array+0x3c>)
 80035c0:	1b64      	subs	r4, r4, r5
 80035c2:	10a4      	asrs	r4, r4, #2
 80035c4:	42a6      	cmp	r6, r4
 80035c6:	d109      	bne.n	80035dc <__libc_init_array+0x24>
 80035c8:	2600      	movs	r6, #0
 80035ca:	f000 f821 	bl	8003610 <_init>
 80035ce:	4d0a      	ldr	r5, [pc, #40]	; (80035f8 <__libc_init_array+0x40>)
 80035d0:	4c0a      	ldr	r4, [pc, #40]	; (80035fc <__libc_init_array+0x44>)
 80035d2:	1b64      	subs	r4, r4, r5
 80035d4:	10a4      	asrs	r4, r4, #2
 80035d6:	42a6      	cmp	r6, r4
 80035d8:	d105      	bne.n	80035e6 <__libc_init_array+0x2e>
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	00b3      	lsls	r3, r6, #2
 80035de:	58eb      	ldr	r3, [r5, r3]
 80035e0:	4798      	blx	r3
 80035e2:	3601      	adds	r6, #1
 80035e4:	e7ee      	b.n	80035c4 <__libc_init_array+0xc>
 80035e6:	00b3      	lsls	r3, r6, #2
 80035e8:	58eb      	ldr	r3, [r5, r3]
 80035ea:	4798      	blx	r3
 80035ec:	3601      	adds	r6, #1
 80035ee:	e7f2      	b.n	80035d6 <__libc_init_array+0x1e>
 80035f0:	080039b4 	.word	0x080039b4
 80035f4:	080039b4 	.word	0x080039b4
 80035f8:	080039b4 	.word	0x080039b4
 80035fc:	080039b8 	.word	0x080039b8

08003600 <memset>:
 8003600:	0003      	movs	r3, r0
 8003602:	1882      	adds	r2, r0, r2
 8003604:	4293      	cmp	r3, r2
 8003606:	d100      	bne.n	800360a <memset+0xa>
 8003608:	4770      	bx	lr
 800360a:	7019      	strb	r1, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	e7f9      	b.n	8003604 <memset+0x4>

08003610 <_init>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr

0800361c <_fini>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr
