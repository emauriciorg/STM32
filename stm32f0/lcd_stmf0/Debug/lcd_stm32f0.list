
lcd_stm32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046ec  080046ec  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080046ec  080046ec  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046ec  080046ec  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080046f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000070  08004760  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08004760  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c500  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241c  00000000  00000000  0002c594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  0002e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000eec8  00000000  00000000  0002f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f4aa  00000000  00000000  0003e590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0005db32  00000000  00000000  0004da3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000ab56c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000bd8  00000000  00000000  000ab5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e30  00000000  00000000  000ac198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004348 	.word	0x08004348

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004348 	.word	0x08004348

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <rtc_readRegister>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t rtc_readRegister(uint8_t addr){
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af04      	add	r7, sp, #16
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
	const uint8_t single_byte_read  = 1;
 8000400:	210f      	movs	r1, #15
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
	uint8_t out_data = 0;
 8000408:	250e      	movs	r5, #14
 800040a:	197b      	adds	r3, r7, r5
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Read(&hi2c1, 0xD0|0X01, addr, single_byte_read, &out_data, single_byte_read, 100);
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	b29a      	uxth	r2, r3
 8000416:	0008      	movs	r0, r1
 8000418:	187b      	adds	r3, r7, r1
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b299      	uxth	r1, r3
 800041e:	183b      	adds	r3, r7, r0
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	b29b      	uxth	r3, r3
 8000424:	4807      	ldr	r0, [pc, #28]	; (8000444 <rtc_readRegister+0x50>)
 8000426:	2464      	movs	r4, #100	; 0x64
 8000428:	9402      	str	r4, [sp, #8]
 800042a:	9301      	str	r3, [sp, #4]
 800042c:	197b      	adds	r3, r7, r5
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	000b      	movs	r3, r1
 8000432:	21d1      	movs	r1, #209	; 0xd1
 8000434:	f002 fdc6 	bl	8002fc4 <HAL_I2C_Mem_Read>
	return out_data;
 8000438:	197b      	adds	r3, r7, r5
 800043a:	781b      	ldrb	r3, [r3, #0]
}
 800043c:	0018      	movs	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	b004      	add	sp, #16
 8000442:	bdb0      	pop	{r4, r5, r7, pc}
 8000444:	2000008c 	.word	0x2000008c

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b5b0      	push	{r4, r5, r7, lr}
 800044a:	b090      	sub	sp, #64	; 0x40
 800044c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f002 f9cb 	bl	80027e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f8db 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f000 f9d7 	bl	8000808 <MX_GPIO_Init>
  MX_DMA_Init();
 800045a:	f000 f9b7 	bl	80007cc <MX_DMA_Init>
  MX_SPI2_Init();
 800045e:	f000 f977 	bl	8000750 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000462:	f000 f935 	bl	80006d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   #if 1
    BSP_LCD_Init();
 8000466:	f001 f8bf 	bl	80015e8 <BSP_LCD_Init>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(50,50, (uint8_t*)"Testing LCD", LEFT_MODE);
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
    //BSP_LCD_DrawDigits(100,10,5);
 #endif
    uint8_t hour[6]={0};
 800046a:	2428      	movs	r4, #40	; 0x28
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	2200      	movs	r2, #0
 8000474:	809a      	strh	r2, [r3, #4]
    uint32_t timeout[5] = {0};
 8000476:	2314      	movs	r3, #20
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	0018      	movs	r0, r3
 800047c:	2314      	movs	r3, #20
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f003 ff58 	bl	8004336 <memset>
    uint8_t hours=1,minutes=2,seconds=3,millis =4;
 8000486:	2337      	movs	r3, #55	; 0x37
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	2201      	movs	r2, #1
 800048c:	701a      	strb	r2, [r3, #0]
 800048e:	2336      	movs	r3, #54	; 0x36
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	2202      	movs	r2, #2
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	2335      	movs	r3, #53	; 0x35
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	2203      	movs	r2, #3
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	2334      	movs	r3, #52	; 0x34
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	2204      	movs	r2, #4
 80004a4:	701a      	strb	r2, [r3, #0]
    hour[2]=':';
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	223a      	movs	r2, #58	; 0x3a
 80004aa:	709a      	strb	r2, [r3, #2]
    #endif
    uint8_t rtc_data;
    uint32_t rtc_timeout = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	633b      	str	r3, [r7, #48]	; 0x30
    date_time_t date_time;
    date_time.milliseconds = 0;
 80004b0:	003b      	movs	r3, r7
 80004b2:	2200      	movs	r2, #0
 80004b4:	811a      	strh	r2, [r3, #8]
    date_time.seconds = 0;
 80004b6:	003b      	movs	r3, r7
 80004b8:	2200      	movs	r2, #0
 80004ba:	719a      	strb	r2, [r3, #6]
    date_time.minutes = 0;
 80004bc:	003b      	movs	r3, r7
 80004be:	2200      	movs	r2, #0
 80004c0:	715a      	strb	r2, [r3, #5]
    date_time.hours = 0;
 80004c2:	003b      	movs	r3, r7
 80004c4:	2200      	movs	r2, #0
 80004c6:	711a      	strb	r2, [r3, #4]
    rtc_set_time(date_time);
 80004c8:	003b      	movs	r3, r7
 80004ca:	466a      	mov	r2, sp
 80004cc:	8a19      	ldrh	r1, [r3, #16]
 80004ce:	8011      	strh	r1, [r2, #0]
 80004d0:	6818      	ldr	r0, [r3, #0]
 80004d2:	6859      	ldr	r1, [r3, #4]
 80004d4:	689a      	ldr	r2, [r3, #8]
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	f000 fb82 	bl	8000be0 <rtc_set_time>
    memcpy(hour,"00:00",strlen("00:00"));
 80004dc:	494a      	ldr	r1, [pc, #296]	; (8000608 <main+0x1c0>)
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2205      	movs	r2, #5
 80004e2:	0018      	movs	r0, r3
 80004e4:	f003 ff1e 	bl	8004324 <memcpy>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      //GPIOC->ODR ^=LD4_Pin;
      //HAL_Delay(400);
      if (HAL_GetTick() > rtc_timeout){
 80004e8:	f002 f9d8 	bl	800289c <HAL_GetTick>
 80004ec:	0002      	movs	r2, r0
 80004ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d244      	bcs.n	800057e <main+0x136>
          rtc_timeout = HAL_GetTick()+ 200;
 80004f4:	f002 f9d2 	bl	800289c <HAL_GetTick>
 80004f8:	0003      	movs	r3, r0
 80004fa:	33c8      	adds	r3, #200	; 0xc8
 80004fc:	633b      	str	r3, [r7, #48]	; 0x30
           rtc_data = bcdToDec(rtc_readRegister(0)&0x7f);
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff ff78 	bl	80003f4 <rtc_readRegister>
 8000504:	0003      	movs	r3, r0
 8000506:	001a      	movs	r2, r3
 8000508:	237f      	movs	r3, #127	; 0x7f
 800050a:	4013      	ands	r3, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fb4d 	bl	8000bac <bcdToDec>
 8000512:	0002      	movs	r2, r0
 8000514:	252f      	movs	r5, #47	; 0x2f
 8000516:	197b      	adds	r3, r7, r5
 8000518:	701a      	strb	r2, [r3, #0]
           millis   =  (rtc_data%10);
 800051a:	2334      	movs	r3, #52	; 0x34
 800051c:	18fc      	adds	r4, r7, r3
 800051e:	197b      	adds	r3, r7, r5
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	210a      	movs	r1, #10
 8000524:	0018      	movs	r0, r3
 8000526:	f7ff fe75 	bl	8000214 <__aeabi_uidivmod>
 800052a:	000b      	movs	r3, r1
 800052c:	7023      	strb	r3, [r4, #0]
           seconds  = (rtc_data)/10;
 800052e:	2335      	movs	r3, #53	; 0x35
 8000530:	18fc      	adds	r4, r7, r3
 8000532:	197b      	adds	r3, r7, r5
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	210a      	movs	r1, #10
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff fde5 	bl	8000108 <__udivsi3>
 800053e:	0003      	movs	r3, r0
 8000540:	7023      	strb	r3, [r4, #0]
           rtc_data = bcdToDec(rtc_readRegister(0x01));
 8000542:	2001      	movs	r0, #1
 8000544:	f7ff ff56 	bl	80003f4 <rtc_readRegister>
 8000548:	0003      	movs	r3, r0
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fb2e 	bl	8000bac <bcdToDec>
 8000550:	0002      	movs	r2, r0
 8000552:	197b      	adds	r3, r7, r5
 8000554:	701a      	strb	r2, [r3, #0]
           minutes  = (rtc_data%10);
 8000556:	2336      	movs	r3, #54	; 0x36
 8000558:	18fc      	adds	r4, r7, r3
 800055a:	197b      	adds	r3, r7, r5
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	210a      	movs	r1, #10
 8000560:	0018      	movs	r0, r3
 8000562:	f7ff fe57 	bl	8000214 <__aeabi_uidivmod>
 8000566:	000b      	movs	r3, r1
 8000568:	7023      	strb	r3, [r4, #0]
           hours    = (rtc_data/10);     
 800056a:	2337      	movs	r3, #55	; 0x37
 800056c:	18fc      	adds	r4, r7, r3
 800056e:	197b      	adds	r3, r7, r5
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	210a      	movs	r1, #10
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fdc7 	bl	8000108 <__udivsi3>
 800057a:	0003      	movs	r3, r0
 800057c:	7023      	strb	r3, [r4, #0]
      }

      if (HAL_GetTick() > timeout[0]){
 800057e:	f002 f98d 	bl	800289c <HAL_GetTick>
 8000582:	0002      	movs	r2, r0
 8000584:	2314      	movs	r3, #20
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	429a      	cmp	r2, r3
 800058c:	d9ac      	bls.n	80004e8 <main+0xa0>
          hour[4] = (millis%10)+'0';
 800058e:	2334      	movs	r3, #52	; 0x34
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	210a      	movs	r1, #10
 8000596:	0018      	movs	r0, r3
 8000598:	f7ff fe3c 	bl	8000214 <__aeabi_uidivmod>
 800059c:	000b      	movs	r3, r1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	3330      	adds	r3, #48	; 0x30
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	2428      	movs	r4, #40	; 0x28
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	711a      	strb	r2, [r3, #4]
          hour[3] = (seconds%10)+'0'; 
 80005aa:	2335      	movs	r3, #53	; 0x35
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	210a      	movs	r1, #10
 80005b2:	0018      	movs	r0, r3
 80005b4:	f7ff fe2e 	bl	8000214 <__aeabi_uidivmod>
 80005b8:	000b      	movs	r3, r1
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	3330      	adds	r3, #48	; 0x30
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	70da      	strb	r2, [r3, #3]
          hour[1] = (minutes%10)+'0'; 
 80005c4:	2336      	movs	r3, #54	; 0x36
 80005c6:	18fb      	adds	r3, r7, r3
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	210a      	movs	r1, #10
 80005cc:	0018      	movs	r0, r3
 80005ce:	f7ff fe21 	bl	8000214 <__aeabi_uidivmod>
 80005d2:	000b      	movs	r3, r1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	3330      	adds	r3, #48	; 0x30
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	193b      	adds	r3, r7, r4
 80005dc:	705a      	strb	r2, [r3, #1]
          hour[0] = (hours%10)+'0'; 
 80005de:	2337      	movs	r3, #55	; 0x37
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	210a      	movs	r1, #10
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff fe14 	bl	8000214 <__aeabi_uidivmod>
 80005ec:	000b      	movs	r3, r1
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	3330      	adds	r3, #48	; 0x30
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	701a      	strb	r2, [r3, #0]
          BSP_LCD_DisplayDigits(70,80,hour);
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	001a      	movs	r2, r3
 80005fc:	2150      	movs	r1, #80	; 0x50
 80005fe:	2046      	movs	r0, #70	; 0x46
 8000600:	f001 f890 	bl	8001724 <BSP_LCD_DisplayDigits>
      if (HAL_GetTick() > rtc_timeout){
 8000604:	e770      	b.n	80004e8 <main+0xa0>
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	08004360 	.word	0x08004360

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b095      	sub	sp, #84	; 0x54
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	2420      	movs	r4, #32
 8000614:	193b      	adds	r3, r7, r4
 8000616:	0018      	movs	r0, r3
 8000618:	2330      	movs	r3, #48	; 0x30
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f003 fe8a 	bl	8004336 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000622:	2310      	movs	r3, #16
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	0018      	movs	r0, r3
 8000628:	2310      	movs	r3, #16
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f003 fe82 	bl	8004336 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000632:	003b      	movs	r3, r7
 8000634:	0018      	movs	r0, r3
 8000636:	2310      	movs	r3, #16
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f003 fe7b 	bl	8004336 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	0021      	movs	r1, r4
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2202      	movs	r2, #2
 8000646:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2201      	movs	r2, #1
 800064c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2210      	movs	r2, #16
 8000652:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2202      	movs	r2, #2
 8000658:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	22a0      	movs	r2, #160	; 0xa0
 8000664:	0392      	lsls	r2, r2, #14
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	187b      	adds	r3, r7, r1
 8000670:	0018      	movs	r0, r3
 8000672:	f003 f861 	bl	8003738 <HAL_RCC_OscConfig>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 f95f 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	2110      	movs	r1, #16
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2207      	movs	r2, #7
 8000684:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2202      	movs	r2, #2
 800068a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2101      	movs	r1, #1
 800069c:	0018      	movs	r0, r3
 800069e:	f003 fb65 	bl	8003d6c <HAL_RCC_ClockConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006a6:	f000 f949 	bl	800093c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2220      	movs	r2, #32
 80006ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006b0:	003b      	movs	r3, r7
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b6:	003b      	movs	r3, r7
 80006b8:	0018      	movs	r0, r3
 80006ba:	f003 fc89 	bl	8003fd0 <HAL_RCCEx_PeriphCLKConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006c2:	f000 f93b 	bl	800093c <Error_Handler>
  }
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b015      	add	sp, #84	; 0x54
 80006cc:	bd90      	pop	{r4, r7, pc}
	...

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_I2C1_Init+0x74>)
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <MX_I2C1_Init+0x78>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_I2C1_Init+0x74>)
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <MX_I2C1_Init+0x7c>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_I2C1_Init+0x74>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_I2C1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2C1_Init+0x74>)
 800070c:	0018      	movs	r0, r3
 800070e:	f002 fbc3 	bl	8002e98 <HAL_I2C_Init>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000716:	f000 f911 	bl	800093c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_I2C1_Init+0x74>)
 800071c:	2100      	movs	r1, #0
 800071e:	0018      	movs	r0, r3
 8000720:	f002 ff72 	bl	8003608 <HAL_I2CEx_ConfigAnalogFilter>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000728:	f000 f908 	bl	800093c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MX_I2C1_Init+0x74>)
 800072e:	2100      	movs	r1, #0
 8000730:	0018      	movs	r0, r3
 8000732:	f002 ffb5 	bl	80036a0 <HAL_I2CEx_ConfigDigitalFilter>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 f8ff 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000008c 	.word	0x2000008c
 8000748:	40005400 	.word	0x40005400
 800074c:	2000090e 	.word	0x2000090e

08000750 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_SPI2_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_SPI2_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_SPI2_Init+0x74>)
 800075c:	2282      	movs	r2, #130	; 0x82
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_SPI2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_SPI2_Init+0x74>)
 800076a:	22c0      	movs	r2, #192	; 0xc0
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_SPI2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_SPI2_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_SPI2_Init+0x74>)
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_SPI2_Init+0x74>)
 8000786:	2228      	movs	r2, #40	; 0x28
 8000788:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_SPI2_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_SPI2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_SPI2_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_SPI2_Init+0x74>)
 800079e:	2207      	movs	r2, #7
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_SPI2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_SPI2_Init+0x74>)
 80007aa:	2208      	movs	r2, #8
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <MX_SPI2_Init+0x74>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f003 fcdb 	bl	800416c <HAL_SPI_Init>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f8bf 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000d8 	.word	0x200000d8
 80007c8:	40003800 	.word	0x40003800

080007cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_DMA_Init+0x38>)
 80007d4:	695a      	ldr	r2, [r3, #20]
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_DMA_Init+0x38>)
 80007d8:	2101      	movs	r1, #1
 80007da:	430a      	orrs	r2, r1
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_DMA_Init+0x38>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	2201      	movs	r2, #1
 80007e4:	4013      	ands	r3, r2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	200b      	movs	r0, #11
 80007f0:	f002 f92e 	bl	8002a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80007f4:	200b      	movs	r0, #11
 80007f6:	f002 f940 	bl	8002a7a <HAL_NVIC_EnableIRQ>

}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40021000 	.word	0x40021000

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	240c      	movs	r4, #12
 8000810:	193b      	adds	r3, r7, r4
 8000812:	0018      	movs	r0, r3
 8000814:	2314      	movs	r3, #20
 8000816:	001a      	movs	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	f003 fd8c 	bl	8004336 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b44      	ldr	r3, [pc, #272]	; (8000930 <MX_GPIO_Init+0x128>)
 8000820:	695a      	ldr	r2, [r3, #20]
 8000822:	4b43      	ldr	r3, [pc, #268]	; (8000930 <MX_GPIO_Init+0x128>)
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	0289      	lsls	r1, r1, #10
 8000828:	430a      	orrs	r2, r1
 800082a:	615a      	str	r2, [r3, #20]
 800082c:	4b40      	ldr	r3, [pc, #256]	; (8000930 <MX_GPIO_Init+0x128>)
 800082e:	695a      	ldr	r2, [r3, #20]
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	029b      	lsls	r3, r3, #10
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b3d      	ldr	r3, [pc, #244]	; (8000930 <MX_GPIO_Init+0x128>)
 800083c:	695a      	ldr	r2, [r3, #20]
 800083e:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <MX_GPIO_Init+0x128>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	02c9      	lsls	r1, r1, #11
 8000844:	430a      	orrs	r2, r1
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	4b39      	ldr	r3, [pc, #228]	; (8000930 <MX_GPIO_Init+0x128>)
 800084a:	695a      	ldr	r2, [r3, #20]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	02db      	lsls	r3, r3, #11
 8000850:	4013      	ands	r3, r2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b36      	ldr	r3, [pc, #216]	; (8000930 <MX_GPIO_Init+0x128>)
 8000858:	695a      	ldr	r2, [r3, #20]
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <MX_GPIO_Init+0x128>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0309      	lsls	r1, r1, #12
 8000860:	430a      	orrs	r2, r1
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	4b32      	ldr	r3, [pc, #200]	; (8000930 <MX_GPIO_Init+0x128>)
 8000866:	695a      	ldr	r2, [r3, #20]
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	031b      	lsls	r3, r3, #12
 800086c:	4013      	ands	r3, r2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000872:	23c0      	movs	r3, #192	; 0xc0
 8000874:	015b      	lsls	r3, r3, #5
 8000876:	482f      	ldr	r0, [pc, #188]	; (8000934 <MX_GPIO_Init+0x12c>)
 8000878:	2200      	movs	r2, #0
 800087a:	0019      	movs	r1, r3
 800087c:	f002 faee 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000880:	23c0      	movs	r3, #192	; 0xc0
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	482c      	ldr	r0, [pc, #176]	; (8000938 <MX_GPIO_Init+0x130>)
 8000886:	2200      	movs	r2, #0
 8000888:	0019      	movs	r1, r3
 800088a:	f002 fae7 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2290      	movs	r2, #144	; 0x90
 8000898:	0352      	lsls	r2, r2, #13
 800089a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	193a      	adds	r2, r7, r4
 80008a4:	2390      	movs	r3, #144	; 0x90
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f002 f966 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80008b0:	0021      	movs	r1, r4
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	00d2      	lsls	r2, r2, #3
 80008b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2288      	movs	r2, #136	; 0x88
 80008be:	0352      	lsls	r2, r2, #13
 80008c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80008c8:	000c      	movs	r4, r1
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <MX_GPIO_Init+0x12c>)
 80008ce:	0019      	movs	r1, r3
 80008d0:	0010      	movs	r0, r2
 80008d2:	f002 f953 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	22c0      	movs	r2, #192	; 0xc0
 80008dc:	0152      	lsls	r2, r2, #5
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	000c      	movs	r4, r1
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2201      	movs	r2, #1
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_GPIO_Init+0x12c>)
 80008f8:	0019      	movs	r1, r3
 80008fa:	0010      	movs	r0, r2
 80008fc:	f002 f93e 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000900:	0021      	movs	r1, r4
 8000902:	187b      	adds	r3, r7, r1
 8000904:	22c0      	movs	r2, #192	; 0xc0
 8000906:	0092      	lsls	r2, r2, #2
 8000908:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2201      	movs	r2, #1
 800090e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091c:	187b      	adds	r3, r7, r1
 800091e:	4a06      	ldr	r2, [pc, #24]	; (8000938 <MX_GPIO_Init+0x130>)
 8000920:	0019      	movs	r1, r3
 8000922:	0010      	movs	r0, r2
 8000924:	f002 f92a 	bl	8002b7c <HAL_GPIO_Init>

}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b009      	add	sp, #36	; 0x24
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	40021000 	.word	0x40021000
 8000934:	48000400 	.word	0x48000400
 8000938:	48000800 	.word	0x48000800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	699a      	ldr	r2, [r3, #24]
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	2101      	movs	r1, #1
 8000956:	430a      	orrs	r2, r1
 8000958:	619a      	str	r2, [r3, #24]
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	2201      	movs	r2, #1
 8000960:	4013      	ands	r3, r2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	69da      	ldr	r2, [r3, #28]
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	0549      	lsls	r1, r1, #21
 8000970:	430a      	orrs	r2, r1
 8000972:	61da      	str	r2, [r3, #28]
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_MspInit+0x44>)
 8000976:	69da      	ldr	r2, [r3, #28]
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	055b      	lsls	r3, r3, #21
 800097c:	4013      	ands	r3, r2
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b08b      	sub	sp, #44	; 0x2c
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	2414      	movs	r4, #20
 800099a:	193b      	adds	r3, r7, r4
 800099c:	0018      	movs	r0, r3
 800099e:	2314      	movs	r3, #20
 80009a0:	001a      	movs	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	f003 fcc7 	bl	8004336 <memset>
  if(hi2c->Instance==I2C1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <HAL_I2C_MspInit+0x90>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d131      	bne.n	8000a16 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <HAL_I2C_MspInit+0x94>)
 80009b4:	695a      	ldr	r2, [r3, #20]
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <HAL_I2C_MspInit+0x94>)
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	02c9      	lsls	r1, r1, #11
 80009bc:	430a      	orrs	r2, r1
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_I2C_MspInit+0x94>)
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	2380      	movs	r3, #128	; 0x80
 80009c6:	02db      	lsls	r3, r3, #11
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ce:	0021      	movs	r1, r4
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	22c0      	movs	r2, #192	; 0xc0
 80009d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2212      	movs	r2, #18
 80009da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2203      	movs	r2, #3
 80009e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2201      	movs	r2, #1
 80009ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_I2C_MspInit+0x98>)
 80009f2:	0019      	movs	r1, r3
 80009f4:	0010      	movs	r0, r2
 80009f6:	f002 f8c1 	bl	8002b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_I2C_MspInit+0x94>)
 80009fc:	69da      	ldr	r2, [r3, #28]
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_I2C_MspInit+0x94>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0389      	lsls	r1, r1, #14
 8000a04:	430a      	orrs	r2, r1
 8000a06:	61da      	str	r2, [r3, #28]
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_I2C_MspInit+0x94>)
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	039b      	lsls	r3, r3, #14
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b00b      	add	sp, #44	; 0x2c
 8000a1c:	bd90      	pop	{r4, r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40005400 	.word	0x40005400
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000400 	.word	0x48000400

08000a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b08b      	sub	sp, #44	; 0x2c
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	2414      	movs	r4, #20
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2314      	movs	r3, #20
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f003 fc79 	bl	8004336 <memset>
  if(hspi->Instance==SPI2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a43      	ldr	r2, [pc, #268]	; (8000b58 <HAL_SPI_MspInit+0x12c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d000      	beq.n	8000a50 <HAL_SPI_MspInit+0x24>
 8000a4e:	e07e      	b.n	8000b4e <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a50:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <HAL_SPI_MspInit+0x130>)
 8000a52:	69da      	ldr	r2, [r3, #28]
 8000a54:	4b41      	ldr	r3, [pc, #260]	; (8000b5c <HAL_SPI_MspInit+0x130>)
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	01c9      	lsls	r1, r1, #7
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	61da      	str	r2, [r3, #28]
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <HAL_SPI_MspInit+0x130>)
 8000a60:	69da      	ldr	r2, [r3, #28]
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	01db      	lsls	r3, r3, #7
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b3b      	ldr	r3, [pc, #236]	; (8000b5c <HAL_SPI_MspInit+0x130>)
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <HAL_SPI_MspInit+0x130>)
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	02c9      	lsls	r1, r1, #11
 8000a76:	430a      	orrs	r2, r1
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	4b38      	ldr	r3, [pc, #224]	; (8000b5c <HAL_SPI_MspInit+0x130>)
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	02db      	lsls	r3, r3, #11
 8000a82:	4013      	ands	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	22e0      	movs	r2, #224	; 0xe0
 8000a8c:	0212      	lsls	r2, r2, #8
 8000a8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	0021      	movs	r1, r4
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2202      	movs	r2, #2
 8000a96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	4a2c      	ldr	r2, [pc, #176]	; (8000b60 <HAL_SPI_MspInit+0x134>)
 8000aae:	0019      	movs	r1, r3
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	f002 f863 	bl	8002b7c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000ab8:	4a2b      	ldr	r2, [pc, #172]	; (8000b68 <HAL_SPI_MspInit+0x13c>)
 8000aba:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000abc:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac8:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad4:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 ffe3 	bl	8002ab4 <HAL_DMA_Init>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000af2:	f7ff ff23 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a1a      	ldr	r2, [pc, #104]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000afa:	659a      	str	r2, [r3, #88]	; 0x58
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_SPI_MspInit+0x138>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_SPI_MspInit+0x144>)
 8000b06:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b0a:	2210      	movs	r2, #16
 8000b0c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 ffbd 	bl	8002ab4 <HAL_DMA_Init>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 8000b3e:	f7ff fefd 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b46:	655a      	str	r2, [r3, #84]	; 0x54
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_SPI_MspInit+0x140>)
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b00b      	add	sp, #44	; 0x2c
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	40003800 	.word	0x40003800
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	48000400 	.word	0x48000400
 8000b64:	2000013c 	.word	0x2000013c
 8000b68:	40020044 	.word	0x40020044
 8000b6c:	20000180 	.word	0x20000180
 8000b70:	40020058 	.word	0x40020058

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f001 fe6e 	bl	8002878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <bcdToDec>:

uint8_t decToBcd(uint8_t val) {
	return ((val / 10 * 16) + (val % 10));
}

uint8_t bcdToDec(uint8_t val) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	0002      	movs	r2, r0
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	701a      	strb	r2, [r3, #0]
	return ((val / 16 * 10) + (val % 16));
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	1c1a      	adds	r2, r3, #0
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	18db      	adds	r3, r3, r3
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	210f      	movs	r1, #15
 8000bd0:	400b      	ands	r3, r1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	18d3      	adds	r3, r2, r3
 8000bd6:	b2db      	uxtb	r3, r3
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <rtc_set_time>:

void rtc_init(uint8_t address){
	rtc_drv->init();
}

void rtc_set_time(date_time_t date_time){
 8000be0:	b084      	sub	sp, #16
 8000be2:	b5b0      	push	{r4, r5, r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af02      	add	r7, sp, #8
 8000be8:	2510      	movs	r5, #16
 8000bea:	197c      	adds	r4, r7, r5
 8000bec:	6020      	str	r0, [r4, #0]
 8000bee:	6061      	str	r1, [r4, #4]
 8000bf0:	60a2      	str	r2, [r4, #8]
 8000bf2:	60e3      	str	r3, [r4, #12]
	rtc_drv->set_time(date_time);
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <rtc_set_time+0x38>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685c      	ldr	r4, [r3, #4]
 8000bfa:	197b      	adds	r3, r7, r5
 8000bfc:	466a      	mov	r2, sp
 8000bfe:	8a19      	ldrh	r1, [r3, #16]
 8000c00:	8011      	strh	r1, [r2, #0]
 8000c02:	6818      	ldr	r0, [r3, #0]
 8000c04:	6859      	ldr	r1, [r3, #4]
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	47a0      	blx	r4
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bcb0      	pop	{r4, r5, r7}
 8000c12:	bc08      	pop	{r3}
 8000c14:	b004      	add	sp, #16
 8000c16:	4718      	bx	r3
 8000c18:	20000018 	.word	0x20000018

08000c1c <rtc_init_mock>:
	rtc_drv->get_time(date_time);
}


#ifdef RTC_MOCK
void rtc_init_mock(void){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <rtc_set_time_mock>:
void rtc_set_time_mock(date_time_t date_time){
 8000c28:	b084      	sub	sp, #16
 8000c2a:	b5b0      	push	{r4, r5, r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	2510      	movs	r5, #16
 8000c30:	197c      	adds	r4, r7, r5
 8000c32:	6020      	str	r0, [r4, #0]
 8000c34:	6061      	str	r1, [r4, #4]
 8000c36:	60a2      	str	r2, [r4, #8]
 8000c38:	60e3      	str	r3, [r4, #12]
	memcpy(&date_time_mock,&date_time,sizeof(date_time_t));
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <rtc_set_time_mock+0x30>)
 8000c3c:	197b      	adds	r3, r7, r5
 8000c3e:	0010      	movs	r0, r2
 8000c40:	0019      	movs	r1, r3
 8000c42:	2312      	movs	r3, #18
 8000c44:	001a      	movs	r2, r3
 8000c46:	f003 fb6d 	bl	8004324 <memcpy>
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bcb0      	pop	{r4, r5, r7}
 8000c50:	bc08      	pop	{r3}
 8000c52:	b004      	add	sp, #16
 8000c54:	4718      	bx	r3
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	200001c4 	.word	0x200001c4

08000c5c <rtc_get_time_mock>:
void rtc_get_time_mock(date_time_t *date_time){
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	date_time_mock.seconds++;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <rtc_get_time_mock+0x44>)
 8000c66:	799b      	ldrb	r3, [r3, #6]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <rtc_get_time_mock+0x44>)
 8000c6e:	719a      	strb	r2, [r3, #6]
	date_time_mock.minutes++;
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <rtc_get_time_mock+0x44>)
 8000c72:	795b      	ldrb	r3, [r3, #5]
 8000c74:	3301      	adds	r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <rtc_get_time_mock+0x44>)
 8000c7a:	715a      	strb	r2, [r3, #5]
	date_time_mock.hours++;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <rtc_get_time_mock+0x44>)
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	3301      	adds	r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <rtc_get_time_mock+0x44>)
 8000c86:	711a      	strb	r2, [r3, #4]
	memcpy(&date_time,&date_time_mock,sizeof(date_time_t));
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <rtc_get_time_mock+0x44>)
 8000c8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c8e:	c313      	stmia	r3!, {r0, r1, r4}
 8000c90:	6811      	ldr	r1, [r2, #0]
 8000c92:	6019      	str	r1, [r3, #0]
 8000c94:	8892      	ldrh	r2, [r2, #4]
 8000c96:	809a      	strh	r2, [r3, #4]
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b003      	add	sp, #12
 8000c9e:	bd90      	pop	{r4, r7, pc}
 8000ca0:	200001c4 	.word	0x200001c4

08000ca4 <Reset_Handler>:
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
 8000ca6:	4685      	mov	sp, r0
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopForever+0x6>)
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopForever+0xa>)
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopForever+0xe>)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:
 8000cb2:	58d4      	ldr	r4, [r2, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:
 8000cb8:	18c4      	adds	r4, r0, r3
 8000cba:	428c      	cmp	r4, r1
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopForever+0x12>)
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopForever+0x16>)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:
 8000cca:	42a2      	cmp	r2, r4
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>
 8000cce:	f7ff ff68 	bl	8000ba2 <SystemInit>
 8000cd2:	f003 fb03 	bl	80042dc <__libc_init_array>
 8000cd6:	f7ff fbb7 	bl	8000448 <main>

08000cda <LoopForever>:
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
 8000cdc:	20002000 	.word	0x20002000
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	2000006c 	.word	0x2000006c
 8000ce8:	080046f4 	.word	0x080046f4
 8000cec:	20000070 	.word	0x20000070
 8000cf0:	200002fc 	.word	0x200002fc

08000cf4 <ADC1_IRQHandler>:
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_IRQHandler>
	...

08000cf8 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8000cfc:	4b46      	ldr	r3, [pc, #280]	; (8000e18 <ili9488_Init+0x120>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	001a      	movs	r2, r3
 8000d02:	2301      	movs	r3, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	d115      	bne.n	8000d34 <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8000d08:	4b43      	ldr	r3, [pc, #268]	; (8000e18 <ili9488_Init+0x120>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b41      	ldr	r3, [pc, #260]	; (8000e18 <ili9488_Init+0x120>)
 8000d14:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 8000d16:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <ili9488_Init+0x120>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d101      	bne.n	8000d26 <ili9488_Init+0x2e>
      LCD_IO_Init();
 8000d22:	f001 fb55 	bl	80023d0 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <ili9488_Init+0x120>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <ili9488_Init+0x120>)
 8000d32:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8000d34:	2069      	movs	r0, #105	; 0x69
 8000d36:	f001 fb26 	bl	8002386 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f001 fc16 	bl	800256c <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8000d40:	2005      	movs	r0, #5
 8000d42:	f001 fb20 	bl	8002386 <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 8000d46:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <ili9488_Init+0x124>)
 8000d48:	220f      	movs	r2, #15
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	20e0      	movs	r0, #224	; 0xe0
 8000d4e:	f001 fc8b 	bl	8002668 <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8000d52:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <ili9488_Init+0x128>)
 8000d54:	220f      	movs	r2, #15
 8000d56:	0019      	movs	r1, r3
 8000d58:	20e1      	movs	r0, #225	; 0xe1
 8000d5a:	f001 fc85 	bl	8002668 <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <ili9488_Init+0x12c>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	0019      	movs	r1, r3
 8000d64:	20c0      	movs	r0, #192	; 0xc0
 8000d66:	f001 fc7f 	bl	8002668 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000d6a:	2005      	movs	r0, #5
 8000d6c:	f001 fb0b 	bl	8002386 <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 8000d70:	20c1      	movs	r0, #193	; 0xc1
 8000d72:	f001 fbfb 	bl	800256c <LCD_IO_WriteCmd8>
 8000d76:	2041      	movs	r0, #65	; 0x41
 8000d78:	f001 fc1e 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_Delay(5);
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f001 fb02 	bl	8002386 <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <ili9488_Init+0x130>)
 8000d84:	2203      	movs	r2, #3
 8000d86:	0019      	movs	r1, r3
 8000d88:	20c5      	movs	r0, #197	; 0xc5
 8000d8a:	f001 fc6d 	bl	8002668 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000d8e:	2005      	movs	r0, #5
 8000d90:	f001 faf9 	bl	8002386 <LCD_Delay>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x66); // Interface Pixel Format (24 bit)
 8000d94:	203a      	movs	r0, #58	; 0x3a
 8000d96:	f001 fbe9 	bl	800256c <LCD_IO_WriteCmd8>
 8000d9a:	2066      	movs	r0, #102	; 0x66
 8000d9c:	f001 fc0c 	bl	80025b8 <LCD_IO_WriteData8>
  #if LCD_SPI_MODE != 2
  // LCD_IO_WriteCmd8(0xFB); LCD_IO_WriteData8(0x80);
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
 8000da0:	20b0      	movs	r0, #176	; 0xb0
 8000da2:	f001 fbe3 	bl	800256c <LCD_IO_WriteCmd8>
 8000da6:	2080      	movs	r0, #128	; 0x80
 8000da8:	f001 fc06 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8000dac:	20b1      	movs	r0, #177	; 0xb1
 8000dae:	f001 fbdd 	bl	800256c <LCD_IO_WriteCmd8>
 8000db2:	20a0      	movs	r0, #160	; 0xa0
 8000db4:	f001 fc00 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8000db8:	20b4      	movs	r0, #180	; 0xb4
 8000dba:	f001 fbd7 	bl	800256c <LCD_IO_WriteCmd8>
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f001 fbfa 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <ili9488_Init+0x134>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	0019      	movs	r1, r3
 8000dca:	20b6      	movs	r0, #182	; 0xb6
 8000dcc:	f001 fc4c 	bl	8002668 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 8000dd0:	20e9      	movs	r0, #233	; 0xe9
 8000dd2:	f001 fbcb 	bl	800256c <LCD_IO_WriteCmd8>
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f001 fbee 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <ili9488_Init+0x138>)
 8000dde:	2204      	movs	r2, #4
 8000de0:	0019      	movs	r1, r3
 8000de2:	20f7      	movs	r0, #247	; 0xf7
 8000de4:	f001 fc40 	bl	8002668 <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8000de8:	2005      	movs	r0, #5
 8000dea:	f001 facc 	bl	8002386 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 8000dee:	2011      	movs	r0, #17
 8000df0:	f001 fbbc 	bl	800256c <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8000df4:	2078      	movs	r0, #120	; 0x78
 8000df6:	f001 fac6 	bl	8002386 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 8000dfa:	2029      	movs	r0, #41	; 0x29
 8000dfc:	f001 fbb6 	bl	800256c <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8000e00:	2005      	movs	r0, #5
 8000e02:	f001 fac0 	bl	8002386 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8000e06:	2036      	movs	r0, #54	; 0x36
 8000e08:	f001 fbb0 	bl	800256c <LCD_IO_WriteCmd8>
 8000e0c:	20e8      	movs	r0, #232	; 0xe8
 8000e0e:	f001 fbd3 	bl	80025b8 <LCD_IO_WriteData8>
}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200001d6 	.word	0x200001d6
 8000e1c:	08004368 	.word	0x08004368
 8000e20:	08004378 	.word	0x08004378
 8000e24:	08004388 	.word	0x08004388
 8000e28:	0800438c 	.word	0x0800438c
 8000e2c:	08004390 	.word	0x08004390
 8000e30:	08004394 	.word	0x08004394

08000e34 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8000e38:	2011      	movs	r0, #17
 8000e3a:	f001 fb97 	bl	800256c <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f001 faae 	bl	80023a0 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 8000e4e:	2010      	movs	r0, #16
 8000e50:	f001 fb8c 	bl	800256c <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f001 faa3 	bl	80023a0 <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8000e64:	23f0      	movs	r3, #240	; 0xf0
 8000e66:	005b      	lsls	r3, r3, #1
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	005b      	lsls	r3, r3, #1
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <ili9488_ReadID+0x40>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 8000e8e:	f7ff ff33 	bl	8000cf8 <ili9488_Init>
  }

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
 8000e92:	1d39      	adds	r1, r7, #4
 8000e94:	2300      	movs	r3, #0
 8000e96:	2203      	movs	r2, #3
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f001 fc41 	bl	8002720 <LCD_IO_ReadCmd8MultipleData8>
  id <<= 1;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <ili9488_ReadID+0x44>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <ili9488_ReadID+0x34>
    return 0x9488;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <ili9488_ReadID+0x48>)
 8000eae:	e000      	b.n	8000eb2 <ili9488_ReadID+0x36>
  return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	200001d6 	.word	0x200001d6
 8000ec0:	00668054 	.word	0x00668054
 8000ec4:	00009488 	.word	0x00009488

08000ec8 <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	0002      	movs	r2, r0
 8000ed0:	1dbb      	adds	r3, r7, #6
 8000ed2:	801a      	strh	r2, [r3, #0]
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	1c0a      	adds	r2, r1, #0
 8000ed8:	801a      	strh	r2, [r3, #0]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000eda:	202a      	movs	r0, #42	; 0x2a
 8000edc:	f001 fb46 	bl	800256c <LCD_IO_WriteCmd8>
 8000ee0:	1dbb      	adds	r3, r7, #6
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 fb64 	bl	80025b8 <LCD_IO_WriteData8>
 8000ef0:	1dbb      	adds	r3, r7, #6
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f001 fb5e 	bl	80025b8 <LCD_IO_WriteData8>
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 fb56 	bl	80025b8 <LCD_IO_WriteData8>
 8000f0c:	1dbb      	adds	r3, r7, #6
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fb50 	bl	80025b8 <LCD_IO_WriteData8>
 8000f18:	202b      	movs	r0, #43	; 0x2b
 8000f1a:	f001 fb27 	bl	800256c <LCD_IO_WriteCmd8>
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f001 fb45 	bl	80025b8 <LCD_IO_WriteData8>
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	0018      	movs	r0, r3
 8000f36:	f001 fb3f 	bl	80025b8 <LCD_IO_WriteData8>
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 fb37 	bl	80025b8 <LCD_IO_WriteData8>
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	0018      	movs	r0, r3
 8000f52:	f001 fb31 	bl	80025b8 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <ili9488_write16to24>:

/* The SPI mode not capable the 16bpp mode -> convert to 24bpp */
#if ILI9488_INTERFACE == 0
extern inline void ili9488_write16to24(uint16_t RGBCode);
inline void ili9488_write16to24(uint16_t RGBCode)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	0002      	movs	r2, r0
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteData8((RGBCode & 0xF800) >> 8);
 8000f6a:	1dbb      	adds	r3, r7, #6
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	121b      	asrs	r3, r3, #8
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2207      	movs	r2, #7
 8000f74:	4393      	bics	r3, r2
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f001 fb1d 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x07E0) >> 3);
 8000f7e:	1dbb      	adds	r3, r7, #6
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	10db      	asrs	r3, r3, #3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2203      	movs	r2, #3
 8000f88:	4393      	bics	r3, r2
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f001 fb13 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteData8((RGBCode & 0x001F) << 3);
 8000f92:	1dbb      	adds	r3, r7, #6
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 fb0c 	bl	80025b8 <LCD_IO_WriteData8>
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	0004      	movs	r4, r0
 8000fb0:	0008      	movs	r0, r1
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	1dbb      	adds	r3, r7, #6
 8000fb6:	1c22      	adds	r2, r4, #0
 8000fb8:	801a      	strh	r2, [r3, #0]
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	1c02      	adds	r2, r0, #0
 8000fbe:	801a      	strh	r2, [r3, #0]
 8000fc0:	1cbb      	adds	r3, r7, #2
 8000fc2:	1c0a      	adds	r2, r1, #0
 8000fc4:	801a      	strh	r2, [r3, #0]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8000fc6:	202a      	movs	r0, #42	; 0x2a
 8000fc8:	f001 fad0 	bl	800256c <LCD_IO_WriteCmd8>
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f001 faee 	bl	80025b8 <LCD_IO_WriteData8>
 8000fdc:	1dbb      	adds	r3, r7, #6
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f001 fae8 	bl	80025b8 <LCD_IO_WriteData8>
 8000fe8:	1dbb      	adds	r3, r7, #6
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f001 fae0 	bl	80025b8 <LCD_IO_WriteData8>
 8000ff8:	1dbb      	adds	r3, r7, #6
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	0018      	movs	r0, r3
 8001000:	f001 fada 	bl	80025b8 <LCD_IO_WriteData8>
 8001004:	202b      	movs	r0, #43	; 0x2b
 8001006:	f001 fab1 	bl	800256c <LCD_IO_WriteCmd8>
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	b29b      	uxth	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	0018      	movs	r0, r3
 8001016:	f001 facf 	bl	80025b8 <LCD_IO_WriteData8>
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	0018      	movs	r0, r3
 8001022:	f001 fac9 	bl	80025b8 <LCD_IO_WriteData8>
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	b29b      	uxth	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	0018      	movs	r0, r3
 8001032:	f001 fac1 	bl	80025b8 <LCD_IO_WriteData8>
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	0018      	movs	r0, r3
 800103e:	f001 fabb 	bl	80025b8 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8001042:	202c      	movs	r0, #44	; 0x2c
 8001044:	f001 fa92 	bl	800256c <LCD_IO_WriteCmd8>
  ili9488_write16to24(RGBCode);
 8001048:	1cbb      	adds	r3, r7, #2
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff86 	bl	8000f5e <ili9488_write16to24>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b003      	add	sp, #12
 8001058:	bd90      	pop	{r4, r7, pc}

0800105a <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800105a:	b590      	push	{r4, r7, lr}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	0002      	movs	r2, r0
 8001062:	1dbb      	adds	r3, r7, #6
 8001064:	801a      	strh	r2, [r3, #0]
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	1c0a      	adds	r2, r1, #0
 800106a:	801a      	strh	r2, [r3, #0]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 800106c:	202a      	movs	r0, #42	; 0x2a
 800106e:	f001 fa7d 	bl	800256c <LCD_IO_WriteCmd8>
 8001072:	1dbb      	adds	r3, r7, #6
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	0018      	movs	r0, r3
 800107e:	f001 fa9b 	bl	80025b8 <LCD_IO_WriteData8>
 8001082:	1dbb      	adds	r3, r7, #6
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	0018      	movs	r0, r3
 800108a:	f001 fa95 	bl	80025b8 <LCD_IO_WriteData8>
 800108e:	1dbb      	adds	r3, r7, #6
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	0a1b      	lsrs	r3, r3, #8
 8001094:	b29b      	uxth	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	0018      	movs	r0, r3
 800109a:	f001 fa8d 	bl	80025b8 <LCD_IO_WriteData8>
 800109e:	1dbb      	adds	r3, r7, #6
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 fa87 	bl	80025b8 <LCD_IO_WriteData8>
 80010aa:	202b      	movs	r0, #43	; 0x2b
 80010ac:	f001 fa5e 	bl	800256c <LCD_IO_WriteCmd8>
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 fa7c 	bl	80025b8 <LCD_IO_WriteData8>
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	0018      	movs	r0, r3
 80010c8:	f001 fa76 	bl	80025b8 <LCD_IO_WriteData8>
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	0018      	movs	r0, r3
 80010d8:	f001 fa6e 	bl	80025b8 <LCD_IO_WriteData8>
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	0018      	movs	r0, r3
 80010e4:	f001 fa68 	bl	80025b8 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
 80010e8:	240e      	movs	r4, #14
 80010ea:	1939      	adds	r1, r7, r4
 80010ec:	2301      	movs	r3, #1
 80010ee:	2201      	movs	r2, #1
 80010f0:	202e      	movs	r0, #46	; 0x2e
 80010f2:	f001 fb47 	bl	8002784 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	881b      	ldrh	r3, [r3, #0]
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b005      	add	sp, #20
 8001100:	bd90      	pop	{r4, r7, pc}
	...

08001104 <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	0005      	movs	r5, r0
 800110c:	000c      	movs	r4, r1
 800110e:	0010      	movs	r0, r2
 8001110:	0019      	movs	r1, r3
 8001112:	1dbb      	adds	r3, r7, #6
 8001114:	1c2a      	adds	r2, r5, #0
 8001116:	801a      	strh	r2, [r3, #0]
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	1c22      	adds	r2, r4, #0
 800111c:	801a      	strh	r2, [r3, #0]
 800111e:	1cbb      	adds	r3, r7, #2
 8001120:	1c02      	adds	r2, r0, #0
 8001122:	801a      	strh	r2, [r3, #0]
 8001124:	003b      	movs	r3, r7
 8001126:	1c0a      	adds	r2, r1, #0
 8001128:	801a      	strh	r2, [r3, #0]
  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  yStart = Ypos; yEnd = Ypos + Height - 1;
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <ili9488_SetDisplayWindow+0xf0>)
 800112c:	1d3a      	adds	r2, r7, #4
 800112e:	8812      	ldrh	r2, [r2, #0]
 8001130:	801a      	strh	r2, [r3, #0]
 8001132:	1d3a      	adds	r2, r7, #4
 8001134:	003b      	movs	r3, r7
 8001136:	8812      	ldrh	r2, [r2, #0]
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	18d3      	adds	r3, r2, r3
 800113c:	b29b      	uxth	r3, r3
 800113e:	3b01      	subs	r3, #1
 8001140:	b29a      	uxth	r2, r3
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <ili9488_SetDisplayWindow+0xf4>)
 8001144:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8001146:	202a      	movs	r0, #42	; 0x2a
 8001148:	f001 fa10 	bl	800256c <LCD_IO_WriteCmd8>
 800114c:	1dbb      	adds	r3, r7, #6
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	b29b      	uxth	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	0018      	movs	r0, r3
 8001158:	f001 fa2e 	bl	80025b8 <LCD_IO_WriteData8>
 800115c:	1dbb      	adds	r3, r7, #6
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	0018      	movs	r0, r3
 8001164:	f001 fa28 	bl	80025b8 <LCD_IO_WriteData8>
 8001168:	1dbb      	adds	r3, r7, #6
 800116a:	881a      	ldrh	r2, [r3, #0]
 800116c:	1cbb      	adds	r3, r7, #2
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	3b01      	subs	r3, #1
 8001174:	121b      	asrs	r3, r3, #8
 8001176:	b2db      	uxtb	r3, r3
 8001178:	0018      	movs	r0, r3
 800117a:	f001 fa1d 	bl	80025b8 <LCD_IO_WriteData8>
 800117e:	1dbb      	adds	r3, r7, #6
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	1cbb      	adds	r3, r7, #2
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	18d3      	adds	r3, r2, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3b01      	subs	r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	0018      	movs	r0, r3
 8001194:	f001 fa10 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8001198:	202b      	movs	r0, #43	; 0x2b
 800119a:	f001 f9e7 	bl	800256c <LCD_IO_WriteCmd8>
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	0a1b      	lsrs	r3, r3, #8
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	0018      	movs	r0, r3
 80011aa:	f001 fa05 	bl	80025b8 <LCD_IO_WriteData8>
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	0018      	movs	r0, r3
 80011b6:	f001 f9ff 	bl	80025b8 <LCD_IO_WriteData8>
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	003b      	movs	r3, r7
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	18d3      	adds	r3, r2, r3
 80011c4:	3b01      	subs	r3, #1
 80011c6:	121b      	asrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	0018      	movs	r0, r3
 80011cc:	f001 f9f4 	bl	80025b8 <LCD_IO_WriteData8>
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	003b      	movs	r3, r7
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	18d3      	adds	r3, r2, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	0018      	movs	r0, r3
 80011e6:	f001 f9e7 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bdb0      	pop	{r4, r5, r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	200001d8 	.word	0x200001d8
 80011f8:	200001da 	.word	0x200001da

080011fc <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80011fc:	b5b0      	push	{r4, r5, r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af02      	add	r7, sp, #8
 8001202:	0005      	movs	r5, r0
 8001204:	000c      	movs	r4, r1
 8001206:	0010      	movs	r0, r2
 8001208:	0019      	movs	r1, r3
 800120a:	1dbb      	adds	r3, r7, #6
 800120c:	1c2a      	adds	r2, r5, #0
 800120e:	801a      	strh	r2, [r3, #0]
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	1c22      	adds	r2, r4, #0
 8001214:	801a      	strh	r2, [r3, #0]
 8001216:	1cbb      	adds	r3, r7, #2
 8001218:	1c02      	adds	r2, r0, #0
 800121a:	801a      	strh	r2, [r3, #0]
 800121c:	003b      	movs	r3, r7
 800121e:	1c0a      	adds	r2, r1, #0
 8001220:	801a      	strh	r2, [r3, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 8001222:	003b      	movs	r3, r7
 8001224:	881a      	ldrh	r2, [r3, #0]
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	8819      	ldrh	r1, [r3, #0]
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	8818      	ldrh	r0, [r3, #0]
 800122e:	1dbb      	adds	r3, r7, #6
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	f000 f828 	bl	800128a <ili9488_FillRect>
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bdb0      	pop	{r4, r5, r7, pc}

08001242 <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001242:	b5b0      	push	{r4, r5, r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af02      	add	r7, sp, #8
 8001248:	0005      	movs	r5, r0
 800124a:	000c      	movs	r4, r1
 800124c:	0010      	movs	r0, r2
 800124e:	0019      	movs	r1, r3
 8001250:	1dbb      	adds	r3, r7, #6
 8001252:	1c2a      	adds	r2, r5, #0
 8001254:	801a      	strh	r2, [r3, #0]
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	1c22      	adds	r2, r4, #0
 800125a:	801a      	strh	r2, [r3, #0]
 800125c:	1cbb      	adds	r3, r7, #2
 800125e:	1c02      	adds	r2, r0, #0
 8001260:	801a      	strh	r2, [r3, #0]
 8001262:	003b      	movs	r3, r7
 8001264:	1c0a      	adds	r2, r1, #0
 8001266:	801a      	strh	r2, [r3, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 8001268:	003b      	movs	r3, r7
 800126a:	881a      	ldrh	r2, [r3, #0]
 800126c:	1cbb      	adds	r3, r7, #2
 800126e:	8819      	ldrh	r1, [r3, #0]
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	8818      	ldrh	r0, [r3, #0]
 8001274:	1dbb      	adds	r3, r7, #6
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	0013      	movs	r3, r2
 800127c:	2201      	movs	r2, #1
 800127e:	f000 f804 	bl	800128a <ili9488_FillRect>
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bdb0      	pop	{r4, r5, r7, pc}

0800128a <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 800128a:	b5b0      	push	{r4, r5, r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	0005      	movs	r5, r0
 8001292:	000c      	movs	r4, r1
 8001294:	0010      	movs	r0, r2
 8001296:	0019      	movs	r1, r3
 8001298:	1dbb      	adds	r3, r7, #6
 800129a:	1c2a      	adds	r2, r5, #0
 800129c:	801a      	strh	r2, [r3, #0]
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	1c22      	adds	r2, r4, #0
 80012a2:	801a      	strh	r2, [r3, #0]
 80012a4:	1cbb      	adds	r3, r7, #2
 80012a6:	1c02      	adds	r2, r0, #0
 80012a8:	801a      	strh	r2, [r3, #0]
 80012aa:	003b      	movs	r3, r7
 80012ac:	1c0a      	adds	r2, r1, #0
 80012ae:	801a      	strh	r2, [r3, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80012b0:	003b      	movs	r3, r7
 80012b2:	881c      	ldrh	r4, [r3, #0]
 80012b4:	1cbb      	adds	r3, r7, #2
 80012b6:	881a      	ldrh	r2, [r3, #0]
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	8819      	ldrh	r1, [r3, #0]
 80012bc:	1dbb      	adds	r3, r7, #6
 80012be:	8818      	ldrh	r0, [r3, #0]
 80012c0:	0023      	movs	r3, r4
 80012c2:	f7ff ff1f 	bl	8001104 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80012c6:	202c      	movs	r0, #44	; 0x2c
 80012c8:	f001 f950 	bl	800256c <LCD_IO_WriteCmd8>
  uint32_t XYsize = Xsize * Ysize;
 80012cc:	1cbb      	adds	r3, r7, #2
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	003a      	movs	r2, r7
 80012d2:	8812      	ldrh	r2, [r2, #0]
 80012d4:	4353      	muls	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
  while(XYsize--)
 80012d8:	e005      	b.n	80012e6 <ili9488_FillRect+0x5c>
    ili9488_write16to24(RGBCode);
 80012da:	2320      	movs	r3, #32
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff fe3c 	bl	8000f5e <ili9488_write16to24>
  while(XYsize--)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1e5a      	subs	r2, r3, #1
 80012ea:	60fa      	str	r2, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f4      	bne.n	80012da <ili9488_FillRect+0x50>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b004      	add	sp, #16
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012fc <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	603a      	str	r2, [r7, #0]
 8001304:	1dbb      	adds	r3, r7, #6
 8001306:	1c02      	adds	r2, r0, #0
 8001308:	801a      	strh	r2, [r3, #0]
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	1c0a      	adds	r2, r1, #0
 800130e:	801a      	strh	r2, [r3, #0]
  uint32_t index = 0, size = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	3316      	adds	r3, #22
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b29a      	uxth	r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3317      	adds	r3, #23
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b29b      	uxth	r3, r3
 800132c:	18d3      	adds	r3, r2, r3
 800132e:	b29a      	uxth	r2, r3
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	b29a      	uxth	r2, r3
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	3a01      	subs	r2, #1
 800133c:	801a      	strh	r2, [r3, #0]
  size = *(volatile uint16_t *) (pbmp + 2);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	3302      	adds	r3, #2
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	3304      	adds	r3, #4
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	041b      	lsls	r3, r3, #16
 8001352:	001a      	movs	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4313      	orrs	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	330a      	adds	r3, #10
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	b29b      	uxth	r3, r3
 8001362:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	330c      	adds	r3, #12
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	001a      	movs	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	085b      	lsrs	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	18d3      	adds	r3, r2, r3
 8001386:	603b      	str	r3, [r7, #0]

  ILI9488_LCDMUTEX_PUSH();

  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 8001388:	2036      	movs	r0, #54	; 0x36
 800138a:	f001 f8ef 	bl	800256c <LCD_IO_WriteCmd8>
 800138e:	20a8      	movs	r0, #168	; 0xa8
 8001390:	f001 f912 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yEnd); LCD_IO_WriteData16_to_2x8(ILI9488_MAX_Y - yStart);
 8001394:	202b      	movs	r0, #43	; 0x2b
 8001396:	f001 f8e9 	bl	800256c <LCD_IO_WriteCmd8>
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <ili9488_DrawBitmap+0x124>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	001a      	movs	r2, r3
 80013a0:	2340      	movs	r3, #64	; 0x40
 80013a2:	33ff      	adds	r3, #255	; 0xff
 80013a4:	1a9b      	subs	r3, r3, r2
 80013a6:	121b      	asrs	r3, r3, #8
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	0018      	movs	r0, r3
 80013ac:	f001 f904 	bl	80025b8 <LCD_IO_WriteData8>
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <ili9488_DrawBitmap+0x124>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	223f      	movs	r2, #63	; 0x3f
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	0018      	movs	r0, r3
 80013be:	f001 f8fb 	bl	80025b8 <LCD_IO_WriteData8>
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <ili9488_DrawBitmap+0x128>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	001a      	movs	r2, r3
 80013c8:	2340      	movs	r3, #64	; 0x40
 80013ca:	33ff      	adds	r3, #255	; 0xff
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	121b      	asrs	r3, r3, #8
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	0018      	movs	r0, r3
 80013d4:	f001 f8f0 	bl	80025b8 <LCD_IO_WriteData8>
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <ili9488_DrawBitmap+0x128>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	223f      	movs	r2, #63	; 0x3f
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	0018      	movs	r0, r3
 80013e6:	f001 f8e7 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 80013ea:	202c      	movs	r0, #44	; 0x2c
 80013ec:	f001 f8be 	bl	800256c <LCD_IO_WriteCmd8>
  while(size--)
 80013f0:	e007      	b.n	8001402 <ili9488_DrawBitmap+0x106>
  {
    ili9488_write16to24(*(uint16_t *)pbmp);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fdb1 	bl	8000f5e <ili9488_write16to24>
    pbmp+= 2;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	3302      	adds	r3, #2
 8001400:	603b      	str	r3, [r7, #0]
  while(size--)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1e5a      	subs	r2, r3, #1
 8001406:	60fa      	str	r2, [r7, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f2      	bne.n	80013f2 <ili9488_DrawBitmap+0xf6>
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 800140c:	2036      	movs	r0, #54	; 0x36
 800140e:	f001 f8ad 	bl	800256c <LCD_IO_WriteCmd8>
 8001412:	20e8      	movs	r0, #232	; 0xe8
 8001414:	f001 f8d0 	bl	80025b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b004      	add	sp, #16
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200001da 	.word	0x200001da
 8001424:	200001d8 	.word	0x200001d8

08001428 <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	0005      	movs	r5, r0
 8001430:	000c      	movs	r4, r1
 8001432:	0010      	movs	r0, r2
 8001434:	0019      	movs	r1, r3
 8001436:	1dbb      	adds	r3, r7, #6
 8001438:	1c2a      	adds	r2, r5, #0
 800143a:	801a      	strh	r2, [r3, #0]
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	1c22      	adds	r2, r4, #0
 8001440:	801a      	strh	r2, [r3, #0]
 8001442:	1cbb      	adds	r3, r7, #2
 8001444:	1c02      	adds	r2, r0, #0
 8001446:	801a      	strh	r2, [r3, #0]
 8001448:	003b      	movs	r3, r7
 800144a:	1c0a      	adds	r2, r1, #0
 800144c:	801a      	strh	r2, [r3, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 800144e:	1cbb      	adds	r3, r7, #2
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	003a      	movs	r2, r7
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	4353      	muls	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800145a:	003b      	movs	r3, r7
 800145c:	881c      	ldrh	r4, [r3, #0]
 800145e:	1cbb      	adds	r3, r7, #2
 8001460:	881a      	ldrh	r2, [r3, #0]
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	8819      	ldrh	r1, [r3, #0]
 8001466:	1dbb      	adds	r3, r7, #6
 8001468:	8818      	ldrh	r0, [r3, #0]
 800146a:	0023      	movs	r3, r4
 800146c:	f7ff fe4a 	bl	8001104 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
 8001470:	202c      	movs	r0, #44	; 0x2c
 8001472:	f001 f87b 	bl	800256c <LCD_IO_WriteCmd8>
  while(size--)
 8001476:	e007      	b.n	8001488 <ili9488_DrawRGBImage+0x60>
  {
    ili9488_write16to24(*pdata);
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fd6e 	bl	8000f5e <ili9488_write16to24>
    pdata++;
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	3302      	adds	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
  while(size--)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e5a      	subs	r2, r3, #1
 800148c:	60fa      	str	r2, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f2      	bne.n	8001478 <ili9488_DrawRGBImage+0x50>
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46c0      	nop			; (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b004      	add	sp, #16
 800149a:	bdb0      	pop	{r4, r5, r7, pc}

0800149c <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 800149c:	b5b0      	push	{r4, r5, r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	0005      	movs	r5, r0
 80014a4:	000c      	movs	r4, r1
 80014a6:	0010      	movs	r0, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	1dbb      	adds	r3, r7, #6
 80014ac:	1c2a      	adds	r2, r5, #0
 80014ae:	801a      	strh	r2, [r3, #0]
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	1c22      	adds	r2, r4, #0
 80014b4:	801a      	strh	r2, [r3, #0]
 80014b6:	1cbb      	adds	r3, r7, #2
 80014b8:	1c02      	adds	r2, r0, #0
 80014ba:	801a      	strh	r2, [r3, #0]
 80014bc:	003b      	movs	r3, r7
 80014be:	1c0a      	adds	r2, r1, #0
 80014c0:	801a      	strh	r2, [r3, #0]
  uint32_t size = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 80014c6:	1cbb      	adds	r3, r7, #2
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	003a      	movs	r2, r7
 80014cc:	8812      	ldrh	r2, [r2, #0]
 80014ce:	4353      	muls	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80014d2:	003b      	movs	r3, r7
 80014d4:	881c      	ldrh	r4, [r3, #0]
 80014d6:	1cbb      	adds	r3, r7, #2
 80014d8:	881a      	ldrh	r2, [r3, #0]
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	8819      	ldrh	r1, [r3, #0]
 80014de:	1dbb      	adds	r3, r7, #6
 80014e0:	8818      	ldrh	r0, [r3, #0]
 80014e2:	0023      	movs	r3, r4
 80014e4:	f7ff fe0e 	bl	8001104 <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	6a39      	ldr	r1, [r7, #32]
 80014ec:	2301      	movs	r3, #1
 80014ee:	202e      	movs	r0, #46	; 0x2e
 80014f0:	f001 f948 	bl	8002784 <LCD_IO_ReadCmd8MultipleData24to16>
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b004      	add	sp, #16
 80014fa:	bdb0      	pop	{r4, r5, r7, pc}

080014fc <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	0004      	movs	r4, r0
 8001504:	0008      	movs	r0, r1
 8001506:	0011      	movs	r1, r2
 8001508:	1dbb      	adds	r3, r7, #6
 800150a:	1c22      	adds	r2, r4, #0
 800150c:	801a      	strh	r2, [r3, #0]
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	1c02      	adds	r2, r0, #0
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	1cbb      	adds	r3, r7, #2
 8001516:	1c0a      	adds	r2, r1, #0
 8001518:	801a      	strh	r2, [r3, #0]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 3)
  if((TopFix != scrparam[3]) || (BottonFix != scrparam[1]))
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <ili9488_Scroll+0xe4>)
 800151c:	88db      	ldrh	r3, [r3, #6]
 800151e:	1d3a      	adds	r2, r7, #4
 8001520:	8812      	ldrh	r2, [r2, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d105      	bne.n	8001532 <ili9488_Scroll+0x36>
 8001526:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <ili9488_Scroll+0xe4>)
 8001528:	885b      	ldrh	r3, [r3, #2]
 800152a:	1cba      	adds	r2, r7, #2
 800152c:	8812      	ldrh	r2, [r2, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d019      	beq.n	8001566 <ili9488_Scroll+0x6a>
  {
    scrparam[3] = TopFix;
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <ili9488_Scroll+0xe4>)
 8001534:	1d3a      	adds	r2, r7, #4
 8001536:	8812      	ldrh	r2, [r2, #0]
 8001538:	80da      	strh	r2, [r3, #6]
    scrparam[1] = BottonFix;
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <ili9488_Scroll+0xe4>)
 800153c:	1cba      	adds	r2, r7, #2
 800153e:	8812      	ldrh	r2, [r2, #0]
 8001540:	805a      	strh	r2, [r3, #2]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8001542:	1d3a      	adds	r2, r7, #4
 8001544:	1cbb      	adds	r3, r7, #2
 8001546:	8812      	ldrh	r2, [r2, #0]
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	18d3      	adds	r3, r2, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	22f0      	movs	r2, #240	; 0xf0
 8001550:	0052      	lsls	r2, r2, #1
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <ili9488_Scroll+0xe4>)
 8001558:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <ili9488_Scroll+0xe8>)
 800155c:	2203      	movs	r2, #3
 800155e:	0019      	movs	r1, r3
 8001560:	2033      	movs	r0, #51	; 0x33
 8001562:	f001 f8ab 	bl	80026bc <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll %= scrparam[2];
 8001566:	1dbb      	adds	r3, r7, #6
 8001568:	2200      	movs	r2, #0
 800156a:	5e9a      	ldrsh	r2, [r3, r2]
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <ili9488_Scroll+0xe4>)
 800156e:	889b      	ldrh	r3, [r3, #4]
 8001570:	0019      	movs	r1, r3
 8001572:	0010      	movs	r0, r2
 8001574:	f7fe ff38 	bl	80003e8 <__aeabi_idivmod>
 8001578:	000b      	movs	r3, r1
 800157a:	001a      	movs	r2, r3
 800157c:	1dbb      	adds	r3, r7, #6
 800157e:	801a      	strh	r2, [r3, #0]
  if(Scroll < 0)
 8001580:	1dbb      	adds	r3, r7, #6
 8001582:	2200      	movs	r2, #0
 8001584:	5e9b      	ldrsh	r3, [r3, r2]
 8001586:	2b00      	cmp	r3, #0
 8001588:	da0c      	bge.n	80015a4 <ili9488_Scroll+0xa8>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <ili9488_Scroll+0xe4>)
 800158c:	889a      	ldrh	r2, [r3, #4]
 800158e:	1dbb      	adds	r3, r7, #6
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	18d3      	adds	r3, r2, r3
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <ili9488_Scroll+0xe4>)
 8001598:	885b      	ldrh	r3, [r3, #2]
 800159a:	18d3      	adds	r3, r2, r3
 800159c:	b29a      	uxth	r2, r3
 800159e:	1dbb      	adds	r3, r7, #6
 80015a0:	801a      	strh	r2, [r3, #0]
 80015a2:	e007      	b.n	80015b4 <ili9488_Scroll+0xb8>
  else
    Scroll = Scroll + scrparam[1];
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <ili9488_Scroll+0xe4>)
 80015a6:	885a      	ldrh	r2, [r3, #2]
 80015a8:	1dbb      	adds	r3, r7, #6
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	18d3      	adds	r3, r2, r3
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	1dbb      	adds	r3, r7, #6
 80015b2:	801a      	strh	r2, [r3, #0]
  #endif
  if(Scroll != scrparam[0])
 80015b4:	1dbb      	adds	r3, r7, #6
 80015b6:	2200      	movs	r2, #0
 80015b8:	5e9b      	ldrsh	r3, [r3, r2]
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <ili9488_Scroll+0xe4>)
 80015bc:	8812      	ldrh	r2, [r2, #0]
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00a      	beq.n	80015d8 <ili9488_Scroll+0xdc>
  {
    scrparam[0] = Scroll;
 80015c2:	1dbb      	adds	r3, r7, #6
 80015c4:	881a      	ldrh	r2, [r3, #0]
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <ili9488_Scroll+0xe4>)
 80015c8:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <ili9488_Scroll+0xe4>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	2201      	movs	r2, #1
 80015d0:	0019      	movs	r1, r3
 80015d2:	2037      	movs	r0, #55	; 0x37
 80015d4:	f001 f816 	bl	8002604 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b003      	add	sp, #12
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	200001dc 	.word	0x200001dc
 80015e4:	200001de 	.word	0x200001de

080015e8 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]

  /* LCD Init */   
  lcd_drv->Init();
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <BSP_LCD_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <BSP_LCD_Init+0x44>)
 80015fe:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <BSP_LCD_Init+0x48>)
 8001600:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <BSP_LCD_Init+0x44>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <BSP_LCD_Init+0x44>)
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <BSP_LCD_Init+0x4c>)
 800160c:	609a      	str	r2, [r3, #8]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <BSP_LCD_Init+0x48>)
 8001610:	0018      	movs	r0, r3
 8001612:	f000 f839 	bl	8001688 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
  
  return ret;
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000060 	.word	0x20000060
 800162c:	200001e4 	.word	0x200001e4
 8001630:	0000ffff 	.word	0x0000ffff
 8001634:	20000000 	.word	0x20000000

08001638 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <BSP_LCD_GetXSize+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	4798      	blx	r3
 8001644:	0003      	movs	r3, r0
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000060 	.word	0x20000060

08001650 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <BSP_LCD_GetYSize+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	4798      	blx	r3
 800165c:	0003      	movs	r3, r0
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000060 	.word	0x20000060

08001668 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	0002      	movs	r2, r0
 8001670:	1dbb      	adds	r3, r7, #6
 8001672:	801a      	strh	r2, [r3, #0]
  DrawProp.TextColor = Color;
 8001674:	1dbb      	adds	r3, r7, #6
 8001676:	881a      	ldrh	r2, [r3, #0]
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <BSP_LCD_SetTextColor+0x1c>)
 800167a:	601a      	str	r2, [r3, #0]
}
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b002      	add	sp, #8
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200001e4 	.word	0x200001e4

08001688 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8001688:	b5b0      	push	{r4, r5, r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af02      	add	r7, sp, #8
 800168e:	0002      	movs	r2, r0
 8001690:	1dbb      	adds	r3, r7, #6
 8001692:	801a      	strh	r2, [r3, #0]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <BSP_LCD_Clear+0x3c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800169a:	f7ff ffcd 	bl	8001638 <BSP_LCD_GetXSize>
 800169e:	0003      	movs	r3, r0
 80016a0:	001d      	movs	r5, r3
 80016a2:	f7ff ffd5 	bl	8001650 <BSP_LCD_GetYSize>
 80016a6:	0003      	movs	r3, r0
 80016a8:	001a      	movs	r2, r3
 80016aa:	1dbb      	adds	r3, r7, #6
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	0013      	movs	r3, r2
 80016b2:	002a      	movs	r2, r5
 80016b4:	2100      	movs	r1, #0
 80016b6:	2000      	movs	r0, #0
 80016b8:	47a0      	blx	r4
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	20000060 	.word	0x20000060

080016c8 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	0005      	movs	r5, r0
 80016d0:	000c      	movs	r4, r1
 80016d2:	0010      	movs	r0, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	1dbb      	adds	r3, r7, #6
 80016d8:	1c2a      	adds	r2, r5, #0
 80016da:	801a      	strh	r2, [r3, #0]
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	1c22      	adds	r2, r4, #0
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	1cbb      	adds	r3, r7, #2
 80016e4:	1c02      	adds	r2, r0, #0
 80016e6:	801a      	strh	r2, [r3, #0]
 80016e8:	003b      	movs	r3, r7
 80016ea:	1c0a      	adds	r2, r1, #0
 80016ec:	801a      	strh	r2, [r3, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <BSP_LCD_FillRect+0x54>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <BSP_LCD_FillRect+0x58>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	003a      	movs	r2, r7
 80016fc:	8816      	ldrh	r6, [r2, #0]
 80016fe:	1cba      	adds	r2, r7, #2
 8001700:	8815      	ldrh	r5, [r2, #0]
 8001702:	1d3a      	adds	r2, r7, #4
 8001704:	8811      	ldrh	r1, [r2, #0]
 8001706:	1dba      	adds	r2, r7, #6
 8001708:	8810      	ldrh	r0, [r2, #0]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	0033      	movs	r3, r6
 800170e:	002a      	movs	r2, r5
 8001710:	47a0      	blx	r4
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b003      	add	sp, #12
 8001718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	20000060 	.word	0x20000060
 8001720:	200001e4 	.word	0x200001e4

08001724 <BSP_LCD_DisplayDigits>:
 * @param Ypos 
 * @param Text stream of text containing numbers "0"-"9" or ":"
 * @param Mode 
 */
void BSP_LCD_DisplayDigits(uint16_t Xpos, uint16_t Ypos, uint8_t *Text)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	603a      	str	r2, [r7, #0]
 800172c:	1dbb      	adds	r3, r7, #6
 800172e:	1c02      	adds	r2, r0, #0
 8001730:	801a      	strh	r2, [r3, #0]
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	1c0a      	adds	r2, r1, #0
 8001736:	801a      	strh	r2, [r3, #0]
    uint8_t digit_count = 1;
 8001738:	230f      	movs	r3, #15
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
    uint16_t x = Xpos;
 8001740:	230c      	movs	r3, #12
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	1dba      	adds	r2, r7, #6
 8001746:	8812      	ldrh	r2, [r2, #0]
 8001748:	801a      	strh	r2, [r3, #0]
    while(*Text != NULL){
 800174a:	e03a      	b.n	80017c2 <BSP_LCD_DisplayDigits+0x9e>
      if (*Text == ':') {
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b3a      	cmp	r3, #58	; 0x3a
 8001752:	d115      	bne.n	8001780 <BSP_LCD_DisplayDigits+0x5c>
        BSP_LCD_Colon(x,Ypos+20);
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	3314      	adds	r3, #20
 800175a:	b29a      	uxth	r2, r3
 800175c:	240c      	movs	r4, #12
 800175e:	193b      	adds	r3, r7, r4
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	0011      	movs	r1, r2
 8001764:	0018      	movs	r0, r3
 8001766:	f000 f99b 	bl	8001aa0 <BSP_LCD_Colon>
        x+=30;
 800176a:	193b      	adds	r3, r7, r4
 800176c:	193a      	adds	r2, r7, r4
 800176e:	8812      	ldrh	r2, [r2, #0]
 8001770:	321e      	adds	r2, #30
 8001772:	801a      	strh	r2, [r3, #0]
        Xpos+=30; //next offset should include a small gap from the colon
 8001774:	1dbb      	adds	r3, r7, #6
 8001776:	1dba      	adds	r2, r7, #6
 8001778:	8812      	ldrh	r2, [r2, #0]
 800177a:	321e      	adds	r2, #30
 800177c:	801a      	strh	r2, [r3, #0]
 800177e:	e01d      	b.n	80017bc <BSP_LCD_DisplayDigits+0x98>
        
      }else{
        BSP_LCD_DrawDigits(x ,  Ypos, (*Text)-'0');
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	3b30      	subs	r3, #48	; 0x30
 8001786:	b2da      	uxtb	r2, r3
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	8819      	ldrh	r1, [r3, #0]
 800178c:	240c      	movs	r4, #12
 800178e:	193b      	adds	r3, r7, r4
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	0018      	movs	r0, r3
 8001794:	f000 f81e 	bl	80017d4 <BSP_LCD_DrawDigits>
        x = Xpos + (LCD_SEGMENT_DIGIT_SPACING_OFFSET*digit_count);
 8001798:	200f      	movs	r0, #15
 800179a:	183b      	adds	r3, r7, r0
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	1c1a      	adds	r2, r3, #0
 80017a2:	0192      	lsls	r2, r2, #6
 80017a4:	18d3      	adds	r3, r2, r3
 80017a6:	b299      	uxth	r1, r3
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	1dba      	adds	r2, r7, #6
 80017ac:	8812      	ldrh	r2, [r2, #0]
 80017ae:	188a      	adds	r2, r1, r2
 80017b0:	801a      	strh	r2, [r3, #0]
        digit_count++;
 80017b2:	183b      	adds	r3, r7, r0
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	183b      	adds	r3, r7, r0
 80017b8:	3201      	adds	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
      }
      Text++;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	603b      	str	r3, [r7, #0]
    while(*Text != NULL){
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1c0      	bne.n	800174c <BSP_LCD_DisplayDigits+0x28>
    }
}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b005      	add	sp, #20
 80017d2:	bd90      	pop	{r4, r7, pc}

080017d4 <BSP_LCD_DrawDigits>:
 * 
 * @param xpos 
 * @param ypos 
 * @param digit int number 0-9
 */
void BSP_LCD_DrawDigits(uint16_t xpos,uint16_t ypos, uint8_t digit) {
 80017d4:	b5b0      	push	{r4, r5, r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	0004      	movs	r4, r0
 80017dc:	0008      	movs	r0, r1
 80017de:	0011      	movs	r1, r2
 80017e0:	1dbb      	adds	r3, r7, #6
 80017e2:	1c22      	adds	r2, r4, #0
 80017e4:	801a      	strh	r2, [r3, #0]
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	1c02      	adds	r2, r0, #0
 80017ea:	801a      	strh	r2, [r3, #0]
 80017ec:	1cfb      	adds	r3, r7, #3
 80017ee:	1c0a      	adds	r2, r1, #0
 80017f0:	701a      	strb	r2, [r3, #0]

  volatile uint16_t x[6] = {0};
 80017f2:	2418      	movs	r4, #24
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	0018      	movs	r0, r3
 80017f8:	230c      	movs	r3, #12
 80017fa:	001a      	movs	r2, r3
 80017fc:	2100      	movs	r1, #0
 80017fe:	f002 fd9a 	bl	8004336 <memset>
  volatile uint16_t y[6] = {0};
 8001802:	250c      	movs	r5, #12
 8001804:	197b      	adds	r3, r7, r5
 8001806:	0018      	movs	r0, r3
 8001808:	230c      	movs	r3, #12
 800180a:	001a      	movs	r2, r3
 800180c:	2100      	movs	r1, #0
 800180e:	f002 fd92 	bl	8004336 <memset>
    

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff ff28 	bl	8001668 <BSP_LCD_SetTextColor>
    if (digit>9)return;
 8001818:	1cfb      	adds	r3, r7, #3
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b09      	cmp	r3, #9
 800181e:	d900      	bls.n	8001822 <BSP_LCD_DrawDigits+0x4e>
 8001820:	e133      	b.n	8001a8a <BSP_LCD_DrawDigits+0x2b6>
    if(digit<0) return;
    x[0] = xpos;
 8001822:	193b      	adds	r3, r7, r4
 8001824:	1dba      	adds	r2, r7, #6
 8001826:	8812      	ldrh	r2, [r2, #0]
 8001828:	801a      	strh	r2, [r3, #0]
    x[1] = x[0] - (LCD_SEGMENT_WIDTH + LCD_SEGMENT_GAP);
 800182a:	193b      	adds	r3, r7, r4
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	3b0c      	subs	r3, #12
 8001832:	b29a      	uxth	r2, r3
 8001834:	0021      	movs	r1, r4
 8001836:	187b      	adds	r3, r7, r1
 8001838:	805a      	strh	r2, [r3, #2]
    x[2] = x[1];
 800183a:	187b      	adds	r3, r7, r1
 800183c:	885b      	ldrh	r3, [r3, #2]
 800183e:	b29a      	uxth	r2, r3
 8001840:	187b      	adds	r3, r7, r1
 8001842:	809a      	strh	r2, [r3, #4]
    x[3] = x[0];
 8001844:	187b      	adds	r3, r7, r1
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	b29a      	uxth	r2, r3
 800184a:	187b      	adds	r3, r7, r1
 800184c:	80da      	strh	r2, [r3, #6]
    x[4] = x[0];
 800184e:	187b      	adds	r3, r7, r1
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	b29a      	uxth	r2, r3
 8001854:	187b      	adds	r3, r7, r1
 8001856:	811a      	strh	r2, [r3, #8]
    x[5] = x[0] + LCD_SEGMENT_HEIGHT +LCD_SEGMENT_GAP; 
 8001858:	187b      	adds	r3, r7, r1
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29b      	uxth	r3, r3
 800185e:	3325      	adds	r3, #37	; 0x25
 8001860:	b29a      	uxth	r2, r3
 8001862:	187b      	adds	r3, r7, r1
 8001864:	815a      	strh	r2, [r3, #10]
    x[6] = x[5];
 8001866:	187b      	adds	r3, r7, r1
 8001868:	895b      	ldrh	r3, [r3, #10]
 800186a:	b29a      	uxth	r2, r3
 800186c:	187b      	adds	r3, r7, r1
 800186e:	819a      	strh	r2, [r3, #12]

    y[0] = ypos;
 8001870:	0029      	movs	r1, r5
 8001872:	187b      	adds	r3, r7, r1
 8001874:	1d3a      	adds	r2, r7, #4
 8001876:	8812      	ldrh	r2, [r2, #0]
 8001878:	801a      	strh	r2, [r3, #0]
    y[1] = y[0] + (LCD_SEGMENT_WIDTH/2);
 800187a:	187b      	adds	r3, r7, r1
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	3306      	adds	r3, #6
 8001882:	b29a      	uxth	r2, r3
 8001884:	187b      	adds	r3, r7, r1
 8001886:	805a      	strh	r2, [r3, #2]
    y[2] = y[0] + (LCD_SEGMENT_WIDTH/2) + LCD_SEGMENT_HEIGHT + LCD_SEGMENT_GAP;
 8001888:	187b      	adds	r3, r7, r1
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	b29b      	uxth	r3, r3
 800188e:	332b      	adds	r3, #43	; 0x2b
 8001890:	b29a      	uxth	r2, r3
 8001892:	187b      	adds	r3, r7, r1
 8001894:	809a      	strh	r2, [r3, #4]
    y[3] = y[0] + LCD_SEGMENT_HEIGHT;
 8001896:	187b      	adds	r3, r7, r1
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	3325      	adds	r3, #37	; 0x25
 800189e:	b29a      	uxth	r2, r3
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	80da      	strh	r2, [r3, #6]
    y[4] = y[0]+ (LCD_SEGMENT_HEIGHT*2) + LCD_SEGMENT_GAP;
 80018a4:	187b      	adds	r3, r7, r1
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	334a      	adds	r3, #74	; 0x4a
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	811a      	strh	r2, [r3, #8]
    y[5] = y[2]; 
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	889b      	ldrh	r3, [r3, #4]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	815a      	strh	r2, [r3, #10]
    y[6] = y[1];
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	885b      	ldrh	r3, [r3, #2]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	819a      	strh	r2, [r3, #12]
    uint16_t yrect;
    uint16_t width;
    uint16_t height;

 
  for(uint8_t segment= 0; segment < 7; segment++){
 80018c6:	2327      	movs	r3, #39	; 0x27
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	e0d5      	b.n	8001a7c <BSP_LCD_DrawDigits+0x2a8>
    
       switch(segment){
 80018d0:	2327      	movs	r3, #39	; 0x27
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d900      	bls.n	80018dc <BSP_LCD_DrawDigits+0x108>
 80018da:	e096      	b.n	8001a0a <BSP_LCD_DrawDigits+0x236>
 80018dc:	009a      	lsls	r2, r3, #2
 80018de:	4b6d      	ldr	r3, [pc, #436]	; (8001a94 <BSP_LCD_DrawDigits+0x2c0>)
 80018e0:	18d3      	adds	r3, r2, r3
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	469f      	mov	pc, r3
          case 0: xrect= xpos; yrect=y[0]; width=LCD_SEGMENT_HEIGHT ; height= LCD_SEGMENT_WIDTH; break;
 80018e6:	232e      	movs	r3, #46	; 0x2e
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	1dba      	adds	r2, r7, #6
 80018ec:	8812      	ldrh	r2, [r2, #0]
 80018ee:	801a      	strh	r2, [r3, #0]
 80018f0:	232c      	movs	r3, #44	; 0x2c
 80018f2:	18fb      	adds	r3, r7, r3
 80018f4:	220c      	movs	r2, #12
 80018f6:	18ba      	adds	r2, r7, r2
 80018f8:	8812      	ldrh	r2, [r2, #0]
 80018fa:	801a      	strh	r2, [r3, #0]
 80018fc:	232a      	movs	r3, #42	; 0x2a
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	2225      	movs	r2, #37	; 0x25
 8001902:	801a      	strh	r2, [r3, #0]
 8001904:	2328      	movs	r3, #40	; 0x28
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	220c      	movs	r2, #12
 800190a:	801a      	strh	r2, [r3, #0]
 800190c:	e07d      	b.n	8001a0a <BSP_LCD_DrawDigits+0x236>
          case 1: xrect= x[6]; yrect=y[6]; width=LCD_SEGMENT_WIDTH ; height= LCD_SEGMENT_HEIGHT;break;
 800190e:	232e      	movs	r3, #46	; 0x2e
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	2218      	movs	r2, #24
 8001914:	18ba      	adds	r2, r7, r2
 8001916:	8992      	ldrh	r2, [r2, #12]
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	232c      	movs	r3, #44	; 0x2c
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	220c      	movs	r2, #12
 8001920:	18ba      	adds	r2, r7, r2
 8001922:	8992      	ldrh	r2, [r2, #12]
 8001924:	801a      	strh	r2, [r3, #0]
 8001926:	232a      	movs	r3, #42	; 0x2a
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	220c      	movs	r2, #12
 800192c:	801a      	strh	r2, [r3, #0]
 800192e:	2328      	movs	r3, #40	; 0x28
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2225      	movs	r2, #37	; 0x25
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	e068      	b.n	8001a0a <BSP_LCD_DrawDigits+0x236>
          case 2: xrect= x[5]; yrect=y[5]; width=LCD_SEGMENT_WIDTH ; height= LCD_SEGMENT_HEIGHT;break;
 8001938:	232e      	movs	r3, #46	; 0x2e
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	2218      	movs	r2, #24
 800193e:	18ba      	adds	r2, r7, r2
 8001940:	8952      	ldrh	r2, [r2, #10]
 8001942:	801a      	strh	r2, [r3, #0]
 8001944:	232c      	movs	r3, #44	; 0x2c
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	220c      	movs	r2, #12
 800194a:	18ba      	adds	r2, r7, r2
 800194c:	8952      	ldrh	r2, [r2, #10]
 800194e:	801a      	strh	r2, [r3, #0]
 8001950:	232a      	movs	r3, #42	; 0x2a
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	220c      	movs	r2, #12
 8001956:	801a      	strh	r2, [r3, #0]
 8001958:	2328      	movs	r3, #40	; 0x28
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	2225      	movs	r2, #37	; 0x25
 800195e:	801a      	strh	r2, [r3, #0]
 8001960:	e053      	b.n	8001a0a <BSP_LCD_DrawDigits+0x236>
          case 3: xrect= x[4]; yrect=y[4]; width=LCD_SEGMENT_HEIGHT ; height= LCD_SEGMENT_WIDTH;break;
 8001962:	232e      	movs	r3, #46	; 0x2e
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	2218      	movs	r2, #24
 8001968:	18ba      	adds	r2, r7, r2
 800196a:	8912      	ldrh	r2, [r2, #8]
 800196c:	801a      	strh	r2, [r3, #0]
 800196e:	232c      	movs	r3, #44	; 0x2c
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	220c      	movs	r2, #12
 8001974:	18ba      	adds	r2, r7, r2
 8001976:	8912      	ldrh	r2, [r2, #8]
 8001978:	801a      	strh	r2, [r3, #0]
 800197a:	232a      	movs	r3, #42	; 0x2a
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	2225      	movs	r2, #37	; 0x25
 8001980:	801a      	strh	r2, [r3, #0]
 8001982:	2328      	movs	r3, #40	; 0x28
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	220c      	movs	r2, #12
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	e03e      	b.n	8001a0a <BSP_LCD_DrawDigits+0x236>
          case 4: xrect= x[2]; yrect=y[2]; width=LCD_SEGMENT_WIDTH ; height= LCD_SEGMENT_HEIGHT;break;
 800198c:	232e      	movs	r3, #46	; 0x2e
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	2218      	movs	r2, #24
 8001992:	18ba      	adds	r2, r7, r2
 8001994:	8892      	ldrh	r2, [r2, #4]
 8001996:	801a      	strh	r2, [r3, #0]
 8001998:	232c      	movs	r3, #44	; 0x2c
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	220c      	movs	r2, #12
 800199e:	18ba      	adds	r2, r7, r2
 80019a0:	8892      	ldrh	r2, [r2, #4]
 80019a2:	801a      	strh	r2, [r3, #0]
 80019a4:	232a      	movs	r3, #42	; 0x2a
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	220c      	movs	r2, #12
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	2328      	movs	r3, #40	; 0x28
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	2225      	movs	r2, #37	; 0x25
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	e029      	b.n	8001a0a <BSP_LCD_DrawDigits+0x236>
          case 5: xrect= x[1]; yrect=y[1]; width=LCD_SEGMENT_WIDTH ; height= LCD_SEGMENT_HEIGHT;break;
 80019b6:	232e      	movs	r3, #46	; 0x2e
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	2218      	movs	r2, #24
 80019bc:	18ba      	adds	r2, r7, r2
 80019be:	8852      	ldrh	r2, [r2, #2]
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	232c      	movs	r3, #44	; 0x2c
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	220c      	movs	r2, #12
 80019c8:	18ba      	adds	r2, r7, r2
 80019ca:	8852      	ldrh	r2, [r2, #2]
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	232a      	movs	r3, #42	; 0x2a
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	220c      	movs	r2, #12
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	2328      	movs	r3, #40	; 0x28
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2225      	movs	r2, #37	; 0x25
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	e014      	b.n	8001a0a <BSP_LCD_DrawDigits+0x236>
          case 6: xrect= x[3]; yrect=y[3]; width=LCD_SEGMENT_HEIGHT ; height= LCD_SEGMENT_WIDTH;break;
 80019e0:	232e      	movs	r3, #46	; 0x2e
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2218      	movs	r2, #24
 80019e6:	18ba      	adds	r2, r7, r2
 80019e8:	88d2      	ldrh	r2, [r2, #6]
 80019ea:	801a      	strh	r2, [r3, #0]
 80019ec:	232c      	movs	r3, #44	; 0x2c
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	220c      	movs	r2, #12
 80019f2:	18ba      	adds	r2, r7, r2
 80019f4:	88d2      	ldrh	r2, [r2, #6]
 80019f6:	801a      	strh	r2, [r3, #0]
 80019f8:	232a      	movs	r3, #42	; 0x2a
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2225      	movs	r2, #37	; 0x25
 80019fe:	801a      	strh	r2, [r3, #0]
 8001a00:	2328      	movs	r3, #40	; 0x28
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	220c      	movs	r2, #12
 8001a06:	801a      	strh	r2, [r3, #0]
 8001a08:	46c0      	nop			; (mov r8, r8)
          default:;
        }
    
      if(digit_segment[digit] &(0x1<<segment)){
 8001a0a:	1cfb      	adds	r3, r7, #3
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4a22      	ldr	r2, [pc, #136]	; (8001a98 <BSP_LCD_DrawDigits+0x2c4>)
 8001a10:	5cd3      	ldrb	r3, [r2, r3]
 8001a12:	001a      	movs	r2, r3
 8001a14:	2327      	movs	r3, #39	; 0x27
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	411a      	asrs	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4013      	ands	r3, r2
 8001a22:	d012      	beq.n	8001a4a <BSP_LCD_DrawDigits+0x276>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff fe1f 	bl	8001668 <BSP_LCD_SetTextColor>
         BSP_LCD_FillRect(xrect,yrect, width, height ); 
 8001a2a:	2328      	movs	r3, #40	; 0x28
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	881c      	ldrh	r4, [r3, #0]
 8001a30:	232a      	movs	r3, #42	; 0x2a
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	881a      	ldrh	r2, [r3, #0]
 8001a36:	232c      	movs	r3, #44	; 0x2c
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	8819      	ldrh	r1, [r3, #0]
 8001a3c:	232e      	movs	r3, #46	; 0x2e
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	8818      	ldrh	r0, [r3, #0]
 8001a42:	0023      	movs	r3, r4
 8001a44:	f7ff fe40 	bl	80016c8 <BSP_LCD_FillRect>
 8001a48:	e012      	b.n	8001a70 <BSP_LCD_DrawDigits+0x29c>
      }
      else{
           BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <BSP_LCD_DrawDigits+0x2c8>)
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff fe0b 	bl	8001668 <BSP_LCD_SetTextColor>
           BSP_LCD_FillRect(xrect,yrect, width, height );
 8001a52:	2328      	movs	r3, #40	; 0x28
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	881c      	ldrh	r4, [r3, #0]
 8001a58:	232a      	movs	r3, #42	; 0x2a
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	232c      	movs	r3, #44	; 0x2c
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	8819      	ldrh	r1, [r3, #0]
 8001a64:	232e      	movs	r3, #46	; 0x2e
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	8818      	ldrh	r0, [r3, #0]
 8001a6a:	0023      	movs	r3, r4
 8001a6c:	f7ff fe2c 	bl	80016c8 <BSP_LCD_FillRect>
  for(uint8_t segment= 0; segment < 7; segment++){
 8001a70:	2127      	movs	r1, #39	; 0x27
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	3201      	adds	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	2327      	movs	r3, #39	; 0x27
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d800      	bhi.n	8001a88 <BSP_LCD_DrawDigits+0x2b4>
 8001a86:	e723      	b.n	80018d0 <BSP_LCD_DrawDigits+0xfc>
 8001a88:	e000      	b.n	8001a8c <BSP_LCD_DrawDigits+0x2b8>
    if (digit>9)return;
 8001a8a:	46c0      	nop			; (mov r8, r8)
      }
    }
}
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b00c      	add	sp, #48	; 0x30
 8001a90:	bdb0      	pop	{r4, r5, r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	080046d0 	.word	0x080046d0
 8001a98:	080046c4 	.word	0x080046c4
 8001a9c:	0000ffff 	.word	0x0000ffff

08001aa0 <BSP_LCD_Colon>:

void BSP_LCD_Colon(uint16_t xpos,uint16_t ypos){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	1dbb      	adds	r3, r7, #6
 8001aaa:	801a      	strh	r2, [r3, #0]
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	1c0a      	adds	r2, r1, #0
 8001ab0:	801a      	strh	r2, [r3, #0]
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001ab2:	23f8      	movs	r3, #248	; 0xf8
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7ff fdd6 	bl	8001668 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(xpos, ypos,  LCD_COLON_WIDTH,LCD_COLON_WIDTH );
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	8819      	ldrh	r1, [r3, #0]
 8001ac0:	1dbb      	adds	r3, r7, #6
 8001ac2:	8818      	ldrh	r0, [r3, #0]
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	f7ff fdfe 	bl	80016c8 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(xpos, ypos+20,  LCD_COLON_WIDTH,LCD_COLON_WIDTH ); 
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	3314      	adds	r3, #20
 8001ad2:	b299      	uxth	r1, r3
 8001ad4:	1dbb      	adds	r3, r7, #6
 8001ad6:	8818      	ldrh	r0, [r3, #0]
 8001ad8:	230c      	movs	r3, #12
 8001ada:	220c      	movs	r2, #12
 8001adc:	f7ff fdf4 	bl	80016c8 <BSP_LCD_FillRect>
}
 8001ae0:	46c0      	nop			; (mov r8, r8)
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	0002      	movs	r2, r0
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	1dfb      	adds	r3, r7, #7
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b7f      	cmp	r3, #127	; 0x7f
 8001afa:	d809      	bhi.n	8001b10 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	001a      	movs	r2, r3
 8001b02:	231f      	movs	r3, #31
 8001b04:	401a      	ands	r2, r3
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_EnableIRQ+0x30>)
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4091      	lsls	r1, r2
 8001b0c:	000a      	movs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
  }
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	0002      	movs	r2, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b30:	d828      	bhi.n	8001b84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b32:	4a2f      	ldr	r2, [pc, #188]	; (8001bf0 <__NVIC_SetPriority+0xd4>)
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	33c0      	adds	r3, #192	; 0xc0
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	589b      	ldr	r3, [r3, r2]
 8001b42:	1dfa      	adds	r2, r7, #7
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	0011      	movs	r1, r2
 8001b48:	2203      	movs	r2, #3
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	00d2      	lsls	r2, r2, #3
 8001b4e:	21ff      	movs	r1, #255	; 0xff
 8001b50:	4091      	lsls	r1, r2
 8001b52:	000a      	movs	r2, r1
 8001b54:	43d2      	mvns	r2, r2
 8001b56:	401a      	ands	r2, r3
 8001b58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	019b      	lsls	r3, r3, #6
 8001b5e:	22ff      	movs	r2, #255	; 0xff
 8001b60:	401a      	ands	r2, r3
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	0018      	movs	r0, r3
 8001b68:	2303      	movs	r3, #3
 8001b6a:	4003      	ands	r3, r0
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b70:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <__NVIC_SetPriority+0xd4>)
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	33c0      	adds	r3, #192	; 0xc0
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b82:	e031      	b.n	8001be8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b84:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <__NVIC_SetPriority+0xd8>)
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	230f      	movs	r3, #15
 8001b8e:	400b      	ands	r3, r1
 8001b90:	3b08      	subs	r3, #8
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3306      	adds	r3, #6
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	18d3      	adds	r3, r2, r3
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1dfa      	adds	r2, r7, #7
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	00d2      	lsls	r2, r2, #3
 8001baa:	21ff      	movs	r1, #255	; 0xff
 8001bac:	4091      	lsls	r1, r2
 8001bae:	000a      	movs	r2, r1
 8001bb0:	43d2      	mvns	r2, r2
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	019b      	lsls	r3, r3, #6
 8001bba:	22ff      	movs	r2, #255	; 0xff
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	1dfb      	adds	r3, r7, #7
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	4003      	ands	r3, r0
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bcc:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <__NVIC_SetPriority+0xd8>)
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	001c      	movs	r4, r3
 8001bd4:	230f      	movs	r3, #15
 8001bd6:	4023      	ands	r3, r4
 8001bd8:	3b08      	subs	r3, #8
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	3306      	adds	r3, #6
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	18c3      	adds	r3, r0, r3
 8001be4:	3304      	adds	r3, #4
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b003      	add	sp, #12
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <LcdDirRead>:

#elif   LCD_SPI_MODE == 2
/* Fullduplex SPI : the direction is fix */
extern inline void LcdDirRead(uint32_t d);
inline void LcdDirRead(uint32_t d)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <LcdDirRead+0x68>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <LcdDirRead+0x6c>)
 8001c06:	401a      	ands	r2, r3
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <LcdDirRead+0x68>)
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	04c9      	lsls	r1, r1, #19
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
  while(d--)
 8001c12:	e00a      	b.n	8001c2a <LcdDirRead+0x32>
  {
    GPIOX_CLR(LCD_SCK);
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <LcdDirRead+0x68>)
 8001c16:	2280      	movs	r2, #128	; 0x80
 8001c18:	0592      	lsls	r2, r2, #22
 8001c1a:	619a      	str	r2, [r3, #24]
    LCD_READ_DELAY;
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f000 fba3 	bl	8002368 <LCD_IO_Delay>
    GPIOX_SET(LCD_SCK);
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <LcdDirRead+0x68>)
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	0192      	lsls	r2, r2, #6
 8001c28:	619a      	str	r2, [r3, #24]
  while(d--)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1ef      	bne.n	8001c14 <LcdDirRead+0x1c>
  }
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <LcdDirRead+0x68>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <LcdDirRead+0x6c>)
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <LcdDirRead+0x68>)
 8001c3e:	2180      	movs	r1, #128	; 0x80
 8001c40:	0509      	lsls	r1, r1, #20
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_READ << SPI_CR1_BR_Pos);
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <LcdDirRead+0x70>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2238      	movs	r2, #56	; 0x38
 8001c4c:	4393      	bics	r3, r2
 8001c4e:	001a      	movs	r2, r3
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <LcdDirRead+0x70>)
 8001c52:	2118      	movs	r1, #24
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	48000400 	.word	0x48000400
 8001c64:	f3ffffff 	.word	0xf3ffffff
 8001c68:	40003800 	.word	0x40003800

08001c6c <LcdDirWrite>:

extern inline void LcdDirWrite(void);
inline void LcdDirWrite(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <LcdDirWrite+0x1c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2238      	movs	r2, #56	; 0x38
 8001c76:	4393      	bics	r3, r2
 8001c78:	001a      	movs	r2, r3
 8001c7a:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <LcdDirWrite+0x1c>)
 8001c7c:	2108      	movs	r1, #8
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]
}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40003800 	.word	0x40003800

08001c8c <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	0002      	movs	r2, r0
 8001c94:	1dfb      	adds	r3, r7, #7
 8001c96:	701a      	strb	r2, [r3, #0]
  *(volatile uint8_t *)&SPIX->DR = d8;
 8001c98:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <LcdWrite8+0x30>)
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	7013      	strb	r3, [r2, #0]
  LCD_IO_Delay(0);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f000 fb61 	bl	8002368 <LCD_IO_Delay>
  while(SPIX->SR & SPI_SR_BSY);
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <LcdWrite8+0x34>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d1fa      	bne.n	8001ca8 <LcdWrite8+0x1c>
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	4000380c 	.word	0x4000380c
 8001cc0:	40003800 	.word	0x40003800

08001cc4 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	0002      	movs	r2, r0
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	701a      	strb	r2, [r3, #0]
  LCD_RS_CMD;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <LcdCmdWrite8+0x40>)
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	0512      	lsls	r2, r2, #20
 8001cd6:	619a      	str	r2, [r3, #24]
  *(volatile uint8_t *)&SPIX->DR = cmd8;
 8001cd8:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <LcdCmdWrite8+0x44>)
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	7013      	strb	r3, [r2, #0]
  LCD_IO_Delay(0);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f000 fb41 	bl	8002368 <LCD_IO_Delay>
  while(SPIX->SR & SPI_SR_BSY);
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <LcdCmdWrite8+0x48>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d1fa      	bne.n	8001ce8 <LcdCmdWrite8+0x24>
  LCD_RS_DATA;
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <LcdCmdWrite8+0x40>)
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	48000400 	.word	0x48000400
 8001d08:	4000380c 	.word	0x4000380c
 8001d0c:	40003800 	.word	0x40003800

08001d10 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <WaitForDmaEnd+0x18>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1fb      	bne.n	8001d16 <WaitForDmaEnd+0x6>
}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	200001f0 	.word	0x200001f0

08001d2c <Dma_irq_tx>:
//-----------------------------------------------------------------------------
/* SPI TX on DMA */

extern inline void Dma_irq_tx(void);
inline void Dma_irq_tx(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <Dma_irq_tx+0x70>)
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	0292      	lsls	r2, r2, #10
 8001d36:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <Dma_irq_tx+0x74>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <Dma_irq_tx+0x74>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2201      	movs	r2, #1
 8001d46:	4013      	ands	r3, r2
 8001d48:	d1fa      	bne.n	8001d40 <Dma_irq_tx+0x14>
  SPIX->CR2 &= ~SPI_CR2_TXDMAEN;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <Dma_irq_tx+0x78>)
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <Dma_irq_tx+0x78>)
 8001d50:	2102      	movs	r1, #2
 8001d52:	438a      	bics	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]
  while(SPIX->SR & SPI_SR_BSY);
 8001d56:	46c0      	nop			; (mov r8, r8)
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <Dma_irq_tx+0x78>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d1fa      	bne.n	8001d58 <Dma_irq_tx+0x2c>
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <Dma_irq_tx+0x78>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <Dma_irq_tx+0x78>)
 8001d68:	2140      	movs	r1, #64	; 0x40
 8001d6a:	438a      	bics	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f000 fafa 	bl	8002368 <LCD_IO_Delay>
  SPIX->CR1 |= SPI_CR1_SPE;
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <Dma_irq_tx+0x78>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <Dma_irq_tx+0x78>)
 8001d7a:	2140      	movs	r1, #64	; 0x40
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

  if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <Dma_irq_tx+0x7c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d103      	bne.n	8001d90 <Dma_irq_tx+0x64>
    LCD_CS_OFF;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <Dma_irq_tx+0x80>)
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	0152      	lsls	r2, r2, #5
 8001d8e:	619a      	str	r2, [r3, #24]

  #ifndef osFeature_Semaphore
  /* no FreeRtos */
  LCD_IO_DmaTransferStatus = 0;
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <Dma_irq_tx+0x7c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
  #else
  /* FreeRtos */
  osSemaphoreRelease(spiDmaBinSemHandle);
  #endif // #else osFeature_Semaphore
}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020058 	.word	0x40020058
 8001da4:	40003800 	.word	0x40003800
 8001da8:	200001f0 	.word	0x200001f0
 8001dac:	48000400 	.word	0x48000400

08001db0 <LCD_IO_WriteMultiData>:
}
#endif

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <LCD_IO_WriteMultiData+0x78>)
 8001dbe:	2280      	movs	r2, #128	; 0x80
 8001dc0:	0252      	lsls	r2, r2, #9
 8001dc2:	605a      	str	r2, [r3, #4]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <LCD_IO_WriteMultiData+0x7c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <LCD_IO_WriteMultiData+0x7c>)
 8001dca:	2140      	movs	r1, #64	; 0x40
 8001dcc:	438a      	bics	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;   /* DMA stop */
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <LCD_IO_WriteMultiData+0x80>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <LCD_IO_WriteMultiData+0x80>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4013      	ands	r3, r2
 8001de0:	d1fa      	bne.n	8001dd8 <LCD_IO_WriteMultiData+0x28>
  DMAX_CHANNEL(LCD_DMA_TX)->CMAR = (uint32_t)pData;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <LCD_IO_WriteMultiData+0x80>)
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_TX)->CPAR = (uint32_t)&SPIX->DR;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <LCD_IO_WriteMultiData+0x80>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <LCD_IO_WriteMultiData+0x84>)
 8001dec:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_TX)->CNDTR = Size;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <LCD_IO_WriteMultiData+0x80>)
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = dmacr;
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <LCD_IO_WriteMultiData+0x80>)
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR |= DMA_CCR_EN;
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <LCD_IO_WriteMultiData+0x80>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <LCD_IO_WriteMultiData+0x80>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	430a      	orrs	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]
  SPIX->CR2 |= SPI_CR2_TXDMAEN;
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <LCD_IO_WriteMultiData+0x7c>)
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <LCD_IO_WriteMultiData+0x7c>)
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	605a      	str	r2, [r3, #4]
  SPIX->CR1 |= SPI_CR1_SPE;
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <LCD_IO_WriteMultiData+0x7c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <LCD_IO_WriteMultiData+0x7c>)
 8001e18:	2140      	movs	r1, #64	; 0x40
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]
}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b004      	add	sp, #16
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	40020000 	.word	0x40020000
 8001e2c:	40003800 	.word	0x40003800
 8001e30:	40020058 	.word	0x40020058
 8001e34:	4000380c 	.word	0x4000380c

08001e38 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d108      	bne.n	8001e5c <LCD_IO_WriteMultiData8+0x24>
  {
    d8s = *pData;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <LCD_IO_WriteMultiData8+0x94>)
 8001e50:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <LCD_IO_WriteMultiData8+0x94>)
 8001e54:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <LCD_IO_WriteMultiData8+0x98>)
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e02f      	b.n	8001ebc <LCD_IO_WriteMultiData8+0x84>
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) |
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <LCD_IO_WriteMultiData8+0x9c>)
 8001e5e:	617b      	str	r3, [r7, #20]
            (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8001e60:	e02c      	b.n	8001ebc <LCD_IO_WriteMultiData8+0x84>
  {
    if(Size <= DMA_MAXSIZE)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <LCD_IO_WriteMultiData8+0xa0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d810      	bhi.n	8001e8c <LCD_IO_WriteMultiData8+0x54>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <LCD_IO_WriteMultiData8+0xa4>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	0018      	movs	r0, r3
 8001e78:	f7ff ff9a 	bl	8001db0 <LCD_IO_WriteMultiData>
      Size = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01a      	beq.n	8001ebc <LCD_IO_WriteMultiData8+0x84>
        WaitForDmaEnd();
 8001e86:	f7ff ff43 	bl	8001d10 <WaitForDmaEnd>
 8001e8a:	e017      	b.n	8001ebc <LCD_IO_WriteMultiData8+0x84>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <LCD_IO_WriteMultiData8+0xa4>)
 8001e8e:	2202      	movs	r2, #2
 8001e90:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4910      	ldr	r1, [pc, #64]	; (8001ed8 <LCD_IO_WriteMultiData8+0xa0>)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff ff89 	bl	8001db0 <LCD_IO_WriteMultiData>
      if(dinc)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <LCD_IO_WriteMultiData8+0x76>
        pData+= DMA_MAXSIZE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <LCD_IO_WriteMultiData8+0xa0>)
 8001ea8:	4694      	mov	ip, r2
 8001eaa:	4463      	add	r3, ip
 8001eac:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <LCD_IO_WriteMultiData8+0xa8>)
 8001eb2:	4694      	mov	ip, r2
 8001eb4:	4463      	add	r3, ip
 8001eb6:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001eb8:	f7ff ff2a 	bl	8001d10 <WaitForDmaEnd>
  while(Size)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1cf      	bne.n	8001e62 <LCD_IO_WriteMultiData8+0x2a>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46c0      	nop			; (mov r8, r8)
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b006      	add	sp, #24
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200001f4 	.word	0x200001f4
 8001ed0:	00001012 	.word	0x00001012
 8001ed4:	00001092 	.word	0x00001092
 8001ed8:	0000fffe 	.word	0x0000fffe
 8001edc:	200001f0 	.word	0x200001f0
 8001ee0:	ffff0002 	.word	0xffff0002

08001ee4 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d108      	bne.n	8001f08 <LCD_IO_WriteMultiData16+0x24>
  {
    d16s = *pData;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	881a      	ldrh	r2, [r3, #0]
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <LCD_IO_WriteMultiData16+0xd4>)
 8001efc:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <LCD_IO_WriteMultiData16+0xd4>)
 8001f00:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8001f02:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <LCD_IO_WriteMultiData16+0xd8>)
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e04e      	b.n	8001fa6 <LCD_IO_WriteMultiData16+0xc2>
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (0 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);
  }
  else
    dmacr = DMA_CCR_TCIE | (1 << DMA_CCR_MSIZE_Pos) |
 8001f08:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <LCD_IO_WriteMultiData16+0xdc>)
 8001f0a:	617b      	str	r3, [r7, #20]
            (1 << DMA_CCR_PSIZE_Pos) | DMA_CCR_DIR | (1 << DMA_CCR_MINC_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_CCR_PL_Pos);

  while(Size)
 8001f0c:	e04b      	b.n	8001fa6 <LCD_IO_WriteMultiData16+0xc2>
  {
    if(Size <= DMA_MAXSIZE)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	4a2c      	ldr	r2, [pc, #176]	; (8001fc4 <LCD_IO_WriteMultiData16+0xe0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d810      	bhi.n	8001f38 <LCD_IO_WriteMultiData16+0x54>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <LCD_IO_WriteMultiData16+0xe4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7ff ff44 	bl	8001db0 <LCD_IO_WriteMultiData>
      Size = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d039      	beq.n	8001fa6 <LCD_IO_WriteMultiData16+0xc2>
        WaitForDmaEnd();
 8001f32:	f7ff feed 	bl	8001d10 <WaitForDmaEnd>
 8001f36:	e036      	b.n	8001fa6 <LCD_IO_WriteMultiData16+0xc2>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <LCD_IO_WriteMultiData16+0xe8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d81a      	bhi.n	8001f76 <LCD_IO_WriteMultiData16+0x92>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <LCD_IO_WriteMultiData16+0xe4>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4a21      	ldr	r2, [pc, #132]	; (8001fd0 <LCD_IO_WriteMultiData16+0xec>)
 8001f4a:	1899      	adds	r1, r3, r2
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff ff2d 	bl	8001db0 <LCD_IO_WriteMultiData>
      if(dinc)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <LCD_IO_WriteMultiData16+0x88>
        pData+= Size - DMA_MAXSIZE;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <LCD_IO_WriteMultiData16+0xf0>)
 8001f60:	4694      	mov	ip, r2
 8001f62:	4463      	add	r3, ip
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	18d3      	adds	r3, r2, r3
 8001f6a:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <LCD_IO_WriteMultiData16+0xe0>)
 8001f6e:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001f70:	f7ff fece 	bl	8001d10 <WaitForDmaEnd>
 8001f74:	e017      	b.n	8001fa6 <LCD_IO_WriteMultiData16+0xc2>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <LCD_IO_WriteMultiData16+0xe4>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	4911      	ldr	r1, [pc, #68]	; (8001fc4 <LCD_IO_WriteMultiData16+0xe0>)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7ff ff14 	bl	8001db0 <LCD_IO_WriteMultiData>
      if(dinc)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <LCD_IO_WriteMultiData16+0xb4>
        pData+= DMA_MAXSIZE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <LCD_IO_WriteMultiData16+0xf4>)
 8001f92:	4694      	mov	ip, r2
 8001f94:	4463      	add	r3, ip
 8001f96:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <LCD_IO_WriteMultiData16+0xec>)
 8001f9c:	4694      	mov	ip, r2
 8001f9e:	4463      	add	r3, ip
 8001fa0:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT != 2
      WaitForDmaEnd();
 8001fa2:	f7ff feb5 	bl	8001d10 <WaitForDmaEnd>
  while(Size)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1b0      	bne.n	8001f0e <LCD_IO_WriteMultiData16+0x2a>
    }
    #if LCD_DMA_TXWAIT == 2
    WaitForDmaEnd();
    #endif
  }
}
 8001fac:	46c0      	nop			; (mov r8, r8)
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b006      	add	sp, #24
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	200001f6 	.word	0x200001f6
 8001fbc:	00001512 	.word	0x00001512
 8001fc0:	00001592 	.word	0x00001592
 8001fc4:	0000fffe 	.word	0x0000fffe
 8001fc8:	200001f0 	.word	0x200001f0
 8001fcc:	0001fffb 	.word	0x0001fffb
 8001fd0:	ffff0002 	.word	0xffff0002
 8001fd4:	7fff0002 	.word	0x7fff0002
 8001fd8:	0001fffc 	.word	0x0001fffc

08001fdc <Dma_irq_rx>:
//-----------------------------------------------------------------------------
/* SPI RX on DMA */

extern inline void Dma_irq_rx(void);
inline void Dma_irq_rx(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  volatile uint8_t d8 __attribute__((unused));
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <Dma_irq_rx+0x90>)
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	0192      	lsls	r2, r2, #6
 8001fe8:	605a      	str	r2, [r3, #4]
  SPIX->CR2 &= ~SPI_CR2_RXDMAEN; /* SPI DMA tilt */
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <Dma_irq_rx+0x94>)
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <Dma_irq_rx+0x94>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	438a      	bics	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
  while(SPIX->SR & SPI_SR_RXNE)
 8001ff6:	e003      	b.n	8002000 <Dma_irq_rx+0x24>
    d8 = *(uint8_t *)&SPIX->DR;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <Dma_irq_rx+0x98>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	701a      	strb	r2, [r3, #0]
  while(SPIX->SR & SPI_SR_RXNE)
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <Dma_irq_rx+0x94>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	d1f6      	bne.n	8001ff8 <Dma_irq_rx+0x1c>
  SPIX->CR1 &= ~SPI_CR1_SPE;
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <Dma_irq_rx+0x94>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <Dma_irq_rx+0x94>)
 8002010:	2140      	movs	r1, #64	; 0x40
 8002012:	438a      	bics	r2, r1
 8002014:	601a      	str	r2, [r3, #0]
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <Dma_irq_rx+0x94>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <Dma_irq_rx+0x9c>)
 800201c:	401a      	ands	r2, r3
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <Dma_irq_rx+0x94>)
 8002020:	4916      	ldr	r1, [pc, #88]	; (800207c <Dma_irq_rx+0xa0>)
 8002022:	430a      	orrs	r2, r1
 8002024:	601a      	str	r2, [r3, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8002026:	2001      	movs	r0, #1
 8002028:	f000 f99e 	bl	8002368 <LCD_IO_Delay>
  while(SPIX->SR & SPI_SR_RXNE)
 800202c:	e003      	b.n	8002036 <Dma_irq_rx+0x5a>
    d8 = *(uint8_t *)&SPIX->DR;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <Dma_irq_rx+0x98>)
 8002030:	781a      	ldrb	r2, [r3, #0]
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	701a      	strb	r2, [r3, #0]
  while(SPIX->SR & SPI_SR_RXNE)
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <Dma_irq_rx+0x94>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2201      	movs	r2, #1
 800203c:	4013      	ands	r3, r2
 800203e:	d1f6      	bne.n	800202e <Dma_irq_rx+0x52>
  SPIX->CR1 |= SPI_CR1_SPE;
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <Dma_irq_rx+0x94>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <Dma_irq_rx+0x94>)
 8002046:	2140      	movs	r1, #64	; 0x40
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <Dma_irq_rx+0xa4>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <Dma_irq_rx+0xa4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d1fa      	bne.n	8002054 <Dma_irq_rx+0x78>

  #ifndef osFeature_Semaphore
  /* no FreeRtos */
  LCD_IO_DmaTransferStatus = 0;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <Dma_irq_rx+0xa8>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
  #else  /* #ifndef osFeature_Semaphore */
  /* FreeRtos */
  osSemaphoreRelease(spiDmaBinSemHandle);
  #endif /* #else osFeature_Semaphore */
}
 8002064:	46c0      	nop			; (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40020000 	.word	0x40020000
 8002070:	40003800 	.word	0x40003800
 8002074:	4000380c 	.word	0x4000380c
 8002078:	ffffbfc7 	.word	0xffffbfc7
 800207c:	00004008 	.word	0x00004008
 8002080:	40020044 	.word	0x40020044
 8002084:	200001f0 	.word	0x200001f0

08002088 <DMA1_Channel4_5_IRQHandler>:
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
#else
/* TX-RX DMA are on shared DMA interrupt handler */
void DMAX_CHANNEL_IRQHANDLER(LCD_DMA_TX)(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <DMA1_Channel4_5_IRQHandler+0x58>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	029b      	lsls	r3, r3, #10
 8002094:	4013      	ands	r3, r2
 8002096:	d002      	beq.n	800209e <DMA1_Channel4_5_IRQHandler+0x16>
    Dma_irq_tx();
 8002098:	f7ff fe48 	bl	8001d2c <Dma_irq_tx>
 800209c:	e009      	b.n	80020b2 <DMA1_Channel4_5_IRQHandler+0x2a>
  else if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_GIF(LCD_DMA_TX))
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <DMA1_Channel4_5_IRQHandler+0x58>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	025b      	lsls	r3, r3, #9
 80020a6:	4013      	ands	r3, r2
 80020a8:	d003      	beq.n	80020b2 <DMA1_Channel4_5_IRQHandler+0x2a>
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <DMA1_Channel4_5_IRQHandler+0x58>)
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	0252      	lsls	r2, r2, #9
 80020b0:	605a      	str	r2, [r3, #4]

  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <DMA1_Channel4_5_IRQHandler+0x58>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	019b      	lsls	r3, r3, #6
 80020ba:	4013      	ands	r3, r2
 80020bc:	d002      	beq.n	80020c4 <DMA1_Channel4_5_IRQHandler+0x3c>
    Dma_irq_rx();
 80020be:	f7ff ff8d 	bl	8001fdc <Dma_irq_rx>
  else if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_GIF(LCD_DMA_RX))
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
}
 80020c2:	e009      	b.n	80020d8 <DMA1_Channel4_5_IRQHandler+0x50>
  else if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_GIF(LCD_DMA_RX))
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <DMA1_Channel4_5_IRQHandler+0x58>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	015b      	lsls	r3, r3, #5
 80020cc:	4013      	ands	r3, r2
 80020ce:	d003      	beq.n	80020d8 <DMA1_Channel4_5_IRQHandler+0x50>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <DMA1_Channel4_5_IRQHandler+0x58>)
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	0152      	lsls	r2, r2, #5
 80020d6:	605a      	str	r2, [r3, #4]
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	40020000 	.word	0x40020000

080020e4 <LCD_IO_ReadMultiData>:
#endif

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <LCD_IO_ReadMultiData+0x60>)
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	0152      	lsls	r2, r2, #5
 80020f6:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <LCD_IO_ReadMultiData+0x64>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <LCD_IO_ReadMultiData+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2201      	movs	r2, #1
 8002106:	4013      	ands	r3, r2
 8002108:	d1fa      	bne.n	8002100 <LCD_IO_ReadMultiData+0x1c>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)pData;  /* memory addr */
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <LCD_IO_ReadMultiData+0x64>)
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR; /* periph addr */
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <LCD_IO_ReadMultiData+0x64>)
 8002112:	4a0e      	ldr	r2, [pc, #56]	; (800214c <LCD_IO_ReadMultiData+0x68>)
 8002114:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = Size;           /* number of data */
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <LCD_IO_ReadMultiData+0x64>)
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = dmacr;
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <LCD_IO_ReadMultiData+0x64>)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;    /* DMA start */
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <LCD_IO_ReadMultiData+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <LCD_IO_ReadMultiData+0x64>)
 8002128:	2101      	movs	r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]
  SPIX->CR2 |= SPI_CR2_RXDMAEN;                   /* SPI DMA on */
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <LCD_IO_ReadMultiData+0x6c>)
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <LCD_IO_ReadMultiData+0x6c>)
 8002134:	2101      	movs	r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]
}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	46bd      	mov	sp, r7
 800213e:	b004      	add	sp, #16
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	40020000 	.word	0x40020000
 8002148:	40020044 	.word	0x40020044
 800214c:	4000380c 	.word	0x4000380c
 8002150:	40003800 	.word	0x40003800

08002154 <LCD_IO_ReadMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData8(uint8_t * pData, uint32_t Size)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t dmacr;
  dmacr = DMA_CCR_TCIE | (0 << DMA_CCR_MSIZE_Pos) | (0 << DMA_CCR_PSIZE_Pos) |
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <LCD_IO_ReadMultiData8+0x74>)
 8002160:	60fb      	str	r3, [r7, #12]
          DMA_CCR_MINC | (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos);

  while(Size)
 8002162:	e024      	b.n	80021ae <LCD_IO_ReadMultiData8+0x5a>
  {
    if(Size > DMA_MAXSIZE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4a19      	ldr	r2, [pc, #100]	; (80021cc <LCD_IO_ReadMultiData8+0x78>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d913      	bls.n	8002194 <LCD_IO_ReadMultiData8+0x40>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <LCD_IO_ReadMultiData8+0x7c>)
 800216e:	2202      	movs	r2, #2
 8002170:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4915      	ldr	r1, [pc, #84]	; (80021cc <LCD_IO_ReadMultiData8+0x78>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff ffb3 	bl	80020e4 <LCD_IO_ReadMultiData>
      Size-= DMA_MAXSIZE;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <LCD_IO_ReadMultiData8+0x80>)
 8002182:	4694      	mov	ip, r2
 8002184:	4463      	add	r3, ip
 8002186:	603b      	str	r3, [r7, #0]
      pData+= DMA_MAXSIZE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <LCD_IO_ReadMultiData8+0x78>)
 800218c:	4694      	mov	ip, r2
 800218e:	4463      	add	r3, ip
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	e00a      	b.n	80021aa <LCD_IO_ReadMultiData8+0x56>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <LCD_IO_ReadMultiData8+0x7c>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]
      LCD_IO_ReadMultiData((void *)pData, Size, dmacr);
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff ff9f 	bl	80020e4 <LCD_IO_ReadMultiData>
      Size = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
    }
    WaitForDmaEnd();
 80021aa:	f7ff fdb1 	bl	8001d10 <WaitForDmaEnd>
  while(Size)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1d7      	bne.n	8002164 <LCD_IO_ReadMultiData8+0x10>
  }
  LCD_CS_OFF;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <LCD_IO_ReadMultiData8+0x84>)
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	0152      	lsls	r2, r2, #5
 80021ba:	619a      	str	r2, [r3, #24]
  LcdDirWrite();
 80021bc:	f7ff fd56 	bl	8001c6c <LcdDirWrite>
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b004      	add	sp, #16
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	00001082 	.word	0x00001082
 80021cc:	0000fffe 	.word	0x0000fffe
 80021d0:	200001f0 	.word	0x200001f0
 80021d4:	ffff0002 	.word	0xffff0002
 80021d8:	48000400 	.word	0x48000400

080021dc <LCD_IO_ReadMultiData16to24>:
  LcdDirWrite();
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadMultiData16to24(uint16_t * pData, uint32_t Size)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  volatile uint8_t d8 __attribute__((unused));
  uint32_t dmadata_ri = 0, rgb888cnt = 0; /* DMA tempbuffer index, rgb888 index (0..2) */
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint8_t * dmadata;
  dmadata = LCD_DMA_RX_MALLOC(LCD_DMA_RX_BUFSIZE);
  if(!dmadata)
    return;
  #endif
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 80021ee:	4b56      	ldr	r3, [pc, #344]	; (8002348 <LCD_IO_ReadMultiData16to24+0x16c>)
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	0152      	lsls	r2, r2, #5
 80021f4:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;  /* DMA stop */
 80021f6:	4b55      	ldr	r3, [pc, #340]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	4b53      	ldr	r3, [pc, #332]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	4013      	ands	r3, r2
 8002206:	d1fa      	bne.n	80021fe <LCD_IO_ReadMultiData16to24+0x22>
  DMAX_CHANNEL(LCD_DMA_RX)->CMAR = (uint32_t)dmadata;
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 800220a:	4a51      	ldr	r2, [pc, #324]	; (8002350 <LCD_IO_ReadMultiData16to24+0x174>)
 800220c:	60da      	str	r2, [r3, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CPAR = (uint32_t)&SPIX->DR;
 800220e:	4b4f      	ldr	r3, [pc, #316]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 8002210:	4a50      	ldr	r2, [pc, #320]	; (8002354 <LCD_IO_ReadMultiData16to24+0x178>)
 8002212:	609a      	str	r2, [r3, #8]
  DMAX_CHANNEL(LCD_DMA_RX)->CNDTR = LCD_DMA_RX_BUFSIZE;
 8002214:	4b4d      	ldr	r3, [pc, #308]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	0052      	lsls	r2, r2, #1
 800221a:	605a      	str	r2, [r3, #4]
  ntdr_follower = LCD_DMA_RX_BUFSIZE;
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = (0 << DMA_CCR_MSIZE_Pos) |                 
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 8002224:	2285      	movs	r2, #133	; 0x85
 8002226:	0152      	lsls	r2, r2, #5
 8002228:	601a      	str	r2, [r3, #0]
      (0 << DMA_CCR_PSIZE_Pos) | DMA_CCR_MINC |                                
      (DMAPRIORITY(LCD_DMA_RX) << DMA_CCR_PL_Pos) | DMA_CCR_CIRC;
  DMAX_CHANNEL(LCD_DMA_RX)->CCR |= DMA_CCR_EN;
 800222a:	4b48      	ldr	r3, [pc, #288]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 8002230:	2101      	movs	r1, #1
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
  SPIX->CR2 |= SPI_CR2_RXDMAEN;
 8002236:	4b48      	ldr	r3, [pc, #288]	; (8002358 <LCD_IO_ReadMultiData16to24+0x17c>)
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4b47      	ldr	r3, [pc, #284]	; (8002358 <LCD_IO_ReadMultiData16to24+0x17c>)
 800223c:	2101      	movs	r1, #1
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
  while(Size)
 8002242:	e043      	b.n	80022cc <LCD_IO_ReadMultiData16to24+0xf0>
  {
    if(ntdr_follower != DMAX_CHANNEL(LCD_DMA_RX)->CNDTR)
 8002244:	4b41      	ldr	r3, [pc, #260]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	429a      	cmp	r2, r3
 800224c:	d03e      	beq.n	80022cc <LCD_IO_ReadMultiData16to24+0xf0>
    {
      if(!--ntdr_follower)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3b01      	subs	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <LCD_IO_ReadMultiData16to24+0x84>
        ntdr_follower = LCD_DMA_RX_BUFSIZE;
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      rgb888[rgb888cnt++] = dmadata[dmadata_ri++];
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	1c53      	adds	r3, r2, #1
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1c59      	adds	r1, r3, #1
 800226a:	6139      	str	r1, [r7, #16]
 800226c:	4938      	ldr	r1, [pc, #224]	; (8002350 <LCD_IO_ReadMultiData16to24+0x174>)
 800226e:	5c89      	ldrb	r1, [r1, r2]
 8002270:	2208      	movs	r2, #8
 8002272:	18ba      	adds	r2, r7, r2
 8002274:	54d1      	strb	r1, [r2, r3]
      if(dmadata_ri >= LCD_DMA_RX_BUFSIZE)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2bff      	cmp	r3, #255	; 0xff
 800227a:	d901      	bls.n	8002280 <LCD_IO_ReadMultiData16to24+0xa4>
        dmadata_ri = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
      if(rgb888cnt == 3)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d122      	bne.n	80022cc <LCD_IO_ReadMultiData16to24+0xf0>
      {
        rgb888cnt = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
        Size--;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	603b      	str	r3, [r7, #0]
        *pData++ = (rgb888[0] & 0xF8) << 8 | (rgb888[1] & 0xFC) << 3 | rgb888[2] >> 3;
 8002290:	2008      	movs	r0, #8
 8002292:	183b      	adds	r3, r7, r0
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	b21b      	sxth	r3, r3
 800229a:	0adb      	lsrs	r3, r3, #11
 800229c:	02db      	lsls	r3, r3, #11
 800229e:	b21a      	sxth	r2, r3
 80022a0:	183b      	adds	r3, r7, r0
 80022a2:	785b      	ldrb	r3, [r3, #1]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	b219      	sxth	r1, r3
 80022a8:	23fc      	movs	r3, #252	; 0xfc
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	400b      	ands	r3, r1
 80022ae:	b21b      	sxth	r3, r3
 80022b0:	4313      	orrs	r3, r2
 80022b2:	b21a      	sxth	r2, r3
 80022b4:	183b      	adds	r3, r7, r0
 80022b6:	789b      	ldrb	r3, [r3, #2]
 80022b8:	08db      	lsrs	r3, r3, #3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	b21b      	sxth	r3, r3
 80022be:	4313      	orrs	r3, r2
 80022c0:	b219      	sxth	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	1c9a      	adds	r2, r3, #2
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	b28a      	uxth	r2, r1
 80022ca:	801a      	strh	r2, [r3, #0]
  while(Size)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1b8      	bne.n	8002244 <LCD_IO_ReadMultiData16to24+0x68>
      }
    }
  }
  SPIX->CR2 &= ~SPI_CR2_RXDMAEN;
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <LCD_IO_ReadMultiData16to24+0x17c>)
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <LCD_IO_ReadMultiData16to24+0x17c>)
 80022d8:	2101      	movs	r1, #1
 80022da:	438a      	bics	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
  while(SPIX->SR & SPI_SR_RXNE)
 80022de:	e004      	b.n	80022ea <LCD_IO_ReadMultiData16to24+0x10e>
    d8 = *(uint8_t *)&SPIX->DR;
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <LCD_IO_ReadMultiData16to24+0x178>)
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	230b      	movs	r3, #11
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	701a      	strb	r2, [r3, #0]
  while(SPIX->SR & SPI_SR_RXNE)
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <LCD_IO_ReadMultiData16to24+0x17c>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d1f5      	bne.n	80022e0 <LCD_IO_ReadMultiData16to24+0x104>
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <LCD_IO_ReadMultiData16to24+0x17c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a18      	ldr	r2, [pc, #96]	; (800235c <LCD_IO_ReadMultiData16to24+0x180>)
 80022fa:	401a      	ands	r2, r3
 80022fc:	4b16      	ldr	r3, [pc, #88]	; (8002358 <LCD_IO_ReadMultiData16to24+0x17c>)
 80022fe:	4918      	ldr	r1, [pc, #96]	; (8002360 <LCD_IO_ReadMultiData16to24+0x184>)
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8002304:	2001      	movs	r0, #1
 8002306:	f000 f82f 	bl	8002368 <LCD_IO_Delay>
  while(SPIX->SR & SPI_SR_RXNE)
 800230a:	e004      	b.n	8002316 <LCD_IO_ReadMultiData16to24+0x13a>
    d8 = *(uint8_t *)&SPIX->DR;
 800230c:	4b11      	ldr	r3, [pc, #68]	; (8002354 <LCD_IO_ReadMultiData16to24+0x178>)
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	230b      	movs	r3, #11
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	701a      	strb	r2, [r3, #0]
  while(SPIX->SR & SPI_SR_RXNE)
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <LCD_IO_ReadMultiData16to24+0x17c>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2201      	movs	r2, #1
 800231c:	4013      	ands	r3, r2
 800231e:	d1f5      	bne.n	800230c <LCD_IO_ReadMultiData16to24+0x130>
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <LCD_IO_ReadMultiData16to24+0x170>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	4013      	ands	r3, r2
 8002330:	d1fa      	bne.n	8002328 <LCD_IO_ReadMultiData16to24+0x14c>
  LCD_CS_OFF;
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <LCD_IO_ReadMultiData16to24+0x188>)
 8002334:	2280      	movs	r2, #128	; 0x80
 8002336:	0152      	lsls	r2, r2, #5
 8002338:	619a      	str	r2, [r3, #24]
  LcdDirWrite();
 800233a:	f7ff fc97 	bl	8001c6c <LcdDirWrite>
  #if LCD_DMA_RX_BUFMODE == 2
  LCD_DMA_RX_FREE(dmadata);
  #endif
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b006      	add	sp, #24
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	40020000 	.word	0x40020000
 800234c:	40020044 	.word	0x40020044
 8002350:	200001f8 	.word	0x200001f8
 8002354:	4000380c 	.word	0x4000380c
 8002358:	40003800 	.word	0x40003800
 800235c:	ffffbfc7 	.word	0xffffbfc7
 8002360:	00004008 	.word	0x00004008
 8002364:	48000400 	.word	0x48000400

08002368 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  while(c--);
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	1e5a      	subs	r2, r3, #1
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1fa      	bne.n	8002372 <LCD_IO_Delay+0xa>
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}

08002386 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 fa8d 	bl	80028b0 <HAL_Delay>
}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b002      	add	sp, #8
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	0002      	movs	r2, r0
 80023a8:	1dfb      	adds	r3, r7, #7
 80023aa:	701a      	strb	r2, [r3, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <LCD_IO_Bl_OnOff+0x1e>
    #if LCD_BLON == 1
    GPIOX_SET(LCD_BL);
    #else
    GPIOX_CLR(LCD_BL);
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <LCD_IO_Bl_OnOff+0x2c>)
 80023b6:	2280      	movs	r2, #128	; 0x80
 80023b8:	03d2      	lsls	r2, r2, #15
 80023ba:	619a      	str	r2, [r3, #24]
    GPIOX_CLR(LCD_BL);
    #else
    GPIOX_SET(LCD_BL);
    #endif
  #endif
}
 80023bc:	e002      	b.n	80023c4 <LCD_IO_Bl_OnOff+0x24>
    GPIOX_SET(LCD_BL);
 80023be:	4b03      	ldr	r3, [pc, #12]	; (80023cc <LCD_IO_Bl_OnOff+0x2c>)
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	619a      	str	r2, [r3, #24]
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	48000800 	.word	0x48000800

080023d0 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  /* #else LCD_SPI == 0 */

  /* GPIO, DMA Clocks */
  RCC->AHBENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80023d4:	4b58      	ldr	r3, [pc, #352]	; (8002538 <LCD_IO_Init+0x168>)
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	4b57      	ldr	r3, [pc, #348]	; (8002538 <LCD_IO_Init+0x168>)
 80023da:	4958      	ldr	r1, [pc, #352]	; (800253c <LCD_IO_Init+0x16c>)
 80023dc:	430a      	orrs	r2, r1
 80023de:	615a      	str	r2, [r3, #20]
                 GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_MISO |
                 DMA1_CLOCK_TX | DMA1_CLOCK_RX;

  /* MISO = input in full duplex mode */
  #if LCD_SPI_MODE == 2                 // Full duplex
  GPIOX_MODER(MODE_DIGITAL_INPUT, LCD_MISO);
 80023e0:	4b57      	ldr	r3, [pc, #348]	; (8002540 <LCD_IO_Init+0x170>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b56      	ldr	r3, [pc, #344]	; (8002540 <LCD_IO_Init+0x170>)
 80023e6:	4957      	ldr	r1, [pc, #348]	; (8002544 <LCD_IO_Init+0x174>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_BL);
 80023ec:	4b56      	ldr	r3, [pc, #344]	; (8002548 <LCD_IO_Init+0x178>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a56      	ldr	r2, [pc, #344]	; (800254c <LCD_IO_Init+0x17c>)
 80023f2:	401a      	ands	r2, r3
 80023f4:	4b54      	ldr	r3, [pc, #336]	; (8002548 <LCD_IO_Init+0x178>)
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	0149      	lsls	r1, r1, #5
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
  LCD_IO_Bl_OnOff(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff ffce 	bl	80023a0 <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8002404:	4b4e      	ldr	r3, [pc, #312]	; (8002540 <LCD_IO_Init+0x170>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a51      	ldr	r2, [pc, #324]	; (8002550 <LCD_IO_Init+0x180>)
 800240a:	401a      	ands	r2, r3
 800240c:	4b4c      	ldr	r3, [pc, #304]	; (8002540 <LCD_IO_Init+0x170>)
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	0349      	lsls	r1, r1, #13
 8002412:	430a      	orrs	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8002416:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <LCD_IO_Init+0x170>)
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	4b49      	ldr	r3, [pc, #292]	; (8002540 <LCD_IO_Init+0x170>)
 800241c:	494c      	ldr	r1, [pc, #304]	; (8002550 <LCD_IO_Init+0x180>)
 800241e:	400a      	ands	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  LCD_RST_OFF;
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <LCD_IO_Init+0x170>)
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	00d2      	lsls	r2, r2, #3
 8002428:	619a      	str	r2, [r3, #24]
  #endif

  LCD_RS_DATA;
 800242a:	4b45      	ldr	r3, [pc, #276]	; (8002540 <LCD_IO_Init+0x170>)
 800242c:	2280      	movs	r2, #128	; 0x80
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	619a      	str	r2, [r3, #24]
  LCD_CS_OFF;
 8002432:	4b43      	ldr	r3, [pc, #268]	; (8002540 <LCD_IO_Init+0x170>)
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	0152      	lsls	r2, r2, #5
 8002438:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <LCD_IO_Init+0x170>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a45      	ldr	r2, [pc, #276]	; (8002554 <LCD_IO_Init+0x184>)
 8002440:	401a      	ands	r2, r3
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <LCD_IO_Init+0x170>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	03c9      	lsls	r1, r1, #15
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 800244c:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <LCD_IO_Init+0x170>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a41      	ldr	r2, [pc, #260]	; (8002558 <LCD_IO_Init+0x188>)
 8002452:	401a      	ands	r2, r3
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <LCD_IO_Init+0x170>)
 8002456:	2180      	movs	r1, #128	; 0x80
 8002458:	0449      	lsls	r1, r1, #17
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800245e:	4b38      	ldr	r3, [pc, #224]	; (8002540 <LCD_IO_Init+0x170>)
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	4b37      	ldr	r3, [pc, #220]	; (8002540 <LCD_IO_Init+0x170>)
 8002464:	21c0      	movs	r1, #192	; 0xc0
 8002466:	0409      	lsls	r1, r1, #16
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 800246c:	4b34      	ldr	r3, [pc, #208]	; (8002540 <LCD_IO_Init+0x170>)
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	4b33      	ldr	r3, [pc, #204]	; (8002540 <LCD_IO_Init+0x170>)
 8002472:	21c0      	movs	r1, #192	; 0xc0
 8002474:	0489      	lsls	r1, r1, #18
 8002476:	430a      	orrs	r2, r1
 8002478:	609a      	str	r2, [r3, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <LCD_IO_Init+0x170>)
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	4b30      	ldr	r3, [pc, #192]	; (8002540 <LCD_IO_Init+0x170>)
 8002480:	21c0      	movs	r1, #192	; 0xc0
 8002482:	0509      	lsls	r1, r1, #20
 8002484:	430a      	orrs	r2, r1
 8002486:	609a      	str	r2, [r3, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8002488:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <LCD_IO_Init+0x170>)
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <LCD_IO_Init+0x170>)
 800248e:	21c0      	movs	r1, #192	; 0xc0
 8002490:	0609      	lsls	r1, r1, #24
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
  GPIOX_SET(LCD_SCK);                   // SCK = 1
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <LCD_IO_Init+0x170>)
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	0192      	lsls	r2, r2, #6
 800249c:	619a      	str	r2, [r3, #24]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 800249e:	4b26      	ldr	r3, [pc, #152]	; (8002538 <LCD_IO_Init+0x168>)
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	4b25      	ldr	r3, [pc, #148]	; (8002538 <LCD_IO_Init+0x168>)
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	01c9      	lsls	r1, r1, #7
 80024a8:	430a      	orrs	r2, r1
 80024aa:	61da      	str	r2, [r3, #28]

  GPIOX_AFR(LCD_SPI_AFR, LCD_SCK);
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <LCD_IO_Init+0x170>)
 80024ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b0:	4b23      	ldr	r3, [pc, #140]	; (8002540 <LCD_IO_Init+0x170>)
 80024b2:	492a      	ldr	r1, [pc, #168]	; (800255c <LCD_IO_Init+0x18c>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <LCD_IO_Init+0x170>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a28      	ldr	r2, [pc, #160]	; (8002560 <LCD_IO_Init+0x190>)
 80024be:	401a      	ands	r2, r3
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <LCD_IO_Init+0x170>)
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	0509      	lsls	r1, r1, #20
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]
  GPIOX_AFR(LCD_SPI_AFR, LCD_MOSI);
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <LCD_IO_Init+0x170>)
 80024cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <LCD_IO_Init+0x170>)
 80024d0:	0112      	lsls	r2, r2, #4
 80024d2:	0912      	lsrs	r2, r2, #4
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
  GPIOX_MODER(MODE_ALTER, LCD_MOSI);
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <LCD_IO_Init+0x170>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	089a      	lsrs	r2, r3, #2
 80024de:	4b18      	ldr	r3, [pc, #96]	; (8002540 <LCD_IO_Init+0x170>)
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	0609      	lsls	r1, r1, #24
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else /* #if LCD_SPI_MODE == 1 */
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <LCD_IO_Init+0x194>)
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <LCD_IO_Init+0x198>)
 80024ec:	601a      	str	r2, [r3, #0]
  #endif /* #else LCD_SPI_MODE == 1 */
  SPIX->CR2 = (7 << SPI_CR2_DS_Pos);
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <LCD_IO_Init+0x194>)
 80024f0:	22e0      	movs	r2, #224	; 0xe0
 80024f2:	00d2      	lsls	r2, r2, #3
 80024f4:	605a      	str	r2, [r3, #4]
  SPIX->CR1 |= SPI_CR1_SPE;
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <LCD_IO_Init+0x194>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <LCD_IO_Init+0x194>)
 80024fc:	2140      	movs	r1, #64	; 0x40
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]

  #endif /* #else LCD_SPI == 0 */

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8002502:	200a      	movs	r0, #10
 8002504:	f7ff ff3f 	bl	8002386 <LCD_Delay>
  LCD_RST_ON;
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <LCD_IO_Init+0x170>)
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	04d2      	lsls	r2, r2, #19
 800250e:	619a      	str	r2, [r3, #24]
  LCD_Delay(10);
 8002510:	200a      	movs	r0, #10
 8002512:	f7ff ff38 	bl	8002386 <LCD_Delay>
  LCD_RST_OFF;
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <LCD_IO_Init+0x170>)
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	00d2      	lsls	r2, r2, #3
 800251c:	619a      	str	r2, [r3, #24]
  #endif
  LCD_Delay(10);
 800251e:	200a      	movs	r0, #10
 8002520:	f7ff ff31 	bl	8002386 <LCD_Delay>

  #if (DMANUM(LCD_DMA_TX) > 0 || DMANUM(LCD_DMA_RX) > 0) && LCD_SPI > 0
  #ifdef LCD_DMA_TX_RX_IRQ_SHARED
  /* Shared interrupt handler */
  NVIC_SetPriority(LCD_DMA_TX_IRQ, LCD_DMA_IRQ_PR);
 8002524:	210f      	movs	r1, #15
 8002526:	200b      	movs	r0, #11
 8002528:	f7ff faf8 	bl	8001b1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(LCD_DMA_TX_IRQ);
 800252c:	200b      	movs	r0, #11
 800252e:	f7ff fadb 	bl	8001ae8 <__NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  /* #if DMANUM(LCD_DMA_RX) > 0 */
} /* void LCD_IO_Init(void) */
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	000c0001 	.word	0x000c0001
 8002540:	48000400 	.word	0x48000400
 8002544:	cfffffff 	.word	0xcfffffff
 8002548:	48000800 	.word	0x48000800
 800254c:	ffffcfff 	.word	0xffffcfff
 8002550:	ffcfffff 	.word	0xffcfffff
 8002554:	ff3fffff 	.word	0xff3fffff
 8002558:	fcffffff 	.word	0xfcffffff
 800255c:	ff0fffff 	.word	0xff0fffff
 8002560:	f3ffffff 	.word	0xf3ffffff
 8002564:	40003800 	.word	0x40003800
 8002568:	0000030f 	.word	0x0000030f

0800256c <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	0002      	movs	r2, r0
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 8002578:	f7ff fbca 	bl	8001d10 <WaitForDmaEnd>
  LcdSpiMode8();
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <LCD_IO_WriteCmd8+0x40>)
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <LCD_IO_WriteCmd8+0x40>)
 8002582:	490b      	ldr	r1, [pc, #44]	; (80025b0 <LCD_IO_WriteCmd8+0x44>)
 8002584:	400a      	ands	r2, r1
 8002586:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <LCD_IO_WriteCmd8+0x48>)
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	0552      	lsls	r2, r2, #21
 800258e:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8002590:	1dfb      	adds	r3, r7, #7
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff fb95 	bl	8001cc4 <LcdCmdWrite8>
  LCD_CS_OFF;
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <LCD_IO_WriteCmd8+0x48>)
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	0152      	lsls	r2, r2, #5
 80025a0:	619a      	str	r2, [r3, #24]
}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b002      	add	sp, #8
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	40003800 	.word	0x40003800
 80025b0:	fffff7ff 	.word	0xfffff7ff
 80025b4:	48000400 	.word	0x48000400

080025b8 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	0002      	movs	r2, r0
 80025c0:	1dfb      	adds	r3, r7, #7
 80025c2:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 80025c4:	f7ff fba4 	bl	8001d10 <WaitForDmaEnd>
  LcdSpiMode8();
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <LCD_IO_WriteData8+0x40>)
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <LCD_IO_WriteData8+0x40>)
 80025ce:	490b      	ldr	r1, [pc, #44]	; (80025fc <LCD_IO_WriteData8+0x44>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <LCD_IO_WriteData8+0x48>)
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	0552      	lsls	r2, r2, #21
 80025da:	619a      	str	r2, [r3, #24]
  LcdWrite8(Data);
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7ff fb53 	bl	8001c8c <LcdWrite8>
  LCD_CS_OFF;
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <LCD_IO_WriteData8+0x48>)
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	0152      	lsls	r2, r2, #5
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b002      	add	sp, #8
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	40003800 	.word	0x40003800
 80025fc:	fffff7ff 	.word	0xfffff7ff
 8002600:	48000400 	.word	0x48000400

08002604 <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	603a      	str	r2, [r7, #0]
 800260c:	1dfb      	adds	r3, r7, #7
 800260e:	1c02      	adds	r2, r0, #0
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	1c0a      	adds	r2, r1, #0
 8002616:	801a      	strh	r2, [r3, #0]
  WaitForDmaEnd();
 8002618:	f7ff fb7a 	bl	8001d10 <WaitForDmaEnd>
  LcdSpiMode8();
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <LCD_IO_WriteCmd8DataFill16+0x58>)
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <LCD_IO_WriteCmd8DataFill16+0x58>)
 8002622:	490f      	ldr	r1, [pc, #60]	; (8002660 <LCD_IO_WriteCmd8DataFill16+0x5c>)
 8002624:	400a      	ands	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <LCD_IO_WriteCmd8DataFill16+0x60>)
 800262a:	2280      	movs	r2, #128	; 0x80
 800262c:	0552      	lsls	r2, r2, #21
 800262e:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8002630:	1dfb      	adds	r3, r7, #7
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	0018      	movs	r0, r3
 8002636:	f7ff fb45 	bl	8001cc4 <LcdCmdWrite8>
  LcdSpiMode16();
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <LCD_IO_WriteCmd8DataFill16+0x58>)
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <LCD_IO_WriteCmd8DataFill16+0x58>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	0109      	lsls	r1, r1, #4
 8002644:	430a      	orrs	r2, r1
 8002646:	605a      	str	r2, [r3, #4]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8002648:	6839      	ldr	r1, [r7, #0]
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2200      	movs	r2, #0
 800264e:	0018      	movs	r0, r3
 8002650:	f7ff fc48 	bl	8001ee4 <LCD_IO_WriteMultiData16>
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40003800 	.word	0x40003800
 8002660:	fffff7ff 	.word	0xfffff7ff
 8002664:	48000400 	.word	0x48000400

08002668 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	240f      	movs	r4, #15
 8002674:	193b      	adds	r3, r7, r4
 8002676:	1c02      	adds	r2, r0, #0
 8002678:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 800267a:	f7ff fb49 	bl	8001d10 <WaitForDmaEnd>
  LcdSpiMode8();
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <LCD_IO_WriteCmd8MultipleData8+0x48>)
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <LCD_IO_WriteCmd8MultipleData8+0x48>)
 8002684:	490b      	ldr	r1, [pc, #44]	; (80026b4 <LCD_IO_WriteCmd8MultipleData8+0x4c>)
 8002686:	400a      	ands	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <LCD_IO_WriteCmd8MultipleData8+0x50>)
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	0552      	lsls	r2, r2, #21
 8002690:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 8002692:	193b      	adds	r3, r7, r4
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	0018      	movs	r0, r3
 8002698:	f7ff fb14 	bl	8001cc4 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2201      	movs	r2, #1
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff fbc8 	bl	8001e38 <LCD_IO_WriteMultiData8>
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b005      	add	sp, #20
 80026ae:	bd90      	pop	{r4, r7, pc}
 80026b0:	40003800 	.word	0x40003800
 80026b4:	fffff7ff 	.word	0xfffff7ff
 80026b8:	48000400 	.word	0x48000400

080026bc <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	240f      	movs	r4, #15
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	1c02      	adds	r2, r0, #0
 80026cc:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 80026ce:	f7ff fb1f 	bl	8001d10 <WaitForDmaEnd>
  LcdSpiMode8();
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <LCD_IO_WriteCmd8MultipleData16+0x58>)
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <LCD_IO_WriteCmd8MultipleData16+0x58>)
 80026d8:	490f      	ldr	r1, [pc, #60]	; (8002718 <LCD_IO_WriteCmd8MultipleData16+0x5c>)
 80026da:	400a      	ands	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <LCD_IO_WriteCmd8MultipleData16+0x60>)
 80026e0:	2280      	movs	r2, #128	; 0x80
 80026e2:	0552      	lsls	r2, r2, #21
 80026e4:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7ff faea 	bl	8001cc4 <LcdCmdWrite8>
  LcdSpiMode16();
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <LCD_IO_WriteCmd8MultipleData16+0x58>)
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <LCD_IO_WriteCmd8MultipleData16+0x58>)
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	0109      	lsls	r1, r1, #4
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2201      	movs	r2, #1
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff fbed 	bl	8001ee4 <LCD_IO_WriteMultiData16>
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b005      	add	sp, #20
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	40003800 	.word	0x40003800
 8002718:	fffff7ff 	.word	0xfffff7ff
 800271c:	48000400 	.word	0x48000400

08002720 <LCD_IO_ReadCmd8MultipleData8>:
__weak void LCD_IO_ReadCmd16MultipleData24to16(uint16_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
#else

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	240f      	movs	r4, #15
 800272e:	193b      	adds	r3, r7, r4
 8002730:	1c02      	adds	r2, r0, #0
 8002732:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 8002734:	f7ff faec 	bl	8001d10 <WaitForDmaEnd>
  LcdSpiMode8();
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <LCD_IO_ReadCmd8MultipleData8+0x58>)
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <LCD_IO_ReadCmd8MultipleData8+0x58>)
 800273e:	490f      	ldr	r1, [pc, #60]	; (800277c <LCD_IO_ReadCmd8MultipleData8+0x5c>)
 8002740:	400a      	ands	r2, r1
 8002742:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <LCD_IO_ReadCmd8MultipleData8+0x60>)
 8002746:	2280      	movs	r2, #128	; 0x80
 8002748:	0552      	lsls	r2, r2, #21
 800274a:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 800274c:	193b      	adds	r3, r7, r4
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff fab7 	bl	8001cc4 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	0018      	movs	r0, r3
 8002760:	f7ff fa4a 	bl	8001bf8 <LcdDirRead>
  LCD_IO_ReadMultiData8(pData, Size);
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	0011      	movs	r1, r2
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fcf2 	bl	8002154 <LCD_IO_ReadMultiData8>
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b005      	add	sp, #20
 8002776:	bd90      	pop	{r4, r7, pc}
 8002778:	40003800 	.word	0x40003800
 800277c:	fffff7ff 	.word	0xfffff7ff
 8002780:	48000400 	.word	0x48000400

08002784 <LCD_IO_ReadCmd8MultipleData24to16>:
  LCD_IO_ReadMultiData16(pData, Size);
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	240f      	movs	r4, #15
 8002792:	193b      	adds	r3, r7, r4
 8002794:	1c02      	adds	r2, r0, #0
 8002796:	701a      	strb	r2, [r3, #0]
  WaitForDmaEnd();
 8002798:	f7ff faba 	bl	8001d10 <WaitForDmaEnd>
  LcdSpiMode8();
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x58>)
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <LCD_IO_ReadCmd8MultipleData24to16+0x58>)
 80027a2:	490f      	ldr	r1, [pc, #60]	; (80027e0 <LCD_IO_ReadCmd8MultipleData24to16+0x5c>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
  LCD_CS_ON;
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <LCD_IO_ReadCmd8MultipleData24to16+0x60>)
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	0552      	lsls	r2, r2, #21
 80027ae:	619a      	str	r2, [r3, #24]
  LcdCmdWrite8(Cmd);
 80027b0:	193b      	adds	r3, r7, r4
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7ff fa85 	bl	8001cc4 <LcdCmdWrite8>

  DummySize = (DummySize << 3) + LCD_SCK_EXTRACLK;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	603b      	str	r3, [r7, #0]
  LcdDirRead(DummySize);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7ff fa18 	bl	8001bf8 <LcdDirRead>
  LCD_IO_ReadMultiData16to24(pData, Size);
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7ff fd04 	bl	80021dc <LCD_IO_ReadMultiData16to24>
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b005      	add	sp, #20
 80027da:	bd90      	pop	{r4, r7, pc}
 80027dc:	40003800 	.word	0x40003800
 80027e0:	fffff7ff 	.word	0xfffff7ff
 80027e4:	48000400 	.word	0x48000400

080027e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ec:	4b07      	ldr	r3, [pc, #28]	; (800280c <HAL_Init+0x24>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_Init+0x24>)
 80027f2:	2110      	movs	r1, #16
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f000 f809 	bl	8002810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fe:	f7fe f8a3 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	40022000 	.word	0x40022000

08002810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_InitTick+0x5c>)
 800281a:	681c      	ldr	r4, [r3, #0]
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_InitTick+0x60>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	0019      	movs	r1, r3
 8002822:	23fa      	movs	r3, #250	; 0xfa
 8002824:	0098      	lsls	r0, r3, #2
 8002826:	f7fd fc6f 	bl	8000108 <__udivsi3>
 800282a:	0003      	movs	r3, r0
 800282c:	0019      	movs	r1, r3
 800282e:	0020      	movs	r0, r4
 8002830:	f7fd fc6a 	bl	8000108 <__udivsi3>
 8002834:	0003      	movs	r3, r0
 8002836:	0018      	movs	r0, r3
 8002838:	f000 f92f 	bl	8002a9a <HAL_SYSTICK_Config>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d001      	beq.n	8002844 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e00f      	b.n	8002864 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d80b      	bhi.n	8002862 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	2301      	movs	r3, #1
 800284e:	425b      	negs	r3, r3
 8002850:	2200      	movs	r2, #0
 8002852:	0018      	movs	r0, r3
 8002854:	f000 f8fc 	bl	8002a50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_InitTick+0x64>)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b003      	add	sp, #12
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	20000008 	.word	0x20000008
 8002870:	20000068 	.word	0x20000068
 8002874:	20000064 	.word	0x20000064

08002878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_IncTick+0x1c>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	001a      	movs	r2, r3
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_IncTick+0x20>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	18d2      	adds	r2, r2, r3
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_IncTick+0x20>)
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	20000068 	.word	0x20000068
 8002898:	200002f8 	.word	0x200002f8

0800289c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;
 80028a0:	4b02      	ldr	r3, [pc, #8]	; (80028ac <HAL_GetTick+0x10>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	0018      	movs	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	200002f8 	.word	0x200002f8

080028b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff fff0 	bl	800289c <HAL_GetTick>
 80028bc:	0003      	movs	r3, r0
 80028be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3301      	adds	r3, #1
 80028c8:	d005      	beq.n	80028d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_Delay+0x44>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	001a      	movs	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	189b      	adds	r3, r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	f7ff ffe0 	bl	800289c <HAL_GetTick>
 80028dc:	0002      	movs	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d8f7      	bhi.n	80028d8 <HAL_Delay+0x28>
  {
  }
}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b004      	add	sp, #16
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	20000068 	.word	0x20000068

080028f8 <__NVIC_EnableIRQ>:
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	0002      	movs	r2, r0
 8002900:	1dfb      	adds	r3, r7, #7
 8002902:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b7f      	cmp	r3, #127	; 0x7f
 800290a:	d809      	bhi.n	8002920 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290c:	1dfb      	adds	r3, r7, #7
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	001a      	movs	r2, r3
 8002912:	231f      	movs	r3, #31
 8002914:	401a      	ands	r2, r3
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_EnableIRQ+0x30>)
 8002918:	2101      	movs	r1, #1
 800291a:	4091      	lsls	r1, r2
 800291c:	000a      	movs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	0002      	movs	r2, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800293a:	1dfb      	adds	r3, r7, #7
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b7f      	cmp	r3, #127	; 0x7f
 8002940:	d828      	bhi.n	8002994 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002942:	4a2f      	ldr	r2, [pc, #188]	; (8002a00 <__NVIC_SetPriority+0xd4>)
 8002944:	1dfb      	adds	r3, r7, #7
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b25b      	sxtb	r3, r3
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	33c0      	adds	r3, #192	; 0xc0
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	589b      	ldr	r3, [r3, r2]
 8002952:	1dfa      	adds	r2, r7, #7
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	0011      	movs	r1, r2
 8002958:	2203      	movs	r2, #3
 800295a:	400a      	ands	r2, r1
 800295c:	00d2      	lsls	r2, r2, #3
 800295e:	21ff      	movs	r1, #255	; 0xff
 8002960:	4091      	lsls	r1, r2
 8002962:	000a      	movs	r2, r1
 8002964:	43d2      	mvns	r2, r2
 8002966:	401a      	ands	r2, r3
 8002968:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	22ff      	movs	r2, #255	; 0xff
 8002970:	401a      	ands	r2, r3
 8002972:	1dfb      	adds	r3, r7, #7
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	0018      	movs	r0, r3
 8002978:	2303      	movs	r3, #3
 800297a:	4003      	ands	r3, r0
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002980:	481f      	ldr	r0, [pc, #124]	; (8002a00 <__NVIC_SetPriority+0xd4>)
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b25b      	sxtb	r3, r3
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	430a      	orrs	r2, r1
 800298c:	33c0      	adds	r3, #192	; 0xc0
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	501a      	str	r2, [r3, r0]
}
 8002992:	e031      	b.n	80029f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <__NVIC_SetPriority+0xd8>)
 8002996:	1dfb      	adds	r3, r7, #7
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	0019      	movs	r1, r3
 800299c:	230f      	movs	r3, #15
 800299e:	400b      	ands	r3, r1
 80029a0:	3b08      	subs	r3, #8
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3306      	adds	r3, #6
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	18d3      	adds	r3, r2, r3
 80029aa:	3304      	adds	r3, #4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	1dfa      	adds	r2, r7, #7
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	0011      	movs	r1, r2
 80029b4:	2203      	movs	r2, #3
 80029b6:	400a      	ands	r2, r1
 80029b8:	00d2      	lsls	r2, r2, #3
 80029ba:	21ff      	movs	r1, #255	; 0xff
 80029bc:	4091      	lsls	r1, r2
 80029be:	000a      	movs	r2, r1
 80029c0:	43d2      	mvns	r2, r2
 80029c2:	401a      	ands	r2, r3
 80029c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	22ff      	movs	r2, #255	; 0xff
 80029cc:	401a      	ands	r2, r3
 80029ce:	1dfb      	adds	r3, r7, #7
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	0018      	movs	r0, r3
 80029d4:	2303      	movs	r3, #3
 80029d6:	4003      	ands	r3, r0
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029dc:	4809      	ldr	r0, [pc, #36]	; (8002a04 <__NVIC_SetPriority+0xd8>)
 80029de:	1dfb      	adds	r3, r7, #7
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	001c      	movs	r4, r3
 80029e4:	230f      	movs	r3, #15
 80029e6:	4023      	ands	r3, r4
 80029e8:	3b08      	subs	r3, #8
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	430a      	orrs	r2, r1
 80029ee:	3306      	adds	r3, #6
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	18c3      	adds	r3, r0, r3
 80029f4:	3304      	adds	r3, #4
 80029f6:	601a      	str	r2, [r3, #0]
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b003      	add	sp, #12
 80029fe:	bd90      	pop	{r4, r7, pc}
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	1e5a      	subs	r2, r3, #1
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	045b      	lsls	r3, r3, #17
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d301      	bcc.n	8002a20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e010      	b.n	8002a42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <SysTick_Config+0x44>)
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	3a01      	subs	r2, #1
 8002a26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a28:	2301      	movs	r3, #1
 8002a2a:	425b      	negs	r3, r3
 8002a2c:	2103      	movs	r1, #3
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff ff7c 	bl	800292c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <SysTick_Config+0x44>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SysTick_Config+0x44>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	0018      	movs	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b002      	add	sp, #8
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	1c02      	adds	r2, r0, #0
 8002a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff ff5d 	bl	800292c <__NVIC_SetPriority>
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	0002      	movs	r2, r0
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	b25b      	sxtb	r3, r3
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7ff ff33 	bl	80028f8 <__NVIC_EnableIRQ>
}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b002      	add	sp, #8
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7ff ffaf 	bl	8002a08 <SysTick_Config>
 8002aaa:	0003      	movs	r3, r0
}
 8002aac:	0018      	movs	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b002      	add	sp, #8
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e036      	b.n	8002b38 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2221      	movs	r2, #33	; 0x21
 8002ace:	2102      	movs	r1, #2
 8002ad0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_DMA_Init+0x8c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 f812 	bl	8002b44 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2221      	movs	r2, #33	; 0x21
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	2100      	movs	r1, #0
 8002b34:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}  
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b004      	add	sp, #16
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	ffffc00f 	.word	0xffffc00f

08002b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <DMA_CalcBaseAndBitshift+0x30>)
 8002b52:	4694      	mov	ip, r2
 8002b54:	4463      	add	r3, ip
 8002b56:	2114      	movs	r1, #20
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7fd fad5 	bl	8000108 <__udivsi3>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	009a      	lsls	r2, r3, #2
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a03      	ldr	r2, [pc, #12]	; (8002b78 <DMA_CalcBaseAndBitshift+0x34>)
 8002b6a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	bffdfff8 	.word	0xbffdfff8
 8002b78:	40020000 	.word	0x40020000

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8a:	e14f      	b.n	8002e2c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4091      	lsls	r1, r2
 8002b96:	000a      	movs	r2, r1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d100      	bne.n	8002ba4 <HAL_GPIO_Init+0x28>
 8002ba2:	e140      	b.n	8002e26 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d005      	beq.n	8002bbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d130      	bne.n	8002c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	0013      	movs	r3, r2
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	0013      	movs	r3, r2
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	2201      	movs	r2, #1
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	0013      	movs	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2203      	movs	r2, #3
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d017      	beq.n	8002c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	2203      	movs	r2, #3
 8002c36:	409a      	lsls	r2, r3
 8002c38:	0013      	movs	r3, r2
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d123      	bne.n	8002cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	0092      	lsls	r2, r2, #2
 8002c70:	58d3      	ldr	r3, [r2, r3]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2207      	movs	r2, #7
 8002c78:	4013      	ands	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	0013      	movs	r3, r2
 8002c82:	43da      	mvns	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2107      	movs	r1, #7
 8002c92:	400b      	ands	r3, r1
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	409a      	lsls	r2, r3
 8002c98:	0013      	movs	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	0092      	lsls	r2, r2, #2
 8002caa:	6939      	ldr	r1, [r7, #16]
 8002cac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	401a      	ands	r2, r3
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	0013      	movs	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	23c0      	movs	r3, #192	; 0xc0
 8002ce8:	029b      	lsls	r3, r3, #10
 8002cea:	4013      	ands	r3, r2
 8002cec:	d100      	bne.n	8002cf0 <HAL_GPIO_Init+0x174>
 8002cee:	e09a      	b.n	8002e26 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf0:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <HAL_GPIO_Init+0x2c8>)
 8002cf2:	699a      	ldr	r2, [r3, #24]
 8002cf4:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_GPIO_Init+0x2c8>)
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	619a      	str	r2, [r3, #24]
 8002cfc:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <HAL_GPIO_Init+0x2c8>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2201      	movs	r2, #1
 8002d02:	4013      	ands	r3, r2
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d08:	4a4f      	ldr	r2, [pc, #316]	; (8002e48 <HAL_GPIO_Init+0x2cc>)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	589b      	ldr	r3, [r3, r2]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	409a      	lsls	r2, r3
 8002d22:	0013      	movs	r3, r2
 8002d24:	43da      	mvns	r2, r3
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	2390      	movs	r3, #144	; 0x90
 8002d30:	05db      	lsls	r3, r3, #23
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0x1e2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a44      	ldr	r2, [pc, #272]	; (8002e4c <HAL_GPIO_Init+0x2d0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00d      	beq.n	8002d5a <HAL_GPIO_Init+0x1de>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a43      	ldr	r2, [pc, #268]	; (8002e50 <HAL_GPIO_Init+0x2d4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <HAL_GPIO_Init+0x1da>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a42      	ldr	r2, [pc, #264]	; (8002e54 <HAL_GPIO_Init+0x2d8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d101      	bne.n	8002d52 <HAL_GPIO_Init+0x1d6>
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x1e4>
 8002d52:	2305      	movs	r3, #5
 8002d54:	e004      	b.n	8002d60 <HAL_GPIO_Init+0x1e4>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x1e4>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_GPIO_Init+0x1e4>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	2103      	movs	r1, #3
 8002d64:	400a      	ands	r2, r1
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4093      	lsls	r3, r2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d70:	4935      	ldr	r1, [pc, #212]	; (8002e48 <HAL_GPIO_Init+0x2cc>)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d7e:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_GPIO_Init+0x2dc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43da      	mvns	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	025b      	lsls	r3, r3, #9
 8002d96:	4013      	ands	r3, r2
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002da2:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <HAL_GPIO_Init+0x2dc>)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_GPIO_Init+0x2dc>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43da      	mvns	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	029b      	lsls	r3, r3, #10
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_GPIO_Init+0x2dc>)
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd2:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <HAL_GPIO_Init+0x2dc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	035b      	lsls	r3, r3, #13
 8002dea:	4013      	ands	r3, r2
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_GPIO_Init+0x2dc>)
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002dfc:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <HAL_GPIO_Init+0x2dc>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	43da      	mvns	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	039b      	lsls	r3, r3, #14
 8002e14:	4013      	ands	r3, r2
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_GPIO_Init+0x2dc>)
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	40da      	lsrs	r2, r3
 8002e34:	1e13      	subs	r3, r2, #0
 8002e36:	d000      	beq.n	8002e3a <HAL_GPIO_Init+0x2be>
 8002e38:	e6a8      	b.n	8002b8c <HAL_GPIO_Init+0x10>
  } 
}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b006      	add	sp, #24
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	48000400 	.word	0x48000400
 8002e50:	48000800 	.word	0x48000800
 8002e54:	48000c00 	.word	0x48000c00
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	0008      	movs	r0, r1
 8002e66:	0011      	movs	r1, r2
 8002e68:	1cbb      	adds	r3, r7, #2
 8002e6a:	1c02      	adds	r2, r0, #0
 8002e6c:	801a      	strh	r2, [r3, #0]
 8002e6e:	1c7b      	adds	r3, r7, #1
 8002e70:	1c0a      	adds	r2, r1, #0
 8002e72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e74:	1c7b      	adds	r3, r7, #1
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e7c:	1cbb      	adds	r3, r7, #2
 8002e7e:	881a      	ldrh	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e84:	e003      	b.n	8002e8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e86:	1cbb      	adds	r3, r7, #2
 8002e88:	881a      	ldrh	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b002      	add	sp, #8
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e082      	b.n	8002fb0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2241      	movs	r2, #65	; 0x41
 8002eae:	5c9b      	ldrb	r3, [r3, r2]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2240      	movs	r2, #64	; 0x40
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7fd fd65 	bl	8000990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2241      	movs	r2, #65	; 0x41
 8002eca:	2124      	movs	r1, #36	; 0x24
 8002ecc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	438a      	bics	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4934      	ldr	r1, [pc, #208]	; (8002fb8 <HAL_I2C_Init+0x120>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4931      	ldr	r1, [pc, #196]	; (8002fbc <HAL_I2C_Init+0x124>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d108      	bne.n	8002f16 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2180      	movs	r1, #128	; 0x80
 8002f0e:	0209      	lsls	r1, r1, #8
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	e007      	b.n	8002f26 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2184      	movs	r1, #132	; 0x84
 8002f20:	0209      	lsls	r1, r1, #8
 8002f22:	430a      	orrs	r2, r1
 8002f24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d104      	bne.n	8002f38 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2280      	movs	r2, #128	; 0x80
 8002f34:	0112      	lsls	r2, r2, #4
 8002f36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	491f      	ldr	r1, [pc, #124]	; (8002fc0 <HAL_I2C_Init+0x128>)
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	491a      	ldr	r1, [pc, #104]	; (8002fbc <HAL_I2C_Init+0x124>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69d9      	ldr	r1, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1a      	ldr	r2, [r3, #32]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2241      	movs	r2, #65	; 0x41
 8002f9c:	2120      	movs	r1, #32
 8002f9e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2242      	movs	r2, #66	; 0x42
 8002faa:	2100      	movs	r1, #0
 8002fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	f0ffffff 	.word	0xf0ffffff
 8002fbc:	ffff7fff 	.word	0xffff7fff
 8002fc0:	02008000 	.word	0x02008000

08002fc4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	000c      	movs	r4, r1
 8002fce:	0010      	movs	r0, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	1c22      	adds	r2, r4, #0
 8002fd8:	801a      	strh	r2, [r3, #0]
 8002fda:	2308      	movs	r3, #8
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	1c02      	adds	r2, r0, #0
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	1dbb      	adds	r3, r7, #6
 8002fe4:	1c0a      	adds	r2, r1, #0
 8002fe6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2241      	movs	r2, #65	; 0x41
 8002fec:	5c9b      	ldrb	r3, [r3, r2]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d000      	beq.n	8002ff6 <HAL_I2C_Mem_Read+0x32>
 8002ff4:	e110      	b.n	8003218 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d004      	beq.n	8003006 <HAL_I2C_Mem_Read+0x42>
 8002ffc:	232c      	movs	r3, #44	; 0x2c
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	0092      	lsls	r2, r2, #2
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e103      	b.n	800321a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2240      	movs	r2, #64	; 0x40
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_I2C_Mem_Read+0x5c>
 800301c:	2302      	movs	r3, #2
 800301e:	e0fc      	b.n	800321a <HAL_I2C_Mem_Read+0x256>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2240      	movs	r2, #64	; 0x40
 8003024:	2101      	movs	r1, #1
 8003026:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003028:	f7ff fc38 	bl	800289c <HAL_GetTick>
 800302c:	0003      	movs	r3, r0
 800302e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	0219      	lsls	r1, r3, #8
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2319      	movs	r3, #25
 800303c:	2201      	movs	r2, #1
 800303e:	f000 f979 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0e7      	b.n	800321a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2241      	movs	r2, #65	; 0x41
 800304e:	2122      	movs	r1, #34	; 0x22
 8003050:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2242      	movs	r2, #66	; 0x42
 8003056:	2140      	movs	r1, #64	; 0x40
 8003058:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	222c      	movs	r2, #44	; 0x2c
 800306a:	18ba      	adds	r2, r7, r2
 800306c:	8812      	ldrh	r2, [r2, #0]
 800306e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003076:	1dbb      	adds	r3, r7, #6
 8003078:	881c      	ldrh	r4, [r3, #0]
 800307a:	2308      	movs	r3, #8
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	230a      	movs	r3, #10
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	8819      	ldrh	r1, [r3, #0]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	0023      	movs	r3, r4
 8003092:	f000 f8cb 	bl	800322c <I2C_RequestMemoryRead>
 8003096:	1e03      	subs	r3, r0, #0
 8003098:	d005      	beq.n	80030a6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2240      	movs	r2, #64	; 0x40
 800309e:	2100      	movs	r1, #0
 80030a0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0b9      	b.n	800321a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2bff      	cmp	r3, #255	; 0xff
 80030ae:	d911      	bls.n	80030d4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	22ff      	movs	r2, #255	; 0xff
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	045c      	lsls	r4, r3, #17
 80030c0:	230a      	movs	r3, #10
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	8819      	ldrh	r1, [r3, #0]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	4b56      	ldr	r3, [pc, #344]	; (8003224 <HAL_I2C_Mem_Read+0x260>)
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	0023      	movs	r3, r4
 80030ce:	f000 fa65 	bl	800359c <I2C_TransferConfig>
 80030d2:	e012      	b.n	80030fa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	049c      	lsls	r4, r3, #18
 80030e8:	230a      	movs	r3, #10
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	8819      	ldrh	r1, [r3, #0]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <HAL_I2C_Mem_Read+0x260>)
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	0023      	movs	r3, r4
 80030f6:	f000 fa51 	bl	800359c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80030fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	0013      	movs	r3, r2
 8003104:	2200      	movs	r2, #0
 8003106:	2104      	movs	r1, #4
 8003108:	f000 f914 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 800310c:	1e03      	subs	r3, r0, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e082      	b.n	800321a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d03a      	beq.n	80031c6 <HAL_I2C_Mem_Read+0x202>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d136      	bne.n	80031c6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	0013      	movs	r3, r2
 8003162:	2200      	movs	r2, #0
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	f000 f8e5 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e053      	b.n	800321a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	2bff      	cmp	r3, #255	; 0xff
 800317a:	d911      	bls.n	80031a0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	b2da      	uxtb	r2, r3
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	045c      	lsls	r4, r3, #17
 800318c:	230a      	movs	r3, #10
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	8819      	ldrh	r1, [r3, #0]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	2300      	movs	r3, #0
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	0023      	movs	r3, r4
 800319a:	f000 f9ff 	bl	800359c <I2C_TransferConfig>
 800319e:	e012      	b.n	80031c6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	049c      	lsls	r4, r3, #18
 80031b4:	230a      	movs	r3, #10
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	8819      	ldrh	r1, [r3, #0]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	2300      	movs	r3, #0
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	0023      	movs	r3, r4
 80031c2:	f000 f9eb 	bl	800359c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d194      	bne.n	80030fa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 f92a 	bl	8003430 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d001      	beq.n	80031e4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e01a      	b.n	800321a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2220      	movs	r2, #32
 80031ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	490c      	ldr	r1, [pc, #48]	; (8003228 <HAL_I2C_Mem_Read+0x264>)
 80031f8:	400a      	ands	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2241      	movs	r2, #65	; 0x41
 8003200:	2120      	movs	r1, #32
 8003202:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2242      	movs	r2, #66	; 0x42
 8003208:	2100      	movs	r1, #0
 800320a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2240      	movs	r2, #64	; 0x40
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e000      	b.n	800321a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003218:	2302      	movs	r3, #2
  }
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b007      	add	sp, #28
 8003220:	bd90      	pop	{r4, r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	80002400 	.word	0x80002400
 8003228:	fe00e800 	.word	0xfe00e800

0800322c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800322c:	b5b0      	push	{r4, r5, r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	000c      	movs	r4, r1
 8003236:	0010      	movs	r0, r2
 8003238:	0019      	movs	r1, r3
 800323a:	250a      	movs	r5, #10
 800323c:	197b      	adds	r3, r7, r5
 800323e:	1c22      	adds	r2, r4, #0
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	2308      	movs	r3, #8
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	1c02      	adds	r2, r0, #0
 8003248:	801a      	strh	r2, [r3, #0]
 800324a:	1dbb      	adds	r3, r7, #6
 800324c:	1c0a      	adds	r2, r1, #0
 800324e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003250:	1dbb      	adds	r3, r7, #6
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	197b      	adds	r3, r7, r5
 8003258:	8819      	ldrh	r1, [r3, #0]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	4b23      	ldr	r3, [pc, #140]	; (80032ec <I2C_RequestMemoryRead+0xc0>)
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2300      	movs	r3, #0
 8003262:	f000 f99b 	bl	800359c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003268:	6a39      	ldr	r1, [r7, #32]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	0018      	movs	r0, r3
 800326e:	f000 f8a0 	bl	80033b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003272:	1e03      	subs	r3, r0, #0
 8003274:	d001      	beq.n	800327a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e033      	b.n	80032e2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800327a:	1dbb      	adds	r3, r7, #6
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d107      	bne.n	8003292 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003282:	2308      	movs	r3, #8
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
 8003290:	e019      	b.n	80032c6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003292:	2308      	movs	r3, #8
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	b29b      	uxth	r3, r3
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a6:	6a39      	ldr	r1, [r7, #32]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	0018      	movs	r0, r3
 80032ac:	f000 f881 	bl	80033b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80032b0:	1e03      	subs	r3, r0, #0
 80032b2:	d001      	beq.n	80032b8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e014      	b.n	80032e2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032b8:	2308      	movs	r3, #8
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80032c6:	6a3a      	ldr	r2, [r7, #32]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	0013      	movs	r3, r2
 80032d0:	2200      	movs	r2, #0
 80032d2:	2140      	movs	r1, #64	; 0x40
 80032d4:	f000 f82e 	bl	8003334 <I2C_WaitOnFlagUntilTimeout>
 80032d8:	1e03      	subs	r3, r0, #0
 80032da:	d001      	beq.n	80032e0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b004      	add	sp, #16
 80032e8:	bdb0      	pop	{r4, r5, r7, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	80002000 	.word	0x80002000

080032f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2202      	movs	r2, #2
 8003300:	4013      	ands	r3, r2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d103      	bne.n	800330e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	2201      	movs	r2, #1
 8003316:	4013      	ands	r3, r2
 8003318:	2b01      	cmp	r3, #1
 800331a:	d007      	beq.n	800332c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2101      	movs	r1, #1
 8003328:	430a      	orrs	r2, r1
 800332a:	619a      	str	r2, [r3, #24]
  }
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003344:	e021      	b.n	800338a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	d01e      	beq.n	800338a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334c:	f7ff faa6 	bl	800289c <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d302      	bcc.n	8003362 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d113      	bne.n	800338a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	2220      	movs	r2, #32
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2241      	movs	r2, #65	; 0x41
 8003372:	2120      	movs	r1, #32
 8003374:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2242      	movs	r2, #66	; 0x42
 800337a:	2100      	movs	r1, #0
 800337c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2240      	movs	r2, #64	; 0x40
 8003382:	2100      	movs	r1, #0
 8003384:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4013      	ands	r3, r2
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	425a      	negs	r2, r3
 800339a:	4153      	adcs	r3, r2
 800339c:	b2db      	uxtb	r3, r3
 800339e:	001a      	movs	r2, r3
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d0ce      	beq.n	8003346 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b004      	add	sp, #16
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033be:	e02b      	b.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f86e 	bl	80034a8 <I2C_IsAcknowledgeFailed>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e029      	b.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	3301      	adds	r3, #1
 80033d8:	d01e      	beq.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7ff fa5f 	bl	800289c <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d113      	bne.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	2220      	movs	r2, #32
 80033f6:	431a      	orrs	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2241      	movs	r2, #65	; 0x41
 8003400:	2120      	movs	r1, #32
 8003402:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2242      	movs	r2, #66	; 0x42
 8003408:	2100      	movs	r1, #0
 800340a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2240      	movs	r2, #64	; 0x40
 8003410:	2100      	movs	r1, #0
 8003412:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e007      	b.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2202      	movs	r2, #2
 8003420:	4013      	ands	r3, r2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d1cc      	bne.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b004      	add	sp, #16
 800342e:	bd80      	pop	{r7, pc}

08003430 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800343c:	e028      	b.n	8003490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 f82f 	bl	80034a8 <I2C_IsAcknowledgeFailed>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d001      	beq.n	8003452 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e026      	b.n	80034a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7ff fa23 	bl	800289c <HAL_GetTick>
 8003456:	0002      	movs	r2, r0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d113      	bne.n	8003490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	2220      	movs	r2, #32
 800346e:	431a      	orrs	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2241      	movs	r2, #65	; 0x41
 8003478:	2120      	movs	r1, #32
 800347a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2242      	movs	r2, #66	; 0x42
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2240      	movs	r2, #64	; 0x40
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e007      	b.n	80034a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2220      	movs	r2, #32
 8003498:	4013      	ands	r3, r2
 800349a:	2b20      	cmp	r3, #32
 800349c:	d1cf      	bne.n	800343e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b004      	add	sp, #16
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2210      	movs	r2, #16
 80034bc:	4013      	ands	r3, r2
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d164      	bne.n	800358c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	049b      	lsls	r3, r3, #18
 80034cc:	401a      	ands	r2, r3
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	049b      	lsls	r3, r3, #18
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d02b      	beq.n	800352e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	01c9      	lsls	r1, r1, #7
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e8:	e021      	b.n	800352e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3301      	adds	r3, #1
 80034ee:	d01e      	beq.n	800352e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f0:	f7ff f9d4 	bl	800289c <HAL_GetTick>
 80034f4:	0002      	movs	r2, r0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d302      	bcc.n	8003506 <I2C_IsAcknowledgeFailed+0x5e>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d113      	bne.n	800352e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	2220      	movs	r2, #32
 800350c:	431a      	orrs	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2241      	movs	r2, #65	; 0x41
 8003516:	2120      	movs	r1, #32
 8003518:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2242      	movs	r2, #66	; 0x42
 800351e:	2100      	movs	r1, #0
 8003520:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2240      	movs	r2, #64	; 0x40
 8003526:	2100      	movs	r1, #0
 8003528:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e02f      	b.n	800358e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2220      	movs	r2, #32
 8003536:	4013      	ands	r3, r2
 8003538:	2b20      	cmp	r3, #32
 800353a:	d1d6      	bne.n	80034ea <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2210      	movs	r2, #16
 8003542:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2220      	movs	r2, #32
 800354a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	0018      	movs	r0, r3
 8003550:	f7ff fece 	bl	80032f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	490e      	ldr	r1, [pc, #56]	; (8003598 <I2C_IsAcknowledgeFailed+0xf0>)
 8003560:	400a      	ands	r2, r1
 8003562:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	2204      	movs	r2, #4
 800356a:	431a      	orrs	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2241      	movs	r2, #65	; 0x41
 8003574:	2120      	movs	r1, #32
 8003576:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2242      	movs	r2, #66	; 0x42
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2240      	movs	r2, #64	; 0x40
 8003584:	2100      	movs	r1, #0
 8003586:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b004      	add	sp, #16
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	fe00e800 	.word	0xfe00e800

0800359c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	0008      	movs	r0, r1
 80035a6:	0011      	movs	r1, r2
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	240a      	movs	r4, #10
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	1c02      	adds	r2, r0, #0
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	2009      	movs	r0, #9
 80035b4:	183b      	adds	r3, r7, r0
 80035b6:	1c0a      	adds	r2, r1, #0
 80035b8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	6a3a      	ldr	r2, [r7, #32]
 80035c2:	0d51      	lsrs	r1, r2, #21
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	00d2      	lsls	r2, r2, #3
 80035c8:	400a      	ands	r2, r1
 80035ca:	490e      	ldr	r1, [pc, #56]	; (8003604 <I2C_TransferConfig+0x68>)
 80035cc:	430a      	orrs	r2, r1
 80035ce:	43d2      	mvns	r2, r2
 80035d0:	401a      	ands	r2, r3
 80035d2:	0011      	movs	r1, r2
 80035d4:	193b      	adds	r3, r7, r4
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	059b      	lsls	r3, r3, #22
 80035da:	0d9a      	lsrs	r2, r3, #22
 80035dc:	183b      	adds	r3, r7, r0
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	0418      	lsls	r0, r3, #16
 80035e2:	23ff      	movs	r3, #255	; 0xff
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	4003      	ands	r3, r0
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b005      	add	sp, #20
 8003600:	bd90      	pop	{r4, r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	03ff63ff 	.word	0x03ff63ff

08003608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2241      	movs	r2, #65	; 0x41
 8003616:	5c9b      	ldrb	r3, [r3, r2]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	d138      	bne.n	8003690 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2240      	movs	r2, #64	; 0x40
 8003622:	5c9b      	ldrb	r3, [r3, r2]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003628:	2302      	movs	r3, #2
 800362a:	e032      	b.n	8003692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2240      	movs	r2, #64	; 0x40
 8003630:	2101      	movs	r1, #1
 8003632:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2241      	movs	r2, #65	; 0x41
 8003638:	2124      	movs	r1, #36	; 0x24
 800363a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2101      	movs	r1, #1
 8003648:	438a      	bics	r2, r1
 800364a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4911      	ldr	r1, [pc, #68]	; (800369c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003658:	400a      	ands	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2101      	movs	r1, #1
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2241      	movs	r2, #65	; 0x41
 8003680:	2120      	movs	r1, #32
 8003682:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e000      	b.n	8003692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
  }
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	ffffefff 	.word	0xffffefff

080036a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2241      	movs	r2, #65	; 0x41
 80036ae:	5c9b      	ldrb	r3, [r3, r2]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d139      	bne.n	800372a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2240      	movs	r2, #64	; 0x40
 80036ba:	5c9b      	ldrb	r3, [r3, r2]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e033      	b.n	800372c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2240      	movs	r2, #64	; 0x40
 80036c8:	2101      	movs	r1, #1
 80036ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2241      	movs	r2, #65	; 0x41
 80036d0:	2124      	movs	r1, #36	; 0x24
 80036d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	438a      	bics	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a11      	ldr	r2, [pc, #68]	; (8003734 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	430a      	orrs	r2, r1
 8003714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2241      	movs	r2, #65	; 0x41
 800371a:	2120      	movs	r1, #32
 800371c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2240      	movs	r2, #64	; 0x40
 8003722:	2100      	movs	r1, #0
 8003724:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
  }
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b004      	add	sp, #16
 8003732:	bd80      	pop	{r7, pc}
 8003734:	fffff0ff 	.word	0xfffff0ff

08003738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e301      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2201      	movs	r2, #1
 8003750:	4013      	ands	r3, r2
 8003752:	d100      	bne.n	8003756 <HAL_RCC_OscConfig+0x1e>
 8003754:	e08d      	b.n	8003872 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003756:	4bc3      	ldr	r3, [pc, #780]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	220c      	movs	r2, #12
 800375c:	4013      	ands	r3, r2
 800375e:	2b04      	cmp	r3, #4
 8003760:	d00e      	beq.n	8003780 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003762:	4bc0      	ldr	r3, [pc, #768]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	220c      	movs	r2, #12
 8003768:	4013      	ands	r3, r2
 800376a:	2b08      	cmp	r3, #8
 800376c:	d116      	bne.n	800379c <HAL_RCC_OscConfig+0x64>
 800376e:	4bbd      	ldr	r3, [pc, #756]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	025b      	lsls	r3, r3, #9
 8003776:	401a      	ands	r2, r3
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	025b      	lsls	r3, r3, #9
 800377c:	429a      	cmp	r2, r3
 800377e:	d10d      	bne.n	800379c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	4bb8      	ldr	r3, [pc, #736]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	029b      	lsls	r3, r3, #10
 8003788:	4013      	ands	r3, r2
 800378a:	d100      	bne.n	800378e <HAL_RCC_OscConfig+0x56>
 800378c:	e070      	b.n	8003870 <HAL_RCC_OscConfig+0x138>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d000      	beq.n	8003798 <HAL_RCC_OscConfig+0x60>
 8003796:	e06b      	b.n	8003870 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e2d8      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_OscConfig+0x7c>
 80037a4:	4baf      	ldr	r3, [pc, #700]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4bae      	ldr	r3, [pc, #696]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	0249      	lsls	r1, r1, #9
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e02f      	b.n	8003814 <HAL_RCC_OscConfig+0xdc>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10c      	bne.n	80037d6 <HAL_RCC_OscConfig+0x9e>
 80037bc:	4ba9      	ldr	r3, [pc, #676]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4ba8      	ldr	r3, [pc, #672]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037c2:	49a9      	ldr	r1, [pc, #676]	; (8003a68 <HAL_RCC_OscConfig+0x330>)
 80037c4:	400a      	ands	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	4ba6      	ldr	r3, [pc, #664]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4ba5      	ldr	r3, [pc, #660]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037ce:	49a7      	ldr	r1, [pc, #668]	; (8003a6c <HAL_RCC_OscConfig+0x334>)
 80037d0:	400a      	ands	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e01e      	b.n	8003814 <HAL_RCC_OscConfig+0xdc>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b05      	cmp	r3, #5
 80037dc:	d10e      	bne.n	80037fc <HAL_RCC_OscConfig+0xc4>
 80037de:	4ba1      	ldr	r3, [pc, #644]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4ba0      	ldr	r3, [pc, #640]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	02c9      	lsls	r1, r1, #11
 80037e8:	430a      	orrs	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	4b9d      	ldr	r3, [pc, #628]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b9c      	ldr	r3, [pc, #624]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037f2:	2180      	movs	r1, #128	; 0x80
 80037f4:	0249      	lsls	r1, r1, #9
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0xdc>
 80037fc:	4b99      	ldr	r3, [pc, #612]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4b98      	ldr	r3, [pc, #608]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003802:	4999      	ldr	r1, [pc, #612]	; (8003a68 <HAL_RCC_OscConfig+0x330>)
 8003804:	400a      	ands	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	4b96      	ldr	r3, [pc, #600]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b95      	ldr	r3, [pc, #596]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800380e:	4997      	ldr	r1, [pc, #604]	; (8003a6c <HAL_RCC_OscConfig+0x334>)
 8003810:	400a      	ands	r2, r1
 8003812:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d014      	beq.n	8003846 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7ff f83e 	bl	800289c <HAL_GetTick>
 8003820:	0003      	movs	r3, r0
 8003822:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003826:	f7ff f839 	bl	800289c <HAL_GetTick>
 800382a:	0002      	movs	r2, r0
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b64      	cmp	r3, #100	; 0x64
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e28a      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003838:	4b8a      	ldr	r3, [pc, #552]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	029b      	lsls	r3, r3, #10
 8003840:	4013      	ands	r3, r2
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0xee>
 8003844:	e015      	b.n	8003872 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7ff f829 	bl	800289c <HAL_GetTick>
 800384a:	0003      	movs	r3, r0
 800384c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003850:	f7ff f824 	bl	800289c <HAL_GetTick>
 8003854:	0002      	movs	r2, r0
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e275      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	4b80      	ldr	r3, [pc, #512]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	029b      	lsls	r3, r3, #10
 800386a:	4013      	ands	r3, r2
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x118>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2202      	movs	r2, #2
 8003878:	4013      	ands	r3, r2
 800387a:	d100      	bne.n	800387e <HAL_RCC_OscConfig+0x146>
 800387c:	e069      	b.n	8003952 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800387e:	4b79      	ldr	r3, [pc, #484]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	220c      	movs	r2, #12
 8003884:	4013      	ands	r3, r2
 8003886:	d00b      	beq.n	80038a0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003888:	4b76      	ldr	r3, [pc, #472]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	220c      	movs	r2, #12
 800388e:	4013      	ands	r3, r2
 8003890:	2b08      	cmp	r3, #8
 8003892:	d11c      	bne.n	80038ce <HAL_RCC_OscConfig+0x196>
 8003894:	4b73      	ldr	r3, [pc, #460]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	025b      	lsls	r3, r3, #9
 800389c:	4013      	ands	r3, r2
 800389e:	d116      	bne.n	80038ce <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a0:	4b70      	ldr	r3, [pc, #448]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2202      	movs	r2, #2
 80038a6:	4013      	ands	r3, r2
 80038a8:	d005      	beq.n	80038b6 <HAL_RCC_OscConfig+0x17e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e24b      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b6:	4b6b      	ldr	r3, [pc, #428]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	22f8      	movs	r2, #248	; 0xf8
 80038bc:	4393      	bics	r3, r2
 80038be:	0019      	movs	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	00da      	lsls	r2, r3, #3
 80038c6:	4b67      	ldr	r3, [pc, #412]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038cc:	e041      	b.n	8003952 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d024      	beq.n	8003920 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d6:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80038dc:	2101      	movs	r1, #1
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e2:	f7fe ffdb 	bl	800289c <HAL_GetTick>
 80038e6:	0003      	movs	r3, r0
 80038e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fe ffd6 	bl	800289c <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e227      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fe:	4b59      	ldr	r3, [pc, #356]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2202      	movs	r2, #2
 8003904:	4013      	ands	r3, r2
 8003906:	d0f1      	beq.n	80038ec <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b56      	ldr	r3, [pc, #344]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	22f8      	movs	r2, #248	; 0xf8
 800390e:	4393      	bics	r3, r2
 8003910:	0019      	movs	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00da      	lsls	r2, r3, #3
 8003918:	4b52      	ldr	r3, [pc, #328]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e018      	b.n	8003952 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b4f      	ldr	r3, [pc, #316]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003926:	2101      	movs	r1, #1
 8003928:	438a      	bics	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fe ffb6 	bl	800289c <HAL_GetTick>
 8003930:	0003      	movs	r3, r0
 8003932:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003936:	f7fe ffb1 	bl	800289c <HAL_GetTick>
 800393a:	0002      	movs	r2, r0
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e202      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003948:	4b46      	ldr	r3, [pc, #280]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2202      	movs	r2, #2
 800394e:	4013      	ands	r3, r2
 8003950:	d1f1      	bne.n	8003936 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2208      	movs	r2, #8
 8003958:	4013      	ands	r3, r2
 800395a:	d036      	beq.n	80039ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d019      	beq.n	8003998 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003964:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003968:	4b3e      	ldr	r3, [pc, #248]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800396a:	2101      	movs	r1, #1
 800396c:	430a      	orrs	r2, r1
 800396e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003970:	f7fe ff94 	bl	800289c <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397a:	f7fe ff8f 	bl	800289c <HAL_GetTick>
 800397e:	0002      	movs	r2, r0
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e1e0      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398c:	4b35      	ldr	r3, [pc, #212]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2202      	movs	r2, #2
 8003992:	4013      	ands	r3, r2
 8003994:	d0f1      	beq.n	800397a <HAL_RCC_OscConfig+0x242>
 8003996:	e018      	b.n	80039ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003998:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800399a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800399c:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 800399e:	2101      	movs	r1, #1
 80039a0:	438a      	bics	r2, r1
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a4:	f7fe ff7a 	bl	800289c <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ae:	f7fe ff75 	bl	800289c <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e1c6      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2202      	movs	r2, #2
 80039c6:	4013      	ands	r3, r2
 80039c8:	d1f1      	bne.n	80039ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2204      	movs	r2, #4
 80039d0:	4013      	ands	r3, r2
 80039d2:	d100      	bne.n	80039d6 <HAL_RCC_OscConfig+0x29e>
 80039d4:	e0b4      	b.n	8003b40 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d6:	201f      	movs	r0, #31
 80039d8:	183b      	adds	r3, r7, r0
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039de:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	055b      	lsls	r3, r3, #21
 80039e6:	4013      	ands	r3, r2
 80039e8:	d110      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80039f0:	2180      	movs	r1, #128	; 0x80
 80039f2:	0549      	lsls	r1, r1, #21
 80039f4:	430a      	orrs	r2, r1
 80039f6:	61da      	str	r2, [r3, #28]
 80039f8:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	055b      	lsls	r3, r3, #21
 8003a00:	4013      	ands	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a06:	183b      	adds	r3, r7, r0
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <HAL_RCC_OscConfig+0x338>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4013      	ands	r3, r2
 8003a16:	d11a      	bne.n	8003a4e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <HAL_RCC_OscConfig+0x338>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <HAL_RCC_OscConfig+0x338>)
 8003a1e:	2180      	movs	r1, #128	; 0x80
 8003a20:	0049      	lsls	r1, r1, #1
 8003a22:	430a      	orrs	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fe ff39 	bl	800289c <HAL_GetTick>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a30:	f7fe ff34 	bl	800289c <HAL_GetTick>
 8003a34:	0002      	movs	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e185      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_OscConfig+0x338>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d10e      	bne.n	8003a74 <HAL_RCC_OscConfig+0x33c>
 8003a56:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	4b02      	ldr	r3, [pc, #8]	; (8003a64 <HAL_RCC_OscConfig+0x32c>)
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	621a      	str	r2, [r3, #32]
 8003a62:	e035      	b.n	8003ad0 <HAL_RCC_OscConfig+0x398>
 8003a64:	40021000 	.word	0x40021000
 8003a68:	fffeffff 	.word	0xfffeffff
 8003a6c:	fffbffff 	.word	0xfffbffff
 8003a70:	40007000 	.word	0x40007000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10c      	bne.n	8003a96 <HAL_RCC_OscConfig+0x35e>
 8003a7c:	4bb6      	ldr	r3, [pc, #728]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	4bb5      	ldr	r3, [pc, #724]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003a82:	2101      	movs	r1, #1
 8003a84:	438a      	bics	r2, r1
 8003a86:	621a      	str	r2, [r3, #32]
 8003a88:	4bb3      	ldr	r3, [pc, #716]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003a8a:	6a1a      	ldr	r2, [r3, #32]
 8003a8c:	4bb2      	ldr	r3, [pc, #712]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003a8e:	2104      	movs	r1, #4
 8003a90:	438a      	bics	r2, r1
 8003a92:	621a      	str	r2, [r3, #32]
 8003a94:	e01c      	b.n	8003ad0 <HAL_RCC_OscConfig+0x398>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x380>
 8003a9e:	4bae      	ldr	r3, [pc, #696]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003aa0:	6a1a      	ldr	r2, [r3, #32]
 8003aa2:	4bad      	ldr	r3, [pc, #692]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003aa4:	2104      	movs	r1, #4
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	621a      	str	r2, [r3, #32]
 8003aaa:	4bab      	ldr	r3, [pc, #684]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003aac:	6a1a      	ldr	r2, [r3, #32]
 8003aae:	4baa      	ldr	r3, [pc, #680]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	621a      	str	r2, [r3, #32]
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCC_OscConfig+0x398>
 8003ab8:	4ba7      	ldr	r3, [pc, #668]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003aba:	6a1a      	ldr	r2, [r3, #32]
 8003abc:	4ba6      	ldr	r3, [pc, #664]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003abe:	2101      	movs	r1, #1
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	621a      	str	r2, [r3, #32]
 8003ac4:	4ba4      	ldr	r3, [pc, #656]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003ac6:	6a1a      	ldr	r2, [r3, #32]
 8003ac8:	4ba3      	ldr	r3, [pc, #652]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003aca:	2104      	movs	r1, #4
 8003acc:	438a      	bics	r2, r1
 8003ace:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d014      	beq.n	8003b02 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad8:	f7fe fee0 	bl	800289c <HAL_GetTick>
 8003adc:	0003      	movs	r3, r0
 8003ade:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	e009      	b.n	8003af6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fe fedb 	bl	800289c <HAL_GetTick>
 8003ae6:	0002      	movs	r2, r0
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	4a9b      	ldr	r2, [pc, #620]	; (8003d5c <HAL_RCC_OscConfig+0x624>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e12b      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	4b98      	ldr	r3, [pc, #608]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	2202      	movs	r2, #2
 8003afc:	4013      	ands	r3, r2
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x3aa>
 8003b00:	e013      	b.n	8003b2a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b02:	f7fe fecb 	bl	800289c <HAL_GetTick>
 8003b06:	0003      	movs	r3, r0
 8003b08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0a:	e009      	b.n	8003b20 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fec6 	bl	800289c <HAL_GetTick>
 8003b10:	0002      	movs	r2, r0
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	4a91      	ldr	r2, [pc, #580]	; (8003d5c <HAL_RCC_OscConfig+0x624>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e116      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b20:	4b8d      	ldr	r3, [pc, #564]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	2202      	movs	r2, #2
 8003b26:	4013      	ands	r3, r2
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b2a:	231f      	movs	r3, #31
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b34:	4b88      	ldr	r3, [pc, #544]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	4b87      	ldr	r3, [pc, #540]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003b3a:	4989      	ldr	r1, [pc, #548]	; (8003d60 <HAL_RCC_OscConfig+0x628>)
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2210      	movs	r2, #16
 8003b46:	4013      	ands	r3, r2
 8003b48:	d063      	beq.n	8003c12 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d12a      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b52:	4b81      	ldr	r3, [pc, #516]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b56:	4b80      	ldr	r3, [pc, #512]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003b58:	2104      	movs	r1, #4
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003b5e:	4b7e      	ldr	r3, [pc, #504]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b62:	4b7d      	ldr	r3, [pc, #500]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003b64:	2101      	movs	r1, #1
 8003b66:	430a      	orrs	r2, r1
 8003b68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6a:	f7fe fe97 	bl	800289c <HAL_GetTick>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b74:	f7fe fe92 	bl	800289c <HAL_GetTick>
 8003b78:	0002      	movs	r2, r0
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e0e3      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b86:	4b74      	ldr	r3, [pc, #464]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d0f1      	beq.n	8003b74 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b90:	4b71      	ldr	r3, [pc, #452]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	22f8      	movs	r2, #248	; 0xf8
 8003b96:	4393      	bics	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	00da      	lsls	r2, r3, #3
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ba6:	e034      	b.n	8003c12 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	3305      	adds	r3, #5
 8003bae:	d111      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003bb0:	4b69      	ldr	r3, [pc, #420]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb4:	4b68      	ldr	r3, [pc, #416]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003bb6:	2104      	movs	r1, #4
 8003bb8:	438a      	bics	r2, r1
 8003bba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003bbc:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc0:	22f8      	movs	r2, #248	; 0xf8
 8003bc2:	4393      	bics	r3, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	00da      	lsls	r2, r3, #3
 8003bcc:	4b62      	ldr	r3, [pc, #392]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8003bd2:	e01e      	b.n	8003c12 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003bd4:	4b60      	ldr	r3, [pc, #384]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd8:	4b5f      	ldr	r3, [pc, #380]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003bda:	2104      	movs	r1, #4
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003be0:	4b5d      	ldr	r3, [pc, #372]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be4:	4b5c      	ldr	r3, [pc, #368]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003be6:	2101      	movs	r1, #1
 8003be8:	438a      	bics	r2, r1
 8003bea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bec:	f7fe fe56 	bl	800289c <HAL_GetTick>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003bf6:	f7fe fe51 	bl	800289c <HAL_GetTick>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0a2      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003c08:	4b53      	ldr	r3, [pc, #332]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d1f1      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d100      	bne.n	8003c1c <HAL_RCC_OscConfig+0x4e4>
 8003c1a:	e097      	b.n	8003d4c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c1c:	4b4e      	ldr	r3, [pc, #312]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	220c      	movs	r2, #12
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d100      	bne.n	8003c2a <HAL_RCC_OscConfig+0x4f2>
 8003c28:	e06b      	b.n	8003d02 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d14c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b49      	ldr	r3, [pc, #292]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b48      	ldr	r3, [pc, #288]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c38:	494a      	ldr	r1, [pc, #296]	; (8003d64 <HAL_RCC_OscConfig+0x62c>)
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fe fe2d 	bl	800289c <HAL_GetTick>
 8003c42:	0003      	movs	r3, r0
 8003c44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fe fe28 	bl	800289c <HAL_GetTick>
 8003c4c:	0002      	movs	r2, r0
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e079      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5a:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	049b      	lsls	r3, r3, #18
 8003c62:	4013      	ands	r3, r2
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c66:	4b3c      	ldr	r3, [pc, #240]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	4393      	bics	r3, r2
 8003c6e:	0019      	movs	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	4b38      	ldr	r3, [pc, #224]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c76:	430a      	orrs	r2, r1
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c7a:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4a3a      	ldr	r2, [pc, #232]	; (8003d68 <HAL_RCC_OscConfig+0x630>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	0019      	movs	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	4b32      	ldr	r3, [pc, #200]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c90:	430a      	orrs	r2, r1
 8003c92:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c94:	4b30      	ldr	r3, [pc, #192]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	0449      	lsls	r1, r1, #17
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fdfb 	bl	800289c <HAL_GetTick>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe fdf6 	bl	800289c <HAL_GetTick>
 8003cb0:	0002      	movs	r2, r0
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e047      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cbe:	4b26      	ldr	r3, [pc, #152]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	049b      	lsls	r3, r3, #18
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x574>
 8003cca:	e03f      	b.n	8003d4c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ccc:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b21      	ldr	r3, [pc, #132]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003cd2:	4924      	ldr	r1, [pc, #144]	; (8003d64 <HAL_RCC_OscConfig+0x62c>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fde0 	bl	800289c <HAL_GetTick>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce2:	f7fe fddb 	bl	800289c <HAL_GetTick>
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e02c      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf4:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	049b      	lsls	r3, r3, #18
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d1f0      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x5aa>
 8003d00:	e024      	b.n	8003d4c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e01f      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003d0e:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <HAL_RCC_OscConfig+0x620>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	025b      	lsls	r3, r3, #9
 8003d20:	401a      	ands	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10e      	bne.n	8003d48 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	220f      	movs	r2, #15
 8003d2e:	401a      	ands	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d107      	bne.n	8003d48 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	23f0      	movs	r3, #240	; 0xf0
 8003d3c:	039b      	lsls	r3, r3, #14
 8003d3e:	401a      	ands	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b008      	add	sp, #32
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	00001388 	.word	0x00001388
 8003d60:	efffffff 	.word	0xefffffff
 8003d64:	feffffff 	.word	0xfeffffff
 8003d68:	ffc2ffff 	.word	0xffc2ffff

08003d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0b3      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d80:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <HAL_RCC_ClockConfig+0x184>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2201      	movs	r2, #1
 8003d86:	4013      	ands	r3, r2
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d911      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b58      	ldr	r3, [pc, #352]	; (8003ef0 <HAL_RCC_ClockConfig+0x184>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2201      	movs	r2, #1
 8003d94:	4393      	bics	r3, r2
 8003d96:	0019      	movs	r1, r3
 8003d98:	4b55      	ldr	r3, [pc, #340]	; (8003ef0 <HAL_RCC_ClockConfig+0x184>)
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da0:	4b53      	ldr	r3, [pc, #332]	; (8003ef0 <HAL_RCC_ClockConfig+0x184>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2201      	movs	r2, #1
 8003da6:	4013      	ands	r3, r2
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d001      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e09a      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2202      	movs	r2, #2
 8003db8:	4013      	ands	r3, r2
 8003dba:	d015      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d006      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003dc6:	4b4b      	ldr	r3, [pc, #300]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003dcc:	21e0      	movs	r1, #224	; 0xe0
 8003dce:	00c9      	lsls	r1, r1, #3
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd4:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	22f0      	movs	r2, #240	; 0xf0
 8003dda:	4393      	bics	r3, r2
 8003ddc:	0019      	movs	r1, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2201      	movs	r2, #1
 8003dee:	4013      	ands	r3, r2
 8003df0:	d040      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d107      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	029b      	lsls	r3, r3, #10
 8003e02:	4013      	ands	r3, r2
 8003e04:	d114      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e06e      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b38      	ldr	r3, [pc, #224]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	049b      	lsls	r3, r3, #18
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d108      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e062      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2202      	movs	r2, #2
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e05b      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e30:	4b30      	ldr	r3, [pc, #192]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2203      	movs	r2, #3
 8003e36:	4393      	bics	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003e40:	430a      	orrs	r2, r1
 8003e42:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fe fd2a 	bl	800289c <HAL_GetTick>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4c:	e009      	b.n	8003e62 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4e:	f7fe fd25 	bl	800289c <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	4a27      	ldr	r2, [pc, #156]	; (8003ef8 <HAL_RCC_ClockConfig+0x18c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e042      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	220c      	movs	r2, #12
 8003e68:	401a      	ands	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1ec      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <HAL_RCC_ClockConfig+0x184>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d211      	bcs.n	8003ea6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_RCC_ClockConfig+0x184>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2201      	movs	r2, #1
 8003e88:	4393      	bics	r3, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <HAL_RCC_ClockConfig+0x184>)
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <HAL_RCC_ClockConfig+0x184>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e020      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	d009      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a11      	ldr	r2, [pc, #68]	; (8003efc <HAL_RCC_ClockConfig+0x190>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ec4:	f000 f820 	bl	8003f08 <HAL_RCC_GetSysClockFreq>
 8003ec8:	0001      	movs	r1, r0
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x188>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_RCC_ClockConfig+0x194>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	000a      	movs	r2, r1
 8003eda:	40da      	lsrs	r2, r3
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <HAL_RCC_ClockConfig+0x198>)
 8003ede:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7fe fc95 	bl	8002810 <HAL_InitTick>
  
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b004      	add	sp, #16
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40022000 	.word	0x40022000
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	00001388 	.word	0x00001388
 8003efc:	fffff8ff 	.word	0xfffff8ff
 8003f00:	080046b4 	.word	0x080046b4
 8003f04:	20000008 	.word	0x20000008

08003f08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b08f      	sub	sp, #60	; 0x3c
 8003f0c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003f0e:	2314      	movs	r3, #20
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	4a2b      	ldr	r2, [pc, #172]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003f16:	c313      	stmia	r3!, {r0, r1, r4}
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003f1c:	1d3b      	adds	r3, r7, #4
 8003f1e:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003f22:	c313      	stmia	r3!, {r0, r1, r4}
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f30:	2300      	movs	r3, #0
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003f3c:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	220c      	movs	r2, #12
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d002      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x4a>
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d003      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x50>
 8003f50:	e02d      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f56:	e02d      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	0c9b      	lsrs	r3, r3, #18
 8003f5c:	220f      	movs	r2, #15
 8003f5e:	4013      	ands	r3, r2
 8003f60:	2214      	movs	r2, #20
 8003f62:	18ba      	adds	r2, r7, r2
 8003f64:	5cd3      	ldrb	r3, [r2, r3]
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003f68:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	220f      	movs	r2, #15
 8003f6e:	4013      	ands	r3, r2
 8003f70:	1d3a      	adds	r2, r7, #4
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	025b      	lsls	r3, r3, #9
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f82:	4812      	ldr	r0, [pc, #72]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f84:	f7fc f8c0 	bl	8000108 <__udivsi3>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	001a      	movs	r2, r3
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	4353      	muls	r3, r2
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
 8003f92:	e009      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f96:	000a      	movs	r2, r1
 8003f98:	0152      	lsls	r2, r2, #5
 8003f9a:	1a52      	subs	r2, r2, r1
 8003f9c:	0193      	lsls	r3, r2, #6
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	185b      	adds	r3, r3, r1
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003faa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fac:	e002      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fb2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b00f      	add	sp, #60	; 0x3c
 8003fbc:	bd90      	pop	{r4, r7, pc}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	0800439c 	.word	0x0800439c
 8003fc4:	080043ac 	.word	0x080043ac
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	007a1200 	.word	0x007a1200

08003fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	025b      	lsls	r3, r3, #9
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d100      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003fec:	e08e      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003fee:	2017      	movs	r0, #23
 8003ff0:	183b      	adds	r3, r7, r0
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff6:	4b57      	ldr	r3, [pc, #348]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	055b      	lsls	r3, r3, #21
 8003ffe:	4013      	ands	r3, r2
 8004000:	d110      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004002:	4b54      	ldr	r3, [pc, #336]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	4b53      	ldr	r3, [pc, #332]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	0549      	lsls	r1, r1, #21
 800400c:	430a      	orrs	r2, r1
 800400e:	61da      	str	r2, [r3, #28]
 8004010:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004012:	69da      	ldr	r2, [r3, #28]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	055b      	lsls	r3, r3, #21
 8004018:	4013      	ands	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401e:	183b      	adds	r3, r7, r0
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004024:	4b4c      	ldr	r3, [pc, #304]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4013      	ands	r3, r2
 800402e:	d11a      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004030:	4b49      	ldr	r3, [pc, #292]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b48      	ldr	r3, [pc, #288]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	0049      	lsls	r1, r1, #1
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403e:	f7fe fc2d 	bl	800289c <HAL_GetTick>
 8004042:	0003      	movs	r3, r0
 8004044:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004046:	e008      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004048:	f7fe fc28 	bl	800289c <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e077      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b3f      	ldr	r3, [pc, #252]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4013      	ands	r3, r2
 8004064:	d0f0      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004066:	4b3b      	ldr	r3, [pc, #236]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004068:	6a1a      	ldr	r2, [r3, #32]
 800406a:	23c0      	movs	r3, #192	; 0xc0
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4013      	ands	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d034      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	23c0      	movs	r3, #192	; 0xc0
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4013      	ands	r3, r2
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	429a      	cmp	r2, r3
 8004086:	d02c      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004088:	4b32      	ldr	r3, [pc, #200]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4a33      	ldr	r2, [pc, #204]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800408e:	4013      	ands	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004092:	4b30      	ldr	r3, [pc, #192]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	0249      	lsls	r1, r1, #9
 800409c:	430a      	orrs	r2, r1
 800409e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040a0:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040a2:	6a1a      	ldr	r2, [r3, #32]
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040a6:	492e      	ldr	r1, [pc, #184]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80040a8:	400a      	ands	r2, r1
 80040aa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040ac:	4b29      	ldr	r3, [pc, #164]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	4013      	ands	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ba:	f7fe fbef 	bl	800289c <HAL_GetTick>
 80040be:	0003      	movs	r3, r0
 80040c0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	e009      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fe fbea 	bl	800289c <HAL_GetTick>
 80040c8:	0002      	movs	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	4a25      	ldr	r2, [pc, #148]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e038      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d8:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	2202      	movs	r2, #2
 80040de:	4013      	ands	r3, r2
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4a1d      	ldr	r2, [pc, #116]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	4b18      	ldr	r3, [pc, #96]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040f2:	430a      	orrs	r2, r1
 80040f4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040f6:	2317      	movs	r3, #23
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d105      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004100:	4b14      	ldr	r3, [pc, #80]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	4b13      	ldr	r3, [pc, #76]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004106:	4918      	ldr	r1, [pc, #96]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004108:	400a      	ands	r2, r1
 800410a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2201      	movs	r2, #1
 8004112:	4013      	ands	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	2203      	movs	r2, #3
 800411c:	4393      	bics	r3, r2
 800411e:	0019      	movs	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004126:	430a      	orrs	r2, r1
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2220      	movs	r2, #32
 8004130:	4013      	ands	r3, r2
 8004132:	d009      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004134:	4b07      	ldr	r3, [pc, #28]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2210      	movs	r2, #16
 800413a:	4393      	bics	r3, r2
 800413c:	0019      	movs	r1, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004144:	430a      	orrs	r2, r1
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	b006      	add	sp, #24
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	40021000 	.word	0x40021000
 8004158:	40007000 	.word	0x40007000
 800415c:	fffffcff 	.word	0xfffffcff
 8004160:	fffeffff 	.word	0xfffeffff
 8004164:	00001388 	.word	0x00001388
 8004168:	efffffff 	.word	0xefffffff

0800416c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0a8      	b.n	80042d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	2382      	movs	r3, #130	; 0x82
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	429a      	cmp	r2, r3
 8004190:	d009      	beq.n	80041a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	61da      	str	r2, [r3, #28]
 8004198:	e005      	b.n	80041a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	225d      	movs	r2, #93	; 0x5d
 80041b0:	5c9b      	ldrb	r3, [r3, r2]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	225c      	movs	r2, #92	; 0x5c
 80041bc:	2100      	movs	r1, #0
 80041be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f7fc fc32 	bl	8000a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	225d      	movs	r2, #93	; 0x5d
 80041cc:	2102      	movs	r1, #2
 80041ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2140      	movs	r1, #64	; 0x40
 80041dc:	438a      	bics	r2, r1
 80041de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	23e0      	movs	r3, #224	; 0xe0
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d902      	bls.n	80041f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e002      	b.n	80041f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	015b      	lsls	r3, r3, #5
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	23f0      	movs	r3, #240	; 0xf0
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	429a      	cmp	r2, r3
 8004202:	d008      	beq.n	8004216 <HAL_SPI_Init+0xaa>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	23e0      	movs	r3, #224	; 0xe0
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	429a      	cmp	r2, r3
 800420e:	d002      	beq.n	8004216 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	2382      	movs	r3, #130	; 0x82
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	401a      	ands	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6899      	ldr	r1, [r3, #8]
 8004224:	2384      	movs	r3, #132	; 0x84
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	400b      	ands	r3, r1
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2102      	movs	r1, #2
 8004232:	400b      	ands	r3, r1
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	2101      	movs	r1, #1
 800423c:	400b      	ands	r3, r1
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6999      	ldr	r1, [r3, #24]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	400b      	ands	r3, r1
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	2138      	movs	r1, #56	; 0x38
 8004252:	400b      	ands	r3, r1
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	400b      	ands	r3, r1
 800425e:	431a      	orrs	r2, r3
 8004260:	0011      	movs	r1, r2
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	019b      	lsls	r3, r3, #6
 800426a:	401a      	ands	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	2204      	movs	r2, #4
 800427c:	401a      	ands	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2110      	movs	r1, #16
 8004284:	400b      	ands	r3, r1
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	2108      	movs	r1, #8
 800428e:	400b      	ands	r3, r1
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68d9      	ldr	r1, [r3, #12]
 8004296:	23f0      	movs	r3, #240	; 0xf0
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	400b      	ands	r3, r1
 800429c:	431a      	orrs	r2, r3
 800429e:	0011      	movs	r1, r2
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	015b      	lsls	r3, r3, #5
 80042a6:	401a      	ands	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4907      	ldr	r1, [pc, #28]	; (80042d8 <HAL_SPI_Init+0x16c>)
 80042bc:	400a      	ands	r2, r1
 80042be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	225d      	movs	r2, #93	; 0x5d
 80042ca:	2101      	movs	r1, #1
 80042cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b004      	add	sp, #16
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	fffff7ff 	.word	0xfffff7ff

080042dc <__libc_init_array>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	2600      	movs	r6, #0
 80042e0:	4d0c      	ldr	r5, [pc, #48]	; (8004314 <__libc_init_array+0x38>)
 80042e2:	4c0d      	ldr	r4, [pc, #52]	; (8004318 <__libc_init_array+0x3c>)
 80042e4:	1b64      	subs	r4, r4, r5
 80042e6:	10a4      	asrs	r4, r4, #2
 80042e8:	42a6      	cmp	r6, r4
 80042ea:	d109      	bne.n	8004300 <__libc_init_array+0x24>
 80042ec:	2600      	movs	r6, #0
 80042ee:	f000 f82b 	bl	8004348 <_init>
 80042f2:	4d0a      	ldr	r5, [pc, #40]	; (800431c <__libc_init_array+0x40>)
 80042f4:	4c0a      	ldr	r4, [pc, #40]	; (8004320 <__libc_init_array+0x44>)
 80042f6:	1b64      	subs	r4, r4, r5
 80042f8:	10a4      	asrs	r4, r4, #2
 80042fa:	42a6      	cmp	r6, r4
 80042fc:	d105      	bne.n	800430a <__libc_init_array+0x2e>
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	00b3      	lsls	r3, r6, #2
 8004302:	58eb      	ldr	r3, [r5, r3]
 8004304:	4798      	blx	r3
 8004306:	3601      	adds	r6, #1
 8004308:	e7ee      	b.n	80042e8 <__libc_init_array+0xc>
 800430a:	00b3      	lsls	r3, r6, #2
 800430c:	58eb      	ldr	r3, [r5, r3]
 800430e:	4798      	blx	r3
 8004310:	3601      	adds	r6, #1
 8004312:	e7f2      	b.n	80042fa <__libc_init_array+0x1e>
 8004314:	080046ec 	.word	0x080046ec
 8004318:	080046ec 	.word	0x080046ec
 800431c:	080046ec 	.word	0x080046ec
 8004320:	080046f0 	.word	0x080046f0

08004324 <memcpy>:
 8004324:	2300      	movs	r3, #0
 8004326:	b510      	push	{r4, lr}
 8004328:	429a      	cmp	r2, r3
 800432a:	d100      	bne.n	800432e <memcpy+0xa>
 800432c:	bd10      	pop	{r4, pc}
 800432e:	5ccc      	ldrb	r4, [r1, r3]
 8004330:	54c4      	strb	r4, [r0, r3]
 8004332:	3301      	adds	r3, #1
 8004334:	e7f8      	b.n	8004328 <memcpy+0x4>

08004336 <memset>:
 8004336:	0003      	movs	r3, r0
 8004338:	1882      	adds	r2, r0, r2
 800433a:	4293      	cmp	r3, r2
 800433c:	d100      	bne.n	8004340 <memset+0xa>
 800433e:	4770      	bx	lr
 8004340:	7019      	strb	r1, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	e7f9      	b.n	800433a <memset+0x4>
	...

08004348 <_init>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434e:	bc08      	pop	{r3}
 8004350:	469e      	mov	lr, r3
 8004352:	4770      	bx	lr

08004354 <_fini>:
 8004354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435a:	bc08      	pop	{r3}
 800435c:	469e      	mov	lr, r3
 800435e:	4770      	bx	lr
