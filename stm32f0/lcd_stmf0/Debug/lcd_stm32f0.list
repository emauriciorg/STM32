
lcd_stm32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d20  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e58  08002e58  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002e58  08002e58  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e58  08002e58  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000020  08002e80  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08002e80  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c796  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003437  00000000  00000000  0003c7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001aeb5  00000000  00000000  0003fc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  0005aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003a48  00000000  00000000  0005b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fa5c  00000000  00000000  0005f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000212d6  00000000  00000000  0006ed7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006554c  00000000  00000000  00090052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f559e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000301c  00000000  00000000  000f55f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002dc8 	.word	0x08002dc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08002dc8 	.word	0x08002dc8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46c6      	mov	lr, r8
 8000224:	0243      	lsls	r3, r0, #9
 8000226:	0a5b      	lsrs	r3, r3, #9
 8000228:	024e      	lsls	r6, r1, #9
 800022a:	0045      	lsls	r5, r0, #1
 800022c:	004f      	lsls	r7, r1, #1
 800022e:	00da      	lsls	r2, r3, #3
 8000230:	0fc4      	lsrs	r4, r0, #31
 8000232:	469c      	mov	ip, r3
 8000234:	0a70      	lsrs	r0, r6, #9
 8000236:	4690      	mov	r8, r2
 8000238:	b500      	push	{lr}
 800023a:	0e2d      	lsrs	r5, r5, #24
 800023c:	0e3f      	lsrs	r7, r7, #24
 800023e:	0fc9      	lsrs	r1, r1, #31
 8000240:	09b6      	lsrs	r6, r6, #6
 8000242:	428c      	cmp	r4, r1
 8000244:	d04b      	beq.n	80002de <__aeabi_fadd+0xbe>
 8000246:	1bea      	subs	r2, r5, r7
 8000248:	2a00      	cmp	r2, #0
 800024a:	dd36      	ble.n	80002ba <__aeabi_fadd+0x9a>
 800024c:	2f00      	cmp	r7, #0
 800024e:	d061      	beq.n	8000314 <__aeabi_fadd+0xf4>
 8000250:	2dff      	cmp	r5, #255	; 0xff
 8000252:	d100      	bne.n	8000256 <__aeabi_fadd+0x36>
 8000254:	e0ad      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	04db      	lsls	r3, r3, #19
 800025a:	431e      	orrs	r6, r3
 800025c:	2a1b      	cmp	r2, #27
 800025e:	dc00      	bgt.n	8000262 <__aeabi_fadd+0x42>
 8000260:	e0d3      	b.n	800040a <__aeabi_fadd+0x1ea>
 8000262:	2001      	movs	r0, #1
 8000264:	4643      	mov	r3, r8
 8000266:	1a18      	subs	r0, r3, r0
 8000268:	0143      	lsls	r3, r0, #5
 800026a:	d400      	bmi.n	800026e <__aeabi_fadd+0x4e>
 800026c:	e08c      	b.n	8000388 <__aeabi_fadd+0x168>
 800026e:	0180      	lsls	r0, r0, #6
 8000270:	0987      	lsrs	r7, r0, #6
 8000272:	0038      	movs	r0, r7
 8000274:	f000 fae6 	bl	8000844 <__clzsi2>
 8000278:	3805      	subs	r0, #5
 800027a:	4087      	lsls	r7, r0
 800027c:	4285      	cmp	r5, r0
 800027e:	dc00      	bgt.n	8000282 <__aeabi_fadd+0x62>
 8000280:	e0b6      	b.n	80003f0 <__aeabi_fadd+0x1d0>
 8000282:	1a2d      	subs	r5, r5, r0
 8000284:	48b3      	ldr	r0, [pc, #716]	; (8000554 <__aeabi_fadd+0x334>)
 8000286:	4038      	ands	r0, r7
 8000288:	0743      	lsls	r3, r0, #29
 800028a:	d004      	beq.n	8000296 <__aeabi_fadd+0x76>
 800028c:	230f      	movs	r3, #15
 800028e:	4003      	ands	r3, r0
 8000290:	2b04      	cmp	r3, #4
 8000292:	d000      	beq.n	8000296 <__aeabi_fadd+0x76>
 8000294:	3004      	adds	r0, #4
 8000296:	0143      	lsls	r3, r0, #5
 8000298:	d400      	bmi.n	800029c <__aeabi_fadd+0x7c>
 800029a:	e078      	b.n	800038e <__aeabi_fadd+0x16e>
 800029c:	1c6a      	adds	r2, r5, #1
 800029e:	2dfe      	cmp	r5, #254	; 0xfe
 80002a0:	d065      	beq.n	800036e <__aeabi_fadd+0x14e>
 80002a2:	0180      	lsls	r0, r0, #6
 80002a4:	0a43      	lsrs	r3, r0, #9
 80002a6:	469c      	mov	ip, r3
 80002a8:	b2d2      	uxtb	r2, r2
 80002aa:	4663      	mov	r3, ip
 80002ac:	05d0      	lsls	r0, r2, #23
 80002ae:	4318      	orrs	r0, r3
 80002b0:	07e4      	lsls	r4, r4, #31
 80002b2:	4320      	orrs	r0, r4
 80002b4:	bc80      	pop	{r7}
 80002b6:	46b8      	mov	r8, r7
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d035      	beq.n	800032a <__aeabi_fadd+0x10a>
 80002be:	1b7a      	subs	r2, r7, r5
 80002c0:	2d00      	cmp	r5, #0
 80002c2:	d000      	beq.n	80002c6 <__aeabi_fadd+0xa6>
 80002c4:	e0af      	b.n	8000426 <__aeabi_fadd+0x206>
 80002c6:	4643      	mov	r3, r8
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_fadd+0xae>
 80002cc:	e0a7      	b.n	800041e <__aeabi_fadd+0x1fe>
 80002ce:	1e53      	subs	r3, r2, #1
 80002d0:	2a01      	cmp	r2, #1
 80002d2:	d100      	bne.n	80002d6 <__aeabi_fadd+0xb6>
 80002d4:	e12f      	b.n	8000536 <__aeabi_fadd+0x316>
 80002d6:	2aff      	cmp	r2, #255	; 0xff
 80002d8:	d069      	beq.n	80003ae <__aeabi_fadd+0x18e>
 80002da:	001a      	movs	r2, r3
 80002dc:	e0aa      	b.n	8000434 <__aeabi_fadd+0x214>
 80002de:	1be9      	subs	r1, r5, r7
 80002e0:	2900      	cmp	r1, #0
 80002e2:	dd70      	ble.n	80003c6 <__aeabi_fadd+0x1a6>
 80002e4:	2f00      	cmp	r7, #0
 80002e6:	d037      	beq.n	8000358 <__aeabi_fadd+0x138>
 80002e8:	2dff      	cmp	r5, #255	; 0xff
 80002ea:	d062      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	04db      	lsls	r3, r3, #19
 80002f0:	431e      	orrs	r6, r3
 80002f2:	291b      	cmp	r1, #27
 80002f4:	dc00      	bgt.n	80002f8 <__aeabi_fadd+0xd8>
 80002f6:	e0b0      	b.n	800045a <__aeabi_fadd+0x23a>
 80002f8:	2001      	movs	r0, #1
 80002fa:	4440      	add	r0, r8
 80002fc:	0143      	lsls	r3, r0, #5
 80002fe:	d543      	bpl.n	8000388 <__aeabi_fadd+0x168>
 8000300:	3501      	adds	r5, #1
 8000302:	2dff      	cmp	r5, #255	; 0xff
 8000304:	d033      	beq.n	800036e <__aeabi_fadd+0x14e>
 8000306:	2301      	movs	r3, #1
 8000308:	4a93      	ldr	r2, [pc, #588]	; (8000558 <__aeabi_fadd+0x338>)
 800030a:	4003      	ands	r3, r0
 800030c:	0840      	lsrs	r0, r0, #1
 800030e:	4010      	ands	r0, r2
 8000310:	4318      	orrs	r0, r3
 8000312:	e7b9      	b.n	8000288 <__aeabi_fadd+0x68>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d100      	bne.n	800031a <__aeabi_fadd+0xfa>
 8000318:	e083      	b.n	8000422 <__aeabi_fadd+0x202>
 800031a:	1e51      	subs	r1, r2, #1
 800031c:	2a01      	cmp	r2, #1
 800031e:	d100      	bne.n	8000322 <__aeabi_fadd+0x102>
 8000320:	e0d8      	b.n	80004d4 <__aeabi_fadd+0x2b4>
 8000322:	2aff      	cmp	r2, #255	; 0xff
 8000324:	d045      	beq.n	80003b2 <__aeabi_fadd+0x192>
 8000326:	000a      	movs	r2, r1
 8000328:	e798      	b.n	800025c <__aeabi_fadd+0x3c>
 800032a:	27fe      	movs	r7, #254	; 0xfe
 800032c:	1c6a      	adds	r2, r5, #1
 800032e:	4217      	tst	r7, r2
 8000330:	d000      	beq.n	8000334 <__aeabi_fadd+0x114>
 8000332:	e086      	b.n	8000442 <__aeabi_fadd+0x222>
 8000334:	2d00      	cmp	r5, #0
 8000336:	d000      	beq.n	800033a <__aeabi_fadd+0x11a>
 8000338:	e0b7      	b.n	80004aa <__aeabi_fadd+0x28a>
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0x122>
 8000340:	e0f3      	b.n	800052a <__aeabi_fadd+0x30a>
 8000342:	2200      	movs	r2, #0
 8000344:	2e00      	cmp	r6, #0
 8000346:	d0b0      	beq.n	80002aa <__aeabi_fadd+0x8a>
 8000348:	1b98      	subs	r0, r3, r6
 800034a:	0143      	lsls	r3, r0, #5
 800034c:	d400      	bmi.n	8000350 <__aeabi_fadd+0x130>
 800034e:	e0fa      	b.n	8000546 <__aeabi_fadd+0x326>
 8000350:	4643      	mov	r3, r8
 8000352:	000c      	movs	r4, r1
 8000354:	1af0      	subs	r0, r6, r3
 8000356:	e797      	b.n	8000288 <__aeabi_fadd+0x68>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d100      	bne.n	800035e <__aeabi_fadd+0x13e>
 800035c:	e0c8      	b.n	80004f0 <__aeabi_fadd+0x2d0>
 800035e:	1e4a      	subs	r2, r1, #1
 8000360:	2901      	cmp	r1, #1
 8000362:	d100      	bne.n	8000366 <__aeabi_fadd+0x146>
 8000364:	e0ae      	b.n	80004c4 <__aeabi_fadd+0x2a4>
 8000366:	29ff      	cmp	r1, #255	; 0xff
 8000368:	d023      	beq.n	80003b2 <__aeabi_fadd+0x192>
 800036a:	0011      	movs	r1, r2
 800036c:	e7c1      	b.n	80002f2 <__aeabi_fadd+0xd2>
 800036e:	2300      	movs	r3, #0
 8000370:	22ff      	movs	r2, #255	; 0xff
 8000372:	469c      	mov	ip, r3
 8000374:	e799      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000376:	21fe      	movs	r1, #254	; 0xfe
 8000378:	1c6a      	adds	r2, r5, #1
 800037a:	4211      	tst	r1, r2
 800037c:	d077      	beq.n	800046e <__aeabi_fadd+0x24e>
 800037e:	2aff      	cmp	r2, #255	; 0xff
 8000380:	d0f5      	beq.n	800036e <__aeabi_fadd+0x14e>
 8000382:	0015      	movs	r5, r2
 8000384:	4446      	add	r6, r8
 8000386:	0870      	lsrs	r0, r6, #1
 8000388:	0743      	lsls	r3, r0, #29
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0x16e>
 800038c:	e77e      	b.n	800028c <__aeabi_fadd+0x6c>
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	2dff      	cmp	r5, #255	; 0xff
 8000392:	d00e      	beq.n	80003b2 <__aeabi_fadd+0x192>
 8000394:	025b      	lsls	r3, r3, #9
 8000396:	0a5b      	lsrs	r3, r3, #9
 8000398:	469c      	mov	ip, r3
 800039a:	b2ea      	uxtb	r2, r5
 800039c:	e785      	b.n	80002aa <__aeabi_fadd+0x8a>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d007      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80003a2:	2280      	movs	r2, #128	; 0x80
 80003a4:	03d2      	lsls	r2, r2, #15
 80003a6:	4213      	tst	r3, r2
 80003a8:	d003      	beq.n	80003b2 <__aeabi_fadd+0x192>
 80003aa:	4210      	tst	r0, r2
 80003ac:	d101      	bne.n	80003b2 <__aeabi_fadd+0x192>
 80003ae:	000c      	movs	r4, r1
 80003b0:	0003      	movs	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0db      	beq.n	800036e <__aeabi_fadd+0x14e>
 80003b6:	2080      	movs	r0, #128	; 0x80
 80003b8:	03c0      	lsls	r0, r0, #15
 80003ba:	4318      	orrs	r0, r3
 80003bc:	0240      	lsls	r0, r0, #9
 80003be:	0a43      	lsrs	r3, r0, #9
 80003c0:	469c      	mov	ip, r3
 80003c2:	22ff      	movs	r2, #255	; 0xff
 80003c4:	e771      	b.n	80002aa <__aeabi_fadd+0x8a>
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d0d5      	beq.n	8000376 <__aeabi_fadd+0x156>
 80003ca:	1b7a      	subs	r2, r7, r5
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d160      	bne.n	8000492 <__aeabi_fadd+0x272>
 80003d0:	4643      	mov	r3, r8
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d024      	beq.n	8000420 <__aeabi_fadd+0x200>
 80003d6:	1e53      	subs	r3, r2, #1
 80003d8:	2a01      	cmp	r2, #1
 80003da:	d073      	beq.n	80004c4 <__aeabi_fadd+0x2a4>
 80003dc:	2aff      	cmp	r2, #255	; 0xff
 80003de:	d0e7      	beq.n	80003b0 <__aeabi_fadd+0x190>
 80003e0:	001a      	movs	r2, r3
 80003e2:	2a1b      	cmp	r2, #27
 80003e4:	dc00      	bgt.n	80003e8 <__aeabi_fadd+0x1c8>
 80003e6:	e085      	b.n	80004f4 <__aeabi_fadd+0x2d4>
 80003e8:	2001      	movs	r0, #1
 80003ea:	003d      	movs	r5, r7
 80003ec:	1980      	adds	r0, r0, r6
 80003ee:	e785      	b.n	80002fc <__aeabi_fadd+0xdc>
 80003f0:	2320      	movs	r3, #32
 80003f2:	003a      	movs	r2, r7
 80003f4:	1b45      	subs	r5, r0, r5
 80003f6:	0038      	movs	r0, r7
 80003f8:	3501      	adds	r5, #1
 80003fa:	40ea      	lsrs	r2, r5
 80003fc:	1b5d      	subs	r5, r3, r5
 80003fe:	40a8      	lsls	r0, r5
 8000400:	1e43      	subs	r3, r0, #1
 8000402:	4198      	sbcs	r0, r3
 8000404:	2500      	movs	r5, #0
 8000406:	4310      	orrs	r0, r2
 8000408:	e73e      	b.n	8000288 <__aeabi_fadd+0x68>
 800040a:	2320      	movs	r3, #32
 800040c:	0030      	movs	r0, r6
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	0031      	movs	r1, r6
 8000412:	4098      	lsls	r0, r3
 8000414:	40d1      	lsrs	r1, r2
 8000416:	1e43      	subs	r3, r0, #1
 8000418:	4198      	sbcs	r0, r3
 800041a:	4308      	orrs	r0, r1
 800041c:	e722      	b.n	8000264 <__aeabi_fadd+0x44>
 800041e:	000c      	movs	r4, r1
 8000420:	0003      	movs	r3, r0
 8000422:	0015      	movs	r5, r2
 8000424:	e7b4      	b.n	8000390 <__aeabi_fadd+0x170>
 8000426:	2fff      	cmp	r7, #255	; 0xff
 8000428:	d0c1      	beq.n	80003ae <__aeabi_fadd+0x18e>
 800042a:	2380      	movs	r3, #128	; 0x80
 800042c:	4640      	mov	r0, r8
 800042e:	04db      	lsls	r3, r3, #19
 8000430:	4318      	orrs	r0, r3
 8000432:	4680      	mov	r8, r0
 8000434:	2a1b      	cmp	r2, #27
 8000436:	dd51      	ble.n	80004dc <__aeabi_fadd+0x2bc>
 8000438:	2001      	movs	r0, #1
 800043a:	000c      	movs	r4, r1
 800043c:	003d      	movs	r5, r7
 800043e:	1a30      	subs	r0, r6, r0
 8000440:	e712      	b.n	8000268 <__aeabi_fadd+0x48>
 8000442:	4643      	mov	r3, r8
 8000444:	1b9f      	subs	r7, r3, r6
 8000446:	017b      	lsls	r3, r7, #5
 8000448:	d42b      	bmi.n	80004a2 <__aeabi_fadd+0x282>
 800044a:	2f00      	cmp	r7, #0
 800044c:	d000      	beq.n	8000450 <__aeabi_fadd+0x230>
 800044e:	e710      	b.n	8000272 <__aeabi_fadd+0x52>
 8000450:	2300      	movs	r3, #0
 8000452:	2400      	movs	r4, #0
 8000454:	2200      	movs	r2, #0
 8000456:	469c      	mov	ip, r3
 8000458:	e727      	b.n	80002aa <__aeabi_fadd+0x8a>
 800045a:	2320      	movs	r3, #32
 800045c:	0032      	movs	r2, r6
 800045e:	0030      	movs	r0, r6
 8000460:	40ca      	lsrs	r2, r1
 8000462:	1a59      	subs	r1, r3, r1
 8000464:	4088      	lsls	r0, r1
 8000466:	1e43      	subs	r3, r0, #1
 8000468:	4198      	sbcs	r0, r3
 800046a:	4310      	orrs	r0, r2
 800046c:	e745      	b.n	80002fa <__aeabi_fadd+0xda>
 800046e:	2d00      	cmp	r5, #0
 8000470:	d14a      	bne.n	8000508 <__aeabi_fadd+0x2e8>
 8000472:	4643      	mov	r3, r8
 8000474:	2b00      	cmp	r3, #0
 8000476:	d063      	beq.n	8000540 <__aeabi_fadd+0x320>
 8000478:	2200      	movs	r2, #0
 800047a:	2e00      	cmp	r6, #0
 800047c:	d100      	bne.n	8000480 <__aeabi_fadd+0x260>
 800047e:	e714      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000480:	0030      	movs	r0, r6
 8000482:	4440      	add	r0, r8
 8000484:	0143      	lsls	r3, r0, #5
 8000486:	d400      	bmi.n	800048a <__aeabi_fadd+0x26a>
 8000488:	e77e      	b.n	8000388 <__aeabi_fadd+0x168>
 800048a:	4b32      	ldr	r3, [pc, #200]	; (8000554 <__aeabi_fadd+0x334>)
 800048c:	3501      	adds	r5, #1
 800048e:	4018      	ands	r0, r3
 8000490:	e77a      	b.n	8000388 <__aeabi_fadd+0x168>
 8000492:	2fff      	cmp	r7, #255	; 0xff
 8000494:	d08c      	beq.n	80003b0 <__aeabi_fadd+0x190>
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	4641      	mov	r1, r8
 800049a:	04db      	lsls	r3, r3, #19
 800049c:	4319      	orrs	r1, r3
 800049e:	4688      	mov	r8, r1
 80004a0:	e79f      	b.n	80003e2 <__aeabi_fadd+0x1c2>
 80004a2:	4643      	mov	r3, r8
 80004a4:	000c      	movs	r4, r1
 80004a6:	1af7      	subs	r7, r6, r3
 80004a8:	e6e3      	b.n	8000272 <__aeabi_fadd+0x52>
 80004aa:	4642      	mov	r2, r8
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d000      	beq.n	80004b2 <__aeabi_fadd+0x292>
 80004b0:	e775      	b.n	800039e <__aeabi_fadd+0x17e>
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d000      	beq.n	80004b8 <__aeabi_fadd+0x298>
 80004b6:	e77a      	b.n	80003ae <__aeabi_fadd+0x18e>
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	03db      	lsls	r3, r3, #15
 80004bc:	2400      	movs	r4, #0
 80004be:	469c      	mov	ip, r3
 80004c0:	22ff      	movs	r2, #255	; 0xff
 80004c2:	e6f2      	b.n	80002aa <__aeabi_fadd+0x8a>
 80004c4:	0030      	movs	r0, r6
 80004c6:	4440      	add	r0, r8
 80004c8:	2501      	movs	r5, #1
 80004ca:	0143      	lsls	r3, r0, #5
 80004cc:	d400      	bmi.n	80004d0 <__aeabi_fadd+0x2b0>
 80004ce:	e75b      	b.n	8000388 <__aeabi_fadd+0x168>
 80004d0:	2502      	movs	r5, #2
 80004d2:	e718      	b.n	8000306 <__aeabi_fadd+0xe6>
 80004d4:	4643      	mov	r3, r8
 80004d6:	2501      	movs	r5, #1
 80004d8:	1b98      	subs	r0, r3, r6
 80004da:	e6c5      	b.n	8000268 <__aeabi_fadd+0x48>
 80004dc:	2320      	movs	r3, #32
 80004de:	4644      	mov	r4, r8
 80004e0:	4640      	mov	r0, r8
 80004e2:	40d4      	lsrs	r4, r2
 80004e4:	1a9a      	subs	r2, r3, r2
 80004e6:	4090      	lsls	r0, r2
 80004e8:	1e43      	subs	r3, r0, #1
 80004ea:	4198      	sbcs	r0, r3
 80004ec:	4320      	orrs	r0, r4
 80004ee:	e7a4      	b.n	800043a <__aeabi_fadd+0x21a>
 80004f0:	000d      	movs	r5, r1
 80004f2:	e74d      	b.n	8000390 <__aeabi_fadd+0x170>
 80004f4:	2320      	movs	r3, #32
 80004f6:	4641      	mov	r1, r8
 80004f8:	4640      	mov	r0, r8
 80004fa:	40d1      	lsrs	r1, r2
 80004fc:	1a9a      	subs	r2, r3, r2
 80004fe:	4090      	lsls	r0, r2
 8000500:	1e43      	subs	r3, r0, #1
 8000502:	4198      	sbcs	r0, r3
 8000504:	4308      	orrs	r0, r1
 8000506:	e770      	b.n	80003ea <__aeabi_fadd+0x1ca>
 8000508:	4642      	mov	r2, r8
 800050a:	2a00      	cmp	r2, #0
 800050c:	d100      	bne.n	8000510 <__aeabi_fadd+0x2f0>
 800050e:	e74f      	b.n	80003b0 <__aeabi_fadd+0x190>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x2f6>
 8000514:	e74d      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	03d2      	lsls	r2, r2, #15
 800051a:	4213      	tst	r3, r2
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x300>
 800051e:	e748      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000520:	4210      	tst	r0, r2
 8000522:	d000      	beq.n	8000526 <__aeabi_fadd+0x306>
 8000524:	e745      	b.n	80003b2 <__aeabi_fadd+0x192>
 8000526:	0003      	movs	r3, r0
 8000528:	e743      	b.n	80003b2 <__aeabi_fadd+0x192>
 800052a:	2e00      	cmp	r6, #0
 800052c:	d090      	beq.n	8000450 <__aeabi_fadd+0x230>
 800052e:	000c      	movs	r4, r1
 8000530:	4684      	mov	ip, r0
 8000532:	2200      	movs	r2, #0
 8000534:	e6b9      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000536:	4643      	mov	r3, r8
 8000538:	000c      	movs	r4, r1
 800053a:	1af0      	subs	r0, r6, r3
 800053c:	3501      	adds	r5, #1
 800053e:	e693      	b.n	8000268 <__aeabi_fadd+0x48>
 8000540:	4684      	mov	ip, r0
 8000542:	2200      	movs	r2, #0
 8000544:	e6b1      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000546:	2800      	cmp	r0, #0
 8000548:	d000      	beq.n	800054c <__aeabi_fadd+0x32c>
 800054a:	e71d      	b.n	8000388 <__aeabi_fadd+0x168>
 800054c:	2300      	movs	r3, #0
 800054e:	2400      	movs	r4, #0
 8000550:	469c      	mov	ip, r3
 8000552:	e6aa      	b.n	80002aa <__aeabi_fadd+0x8a>
 8000554:	fbffffff 	.word	0xfbffffff
 8000558:	7dffffff 	.word	0x7dffffff

0800055c <__aeabi_fmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	464f      	mov	r7, r9
 8000560:	4646      	mov	r6, r8
 8000562:	46d6      	mov	lr, sl
 8000564:	0244      	lsls	r4, r0, #9
 8000566:	0045      	lsls	r5, r0, #1
 8000568:	b5c0      	push	{r6, r7, lr}
 800056a:	0a64      	lsrs	r4, r4, #9
 800056c:	1c0f      	adds	r7, r1, #0
 800056e:	0e2d      	lsrs	r5, r5, #24
 8000570:	0fc6      	lsrs	r6, r0, #31
 8000572:	2d00      	cmp	r5, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_fmul+0x1c>
 8000576:	e08d      	b.n	8000694 <__aeabi_fmul+0x138>
 8000578:	2dff      	cmp	r5, #255	; 0xff
 800057a:	d100      	bne.n	800057e <__aeabi_fmul+0x22>
 800057c:	e092      	b.n	80006a4 <__aeabi_fmul+0x148>
 800057e:	2300      	movs	r3, #0
 8000580:	2080      	movs	r0, #128	; 0x80
 8000582:	4699      	mov	r9, r3
 8000584:	469a      	mov	sl, r3
 8000586:	00e4      	lsls	r4, r4, #3
 8000588:	04c0      	lsls	r0, r0, #19
 800058a:	4304      	orrs	r4, r0
 800058c:	3d7f      	subs	r5, #127	; 0x7f
 800058e:	0278      	lsls	r0, r7, #9
 8000590:	0a43      	lsrs	r3, r0, #9
 8000592:	4698      	mov	r8, r3
 8000594:	007b      	lsls	r3, r7, #1
 8000596:	0e1b      	lsrs	r3, r3, #24
 8000598:	0fff      	lsrs	r7, r7, #31
 800059a:	2b00      	cmp	r3, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fmul+0x44>
 800059e:	e070      	b.n	8000682 <__aeabi_fmul+0x126>
 80005a0:	2bff      	cmp	r3, #255	; 0xff
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fmul+0x4a>
 80005a4:	e086      	b.n	80006b4 <__aeabi_fmul+0x158>
 80005a6:	4642      	mov	r2, r8
 80005a8:	00d0      	lsls	r0, r2, #3
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	3b7f      	subs	r3, #127	; 0x7f
 80005ae:	18ed      	adds	r5, r5, r3
 80005b0:	2300      	movs	r3, #0
 80005b2:	04d2      	lsls	r2, r2, #19
 80005b4:	4302      	orrs	r2, r0
 80005b6:	4690      	mov	r8, r2
 80005b8:	469c      	mov	ip, r3
 80005ba:	0031      	movs	r1, r6
 80005bc:	464b      	mov	r3, r9
 80005be:	4079      	eors	r1, r7
 80005c0:	1c68      	adds	r0, r5, #1
 80005c2:	2b0f      	cmp	r3, #15
 80005c4:	d81c      	bhi.n	8000600 <__aeabi_fmul+0xa4>
 80005c6:	4a76      	ldr	r2, [pc, #472]	; (80007a0 <__aeabi_fmul+0x244>)
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	58d3      	ldr	r3, [r2, r3]
 80005cc:	469f      	mov	pc, r3
 80005ce:	0039      	movs	r1, r7
 80005d0:	4644      	mov	r4, r8
 80005d2:	46e2      	mov	sl, ip
 80005d4:	4653      	mov	r3, sl
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	d00f      	beq.n	80005fa <__aeabi_fmul+0x9e>
 80005da:	2b03      	cmp	r3, #3
 80005dc:	d100      	bne.n	80005e0 <__aeabi_fmul+0x84>
 80005de:	e0d7      	b.n	8000790 <__aeabi_fmul+0x234>
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d137      	bne.n	8000654 <__aeabi_fmul+0xf8>
 80005e4:	2000      	movs	r0, #0
 80005e6:	2400      	movs	r4, #0
 80005e8:	05c0      	lsls	r0, r0, #23
 80005ea:	4320      	orrs	r0, r4
 80005ec:	07c9      	lsls	r1, r1, #31
 80005ee:	4308      	orrs	r0, r1
 80005f0:	bce0      	pop	{r5, r6, r7}
 80005f2:	46ba      	mov	sl, r7
 80005f4:	46b1      	mov	r9, r6
 80005f6:	46a8      	mov	r8, r5
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	20ff      	movs	r0, #255	; 0xff
 80005fc:	2400      	movs	r4, #0
 80005fe:	e7f3      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000600:	0c26      	lsrs	r6, r4, #16
 8000602:	0424      	lsls	r4, r4, #16
 8000604:	0c22      	lsrs	r2, r4, #16
 8000606:	4644      	mov	r4, r8
 8000608:	0424      	lsls	r4, r4, #16
 800060a:	0c24      	lsrs	r4, r4, #16
 800060c:	4643      	mov	r3, r8
 800060e:	0027      	movs	r7, r4
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	4357      	muls	r7, r2
 8000614:	4374      	muls	r4, r6
 8000616:	435a      	muls	r2, r3
 8000618:	435e      	muls	r6, r3
 800061a:	1912      	adds	r2, r2, r4
 800061c:	0c3b      	lsrs	r3, r7, #16
 800061e:	189b      	adds	r3, r3, r2
 8000620:	429c      	cmp	r4, r3
 8000622:	d903      	bls.n	800062c <__aeabi_fmul+0xd0>
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0252      	lsls	r2, r2, #9
 8000628:	4694      	mov	ip, r2
 800062a:	4466      	add	r6, ip
 800062c:	043f      	lsls	r7, r7, #16
 800062e:	041a      	lsls	r2, r3, #16
 8000630:	0c3f      	lsrs	r7, r7, #16
 8000632:	19d2      	adds	r2, r2, r7
 8000634:	0194      	lsls	r4, r2, #6
 8000636:	1e67      	subs	r7, r4, #1
 8000638:	41bc      	sbcs	r4, r7
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	0e92      	lsrs	r2, r2, #26
 800063e:	199b      	adds	r3, r3, r6
 8000640:	4314      	orrs	r4, r2
 8000642:	019b      	lsls	r3, r3, #6
 8000644:	431c      	orrs	r4, r3
 8000646:	011b      	lsls	r3, r3, #4
 8000648:	d400      	bmi.n	800064c <__aeabi_fmul+0xf0>
 800064a:	e09b      	b.n	8000784 <__aeabi_fmul+0x228>
 800064c:	2301      	movs	r3, #1
 800064e:	0862      	lsrs	r2, r4, #1
 8000650:	401c      	ands	r4, r3
 8000652:	4314      	orrs	r4, r2
 8000654:	0002      	movs	r2, r0
 8000656:	327f      	adds	r2, #127	; 0x7f
 8000658:	2a00      	cmp	r2, #0
 800065a:	dd64      	ble.n	8000726 <__aeabi_fmul+0x1ca>
 800065c:	0763      	lsls	r3, r4, #29
 800065e:	d004      	beq.n	800066a <__aeabi_fmul+0x10e>
 8000660:	230f      	movs	r3, #15
 8000662:	4023      	ands	r3, r4
 8000664:	2b04      	cmp	r3, #4
 8000666:	d000      	beq.n	800066a <__aeabi_fmul+0x10e>
 8000668:	3404      	adds	r4, #4
 800066a:	0123      	lsls	r3, r4, #4
 800066c:	d503      	bpl.n	8000676 <__aeabi_fmul+0x11a>
 800066e:	0002      	movs	r2, r0
 8000670:	4b4c      	ldr	r3, [pc, #304]	; (80007a4 <__aeabi_fmul+0x248>)
 8000672:	3280      	adds	r2, #128	; 0x80
 8000674:	401c      	ands	r4, r3
 8000676:	2afe      	cmp	r2, #254	; 0xfe
 8000678:	dcbf      	bgt.n	80005fa <__aeabi_fmul+0x9e>
 800067a:	01a4      	lsls	r4, r4, #6
 800067c:	0a64      	lsrs	r4, r4, #9
 800067e:	b2d0      	uxtb	r0, r2
 8000680:	e7b2      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000682:	4643      	mov	r3, r8
 8000684:	2b00      	cmp	r3, #0
 8000686:	d13d      	bne.n	8000704 <__aeabi_fmul+0x1a8>
 8000688:	464a      	mov	r2, r9
 800068a:	3301      	adds	r3, #1
 800068c:	431a      	orrs	r2, r3
 800068e:	4691      	mov	r9, r2
 8000690:	469c      	mov	ip, r3
 8000692:	e792      	b.n	80005ba <__aeabi_fmul+0x5e>
 8000694:	2c00      	cmp	r4, #0
 8000696:	d129      	bne.n	80006ec <__aeabi_fmul+0x190>
 8000698:	2304      	movs	r3, #4
 800069a:	4699      	mov	r9, r3
 800069c:	3b03      	subs	r3, #3
 800069e:	2500      	movs	r5, #0
 80006a0:	469a      	mov	sl, r3
 80006a2:	e774      	b.n	800058e <__aeabi_fmul+0x32>
 80006a4:	2c00      	cmp	r4, #0
 80006a6:	d11b      	bne.n	80006e0 <__aeabi_fmul+0x184>
 80006a8:	2308      	movs	r3, #8
 80006aa:	4699      	mov	r9, r3
 80006ac:	3b06      	subs	r3, #6
 80006ae:	25ff      	movs	r5, #255	; 0xff
 80006b0:	469a      	mov	sl, r3
 80006b2:	e76c      	b.n	800058e <__aeabi_fmul+0x32>
 80006b4:	4643      	mov	r3, r8
 80006b6:	35ff      	adds	r5, #255	; 0xff
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10b      	bne.n	80006d4 <__aeabi_fmul+0x178>
 80006bc:	2302      	movs	r3, #2
 80006be:	464a      	mov	r2, r9
 80006c0:	431a      	orrs	r2, r3
 80006c2:	4691      	mov	r9, r2
 80006c4:	469c      	mov	ip, r3
 80006c6:	e778      	b.n	80005ba <__aeabi_fmul+0x5e>
 80006c8:	4653      	mov	r3, sl
 80006ca:	0031      	movs	r1, r6
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fmul+0x176>
 80006d0:	e783      	b.n	80005da <__aeabi_fmul+0x7e>
 80006d2:	e792      	b.n	80005fa <__aeabi_fmul+0x9e>
 80006d4:	2303      	movs	r3, #3
 80006d6:	464a      	mov	r2, r9
 80006d8:	431a      	orrs	r2, r3
 80006da:	4691      	mov	r9, r2
 80006dc:	469c      	mov	ip, r3
 80006de:	e76c      	b.n	80005ba <__aeabi_fmul+0x5e>
 80006e0:	230c      	movs	r3, #12
 80006e2:	4699      	mov	r9, r3
 80006e4:	3b09      	subs	r3, #9
 80006e6:	25ff      	movs	r5, #255	; 0xff
 80006e8:	469a      	mov	sl, r3
 80006ea:	e750      	b.n	800058e <__aeabi_fmul+0x32>
 80006ec:	0020      	movs	r0, r4
 80006ee:	f000 f8a9 	bl	8000844 <__clzsi2>
 80006f2:	2576      	movs	r5, #118	; 0x76
 80006f4:	1f43      	subs	r3, r0, #5
 80006f6:	409c      	lsls	r4, r3
 80006f8:	2300      	movs	r3, #0
 80006fa:	426d      	negs	r5, r5
 80006fc:	4699      	mov	r9, r3
 80006fe:	469a      	mov	sl, r3
 8000700:	1a2d      	subs	r5, r5, r0
 8000702:	e744      	b.n	800058e <__aeabi_fmul+0x32>
 8000704:	4640      	mov	r0, r8
 8000706:	f000 f89d 	bl	8000844 <__clzsi2>
 800070a:	4642      	mov	r2, r8
 800070c:	1f43      	subs	r3, r0, #5
 800070e:	409a      	lsls	r2, r3
 8000710:	2300      	movs	r3, #0
 8000712:	1a2d      	subs	r5, r5, r0
 8000714:	4690      	mov	r8, r2
 8000716:	469c      	mov	ip, r3
 8000718:	3d76      	subs	r5, #118	; 0x76
 800071a:	e74e      	b.n	80005ba <__aeabi_fmul+0x5e>
 800071c:	2480      	movs	r4, #128	; 0x80
 800071e:	2100      	movs	r1, #0
 8000720:	20ff      	movs	r0, #255	; 0xff
 8000722:	03e4      	lsls	r4, r4, #15
 8000724:	e760      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000726:	2301      	movs	r3, #1
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	2b1b      	cmp	r3, #27
 800072c:	dd00      	ble.n	8000730 <__aeabi_fmul+0x1d4>
 800072e:	e759      	b.n	80005e4 <__aeabi_fmul+0x88>
 8000730:	0022      	movs	r2, r4
 8000732:	309e      	adds	r0, #158	; 0x9e
 8000734:	40da      	lsrs	r2, r3
 8000736:	4084      	lsls	r4, r0
 8000738:	0013      	movs	r3, r2
 800073a:	1e62      	subs	r2, r4, #1
 800073c:	4194      	sbcs	r4, r2
 800073e:	431c      	orrs	r4, r3
 8000740:	0763      	lsls	r3, r4, #29
 8000742:	d004      	beq.n	800074e <__aeabi_fmul+0x1f2>
 8000744:	230f      	movs	r3, #15
 8000746:	4023      	ands	r3, r4
 8000748:	2b04      	cmp	r3, #4
 800074a:	d000      	beq.n	800074e <__aeabi_fmul+0x1f2>
 800074c:	3404      	adds	r4, #4
 800074e:	0163      	lsls	r3, r4, #5
 8000750:	d51a      	bpl.n	8000788 <__aeabi_fmul+0x22c>
 8000752:	2001      	movs	r0, #1
 8000754:	2400      	movs	r4, #0
 8000756:	e747      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000758:	2080      	movs	r0, #128	; 0x80
 800075a:	03c0      	lsls	r0, r0, #15
 800075c:	4204      	tst	r4, r0
 800075e:	d009      	beq.n	8000774 <__aeabi_fmul+0x218>
 8000760:	4643      	mov	r3, r8
 8000762:	4203      	tst	r3, r0
 8000764:	d106      	bne.n	8000774 <__aeabi_fmul+0x218>
 8000766:	4644      	mov	r4, r8
 8000768:	4304      	orrs	r4, r0
 800076a:	0264      	lsls	r4, r4, #9
 800076c:	0039      	movs	r1, r7
 800076e:	20ff      	movs	r0, #255	; 0xff
 8000770:	0a64      	lsrs	r4, r4, #9
 8000772:	e739      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000774:	2080      	movs	r0, #128	; 0x80
 8000776:	03c0      	lsls	r0, r0, #15
 8000778:	4304      	orrs	r4, r0
 800077a:	0264      	lsls	r4, r4, #9
 800077c:	0031      	movs	r1, r6
 800077e:	20ff      	movs	r0, #255	; 0xff
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	e731      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000784:	0028      	movs	r0, r5
 8000786:	e765      	b.n	8000654 <__aeabi_fmul+0xf8>
 8000788:	01a4      	lsls	r4, r4, #6
 800078a:	2000      	movs	r0, #0
 800078c:	0a64      	lsrs	r4, r4, #9
 800078e:	e72b      	b.n	80005e8 <__aeabi_fmul+0x8c>
 8000790:	2080      	movs	r0, #128	; 0x80
 8000792:	03c0      	lsls	r0, r0, #15
 8000794:	4304      	orrs	r4, r0
 8000796:	0264      	lsls	r4, r4, #9
 8000798:	20ff      	movs	r0, #255	; 0xff
 800079a:	0a64      	lsrs	r4, r4, #9
 800079c:	e724      	b.n	80005e8 <__aeabi_fmul+0x8c>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	08002de0 	.word	0x08002de0
 80007a4:	f7ffffff 	.word	0xf7ffffff

080007a8 <__aeabi_i2f>:
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007aa:	2800      	cmp	r0, #0
 80007ac:	d013      	beq.n	80007d6 <__aeabi_i2f+0x2e>
 80007ae:	17c3      	asrs	r3, r0, #31
 80007b0:	18c6      	adds	r6, r0, r3
 80007b2:	405e      	eors	r6, r3
 80007b4:	0fc4      	lsrs	r4, r0, #31
 80007b6:	0030      	movs	r0, r6
 80007b8:	f000 f844 	bl	8000844 <__clzsi2>
 80007bc:	239e      	movs	r3, #158	; 0x9e
 80007be:	0005      	movs	r5, r0
 80007c0:	1a1b      	subs	r3, r3, r0
 80007c2:	2b96      	cmp	r3, #150	; 0x96
 80007c4:	dc0f      	bgt.n	80007e6 <__aeabi_i2f+0x3e>
 80007c6:	2808      	cmp	r0, #8
 80007c8:	dd01      	ble.n	80007ce <__aeabi_i2f+0x26>
 80007ca:	3d08      	subs	r5, #8
 80007cc:	40ae      	lsls	r6, r5
 80007ce:	0276      	lsls	r6, r6, #9
 80007d0:	0a76      	lsrs	r6, r6, #9
 80007d2:	b2d8      	uxtb	r0, r3
 80007d4:	e002      	b.n	80007dc <__aeabi_i2f+0x34>
 80007d6:	2400      	movs	r4, #0
 80007d8:	2000      	movs	r0, #0
 80007da:	2600      	movs	r6, #0
 80007dc:	05c0      	lsls	r0, r0, #23
 80007de:	4330      	orrs	r0, r6
 80007e0:	07e4      	lsls	r4, r4, #31
 80007e2:	4320      	orrs	r0, r4
 80007e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e6:	2b99      	cmp	r3, #153	; 0x99
 80007e8:	dd0c      	ble.n	8000804 <__aeabi_i2f+0x5c>
 80007ea:	2205      	movs	r2, #5
 80007ec:	0031      	movs	r1, r6
 80007ee:	1a12      	subs	r2, r2, r0
 80007f0:	40d1      	lsrs	r1, r2
 80007f2:	000a      	movs	r2, r1
 80007f4:	0001      	movs	r1, r0
 80007f6:	0030      	movs	r0, r6
 80007f8:	311b      	adds	r1, #27
 80007fa:	4088      	lsls	r0, r1
 80007fc:	1e41      	subs	r1, r0, #1
 80007fe:	4188      	sbcs	r0, r1
 8000800:	4302      	orrs	r2, r0
 8000802:	0016      	movs	r6, r2
 8000804:	2d05      	cmp	r5, #5
 8000806:	dc12      	bgt.n	800082e <__aeabi_i2f+0x86>
 8000808:	0031      	movs	r1, r6
 800080a:	4f0d      	ldr	r7, [pc, #52]	; (8000840 <__aeabi_i2f+0x98>)
 800080c:	4039      	ands	r1, r7
 800080e:	0772      	lsls	r2, r6, #29
 8000810:	d009      	beq.n	8000826 <__aeabi_i2f+0x7e>
 8000812:	200f      	movs	r0, #15
 8000814:	4030      	ands	r0, r6
 8000816:	2804      	cmp	r0, #4
 8000818:	d005      	beq.n	8000826 <__aeabi_i2f+0x7e>
 800081a:	3104      	adds	r1, #4
 800081c:	014a      	lsls	r2, r1, #5
 800081e:	d502      	bpl.n	8000826 <__aeabi_i2f+0x7e>
 8000820:	239f      	movs	r3, #159	; 0x9f
 8000822:	4039      	ands	r1, r7
 8000824:	1b5b      	subs	r3, r3, r5
 8000826:	0189      	lsls	r1, r1, #6
 8000828:	0a4e      	lsrs	r6, r1, #9
 800082a:	b2d8      	uxtb	r0, r3
 800082c:	e7d6      	b.n	80007dc <__aeabi_i2f+0x34>
 800082e:	1f6a      	subs	r2, r5, #5
 8000830:	4096      	lsls	r6, r2
 8000832:	0031      	movs	r1, r6
 8000834:	4f02      	ldr	r7, [pc, #8]	; (8000840 <__aeabi_i2f+0x98>)
 8000836:	4039      	ands	r1, r7
 8000838:	0772      	lsls	r2, r6, #29
 800083a:	d0f4      	beq.n	8000826 <__aeabi_i2f+0x7e>
 800083c:	e7e9      	b.n	8000812 <__aeabi_i2f+0x6a>
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	fbffffff 	.word	0xfbffffff

08000844 <__clzsi2>:
 8000844:	211c      	movs	r1, #28
 8000846:	2301      	movs	r3, #1
 8000848:	041b      	lsls	r3, r3, #16
 800084a:	4298      	cmp	r0, r3
 800084c:	d301      	bcc.n	8000852 <__clzsi2+0xe>
 800084e:	0c00      	lsrs	r0, r0, #16
 8000850:	3910      	subs	r1, #16
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	4298      	cmp	r0, r3
 8000856:	d301      	bcc.n	800085c <__clzsi2+0x18>
 8000858:	0a00      	lsrs	r0, r0, #8
 800085a:	3908      	subs	r1, #8
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	4298      	cmp	r0, r3
 8000860:	d301      	bcc.n	8000866 <__clzsi2+0x22>
 8000862:	0900      	lsrs	r0, r0, #4
 8000864:	3904      	subs	r1, #4
 8000866:	a202      	add	r2, pc, #8	; (adr r2, 8000870 <__clzsi2+0x2c>)
 8000868:	5c10      	ldrb	r0, [r2, r0]
 800086a:	1840      	adds	r0, r0, r1
 800086c:	4770      	bx	lr
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	02020304 	.word	0x02020304
 8000874:	01010101 	.word	0x01010101
	...

08000880 <DS18B20_Read.part.0>:
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
}

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
 8000880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000882:	0005      	movs	r5, r0
 8000884:	000c      	movs	r4, r1
 8000886:	b085      	sub	sp, #20
 8000888:	0017      	movs	r7, r2
		/* Conversion is not finished yet */
		return false; 
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800088a:	f000 fa2b 	bl	8000ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800088e:	0021      	movs	r1, r4
 8000890:	0028      	movs	r0, r5
 8000892:	f000 fe17 	bl	80014c4 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000896:	260d      	movs	r6, #13
 8000898:	21be      	movs	r1, #190	; 0xbe
 800089a:	0028      	movs	r0, r5
 800089c:	f000 fa98 	bl	8000dd0 <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 80008a0:	ac01      	add	r4, sp, #4
 80008a2:	446e      	add	r6, sp
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 80008a4:	0028      	movs	r0, r5
 80008a6:	f000 fb11 	bl	8000ecc <OneWire_ReadByte>
 80008aa:	7020      	strb	r0, [r4, #0]
	for (i = 0; i < 9; i++) 
 80008ac:	3401      	adds	r4, #1
 80008ae:	42b4      	cmp	r4, r6
 80008b0:	d1f8      	bne.n	80008a4 <DS18B20_Read.part.0+0x24>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 80008b2:	2108      	movs	r1, #8
 80008b4:	a801      	add	r0, sp, #4
 80008b6:	f000 fe2b 	bl	8001510 <OneWire_CRC8>
	
	/* Check if CRC is ok */
	if (crc != data[8])
 80008ba:	466b      	mov	r3, sp
 80008bc:	7b1a      	ldrb	r2, [r3, #12]
		/* CRC invalid */
		return 0;
 80008be:	2300      	movs	r3, #0
	if (crc != data[8])
 80008c0:	4282      	cmp	r2, r0
 80008c2:	d002      	beq.n	80008ca <DS18B20_Read.part.0+0x4a>
	/* Set to pointer */
	*destination = decimal;
	
	/* Return 1, temperature valid */
	return true;
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	b005      	add	sp, #20
 80008c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	temperature = data[0] | (data[1] << 8);
 80008ca:	466b      	mov	r3, sp
 80008cc:	889c      	ldrh	r4, [r3, #4]
	OneWire_Reset(OneWire);
 80008ce:	0028      	movs	r0, r5
 80008d0:	f000 fa08 	bl	8000ce4 <OneWire_Reset>
	if (temperature & 0x8000)
 80008d4:	b223      	sxth	r3, r4
	int8_t digit, minus = 0;
 80008d6:	2500      	movs	r5, #0
	if (temperature & 0x8000)
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db26      	blt.n	800092a <DS18B20_Read.part.0+0xaa>
	resolution = ((data[4] & 0x60) >> 5) + 9;
 80008dc:	466b      	mov	r3, sp
 80008de:	2003      	movs	r0, #3
 80008e0:	7a1b      	ldrb	r3, [r3, #8]
	digit |= ((temperature >> 8) & 0x7) << 4;
 80008e2:	0926      	lsrs	r6, r4, #4
	resolution = ((data[4] & 0x60) >> 5) + 9;
 80008e4:	115b      	asrs	r3, r3, #5
 80008e6:	4003      	ands	r3, r0
 80008e8:	001a      	movs	r2, r3
	digit |= ((temperature >> 8) & 0x7) << 4;
 80008ea:	b276      	sxtb	r6, r6
	resolution = ((data[4] & 0x60) >> 5) + 9;
 80008ec:	3209      	adds	r2, #9
	switch (resolution) 
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d01f      	beq.n	8000932 <DS18B20_Read.part.0+0xb2>
 80008f2:	2a0c      	cmp	r2, #12
 80008f4:	d031      	beq.n	800095a <DS18B20_Read.part.0+0xda>
 80008f6:	2a0a      	cmp	r2, #10
 80008f8:	d025      	beq.n	8000946 <DS18B20_Read.part.0+0xc6>
			decimal = (temperature >> 3) & 0x01;
 80008fa:	0720      	lsls	r0, r4, #28
 80008fc:	0fc0      	lsrs	r0, r0, #31
 80008fe:	f7ff ff53 	bl	80007a8 <__aeabi_i2f>
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8000902:	21fc      	movs	r1, #252	; 0xfc
 8000904:	0589      	lsls	r1, r1, #22
 8000906:	f7ff fe29 	bl	800055c <__aeabi_fmul>
 800090a:	1c04      	adds	r4, r0, #0
	decimal = digit + decimal;
 800090c:	0030      	movs	r0, r6
 800090e:	f7ff ff4b 	bl	80007a8 <__aeabi_i2f>
 8000912:	1c21      	adds	r1, r4, #0
 8000914:	f7ff fc84 	bl	8000220 <__aeabi_fadd>
	if (minus) 
 8000918:	2d00      	cmp	r5, #0
 800091a:	d003      	beq.n	8000924 <DS18B20_Read.part.0+0xa4>
		decimal = 0 - decimal;
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	061b      	lsls	r3, r3, #24
 8000920:	469c      	mov	ip, r3
 8000922:	4460      	add	r0, ip
	return true;
 8000924:	2301      	movs	r3, #1
	*destination = decimal;
 8000926:	6038      	str	r0, [r7, #0]
	return true;
 8000928:	e7cc      	b.n	80008c4 <DS18B20_Read.part.0+0x44>
		temperature = ~temperature + 1;
 800092a:	4264      	negs	r4, r4
 800092c:	b2a4      	uxth	r4, r4
		minus = 1;
 800092e:	3501      	adds	r5, #1
 8000930:	e7d4      	b.n	80008dc <DS18B20_Read.part.0+0x5c>
			decimal = (temperature >> 1) & 0x07;
 8000932:	0720      	lsls	r0, r4, #28
 8000934:	0f40      	lsrs	r0, r0, #29
 8000936:	f7ff ff37 	bl	80007a8 <__aeabi_i2f>
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 800093a:	21f8      	movs	r1, #248	; 0xf8
 800093c:	0589      	lsls	r1, r1, #22
 800093e:	f7ff fe0d 	bl	800055c <__aeabi_fmul>
 8000942:	1c04      	adds	r4, r0, #0
		break;
 8000944:	e7e2      	b.n	800090c <DS18B20_Read.part.0+0x8c>
			decimal = (temperature >> 2) & 0x03;
 8000946:	08a4      	lsrs	r4, r4, #2
 8000948:	4020      	ands	r0, r4
 800094a:	f7ff ff2d 	bl	80007a8 <__aeabi_i2f>
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 800094e:	21fa      	movs	r1, #250	; 0xfa
 8000950:	0589      	lsls	r1, r1, #22
 8000952:	f7ff fe03 	bl	800055c <__aeabi_fmul>
 8000956:	1c04      	adds	r4, r0, #0
		 break;
 8000958:	e7d8      	b.n	800090c <DS18B20_Read.part.0+0x8c>
			decimal = temperature & 0x0F;
 800095a:	200f      	movs	r0, #15
 800095c:	4020      	ands	r0, r4
 800095e:	f7ff ff23 	bl	80007a8 <__aeabi_i2f>
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8000962:	21f6      	movs	r1, #246	; 0xf6
 8000964:	0589      	lsls	r1, r1, #22
 8000966:	f7ff fdf9 	bl	800055c <__aeabi_fmul>
 800096a:	1c04      	adds	r4, r0, #0
		 break;
 800096c:	e7ce      	b.n	800090c <DS18B20_Read.part.0+0x8c>
 800096e:	46c0      	nop			; (mov r8, r8)

08000970 <DS18B20_SetResolution.part.0>:
	
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	46ce      	mov	lr, r9
 8000974:	4647      	mov	r7, r8
 8000976:	0004      	movs	r4, r0
 8000978:	000e      	movs	r6, r1
 800097a:	b580      	push	{r7, lr}
 800097c:	0017      	movs	r7, r2
	if (!DS18B20_Is(ROM)) 
		return 0;
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800097e:	f000 f9b1 	bl	8000ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000982:	0031      	movs	r1, r6
 8000984:	0020      	movs	r0, r4
 8000986:	f000 fd9d 	bl	80014c4 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 800098a:	21be      	movs	r1, #190	; 0xbe
 800098c:	0020      	movs	r0, r4
 800098e:	f000 fa1f 	bl	8000dd0 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000992:	0020      	movs	r0, r4
 8000994:	f000 fa9a 	bl	8000ecc <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000998:	0020      	movs	r0, r4
 800099a:	f000 fa97 	bl	8000ecc <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 800099e:	0020      	movs	r0, r4
 80009a0:	f000 fa94 	bl	8000ecc <OneWire_ReadByte>
 80009a4:	4681      	mov	r9, r0
	tl = OneWire_ReadByte(OneWire);
 80009a6:	0020      	movs	r0, r4
 80009a8:	f000 fa90 	bl	8000ecc <OneWire_ReadByte>
 80009ac:	4680      	mov	r8, r0
	conf = OneWire_ReadByte(OneWire);
 80009ae:	0020      	movs	r0, r4
 80009b0:	f000 fa8c 	bl	8000ecc <OneWire_ReadByte>
 80009b4:	0005      	movs	r5, r0
	
	if (resolution == DS18B20_Resolution_9bits) 
 80009b6:	2f09      	cmp	r7, #9
 80009b8:	d034      	beq.n	8000a24 <DS18B20_SetResolution.part.0+0xb4>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 80009ba:	2f0a      	cmp	r7, #10
 80009bc:	d007      	beq.n	80009ce <DS18B20_SetResolution.part.0+0x5e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
		conf |= 1 << DS18B20_RESOLUTION_R0;
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80009be:	2f0b      	cmp	r7, #11
 80009c0:	d033      	beq.n	8000a2a <DS18B20_SetResolution.part.0+0xba>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80009c2:	2f0c      	cmp	r7, #12
 80009c4:	d107      	bne.n	80009d6 <DS18B20_SetResolution.part.0+0x66>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80009c6:	2060      	movs	r0, #96	; 0x60
 80009c8:	4305      	orrs	r5, r0
 80009ca:	b2ed      	uxtb	r5, r5
 80009cc:	e003      	b.n	80009d6 <DS18B20_SetResolution.part.0+0x66>
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80009ce:	20bf      	movs	r0, #191	; 0xbf
 80009d0:	4005      	ands	r5, r0
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80009d2:	389f      	subs	r0, #159	; 0x9f
 80009d4:	4305      	orrs	r5, r0
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80009d6:	0020      	movs	r0, r4
 80009d8:	f000 f984 	bl	8000ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80009dc:	0031      	movs	r1, r6
 80009de:	0020      	movs	r0, r4
 80009e0:	f000 fd70 	bl	80014c4 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80009e4:	0020      	movs	r0, r4
 80009e6:	214e      	movs	r1, #78	; 0x4e
 80009e8:	f000 f9f2 	bl	8000dd0 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80009ec:	4649      	mov	r1, r9
 80009ee:	0020      	movs	r0, r4
 80009f0:	f000 f9ee 	bl	8000dd0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80009f4:	4641      	mov	r1, r8
 80009f6:	0020      	movs	r0, r4
 80009f8:	f000 f9ea 	bl	8000dd0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80009fc:	0029      	movs	r1, r5
 80009fe:	0020      	movs	r0, r4
 8000a00:	f000 f9e6 	bl	8000dd0 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a04:	0020      	movs	r0, r4
 8000a06:	f000 f96d 	bl	8000ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a0a:	0031      	movs	r1, r6
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f000 fd59 	bl	80014c4 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000a12:	0020      	movs	r0, r4
 8000a14:	2148      	movs	r1, #72	; 0x48
 8000a16:	f000 f9db 	bl	8000dd0 <OneWire_WriteByte>
	
	return 1;
}
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	bcc0      	pop	{r6, r7}
 8000a1e:	46b9      	mov	r9, r7
 8000a20:	46b0      	mov	r8, r6
 8000a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000a24:	239f      	movs	r3, #159	; 0x9f
 8000a26:	401d      	ands	r5, r3
 8000a28:	e7d5      	b.n	80009d6 <DS18B20_SetResolution.part.0+0x66>
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000a2a:	20df      	movs	r0, #223	; 0xdf
 8000a2c:	4005      	ands	r5, r0
 8000a2e:	389f      	subs	r0, #159	; 0x9f
 8000a30:	4305      	orrs	r5, r0
 8000a32:	e7d0      	b.n	80009d6 <DS18B20_SetResolution.part.0+0x66>

08000a34 <DS18B20_DisableAlarmTemperature.part.0>:
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	0004      	movs	r4, r0
 8000a38:	000d      	movs	r5, r1
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
		return 0;
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a3a:	f000 f953 	bl	8000ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a3e:	0029      	movs	r1, r5
 8000a40:	0020      	movs	r0, r4
 8000a42:	f000 fd3f 	bl	80014c4 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000a46:	21be      	movs	r1, #190	; 0xbe
 8000a48:	0020      	movs	r0, r4
 8000a4a:	f000 f9c1 	bl	8000dd0 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f000 fa3c 	bl	8000ecc <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000a54:	0020      	movs	r0, r4
 8000a56:	f000 fa39 	bl	8000ecc <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f000 fa36 	bl	8000ecc <OneWire_ReadByte>
	tl = OneWire_ReadByte(OneWire);
 8000a60:	0020      	movs	r0, r4
 8000a62:	f000 fa33 	bl	8000ecc <OneWire_ReadByte>
	conf = OneWire_ReadByte(OneWire);
 8000a66:	0020      	movs	r0, r4
 8000a68:	f000 fa30 	bl	8000ecc <OneWire_ReadByte>
 8000a6c:	0006      	movs	r6, r0
	
	th = 125;
	tl = (uint8_t)-55;

	/* Reset line */
	OneWire_Reset(OneWire);
 8000a6e:	0020      	movs	r0, r4
 8000a70:	f000 f938 	bl	8000ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a74:	0029      	movs	r1, r5
 8000a76:	0020      	movs	r0, r4
 8000a78:	f000 fd24 	bl	80014c4 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000a7c:	0020      	movs	r0, r4
 8000a7e:	214e      	movs	r1, #78	; 0x4e
 8000a80:	f000 f9a6 	bl	8000dd0 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000a84:	0020      	movs	r0, r4
 8000a86:	217d      	movs	r1, #125	; 0x7d
 8000a88:	f000 f9a2 	bl	8000dd0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000a8c:	0020      	movs	r0, r4
 8000a8e:	21c9      	movs	r1, #201	; 0xc9
 8000a90:	f000 f99e 	bl	8000dd0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000a94:	0031      	movs	r1, r6
 8000a96:	0020      	movs	r0, r4
 8000a98:	f000 f99a 	bl	8000dd0 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	f000 f921 	bl	8000ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000aa2:	0029      	movs	r1, r5
 8000aa4:	0020      	movs	r0, r4
 8000aa6:	f000 fd0d 	bl	80014c4 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000aaa:	0020      	movs	r0, r4
 8000aac:	2148      	movs	r1, #72	; 0x48
 8000aae:	f000 f98f 	bl	8000dd0 <OneWire_WriteByte>
	
	return 1;
}
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)

08000ab8 <Ds18b20_Init>:
{
 8000ab8:	2305      	movs	r3, #5
 8000aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abc:	4646      	mov	r6, r8
 8000abe:	4698      	mov	r8, r3
		TempSensorCount = 0;	
 8000ac0:	2300      	movs	r3, #0
{
 8000ac2:	464f      	mov	r7, r9
 8000ac4:	46d6      	mov	lr, sl
		TempSensorCount = 0;	
 8000ac6:	4699      	mov	r9, r3
{
 8000ac8:	b5c0      	push	{r6, r7, lr}
 8000aca:	4d33      	ldr	r5, [pc, #204]	; (8000b98 <Ds18b20_Init+0xe0>)
 8000acc:	4c33      	ldr	r4, [pc, #204]	; (8000b9c <Ds18b20_Init+0xe4>)
 8000ace:	4e34      	ldr	r6, [pc, #208]	; (8000ba0 <Ds18b20_Init+0xe8>)
 8000ad0:	4f34      	ldr	r7, [pc, #208]	; (8000ba4 <Ds18b20_Init+0xec>)
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8000ad2:	2190      	movs	r1, #144	; 0x90
 8000ad4:	2240      	movs	r2, #64	; 0x40
 8000ad6:	0028      	movs	r0, r5
 8000ad8:	05c9      	lsls	r1, r1, #23
 8000ada:	f000 f8d3 	bl	8000c84 <OneWire_Init>
		TempSensorCount = 0;	
 8000ade:	464b      	mov	r3, r9
 8000ae0:	7023      	strb	r3, [r4, #0]
		while(HAL_GetTick() < 3000)
 8000ae2:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <Ds18b20_Init+0xf0>)
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	e002      	b.n	8000aee <Ds18b20_Init+0x36>
			Ds18b20Delay(100);
 8000ae8:	2064      	movs	r0, #100	; 0x64
 8000aea:	f001 f8ed 	bl	8001cc8 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 8000aee:	f001 f8e5 	bl	8001cbc <HAL_GetTick>
 8000af2:	4550      	cmp	r0, sl
 8000af4:	d9f8      	bls.n	8000ae8 <Ds18b20_Init+0x30>
		OneWireDevices = OneWire_First(&OneWire);
 8000af6:	0028      	movs	r0, r5
 8000af8:	f000 fbe2 	bl	80012c0 <OneWire_First>
 8000afc:	7030      	strb	r0, [r6, #0]
		while (OneWireDevices)
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d012      	beq.n	8000b28 <Ds18b20_Init+0x70>
			Ds18b20Delay(100);
 8000b02:	2064      	movs	r0, #100	; 0x64
 8000b04:	f001 f8e0 	bl	8001cc8 <HAL_Delay>
			TempSensorCount++;
 8000b08:	7821      	ldrb	r1, [r4, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8000b0a:	0028      	movs	r0, r5
			TempSensorCount++;
 8000b0c:	3101      	adds	r1, #1
 8000b0e:	b2c9      	uxtb	r1, r1
 8000b10:	7021      	strb	r1, [r4, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8000b12:	3901      	subs	r1, #1
 8000b14:	0109      	lsls	r1, r1, #4
 8000b16:	1879      	adds	r1, r7, r1
 8000b18:	f000 fcd8 	bl	80014cc <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8000b1c:	0028      	movs	r0, r5
 8000b1e:	f000 fbd7 	bl	80012d0 <OneWire_Next>
 8000b22:	7030      	strb	r0, [r6, #0]
		while (OneWireDevices)
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d1ec      	bne.n	8000b02 <Ds18b20_Init+0x4a>
		if(TempSensorCount>0)
 8000b28:	7823      	ldrb	r3, [r4, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10b      	bne.n	8000b46 <Ds18b20_Init+0x8e>
	}while(Ds18b20TryToFind>0);
 8000b2e:	4643      	mov	r3, r8
 8000b30:	3b01      	subs	r3, #1
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4698      	mov	r8, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1cb      	bne.n	8000ad2 <Ds18b20_Init+0x1a>
		return false;
 8000b3a:	2000      	movs	r0, #0
}
 8000b3c:	bce0      	pop	{r5, r6, r7}
 8000b3e:	46ba      	mov	sl, r7
 8000b40:	46b1      	mov	r9, r6
 8000b42:	46a8      	mov	r8, r5
 8000b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <Ds18b20_Init+0xec>)
 8000b48:	2600      	movs	r6, #0
 8000b4a:	4698      	mov	r8, r3
		Ds18b20Delay(50);
 8000b4c:	2032      	movs	r0, #50	; 0x32
 8000b4e:	f001 f8bb 	bl	8001cc8 <HAL_Delay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8000b52:	4642      	mov	r2, r8
 8000b54:	0133      	lsls	r3, r6, #4
 8000b56:	18d7      	adds	r7, r2, r3
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
 8000b5a:	2b28      	cmp	r3, #40	; 0x28
 8000b5c:	d016      	beq.n	8000b8c <Ds18b20_Init+0xd4>
		Ds18b20Delay(50);
 8000b5e:	2032      	movs	r0, #50	; 0x32
 8000b60:	f001 f8b2 	bl	8001cc8 <HAL_Delay>
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000b64:	783b      	ldrb	r3, [r7, #0]
 8000b66:	2b28      	cmp	r3, #40	; 0x28
 8000b68:	d006      	beq.n	8000b78 <Ds18b20_Init+0xc0>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8000b6a:	3601      	adds	r6, #1
 8000b6c:	7823      	ldrb	r3, [r4, #0]
 8000b6e:	b2f6      	uxtb	r6, r6
 8000b70:	42b3      	cmp	r3, r6
 8000b72:	d8eb      	bhi.n	8000b4c <Ds18b20_Init+0x94>
	return true;
 8000b74:	2001      	movs	r0, #1
 8000b76:	e7e1      	b.n	8000b3c <Ds18b20_Init+0x84>
 8000b78:	0039      	movs	r1, r7
 8000b7a:	0028      	movs	r0, r5
 8000b7c:	f7ff ff5a 	bl	8000a34 <DS18B20_DisableAlarmTemperature.part.0>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8000b80:	3601      	adds	r6, #1
 8000b82:	7823      	ldrb	r3, [r4, #0]
 8000b84:	b2f6      	uxtb	r6, r6
 8000b86:	42b3      	cmp	r3, r6
 8000b88:	d8e0      	bhi.n	8000b4c <Ds18b20_Init+0x94>
 8000b8a:	e7f3      	b.n	8000b74 <Ds18b20_Init+0xbc>
 8000b8c:	220c      	movs	r2, #12
 8000b8e:	0039      	movs	r1, r7
 8000b90:	0028      	movs	r0, r5
 8000b92:	f7ff feed 	bl	8000970 <DS18B20_SetResolution.part.0>
 8000b96:	e7e2      	b.n	8000b5e <Ds18b20_Init+0xa6>
 8000b98:	20000040 	.word	0x20000040
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000054 	.word	0x20000054
 8000ba4:	20000058 	.word	0x20000058
 8000ba8:	00000bb7 	.word	0x00000bb7

08000bac <Ds18b20_ManualConvert>:
{
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	464f      	mov	r7, r9
 8000bb2:	4646      	mov	r6, r8
	Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8000bb4:	2364      	movs	r3, #100	; 0x64
{
 8000bb6:	b5c0      	push	{r6, r7, lr}
	OneWire_Reset(OneWire);
 8000bb8:	4f2e      	ldr	r7, [pc, #184]	; (8000c74 <Ds18b20_ManualConvert+0xc8>)
	Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8000bba:	4e2f      	ldr	r6, [pc, #188]	; (8000c78 <Ds18b20_ManualConvert+0xcc>)
	OneWire_Reset(OneWire);
 8000bbc:	0038      	movs	r0, r7
	Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8000bbe:	8033      	strh	r3, [r6, #0]
	OneWire_Reset(OneWire);
 8000bc0:	f000 f890 	bl	8000ce4 <OneWire_Reset>
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8000bc4:	0038      	movs	r0, r7
 8000bc6:	21cc      	movs	r1, #204	; 0xcc
 8000bc8:	f000 f902 	bl	8000dd0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8000bcc:	0038      	movs	r0, r7
 8000bce:	2144      	movs	r1, #68	; 0x44
 8000bd0:	f000 f8fe 	bl	8000dd0 <OneWire_WriteByte>
	Ds18b20Delay(100);
 8000bd4:	2064      	movs	r0, #100	; 0x64
 8000bd6:	f001 f877 	bl	8001cc8 <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 8000bda:	e008      	b.n	8000bee <Ds18b20_ManualConvert+0x42>
		Ds18b20Delay(10);  
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f001 f873 	bl	8001cc8 <HAL_Delay>
		Ds18b20Timeout-=1;
 8000be2:	8833      	ldrh	r3, [r6, #0]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	8033      	strh	r3, [r6, #0]
		if(Ds18b20Timeout==0)
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d02b      	beq.n	8000c46 <Ds18b20_ManualConvert+0x9a>
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8000bee:	0038      	movs	r0, r7
 8000bf0:	f000 f8b6 	bl	8000d60 <OneWire_ReadBit>
	while (!DS18B20_AllDone(&OneWire))
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	d0f1      	beq.n	8000bdc <Ds18b20_ManualConvert+0x30>
	if(Ds18b20Timeout>0)
 8000bf8:	8830      	ldrh	r0, [r6, #0]
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	d023      	beq.n	8000c46 <Ds18b20_ManualConvert+0x9a>
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <Ds18b20_ManualConvert+0xd0>)
 8000c00:	4699      	mov	r9, r3
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d016      	beq.n	8000c36 <Ds18b20_ManualConvert+0x8a>
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <Ds18b20_ManualConvert+0xd4>)
 8000c0a:	2400      	movs	r4, #0
 8000c0c:	4698      	mov	r8, r3
			Ds18b20Delay(100);
 8000c0e:	2064      	movs	r0, #100	; 0x64
 8000c10:	f001 f85a 	bl	8001cc8 <HAL_Delay>
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000c14:	4643      	mov	r3, r8
 8000c16:	0125      	lsls	r5, r4, #4
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8000c18:	46aa      	mov	sl, r5
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000c1a:	5d5b      	ldrb	r3, [r3, r5]
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8000c1c:	44c2      	add	sl, r8
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000c1e:	2b28      	cmp	r3, #40	; 0x28
 8000c20:	d01a      	beq.n	8000c58 <Ds18b20_ManualConvert+0xac>
		return false;
 8000c22:	2000      	movs	r0, #0
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000c24:	464b      	mov	r3, r9
 8000c26:	3401      	adds	r4, #1
 8000c28:	781b      	ldrb	r3, [r3, #0]
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8000c2a:	4445      	add	r5, r8
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000c2c:	b2e4      	uxtb	r4, r4
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8000c2e:	7328      	strb	r0, [r5, #12]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	d8ec      	bhi.n	8000c0e <Ds18b20_ManualConvert+0x62>
	if(Ds18b20Timeout==0)
 8000c34:	8830      	ldrh	r0, [r6, #0]
 8000c36:	1e43      	subs	r3, r0, #1
 8000c38:	4198      	sbcs	r0, r3
}
 8000c3a:	b2c0      	uxtb	r0, r0
 8000c3c:	bce0      	pop	{r5, r6, r7}
 8000c3e:	46ba      	mov	sl, r7
 8000c40:	46b1      	mov	r9, r6
 8000c42:	46a8      	mov	r8, r5
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <Ds18b20_ManualConvert+0xd0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <Ds18b20_ManualConvert+0xa8>
			ds18b20[i].DataIsValid = false;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <Ds18b20_ManualConvert+0xd4>)
 8000c52:	731a      	strb	r2, [r3, #12]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000c54:	2000      	movs	r0, #0
 8000c56:	e7ee      	b.n	8000c36 <Ds18b20_ManualConvert+0x8a>
	if (!OneWire_ReadBit(OneWire)) 
 8000c58:	0038      	movs	r0, r7
 8000c5a:	f000 f881 	bl	8000d60 <OneWire_ReadBit>
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d0df      	beq.n	8000c22 <Ds18b20_ManualConvert+0x76>
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8000c62:	002a      	movs	r2, r5
 8000c64:	3208      	adds	r2, #8
 8000c66:	4651      	mov	r1, sl
 8000c68:	0038      	movs	r0, r7
 8000c6a:	4442      	add	r2, r8
 8000c6c:	f7ff fe08 	bl	8000880 <DS18B20_Read.part.0>
 8000c70:	e7d8      	b.n	8000c24 <Ds18b20_ManualConvert+0x78>
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	20000040 	.word	0x20000040
 8000c78:	2000003c 	.word	0x2000003c
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000058 	.word	0x20000058

08000c84 <OneWire_Init>:
	gpinit.Pin = gp->GPIO_Pin;
	HAL_GPIO_Init(gp->GPIOx,&gpinit);

}
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	0004      	movs	r4, r0
 8000c88:	b086      	sub	sp, #24
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8000c8a:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <OneWire_Init+0x5c>)
{	
 8000c8c:	0016      	movs	r6, r2
 8000c8e:	000d      	movs	r5, r1
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8000c90:	f001 ff50 	bl	8002b34 <HAL_TIM_Base_Start>
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000c94:	2311      	movs	r3, #17
 8000c96:	9302      	str	r3, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000c9a:	0028      	movs	r0, r5

	OneWireStruct->GPIOx = GPIOx;
 8000c9c:	6025      	str	r5, [r4, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
	ONEWIRE_OUTPUT(OneWireStruct);
	ONEWIRE_HIGH(OneWireStruct);
	OneWireDelay(1000);
 8000c9e:	25fa      	movs	r5, #250	; 0xfa
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000ca0:	a901      	add	r1, sp, #4
	gpinit.Pull = GPIO_NOPULL;
 8000ca2:	9303      	str	r3, [sp, #12]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8000ca4:	80a6      	strh	r6, [r4, #4]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca6:	3303      	adds	r3, #3
 8000ca8:	9304      	str	r3, [sp, #16]
	gpinit.Pin = gp->GPIO_Pin;
 8000caa:	9601      	str	r6, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000cac:	f001 f8aa 	bl	8001e04 <HAL_GPIO_Init>
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	88a2      	ldrh	r2, [r4, #4]
	OneWireDelay(1000);
 8000cb4:	00ad      	lsls	r5, r5, #2
 8000cb6:	0028      	movs	r0, r5
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8000cb8:	619a      	str	r2, [r3, #24]
	OneWireDelay(1000);
 8000cba:	f001 f805 	bl	8001cc8 <HAL_Delay>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000cbe:	88a3      	ldrh	r3, [r4, #4]
 8000cc0:	6822      	ldr	r2, [r4, #0]
 8000cc2:	041b      	lsls	r3, r3, #16
	ONEWIRE_LOW(OneWireStruct);
	OneWireDelay(1000);
 8000cc4:	0028      	movs	r0, r5
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000cc6:	6193      	str	r3, [r2, #24]
	OneWireDelay(1000);
 8000cc8:	f000 fffe 	bl	8001cc8 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
	OneWireDelay(2000);
 8000ccc:	20fa      	movs	r0, #250	; 0xfa
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	88a2      	ldrh	r2, [r4, #4]
	OneWireDelay(2000);
 8000cd2:	00c0      	lsls	r0, r0, #3
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8000cd4:	619a      	str	r2, [r3, #24]
	OneWireDelay(2000);
 8000cd6:	f000 fff7 	bl	8001cc8 <HAL_Delay>
}
 8000cda:	b006      	add	sp, #24
 8000cdc:	bd70      	pop	{r4, r5, r6, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	200001a0 	.word	0x200001a0

08000ce4 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8000ce4:	b570      	push	{r4, r5, r6, lr}
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000ce6:	8883      	ldrh	r3, [r0, #4]
{
 8000ce8:	0004      	movs	r4, r0
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000cea:	6800      	ldr	r0, [r0, #0]
 8000cec:	041a      	lsls	r2, r3, #16
 8000cee:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000cf0:	2211      	movs	r2, #17
	gpinit.Pull = GPIO_NOPULL;
 8000cf2:	2600      	movs	r6, #0
{
 8000cf4:	b086      	sub	sp, #24
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000cf6:	9202      	str	r2, [sp, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000cf8:	a901      	add	r1, sp, #4
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfa:	3a0e      	subs	r2, #14
	gpinit.Pin = gp->GPIO_Pin;
 8000cfc:	9301      	str	r3, [sp, #4]
	gpinit.Pull = GPIO_NOPULL;
 8000cfe:	9603      	str	r6, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d00:	9204      	str	r2, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000d02:	f001 f87f 	bl	8001e04 <HAL_GPIO_Init>
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000d06:	21f0      	movs	r1, #240	; 0xf0
	_DS18B20_TIMER.Instance->CNT = 0;
 8000d08:	4d14      	ldr	r5, [pc, #80]	; (8000d5c <OneWire_Reset+0x78>)
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000d0a:	0049      	lsls	r1, r1, #1
	_DS18B20_TIMER.Instance->CNT = 0;
 8000d0c:	682b      	ldr	r3, [r5, #0]
 8000d0e:	625e      	str	r6, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d9fc      	bls.n	8000d10 <OneWire_Reset+0x2c>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d1c:	2a14      	cmp	r2, #20
 8000d1e:	d9fc      	bls.n	8000d1a <OneWire_Reset+0x36>
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d20:	2303      	movs	r3, #3
	gpinit.Mode = GPIO_MODE_INPUT;
 8000d22:	2600      	movs	r6, #0
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d24:	9304      	str	r3, [sp, #16]
	gpinit.Pin = gp->GPIO_Pin;	
 8000d26:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000d28:	6820      	ldr	r0, [r4, #0]
 8000d2a:	a901      	add	r1, sp, #4
	gpinit.Mode = GPIO_MODE_INPUT;
 8000d2c:	9602      	str	r6, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 8000d2e:	9603      	str	r6, [sp, #12]
	gpinit.Pin = gp->GPIO_Pin;	
 8000d30:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000d32:	f001 f867 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000d36:	682a      	ldr	r2, [r5, #0]
 8000d38:	6256      	str	r6, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000d3a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d3c:	2b46      	cmp	r3, #70	; 0x46
 8000d3e:	d9fc      	bls.n	8000d3a <OneWire_Reset+0x56>
	delayMicroseconds(20);
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
	delayMicroseconds(70);
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8000d40:	88a1      	ldrh	r1, [r4, #4]
 8000d42:	6820      	ldr	r0, [r4, #0]
 8000d44:	f001 f97a 	bl	800203c <HAL_GPIO_ReadPin>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000d48:	2300      	movs	r3, #0
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000d4a:	21cd      	movs	r1, #205	; 0xcd
	_DS18B20_TIMER.Instance->CNT = 0;
 8000d4c:	682a      	ldr	r2, [r5, #0]
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000d4e:	0049      	lsls	r1, r1, #1
	_DS18B20_TIMER.Instance->CNT = 0;
 8000d50:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000d52:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d9fc      	bls.n	8000d52 <OneWire_Reset+0x6e>
	
	/* Delay for 410 us */
	delayMicroseconds(410);
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
}
 8000d58:	b006      	add	sp, #24
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
 8000d5c:	200001a0 	.word	0x200001a0

08000d60 <OneWire_ReadBit>:
	}

}

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8000d60:	b570      	push	{r4, r5, r6, lr}
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000d62:	8883      	ldrh	r3, [r0, #4]
{
 8000d64:	0004      	movs	r4, r0
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000d66:	6800      	ldr	r0, [r0, #0]
 8000d68:	041a      	lsls	r2, r3, #16
 8000d6a:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000d6c:	2211      	movs	r2, #17
	gpinit.Pull = GPIO_NOPULL;
 8000d6e:	2600      	movs	r6, #0
{
 8000d70:	b086      	sub	sp, #24
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000d72:	9202      	str	r2, [sp, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000d74:	a901      	add	r1, sp, #4
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d76:	3a0e      	subs	r2, #14
 8000d78:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8000d7a:	9603      	str	r6, [sp, #12]
	gpinit.Pin = gp->GPIO_Pin;
 8000d7c:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000d7e:	f001 f841 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000d82:	4d12      	ldr	r5, [pc, #72]	; (8000dcc <OneWire_ReadBit+0x6c>)
 8000d84:	682a      	ldr	r2, [r5, #0]
 8000d86:	6256      	str	r6, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000d88:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d9fc      	bls.n	8000d88 <OneWire_ReadBit+0x28>
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2303      	movs	r3, #3
	gpinit.Mode = GPIO_MODE_INPUT;
 8000d90:	2600      	movs	r6, #0
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d92:	9304      	str	r3, [sp, #16]
	gpinit.Pin = gp->GPIO_Pin;	
 8000d94:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000d96:	6820      	ldr	r0, [r4, #0]
 8000d98:	a901      	add	r1, sp, #4
	gpinit.Mode = GPIO_MODE_INPUT;
 8000d9a:	9602      	str	r6, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 8000d9c:	9603      	str	r6, [sp, #12]
	gpinit.Pin = gp->GPIO_Pin;	
 8000d9e:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000da0:	f001 f830 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000da4:	682a      	ldr	r2, [r5, #0]
 8000da6:	6256      	str	r6, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000da8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000daa:	2b0a      	cmp	r3, #10
 8000dac:	d9fc      	bls.n	8000da8 <OneWire_ReadBit+0x48>
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
	delayMicroseconds(10);
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8000dae:	88a1      	ldrh	r1, [r4, #4]
 8000db0:	6820      	ldr	r0, [r4, #0]
 8000db2:	f001 f943 	bl	800203c <HAL_GPIO_ReadPin>
 8000db6:	1e43      	subs	r3, r0, #1
 8000db8:	4198      	sbcs	r0, r3
	_DS18B20_TIMER.Instance->CNT = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	682a      	ldr	r2, [r5, #0]
	uint8_t bit = 0;
 8000dbe:	b2c0      	uxtb	r0, r0
	_DS18B20_TIMER.Instance->CNT = 0;
 8000dc0:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000dc2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000dc4:	2b32      	cmp	r3, #50	; 0x32
 8000dc6:	d9fc      	bls.n	8000dc2 <OneWire_ReadBit+0x62>
	/* Wait 50us to complete 60us period */
	delayMicroseconds(50);
	
	/* Return bit value */
	return bit;
}
 8000dc8:	b006      	add	sp, #24
 8000dca:	bd70      	pop	{r4, r5, r6, pc}
 8000dcc:	200001a0 	.word	0x200001a0

08000dd0 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
	uint8_t i = 8;
	/* Write 8 bits */
	while (i--) {
 8000dd0:	4b3d      	ldr	r3, [pc, #244]	; (8000ec8 <OneWire_WriteByte+0xf8>)
void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8000dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd4:	464e      	mov	r6, r9
 8000dd6:	4699      	mov	r9, r3
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8000dd8:	2301      	movs	r3, #1
void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8000dda:	4657      	mov	r7, sl
 8000ddc:	4645      	mov	r5, r8
 8000dde:	46de      	mov	lr, fp
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8000de0:	4698      	mov	r8, r3
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000de2:	3310      	adds	r3, #16
void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8000de4:	b5e0      	push	{r5, r6, r7, lr}
 8000de6:	0004      	movs	r4, r0
 8000de8:	000e      	movs	r6, r1
 8000dea:	2508      	movs	r5, #8
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000dec:	469a      	mov	sl, r3
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dee:	2703      	movs	r7, #3
void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8000df0:	b087      	sub	sp, #28
	if (bit) 
 8000df2:	4643      	mov	r3, r8
 8000df4:	4033      	ands	r3, r6
 8000df6:	469b      	mov	fp, r3
 8000df8:	4643      	mov	r3, r8
 8000dfa:	4233      	tst	r3, r6
 8000dfc:	d03c      	beq.n	8000e78 <OneWire_WriteByte+0xa8>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000dfe:	88a3      	ldrh	r3, [r4, #4]
 8000e00:	6820      	ldr	r0, [r4, #0]
 8000e02:	041a      	lsls	r2, r3, #16
 8000e04:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000e06:	4652      	mov	r2, sl
 8000e08:	9202      	str	r2, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 8000e0a:	2200      	movs	r2, #0
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e0c:	a901      	add	r1, sp, #4
	gpinit.Pull = GPIO_NOPULL;
 8000e0e:	4693      	mov	fp, r2
 8000e10:	9203      	str	r2, [sp, #12]
	gpinit.Pin = gp->GPIO_Pin;
 8000e12:	9301      	str	r3, [sp, #4]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e14:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e16:	f000 fff5 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000e1a:	464b      	mov	r3, r9
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	465b      	mov	r3, fp
 8000e20:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000e22:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e24:	2b0a      	cmp	r3, #10
 8000e26:	d9fc      	bls.n	8000e22 <OneWire_WriteByte+0x52>
	gpinit.Mode = GPIO_MODE_INPUT;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	9302      	str	r3, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 8000e2e:	9303      	str	r3, [sp, #12]
	gpinit.Pin = gp->GPIO_Pin;	
 8000e30:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e32:	6820      	ldr	r0, [r4, #0]
 8000e34:	a901      	add	r1, sp, #4
	gpinit.Pin = gp->GPIO_Pin;	
 8000e36:	9301      	str	r3, [sp, #4]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e38:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e3a:	f000 ffe3 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000e3e:	464b      	mov	r3, r9
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	465b      	mov	r3, fp
 8000e44:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000e46:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e48:	2b37      	cmp	r3, #55	; 0x37
 8000e4a:	d9fc      	bls.n	8000e46 <OneWire_WriteByte+0x76>
	gpinit.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
	while (i--) {
 8000e4e:	3d01      	subs	r5, #1
	gpinit.Mode = GPIO_MODE_INPUT;
 8000e50:	9302      	str	r3, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 8000e52:	9303      	str	r3, [sp, #12]
	gpinit.Pin = gp->GPIO_Pin;	
 8000e54:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e56:	6820      	ldr	r0, [r4, #0]
 8000e58:	a901      	add	r1, sp, #4
	while (i--) {
 8000e5a:	b2ed      	uxtb	r5, r5
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5c:	9704      	str	r7, [sp, #16]
	gpinit.Pin = gp->GPIO_Pin;	
 8000e5e:	9301      	str	r3, [sp, #4]
		byte >>= 1;
 8000e60:	0876      	lsrs	r6, r6, #1
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e62:	f000 ffcf 	bl	8001e04 <HAL_GPIO_Init>
	while (i--) {
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d1c3      	bne.n	8000df2 <OneWire_WriteByte+0x22>
	}
}
 8000e6a:	b007      	add	sp, #28
 8000e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e6e:	46bb      	mov	fp, r7
 8000e70:	46b2      	mov	sl, r6
 8000e72:	46a9      	mov	r9, r5
 8000e74:	46a0      	mov	r8, r4
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000e78:	88a3      	ldrh	r3, [r4, #4]
 8000e7a:	6820      	ldr	r0, [r4, #0]
 8000e7c:	041a      	lsls	r2, r3, #16
 8000e7e:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000e80:	4652      	mov	r2, sl
 8000e82:	9202      	str	r2, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 8000e84:	465a      	mov	r2, fp
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e86:	a901      	add	r1, sp, #4
	gpinit.Pull = GPIO_NOPULL;
 8000e88:	9203      	str	r2, [sp, #12]
	gpinit.Pin = gp->GPIO_Pin;
 8000e8a:	9301      	str	r3, [sp, #4]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8c:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e8e:	f000 ffb9 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000e92:	464b      	mov	r3, r9
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	465b      	mov	r3, fp
 8000e98:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000e9a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e9c:	2b41      	cmp	r3, #65	; 0x41
 8000e9e:	d9fc      	bls.n	8000e9a <OneWire_WriteByte+0xca>
	gpinit.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	469b      	mov	fp, r3
 8000ea4:	9302      	str	r3, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 8000ea6:	9303      	str	r3, [sp, #12]
	gpinit.Pin = gp->GPIO_Pin;	
 8000ea8:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000eaa:	6820      	ldr	r0, [r4, #0]
 8000eac:	a901      	add	r1, sp, #4
	gpinit.Pin = gp->GPIO_Pin;	
 8000eae:	9301      	str	r3, [sp, #4]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb0:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000eb2:	f000 ffa7 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	465b      	mov	r3, fp
 8000ebc:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000ebe:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d9fc      	bls.n	8000ebe <OneWire_WriteByte+0xee>
 8000ec4:	e7c2      	b.n	8000e4c <OneWire_WriteByte+0x7c>
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	200001a0 	.word	0x200001a0

08000ecc <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
	uint8_t i = 8, byte = 0;
	while (i--) {
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <OneWire_ReadByte+0x9c>)
uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8000ece:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed0:	4646      	mov	r6, r8
 8000ed2:	4698      	mov	r8, r3
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000ed4:	2311      	movs	r3, #17
uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8000ed6:	46d6      	mov	lr, sl
 8000ed8:	464f      	mov	r7, r9
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000eda:	469a      	mov	sl, r3
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000edc:	3b0e      	subs	r3, #14
uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8000ede:	b5c0      	push	{r6, r7, lr}
 8000ee0:	0004      	movs	r4, r0
 8000ee2:	2608      	movs	r6, #8
	uint8_t i = 8, byte = 0;
 8000ee4:	2000      	movs	r0, #0
	gpinit.Pull = GPIO_NOPULL;
 8000ee6:	2500      	movs	r5, #0
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee8:	4699      	mov	r9, r3
uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8000eea:	b086      	sub	sp, #24
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000eec:	88a3      	ldrh	r3, [r4, #4]
		byte >>= 1;
 8000eee:	0847      	lsrs	r7, r0, #1
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000ef0:	6820      	ldr	r0, [r4, #0]
 8000ef2:	041a      	lsls	r2, r3, #16
 8000ef4:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000ef6:	4652      	mov	r2, sl
 8000ef8:	9202      	str	r2, [sp, #8]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efa:	464a      	mov	r2, r9
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000efc:	a901      	add	r1, sp, #4
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efe:	9204      	str	r2, [sp, #16]
	gpinit.Pin = gp->GPIO_Pin;
 8000f00:	9301      	str	r3, [sp, #4]
	gpinit.Pull = GPIO_NOPULL;
 8000f02:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000f04:	f000 ff7e 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000f08:	4643      	mov	r3, r8
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000f0e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d9fc      	bls.n	8000f0e <OneWire_ReadByte+0x42>
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f14:	464b      	mov	r3, r9
 8000f16:	9304      	str	r3, [sp, #16]
	gpinit.Pin = gp->GPIO_Pin;	
 8000f18:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000f1a:	6820      	ldr	r0, [r4, #0]
 8000f1c:	a901      	add	r1, sp, #4
	gpinit.Pin = gp->GPIO_Pin;	
 8000f1e:	9301      	str	r3, [sp, #4]
	gpinit.Mode = GPIO_MODE_INPUT;
 8000f20:	9502      	str	r5, [sp, #8]
	gpinit.Pull = GPIO_NOPULL;
 8000f22:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000f24:	f000 ff6e 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000f28:	4643      	mov	r3, r8
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000f2e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f30:	2b0a      	cmp	r3, #10
 8000f32:	d9fc      	bls.n	8000f2e <OneWire_ReadByte+0x62>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8000f34:	88a1      	ldrh	r1, [r4, #4]
 8000f36:	6820      	ldr	r0, [r4, #0]
 8000f38:	f001 f880 	bl	800203c <HAL_GPIO_ReadPin>
 8000f3c:	1e43      	subs	r3, r0, #1
 8000f3e:	4198      	sbcs	r0, r3
	_DS18B20_TIMER.Instance->CNT = 0;
 8000f40:	4643      	mov	r3, r8
 8000f42:	681a      	ldr	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8000f44:	b2c0      	uxtb	r0, r0
	_DS18B20_TIMER.Instance->CNT = 0;
 8000f46:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000f48:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f4a:	2b32      	cmp	r3, #50	; 0x32
 8000f4c:	d9fc      	bls.n	8000f48 <OneWire_ReadByte+0x7c>
	while (i--) {
 8000f4e:	3e01      	subs	r6, #1
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8000f50:	01c0      	lsls	r0, r0, #7
	while (i--) {
 8000f52:	b2f6      	uxtb	r6, r6
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8000f54:	4338      	orrs	r0, r7
	while (i--) {
 8000f56:	2e00      	cmp	r6, #0
 8000f58:	d1c8      	bne.n	8000eec <OneWire_ReadByte+0x20>
	}
	
	return byte;
}
 8000f5a:	b006      	add	sp, #24
 8000f5c:	bce0      	pop	{r5, r6, r7}
 8000f5e:	46ba      	mov	sl, r7
 8000f60:	46b1      	mov	r9, r6
 8000f62:	46a8      	mov	r8, r5
 8000f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	200001a0 	.word	0x200001a0

08000f6c <OneWire_Search>:
	OneWireStruct->LastDiscrepancy = 0;
	OneWireStruct->LastDeviceFlag = 0;
	OneWireStruct->LastFamilyDiscrepancy = 0;
}

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	4657      	mov	r7, sl
 8000f70:	4645      	mov	r5, r8
 8000f72:	46de      	mov	lr, fp
 8000f74:	464e      	mov	r6, r9
 8000f76:	b5e0      	push	{r5, r6, r7, lr}
	rom_byte_number = 0;
	rom_byte_mask = 1;
	search_result = 0;

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8000f78:	7a07      	ldrb	r7, [r0, #8]
uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8000f7a:	0004      	movs	r4, r0
 8000f7c:	000d      	movs	r5, r1
 8000f7e:	b089      	sub	sp, #36	; 0x24
	if (!OneWireStruct->LastDeviceFlag)
 8000f80:	2f00      	cmp	r7, #0
 8000f82:	d00a      	beq.n	8000f9a <OneWire_Search+0x2e>
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
			OneWireStruct->LastDeviceFlag = 0;
 8000f84:	2300      	movs	r3, #0
			OneWireStruct->LastFamilyDiscrepancy = 0;
			return 0;
 8000f86:	2000      	movs	r0, #0
			OneWireStruct->LastDeviceFlag = 0;
 8000f88:	7223      	strb	r3, [r4, #8]
			OneWireStruct->LastDiscrepancy = 0;
 8000f8a:	80e3      	strh	r3, [r4, #6]
		OneWireStruct->LastFamilyDiscrepancy = 0;
		search_result = 0;
	}

	return search_result;
}
 8000f8c:	b009      	add	sp, #36	; 0x24
 8000f8e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f90:	46bb      	mov	fp, r7
 8000f92:	46b2      	mov	sl, r6
 8000f94:	46a9      	mov	r9, r5
 8000f96:	46a0      	mov	r8, r4
 8000f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000f9a:	8883      	ldrh	r3, [r0, #4]
 8000f9c:	6800      	ldr	r0, [r0, #0]
 8000f9e:	041a      	lsls	r2, r3, #16
 8000fa0:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000fa2:	2211      	movs	r2, #17
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000fa4:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000fa6:	9204      	str	r2, [sp, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa8:	3a0e      	subs	r2, #14
	gpinit.Pin = gp->GPIO_Pin;
 8000faa:	9303      	str	r3, [sp, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000fac:	9705      	str	r7, [sp, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fae:	9206      	str	r2, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000fb0:	f000 ff28 	bl	8001e04 <HAL_GPIO_Init>
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000fb4:	21f0      	movs	r1, #240	; 0xf0
	_DS18B20_TIMER.Instance->CNT = 0;
 8000fb6:	4ec1      	ldr	r6, [pc, #772]	; (80012bc <OneWire_Search+0x350>)
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000fb8:	0049      	lsls	r1, r1, #1
	_DS18B20_TIMER.Instance->CNT = 0;
 8000fba:	6833      	ldr	r3, [r6, #0]
 8000fbc:	625f      	str	r7, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fc0:	428a      	cmp	r2, r1
 8000fc2:	d9fc      	bls.n	8000fbe <OneWire_Search+0x52>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fca:	2a14      	cmp	r2, #20
 8000fcc:	d9fc      	bls.n	8000fc8 <OneWire_Search+0x5c>
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fce:	2303      	movs	r3, #3
	gpinit.Mode = GPIO_MODE_INPUT;
 8000fd0:	2700      	movs	r7, #0
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd2:	9306      	str	r3, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 8000fd4:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000fd6:	6820      	ldr	r0, [r4, #0]
 8000fd8:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_INPUT;
 8000fda:	9704      	str	r7, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8000fdc:	9705      	str	r7, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8000fde:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000fe0:	f000 ff10 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000fe4:	6832      	ldr	r2, [r6, #0]
 8000fe6:	6257      	str	r7, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000fe8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000fea:	2b46      	cmp	r3, #70	; 0x46
 8000fec:	d9fc      	bls.n	8000fe8 <OneWire_Search+0x7c>
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8000fee:	88a1      	ldrh	r1, [r4, #4]
 8000ff0:	6820      	ldr	r0, [r4, #0]
 8000ff2:	f001 f823 	bl	800203c <HAL_GPIO_ReadPin>
	_DS18B20_TIMER.Instance->CNT = 0;
 8000ff6:	2300      	movs	r3, #0
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000ff8:	21cd      	movs	r1, #205	; 0xcd
	_DS18B20_TIMER.Instance->CNT = 0;
 8000ffa:	6832      	ldr	r2, [r6, #0]
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000ffc:	0049      	lsls	r1, r1, #1
	_DS18B20_TIMER.Instance->CNT = 0;
 8000ffe:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001000:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001002:	428b      	cmp	r3, r1
 8001004:	d9fc      	bls.n	8001000 <OneWire_Search+0x94>
	return i;
 8001006:	2308      	movs	r3, #8
 8001008:	9301      	str	r3, [sp, #4]
		if (OneWire_Reset(OneWireStruct)) 
 800100a:	2800      	cmp	r0, #0
 800100c:	d1ba      	bne.n	8000f84 <OneWire_Search+0x18>
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800100e:	3b07      	subs	r3, #7
 8001010:	4698      	mov	r8, r3
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001012:	3310      	adds	r3, #16
 8001014:	4699      	mov	r9, r3
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001016:	2703      	movs	r7, #3
	if (bit) 
 8001018:	4643      	mov	r3, r8
 800101a:	402b      	ands	r3, r5
 800101c:	469a      	mov	sl, r3
 800101e:	4643      	mov	r3, r8
 8001020:	422b      	tst	r3, r5
 8001022:	d100      	bne.n	8001026 <OneWire_Search+0xba>
 8001024:	e0e3      	b.n	80011ee <OneWire_Search+0x282>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001026:	88a3      	ldrh	r3, [r4, #4]
 8001028:	6820      	ldr	r0, [r4, #0]
 800102a:	041a      	lsls	r2, r3, #16
 800102c:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 800102e:	464a      	mov	r2, r9
 8001030:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001032:	2200      	movs	r2, #0
 8001034:	4692      	mov	sl, r2
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001036:	a903      	add	r1, sp, #12
	gpinit.Pull = GPIO_NOPULL;
 8001038:	9205      	str	r2, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;
 800103a:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800103c:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800103e:	f000 fee1 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001042:	4653      	mov	r3, sl
 8001044:	6832      	ldr	r2, [r6, #0]
 8001046:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001048:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800104a:	2b0a      	cmp	r3, #10
 800104c:	d9fc      	bls.n	8001048 <OneWire_Search+0xdc>
	gpinit.Mode = GPIO_MODE_INPUT;
 800104e:	2300      	movs	r3, #0
 8001050:	469a      	mov	sl, r3
 8001052:	9304      	str	r3, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001054:	9305      	str	r3, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001056:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001058:	6820      	ldr	r0, [r4, #0]
 800105a:	a903      	add	r1, sp, #12
	gpinit.Pin = gp->GPIO_Pin;	
 800105c:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800105e:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001060:	f000 fed0 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001064:	4653      	mov	r3, sl
 8001066:	6832      	ldr	r2, [r6, #0]
 8001068:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800106a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800106c:	2b37      	cmp	r3, #55	; 0x37
 800106e:	d9fc      	bls.n	800106a <OneWire_Search+0xfe>
	gpinit.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	9304      	str	r3, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001074:	9305      	str	r3, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001076:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001078:	6820      	ldr	r0, [r4, #0]
 800107a:	a903      	add	r1, sp, #12
	gpinit.Pin = gp->GPIO_Pin;	
 800107c:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800107e:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001080:	f000 fec0 	bl	8001e04 <HAL_GPIO_Init>
	while (i--) {
 8001084:	9b01      	ldr	r3, [sp, #4]
		byte >>= 1;
 8001086:	086d      	lsrs	r5, r5, #1
	while (i--) {
 8001088:	3b01      	subs	r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1c2      	bne.n	8001018 <OneWire_Search+0xac>
	rom_byte_number = 0;
 8001092:	469a      	mov	sl, r3
	rom_byte_mask = 1;
 8001094:	3301      	adds	r3, #1
 8001096:	4698      	mov	r8, r3
	id_bit_number = 1;
 8001098:	4699      	mov	r9, r3
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 800109a:	3310      	adds	r3, #16
 800109c:	469b      	mov	fp, r3
	gpinit.Pull = GPIO_NOPULL;
 800109e:	2500      	movs	r5, #0
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	2703      	movs	r7, #3
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 80010a2:	88a3      	ldrh	r3, [r4, #4]
 80010a4:	6820      	ldr	r0, [r4, #0]
 80010a6:	041a      	lsls	r2, r3, #16
 80010a8:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80010aa:	465a      	mov	r2, fp
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80010ac:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80010ae:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 80010b0:	9505      	str	r5, [sp, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b2:	9706      	str	r7, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;
 80010b4:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80010b6:	f000 fea5 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80010ba:	6832      	ldr	r2, [r6, #0]
 80010bc:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80010be:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d9fc      	bls.n	80010be <OneWire_Search+0x152>
	gpinit.Pin = gp->GPIO_Pin;	
 80010c4:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80010c6:	6820      	ldr	r0, [r4, #0]
 80010c8:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_INPUT;
 80010ca:	9504      	str	r5, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 80010cc:	9505      	str	r5, [sp, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ce:	9706      	str	r7, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 80010d0:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80010d2:	f000 fe97 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80010d6:	6832      	ldr	r2, [r6, #0]
 80010d8:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80010da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80010dc:	2b0a      	cmp	r3, #10
 80010de:	d9fc      	bls.n	80010da <OneWire_Search+0x16e>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80010e0:	88a1      	ldrh	r1, [r4, #4]
 80010e2:	6820      	ldr	r0, [r4, #0]
 80010e4:	f000 ffaa 	bl	800203c <HAL_GPIO_ReadPin>
	_DS18B20_TIMER.Instance->CNT = 0;
 80010e8:	6832      	ldr	r2, [r6, #0]
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80010ea:	9000      	str	r0, [sp, #0]
	_DS18B20_TIMER.Instance->CNT = 0;
 80010ec:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80010ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80010f0:	2b32      	cmp	r3, #50	; 0x32
 80010f2:	d9fc      	bls.n	80010ee <OneWire_Search+0x182>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 80010f4:	88a3      	ldrh	r3, [r4, #4]
 80010f6:	6820      	ldr	r0, [r4, #0]
 80010f8:	041a      	lsls	r2, r3, #16
 80010fa:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80010fc:	465a      	mov	r2, fp
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80010fe:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001100:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001102:	9505      	str	r5, [sp, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	9706      	str	r7, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8001106:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001108:	f000 fe7c 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800110c:	6832      	ldr	r2, [r6, #0]
 800110e:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001110:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001112:	2b02      	cmp	r3, #2
 8001114:	d9fc      	bls.n	8001110 <OneWire_Search+0x1a4>
	gpinit.Pin = gp->GPIO_Pin;	
 8001116:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001118:	6820      	ldr	r0, [r4, #0]
 800111a:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_INPUT;
 800111c:	9504      	str	r5, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 800111e:	9505      	str	r5, [sp, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001120:	9706      	str	r7, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 8001122:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001124:	f000 fe6e 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001128:	6832      	ldr	r2, [r6, #0]
 800112a:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800112c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800112e:	2b0a      	cmp	r3, #10
 8001130:	d9fc      	bls.n	800112c <OneWire_Search+0x1c0>
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001132:	88a1      	ldrh	r1, [r4, #4]
 8001134:	6820      	ldr	r0, [r4, #0]
 8001136:	f000 ff81 	bl	800203c <HAL_GPIO_ReadPin>
	_DS18B20_TIMER.Instance->CNT = 0;
 800113a:	6832      	ldr	r2, [r6, #0]
 800113c:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800113e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001140:	2b32      	cmp	r3, #50	; 0x32
 8001142:	d9fc      	bls.n	800113e <OneWire_Search+0x1d2>
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8001144:	9b00      	ldr	r3, [sp, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d176      	bne.n	8001238 <OneWire_Search+0x2cc>
				if (id_bit != cmp_id_bit) {
 800114a:	2800      	cmp	r0, #0
 800114c:	d000      	beq.n	8001150 <OneWire_Search+0x1e4>
 800114e:	e09b      	b.n	8001288 <OneWire_Search+0x31c>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001150:	4653      	mov	r3, sl
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8001152:	79a1      	ldrb	r1, [r4, #6]
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8001154:	18e2      	adds	r2, r4, r3
 8001156:	7a53      	ldrb	r3, [r2, #9]
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8001158:	4549      	cmp	r1, r9
 800115a:	d800      	bhi.n	800115e <OneWire_Search+0x1f2>
 800115c:	e09b      	b.n	8001296 <OneWire_Search+0x32a>
					if (search_direction == 0) {
 800115e:	4641      	mov	r1, r8
 8001160:	4219      	tst	r1, r3
 8001162:	d16e      	bne.n	8001242 <OneWire_Search+0x2d6>
						if (last_zero < 9) {
 8001164:	4649      	mov	r1, r9
 8001166:	2908      	cmp	r1, #8
 8001168:	d800      	bhi.n	800116c <OneWire_Search+0x200>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 800116a:	71e1      	strb	r1, [r4, #7]
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800116c:	4641      	mov	r1, r8
 800116e:	438b      	bics	r3, r1
 8001170:	7253      	strb	r3, [r2, #9]
 8001172:	464b      	mov	r3, r9
 8001174:	9301      	str	r3, [sp, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001176:	88a3      	ldrh	r3, [r4, #4]
 8001178:	6820      	ldr	r0, [r4, #0]
 800117a:	041a      	lsls	r2, r3, #16
 800117c:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 800117e:	465a      	mov	r2, fp
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001180:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001182:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001184:	9505      	str	r5, [sp, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001186:	9706      	str	r7, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8001188:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800118a:	f000 fe3b 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800118e:	6832      	ldr	r2, [r6, #0]
 8001190:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001192:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001194:	2b41      	cmp	r3, #65	; 0x41
 8001196:	d9fc      	bls.n	8001192 <OneWire_Search+0x226>
	gpinit.Pin = gp->GPIO_Pin;	
 8001198:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800119a:	6820      	ldr	r0, [r4, #0]
 800119c:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_INPUT;
 800119e:	9504      	str	r5, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 80011a0:	9505      	str	r5, [sp, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a2:	9706      	str	r7, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 80011a4:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80011a6:	f000 fe2d 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80011aa:	6832      	ldr	r2, [r6, #0]
 80011ac:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80011ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d9fc      	bls.n	80011ae <OneWire_Search+0x242>
	gpinit.Pin = gp->GPIO_Pin;	
 80011b4:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80011b6:	6820      	ldr	r0, [r4, #0]
 80011b8:	a903      	add	r1, sp, #12
	gpinit.Pin = gp->GPIO_Pin;	
 80011ba:	9303      	str	r3, [sp, #12]
	gpinit.Mode = GPIO_MODE_INPUT;
 80011bc:	9504      	str	r5, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 80011be:	9505      	str	r5, [sp, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80011c2:	f000 fe1f 	bl	8001e04 <HAL_GPIO_Init>
				id_bit_number++;
 80011c6:	464b      	mov	r3, r9
 80011c8:	3301      	adds	r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4699      	mov	r9, r3
				rom_byte_mask <<= 1;
 80011ce:	4643      	mov	r3, r8
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4698      	mov	r8, r3
				if (rom_byte_mask == 0) {
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d000      	beq.n	80011dc <OneWire_Search+0x270>
 80011da:	e762      	b.n	80010a2 <OneWire_Search+0x136>
					rom_byte_number++;
 80011dc:	4653      	mov	r3, sl
 80011de:	3301      	adds	r3, #1
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	469a      	mov	sl, r3
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d059      	beq.n	800129c <OneWire_Search+0x330>
					rom_byte_mask = 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	4698      	mov	r8, r3
 80011ec:	e759      	b.n	80010a2 <OneWire_Search+0x136>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 80011ee:	88a3      	ldrh	r3, [r4, #4]
 80011f0:	6820      	ldr	r0, [r4, #0]
 80011f2:	041a      	lsls	r2, r3, #16
 80011f4:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80011f6:	464a      	mov	r2, r9
 80011f8:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 80011fa:	4652      	mov	r2, sl
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80011fc:	a903      	add	r1, sp, #12
	gpinit.Pull = GPIO_NOPULL;
 80011fe:	9205      	str	r2, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8001200:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001202:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001204:	f000 fdfe 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001208:	4653      	mov	r3, sl
 800120a:	6832      	ldr	r2, [r6, #0]
 800120c:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800120e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001210:	2b41      	cmp	r3, #65	; 0x41
 8001212:	d9fc      	bls.n	800120e <OneWire_Search+0x2a2>
	gpinit.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	469a      	mov	sl, r3
 8001218:	9304      	str	r3, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 800121a:	9305      	str	r3, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 800121c:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800121e:	6820      	ldr	r0, [r4, #0]
 8001220:	a903      	add	r1, sp, #12
	gpinit.Pin = gp->GPIO_Pin;	
 8001222:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001224:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001226:	f000 fded 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800122a:	4653      	mov	r3, sl
 800122c:	6832      	ldr	r2, [r6, #0]
 800122e:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001230:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001232:	2b05      	cmp	r3, #5
 8001234:	d9fc      	bls.n	8001230 <OneWire_Search+0x2c4>
 8001236:	e71b      	b.n	8001070 <OneWire_Search+0x104>
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8001238:	2800      	cmp	r0, #0
 800123a:	d12f      	bne.n	800129c <OneWire_Search+0x330>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 800123c:	4653      	mov	r3, sl
 800123e:	18e2      	adds	r2, r4, r3
 8001240:	7a53      	ldrb	r3, [r2, #9]
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8001242:	4641      	mov	r1, r8
 8001244:	430b      	orrs	r3, r1
 8001246:	7253      	strb	r3, [r2, #9]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001248:	88a3      	ldrh	r3, [r4, #4]
 800124a:	6820      	ldr	r0, [r4, #0]
 800124c:	041a      	lsls	r2, r3, #16
 800124e:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001250:	465a      	mov	r2, fp
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001252:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001254:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001256:	9505      	str	r5, [sp, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001258:	9706      	str	r7, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;
 800125a:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800125c:	f000 fdd2 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001260:	6832      	ldr	r2, [r6, #0]
 8001262:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001264:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001266:	2b0a      	cmp	r3, #10
 8001268:	d9fc      	bls.n	8001264 <OneWire_Search+0x2f8>
	gpinit.Pin = gp->GPIO_Pin;	
 800126a:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800126c:	6820      	ldr	r0, [r4, #0]
 800126e:	a903      	add	r1, sp, #12
	gpinit.Mode = GPIO_MODE_INPUT;
 8001270:	9504      	str	r5, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001272:	9505      	str	r5, [sp, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001274:	9706      	str	r7, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 8001276:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001278:	f000 fdc4 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800127c:	6832      	ldr	r2, [r6, #0]
 800127e:	6255      	str	r5, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001280:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001282:	2b37      	cmp	r3, #55	; 0x37
 8001284:	d9fc      	bls.n	8001280 <OneWire_Search+0x314>
 8001286:	e795      	b.n	80011b4 <OneWire_Search+0x248>
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8001288:	4653      	mov	r3, sl
 800128a:	4641      	mov	r1, r8
 800128c:	18e2      	adds	r2, r4, r3
 800128e:	7a53      	ldrb	r3, [r2, #9]
 8001290:	438b      	bics	r3, r1
 8001292:	7253      	strb	r3, [r2, #9]
	if (bit) 
 8001294:	e76f      	b.n	8001176 <OneWire_Search+0x20a>
					if (search_direction == 0) {
 8001296:	4549      	cmp	r1, r9
 8001298:	d0d3      	beq.n	8001242 <OneWire_Search+0x2d6>
 800129a:	e763      	b.n	8001164 <OneWire_Search+0x1f8>
		if (!(id_bit_number < 65)) {
 800129c:	464b      	mov	r3, r9
 800129e:	2b40      	cmp	r3, #64	; 0x40
 80012a0:	d800      	bhi.n	80012a4 <OneWire_Search+0x338>
 80012a2:	e66f      	b.n	8000f84 <OneWire_Search+0x18>
			OneWireStruct->LastDiscrepancy = last_zero;
 80012a4:	9b01      	ldr	r3, [sp, #4]
 80012a6:	71a3      	strb	r3, [r4, #6]
			if (OneWireStruct->LastDiscrepancy == 0) {
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <OneWire_Search+0x344>
				OneWireStruct->LastDeviceFlag = 1;
 80012ac:	3301      	adds	r3, #1
 80012ae:	7223      	strb	r3, [r4, #8]
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 80012b0:	7a63      	ldrb	r3, [r4, #9]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d100      	bne.n	80012b8 <OneWire_Search+0x34c>
 80012b6:	e665      	b.n	8000f84 <OneWire_Search+0x18>
			search_result = 1;
 80012b8:	2001      	movs	r0, #1
 80012ba:	e667      	b.n	8000f8c <OneWire_Search+0x20>
 80012bc:	200001a0 	.word	0x200001a0

080012c0 <OneWire_First>:
	OneWireStruct->LastDeviceFlag = 0;
 80012c0:	2300      	movs	r3, #0
uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 80012c2:	b510      	push	{r4, lr}
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80012c4:	21f0      	movs	r1, #240	; 0xf0
	OneWireStruct->LastDeviceFlag = 0;
 80012c6:	7203      	strb	r3, [r0, #8]
	OneWireStruct->LastDiscrepancy = 0;
 80012c8:	80c3      	strh	r3, [r0, #6]
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80012ca:	f7ff fe4f 	bl	8000f6c <OneWire_Search>
}
 80012ce:	bd10      	pop	{r4, pc}

080012d0 <OneWire_Next>:
uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 80012d0:	b510      	push	{r4, lr}
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80012d2:	21f0      	movs	r1, #240	; 0xf0
 80012d4:	f7ff fe4a 	bl	8000f6c <OneWire_Search>
}
 80012d8:	bd10      	pop	{r4, pc}
 80012da:	46c0      	nop			; (mov r8, r8)

080012dc <OneWire_Select>:

uint8_t OneWire_GetROM(OneWire_t* OneWireStruct, uint8_t index) {
	return OneWireStruct->ROM_NO[index];
}

void OneWire_Select(OneWire_t* OneWireStruct, uint8_t* addr) {
 80012dc:	4b78      	ldr	r3, [pc, #480]	; (80014c0 <OneWire_Select+0x1e4>)
 80012de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e0:	4645      	mov	r5, r8
 80012e2:	4698      	mov	r8, r3
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80012e4:	2301      	movs	r3, #1
void OneWire_Select(OneWire_t* OneWireStruct, uint8_t* addr) {
 80012e6:	464e      	mov	r6, r9
 80012e8:	46de      	mov	lr, fp
 80012ea:	4657      	mov	r7, sl
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80012ec:	4699      	mov	r9, r3
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80012ee:	3310      	adds	r3, #16
void OneWire_Select(OneWire_t* OneWireStruct, uint8_t* addr) {
 80012f0:	b5e0      	push	{r5, r6, r7, lr}
 80012f2:	0004      	movs	r4, r0
 80012f4:	2508      	movs	r5, #8
 80012f6:	2655      	movs	r6, #85	; 0x55
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80012f8:	469b      	mov	fp, r3
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fa:	2703      	movs	r7, #3
void OneWire_Select(OneWire_t* OneWireStruct, uint8_t* addr) {
 80012fc:	b089      	sub	sp, #36	; 0x24
 80012fe:	9100      	str	r1, [sp, #0]
	if (bit) 
 8001300:	464b      	mov	r3, r9
 8001302:	4033      	ands	r3, r6
 8001304:	469a      	mov	sl, r3
 8001306:	464b      	mov	r3, r9
 8001308:	4233      	tst	r3, r6
 800130a:	d100      	bne.n	800130e <OneWire_Select+0x32>
 800130c:	e0b0      	b.n	8001470 <OneWire_Select+0x194>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 800130e:	88a3      	ldrh	r3, [r4, #4]
 8001310:	6820      	ldr	r0, [r4, #0]
 8001312:	041a      	lsls	r2, r3, #16
 8001314:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001316:	465a      	mov	r2, fp
 8001318:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 800131a:	2200      	movs	r2, #0
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800131c:	a903      	add	r1, sp, #12
	gpinit.Pull = GPIO_NOPULL;
 800131e:	4692      	mov	sl, r2
 8001320:	9205      	str	r2, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8001322:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001324:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001326:	f000 fd6d 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800132a:	4643      	mov	r3, r8
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4653      	mov	r3, sl
 8001330:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001332:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001334:	2b0a      	cmp	r3, #10
 8001336:	d9fc      	bls.n	8001332 <OneWire_Select+0x56>
	gpinit.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	469a      	mov	sl, r3
 800133c:	9304      	str	r3, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 800133e:	9305      	str	r3, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001340:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001342:	6820      	ldr	r0, [r4, #0]
 8001344:	a903      	add	r1, sp, #12
	gpinit.Pin = gp->GPIO_Pin;	
 8001346:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001348:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800134a:	f000 fd5b 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800134e:	4643      	mov	r3, r8
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4653      	mov	r3, sl
 8001354:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001356:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001358:	2b37      	cmp	r3, #55	; 0x37
 800135a:	d9fc      	bls.n	8001356 <OneWire_Select+0x7a>
	gpinit.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
	while (i--) {
 800135e:	3d01      	subs	r5, #1
	gpinit.Mode = GPIO_MODE_INPUT;
 8001360:	9304      	str	r3, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001362:	9305      	str	r3, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001364:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001366:	6820      	ldr	r0, [r4, #0]
 8001368:	a903      	add	r1, sp, #12
	while (i--) {
 800136a:	b2ed      	uxtb	r5, r5
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	9706      	str	r7, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 800136e:	9303      	str	r3, [sp, #12]
		byte >>= 1;
 8001370:	0876      	lsrs	r6, r6, #1
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001372:	f000 fd47 	bl	8001e04 <HAL_GPIO_Init>
	while (i--) {
 8001376:	2d00      	cmp	r5, #0
 8001378:	d1c2      	bne.n	8001300 <OneWire_Select+0x24>
 800137a:	9b00      	ldr	r3, [sp, #0]
 800137c:	3308      	adds	r3, #8
 800137e:	9301      	str	r3, [sp, #4]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001380:	2311      	movs	r3, #17
 8001382:	469b      	mov	fp, r3
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
	
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
 8001384:	9b00      	ldr	r3, [sp, #0]
 8001386:	2508      	movs	r5, #8
 8001388:	781e      	ldrb	r6, [r3, #0]
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800138a:	2301      	movs	r3, #1
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2703      	movs	r7, #3
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800138e:	4699      	mov	r9, r3
	if (bit) 
 8001390:	464b      	mov	r3, r9
 8001392:	4033      	ands	r3, r6
 8001394:	469a      	mov	sl, r3
 8001396:	464b      	mov	r3, r9
 8001398:	4233      	tst	r3, r6
 800139a:	d042      	beq.n	8001422 <OneWire_Select+0x146>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 800139c:	88a3      	ldrh	r3, [r4, #4]
 800139e:	6820      	ldr	r0, [r4, #0]
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80013a4:	465a      	mov	r2, fp
 80013a6:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 80013a8:	2200      	movs	r2, #0
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80013aa:	a903      	add	r1, sp, #12
	gpinit.Pull = GPIO_NOPULL;
 80013ac:	4692      	mov	sl, r2
 80013ae:	9205      	str	r2, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;
 80013b0:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b2:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80013b4:	f000 fd26 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80013b8:	4643      	mov	r3, r8
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4653      	mov	r3, sl
 80013be:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80013c0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80013c2:	2b0a      	cmp	r3, #10
 80013c4:	d9fc      	bls.n	80013c0 <OneWire_Select+0xe4>
	gpinit.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	469a      	mov	sl, r3
 80013ca:	9304      	str	r3, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 80013cc:	9305      	str	r3, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 80013ce:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80013d0:	6820      	ldr	r0, [r4, #0]
 80013d2:	a903      	add	r1, sp, #12
	gpinit.Pin = gp->GPIO_Pin;	
 80013d4:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d6:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80013d8:	f000 fd14 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80013dc:	4643      	mov	r3, r8
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4653      	mov	r3, sl
 80013e2:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80013e4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80013e6:	2b37      	cmp	r3, #55	; 0x37
 80013e8:	d9fc      	bls.n	80013e4 <OneWire_Select+0x108>
	gpinit.Mode = GPIO_MODE_INPUT;
 80013ea:	2300      	movs	r3, #0
	while (i--) {
 80013ec:	3d01      	subs	r5, #1
	gpinit.Mode = GPIO_MODE_INPUT;
 80013ee:	9304      	str	r3, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 80013f0:	9305      	str	r3, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 80013f2:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80013f4:	6820      	ldr	r0, [r4, #0]
 80013f6:	a903      	add	r1, sp, #12
	while (i--) {
 80013f8:	b2ed      	uxtb	r5, r5
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	9706      	str	r7, [sp, #24]
	gpinit.Pin = gp->GPIO_Pin;	
 80013fc:	9303      	str	r3, [sp, #12]
		byte >>= 1;
 80013fe:	0876      	lsrs	r6, r6, #1
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001400:	f000 fd00 	bl	8001e04 <HAL_GPIO_Init>
	while (i--) {
 8001404:	2d00      	cmp	r5, #0
 8001406:	d1c3      	bne.n	8001390 <OneWire_Select+0xb4>
	for (i = 0; i < 8; i++) {
 8001408:	9b00      	ldr	r3, [sp, #0]
 800140a:	9a01      	ldr	r2, [sp, #4]
 800140c:	3301      	adds	r3, #1
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4293      	cmp	r3, r2
 8001412:	d1b7      	bne.n	8001384 <OneWire_Select+0xa8>
	}
}
 8001414:	b009      	add	sp, #36	; 0x24
 8001416:	bcf0      	pop	{r4, r5, r6, r7}
 8001418:	46bb      	mov	fp, r7
 800141a:	46b2      	mov	sl, r6
 800141c:	46a9      	mov	r9, r5
 800141e:	46a0      	mov	r8, r4
 8001420:	bdf0      	pop	{r4, r5, r6, r7, pc}
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001422:	88a3      	ldrh	r3, [r4, #4]
 8001424:	6820      	ldr	r0, [r4, #0]
 8001426:	041a      	lsls	r2, r3, #16
 8001428:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 800142a:	465a      	mov	r2, fp
 800142c:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 800142e:	4652      	mov	r2, sl
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001430:	a903      	add	r1, sp, #12
	gpinit.Pull = GPIO_NOPULL;
 8001432:	9205      	str	r2, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8001434:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001436:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001438:	f000 fce4 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800143c:	4643      	mov	r3, r8
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4653      	mov	r3, sl
 8001442:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001444:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001446:	2b41      	cmp	r3, #65	; 0x41
 8001448:	d9fc      	bls.n	8001444 <OneWire_Select+0x168>
	gpinit.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	469a      	mov	sl, r3
 800144e:	9304      	str	r3, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 8001450:	9305      	str	r3, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001452:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001454:	6820      	ldr	r0, [r4, #0]
 8001456:	a903      	add	r1, sp, #12
	gpinit.Pin = gp->GPIO_Pin;	
 8001458:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800145a:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800145c:	f000 fcd2 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 8001460:	4643      	mov	r3, r8
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4653      	mov	r3, sl
 8001466:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001468:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800146a:	2b05      	cmp	r3, #5
 800146c:	d9fc      	bls.n	8001468 <OneWire_Select+0x18c>
 800146e:	e7bc      	b.n	80013ea <OneWire_Select+0x10e>
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001470:	88a3      	ldrh	r3, [r4, #4]
 8001472:	6820      	ldr	r0, [r4, #0]
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	6182      	str	r2, [r0, #24]
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001478:	465a      	mov	r2, fp
 800147a:	9204      	str	r2, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 800147c:	4652      	mov	r2, sl
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 800147e:	a903      	add	r1, sp, #12
	gpinit.Pull = GPIO_NOPULL;
 8001480:	9205      	str	r2, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8001482:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001486:	f000 fcbd 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 800148a:	4643      	mov	r3, r8
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4653      	mov	r3, sl
 8001490:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001492:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001494:	2b41      	cmp	r3, #65	; 0x41
 8001496:	d9fc      	bls.n	8001492 <OneWire_Select+0x1b6>
	gpinit.Mode = GPIO_MODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	469a      	mov	sl, r3
 800149c:	9304      	str	r3, [sp, #16]
	gpinit.Pull = GPIO_NOPULL;
 800149e:	9305      	str	r3, [sp, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 80014a0:	88a3      	ldrh	r3, [r4, #4]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80014a2:	6820      	ldr	r0, [r4, #0]
 80014a4:	a903      	add	r1, sp, #12
	gpinit.Pin = gp->GPIO_Pin;	
 80014a6:	9303      	str	r3, [sp, #12]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a8:	9706      	str	r7, [sp, #24]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80014aa:	f000 fcab 	bl	8001e04 <HAL_GPIO_Init>
	_DS18B20_TIMER.Instance->CNT = 0;
 80014ae:	4643      	mov	r3, r8
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4653      	mov	r3, sl
 80014b4:	6253      	str	r3, [r2, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 80014b6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d9fc      	bls.n	80014b6 <OneWire_Select+0x1da>
 80014bc:	e74e      	b.n	800135c <OneWire_Select+0x80>
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	200001a0 	.word	0x200001a0

080014c4 <OneWire_SelectWithPointer>:
 80014c4:	b510      	push	{r4, lr}
 80014c6:	f7ff ff09 	bl	80012dc <OneWire_Select>
 80014ca:	bd10      	pop	{r4, pc}

080014cc <OneWire_GetFullROM>:
	}	
}

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80014cc:	0002      	movs	r2, r0
 80014ce:	000b      	movs	r3, r1
 80014d0:	3209      	adds	r2, #9
 80014d2:	4313      	orrs	r3, r2
 80014d4:	075b      	lsls	r3, r3, #29
 80014d6:	d109      	bne.n	80014ec <OneWire_GetFullROM+0x20>
 80014d8:	0003      	movs	r3, r0
 80014da:	330a      	adds	r3, #10
 80014dc:	1acb      	subs	r3, r1, r3
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d904      	bls.n	80014ec <OneWire_GetFullROM+0x20>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80014e2:	6853      	ldr	r3, [r2, #4]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	600a      	str	r2, [r1, #0]
 80014e8:	604b      	str	r3, [r1, #4]
	}
}
 80014ea:	4770      	bx	lr
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80014ec:	7a43      	ldrb	r3, [r0, #9]
 80014ee:	700b      	strb	r3, [r1, #0]
 80014f0:	7a83      	ldrb	r3, [r0, #10]
 80014f2:	704b      	strb	r3, [r1, #1]
 80014f4:	7ac3      	ldrb	r3, [r0, #11]
 80014f6:	708b      	strb	r3, [r1, #2]
 80014f8:	7b03      	ldrb	r3, [r0, #12]
 80014fa:	70cb      	strb	r3, [r1, #3]
 80014fc:	7b43      	ldrb	r3, [r0, #13]
 80014fe:	710b      	strb	r3, [r1, #4]
 8001500:	7b83      	ldrb	r3, [r0, #14]
 8001502:	714b      	strb	r3, [r1, #5]
 8001504:	7bc3      	ldrb	r3, [r0, #15]
 8001506:	718b      	strb	r3, [r1, #6]
 8001508:	7c03      	ldrb	r3, [r0, #16]
 800150a:	71cb      	strb	r3, [r1, #7]
}
 800150c:	e7ed      	b.n	80014ea <OneWire_GetFullROM+0x1e>
 800150e:	46c0      	nop			; (mov r8, r8)

08001510 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t crc = 0, inbyte, i, mix;
	
	while (len--) {
 8001512:	2900      	cmp	r1, #0
 8001514:	d043      	beq.n	800159e <OneWire_CRC8+0x8e>
 8001516:	0004      	movs	r4, r0
		inbyte = *addr++;
		for (i = 8; i; i--) {
			mix = (crc ^ inbyte) & 0x01;
			crc >>= 1;
			if (mix) {
				crc ^= 0x8C;
 8001518:	2574      	movs	r5, #116	; 0x74
	uint8_t crc = 0, inbyte, i, mix;
 800151a:	2000      	movs	r0, #0
			mix = (crc ^ inbyte) & 0x01;
 800151c:	2201      	movs	r2, #1
 800151e:	1861      	adds	r1, r4, r1
				crc ^= 0x8C;
 8001520:	426d      	negs	r5, r5
	while (len--) {
 8001522:	b2ce      	uxtb	r6, r1
		inbyte = *addr++;
 8001524:	7823      	ldrb	r3, [r4, #0]
			crc >>= 1;
 8001526:	0841      	lsrs	r1, r0, #1
			mix = (crc ^ inbyte) & 0x01;
 8001528:	4058      	eors	r0, r3
			if (mix) {
 800152a:	4202      	tst	r2, r0
 800152c:	d001      	beq.n	8001532 <OneWire_CRC8+0x22>
				crc ^= 0x8C;
 800152e:	4069      	eors	r1, r5
 8001530:	b2c9      	uxtb	r1, r1
			}
			inbyte >>= 1;
 8001532:	085f      	lsrs	r7, r3, #1
			crc >>= 1;
 8001534:	0848      	lsrs	r0, r1, #1
			mix = (crc ^ inbyte) & 0x01;
 8001536:	4079      	eors	r1, r7
			if (mix) {
 8001538:	420a      	tst	r2, r1
 800153a:	d001      	beq.n	8001540 <OneWire_CRC8+0x30>
				crc ^= 0x8C;
 800153c:	4068      	eors	r0, r5
 800153e:	b2c0      	uxtb	r0, r0
			inbyte >>= 1;
 8001540:	089f      	lsrs	r7, r3, #2
			crc >>= 1;
 8001542:	0841      	lsrs	r1, r0, #1
			mix = (crc ^ inbyte) & 0x01;
 8001544:	4078      	eors	r0, r7
			if (mix) {
 8001546:	4202      	tst	r2, r0
 8001548:	d001      	beq.n	800154e <OneWire_CRC8+0x3e>
				crc ^= 0x8C;
 800154a:	4069      	eors	r1, r5
 800154c:	b2c9      	uxtb	r1, r1
			inbyte >>= 1;
 800154e:	08df      	lsrs	r7, r3, #3
			crc >>= 1;
 8001550:	0848      	lsrs	r0, r1, #1
			mix = (crc ^ inbyte) & 0x01;
 8001552:	4079      	eors	r1, r7
			if (mix) {
 8001554:	420a      	tst	r2, r1
 8001556:	d001      	beq.n	800155c <OneWire_CRC8+0x4c>
				crc ^= 0x8C;
 8001558:	4068      	eors	r0, r5
 800155a:	b2c0      	uxtb	r0, r0
			inbyte >>= 1;
 800155c:	091f      	lsrs	r7, r3, #4
			crc >>= 1;
 800155e:	0841      	lsrs	r1, r0, #1
			mix = (crc ^ inbyte) & 0x01;
 8001560:	4078      	eors	r0, r7
			if (mix) {
 8001562:	4202      	tst	r2, r0
 8001564:	d001      	beq.n	800156a <OneWire_CRC8+0x5a>
				crc ^= 0x8C;
 8001566:	4069      	eors	r1, r5
 8001568:	b2c9      	uxtb	r1, r1
			inbyte >>= 1;
 800156a:	095f      	lsrs	r7, r3, #5
			crc >>= 1;
 800156c:	0848      	lsrs	r0, r1, #1
			mix = (crc ^ inbyte) & 0x01;
 800156e:	4079      	eors	r1, r7
			if (mix) {
 8001570:	420a      	tst	r2, r1
 8001572:	d001      	beq.n	8001578 <OneWire_CRC8+0x68>
				crc ^= 0x8C;
 8001574:	4068      	eors	r0, r5
 8001576:	b2c0      	uxtb	r0, r0
			inbyte >>= 1;
 8001578:	099f      	lsrs	r7, r3, #6
			crc >>= 1;
 800157a:	0841      	lsrs	r1, r0, #1
			mix = (crc ^ inbyte) & 0x01;
 800157c:	4078      	eors	r0, r7
			if (mix) {
 800157e:	4202      	tst	r2, r0
 8001580:	d001      	beq.n	8001586 <OneWire_CRC8+0x76>
				crc ^= 0x8C;
 8001582:	4069      	eors	r1, r5
 8001584:	b2c9      	uxtb	r1, r1
			inbyte >>= 1;
 8001586:	09db      	lsrs	r3, r3, #7
			mix = (crc ^ inbyte) & 0x01;
 8001588:	404b      	eors	r3, r1
			crc >>= 1;
 800158a:	0848      	lsrs	r0, r1, #1
			if (mix) {
 800158c:	421a      	tst	r2, r3
 800158e:	d001      	beq.n	8001594 <OneWire_CRC8+0x84>
				crc ^= 0x8C;
 8001590:	4068      	eors	r0, r5
 8001592:	b2c0      	uxtb	r0, r0
	while (len--) {
 8001594:	3401      	adds	r4, #1
 8001596:	b2e3      	uxtb	r3, r4
 8001598:	429e      	cmp	r6, r3
 800159a:	d1c3      	bne.n	8001524 <OneWire_CRC8+0x14>
		}
	}
	
	/* Return calculated CRC */
	return crc;
}
 800159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t crc = 0, inbyte, i, mix;
 800159e:	2000      	movs	r0, #0
 80015a0:	e7fc      	b.n	800159c <OneWire_CRC8+0x8c>
 80015a2:	46c0      	nop			; (mov r8, r8)

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b500      	push	{lr}
 80015a6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a8:	222c      	movs	r2, #44	; 0x2c
 80015aa:	2100      	movs	r1, #0
 80015ac:	a809      	add	r0, sp, #36	; 0x24
 80015ae:	f001 fc02 	bl	8002db6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b2:	2210      	movs	r2, #16
 80015b4:	2100      	movs	r1, #0
 80015b6:	4668      	mov	r0, sp
 80015b8:	f001 fbfd 	bl	8002db6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015bc:	2210      	movs	r2, #16
 80015be:	2100      	movs	r1, #0
 80015c0:	a804      	add	r0, sp, #16
 80015c2:	f001 fbf8 	bl	8002db6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c6:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c8:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ca:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015cc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80015ce:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d0:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80015d2:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d4:	320f      	adds	r2, #15
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d8:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80015da:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f000 fde2 	bl	80021a4 <HAL_RCC_OscConfig>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e8:	2207      	movs	r2, #7
 80015ea:	2302      	movs	r3, #2
 80015ec:	9200      	str	r2, [sp, #0]
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015f4:	2101      	movs	r1, #1
 80015f6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f8:	9202      	str	r2, [sp, #8]
 80015fa:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015fc:	f001 f82c 	bl	8002658 <HAL_RCC_ClockConfig>
 8001600:	2800      	cmp	r0, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0x64>
 8001604:	b672      	cpsid	i
  while (1)
 8001606:	e7fe      	b.n	8001606 <SystemClock_Config+0x62>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001608:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800160a:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160c:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800160e:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001610:	f001 f8e0 	bl	80027d4 <HAL_RCCEx_PeriphCLKConfig>
 8001614:	2800      	cmp	r0, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0x78>
 8001618:	b672      	cpsid	i
  while (1)
 800161a:	e7fe      	b.n	800161a <SystemClock_Config+0x76>
}
 800161c:	b015      	add	sp, #84	; 0x54
 800161e:	bd00      	pop	{pc}

08001620 <main>:
{
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	46ce      	mov	lr, r9
 8001624:	4647      	mov	r7, r8
 8001626:	b580      	push	{r7, lr}
 8001628:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 800162a:	f000 fb2b 	bl	8001c84 <HAL_Init>
  SystemClock_Config();
 800162e:	f7ff ffb9 	bl	80015a4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	2214      	movs	r2, #20
 8001634:	2100      	movs	r1, #0
 8001636:	a808      	add	r0, sp, #32
 8001638:	f001 fbbd 	bl	8002db6 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	4e7e      	ldr	r6, [pc, #504]	; (8001838 <main+0x218>)
 8001640:	0289      	lsls	r1, r1, #10
 8001642:	6972      	ldr	r2, [r6, #20]
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8001644:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	430a      	orrs	r2, r1
 8001648:	6172      	str	r2, [r6, #20]
 800164a:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 800164c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	400b      	ands	r3, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	9303      	str	r3, [sp, #12]
 8001654:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	6972      	ldr	r2, [r6, #20]
 8001658:	02c9      	lsls	r1, r1, #11
 800165a:	430a      	orrs	r2, r1
 800165c:	6172      	str	r2, [r6, #20]
 800165e:	6973      	ldr	r3, [r6, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2700      	movs	r7, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	400b      	ands	r3, r1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001664:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	9304      	str	r3, [sp, #16]
 8001668:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	6972      	ldr	r2, [r6, #20]
 800166c:	0309      	lsls	r1, r1, #12
 800166e:	430a      	orrs	r2, r1
 8001670:	6172      	str	r2, [r6, #20]
 8001672:	6973      	ldr	r3, [r6, #20]
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	400b      	ands	r3, r1
 8001678:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 800167a:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 800167e:	f000 fce3 	bl	8002048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001682:	21c0      	movs	r1, #192	; 0xc0
 8001684:	2200      	movs	r2, #0
 8001686:	486d      	ldr	r0, [pc, #436]	; (800183c <main+0x21c>)
 8001688:	0149      	lsls	r1, r1, #5
 800168a:	f000 fcdd 	bl	8002048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800168e:	23c0      	movs	r3, #192	; 0xc0
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	0019      	movs	r1, r3
 8001694:	2200      	movs	r2, #0
 8001696:	486a      	ldr	r0, [pc, #424]	; (8001840 <main+0x220>)
 8001698:	4699      	mov	r9, r3
 800169a:	f000 fcd5 	bl	8002048 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800169e:	2390      	movs	r3, #144	; 0x90
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016a0:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = B1_Pin;
 80016a2:	2201      	movs	r2, #1
 80016a4:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016a6:	a908      	add	r1, sp, #32
 80016a8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = B1_Pin;
 80016aa:	9208      	str	r2, [sp, #32]
 80016ac:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f000 fba8 	bl	8001e04 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	2388      	movs	r3, #136	; 0x88
 80016b8:	00d2      	lsls	r2, r2, #3
 80016ba:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80016bc:	485f      	ldr	r0, [pc, #380]	; (800183c <main+0x21c>)
 80016be:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80016c0:	9208      	str	r2, [sp, #32]
 80016c2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f000 fb9d 	bl	8001e04 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 80016ca:	22c0      	movs	r2, #192	; 0xc0
 80016cc:	2301      	movs	r3, #1
 80016ce:	2400      	movs	r4, #0
 80016d0:	2500      	movs	r5, #0
 80016d2:	0152      	lsls	r2, r2, #5
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	4859      	ldr	r0, [pc, #356]	; (800183c <main+0x21c>)
 80016d6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin;
 80016d8:	9208      	str	r2, [sp, #32]
 80016da:	9309      	str	r3, [sp, #36]	; 0x24
 80016dc:	940a      	str	r4, [sp, #40]	; 0x28
 80016de:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f000 fb90 	bl	8001e04 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80016e4:	22c0      	movs	r2, #192	; 0xc0
 80016e6:	2301      	movs	r3, #1
 80016e8:	0092      	lsls	r2, r2, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	4855      	ldr	r0, [pc, #340]	; (8001840 <main+0x220>)
 80016ec:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80016ee:	9208      	str	r2, [sp, #32]
 80016f0:	9309      	str	r3, [sp, #36]	; 0x24
 80016f2:	940a      	str	r4, [sp, #40]	; 0x28
 80016f4:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f6:	f000 fb85 	bl	8001e04 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016fa:	2201      	movs	r2, #1
 80016fc:	6973      	ldr	r3, [r6, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80016fe:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001700:	4313      	orrs	r3, r2
 8001702:	6173      	str	r3, [r6, #20]
 8001704:	6973      	ldr	r3, [r6, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001706:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001708:	4013      	ands	r3, r2
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	4690      	mov	r8, r2
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001710:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001712:	f000 faeb 	bl	8001cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001716:	200b      	movs	r0, #11
 8001718:	f000 fb1a 	bl	8001d50 <HAL_NVIC_EnableIRQ>
  hspi2.Instance = SPI2;
 800171c:	4849      	ldr	r0, [pc, #292]	; (8001844 <main+0x224>)
 800171e:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <main+0x228>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001720:	6087      	str	r7, [r0, #8]
  hspi2.Instance = SPI2;
 8001722:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001724:	2382      	movs	r3, #130	; 0x82
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	6043      	str	r3, [r0, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800172a:	464b      	mov	r3, r9
 800172c:	60c3      	str	r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800172e:	3b01      	subs	r3, #1
 8001730:	3bff      	subs	r3, #255	; 0xff
 8001732:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001734:	3bd9      	subs	r3, #217	; 0xd9
 8001736:	3bff      	subs	r3, #255	; 0xff
 8001738:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 800173a:	3b21      	subs	r3, #33	; 0x21
 800173c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800173e:	3301      	adds	r3, #1
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001740:	6107      	str	r7, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001742:	6147      	str	r7, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001744:	6207      	str	r7, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001746:	6247      	str	r7, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001748:	6287      	str	r7, [r0, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800174a:	6307      	str	r7, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800174c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800174e:	f001 f8df 	bl	8002910 <HAL_SPI_Init>
 8001752:	2800      	cmp	r0, #0
 8001754:	d001      	beq.n	800175a <main+0x13a>
 8001756:	b672      	cpsid	i
  while (1)
 8001758:	e7fe      	b.n	8001758 <main+0x138>
  hi2c1.Instance = I2C1;
 800175a:	4e3c      	ldr	r6, [pc, #240]	; (800184c <main+0x22c>)
 800175c:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <main+0x230>)
  hi2c1.Init.OwnAddress1 = 0;
 800175e:	60b0      	str	r0, [r6, #8]
  hi2c1.Instance = I2C1;
 8001760:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001762:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <main+0x234>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001764:	6130      	str	r0, [r6, #16]
  hi2c1.Init.Timing = 0x2000090E;
 8001766:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001768:	4643      	mov	r3, r8
  hi2c1.Init.OwnAddress2 = 0;
 800176a:	6170      	str	r0, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800176c:	61b0      	str	r0, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176e:	61f0      	str	r0, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	6230      	str	r0, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001772:	0030      	movs	r0, r6
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001774:	60f3      	str	r3, [r6, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001776:	f000 fc6d 	bl	8002054 <HAL_I2C_Init>
 800177a:	1e01      	subs	r1, r0, #0
 800177c:	d001      	beq.n	8001782 <main+0x162>
 800177e:	b672      	cpsid	i
  while (1)
 8001780:	e7fe      	b.n	8001780 <main+0x160>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001782:	0030      	movs	r0, r6
 8001784:	f000 fcc0 	bl	8002108 <HAL_I2CEx_ConfigAnalogFilter>
 8001788:	1e01      	subs	r1, r0, #0
 800178a:	d001      	beq.n	8001790 <main+0x170>
 800178c:	b672      	cpsid	i
  while (1)
 800178e:	e7fe      	b.n	800178e <main+0x16e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001790:	0030      	movs	r0, r6
 8001792:	f000 fce1 	bl	8002158 <HAL_I2CEx_ConfigDigitalFilter>
 8001796:	1e07      	subs	r7, r0, #0
 8001798:	d11a      	bne.n	80017d0 <main+0x1b0>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	0001      	movs	r1, r0
 800179c:	2210      	movs	r2, #16
 800179e:	a808      	add	r0, sp, #32
 80017a0:	f001 fb09 	bl	8002db6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a4:	2208      	movs	r2, #8
 80017a6:	0039      	movs	r1, r7
 80017a8:	a806      	add	r0, sp, #24
 80017aa:	f001 fb04 	bl	8002db6 <memset>
  htim3.Instance = TIM3;
 80017ae:	4e2a      	ldr	r6, [pc, #168]	; (8001858 <main+0x238>)
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <main+0x23c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017b2:	0030      	movs	r0, r6
  htim3.Instance = TIM3;
 80017b4:	6033      	str	r3, [r6, #0]
  htim3.Init.Prescaler = 47;
 80017b6:	232f      	movs	r3, #47	; 0x2f
 80017b8:	6073      	str	r3, [r6, #4]
  htim3.Init.Period = 0xFFFF;
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <main+0x240>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	60b7      	str	r7, [r6, #8]
  htim3.Init.Period = 0xFFFF;
 80017be:	60f3      	str	r3, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	6137      	str	r7, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	61b7      	str	r7, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c4:	f001 f944 	bl	8002a50 <HAL_TIM_Base_Init>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d003      	beq.n	80017d4 <main+0x1b4>
 80017cc:	b672      	cpsid	i
  while (1)
 80017ce:	e7fe      	b.n	80017ce <main+0x1ae>
 80017d0:	b672      	cpsid	i
 80017d2:	e7fe      	b.n	80017d2 <main+0x1b2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017d6:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017da:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017dc:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017de:	f001 f9d3 	bl	8002b88 <HAL_TIM_ConfigClockSource>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d001      	beq.n	80017ea <main+0x1ca>
 80017e6:	b672      	cpsid	i
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <main+0x1c8>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ea:	0030      	movs	r0, r6
 80017ec:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ee:	9406      	str	r4, [sp, #24]
 80017f0:	9507      	str	r5, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017f2:	f001 fa85 	bl	8002d00 <HAL_TIMEx_MasterConfigSynchronization>
 80017f6:	1e04      	subs	r4, r0, #0
 80017f8:	d001      	beq.n	80017fe <main+0x1de>
 80017fa:	b672      	cpsid	i
  while (1)
 80017fc:	e7fe      	b.n	80017fc <main+0x1dc>
    date_time.milliseconds = 0;
 80017fe:	466b      	mov	r3, sp
    date_time.seconds = 0;
 8001800:	2226      	movs	r2, #38	; 0x26
    date_time.milliseconds = 0;
 8001802:	8518      	strh	r0, [r3, #40]	; 0x28
    date_time.seconds = 0;
 8001804:	189b      	adds	r3, r3, r2
 8001806:	7018      	strb	r0, [r3, #0]
    date_time.hours = 0;
 8001808:	466b      	mov	r3, sp
    rtc_set_time(date_time);
 800180a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    date_time.hours = 0;
 800180c:	8498      	strh	r0, [r3, #36]	; 0x24
    rtc_set_time(date_time);
 800180e:	801a      	strh	r2, [r3, #0]
 8001810:	9808      	ldr	r0, [sp, #32]
 8001812:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001818:	f000 f920 	bl	8001a5c <rtc_set_time>
    Ds18b20_Init();
 800181c:	f7ff f94c 	bl	8000ab8 <Ds18b20_Init>
      if (HAL_GetTick() > dsb_timeout){
 8001820:	f000 fa4c 	bl	8001cbc <HAL_GetTick>
 8001824:	42a0      	cmp	r0, r4
 8001826:	d9fb      	bls.n	8001820 <main+0x200>
        dsb_timeout = HAL_GetTick()+ 1000;
 8001828:	f000 fa48 	bl	8001cbc <HAL_GetTick>
 800182c:	23fa      	movs	r3, #250	; 0xfa
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	18c4      	adds	r4, r0, r3
        Ds18b20_ManualConvert();
 8001832:	f7ff f9bb 	bl	8000bac <Ds18b20_ManualConvert>
 8001836:	e7f3      	b.n	8001820 <main+0x200>
 8001838:	40021000 	.word	0x40021000
 800183c:	48000400 	.word	0x48000400
 8001840:	48000800 	.word	0x48000800
 8001844:	2000013c 	.word	0x2000013c
 8001848:	40003800 	.word	0x40003800
 800184c:	200000f0 	.word	0x200000f0
 8001850:	40005400 	.word	0x40005400
 8001854:	2000090e 	.word	0x2000090e
 8001858:	200001a0 	.word	0x200001a0
 800185c:	40000400 	.word	0x40000400
 8001860:	0000ffff 	.word	0x0000ffff

08001864 <Error_Handler>:
 8001864:	b672      	cpsid	i
  while (1)
 8001866:	e7fe      	b.n	8001866 <Error_Handler+0x2>

08001868 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001868:	2201      	movs	r2, #1
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_MspInit+0x2c>)
{
 800186c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	6999      	ldr	r1, [r3, #24]
 8001870:	4311      	orrs	r1, r2
 8001872:	6199      	str	r1, [r3, #24]
 8001874:	6999      	ldr	r1, [r3, #24]
 8001876:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	69da      	ldr	r2, [r3, #28]
 8001880:	0549      	lsls	r1, r1, #21
 8001882:	430a      	orrs	r2, r1
 8001884:	61da      	str	r2, [r3, #28]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	400b      	ands	r3, r1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	b002      	add	sp, #8
 8001890:	4770      	bx	lr
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001898:	b510      	push	{r4, lr}
 800189a:	0004      	movs	r4, r0
 800189c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	2214      	movs	r2, #20
 80018a0:	2100      	movs	r1, #0
 80018a2:	a802      	add	r0, sp, #8
 80018a4:	f001 fa87 	bl	8002db6 <memset>
  if(hi2c->Instance==I2C1)
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_I2C_MspInit+0x5c>)
 80018aa:	6822      	ldr	r2, [r4, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018b0:	b008      	add	sp, #32
 80018b2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	4c10      	ldr	r4, [pc, #64]	; (80018f8 <HAL_I2C_MspInit+0x60>)
 80018b8:	02c9      	lsls	r1, r1, #11
 80018ba:	6962      	ldr	r2, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	480f      	ldr	r0, [pc, #60]	; (80018fc <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	430a      	orrs	r2, r1
 80018c0:	6162      	str	r2, [r4, #20]
 80018c2:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c4:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	400b      	ands	r3, r1
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018cc:	2312      	movs	r3, #18
 80018ce:	9202      	str	r2, [sp, #8]
 80018d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80018d8:	3b02      	subs	r3, #2
 80018da:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f000 fa92 	bl	8001e04 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	69e2      	ldr	r2, [r4, #28]
 80018e4:	0389      	lsls	r1, r1, #14
 80018e6:	430a      	orrs	r2, r1
 80018e8:	61e2      	str	r2, [r4, #28]
 80018ea:	69e3      	ldr	r3, [r4, #28]
 80018ec:	400b      	ands	r3, r1
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	9b01      	ldr	r3, [sp, #4]
}
 80018f2:	e7dd      	b.n	80018b0 <HAL_I2C_MspInit+0x18>
 80018f4:	40005400 	.word	0x40005400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48000400 	.word	0x48000400

08001900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001900:	b530      	push	{r4, r5, lr}
 8001902:	0004      	movs	r4, r0
 8001904:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	2214      	movs	r2, #20
 8001908:	2100      	movs	r1, #0
 800190a:	a802      	add	r0, sp, #8
 800190c:	f001 fa53 	bl	8002db6 <memset>
  if(hspi->Instance==SPI2)
 8001910:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <HAL_SPI_MspInit+0xb4>)
 8001912:	6822      	ldr	r2, [r4, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001918:	b009      	add	sp, #36	; 0x24
 800191a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800191c:	2080      	movs	r0, #128	; 0x80
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_SPI_MspInit+0xb8>)
 8001920:	01c0      	lsls	r0, r0, #7
 8001922:	69d9      	ldr	r1, [r3, #28]
 8001924:	4301      	orrs	r1, r0
 8001926:	61d9      	str	r1, [r3, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI2_CLK_ENABLE();
 800192a:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_SPI2_CLK_ENABLE();
 800192e:	4002      	ands	r2, r0
 8001930:	9200      	str	r2, [sp, #0]
 8001932:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	4821      	ldr	r0, [pc, #132]	; (80019bc <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001938:	430a      	orrs	r2, r1
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800193e:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	400b      	ands	r3, r1
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001946:	2302      	movs	r3, #2
 8001948:	0212      	lsls	r2, r2, #8
 800194a:	9202      	str	r2, [sp, #8]
 800194c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001952:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f000 fa56 	bl	8001e04 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001958:	4d19      	ldr	r5, [pc, #100]	; (80019c0 <HAL_SPI_MspInit+0xc0>)
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_SPI_MspInit+0xc4>)
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800195c:	2280      	movs	r2, #128	; 0x80
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800195e:	602b      	str	r3, [r5, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001960:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001962:	0028      	movs	r0, r5
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001964:	606b      	str	r3, [r5, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001966:	60ab      	str	r3, [r5, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001968:	60ea      	str	r2, [r5, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800196a:	612b      	str	r3, [r5, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800196c:	616b      	str	r3, [r5, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800196e:	61ab      	str	r3, [r5, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001970:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001972:	f000 fa13 	bl	8001d9c <HAL_DMA_Init>
 8001976:	2800      	cmp	r0, #0
 8001978:	d116      	bne.n	80019a8 <HAL_SPI_MspInit+0xa8>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_SPI_MspInit+0xc8>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800197c:	65a5      	str	r5, [r4, #88]	; 0x58
 800197e:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001980:	4d12      	ldr	r5, [pc, #72]	; (80019cc <HAL_SPI_MspInit+0xcc>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001982:	2280      	movs	r2, #128	; 0x80
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001984:	602b      	str	r3, [r5, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001986:	2310      	movs	r3, #16
 8001988:	606b      	str	r3, [r5, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198a:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800198c:	0028      	movs	r0, r5
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198e:	60ab      	str	r3, [r5, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001990:	60ea      	str	r2, [r5, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001992:	612b      	str	r3, [r5, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001994:	616b      	str	r3, [r5, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001996:	61ab      	str	r3, [r5, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001998:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800199a:	f000 f9ff 	bl	8001d9c <HAL_DMA_Init>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d105      	bne.n	80019ae <HAL_SPI_MspInit+0xae>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80019a2:	6565      	str	r5, [r4, #84]	; 0x54
 80019a4:	626c      	str	r4, [r5, #36]	; 0x24
}
 80019a6:	e7b7      	b.n	8001918 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 80019a8:	f7ff ff5c 	bl	8001864 <Error_Handler>
 80019ac:	e7e5      	b.n	800197a <HAL_SPI_MspInit+0x7a>
      Error_Handler();
 80019ae:	f7ff ff59 	bl	8001864 <Error_Handler>
 80019b2:	e7f6      	b.n	80019a2 <HAL_SPI_MspInit+0xa2>
 80019b4:	40003800 	.word	0x40003800
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48000400 	.word	0x48000400
 80019c0:	20000068 	.word	0x20000068
 80019c4:	40020044 	.word	0x40020044
 80019c8:	40020058 	.word	0x40020058
 80019cc:	200000ac 	.word	0x200000ac

080019d0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_TIM_Base_MspInit+0x24>)
 80019d2:	6802      	ldr	r2, [r0, #0]
{
 80019d4:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_TIM_Base_MspInit+0xe>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019da:	b002      	add	sp, #8
 80019dc:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019de:	2302      	movs	r3, #2
 80019e0:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <HAL_TIM_Base_MspInit+0x28>)
 80019e2:	69d1      	ldr	r1, [r2, #28]
 80019e4:	4319      	orrs	r1, r3
 80019e6:	61d1      	str	r1, [r2, #28]
 80019e8:	69d2      	ldr	r2, [r2, #28]
 80019ea:	4013      	ands	r3, r2
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	9b01      	ldr	r3, [sp, #4]
}
 80019f0:	e7f3      	b.n	80019da <HAL_TIM_Base_MspInit+0xa>
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	40000400 	.word	0x40000400
 80019f8:	40021000 	.word	0x40021000

080019fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <NMI_Handler>
 80019fe:	46c0      	nop			; (mov r8, r8)

08001a00 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <HardFault_Handler>
 8001a02:	46c0      	nop			; (mov r8, r8)

08001a04 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a04:	4770      	bx	lr
 8001a06:	46c0      	nop			; (mov r8, r8)

08001a08 <PendSV_Handler>:
 8001a08:	4770      	bx	lr
 8001a0a:	46c0      	nop			; (mov r8, r8)

08001a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0e:	f000 f949 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
}
 8001a12:	bd10      	pop	{r4, pc}

08001a14 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a14:	4770      	bx	lr
 8001a16:	46c0      	nop			; (mov r8, r8)

08001a18 <rtc_init_mock>:


#ifdef RTC_MOCK
void rtc_init_mock(void){

}
 8001a18:	4770      	bx	lr
 8001a1a:	46c0      	nop			; (mov r8, r8)

08001a1c <rtc_set_time_mock>:
void rtc_set_time_mock(date_time_t date_time){
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	b510      	push	{r4, lr}
 8001a20:	9002      	str	r0, [sp, #8]
 8001a22:	9103      	str	r1, [sp, #12]
 8001a24:	9204      	str	r2, [sp, #16]
	memcpy(&date_time_mock,&date_time,sizeof(date_time_t));
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <rtc_set_time_mock+0x20>)
 8001a28:	2212      	movs	r2, #18
 8001a2a:	a902      	add	r1, sp, #8
void rtc_set_time_mock(date_time_t date_time){
 8001a2c:	9305      	str	r3, [sp, #20]
	memcpy(&date_time_mock,&date_time,sizeof(date_time_t));
 8001a2e:	f001 f9b9 	bl	8002da4 <memcpy>
}
 8001a32:	bc10      	pop	{r4}
 8001a34:	bc08      	pop	{r3}
 8001a36:	b004      	add	sp, #16
 8001a38:	4718      	bx	r3
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	200001e8 	.word	0x200001e8

08001a40 <rtc_get_time_mock>:
void rtc_get_time_mock(date_time_t *date_time){
	date_time_mock.seconds++;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <rtc_get_time_mock+0x18>)
 8001a42:	799a      	ldrb	r2, [r3, #6]
 8001a44:	3201      	adds	r2, #1
 8001a46:	719a      	strb	r2, [r3, #6]
	date_time_mock.minutes++;
 8001a48:	795a      	ldrb	r2, [r3, #5]
 8001a4a:	3201      	adds	r2, #1
 8001a4c:	715a      	strb	r2, [r3, #5]
	date_time_mock.hours++;
 8001a4e:	791a      	ldrb	r2, [r3, #4]
 8001a50:	3201      	adds	r2, #1
 8001a52:	711a      	strb	r2, [r3, #4]
	memcpy(&date_time,&date_time_mock,sizeof(date_time_t));
}
 8001a54:	4770      	bx	lr
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	200001e8 	.word	0x200001e8

08001a5c <rtc_set_time>:
void rtc_set_time(date_time_t date_time){
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a60:	b083      	sub	sp, #12
 8001a62:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a64:	001c      	movs	r4, r3
	rtc_drv->set_time(date_time);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <rtc_set_time+0x34>)
void rtc_set_time(date_time_t date_time){
 8001a68:	920a      	str	r2, [sp, #40]	; 0x28
	rtc_drv->set_time(date_time);
 8001a6a:	681b      	ldr	r3, [r3, #0]
void rtc_set_time(date_time_t date_time){
 8001a6c:	0015      	movs	r5, r2
	rtc_drv->set_time(date_time);
 8001a6e:	469c      	mov	ip, r3
 8001a70:	466b      	mov	r3, sp
 8001a72:	aa08      	add	r2, sp, #32
 8001a74:	8a12      	ldrh	r2, [r2, #16]
void rtc_set_time(date_time_t date_time){
 8001a76:	9008      	str	r0, [sp, #32]
 8001a78:	9109      	str	r1, [sp, #36]	; 0x24
	rtc_drv->set_time(date_time);
 8001a7a:	801a      	strh	r2, [r3, #0]
 8001a7c:	0023      	movs	r3, r4
 8001a7e:	4664      	mov	r4, ip
 8001a80:	002a      	movs	r2, r5
 8001a82:	6864      	ldr	r4, [r4, #4]
 8001a84:	47a0      	blx	r4
}
 8001a86:	b003      	add	sp, #12
 8001a88:	bcf0      	pop	{r4, r5, r6, r7}
 8001a8a:	bc08      	pop	{r3}
 8001a8c:	b004      	add	sp, #16
 8001a8e:	4718      	bx	r3
 8001a90:	20000014 	.word	0x20000014

08001a94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9a:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <LoopForever+0xe>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab0:	4c0b      	ldr	r4, [pc, #44]	; (8001ae0 <LoopForever+0x16>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001abe:	f7ff ffa9 	bl	8001a14 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001ac2:	f001 f94b 	bl	8002d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ac6:	f7ff fdab 	bl	8001620 <main>

08001aca <LoopForever>:

LoopForever:
    b LoopForever
 8001aca:	e7fe      	b.n	8001aca <LoopForever>
  ldr   r0, =_estack
 8001acc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001ad8:	08002e60 	.word	0x08002e60
  ldr r2, =_sbss
 8001adc:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001ae0:	20000204 	.word	0x20000204

08001ae4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_IRQHandler>
	...

08001ae8 <LCD_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void LCD_IO_Delay(uint32_t c)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  while(c--);
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	1e5a      	subs	r2, r3, #1
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1fa      	bne.n	8001af2 <LCD_IO_Delay+0xa>
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)

08001b08 <DMA1_Channel4_5_IRQHandler>:
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8001b08:	2280      	movs	r2, #128	; 0x80
{
 8001b0a:	b530      	push	{r4, r5, lr}
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8001b0c:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <DMA1_Channel4_5_IRQHandler+0x10c>)
 8001b0e:	0292      	lsls	r2, r2, #10
 8001b10:	6819      	ldr	r1, [r3, #0]
{
 8001b12:	b083      	sub	sp, #12
  if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_TCIF(LCD_DMA_TX))
 8001b14:	4211      	tst	r1, r2
 8001b16:	d156      	bne.n	8001bc6 <DMA1_Channel4_5_IRQHandler+0xbe>
  else if(DMAX(LCD_DMA_TX)->ISR & DMAX_ISR_GIF(LCD_DMA_TX))
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	6819      	ldr	r1, [r3, #0]
 8001b1c:	0252      	lsls	r2, r2, #9
 8001b1e:	4211      	tst	r1, r2
 8001b20:	d10d      	bne.n	8001b3e <DMA1_Channel4_5_IRQHandler+0x36>
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <DMA1_Channel4_5_IRQHandler+0x10c>)
 8001b26:	0192      	lsls	r2, r2, #6
 8001b28:	6819      	ldr	r1, [r3, #0]
 8001b2a:	4211      	tst	r1, r2
 8001b2c:	d10e      	bne.n	8001b4c <DMA1_Channel4_5_IRQHandler+0x44>
  else if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_GIF(LCD_DMA_RX))
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	0152      	lsls	r2, r2, #5
 8001b34:	4211      	tst	r1, r2
 8001b36:	d000      	beq.n	8001b3a <DMA1_Channel4_5_IRQHandler+0x32>
    DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_RX);
 8001b38:	605a      	str	r2, [r3, #4]
}
 8001b3a:	b003      	add	sp, #12
 8001b3c:	bd30      	pop	{r4, r5, pc}
    DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CGIF(LCD_DMA_TX);
 8001b3e:	605a      	str	r2, [r3, #4]
  if(DMAX(LCD_DMA_RX)->ISR & DMAX_ISR_TCIF(LCD_DMA_RX))
 8001b40:	2280      	movs	r2, #128	; 0x80
 8001b42:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <DMA1_Channel4_5_IRQHandler+0x10c>)
 8001b44:	0192      	lsls	r2, r2, #6
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	4211      	tst	r1, r2
 8001b4a:	d0f0      	beq.n	8001b2e <DMA1_Channel4_5_IRQHandler+0x26>
  DMAX(LCD_DMA_RX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_RX);
 8001b4c:	605a      	str	r2, [r3, #4]
  SPIX->CR2 &= ~SPI_CR2_RXDMAEN; /* SPI DMA tilt */
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4931      	ldr	r1, [pc, #196]	; (8001c18 <DMA1_Channel4_5_IRQHandler+0x110>)
 8001b52:	684b      	ldr	r3, [r1, #4]
 8001b54:	4393      	bics	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
  while(SPIX->SR & SPI_SR_RXNE)
 8001b58:	688b      	ldr	r3, [r1, #8]
 8001b5a:	421a      	tst	r2, r3
 8001b5c:	d008      	beq.n	8001b70 <DMA1_Channel4_5_IRQHandler+0x68>
 8001b5e:	466b      	mov	r3, sp
 8001b60:	2001      	movs	r0, #1
    d8 = *(uint8_t *)&SPIX->DR;
 8001b62:	4c2e      	ldr	r4, [pc, #184]	; (8001c1c <DMA1_Channel4_5_IRQHandler+0x114>)
 8001b64:	3307      	adds	r3, #7
 8001b66:	7822      	ldrb	r2, [r4, #0]
 8001b68:	701a      	strb	r2, [r3, #0]
  while(SPIX->SR & SPI_SR_RXNE)
 8001b6a:	688a      	ldr	r2, [r1, #8]
 8001b6c:	4210      	tst	r0, r2
 8001b6e:	d1fa      	bne.n	8001b66 <DMA1_Channel4_5_IRQHandler+0x5e>
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8001b70:	2240      	movs	r2, #64	; 0x40
 8001b72:	4c29      	ldr	r4, [pc, #164]	; (8001c18 <DMA1_Channel4_5_IRQHandler+0x110>)
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8001b74:	2001      	movs	r0, #1
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	4393      	bics	r3, r2
 8001b7a:	6023      	str	r3, [r4, #0]
  SPIX->CR1 = (SPIX->CR1 & ~SPI_CR1_BR) | ((LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIOE);
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	4a28      	ldr	r2, [pc, #160]	; (8001c20 <DMA1_Channel4_5_IRQHandler+0x118>)
 8001b80:	401a      	ands	r2, r3
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <DMA1_Channel4_5_IRQHandler+0x11c>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	6023      	str	r3, [r4, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_READ);
 8001b88:	f7ff ffae 	bl	8001ae8 <LCD_IO_Delay>
  while(SPIX->SR & SPI_SR_RXNE)
 8001b8c:	68a3      	ldr	r3, [r4, #8]
 8001b8e:	07db      	lsls	r3, r3, #31
 8001b90:	d508      	bpl.n	8001ba4 <DMA1_Channel4_5_IRQHandler+0x9c>
 8001b92:	466b      	mov	r3, sp
 8001b94:	2101      	movs	r1, #1
    d8 = *(uint8_t *)&SPIX->DR;
 8001b96:	4821      	ldr	r0, [pc, #132]	; (8001c1c <DMA1_Channel4_5_IRQHandler+0x114>)
 8001b98:	3307      	adds	r3, #7
 8001b9a:	7802      	ldrb	r2, [r0, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
  while(SPIX->SR & SPI_SR_RXNE)
 8001b9e:	68a2      	ldr	r2, [r4, #8]
 8001ba0:	4211      	tst	r1, r2
 8001ba2:	d1fa      	bne.n	8001b9a <DMA1_Channel4_5_IRQHandler+0x92>
  SPIX->CR1 |= SPI_CR1_SPE;
 8001ba4:	2140      	movs	r1, #64	; 0x40
 8001ba6:	4a1c      	ldr	r2, [pc, #112]	; (8001c18 <DMA1_Channel4_5_IRQHandler+0x110>)
 8001ba8:	6813      	ldr	r3, [r2, #0]
 8001baa:	430b      	orrs	r3, r1
 8001bac:	6013      	str	r3, [r2, #0]
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8001bae:	2300      	movs	r3, #0
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001bb0:	2201      	movs	r2, #1
  DMAX_CHANNEL(LCD_DMA_RX)->CCR = 0;
 8001bb2:	491d      	ldr	r1, [pc, #116]	; (8001c28 <DMA1_Channel4_5_IRQHandler+0x120>)
 8001bb4:	600b      	str	r3, [r1, #0]
  while(DMAX_CHANNEL(LCD_DMA_RX)->CCR & DMA_CCR_EN);
 8001bb6:	0010      	movs	r0, r2
 8001bb8:	680b      	ldr	r3, [r1, #0]
 8001bba:	4018      	ands	r0, r3
 8001bbc:	421a      	tst	r2, r3
 8001bbe:	d1fa      	bne.n	8001bb6 <DMA1_Channel4_5_IRQHandler+0xae>
  LCD_IO_DmaTransferStatus = 0;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <DMA1_Channel4_5_IRQHandler+0x124>)
 8001bc2:	6018      	str	r0, [r3, #0]
}
 8001bc4:	e7b9      	b.n	8001b3a <DMA1_Channel4_5_IRQHandler+0x32>
  DMAX(LCD_DMA_TX)->IFCR = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 8001bc6:	605a      	str	r2, [r3, #4]
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8001bc8:	2300      	movs	r3, #0
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8001bca:	2101      	movs	r1, #1
  DMAX_CHANNEL(LCD_DMA_TX)->CCR = 0;
 8001bcc:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <DMA1_Channel4_5_IRQHandler+0x128>)
 8001bce:	6013      	str	r3, [r2, #0]
  while(DMAX_CHANNEL(LCD_DMA_TX)->CCR & DMA_CCR_EN);
 8001bd0:	6813      	ldr	r3, [r2, #0]
 8001bd2:	4219      	tst	r1, r3
 8001bd4:	d1fc      	bne.n	8001bd0 <DMA1_Channel4_5_IRQHandler+0xc8>
  SPIX->CR2 &= ~SPI_CR2_TXDMAEN;
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	4c0f      	ldr	r4, [pc, #60]	; (8001c18 <DMA1_Channel4_5_IRQHandler+0x110>)
 8001bda:	6863      	ldr	r3, [r4, #4]
 8001bdc:	4393      	bics	r3, r2
 8001bde:	6063      	str	r3, [r4, #4]
  while(SPIX->SR & SPI_SR_BSY);
 8001be0:	327e      	adds	r2, #126	; 0x7e
 8001be2:	68a3      	ldr	r3, [r4, #8]
 8001be4:	421a      	tst	r2, r3
 8001be6:	d1fc      	bne.n	8001be2 <DMA1_Channel4_5_IRQHandler+0xda>
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8001be8:	2540      	movs	r5, #64	; 0x40
 8001bea:	6823      	ldr	r3, [r4, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8001bec:	2003      	movs	r0, #3
  SPIX->CR1 &= ~SPI_CR1_SPE;
 8001bee:	43ab      	bics	r3, r5
 8001bf0:	6023      	str	r3, [r4, #0]
  LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 8001bf2:	f7ff ff79 	bl	8001ae8 <LCD_IO_Delay>
  SPIX->CR1 |= SPI_CR1_SPE;
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	432b      	orrs	r3, r5
 8001bfa:	6023      	str	r3, [r4, #0]
  if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <DMA1_Channel4_5_IRQHandler+0x124>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2a01      	cmp	r2, #1
 8001c02:	d103      	bne.n	8001c0c <DMA1_Channel4_5_IRQHandler+0x104>
    LCD_CS_OFF;
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <DMA1_Channel4_5_IRQHandler+0x12c>)
 8001c08:	0149      	lsls	r1, r1, #5
 8001c0a:	6191      	str	r1, [r2, #24]
  LCD_IO_DmaTransferStatus = 0;
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	e787      	b.n	8001b22 <DMA1_Channel4_5_IRQHandler+0x1a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40003800 	.word	0x40003800
 8001c1c:	4000380c 	.word	0x4000380c
 8001c20:	ffffbfc7 	.word	0xffffbfc7
 8001c24:	00004008 	.word	0x00004008
 8001c28:	40020044 	.word	0x40020044
 8001c2c:	200001fc 	.word	0x200001fc
 8001c30:	40020058 	.word	0x40020058
 8001c34:	48000400 	.word	0x48000400

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b510      	push	{r4, lr}
 8001c3a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3c:	20fa      	movs	r0, #250	; 0xfa
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_InitTick+0x40>)
 8001c40:	0080      	lsls	r0, r0, #2
 8001c42:	7819      	ldrb	r1, [r3, #0]
 8001c44:	f7fe fa60 	bl	8000108 <__udivsi3>
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_InitTick+0x44>)
 8001c4a:	0001      	movs	r1, r0
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	f7fe fa5b 	bl	8000108 <__udivsi3>
 8001c52:	f000 f889 	bl	8001d68 <HAL_SYSTICK_Config>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d10c      	bne.n	8001c74 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8001c5a:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5c:	2c03      	cmp	r4, #3
 8001c5e:	d900      	bls.n	8001c62 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001c60:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c62:	3802      	subs	r0, #2
 8001c64:	2200      	movs	r2, #0
 8001c66:	0021      	movs	r1, r4
 8001c68:	f000 f840 	bl	8001cec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <HAL_InitTick+0x48>)
 8001c6e:	2000      	movs	r0, #0
 8001c70:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001c72:	e7f5      	b.n	8001c60 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8001c74:	2001      	movs	r0, #1
 8001c76:	e7f3      	b.n	8001c60 <HAL_InitTick+0x28>
 8001c78:	20000018 	.word	0x20000018
 8001c7c:	20000004 	.word	0x20000004
 8001c80:	2000001c 	.word	0x2000001c

08001c84 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	2110      	movs	r1, #16
 8001c86:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_Init+0x1c>)
{
 8001c88:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	f7ff ffd1 	bl	8001c38 <HAL_InitTick>
  HAL_MspInit();
 8001c96:	f7ff fde7 	bl	8001868 <HAL_MspInit>
}
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	bd10      	pop	{r4, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	40022000 	.word	0x40022000

08001ca4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ca4:	4a03      	ldr	r2, [pc, #12]	; (8001cb4 <HAL_IncTick+0x10>)
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <HAL_IncTick+0x14>)
 8001ca8:	6811      	ldr	r1, [r2, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	185b      	adds	r3, r3, r1
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	4770      	bx	lr
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	20000200 	.word	0x20000200
 8001cb8:	20000018 	.word	0x20000018

08001cbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001cbc:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <HAL_GetTick+0x8>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
}
 8001cc0:	4770      	bx	lr
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	20000200 	.word	0x20000200

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff fff6 	bl	8001cbc <HAL_GetTick>
 8001cd0:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	1c63      	adds	r3, r4, #1
 8001cd4:	d002      	beq.n	8001cdc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_Delay+0x20>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	1b40      	subs	r0, r0, r5
 8001ce2:	42a0      	cmp	r0, r4
 8001ce4:	d3fa      	bcc.n	8001cdc <HAL_Delay+0x14>
  {
  }
}
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
 8001ce8:	20000018 	.word	0x20000018

08001cec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cec:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	db14      	blt.n	8001d1c <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_NVIC_SetPriority+0x5c>)
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	469c      	mov	ip, r3
 8001cf8:	23ff      	movs	r3, #255	; 0xff
 8001cfa:	0884      	lsrs	r4, r0, #2
 8001cfc:	4010      	ands	r0, r2
 8001cfe:	001a      	movs	r2, r3
 8001d00:	26c0      	movs	r6, #192	; 0xc0
 8001d02:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d04:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d06:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d08:	400b      	ands	r3, r1
 8001d0a:	4083      	lsls	r3, r0
 8001d0c:	00a4      	lsls	r4, r4, #2
 8001d0e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d10:	00b6      	lsls	r6, r6, #2
 8001d12:	59a5      	ldr	r5, [r4, r6]
 8001d14:	4395      	bics	r5, r2
 8001d16:	432b      	orrs	r3, r5
 8001d18:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_NVIC_SetPriority+0x60>)
 8001d1e:	230f      	movs	r3, #15
 8001d20:	4694      	mov	ip, r2
 8001d22:	2203      	movs	r2, #3
 8001d24:	4003      	ands	r3, r0
 8001d26:	4010      	ands	r0, r2
 8001d28:	32fc      	adds	r2, #252	; 0xfc
 8001d2a:	0015      	movs	r5, r2
 8001d2c:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d2e:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d30:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d32:	400a      	ands	r2, r1
 8001d34:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d36:	3b08      	subs	r3, #8
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4463      	add	r3, ip
 8001d3e:	69dc      	ldr	r4, [r3, #28]
 8001d40:	43ac      	bics	r4, r5
 8001d42:	4322      	orrs	r2, r4
 8001d44:	61da      	str	r2, [r3, #28]
 8001d46:	e7e8      	b.n	8001d1a <HAL_NVIC_SetPriority+0x2e>
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d50:	2800      	cmp	r0, #0
 8001d52:	db05      	blt.n	8001d60 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d54:	231f      	movs	r3, #31
 8001d56:	4018      	ands	r0, r3
 8001d58:	3b1e      	subs	r3, #30
 8001d5a:	4083      	lsls	r3, r0
 8001d5c:	4a01      	ldr	r2, [pc, #4]	; (8001d64 <HAL_NVIC_EnableIRQ+0x14>)
 8001d5e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d60:	4770      	bx	lr
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	1e43      	subs	r3, r0, #1
 8001d6c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d20e      	bcs.n	8001d92 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d74:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d78:	4807      	ldr	r0, [pc, #28]	; (8001d98 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d7c:	6a03      	ldr	r3, [r0, #32]
 8001d7e:	0609      	lsls	r1, r1, #24
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	3307      	adds	r3, #7
 8001d90:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d92:	4770      	bx	lr
 8001d94:	e000e010 	.word	0xe000e010
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001da0:	d027      	beq.n	8001df2 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001da2:	2521      	movs	r5, #33	; 0x21
 8001da4:	2302      	movs	r3, #2
 8001da6:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001da8:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001daa:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8001dac:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dae:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001db0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001db2:	6863      	ldr	r3, [r4, #4]
 8001db4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db6:	68e1      	ldr	r1, [r4, #12]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6921      	ldr	r1, [r4, #16]
 8001dbc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbe:	6961      	ldr	r1, [r4, #20]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	69a1      	ldr	r1, [r4, #24]
 8001dc4:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc6:	69e1      	ldr	r1, [r4, #28]
 8001dc8:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001dca:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001dcc:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_DMA_Init+0x60>)
 8001dd0:	2114      	movs	r1, #20
 8001dd2:	469c      	mov	ip, r3
 8001dd4:	4460      	add	r0, ip
 8001dd6:	f7fe f997 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8001dde:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de0:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001de2:	0080      	lsls	r0, r0, #2
 8001de4:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8001de6:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de8:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001dea:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8001dec:	321f      	adds	r2, #31
 8001dee:	54a3      	strb	r3, [r4, r2]
}  
 8001df0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001df2:	2001      	movs	r0, #1
 8001df4:	e7fc      	b.n	8001df0 <HAL_DMA_Init+0x54>
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	ffffc00f 	.word	0xffffc00f
 8001dfc:	bffdfff8 	.word	0xbffdfff8
 8001e00:	40020000 	.word	0x40020000

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	46de      	mov	lr, fp
 8001e08:	4657      	mov	r7, sl
 8001e0a:	464e      	mov	r6, r9
 8001e0c:	4645      	mov	r5, r8
 8001e0e:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e10:	680c      	ldr	r4, [r1, #0]
{
 8001e12:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e14:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001e16:	2300      	movs	r3, #0
{
 8001e18:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	2c00      	cmp	r4, #0
 8001e1c:	d100      	bne.n	8001e20 <HAL_GPIO_Init+0x1c>
 8001e1e:	e087      	b.n	8001f30 <HAL_GPIO_Init+0x12c>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e20:	4980      	ldr	r1, [pc, #512]	; (8002024 <HAL_GPIO_Init+0x220>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e22:	4f81      	ldr	r7, [pc, #516]	; (8002028 <HAL_GPIO_Init+0x224>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e24:	468b      	mov	fp, r1
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e26:	4661      	mov	r1, ip
 8001e28:	9103      	str	r1, [sp, #12]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e2a:	2501      	movs	r5, #1
 8001e2c:	0021      	movs	r1, r4
 8001e2e:	409d      	lsls	r5, r3
 8001e30:	4029      	ands	r1, r5
 8001e32:	9101      	str	r1, [sp, #4]
    if (iocurrent != 0x00u)
 8001e34:	422c      	tst	r4, r5
 8001e36:	d074      	beq.n	8001f22 <HAL_GPIO_Init+0x11e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e38:	9903      	ldr	r1, [sp, #12]
 8001e3a:	6849      	ldr	r1, [r1, #4]
 8001e3c:	468a      	mov	sl, r1
 8001e3e:	2103      	movs	r1, #3
 8001e40:	4656      	mov	r6, sl
 8001e42:	4031      	ands	r1, r6
 8001e44:	468c      	mov	ip, r1
 8001e46:	3901      	subs	r1, #1
 8001e48:	2901      	cmp	r1, #1
 8001e4a:	d800      	bhi.n	8001e4e <HAL_GPIO_Init+0x4a>
 8001e4c:	e077      	b.n	8001f3e <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4e:	4661      	mov	r1, ip
 8001e50:	2903      	cmp	r1, #3
 8001e52:	d000      	beq.n	8001e56 <HAL_GPIO_Init+0x52>
 8001e54:	e0bc      	b.n	8001fd0 <HAL_GPIO_Init+0x1cc>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e56:	4665      	mov	r5, ip
 8001e58:	4095      	lsls	r5, r2
 8001e5a:	43e9      	mvns	r1, r5
 8001e5c:	9102      	str	r1, [sp, #8]
      temp = GPIOx->MODER;
 8001e5e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e60:	9902      	ldr	r1, [sp, #8]
 8001e62:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e64:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e66:	25c0      	movs	r5, #192	; 0xc0
      GPIOx->MODER = temp;
 8001e68:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e6a:	4651      	mov	r1, sl
 8001e6c:	02ad      	lsls	r5, r5, #10
 8001e6e:	4229      	tst	r1, r5
 8001e70:	d057      	beq.n	8001f22 <HAL_GPIO_Init+0x11e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	4659      	mov	r1, fp
 8001e74:	2501      	movs	r5, #1
 8001e76:	465e      	mov	r6, fp
 8001e78:	6989      	ldr	r1, [r1, #24]
 8001e7a:	4329      	orrs	r1, r5
 8001e7c:	61b1      	str	r1, [r6, #24]
 8001e7e:	69b1      	ldr	r1, [r6, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e80:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	4029      	ands	r1, r5
 8001e84:	4d69      	ldr	r5, [pc, #420]	; (800202c <HAL_GPIO_Init+0x228>)
 8001e86:	9105      	str	r1, [sp, #20]
 8001e88:	46ac      	mov	ip, r5
 8001e8a:	9905      	ldr	r1, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e8c:	401e      	ands	r6, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e8e:	0899      	lsrs	r1, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e90:	00b6      	lsls	r6, r6, #2
 8001e92:	0089      	lsls	r1, r1, #2
 8001e94:	4461      	add	r1, ip
 8001e96:	46b4      	mov	ip, r6
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e98:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e9a:	260f      	movs	r6, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e9c:	46a9      	mov	r9, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e9e:	4665      	mov	r5, ip
 8001ea0:	40ae      	lsls	r6, r5
 8001ea2:	0035      	movs	r5, r6
 8001ea4:	464e      	mov	r6, r9
 8001ea6:	43ae      	bics	r6, r5
 8001ea8:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eaa:	2690      	movs	r6, #144	; 0x90
 8001eac:	05f6      	lsls	r6, r6, #23
 8001eae:	42b0      	cmp	r0, r6
 8001eb0:	d012      	beq.n	8001ed8 <HAL_GPIO_Init+0xd4>
 8001eb2:	4e5f      	ldr	r6, [pc, #380]	; (8002030 <HAL_GPIO_Init+0x22c>)
 8001eb4:	42b0      	cmp	r0, r6
 8001eb6:	d100      	bne.n	8001eba <HAL_GPIO_Init+0xb6>
 8001eb8:	e0a4      	b.n	8002004 <HAL_GPIO_Init+0x200>
 8001eba:	4e5e      	ldr	r6, [pc, #376]	; (8002034 <HAL_GPIO_Init+0x230>)
 8001ebc:	42b0      	cmp	r0, r6
 8001ebe:	d100      	bne.n	8001ec2 <HAL_GPIO_Init+0xbe>
 8001ec0:	e0a8      	b.n	8002014 <HAL_GPIO_Init+0x210>
 8001ec2:	4e5d      	ldr	r6, [pc, #372]	; (8002038 <HAL_GPIO_Init+0x234>)
 8001ec4:	42b0      	cmp	r0, r6
 8001ec6:	d100      	bne.n	8001eca <HAL_GPIO_Init+0xc6>
 8001ec8:	e095      	b.n	8001ff6 <HAL_GPIO_Init+0x1f2>
 8001eca:	4665      	mov	r5, ip
 8001ecc:	2605      	movs	r6, #5
 8001ece:	40ae      	lsls	r6, r5
 8001ed0:	0035      	movs	r5, r6
 8001ed2:	464e      	mov	r6, r9
 8001ed4:	432e      	orrs	r6, r5
 8001ed6:	46b1      	mov	r9, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ed8:	464d      	mov	r5, r9
 8001eda:	608d      	str	r5, [r1, #8]
        temp &= ~(iocurrent);
 8001edc:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ede:	2680      	movs	r6, #128	; 0x80
        temp &= ~(iocurrent);
 8001ee0:	43ed      	mvns	r5, r5
 8001ee2:	46ac      	mov	ip, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee4:	4655      	mov	r5, sl
 8001ee6:	0276      	lsls	r6, r6, #9
        temp = EXTI->IMR;
 8001ee8:	6839      	ldr	r1, [r7, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eea:	4235      	tst	r5, r6
 8001eec:	d000      	beq.n	8001ef0 <HAL_GPIO_Init+0xec>
 8001eee:	e07f      	b.n	8001ff0 <HAL_GPIO_Init+0x1ec>
        temp &= ~(iocurrent);
 8001ef0:	4665      	mov	r5, ip
 8001ef2:	4029      	ands	r1, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ef4:	4655      	mov	r5, sl
        EXTI->IMR = temp;
 8001ef6:	6039      	str	r1, [r7, #0]
        temp = EXTI->EMR;
 8001ef8:	6879      	ldr	r1, [r7, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001efa:	03ad      	lsls	r5, r5, #14
 8001efc:	d500      	bpl.n	8001f00 <HAL_GPIO_Init+0xfc>
 8001efe:	e074      	b.n	8001fea <HAL_GPIO_Init+0x1e6>
        temp &= ~(iocurrent);
 8001f00:	4665      	mov	r5, ip
 8001f02:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001f04:	6079      	str	r1, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f06:	4651      	mov	r1, sl
        temp = EXTI->RTSR;
 8001f08:	68bd      	ldr	r5, [r7, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f0a:	02c9      	lsls	r1, r1, #11
 8001f0c:	d46a      	bmi.n	8001fe4 <HAL_GPIO_Init+0x1e0>
        temp &= ~(iocurrent);
 8001f0e:	4661      	mov	r1, ip
 8001f10:	400d      	ands	r5, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001f12:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f14:	4655      	mov	r5, sl
        temp = EXTI->FTSR;
 8001f16:	68f9      	ldr	r1, [r7, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f18:	02ad      	lsls	r5, r5, #10
 8001f1a:	d45e      	bmi.n	8001fda <HAL_GPIO_Init+0x1d6>
        temp &= ~(iocurrent);
 8001f1c:	4665      	mov	r5, ip
 8001f1e:	4029      	ands	r1, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001f20:	60f9      	str	r1, [r7, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f22:	0021      	movs	r1, r4
      }
    }

    position++;
 8001f24:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f26:	40d9      	lsrs	r1, r3
 8001f28:	3202      	adds	r2, #2
 8001f2a:	2900      	cmp	r1, #0
 8001f2c:	d000      	beq.n	8001f30 <HAL_GPIO_Init+0x12c>
 8001f2e:	e77c      	b.n	8001e2a <HAL_GPIO_Init+0x26>
  } 
}
 8001f30:	b007      	add	sp, #28
 8001f32:	bcf0      	pop	{r4, r5, r6, r7}
 8001f34:	46bb      	mov	fp, r7
 8001f36:	46b2      	mov	sl, r6
 8001f38:	46a9      	mov	r9, r5
 8001f3a:	46a0      	mov	r8, r4
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8001f3e:	6881      	ldr	r1, [r0, #8]
 8001f40:	4689      	mov	r9, r1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f42:	2103      	movs	r1, #3
 8001f44:	4091      	lsls	r1, r2
 8001f46:	43ce      	mvns	r6, r1
 8001f48:	9602      	str	r6, [sp, #8]
 8001f4a:	464e      	mov	r6, r9
 8001f4c:	438e      	bics	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f4e:	9903      	ldr	r1, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f50:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f52:	68ce      	ldr	r6, [r1, #12]
 8001f54:	4096      	lsls	r6, r2
 8001f56:	46b0      	mov	r8, r6
 8001f58:	464e      	mov	r6, r9
 8001f5a:	4641      	mov	r1, r8
 8001f5c:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8001f5e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f60:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f62:	000e      	movs	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f64:	4651      	mov	r1, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f66:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f68:	090d      	lsrs	r5, r1, #4
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	400d      	ands	r5, r1
 8001f6e:	409d      	lsls	r5, r3
 8001f70:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001f72:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8001f74:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f76:	9902      	ldr	r1, [sp, #8]
 8001f78:	400d      	ands	r5, r1
 8001f7a:	46a8      	mov	r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f7c:	9903      	ldr	r1, [sp, #12]
 8001f7e:	4646      	mov	r6, r8
 8001f80:	688d      	ldr	r5, [r1, #8]
 8001f82:	4095      	lsls	r5, r2
 8001f84:	4335      	orrs	r5, r6
        GPIOx->PUPDR = temp;
 8001f86:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f88:	4666      	mov	r6, ip
 8001f8a:	4665      	mov	r5, ip
 8001f8c:	4095      	lsls	r5, r2
 8001f8e:	2e02      	cmp	r6, #2
 8001f90:	d000      	beq.n	8001f94 <HAL_GPIO_Init+0x190>
 8001f92:	e764      	b.n	8001e5e <HAL_GPIO_Init+0x5a>
        temp = GPIOx->AFR[position >> 3u];
 8001f94:	08d9      	lsrs	r1, r3, #3
 8001f96:	0089      	lsls	r1, r1, #2
 8001f98:	468c      	mov	ip, r1
 8001f9a:	4484      	add	ip, r0
 8001f9c:	4661      	mov	r1, ip
 8001f9e:	6a09      	ldr	r1, [r1, #32]
 8001fa0:	4689      	mov	r9, r1
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fa2:	2107      	movs	r1, #7
 8001fa4:	000e      	movs	r6, r1
 8001fa6:	401e      	ands	r6, r3
 8001fa8:	00b1      	lsls	r1, r6, #2
 8001faa:	260f      	movs	r6, #15
 8001fac:	4688      	mov	r8, r1
 8001fae:	408e      	lsls	r6, r1
 8001fb0:	4649      	mov	r1, r9
 8001fb2:	43b1      	bics	r1, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fb4:	4646      	mov	r6, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb6:	4689      	mov	r9, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fb8:	9903      	ldr	r1, [sp, #12]
 8001fba:	6909      	ldr	r1, [r1, #16]
 8001fbc:	40b1      	lsls	r1, r6
 8001fbe:	4688      	mov	r8, r1
 8001fc0:	4649      	mov	r1, r9
 8001fc2:	4646      	mov	r6, r8
 8001fc4:	4331      	orrs	r1, r6
 8001fc6:	4689      	mov	r9, r1
        GPIOx->AFR[position >> 3u] = temp;
 8001fc8:	4661      	mov	r1, ip
 8001fca:	464e      	mov	r6, r9
 8001fcc:	620e      	str	r6, [r1, #32]
 8001fce:	e746      	b.n	8001e5e <HAL_GPIO_Init+0x5a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fd0:	2103      	movs	r1, #3
 8001fd2:	4091      	lsls	r1, r2
 8001fd4:	43c9      	mvns	r1, r1
 8001fd6:	9102      	str	r1, [sp, #8]
 8001fd8:	e7cc      	b.n	8001f74 <HAL_GPIO_Init+0x170>
          temp |= iocurrent;
 8001fda:	9d01      	ldr	r5, [sp, #4]
 8001fdc:	430d      	orrs	r5, r1
 8001fde:	0029      	movs	r1, r5
        EXTI->FTSR = temp;
 8001fe0:	60f9      	str	r1, [r7, #12]
 8001fe2:	e79e      	b.n	8001f22 <HAL_GPIO_Init+0x11e>
          temp |= iocurrent;
 8001fe4:	9901      	ldr	r1, [sp, #4]
 8001fe6:	430d      	orrs	r5, r1
 8001fe8:	e793      	b.n	8001f12 <HAL_GPIO_Init+0x10e>
          temp |= iocurrent;
 8001fea:	9d01      	ldr	r5, [sp, #4]
 8001fec:	4329      	orrs	r1, r5
 8001fee:	e789      	b.n	8001f04 <HAL_GPIO_Init+0x100>
          temp |= iocurrent;
 8001ff0:	9d01      	ldr	r5, [sp, #4]
 8001ff2:	4329      	orrs	r1, r5
 8001ff4:	e77e      	b.n	8001ef4 <HAL_GPIO_Init+0xf0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ff6:	4666      	mov	r6, ip
 8001ff8:	2503      	movs	r5, #3
 8001ffa:	40b5      	lsls	r5, r6
 8001ffc:	464e      	mov	r6, r9
 8001ffe:	432e      	orrs	r6, r5
 8002000:	46b1      	mov	r9, r6
 8002002:	e769      	b.n	8001ed8 <HAL_GPIO_Init+0xd4>
 8002004:	4665      	mov	r5, ip
 8002006:	2601      	movs	r6, #1
 8002008:	40ae      	lsls	r6, r5
 800200a:	0035      	movs	r5, r6
 800200c:	464e      	mov	r6, r9
 800200e:	432e      	orrs	r6, r5
 8002010:	46b1      	mov	r9, r6
 8002012:	e761      	b.n	8001ed8 <HAL_GPIO_Init+0xd4>
 8002014:	4666      	mov	r6, ip
 8002016:	2502      	movs	r5, #2
 8002018:	40b5      	lsls	r5, r6
 800201a:	464e      	mov	r6, r9
 800201c:	432e      	orrs	r6, r5
 800201e:	46b1      	mov	r9, r6
 8002020:	e75a      	b.n	8001ed8 <HAL_GPIO_Init+0xd4>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	40021000 	.word	0x40021000
 8002028:	40010400 	.word	0x40010400
 800202c:	40010000 	.word	0x40010000
 8002030:	48000400 	.word	0x48000400
 8002034:	48000800 	.word	0x48000800
 8002038:	48000c00 	.word	0x48000c00

0800203c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800203c:	6900      	ldr	r0, [r0, #16]
 800203e:	4008      	ands	r0, r1
 8002040:	1e43      	subs	r3, r0, #1
 8002042:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002044:	b2c0      	uxtb	r0, r0
  }
 8002046:	4770      	bx	lr

08002048 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002048:	2a00      	cmp	r2, #0
 800204a:	d001      	beq.n	8002050 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800204c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800204e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002050:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002052:	e7fc      	b.n	800204e <HAL_GPIO_WritePin+0x6>

08002054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002054:	b510      	push	{r4, lr}
 8002056:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002058:	d04d      	beq.n	80020f6 <HAL_I2C_Init+0xa2>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205a:	2341      	movs	r3, #65	; 0x41
 800205c:	5cc3      	ldrb	r3, [r0, r3]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d043      	beq.n	80020ec <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002064:	2341      	movs	r3, #65	; 0x41
 8002066:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002068:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800206a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	438a      	bics	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002074:	6861      	ldr	r1, [r4, #4]
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <HAL_I2C_Init+0xa8>)
 8002078:	400a      	ands	r2, r1
 800207a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	4920      	ldr	r1, [pc, #128]	; (8002100 <HAL_I2C_Init+0xac>)
 8002080:	400a      	ands	r2, r1
 8002082:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002084:	68e2      	ldr	r2, [r4, #12]
 8002086:	2a01      	cmp	r2, #1
 8002088:	d02a      	beq.n	80020e0 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800208a:	2184      	movs	r1, #132	; 0x84
 800208c:	68a0      	ldr	r0, [r4, #8]
 800208e:	0209      	lsls	r1, r1, #8
 8002090:	4301      	orrs	r1, r0
 8002092:	6099      	str	r1, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002094:	2a02      	cmp	r2, #2
 8002096:	d102      	bne.n	800209e <HAL_I2C_Init+0x4a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002098:	2280      	movs	r2, #128	; 0x80
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	4a18      	ldr	r2, [pc, #96]	; (8002104 <HAL_I2C_Init+0xb0>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80020a2:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	4915      	ldr	r1, [pc, #84]	; (8002100 <HAL_I2C_Init+0xac>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020b0:	6961      	ldr	r1, [r4, #20]
 80020b2:	6922      	ldr	r2, [r4, #16]
 80020b4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020b6:	69a1      	ldr	r1, [r4, #24]
 80020b8:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ba:	430a      	orrs	r2, r1
 80020bc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020be:	6a21      	ldr	r1, [r4, #32]
 80020c0:	69e2      	ldr	r2, [r4, #28]
 80020c2:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 80020c4:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020c6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ce:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80020d0:	2241      	movs	r2, #65	; 0x41
 80020d2:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d8:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 80020da:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020dc:	54a3      	strb	r3, [r4, r2]
}
 80020de:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	68a1      	ldr	r1, [r4, #8]
 80020e4:	0212      	lsls	r2, r2, #8
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020ea:	e7d8      	b.n	800209e <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 80020ec:	3340      	adds	r3, #64	; 0x40
 80020ee:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80020f0:	f7ff fbd2 	bl	8001898 <HAL_I2C_MspInit>
 80020f4:	e7b6      	b.n	8002064 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 80020f6:	2001      	movs	r0, #1
 80020f8:	e7f1      	b.n	80020de <HAL_I2C_Init+0x8a>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	f0ffffff 	.word	0xf0ffffff
 8002100:	ffff7fff 	.word	0xffff7fff
 8002104:	02008000 	.word	0x02008000

08002108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002108:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800210a:	2541      	movs	r5, #65	; 0x41
 800210c:	5d43      	ldrb	r3, [r0, r5]
{
 800210e:	000a      	movs	r2, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002110:	b2de      	uxtb	r6, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	d11b      	bne.n	800214e <HAL_I2CEx_ConfigAnalogFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002116:	2740      	movs	r7, #64	; 0x40
 8002118:	5dc3      	ldrb	r3, [r0, r7]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d017      	beq.n	800214e <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800211e:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002120:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002122:	468c      	mov	ip, r1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002124:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 8002126:	6803      	ldr	r3, [r0, #0]
 8002128:	681c      	ldr	r4, [r3, #0]
 800212a:	438c      	bics	r4, r1
 800212c:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800212e:	681c      	ldr	r4, [r3, #0]
 8002130:	4908      	ldr	r1, [pc, #32]	; (8002154 <HAL_I2CEx_ConfigAnalogFilter+0x4c>)
 8002132:	400c      	ands	r4, r1
 8002134:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002136:	6819      	ldr	r1, [r3, #0]
 8002138:	4311      	orrs	r1, r2
 800213a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800213c:	4661      	mov	r1, ip
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002144:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002146:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8002148:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 800214a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800214e:	2002      	movs	r0, #2
 8002150:	e7fc      	b.n	800214c <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	ffffefff 	.word	0xffffefff

08002158 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215a:	2541      	movs	r5, #65	; 0x41
 800215c:	5d43      	ldrb	r3, [r0, r5]
 800215e:	b2de      	uxtb	r6, r3
 8002160:	2b20      	cmp	r3, #32
 8002162:	d11a      	bne.n	800219a <HAL_I2CEx_ConfigDigitalFilter+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002164:	2740      	movs	r7, #64	; 0x40
 8002166:	5dc3      	ldrb	r3, [r0, r7]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d016      	beq.n	800219a <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	2324      	movs	r3, #36	; 0x24
 800216e:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002170:	3b23      	subs	r3, #35	; 0x23
 8002172:	469c      	mov	ip, r3
 8002174:	6804      	ldr	r4, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002176:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8002178:	6822      	ldr	r2, [r4, #0]
 800217a:	439a      	bics	r2, r3
 800217c:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 800217e:	6822      	ldr	r2, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_I2CEx_ConfigDigitalFilter+0x48>)
 8002182:	401a      	ands	r2, r3
    tmpreg |= DigitalFilter << 8U;
 8002184:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

    __HAL_I2C_ENABLE(hi2c);
 8002186:	4662      	mov	r2, ip
    hi2c->Instance->CR1 = tmpreg;
 8002188:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	4313      	orrs	r3, r2
 800218e:	6023      	str	r3, [r4, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002190:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002192:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8002194:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8002196:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800219a:	2002      	movs	r0, #2
 800219c:	e7fc      	b.n	8002198 <HAL_I2CEx_ConfigDigitalFilter+0x40>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	fffff0ff 	.word	0xfffff0ff

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a6:	46ce      	mov	lr, r9
 80021a8:	4647      	mov	r7, r8
 80021aa:	b580      	push	{r7, lr}
 80021ac:	0004      	movs	r4, r0
 80021ae:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d100      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
 80021b4:	e0ee      	b.n	8002394 <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	6803      	ldr	r3, [r0, #0]
 80021b8:	07da      	lsls	r2, r3, #31
 80021ba:	d535      	bpl.n	8002228 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021bc:	210c      	movs	r1, #12
 80021be:	48c3      	ldr	r0, [pc, #780]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 80021c0:	6842      	ldr	r2, [r0, #4]
 80021c2:	400a      	ands	r2, r1
 80021c4:	2a04      	cmp	r2, #4
 80021c6:	d100      	bne.n	80021ca <HAL_RCC_OscConfig+0x26>
 80021c8:	e101      	b.n	80023ce <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ca:	6842      	ldr	r2, [r0, #4]
 80021cc:	4011      	ands	r1, r2
 80021ce:	2908      	cmp	r1, #8
 80021d0:	d100      	bne.n	80021d4 <HAL_RCC_OscConfig+0x30>
 80021d2:	e0f8      	b.n	80023c6 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d4:	6863      	ldr	r3, [r4, #4]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d00f      	beq.n	80021fa <HAL_RCC_OscConfig+0x56>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d100      	bne.n	80021e0 <HAL_RCC_OscConfig+0x3c>
 80021de:	e11e      	b.n	800241e <HAL_RCC_OscConfig+0x27a>
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d100      	bne.n	80021e6 <HAL_RCC_OscConfig+0x42>
 80021e4:	e1a7      	b.n	8002536 <HAL_RCC_OscConfig+0x392>
 80021e6:	4bb9      	ldr	r3, [pc, #740]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 80021e8:	49b9      	ldr	r1, [pc, #740]	; (80024d0 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	49b8      	ldr	r1, [pc, #736]	; (80024d4 <HAL_RCC_OscConfig+0x330>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e005      	b.n	8002206 <HAL_RCC_OscConfig+0x62>
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	4ab3      	ldr	r2, [pc, #716]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 80021fe:	025b      	lsls	r3, r3, #9
 8002200:	6811      	ldr	r1, [r2, #0]
 8002202:	430b      	orrs	r3, r1
 8002204:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff fd59 	bl	8001cbc <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800220c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4faf      	ldr	r7, [pc, #700]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 8002210:	02b6      	lsls	r6, r6, #10
 8002212:	e005      	b.n	8002220 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7ff fd52 	bl	8001cbc <HAL_GetTick>
 8002218:	1b40      	subs	r0, r0, r5
 800221a:	2864      	cmp	r0, #100	; 0x64
 800221c:	d900      	bls.n	8002220 <HAL_RCC_OscConfig+0x7c>
 800221e:	e0fc      	b.n	800241a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4233      	tst	r3, r6
 8002224:	d0f6      	beq.n	8002214 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	079a      	lsls	r2, r3, #30
 800222a:	d529      	bpl.n	8002280 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800222c:	220c      	movs	r2, #12
 800222e:	49a7      	ldr	r1, [pc, #668]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 8002230:	6848      	ldr	r0, [r1, #4]
 8002232:	4202      	tst	r2, r0
 8002234:	d100      	bne.n	8002238 <HAL_RCC_OscConfig+0x94>
 8002236:	e0a6      	b.n	8002386 <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002238:	6848      	ldr	r0, [r1, #4]
 800223a:	4002      	ands	r2, r0
 800223c:	2a08      	cmp	r2, #8
 800223e:	d100      	bne.n	8002242 <HAL_RCC_OscConfig+0x9e>
 8002240:	e09d      	b.n	800237e <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002242:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	4da1      	ldr	r5, [pc, #644]	; (80024cc <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002246:	2b00      	cmp	r3, #0
 8002248:	d100      	bne.n	800224c <HAL_RCC_OscConfig+0xa8>
 800224a:	e11f      	b.n	800248c <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 800224c:	2201      	movs	r2, #1
 800224e:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8002252:	4313      	orrs	r3, r2
 8002254:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002256:	f7ff fd31 	bl	8001cbc <HAL_GetTick>
 800225a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	e005      	b.n	800226a <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225e:	f7ff fd2d 	bl	8001cbc <HAL_GetTick>
 8002262:	1b80      	subs	r0, r0, r6
 8002264:	2802      	cmp	r0, #2
 8002266:	d900      	bls.n	800226a <HAL_RCC_OscConfig+0xc6>
 8002268:	e0d7      	b.n	800241a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226a:	682b      	ldr	r3, [r5, #0]
 800226c:	421f      	tst	r7, r3
 800226e:	d0f6      	beq.n	800225e <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	21f8      	movs	r1, #248	; 0xf8
 8002272:	682a      	ldr	r2, [r5, #0]
 8002274:	6923      	ldr	r3, [r4, #16]
 8002276:	438a      	bics	r2, r1
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4313      	orrs	r3, r2
 800227c:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	071a      	lsls	r2, r3, #28
 8002282:	d42d      	bmi.n	80022e0 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002284:	075a      	lsls	r2, r3, #29
 8002286:	d544      	bpl.n	8002312 <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002288:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228c:	4b8f      	ldr	r3, [pc, #572]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 800228e:	0552      	lsls	r2, r2, #21
 8002290:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002292:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002294:	4211      	tst	r1, r2
 8002296:	d108      	bne.n	80022aa <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	69d9      	ldr	r1, [r3, #28]
 800229a:	4311      	orrs	r1, r2
 800229c:	61d9      	str	r1, [r3, #28]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	401a      	ands	r2, r3
 80022a2:	9201      	str	r2, [sp, #4]
 80022a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022a6:	2301      	movs	r3, #1
 80022a8:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	2780      	movs	r7, #128	; 0x80
 80022ac:	4e8a      	ldr	r6, [pc, #552]	; (80024d8 <HAL_RCC_OscConfig+0x334>)
 80022ae:	007f      	lsls	r7, r7, #1
 80022b0:	6833      	ldr	r3, [r6, #0]
 80022b2:	423b      	tst	r3, r7
 80022b4:	d100      	bne.n	80022b8 <HAL_RCC_OscConfig+0x114>
 80022b6:	e094      	b.n	80023e2 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b8:	68a3      	ldr	r3, [r4, #8]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d100      	bne.n	80022c0 <HAL_RCC_OscConfig+0x11c>
 80022be:	e0f8      	b.n	80024b2 <HAL_RCC_OscConfig+0x30e>
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d100      	bne.n	80022c6 <HAL_RCC_OscConfig+0x122>
 80022c4:	e0c4      	b.n	8002450 <HAL_RCC_OscConfig+0x2ac>
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d100      	bne.n	80022cc <HAL_RCC_OscConfig+0x128>
 80022ca:	e140      	b.n	800254e <HAL_RCC_OscConfig+0x3aa>
 80022cc:	2101      	movs	r1, #1
 80022ce:	4b7f      	ldr	r3, [pc, #508]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 80022d0:	6a1a      	ldr	r2, [r3, #32]
 80022d2:	438a      	bics	r2, r1
 80022d4:	621a      	str	r2, [r3, #32]
 80022d6:	6a1a      	ldr	r2, [r3, #32]
 80022d8:	3103      	adds	r1, #3
 80022da:	438a      	bics	r2, r1
 80022dc:	621a      	str	r2, [r3, #32]
 80022de:	e0ec      	b.n	80024ba <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e0:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 80022e2:	4d7a      	ldr	r5, [pc, #488]	; (80024cc <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05b      	beq.n	80023a0 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 80022e8:	2201      	movs	r2, #1
 80022ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ec:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80022ee:	4313      	orrs	r3, r2
 80022f0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80022f2:	f7ff fce3 	bl	8001cbc <HAL_GetTick>
 80022f6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f8:	e005      	b.n	8002306 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fa:	f7ff fcdf 	bl	8001cbc <HAL_GetTick>
 80022fe:	1b80      	subs	r0, r0, r6
 8002300:	2802      	cmp	r0, #2
 8002302:	d900      	bls.n	8002306 <HAL_RCC_OscConfig+0x162>
 8002304:	e089      	b.n	800241a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002308:	421f      	tst	r7, r3
 800230a:	d0f6      	beq.n	80022fa <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	075a      	lsls	r2, r3, #29
 8002310:	d4ba      	bmi.n	8002288 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002312:	06db      	lsls	r3, r3, #27
 8002314:	d512      	bpl.n	800233c <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002316:	6963      	ldr	r3, [r4, #20]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d100      	bne.n	800231e <HAL_RCC_OscConfig+0x17a>
 800231c:	e13d      	b.n	800259a <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800231e:	3305      	adds	r3, #5
 8002320:	d000      	beq.n	8002324 <HAL_RCC_OscConfig+0x180>
 8002322:	e0e9      	b.n	80024f8 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002324:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002326:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8002328:	4a68      	ldr	r2, [pc, #416]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 800232a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800232c:	438b      	bics	r3, r1
 800232e:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002330:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002332:	69a3      	ldr	r3, [r4, #24]
 8002334:	4381      	bics	r1, r0
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	430b      	orrs	r3, r1
 800233a:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233c:	6a23      	ldr	r3, [r4, #32]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d01b      	beq.n	800237a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002342:	220c      	movs	r2, #12
 8002344:	4d61      	ldr	r5, [pc, #388]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 8002346:	6869      	ldr	r1, [r5, #4]
 8002348:	400a      	ands	r2, r1
 800234a:	2a08      	cmp	r2, #8
 800234c:	d100      	bne.n	8002350 <HAL_RCC_OscConfig+0x1ac>
 800234e:	e108      	b.n	8002562 <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002350:	2b02      	cmp	r3, #2
 8002352:	d100      	bne.n	8002356 <HAL_RCC_OscConfig+0x1b2>
 8002354:	e13f      	b.n	80025d6 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	682b      	ldr	r3, [r5, #0]
 8002358:	4a60      	ldr	r2, [pc, #384]	; (80024dc <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800235c:	4013      	ands	r3, r2
 800235e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002360:	f7ff fcac 	bl	8001cbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002364:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002366:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002368:	e004      	b.n	8002374 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236a:	f7ff fca7 	bl	8001cbc <HAL_GetTick>
 800236e:	1b00      	subs	r0, r0, r4
 8002370:	2802      	cmp	r0, #2
 8002372:	d852      	bhi.n	800241a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	682b      	ldr	r3, [r5, #0]
 8002376:	4233      	tst	r3, r6
 8002378:	d1f7      	bne.n	800236a <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 800237a:	2000      	movs	r0, #0
 800237c:	e00b      	b.n	8002396 <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800237e:	684a      	ldr	r2, [r1, #4]
 8002380:	03d2      	lsls	r2, r2, #15
 8002382:	d500      	bpl.n	8002386 <HAL_RCC_OscConfig+0x1e2>
 8002384:	e75d      	b.n	8002242 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	4a51      	ldr	r2, [pc, #324]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	0792      	lsls	r2, r2, #30
 800238c:	d539      	bpl.n	8002402 <HAL_RCC_OscConfig+0x25e>
 800238e:	68e2      	ldr	r2, [r4, #12]
 8002390:	2a01      	cmp	r2, #1
 8002392:	d036      	beq.n	8002402 <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
}
 8002396:	b003      	add	sp, #12
 8002398:	bcc0      	pop	{r6, r7}
 800239a:	46b9      	mov	r9, r7
 800239c:	46b0      	mov	r8, r6
 800239e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 80023a0:	2201      	movs	r2, #1
 80023a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80023a6:	4393      	bics	r3, r2
 80023a8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80023aa:	f7ff fc87 	bl	8001cbc <HAL_GetTick>
 80023ae:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	e004      	b.n	80023bc <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b2:	f7ff fc83 	bl	8001cbc <HAL_GetTick>
 80023b6:	1b80      	subs	r0, r0, r6
 80023b8:	2802      	cmp	r0, #2
 80023ba:	d82e      	bhi.n	800241a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023be:	421f      	tst	r7, r3
 80023c0:	d1f7      	bne.n	80023b2 <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	e7a3      	b.n	800230e <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c6:	6842      	ldr	r2, [r0, #4]
 80023c8:	03d2      	lsls	r2, r2, #15
 80023ca:	d400      	bmi.n	80023ce <HAL_RCC_OscConfig+0x22a>
 80023cc:	e702      	b.n	80021d4 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ce:	4a3f      	ldr	r2, [pc, #252]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	0392      	lsls	r2, r2, #14
 80023d4:	d400      	bmi.n	80023d8 <HAL_RCC_OscConfig+0x234>
 80023d6:	e727      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
 80023d8:	6862      	ldr	r2, [r4, #4]
 80023da:	2a00      	cmp	r2, #0
 80023dc:	d000      	beq.n	80023e0 <HAL_RCC_OscConfig+0x23c>
 80023de:	e723      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
 80023e0:	e7d8      	b.n	8002394 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e2:	6833      	ldr	r3, [r6, #0]
 80023e4:	433b      	orrs	r3, r7
 80023e6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80023e8:	f7ff fc68 	bl	8001cbc <HAL_GetTick>
 80023ec:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	e004      	b.n	80023fa <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f0:	f7ff fc64 	bl	8001cbc <HAL_GetTick>
 80023f4:	1b40      	subs	r0, r0, r5
 80023f6:	2864      	cmp	r0, #100	; 0x64
 80023f8:	d80f      	bhi.n	800241a <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	6833      	ldr	r3, [r6, #0]
 80023fc:	423b      	tst	r3, r7
 80023fe:	d0f7      	beq.n	80023f0 <HAL_RCC_OscConfig+0x24c>
 8002400:	e75a      	b.n	80022b8 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	25f8      	movs	r5, #248	; 0xf8
 8002404:	4831      	ldr	r0, [pc, #196]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 8002406:	6922      	ldr	r2, [r4, #16]
 8002408:	6801      	ldr	r1, [r0, #0]
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	43a9      	bics	r1, r5
 800240e:	430a      	orrs	r2, r1
 8002410:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002412:	071a      	lsls	r2, r3, #28
 8002414:	d400      	bmi.n	8002418 <HAL_RCC_OscConfig+0x274>
 8002416:	e735      	b.n	8002284 <HAL_RCC_OscConfig+0xe0>
 8002418:	e762      	b.n	80022e0 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 800241a:	2003      	movs	r0, #3
 800241c:	e7bb      	b.n	8002396 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241e:	4d2b      	ldr	r5, [pc, #172]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 8002420:	4a2b      	ldr	r2, [pc, #172]	; (80024d0 <HAL_RCC_OscConfig+0x32c>)
 8002422:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002424:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002426:	4013      	ands	r3, r2
 8002428:	602b      	str	r3, [r5, #0]
 800242a:	682b      	ldr	r3, [r5, #0]
 800242c:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	4013      	ands	r3, r2
 8002432:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002434:	f7ff fc42 	bl	8001cbc <HAL_GetTick>
 8002438:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	e004      	b.n	8002446 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243c:	f7ff fc3e 	bl	8001cbc <HAL_GetTick>
 8002440:	1b80      	subs	r0, r0, r6
 8002442:	2864      	cmp	r0, #100	; 0x64
 8002444:	d8e9      	bhi.n	800241a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	682b      	ldr	r3, [r5, #0]
 8002448:	423b      	tst	r3, r7
 800244a:	d1f7      	bne.n	800243c <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	e6eb      	b.n	8002228 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	2201      	movs	r2, #1
 8002452:	4e1e      	ldr	r6, [pc, #120]	; (80024cc <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	4d22      	ldr	r5, [pc, #136]	; (80024e0 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002456:	6a33      	ldr	r3, [r6, #32]
 8002458:	4393      	bics	r3, r2
 800245a:	6233      	str	r3, [r6, #32]
 800245c:	6a33      	ldr	r3, [r6, #32]
 800245e:	3203      	adds	r2, #3
 8002460:	4393      	bics	r3, r2
 8002462:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002464:	f7ff fc2a 	bl	8001cbc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800246a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	4698      	mov	r8, r3
 800246e:	e004      	b.n	800247a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7ff fc24 	bl	8001cbc <HAL_GetTick>
 8002474:	1bc0      	subs	r0, r0, r7
 8002476:	42a8      	cmp	r0, r5
 8002478:	d8cf      	bhi.n	800241a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247a:	4642      	mov	r2, r8
 800247c:	6a33      	ldr	r3, [r6, #32]
 800247e:	421a      	tst	r2, r3
 8002480:	d1f6      	bne.n	8002470 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 8002482:	464b      	mov	r3, r9
 8002484:	2b01      	cmp	r3, #1
 8002486:	d04f      	beq.n	8002528 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	e742      	b.n	8002312 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 800248c:	2201      	movs	r2, #1
 800248e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002490:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002492:	4393      	bics	r3, r2
 8002494:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002496:	f7ff fc11 	bl	8001cbc <HAL_GetTick>
 800249a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249c:	e004      	b.n	80024a8 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249e:	f7ff fc0d 	bl	8001cbc <HAL_GetTick>
 80024a2:	1b80      	subs	r0, r0, r6
 80024a4:	2802      	cmp	r0, #2
 80024a6:	d8b8      	bhi.n	800241a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a8:	682b      	ldr	r3, [r5, #0]
 80024aa:	421f      	tst	r7, r3
 80024ac:	d1f7      	bne.n	800249e <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	e6e6      	b.n	8002280 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b2:	4906      	ldr	r1, [pc, #24]	; (80024cc <HAL_RCC_OscConfig+0x328>)
 80024b4:	6a0a      	ldr	r2, [r1, #32]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80024ba:	f7ff fbff 	bl	8001cbc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024be:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80024c0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	4698      	mov	r8, r3
 80024c4:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	4d06      	ldr	r5, [pc, #24]	; (80024e0 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	e011      	b.n	80024ee <HAL_RCC_OscConfig+0x34a>
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	40021000 	.word	0x40021000
 80024d0:	fffeffff 	.word	0xfffeffff
 80024d4:	fffbffff 	.word	0xfffbffff
 80024d8:	40007000 	.word	0x40007000
 80024dc:	feffffff 	.word	0xfeffffff
 80024e0:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7ff fbea 	bl	8001cbc <HAL_GetTick>
 80024e8:	1b80      	subs	r0, r0, r6
 80024ea:	42a8      	cmp	r0, r5
 80024ec:	d895      	bhi.n	800241a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ee:	4643      	mov	r3, r8
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	421f      	tst	r7, r3
 80024f4:	d0f6      	beq.n	80024e4 <HAL_RCC_OscConfig+0x340>
 80024f6:	e7c4      	b.n	8002482 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 80024f8:	2204      	movs	r2, #4
 80024fa:	4d53      	ldr	r5, [pc, #332]	; (8002648 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024fc:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80024fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002500:	4313      	orrs	r3, r2
 8002502:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002504:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002506:	3a03      	subs	r2, #3
 8002508:	4393      	bics	r3, r2
 800250a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800250c:	f7ff fbd6 	bl	8001cbc <HAL_GetTick>
 8002510:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002512:	e005      	b.n	8002520 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002514:	f7ff fbd2 	bl	8001cbc <HAL_GetTick>
 8002518:	1b80      	subs	r0, r0, r6
 800251a:	2802      	cmp	r0, #2
 800251c:	d900      	bls.n	8002520 <HAL_RCC_OscConfig+0x37c>
 800251e:	e77c      	b.n	800241a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002520:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002522:	421f      	tst	r7, r3
 8002524:	d1f6      	bne.n	8002514 <HAL_RCC_OscConfig+0x370>
 8002526:	e709      	b.n	800233c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4a47      	ldr	r2, [pc, #284]	; (8002648 <HAL_RCC_OscConfig+0x4a4>)
 800252a:	4948      	ldr	r1, [pc, #288]	; (800264c <HAL_RCC_OscConfig+0x4a8>)
 800252c:	69d3      	ldr	r3, [r2, #28]
 800252e:	400b      	ands	r3, r1
 8002530:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	e6ed      	b.n	8002312 <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_RCC_OscConfig+0x4a4>)
 800253a:	02d2      	lsls	r2, r2, #11
 800253c:	6819      	ldr	r1, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	0252      	lsls	r2, r2, #9
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e65b      	b.n	8002206 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254e:	2104      	movs	r1, #4
 8002550:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCC_OscConfig+0x4a4>)
 8002552:	6a1a      	ldr	r2, [r3, #32]
 8002554:	430a      	orrs	r2, r1
 8002556:	621a      	str	r2, [r3, #32]
 8002558:	6a1a      	ldr	r2, [r3, #32]
 800255a:	3903      	subs	r1, #3
 800255c:	430a      	orrs	r2, r1
 800255e:	621a      	str	r2, [r3, #32]
 8002560:	e7ab      	b.n	80024ba <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002562:	2b01      	cmp	r3, #1
 8002564:	d100      	bne.n	8002568 <HAL_RCC_OscConfig+0x3c4>
 8002566:	e715      	b.n	8002394 <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002568:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 800256a:	686a      	ldr	r2, [r5, #4]
        pll_config2 = RCC->CFGR2;
 800256c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002570:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 8002572:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002574:	4013      	ands	r3, r2
 8002576:	42ab      	cmp	r3, r5
 8002578:	d000      	beq.n	800257c <HAL_RCC_OscConfig+0x3d8>
 800257a:	e70c      	b.n	8002396 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800257c:	230f      	movs	r3, #15
 800257e:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002580:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002582:	428b      	cmp	r3, r1
 8002584:	d000      	beq.n	8002588 <HAL_RCC_OscConfig+0x3e4>
 8002586:	e706      	b.n	8002396 <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002588:	20f0      	movs	r0, #240	; 0xf0
 800258a:	0380      	lsls	r0, r0, #14
 800258c:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800258e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002590:	1a10      	subs	r0, r2, r0
 8002592:	1e43      	subs	r3, r0, #1
 8002594:	4198      	sbcs	r0, r3
  return HAL_OK;
 8002596:	b2c0      	uxtb	r0, r0
 8002598:	e6fd      	b.n	8002396 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 800259a:	2104      	movs	r1, #4
 800259c:	4d2a      	ldr	r5, [pc, #168]	; (8002648 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800259e:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80025a0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80025a2:	430a      	orrs	r2, r1
 80025a4:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80025a6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80025a8:	4313      	orrs	r3, r2
 80025aa:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80025ac:	f7ff fb86 	bl	8001cbc <HAL_GetTick>
 80025b0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025b2:	e005      	b.n	80025c0 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025b4:	f7ff fb82 	bl	8001cbc <HAL_GetTick>
 80025b8:	1b80      	subs	r0, r0, r6
 80025ba:	2802      	cmp	r0, #2
 80025bc:	d900      	bls.n	80025c0 <HAL_RCC_OscConfig+0x41c>
 80025be:	e72c      	b.n	800241a <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80025c2:	421f      	tst	r7, r3
 80025c4:	d0f6      	beq.n	80025b4 <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025c6:	21f8      	movs	r1, #248	; 0xf8
 80025c8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80025ca:	69a3      	ldr	r3, [r4, #24]
 80025cc:	438a      	bics	r2, r1
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	636b      	str	r3, [r5, #52]	; 0x34
 80025d4:	e6b2      	b.n	800233c <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 80025d6:	682b      	ldr	r3, [r5, #0]
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025da:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4013      	ands	r3, r2
 80025de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025e0:	f7ff fb6c 	bl	8001cbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e4:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80025e6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e8:	e005      	b.n	80025f6 <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ea:	f7ff fb67 	bl	8001cbc <HAL_GetTick>
 80025ee:	1b80      	subs	r0, r0, r6
 80025f0:	2802      	cmp	r0, #2
 80025f2:	d900      	bls.n	80025f6 <HAL_RCC_OscConfig+0x452>
 80025f4:	e711      	b.n	800241a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f6:	682b      	ldr	r3, [r5, #0]
 80025f8:	423b      	tst	r3, r7
 80025fa:	d1f6      	bne.n	80025ea <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	220f      	movs	r2, #15
 80025fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	4e11      	ldr	r6, [pc, #68]	; (8002648 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002602:	4393      	bics	r3, r2
 8002604:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002606:	4313      	orrs	r3, r2
 8002608:	62eb      	str	r3, [r5, #44]	; 0x2c
 800260a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800260c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800260e:	686a      	ldr	r2, [r5, #4]
 8002610:	430b      	orrs	r3, r1
 8002612:	4910      	ldr	r1, [pc, #64]	; (8002654 <HAL_RCC_OscConfig+0x4b0>)
 8002614:	400a      	ands	r2, r1
 8002616:	4313      	orrs	r3, r2
 8002618:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	682a      	ldr	r2, [r5, #0]
 800261e:	045b      	lsls	r3, r3, #17
 8002620:	4313      	orrs	r3, r2
 8002622:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002624:	f7ff fb4a 	bl	8001cbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002628:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800262a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262c:	04ad      	lsls	r5, r5, #18
 800262e:	e005      	b.n	800263c <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002630:	f7ff fb44 	bl	8001cbc <HAL_GetTick>
 8002634:	1b00      	subs	r0, r0, r4
 8002636:	2802      	cmp	r0, #2
 8002638:	d900      	bls.n	800263c <HAL_RCC_OscConfig+0x498>
 800263a:	e6ee      	b.n	800241a <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263c:	6833      	ldr	r3, [r6, #0]
 800263e:	422b      	tst	r3, r5
 8002640:	d0f6      	beq.n	8002630 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8002642:	2000      	movs	r0, #0
 8002644:	e6a7      	b.n	8002396 <HAL_RCC_OscConfig+0x1f2>
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	40021000 	.word	0x40021000
 800264c:	efffffff 	.word	0xefffffff
 8002650:	feffffff 	.word	0xfeffffff
 8002654:	ffc2ffff 	.word	0xffc2ffff

08002658 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265a:	46ce      	mov	lr, r9
 800265c:	4647      	mov	r7, r8
 800265e:	b580      	push	{r7, lr}
 8002660:	0004      	movs	r4, r0
 8002662:	000d      	movs	r5, r1
 8002664:	b089      	sub	sp, #36	; 0x24
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002666:	2800      	cmp	r0, #0
 8002668:	d00d      	beq.n	8002686 <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800266a:	2301      	movs	r3, #1
 800266c:	4950      	ldr	r1, [pc, #320]	; (80027b0 <HAL_RCC_ClockConfig+0x158>)
 800266e:	680a      	ldr	r2, [r1, #0]
 8002670:	401a      	ands	r2, r3
 8002672:	42aa      	cmp	r2, r5
 8002674:	d20d      	bcs.n	8002692 <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	680a      	ldr	r2, [r1, #0]
 8002678:	439a      	bics	r2, r3
 800267a:	432a      	orrs	r2, r5
 800267c:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	680a      	ldr	r2, [r1, #0]
 8002680:	4013      	ands	r3, r2
 8002682:	42ab      	cmp	r3, r5
 8002684:	d005      	beq.n	8002692 <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 8002686:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8002688:	b009      	add	sp, #36	; 0x24
 800268a:	bcc0      	pop	{r6, r7}
 800268c:	46b9      	mov	r9, r7
 800268e:	46b0      	mov	r8, r6
 8002690:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	079a      	lsls	r2, r3, #30
 8002696:	d50e      	bpl.n	80026b6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	075a      	lsls	r2, r3, #29
 800269a:	d505      	bpl.n	80026a8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800269c:	22e0      	movs	r2, #224	; 0xe0
 800269e:	4945      	ldr	r1, [pc, #276]	; (80027b4 <HAL_RCC_ClockConfig+0x15c>)
 80026a0:	00d2      	lsls	r2, r2, #3
 80026a2:	6848      	ldr	r0, [r1, #4]
 80026a4:	4302      	orrs	r2, r0
 80026a6:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	20f0      	movs	r0, #240	; 0xf0
 80026aa:	4942      	ldr	r1, [pc, #264]	; (80027b4 <HAL_RCC_ClockConfig+0x15c>)
 80026ac:	684a      	ldr	r2, [r1, #4]
 80026ae:	4382      	bics	r2, r0
 80026b0:	68a0      	ldr	r0, [r4, #8]
 80026b2:	4302      	orrs	r2, r0
 80026b4:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b6:	07db      	lsls	r3, r3, #31
 80026b8:	d522      	bpl.n	8002700 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026bc:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c0:	2a01      	cmp	r2, #1
 80026c2:	d067      	beq.n	8002794 <HAL_RCC_ClockConfig+0x13c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c4:	2a02      	cmp	r2, #2
 80026c6:	d062      	beq.n	800278e <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	079b      	lsls	r3, r3, #30
 80026ca:	d5dc      	bpl.n	8002686 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026cc:	2103      	movs	r1, #3
 80026ce:	4e39      	ldr	r6, [pc, #228]	; (80027b4 <HAL_RCC_ClockConfig+0x15c>)
 80026d0:	6873      	ldr	r3, [r6, #4]
 80026d2:	438b      	bics	r3, r1
 80026d4:	4313      	orrs	r3, r2
 80026d6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80026d8:	f7ff faf0 	bl	8001cbc <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026dc:	230c      	movs	r3, #12
 80026de:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <HAL_RCC_ClockConfig+0x160>)
    tickstart = HAL_GetTick();
 80026e2:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e004      	b.n	80026f2 <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7ff fae8 	bl	8001cbc <HAL_GetTick>
 80026ec:	1bc0      	subs	r0, r0, r7
 80026ee:	4548      	cmp	r0, r9
 80026f0:	d853      	bhi.n	800279a <HAL_RCC_ClockConfig+0x142>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4643      	mov	r3, r8
 80026f4:	6872      	ldr	r2, [r6, #4]
 80026f6:	401a      	ands	r2, r3
 80026f8:	6863      	ldr	r3, [r4, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1f3      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	2101      	movs	r1, #1
 8002702:	4a2b      	ldr	r2, [pc, #172]	; (80027b0 <HAL_RCC_ClockConfig+0x158>)
 8002704:	6813      	ldr	r3, [r2, #0]
 8002706:	400b      	ands	r3, r1
 8002708:	42ab      	cmp	r3, r5
 800270a:	d905      	bls.n	8002718 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270c:	6813      	ldr	r3, [r2, #0]
 800270e:	438b      	bics	r3, r1
 8002710:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	4219      	tst	r1, r3
 8002716:	d1b6      	bne.n	8002686 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	075b      	lsls	r3, r3, #29
 800271c:	d506      	bpl.n	800272c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800271e:	4a25      	ldr	r2, [pc, #148]	; (80027b4 <HAL_RCC_ClockConfig+0x15c>)
 8002720:	4926      	ldr	r1, [pc, #152]	; (80027bc <HAL_RCC_ClockConfig+0x164>)
 8002722:	6853      	ldr	r3, [r2, #4]
 8002724:	400b      	ands	r3, r1
 8002726:	68e1      	ldr	r1, [r4, #12]
 8002728:	430b      	orrs	r3, r1
 800272a:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800272c:	4669      	mov	r1, sp
 800272e:	000a      	movs	r2, r1
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_RCC_ClockConfig+0x168>)
 8002732:	cb31      	ldmia	r3!, {r0, r4, r5}
 8002734:	c231      	stmia	r2!, {r0, r4, r5}
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6013      	str	r3, [r2, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800273a:	aa04      	add	r2, sp, #16
 800273c:	0010      	movs	r0, r2
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_RCC_ClockConfig+0x16c>)
 8002740:	cb70      	ldmia	r3!, {r4, r5, r6}
 8002742:	c070      	stmia	r0!, {r4, r5, r6}
 8002744:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002746:	4d1b      	ldr	r5, [pc, #108]	; (80027b4 <HAL_RCC_ClockConfig+0x15c>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002748:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800274a:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800274c:	6868      	ldr	r0, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800274e:	4003      	ands	r3, r0
 8002750:	2b08      	cmp	r3, #8
 8002752:	d00e      	beq.n	8002772 <HAL_RCC_ClockConfig+0x11a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002754:	481c      	ldr	r0, [pc, #112]	; (80027c8 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <HAL_RCC_ClockConfig+0x15c>)
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_RCC_ClockConfig+0x174>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	0f1b      	lsrs	r3, r3, #28
 8002760:	5cd3      	ldrb	r3, [r2, r3]
 8002762:	40d8      	lsrs	r0, r3
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <HAL_RCC_ClockConfig+0x178>)
 8002766:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002768:	2000      	movs	r0, #0
 800276a:	f7ff fa65 	bl	8001c38 <HAL_InitTick>
  return HAL_OK;
 800276e:	2000      	movs	r0, #0
 8002770:	e78a      	b.n	8002688 <HAL_RCC_ClockConfig+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002772:	3307      	adds	r3, #7
 8002774:	0c84      	lsrs	r4, r0, #18
 8002776:	401c      	ands	r4, r3
 8002778:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800277a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800277c:	400b      	ands	r3, r1
 800277e:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002780:	03c3      	lsls	r3, r0, #15
 8002782:	d50c      	bpl.n	800279e <HAL_RCC_ClockConfig+0x146>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002784:	4810      	ldr	r0, [pc, #64]	; (80027c8 <HAL_RCC_ClockConfig+0x170>)
 8002786:	f7fd fcbf 	bl	8000108 <__udivsi3>
 800278a:	4360      	muls	r0, r4
 800278c:	e7e3      	b.n	8002756 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	019b      	lsls	r3, r3, #6
 8002790:	d49c      	bmi.n	80026cc <HAL_RCC_ClockConfig+0x74>
 8002792:	e778      	b.n	8002686 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002794:	039b      	lsls	r3, r3, #14
 8002796:	d499      	bmi.n	80026cc <HAL_RCC_ClockConfig+0x74>
 8002798:	e775      	b.n	8002686 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800279a:	2003      	movs	r0, #3
 800279c:	e774      	b.n	8002688 <HAL_RCC_ClockConfig+0x30>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800279e:	0163      	lsls	r3, r4, #5
 80027a0:	1b1b      	subs	r3, r3, r4
 80027a2:	0198      	lsls	r0, r3, #6
 80027a4:	1ac0      	subs	r0, r0, r3
 80027a6:	00c0      	lsls	r0, r0, #3
 80027a8:	1900      	adds	r0, r0, r4
 80027aa:	0200      	lsls	r0, r0, #8
 80027ac:	e7d3      	b.n	8002756 <HAL_RCC_ClockConfig+0xfe>
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	00001388 	.word	0x00001388
 80027bc:	fffff8ff 	.word	0xfffff8ff
 80027c0:	08002e30 	.word	0x08002e30
 80027c4:	08002e44 	.word	0x08002e44
 80027c8:	007a1200 	.word	0x007a1200
 80027cc:	08002e20 	.word	0x08002e20
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d6:	46ce      	mov	lr, r9
 80027d8:	4647      	mov	r7, r8
 80027da:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027dc:	6803      	ldr	r3, [r0, #0]
{
 80027de:	0004      	movs	r4, r0
 80027e0:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027e2:	03da      	lsls	r2, r3, #15
 80027e4:	d530      	bpl.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	4b43      	ldr	r3, [pc, #268]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80027ea:	0552      	lsls	r2, r2, #21
 80027ec:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f0:	4211      	tst	r1, r2
 80027f2:	d041      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	2680      	movs	r6, #128	; 0x80
 80027f6:	4d41      	ldr	r5, [pc, #260]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80027f8:	0076      	lsls	r6, r6, #1
 80027fa:	682b      	ldr	r3, [r5, #0]
 80027fc:	4233      	tst	r3, r6
 80027fe:	d049      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002800:	4d3d      	ldr	r5, [pc, #244]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002802:	22c0      	movs	r2, #192	; 0xc0
 8002804:	6a2b      	ldr	r3, [r5, #32]
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	0018      	movs	r0, r3
 800280a:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800280c:	4213      	tst	r3, r2
 800280e:	d063      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002810:	6861      	ldr	r1, [r4, #4]
 8002812:	400a      	ands	r2, r1
 8002814:	4282      	cmp	r2, r0
 8002816:	d00e      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002818:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800281a:	6a28      	ldr	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800281c:	6a2e      	ldr	r6, [r5, #32]
 800281e:	0252      	lsls	r2, r2, #9
 8002820:	4332      	orrs	r2, r6
 8002822:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002824:	6a2a      	ldr	r2, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002826:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002828:	4e36      	ldr	r6, [pc, #216]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800282a:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 800282c:	4032      	ands	r2, r6
 800282e:	622a      	str	r2, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002830:	622b      	str	r3, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002832:	07c3      	lsls	r3, r0, #31
 8002834:	d43f      	bmi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002836:	4a30      	ldr	r2, [pc, #192]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002838:	4831      	ldr	r0, [pc, #196]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800283a:	6a13      	ldr	r3, [r2, #32]
 800283c:	4003      	ands	r3, r0
 800283e:	430b      	orrs	r3, r1
 8002840:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002842:	2f01      	cmp	r7, #1
 8002844:	d051      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	07da      	lsls	r2, r3, #31
 800284a:	d506      	bpl.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284c:	2003      	movs	r0, #3
 800284e:	492a      	ldr	r1, [pc, #168]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002850:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002852:	4382      	bics	r2, r0
 8002854:	68a0      	ldr	r0, [r4, #8]
 8002856:	4302      	orrs	r2, r0
 8002858:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800285a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800285c:	069b      	lsls	r3, r3, #26
 800285e:	d506      	bpl.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002860:	2110      	movs	r1, #16
 8002862:	4a25      	ldr	r2, [pc, #148]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002864:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002866:	438b      	bics	r3, r1
 8002868:	68e1      	ldr	r1, [r4, #12]
 800286a:	430b      	orrs	r3, r1
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800286e:	b003      	add	sp, #12
 8002870:	bcc0      	pop	{r6, r7}
 8002872:	46b9      	mov	r9, r7
 8002874:	46b0      	mov	r8, r6
 8002876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287c:	4d1f      	ldr	r5, [pc, #124]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4311      	orrs	r1, r2
 8002880:	61d9      	str	r1, [r3, #28]
 8002882:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	401a      	ands	r2, r3
 8002888:	9201      	str	r2, [sp, #4]
 800288a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 800288e:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	4233      	tst	r3, r6
 8002892:	d1b5      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002894:	682b      	ldr	r3, [r5, #0]
 8002896:	4333      	orrs	r3, r6
 8002898:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800289a:	f7ff fa0f 	bl	8001cbc <HAL_GetTick>
 800289e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	682b      	ldr	r3, [r5, #0]
 80028a2:	4233      	tst	r3, r6
 80028a4:	d1ac      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a6:	f7ff fa09 	bl	8001cbc <HAL_GetTick>
 80028aa:	4643      	mov	r3, r8
 80028ac:	1ac0      	subs	r0, r0, r3
 80028ae:	2864      	cmp	r0, #100	; 0x64
 80028b0:	d9f6      	bls.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 80028b2:	2003      	movs	r0, #3
 80028b4:	e7db      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 80028b6:	f7ff fa01 	bl	8001cbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	2302      	movs	r3, #2
 80028bc:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 80028c0:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	e004      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7ff f9f9 	bl	8001cbc <HAL_GetTick>
 80028ca:	1b80      	subs	r0, r0, r6
 80028cc:	4548      	cmp	r0, r9
 80028ce:	d8f0      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	4642      	mov	r2, r8
 80028d2:	6a2b      	ldr	r3, [r5, #32]
 80028d4:	421a      	tst	r2, r3
 80028d6:	d0f6      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80028da:	4809      	ldr	r0, [pc, #36]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80028dc:	6a13      	ldr	r3, [r2, #32]
 80028de:	6861      	ldr	r1, [r4, #4]
 80028e0:	4003      	ands	r3, r0
 80028e2:	430b      	orrs	r3, r1
 80028e4:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 80028e6:	2f01      	cmp	r7, #1
 80028e8:	d1ad      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	69d3      	ldr	r3, [r2, #28]
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80028ee:	400b      	ands	r3, r1
 80028f0:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	e7a8      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40007000 	.word	0x40007000
 8002900:	fffffcff 	.word	0xfffffcff
 8002904:	fffeffff 	.word	0xfffeffff
 8002908:	00001388 	.word	0x00001388
 800290c:	efffffff 	.word	0xefffffff

08002910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002912:	46d6      	mov	lr, sl
 8002914:	464f      	mov	r7, r9
 8002916:	4646      	mov	r6, r8
 8002918:	0004      	movs	r4, r0
 800291a:	b5c0      	push	{r6, r7, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800291c:	2800      	cmp	r0, #0
 800291e:	d100      	bne.n	8002922 <HAL_SPI_Init+0x12>
 8002920:	e08e      	b.n	8002a40 <HAL_SPI_Init+0x130>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002922:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002924:	2d00      	cmp	r5, #0
 8002926:	d065      	beq.n	80029f4 <HAL_SPI_Init+0xe4>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800292c:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002932:	335d      	adds	r3, #93	; 0x5d
 8002934:	5ce3      	ldrb	r3, [r4, r3]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d068      	beq.n	8002a0e <HAL_SPI_Init+0xfe>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800293c:	235d      	movs	r3, #93	; 0x5d
 800293e:	2202      	movs	r2, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002940:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8002942:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8002944:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002946:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002948:	6813      	ldr	r3, [r2, #0]
 800294a:	438b      	bics	r3, r1
 800294c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800294e:	23e0      	movs	r3, #224	; 0xe0
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4298      	cmp	r0, r3
 8002954:	d962      	bls.n	8002a1c <HAL_SPI_Init+0x10c>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002956:	23f0      	movs	r3, #240	; 0xf0
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	4298      	cmp	r0, r3
 800295c:	d000      	beq.n	8002960 <HAL_SPI_Init+0x50>
 800295e:	e071      	b.n	8002a44 <HAL_SPI_Init+0x134>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002964:	019b      	lsls	r3, r3, #6
 8002966:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002968:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800296a:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800296c:	469a      	mov	sl, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800296e:	2382      	movs	r3, #130	; 0x82
 8002970:	6866      	ldr	r6, [r4, #4]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4033      	ands	r3, r6
 8002976:	2684      	movs	r6, #132	; 0x84
 8002978:	68a7      	ldr	r7, [r4, #8]
 800297a:	0236      	lsls	r6, r6, #8
 800297c:	403e      	ands	r6, r7
 800297e:	4333      	orrs	r3, r6
 8002980:	2602      	movs	r6, #2
 8002982:	6927      	ldr	r7, [r4, #16]
 8002984:	69a1      	ldr	r1, [r4, #24]
 8002986:	403e      	ands	r6, r7
 8002988:	4333      	orrs	r3, r6
 800298a:	2601      	movs	r6, #1
 800298c:	6967      	ldr	r7, [r4, #20]
 800298e:	46b1      	mov	r9, r6
 8002990:	4037      	ands	r7, r6
 8002992:	433b      	orrs	r3, r7
 8002994:	2780      	movs	r7, #128	; 0x80
 8002996:	00bf      	lsls	r7, r7, #2
 8002998:	400f      	ands	r7, r1
 800299a:	433b      	orrs	r3, r7
 800299c:	2738      	movs	r7, #56	; 0x38
 800299e:	69e6      	ldr	r6, [r4, #28]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029a0:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029a2:	4037      	ands	r7, r6
 80029a4:	2680      	movs	r6, #128	; 0x80
 80029a6:	433b      	orrs	r3, r7
 80029a8:	0037      	movs	r7, r6
 80029aa:	6a26      	ldr	r6, [r4, #32]
 80029ac:	4037      	ands	r7, r6
 80029ae:	4666      	mov	r6, ip
 80029b0:	433b      	orrs	r3, r7
 80029b2:	4333      	orrs	r3, r6
 80029b4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029b6:	2308      	movs	r3, #8
 80029b8:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80029ba:	4657      	mov	r7, sl
 80029bc:	4033      	ands	r3, r6
 80029be:	26f0      	movs	r6, #240	; 0xf0
 80029c0:	0136      	lsls	r6, r6, #4
 80029c2:	4030      	ands	r0, r6
 80029c4:	4318      	orrs	r0, r3
 80029c6:	2304      	movs	r3, #4
 80029c8:	4019      	ands	r1, r3
 80029ca:	4308      	orrs	r0, r1
 80029cc:	2110      	movs	r1, #16
 80029ce:	400d      	ands	r5, r1
 80029d0:	4305      	orrs	r5, r0
 80029d2:	432f      	orrs	r7, r5
 80029d4:	6057      	str	r7, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029d6:	69d3      	ldr	r3, [r2, #28]
 80029d8:	491c      	ldr	r1, [pc, #112]	; (8002a4c <HAL_SPI_Init+0x13c>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
 80029da:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029dc:	400b      	ands	r3, r1
 80029de:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029e0:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80029e2:	464a      	mov	r2, r9
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029e4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029e6:	335d      	adds	r3, #93	; 0x5d
 80029e8:	54e2      	strb	r2, [r4, r3]
}
 80029ea:	bce0      	pop	{r5, r6, r7}
 80029ec:	46ba      	mov	sl, r7
 80029ee:	46b1      	mov	r9, r6
 80029f0:	46a8      	mov	r8, r5
 80029f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029f4:	2382      	movs	r3, #130	; 0x82
 80029f6:	6842      	ldr	r2, [r0, #4]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d097      	beq.n	800292e <HAL_SPI_Init+0x1e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029fe:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a00:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a02:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a04:	335d      	adds	r3, #93	; 0x5d
 8002a06:	5ce3      	ldrb	r3, [r4, r3]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d196      	bne.n	800293c <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8002a0e:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002a10:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002a12:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8002a14:	f7fe ff74 	bl	8001900 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002a1a:	e78f      	b.n	800293c <HAL_SPI_Init+0x2c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a1c:	4298      	cmp	r0, r3
 8002a1e:	d006      	beq.n	8002a2e <HAL_SPI_Init+0x11e>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	015b      	lsls	r3, r3, #5
 8002a24:	469a      	mov	sl, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	469c      	mov	ip, r3
 8002a2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a2c:	e79f      	b.n	800296e <HAL_SPI_Init+0x5e>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a32:	019b      	lsls	r3, r3, #6
 8002a34:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a3a:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a3c:	469a      	mov	sl, r3
 8002a3e:	e796      	b.n	800296e <HAL_SPI_Init+0x5e>
    return HAL_ERROR;
 8002a40:	2001      	movs	r0, #1
 8002a42:	e7d2      	b.n	80029ea <HAL_SPI_Init+0xda>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a44:	2300      	movs	r3, #0
 8002a46:	469a      	mov	sl, r3
 8002a48:	e7ed      	b.n	8002a26 <HAL_SPI_Init+0x116>
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	fffff7ff 	.word	0xfffff7ff

08002a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a50:	b510      	push	{r4, lr}
 8002a52:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a54:	d05e      	beq.n	8002b14 <HAL_TIM_Base_Init+0xc4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a56:	233d      	movs	r3, #61	; 0x3d
 8002a58:	5cc3      	ldrb	r3, [r0, r3]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d04b      	beq.n	8002af8 <HAL_TIM_Base_Init+0xa8>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	233d      	movs	r3, #61	; 0x3d
 8002a62:	2202      	movs	r2, #2
 8002a64:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a66:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a68:	492b      	ldr	r1, [pc, #172]	; (8002b18 <HAL_TIM_Base_Init+0xc8>)
  tmpcr1 = TIMx->CR1;
 8002a6a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a6c:	428a      	cmp	r2, r1
 8002a6e:	d018      	beq.n	8002aa2 <HAL_TIM_Base_Init+0x52>
 8002a70:	492a      	ldr	r1, [pc, #168]	; (8002b1c <HAL_TIM_Base_Init+0xcc>)
 8002a72:	428a      	cmp	r2, r1
 8002a74:	d045      	beq.n	8002b02 <HAL_TIM_Base_Init+0xb2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a76:	492a      	ldr	r1, [pc, #168]	; (8002b20 <HAL_TIM_Base_Init+0xd0>)
 8002a78:	428a      	cmp	r2, r1
 8002a7a:	d046      	beq.n	8002b0a <HAL_TIM_Base_Init+0xba>
 8002a7c:	4929      	ldr	r1, [pc, #164]	; (8002b24 <HAL_TIM_Base_Init+0xd4>)
 8002a7e:	428a      	cmp	r2, r1
 8002a80:	d013      	beq.n	8002aaa <HAL_TIM_Base_Init+0x5a>
 8002a82:	4929      	ldr	r1, [pc, #164]	; (8002b28 <HAL_TIM_Base_Init+0xd8>)
 8002a84:	428a      	cmp	r2, r1
 8002a86:	d010      	beq.n	8002aaa <HAL_TIM_Base_Init+0x5a>
 8002a88:	4928      	ldr	r1, [pc, #160]	; (8002b2c <HAL_TIM_Base_Init+0xdc>)
 8002a8a:	428a      	cmp	r2, r1
 8002a8c:	d00d      	beq.n	8002aaa <HAL_TIM_Base_Init+0x5a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	438b      	bics	r3, r1
 8002a92:	69a1      	ldr	r1, [r4, #24]
 8002a94:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8002a96:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a98:	68e3      	ldr	r3, [r4, #12]
 8002a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a9c:	6863      	ldr	r3, [r4, #4]
 8002a9e:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa0:	e012      	b.n	8002ac8 <HAL_TIM_Base_Init+0x78>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aa2:	2170      	movs	r1, #112	; 0x70
 8002aa4:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8002aa6:	68a1      	ldr	r1, [r4, #8]
 8002aa8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aaa:	4921      	ldr	r1, [pc, #132]	; (8002b30 <HAL_TIM_Base_Init+0xe0>)
 8002aac:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aae:	6921      	ldr	r1, [r4, #16]
 8002ab0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab2:	2180      	movs	r1, #128	; 0x80
 8002ab4:	438b      	bics	r3, r1
 8002ab6:	69a1      	ldr	r1, [r4, #24]
 8002ab8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002aba:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002abc:	68e3      	ldr	r3, [r4, #12]
 8002abe:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ac0:	6863      	ldr	r3, [r4, #4]
 8002ac2:	6293      	str	r3, [r2, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac4:	6963      	ldr	r3, [r4, #20]
 8002ac6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002acc:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8002ace:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad2:	3a08      	subs	r2, #8
 8002ad4:	54a3      	strb	r3, [r4, r2]
 8002ad6:	3201      	adds	r2, #1
 8002ad8:	54a3      	strb	r3, [r4, r2]
 8002ada:	3201      	adds	r2, #1
 8002adc:	54a3      	strb	r3, [r4, r2]
 8002ade:	3201      	adds	r2, #1
 8002ae0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae2:	3201      	adds	r2, #1
 8002ae4:	54a3      	strb	r3, [r4, r2]
 8002ae6:	3201      	adds	r2, #1
 8002ae8:	54a3      	strb	r3, [r4, r2]
 8002aea:	3201      	adds	r2, #1
 8002aec:	54a3      	strb	r3, [r4, r2]
 8002aee:	3201      	adds	r2, #1
 8002af0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002af2:	3a08      	subs	r2, #8
 8002af4:	54a3      	strb	r3, [r4, r2]
}
 8002af6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002af8:	333c      	adds	r3, #60	; 0x3c
 8002afa:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002afc:	f7fe ff68 	bl	80019d0 <HAL_TIM_Base_MspInit>
 8002b00:	e7ae      	b.n	8002a60 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b02:	2170      	movs	r1, #112	; 0x70
 8002b04:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8002b06:	68a1      	ldr	r1, [r4, #8]
 8002b08:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b0a:	4909      	ldr	r1, [pc, #36]	; (8002b30 <HAL_TIM_Base_Init+0xe0>)
 8002b0c:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b0e:	6921      	ldr	r1, [r4, #16]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	e7bc      	b.n	8002a8e <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 8002b14:	2001      	movs	r0, #1
 8002b16:	e7ee      	b.n	8002af6 <HAL_TIM_Base_Init+0xa6>
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40002000 	.word	0x40002000
 8002b24:	40014000 	.word	0x40014000
 8002b28:	40014400 	.word	0x40014400
 8002b2c:	40014800 	.word	0x40014800
 8002b30:	fffffcff 	.word	0xfffffcff

08002b34 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002b34:	223d      	movs	r2, #61	; 0x3d
 8002b36:	5c81      	ldrb	r1, [r0, r2]
{
 8002b38:	0003      	movs	r3, r0
    return HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002b3c:	2901      	cmp	r1, #1
 8002b3e:	d10f      	bne.n	8002b60 <HAL_TIM_Base_Start+0x2c>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	3101      	adds	r1, #1
 8002b42:	5499      	strb	r1, [r3, r2]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a0d      	ldr	r2, [pc, #52]	; (8002b7c <HAL_TIM_Base_Start+0x48>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00a      	beq.n	8002b62 <HAL_TIM_Base_Start+0x2e>
 8002b4c:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <HAL_TIM_Base_Start+0x4c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_TIM_Base_Start+0x2e>
 8002b52:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <HAL_TIM_Base_Start+0x50>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_TIM_Base_Start+0x2e>
    __HAL_TIM_ENABLE(htim);
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4310      	orrs	r0, r2
 8002b5c:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8002b5e:	2000      	movs	r0, #0
}
 8002b60:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b62:	2207      	movs	r2, #7
 8002b64:	6899      	ldr	r1, [r3, #8]
 8002b66:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b68:	2a06      	cmp	r2, #6
 8002b6a:	d005      	beq.n	8002b78 <HAL_TIM_Base_Start+0x44>
      __HAL_TIM_ENABLE(htim);
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8002b70:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e7f3      	b.n	8002b60 <HAL_TIM_Base_Start+0x2c>
  return HAL_OK;
 8002b78:	2000      	movs	r0, #0
 8002b7a:	e7f1      	b.n	8002b60 <HAL_TIM_Base_Start+0x2c>
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40014000 	.word	0x40014000

08002b88 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002b88:	233c      	movs	r3, #60	; 0x3c
{
 8002b8a:	b570      	push	{r4, r5, r6, lr}
 8002b8c:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8002b8e:	5cc0      	ldrb	r0, [r0, r3]
 8002b90:	2801      	cmp	r0, #1
 8002b92:	d100      	bne.n	8002b96 <HAL_TIM_ConfigClockSource+0xe>
 8002b94:	e077      	b.n	8002c86 <HAL_TIM_ConfigClockSource+0xfe>
 8002b96:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002b9a:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba2:	4d54      	ldr	r5, [pc, #336]	; (8002cf4 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpsmcr = htim->Instance->SMCR;
 8002ba4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ba6:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002ba8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002baa:	680b      	ldr	r3, [r1, #0]
 8002bac:	2b60      	cmp	r3, #96	; 0x60
 8002bae:	d100      	bne.n	8002bb2 <HAL_TIM_ConfigClockSource+0x2a>
 8002bb0:	e06b      	b.n	8002c8a <HAL_TIM_ConfigClockSource+0x102>
 8002bb2:	d825      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x78>
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d100      	bne.n	8002bba <HAL_TIM_ConfigClockSource+0x32>
 8002bb8:	e082      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x138>
 8002bba:	d954      	bls.n	8002c66 <HAL_TIM_ConfigClockSource+0xde>
 8002bbc:	2b50      	cmp	r3, #80	; 0x50
 8002bbe:	d13d      	bne.n	8002c3c <HAL_TIM_ConfigClockSource+0xb4>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bc0:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc2:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc6:	43a3      	bics	r3, r4
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bc8:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bca:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bcc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bce:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd0:	43a3      	bics	r3, r4
 8002bd2:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd4:	010b      	lsls	r3, r1, #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bd6:	210a      	movs	r1, #10
 8002bd8:	438e      	bics	r6, r1
 8002bda:	0031      	movs	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bdc:	4323      	orrs	r3, r4
  tmpccer |= TIM_ICPolarity;
 8002bde:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002be0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002be2:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002be4:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002be6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002be8:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bea:	3919      	subs	r1, #25
 8002bec:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bee:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002bf2:	233d      	movs	r3, #61	; 0x3d
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	54d1      	strb	r1, [r2, r3]
}
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002c00:	2480      	movs	r4, #128	; 0x80
 8002c02:	0164      	lsls	r4, r4, #5
 8002c04:	42a3      	cmp	r3, r4
 8002c06:	d03c      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xfa>
 8002c08:	2480      	movs	r4, #128	; 0x80
 8002c0a:	01a4      	lsls	r4, r4, #6
 8002c0c:	42a3      	cmp	r3, r4
 8002c0e:	d117      	bne.n	8002c40 <HAL_TIM_ConfigClockSource+0xb8>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c10:	6883      	ldr	r3, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c12:	4c39      	ldr	r4, [pc, #228]	; (8002cf8 <HAL_TIM_ConfigClockSource+0x170>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c14:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c16:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c18:	688b      	ldr	r3, [r1, #8]
 8002c1a:	68c9      	ldr	r1, [r1, #12]
 8002c1c:	432b      	orrs	r3, r5
 8002c1e:	0209      	lsls	r1, r1, #8
 8002c20:	430b      	orrs	r3, r1
 8002c22:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c24:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	6881      	ldr	r1, [r0, #8]
 8002c2a:	01db      	lsls	r3, r3, #7
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c30:	2000      	movs	r0, #0
      break;
 8002c32:	e7de      	b.n	8002bf2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8002c34:	2110      	movs	r1, #16
 8002c36:	001c      	movs	r4, r3
 8002c38:	438c      	bics	r4, r1
 8002c3a:	d019      	beq.n	8002c70 <HAL_TIM_ConfigClockSource+0xe8>
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	e7d8      	b.n	8002bf2 <HAL_TIM_ConfigClockSource+0x6a>
 8002c40:	2b70      	cmp	r3, #112	; 0x70
 8002c42:	d1fb      	bne.n	8002c3c <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr = TIMx->SMCR;
 8002c44:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c46:	4c2c      	ldr	r4, [pc, #176]	; (8002cf8 <HAL_TIM_ConfigClockSource+0x170>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c48:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c4a:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c4c:	688b      	ldr	r3, [r1, #8]
 8002c4e:	68c9      	ldr	r1, [r1, #12]
 8002c50:	432b      	orrs	r3, r5
 8002c52:	0209      	lsls	r1, r1, #8
 8002c54:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c56:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c58:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8002c5a:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002c5c:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c5e:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002c60:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c62:	2000      	movs	r0, #0
      break;
 8002c64:	e7c5      	b.n	8002bf2 <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d002      	beq.n	8002c70 <HAL_TIM_ConfigClockSource+0xe8>
 8002c6a:	d9e3      	bls.n	8002c34 <HAL_TIM_ConfigClockSource+0xac>
 8002c6c:	2b30      	cmp	r3, #48	; 0x30
 8002c6e:	d1e5      	bne.n	8002c3c <HAL_TIM_ConfigClockSource+0xb4>
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c70:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002c72:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c74:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c76:	430b      	orrs	r3, r1
 8002c78:	2107      	movs	r1, #7
 8002c7a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002c7c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7e:	2000      	movs	r0, #0
}
 8002c80:	e7b7      	b.n	8002bf2 <HAL_TIM_ConfigClockSource+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2000      	movs	r0, #0
 8002c84:	e7b5      	b.n	8002bf2 <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 8002c86:	2002      	movs	r0, #2
 8002c88:	e7b9      	b.n	8002bfe <HAL_TIM_ConfigClockSource+0x76>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c8a:	68cd      	ldr	r5, [r1, #12]
 8002c8c:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c8e:	2110      	movs	r1, #16
 8002c90:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c92:	4e1a      	ldr	r6, [pc, #104]	; (8002cfc <HAL_TIM_ConfigClockSource+0x174>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c94:	438b      	bics	r3, r1
 8002c96:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c98:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c9a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c9c:	400e      	ands	r6, r1
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c9e:	0329      	lsls	r1, r5, #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca0:	25a0      	movs	r5, #160	; 0xa0
 8002ca2:	43ab      	bics	r3, r5
 8002ca4:	001d      	movs	r5, r3
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ca6:	4331      	orrs	r1, r6
  TIMx->CCMR1 = tmpccmr1 ;
 8002ca8:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002caa:	2170      	movs	r1, #112	; 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cac:	0123      	lsls	r3, r4, #4
 8002cae:	432b      	orrs	r3, r5
  TIMx->CCER = tmpccer;
 8002cb0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002cb2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cb4:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cb6:	3909      	subs	r1, #9
 8002cb8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002cba:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2000      	movs	r0, #0
}
 8002cbe:	e798      	b.n	8002bf2 <HAL_TIM_ConfigClockSource+0x6a>
  tmpccer = TIMx->CCER;
 8002cc0:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc2:	6a03      	ldr	r3, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cc6:	43a3      	bics	r3, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc8:	24f0      	movs	r4, #240	; 0xf0
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cca:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ccc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cce:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cd0:	43a3      	bics	r3, r4
 8002cd2:	001c      	movs	r4, r3
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd4:	010b      	lsls	r3, r1, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cd6:	210a      	movs	r1, #10
 8002cd8:	438e      	bics	r6, r1
 8002cda:	0031      	movs	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cdc:	4323      	orrs	r3, r4
  tmpccer |= TIM_ICPolarity;
 8002cde:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002ce0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ce2:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ce4:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8002ce6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ce8:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cea:	3929      	subs	r1, #41	; 0x29
 8002cec:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002cee:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2000      	movs	r0, #0
}
 8002cf2:	e77e      	b.n	8002bf2 <HAL_TIM_ConfigClockSource+0x6a>
 8002cf4:	ffff0088 	.word	0xffff0088
 8002cf8:	ffff00ff 	.word	0xffff00ff
 8002cfc:	ffff0fff 	.word	0xffff0fff

08002d00 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d00:	233c      	movs	r3, #60	; 0x3c
{
 8002d02:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002d04:	5cc3      	ldrb	r3, [r0, r3]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d020      	beq.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0a:	233d      	movs	r3, #61	; 0x3d
 8002d0c:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d0e:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8002d12:	6803      	ldr	r3, [r0, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002d16:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d18:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d1a:	680d      	ldr	r5, [r1, #0]
 8002d1c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d20:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d005      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d002      	beq.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8002d2c:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d104      	bne.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d36:	684a      	ldr	r2, [r1, #4]
 8002d38:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d3a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	233d      	movs	r3, #61	; 0x3d
 8002d3e:	2201      	movs	r2, #1
 8002d40:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002d42:	2200      	movs	r2, #0
 8002d44:	3b01      	subs	r3, #1
 8002d46:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002d48:	2000      	movs	r0, #0
}
 8002d4a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	e7fc      	b.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40014000 	.word	0x40014000

08002d5c <__libc_init_array>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	2600      	movs	r6, #0
 8002d60:	4d0c      	ldr	r5, [pc, #48]	; (8002d94 <__libc_init_array+0x38>)
 8002d62:	4c0d      	ldr	r4, [pc, #52]	; (8002d98 <__libc_init_array+0x3c>)
 8002d64:	1b64      	subs	r4, r4, r5
 8002d66:	10a4      	asrs	r4, r4, #2
 8002d68:	42a6      	cmp	r6, r4
 8002d6a:	d109      	bne.n	8002d80 <__libc_init_array+0x24>
 8002d6c:	2600      	movs	r6, #0
 8002d6e:	f000 f82b 	bl	8002dc8 <_init>
 8002d72:	4d0a      	ldr	r5, [pc, #40]	; (8002d9c <__libc_init_array+0x40>)
 8002d74:	4c0a      	ldr	r4, [pc, #40]	; (8002da0 <__libc_init_array+0x44>)
 8002d76:	1b64      	subs	r4, r4, r5
 8002d78:	10a4      	asrs	r4, r4, #2
 8002d7a:	42a6      	cmp	r6, r4
 8002d7c:	d105      	bne.n	8002d8a <__libc_init_array+0x2e>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	00b3      	lsls	r3, r6, #2
 8002d82:	58eb      	ldr	r3, [r5, r3]
 8002d84:	4798      	blx	r3
 8002d86:	3601      	adds	r6, #1
 8002d88:	e7ee      	b.n	8002d68 <__libc_init_array+0xc>
 8002d8a:	00b3      	lsls	r3, r6, #2
 8002d8c:	58eb      	ldr	r3, [r5, r3]
 8002d8e:	4798      	blx	r3
 8002d90:	3601      	adds	r6, #1
 8002d92:	e7f2      	b.n	8002d7a <__libc_init_array+0x1e>
 8002d94:	08002e58 	.word	0x08002e58
 8002d98:	08002e58 	.word	0x08002e58
 8002d9c:	08002e58 	.word	0x08002e58
 8002da0:	08002e5c 	.word	0x08002e5c

08002da4 <memcpy>:
 8002da4:	2300      	movs	r3, #0
 8002da6:	b510      	push	{r4, lr}
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d100      	bne.n	8002dae <memcpy+0xa>
 8002dac:	bd10      	pop	{r4, pc}
 8002dae:	5ccc      	ldrb	r4, [r1, r3]
 8002db0:	54c4      	strb	r4, [r0, r3]
 8002db2:	3301      	adds	r3, #1
 8002db4:	e7f8      	b.n	8002da8 <memcpy+0x4>

08002db6 <memset>:
 8002db6:	0003      	movs	r3, r0
 8002db8:	1882      	adds	r2, r0, r2
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d100      	bne.n	8002dc0 <memset+0xa>
 8002dbe:	4770      	bx	lr
 8002dc0:	7019      	strb	r1, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	e7f9      	b.n	8002dba <memset+0x4>
	...

08002dc8 <_init>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dce:	bc08      	pop	{r3}
 8002dd0:	469e      	mov	lr, r3
 8002dd2:	4770      	bx	lr

08002dd4 <_fini>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dda:	bc08      	pop	{r3}
 8002ddc:	469e      	mov	lr, r3
 8002dde:	4770      	bx	lr
